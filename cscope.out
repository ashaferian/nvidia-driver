cscope 15 /usr/home/ashafer/NVIDIA_FREEBSD               0003068737
	@src/common/inc/cpuopsys.h

26 #i‚de‡
CPUOPSYS_H


27 
	#CPUOPSYS_H


	)

33 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN16
)

34 
	#NV_WINDOWS


	)

36 #i‡
deföed
(
_WIN32_WINNT
)

37 
	#NV_WINDOWS_NT


	)

38 #ñi‡
deföed
(
_WIN32_WCE
)

39 
	#NV_WINDOWS_CE


	)

40 #ñi‡!
deföed
(
NV_MODS
)

41 
	#NV_WINDOWS_9X


	)

46 #i‡
deföed
(
__löux__
Ë&& !deföed(
NV_LINUX
Ë&& !deföed(
NV_VMWARE
)

47 
	#NV_LINUX


	)

50 #i‡
deföed
(
__VMWARE__
Ë&& !deföed(
NV_VMWARE
)

51 
	#NV_VMWARE


	)

55 #i‡
deföed
(
__sun__
Ë&& deföed(
__svr4__
Ë&& !deföed(
NV_SUNOS
)

56 
	#NV_SUNOS


	)

60 #i‡
deföed
(
__SUNPRO_C
Ë|| deföed(
__SUNPRO_CC
)

61 
	#NV_SUNPRO_C


	)

62 
	#NV_SUNOS


	)

65 #i‡
deföed
(
__FªeBSD__
Ë&& !deföed(
NV_BSD
)

66 
	#NV_BSD


	)

70 #i‡(
deföed
(
__unix__
Ë|| deföed(
__unix
Ë|| deföed(
__INTEGRITY
ËË&& !deföed(
nvmacosx
Ë&& !deföed(
vxw‹ks
Ë&& !deföed(
NV_UNIX
Ë&& !deföed(
__QNX__
Ë&& !deföed(
__QNXNTO__
)

71 
	#NV_UNIX


	)

74 #i‡(
deföed
(
__QNX__
Ë|| deföed(
__QNXNTO__
)Ë&& !deföed(
NV_QNX
)

75 
	#NV_QNX


	)

78 #i‡(
deföed
(
__ANDROID__
Ë|| deföed(
ANDROID
)Ë&& !deföed(
NV_ANDROID
)

79 
	#NV_ANDROID


	)

82 #i‡
deföed
(
__hos__
Ë&& !deföed(
NV_HOS
)

83 
	#NV_HOS


	)

87 #i‡
deföed
(
macötosh
Ë|| deföed(
__APPLE__
)

88 
	#NV_MACINTOSH


	)

89 #i‡
deföed
(
__MACH__
)

90 
	#NV_MACINTOSH_OSX


	)

92 
	#NV_MACINTOSH_OS9


	)

94 #i‡
deföed
(
__LP64__
)

95 
	#NV_MACINTOSH_64


	)

103 #i‡
deföed
(
__vxw‹ks
Ë|| deföed(
vxw‹ks
)

104 
	#NV_VXWORKS


	)

108 #i‡
deföed
(
__INTEGRITY
)

109 #i‡!
deföed
(
NV_INTEGRITY
)

110 
	#NV_INTEGRITY


	)

117 #i‡((
deföed
(
_M_IX86
Ë|| deföed(
__i386__
Ë|| deföed(
__i386
)Ë&& !deföed(
NVCPU_X86
))

120 
	#NVCPU_X86


	)

121 
	#NVCPU_MIN_PAGE_SHIFT
 12

	)

124 #i‡
deföed
(
_WIN32
Ë&& deföed(
_M_IA64
)

125 
	#NVCPU_IA64_WINDOWS


	)

127 #i‡
deföed
(
NV_LINUX
Ë&& deföed(
__ü64__
)

128 
	#NVCPU_IA64_LINUX


	)

130 #i‡
deföed
(
NVCPU_IA64_WINDOWS
Ë|| deföed(
NVCPU_IA64_LINUX
Ë|| deföed(
IA64
)

131 
	#NVCPU_IA64


	)

134 #i‡(
deföed
(
NV_MACINTOSH
Ë&& !(deföed(
__i386__
Ë|| deföed(
__x86_64__
))Ë|| deföed(
__PPC__
Ë|| deföed(
__µc
)

135 #i‡
deföed
(
__powîpc64__
Ë&& deföed(
__LITTLE_ENDIAN__
)

136 #i‚de‡
NVCPU_PPC64LE


137 
	#NVCPU_PPC64LE


	)

140 #i‚de‡
NVCPU_PPC


141 
	#NVCPU_PPC


	)

143 #i‚de‡
NV_BIG_ENDIAN


144 
	#NV_BIG_ENDIAN


	)

147 
	#NVCPU_FAMILY_PPC


	)

150 #i‡
deföed
(
__x86_64
Ë|| deföed(
AMD64
Ë|| deföed(
_M_AMD64
)

151 
	#NVCPU_X86_64


	)

154 #i‡
deföed
(
NVCPU_X86
Ë|| deföed(
NVCPU_X86_64
)

155 
	#NVCPU_FAMILY_X86


	)

158 #i‡
deföed
(
__riscv
Ë&& (
__riscv_xÀn
==64)

159 
	#NVCPU_RISCV64


	)

160 #i‡
deföed
(
__nvriscv
)

161 
	#NVCPU_NVRISCV64


	)

165 #i‡
deföed
(
__¨m__
Ë|| deföed(
_M_ARM
)

170 
	#NVCPU_ARM


	)

171 
	#NVCPU_MIN_PAGE_SHIFT
 12

	)

174 #i‡
deföed
(
__Ørch64__
Ë|| deföed(
__ARM64__
)

175 
	#NVCPU_AARCH64


	)

176 
	#NVCPU_MIN_PAGE_SHIFT
 12

	)

179 #i‡
deföed
(
NVCPU_ARM
Ë|| deföed(
NVCPU_AARCH64
)

180 
	#NVCPU_FAMILY_ARM


	)

183 #i‡
deföed
(
__SH4__
)

184 #i‚de‡
NVCPU_SH4


185 
	#NVCPU_SH4


	)

187 #i‡ 
deföed
 
NV_WINDOWS_CE


188 
	#NVCPU_MIN_PAGE_SHIFT
 12

	)

193 #i‡
deföed
(
__XTENSA__
)

194 
	#NVCPU_XTENSA


	)

195 #i‡
deföed
(
__XTENSA_EB__
)

196 
	#NV_BIG_ENDIAN


	)

210 #i‡
deföed
(
NVCPU_MIN_PAGE_SHIFT
)

211 
	#NVCPU_MIN_PAGE_SIZE
 (1 << 
NVCPU_MIN_PAGE_SHIFT
)

	)

214 #i‡
deföed
(
NVCPU_IA64
Ë|| deföed(
NVCPU_X86_64
) || \

215 
deföed
(
NV_MACINTOSH_64
Ë|| deföed(
NVCPU_AARCH64
) || \

216 
deföed
(
NVCPU_PPC64LE
Ë|| 
	$deföed
(
NVCPU_RISCV64
)

217 
	#NV_64_BITS


	)

228 #i‡(!(
	`deföed
(
macötosh
Ë|| deföed(
vxw‹ks
Ë|| deföed(
__INTEL_COMPILER
)Ë|| deföed(
NV_LINUX
)Ë&& !deföed(
NV_INT64_OK
)

229 
	#NV_INT64_OK


	)

233 #i‡
	`deföed
(
NV_MODS
Ë&& deföed(
DEBUG
Ë&& !deföed(
DISABLE_VERIF_FEATURES
)

234 
	#NV_VERIF_FEATURES


	)

259 #i‡
	`deföed
(
NV_WINDOWS
)

260 
	#NVOS_IS_WINDOWS
 1

	)

262 
	#NVOS_IS_WINDOWS
 0

	)

264 #i‡
	`deföed
(
NV_WINDOWS_CE
)

265 
	#NVOS_IS_WINDOWS_CE
 1

	)

267 
	#NVOS_IS_WINDOWS_CE
 0

	)

269 #i‡
	`deföed
(
NV_LINUX
)

270 
	#NVOS_IS_LINUX
 1

	)

272 
	#NVOS_IS_LINUX
 0

	)

274 #i‡
	`deföed
(
NV_UNIX
)

275 
	#NVOS_IS_UNIX
 1

	)

277 
	#NVOS_IS_UNIX
 0

	)

279 #i‡
	`deföed
(
NV_BSD
)

280 
	#NVOS_IS_FREEBSD
 1

	)

282 
	#NVOS_IS_FREEBSD
 0

	)

284 #i‡
	`deföed
(
NV_SUNOS
)

285 
	#NVOS_IS_SOLARIS
 1

	)

287 
	#NVOS_IS_SOLARIS
 0

	)

289 #i‡
	`deföed
(
NV_VMWARE
)

290 
	#NVOS_IS_VMWARE
 1

	)

292 
	#NVOS_IS_VMWARE
 0

	)

294 #i‡
	`deföed
(
NV_QNX
)

295 
	#NVOS_IS_QNX
 1

	)

297 
	#NVOS_IS_QNX
 0

	)

299 #i‡
	`deföed
(
NV_ANDROID
)

300 
	#NVOS_IS_ANDROID
 1

	)

302 
	#NVOS_IS_ANDROID
 0

	)

304 #i‡
	`deföed
(
NV_MACINTOSH
)

305 
	#NVOS_IS_MACINTOSH
 1

	)

307 
	#NVOS_IS_MACINTOSH
 0

	)

309 #i‡
	`deföed
(
NV_VXWORKS
)

310 
	#NVOS_IS_VXWORKS
 1

	)

312 
	#NVOS_IS_VXWORKS
 0

	)

314 #i‡
	`deföed
(
NV_INTEGRITY
)

315 
	#NVOS_IS_INTEGRITY
 1

	)

317 
	#NVOS_IS_INTEGRITY
 0

	)

319 #i‡
	`deföed
(
NV_HOS
)

320 
	#NVOS_IS_HOS
 1

	)

322 
	#NVOS_IS_HOS
 0

	)

324 #i‡
	`deföed
(
NVCPU_X86
)

325 
	#NVCPU_IS_X86
 1

	)

327 
	#NVCPU_IS_X86
 0

	)

329 #i‡
	`deföed
(
NVCPU_RISCV64
)

330 
	#NVCPU_IS_RISCV64
 1

	)

332 
	#NVCPU_IS_RISCV64
 0

	)

334 #i‡
	`deföed
(
NVCPU_NVRISCV64
)

335 
	#NVCPU_IS_NVRISCV64
 1

	)

337 
	#NVCPU_IS_NVRISCV64
 0

	)

339 #i‡
	`deföed
(
NVCPU_IA64
)

340 
	#NVCPU_IS_IA64
 1

	)

342 
	#NVCPU_IS_IA64
 0

	)

344 #i‡
	`deföed
(
NVCPU_X86_64
)

345 
	#NVCPU_IS_X86_64
 1

	)

347 
	#NVCPU_IS_X86_64
 0

	)

349 #i‡
	`deföed
(
NVCPU_FAMILY_X86
)

350 
	#NVCPU_IS_FAMILY_X86
 1

	)

352 
	#NVCPU_IS_FAMILY_X86
 0

	)

354 #i‡
	`deföed
(
NVCPU_PPC
)

355 
	#NVCPU_IS_PPC
 1

	)

357 
	#NVCPU_IS_PPC
 0

	)

359 #i‡
	`deföed
(
NVCPU_PPC64LE
)

360 
	#NVCPU_IS_PPC64LE
 1

	)

362 
	#NVCPU_IS_PPC64LE
 0

	)

364 #i‡
	`deföed
(
NVCPU_FAMILY_PPC
)

365 
	#NVCPU_IS_FAMILY_PPC
 1

	)

367 
	#NVCPU_IS_FAMILY_PPC
 0

	)

369 #i‡
	`deföed
(
NVCPU_ARM
)

370 
	#NVCPU_IS_ARM
 1

	)

372 
	#NVCPU_IS_ARM
 0

	)

374 #i‡
	`deföed
(
NVCPU_AARCH64
)

375 
	#NVCPU_IS_AARCH64
 1

	)

377 
	#NVCPU_IS_AARCH64
 0

	)

379 #i‡
	`deföed
(
NVCPU_FAMILY_ARM
)

380 
	#NVCPU_IS_FAMILY_ARM
 1

	)

382 
	#NVCPU_IS_FAMILY_ARM
 0

	)

384 #i‡
	`deföed
(
NVCPU_SH4
)

385 
	#NVCPU_IS_SH4
 1

	)

387 
	#NVCPU_IS_SH4
 0

	)

389 #i‡
	`deföed
(
NVCPU_XTENSA
)

390 
	#NVCPU_IS_XTENSA
 1

	)

392 
	#NVCPU_IS_XTENSA
 0

	)

394 #i‡
	`deföed
(
NV_BIG_ENDIAN
)

395 
	#NVCPU_IS_BIG_ENDIAN
 1

	)

397 
	#NVCPU_IS_BIG_ENDIAN
 0

	)

399 #i‡
	`deföed
(
NV_64_BITS
)

400 
	#NVCPU_IS_64_BITS
 1

	)

402 
	#NVCPU_IS_64_BITS
 0

	)

404 #i‡
	`deföed
(
NVCPU_FAMILY_ARM
)

405 
	#NVCPU_IS_PCIE_CACHE_COHERENT
 0

	)

407 
	#NVCPU_IS_PCIE_CACHE_COHERENT
 1

	)

	@src/common/inc/nv-gpu-info.h

11 #i‚de‡
_NV_GPU_INFO_H_


12 
	#_NV_GPU_INFO_H_


	)

15 
NvU32
 
	mgpu_id
;

18 
NvU32
 
	mdomaö
;

19 
NvU8
 
	mbus
, 
	m¶Ÿ
, 
	mfun˘i⁄
;

20 } 
	mpci_öfo
;

26 *
	mos_dev_±r
;

27 } 
	tnv_gpu_öfo_t
;

29 
	#NV_MAX_GPUS
 32

	)

	@src/common/inc/nv-modeset-interface.h

11 #i‚de‡
_NV_MODESET_INTERFACE_H_


12 
	#_NV_MODESET_INTERFACE_H_


	)

23 
	~"nv°©us.h
"

24 
	~"˝u›sys.h
"

26 
	~"nv-gpu-öfo.h
"

33 #i‡
NVCPU_IS_X86


34 
	#NV_MODESET_INTERFACE_API_CALL
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

36 
	#NV_MODESET_INTERFACE_API_CALL


	)

45 
nvidü_°ack_s
 *
	tnvidü_mode£t_°ack_±r
;

58 (*
	msu•íd
)(
NvU32
 
	mgpu_id
);

59 (*
	mªsume
)(
NvU32
 
	mgpu_id
);

60 } 
	tnvidü_mode£t_ˇŒbacks_t
;

75 c⁄° *
	mvîsi⁄_°rög
;

82 
NvBoﬁ
 
	mÆlow_wrôe_comböög
;

83 } 
	msy°em_öfo
;

94 (*
	mÆloc_°ack
)(
nvidü_mode£t_°ack_±r
 *
	m•
);

95 (*
	m‰ì_°ack
)(
nvidü_mode£t_°ack_±r
 
	m•
);

103 
NvU32
 (*
íumî©e_gpus
)(
nv_gpu_öfo_t
 *
	mgpu_öfo
);

110 (*
	m›í_gpu
)(
NvU32
 
	mgpu_id
, 
nvidü_mode£t_°ack_±r
 
	m•
);

111 (*
	m˛o£_gpu
)(
NvU32
 
	mgpu_id
, 
nvidü_mode£t_°ack_±r
 
	m•
);

113 
NV_MODESET_INTERFACE_API_CALL
 (*
›
)

114 (
nvidü_mode£t_°ack_±r
 
	m•
, *
	m›s_cmd
);

116 (*
	m£t_ˇŒbacks
)(c⁄° 
nvidü_mode£t_ˇŒbacks_t
 *
	mcb
);

118 } 
	tnvidü_mode£t_rm_›s_t
;

120 
NV_STATUS
 
nvidü_gë_rm_›s
(
nvidü_mode£t_rm_›s_t
 *
rm_›s
);

	@src/common/inc/nvCpuUuid.h

23 #i‚de‡
_NV_CPU_UUID_H_


24 
	#_NV_CPU_UUID_H_


	)

26 
	#NV_UUID_LEN
 16

	)

28 
	snv_uuid


30 
NvU8
 
	muuid
[
NV_UUID_LEN
];

32 } 
	tNvUuid
;

34 
NvUuid
 
	tNvSy°emUuid
;

36 
NvUuid
 
	tNvPro˚ss‹Uuid
;

38 c⁄° 
NvPro˚ss‹Uuid
 
NV_PROCESSOR_UUID_CPU_DEFAULT
;

	@src/common/inc/nvipmi.h

40 #i‚de‡
NVIPMI_INCLUDED


41 
	#NVIPMI_INCLUDED


	)

43 
	#NVIPMI_DATA_BUF_SIZE
 1024

	)

45 
	#NVIPMI_CCODE_INVALID
 0xff

	)

47 
	snvùmi_ªq


49 
NvU8
 
	m√t‚
;

50 
NvU8
 
	mlun
;

51 
NvU8
 
	mcmd
;

52 
NvU8
 
	mèrgë_cmd
;

53 
NvU16
 
	md©a_Àn
;

54 
NvU8
 *
	md©a
;

55 } 
	tnvùmi_ªq_t
;

57 
	snvùmi_ª•


59 
NvU8
 
	mccode
;

60 
NvS16
 
	md©a_Àn
;

61 
NvU8
 
	md©a
[
NVIPMI_DATA_BUF_SIZE
];

62 } 
	tnvùmi_ª•_t
;

64 
	snvùmi_ªq_ª•


66 
nvùmi_ªq_t
 
	mªq
;

67 
nvùmi_ª•_t
 
	mª•
;

68 } 
	tnvùmi_ªq_ª•_t
;

	@src/common/inc/nvkms-api-types.h

11 #i‡!
deföed
(
NVKMS_API_TYPES_H
)

12 
	#NVKMS_API_TYPES_H


	)

14 
	~"nvty≥s.h
"

16 
	#NVKMS_MAX_SUBDEVICES
 8

	)

18 
	#NVKMS_LEFT
 0

	)

19 
	#NVKMS_RIGHT
 1

	)

20 
	#NVKMS_MAX_EYES
 2

	)

22 
	#NVKMS_MAIN_PLANE
 0

	)

23 
	#NVKMS_OVERLAY_PLANE
 1

	)

24 
	#NVKMS_MAX_PLANES_PER_HEAD
 2

	)

25 
	#NVKMS_ALL_PLANES_MASK
 (
	`BIT
(
NVKMS_MAIN_PLANE
) | \

26 
	`BIT
(
NVKMS_OVERLAY_PLANE
))

	)

28 
	#NVKMS_DP_ADDRESS_STRING_LENGTH
 64

	)

30 
NvU32
 
	tNvKmsDevi˚H™dÀ
;

31 
NvU32
 
	tNvKmsDi•H™dÀ
;

32 
NvU32
 
	tNvKmsC⁄√˘‹H™dÀ
;

33 
NvU32
 
	tNvKmsSurÁ˚H™dÀ
;

34 
NvU32
 
	tNvKmsFømeLockH™dÀ
;

35 
NvU32
 
	tNvKmsDe„ºedReque°FifoH™dÀ
;

36 
NvU32
 
	tNvKmsSw≠GroupH™dÀ
;

38 
	sNvKmsSize
 {

39 
NvU16
 
	mwidth
;

40 
NvU16
 
	mheight
;

43 
	sNvKmsPoöt
 {

44 
NvU16
 
	mx
;

45 
NvU16
 
	my
;

48 
	sNvKmsSig√dPoöt
 {

49 
NvS16
 
	mx
;

50 
NvS16
 
	my
;

53 
	sNvKmsRe˘
 {

54 
NvU16
 
	mx
;

55 
NvU16
 
	my
;

56 
NvU16
 
	mwidth
;

57 
NvU16
 
	mheight
;

67 
	sNvKmsM©rix
 {

68 
NvU32
 
	mm
[3][3];

72 
	mNVKMS_CONNECTOR_TYPE_DP
 = 0,

73 
	mNVKMS_CONNECTOR_TYPE_VGA
 = 1,

74 
	mNVKMS_CONNECTOR_TYPE_DVI_I
 = 2,

75 
	mNVKMS_CONNECTOR_TYPE_DVI_D
 = 3,

76 
	mNVKMS_CONNECTOR_TYPE_ADC
 = 4,

77 
	mNVKMS_CONNECTOR_TYPE_LVDS
 = 5,

78 
	mNVKMS_CONNECTOR_TYPE_HDMI
 = 6,

79 
	mNVKMS_CONNECTOR_TYPE_USBC
 = 7,

80 
	mNVKMS_CONNECTOR_TYPE_UNKNOWN
 = 8,

81 
	mNVKMS_CONNECTOR_TYPE_MAX
 = 
NVKMS_CONNECTOR_TYPE_UNKNOWN
,

82 } 
	tNvKmsC⁄√˘‹Ty≥
;

84 
ölöe


85 c⁄° *
	$NvKmsC⁄√˘‹Ty≥Såög
(c⁄° 
NvKmsC⁄√˘‹Ty≥
 
c⁄√˘‹Ty≥
)

87 
c⁄√˘‹Ty≥
) {

88 
NVKMS_CONNECTOR_TYPE_DP
:  "DP";

89 
NVKMS_CONNECTOR_TYPE_VGA
:  "VGA";

90 
NVKMS_CONNECTOR_TYPE_DVI_I
:  "DVI-I";

91 
NVKMS_CONNECTOR_TYPE_DVI_D
:  "DVI-D";

92 
NVKMS_CONNECTOR_TYPE_ADC
:  "ADC";

93 
NVKMS_CONNECTOR_TYPE_LVDS
:  "LVDS";

94 
NVKMS_CONNECTOR_TYPE_HDMI
:  "HDMI";

95 
NVKMS_CONNECTOR_TYPE_USBC
:  "USB-C";

99 
	}
}

102 
	mNVKMS_CONNECTOR_SIGNAL_FORMAT_VGA
 = 0,

103 
	mNVKMS_CONNECTOR_SIGNAL_FORMAT_LVDS
 = 1,

104 
	mNVKMS_CONNECTOR_SIGNAL_FORMAT_TMDS
 = 2,

105 
	mNVKMS_CONNECTOR_SIGNAL_FORMAT_DP
 = 3,

106 
	mNVKMS_CONNECTOR_SIGNAL_FORMAT_UNKNOWN
 = 4,

107 
	mNVKMS_CONNECTOR_SIGNAL_FORMAT_MAX
 =

108 
NVKMS_CONNECTOR_SIGNAL_FORMAT_UNKNOWN
,

109 } 
	tNvKmsC⁄√˘‹Sig«lF‹m©
;

111 
	eNvKmsSurÁ˚Mem‹yF‹m©
 {

112 
	mNvKmsSurÁ˚Mem‹yF‹m©I8
 = 0,

113 
	mNvKmsSurÁ˚Mem‹yF‹m©A1R5G5B5
 = 1,

114 
	mNvKmsSurÁ˚Mem‹yF‹m©X1R5G5B5
 = 2,

115 
	mNvKmsSurÁ˚Mem‹yF‹m©R5G6B5
 = 3,

116 
	mNvKmsSurÁ˚Mem‹yF‹m©A8R8G8B8
 = 4,

117 
	mNvKmsSurÁ˚Mem‹yF‹m©X8R8G8B8
 = 5,

118 
	mNvKmsSurÁ˚Mem‹yF‹m©A2B10G10R10
 = 6,

119 
	mNvKmsSurÁ˚Mem‹yF‹m©X2B10G10R10
 = 7,

120 
	mNvKmsSurÁ˚Mem‹yF‹m©A8B8G8R8
 = 8,

121 
	mNvKmsSurÁ˚Mem‹yF‹m©X8B8G8R8
 = 9,

122 
	mNvKmsSurÁ˚Mem‹yF‹m©RF16GF16BF16AF16
 = 10,

123 
	mNvKmsSurÁ˚Mem‹yF‹m©R16G16B16A16
 = 11,

124 
	mNvKmsSurÁ˚Mem‹yF‹m©RF32GF32BF32AF32
 = 12,

127 
ölöe
 
NvU8
 
	$nvKmsSurÁ˚Mem‹yF‹m©ToByãsPîPixñ
(

128 
NvKmsSurÁ˚Mem‹yF‹m©
 
f‹m©
)

130 
f‹m©
) {

131 
NvKmsSurÁ˚Mem‹yF‹m©I8
:

133 
NvKmsSurÁ˚Mem‹yF‹m©A1R5G5B5
:

134 
NvKmsSurÁ˚Mem‹yF‹m©X1R5G5B5
:

135 
NvKmsSurÁ˚Mem‹yF‹m©R5G6B5
:

137 
NvKmsSurÁ˚Mem‹yF‹m©A8R8G8B8
:

138 
NvKmsSurÁ˚Mem‹yF‹m©X8R8G8B8
:

139 
NvKmsSurÁ˚Mem‹yF‹m©A8B8G8R8
:

140 
NvKmsSurÁ˚Mem‹yF‹m©X8B8G8R8
:

141 
NvKmsSurÁ˚Mem‹yF‹m©A2B10G10R10
:

142 
NvKmsSurÁ˚Mem‹yF‹m©X2B10G10R10
:

144 
NvKmsSurÁ˚Mem‹yF‹m©RF16GF16BF16AF16
:

145 
NvKmsSurÁ˚Mem‹yF‹m©R16G16B16A16
:

147 
NvKmsSurÁ˚Mem‹yF‹m©RF32GF32BF32AF32
:

152 
	}
}

154 
ölöe
 
NvU8
 
	$nvKmsSurÁ˚Mem‹yF‹m©ToBôsPîPixñ
(

155 
NvKmsSurÁ˚Mem‹yF‹m©
 
f‹m©
)

157  
	`nvKmsSurÁ˚Mem‹yF‹m©ToByãsPîPixñ
(
f‹m©
) * 8;

158 
	}
}

160 
ölöe
 
NvU8
 
	$nvKmsSurÁ˚Mem‹yF‹m©ToDïth
(

161 
NvKmsSurÁ˚Mem‹yF‹m©
 
f‹m©
)

163 
f‹m©
) {

164 
NvKmsSurÁ˚Mem‹yF‹m©I8
:

166 
NvKmsSurÁ˚Mem‹yF‹m©X1R5G5B5
:

168 
NvKmsSurÁ˚Mem‹yF‹m©A1R5G5B5
:

169 
NvKmsSurÁ˚Mem‹yF‹m©R5G6B5
:

171 
NvKmsSurÁ˚Mem‹yF‹m©X8R8G8B8
:

172 
NvKmsSurÁ˚Mem‹yF‹m©X8B8G8R8
:

174 
NvKmsSurÁ˚Mem‹yF‹m©X2B10G10R10
:

176 
NvKmsSurÁ˚Mem‹yF‹m©A8R8G8B8
:

177 
NvKmsSurÁ˚Mem‹yF‹m©A8B8G8R8
:

178 
NvKmsSurÁ˚Mem‹yF‹m©A2B10G10R10
:

180 
NvKmsSurÁ˚Mem‹yF‹m©RF16GF16BF16AF16
:

181 
NvKmsSurÁ˚Mem‹yF‹m©R16G16B16A16
:

183 
NvKmsSurÁ˚Mem‹yF‹m©RF32GF32BF32AF32
:

188 
	}
}

190 
ölöe
 c⁄° *
	$NvKmsSurÁ˚Mem‹yF‹m©ToSåög
(

191 c⁄° 
NvKmsSurÁ˚Mem‹yF‹m©
 
f‹m©
)

193 
f‹m©
) {

198 
NvKmsSurÁ˚Mem‹yF‹m©I8
:

200 
NvKmsSurÁ˚Mem‹yF‹m©A1R5G5B5
:

202 
NvKmsSurÁ˚Mem‹yF‹m©X1R5G5B5
:

204 
NvKmsSurÁ˚Mem‹yF‹m©R5G6B5
:

206 
NvKmsSurÁ˚Mem‹yF‹m©A8R8G8B8
:

208 
NvKmsSurÁ˚Mem‹yF‹m©X8R8G8B8
:

210 
NvKmsSurÁ˚Mem‹yF‹m©A2B10G10R10
:

212 
NvKmsSurÁ˚Mem‹yF‹m©X2B10G10R10
:

214 
NvKmsSurÁ˚Mem‹yF‹m©A8B8G8R8
:

216 
NvKmsSurÁ˚Mem‹yF‹m©X8B8G8R8
:

218 
NvKmsSurÁ˚Mem‹yF‹m©RF16GF16BF16AF16
:

220 
NvKmsSurÁ˚Mem‹yF‹m©R16G16B16A16
:

222 
NvKmsSurÁ˚Mem‹yF‹m©RF32GF32BF32AF32
:

227 
	}
}

261 
	eNvKmsNIsoF‹m©
 {

262 
	mNVKMS_NISO_FORMAT_LEGACY
,

263 
	mNVKMS_NISO_FORMAT_FOUR_WORD
,

264 
	mNVKMS_NISO_FORMAT_FOUR_WORD_NVDISPLAY
,

267 
	eNvKmsEvítTy≥
 {

268 
	mNVKMS_EVENT_TYPE_DPY_CHANGED
,

269 
	mNVKMS_EVENT_TYPE_DYNAMIC_DPY_CONNECTED
,

270 
	mNVKMS_EVENT_TYPE_DYNAMIC_DPY_DISCONNECTED
,

271 
	mNVKMS_EVENT_TYPE_DPY_ATTRIBUTE_CHANGED
,

272 
	mNVKMS_EVENT_TYPE_FRAMELOCK_ATTRIBUTE_CHANGED
,

273 
	mNVKMS_EVENT_TYPE_DISP_ATTRIBUTE_CHANGED
,

274 
	mNVKMS_EVENT_TYPE_FLIP_OCCURRED
,

277 
	sNvKmsUßgeBounds
 {

279 
NvU8
 
	mdïth
;

280 } 
	mc‹e
;

283 
NvBoﬁ
 
	mußbÀ
;

284 
NvBoﬁ
 
	mdi°RídîUßbÀ
;

285 
NvU8
 
	mdïth
;

286 } 
	mba£
;

289 
NvBoﬁ
 
	mußbÀ
;

290 
NvU8
 
	mdïth
;

291 } 
	movîœy
;

303 
	sNvKmsCscM©rix
 {

304 
NvSFXP16_16
 
	mm
[3][4];

307 
	#NVKMS_IDENTITY_CSC_MATRIX
 \

308 (
NvKmsCscM©rix
){{ \

312 }}

	)

	@src/common/inc/nvkms-kapi.h

11 #i‡!
deföed
(
__NVKMS_KAPI_H__
)

13 
	~"nvty≥s.h
"

15 
	~"nv-gpu-öfo.h
"

16 
	~"nvkms-≠i-ty≥s.h
"

18 
	#__NVKMS_KAPI_H__


	)

25 #i‡
NVCPU_IS_X86


26 
	#NVKMS_KAPI_CALL
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

28 
	#NVKMS_KAPI_CALL


	)

31 
	#NVKMS_KAPI_MAX_HEADS
 4

	)

33 
	#NVKMS_KAPI_MAX_CONNECTORS
 16

	)

34 
	#NVKMS_KAPI_MAX_CLONE_DISPLAYS
 16

	)

36 
	#NVKMS_KAPI_EDID_BUFFER_SIZE
 2048

	)

38 
	#NVKMS_KAPI_MODE_NAME_LEN
 32

	)

45 
	gNvKmsK≠iDevi˚
;

46 
	gNvKmsK≠iMem‹y
;

47 
	gNvKmsK≠iSurÁ˚
;

48 
	gNvKmsK≠iCh™√lEvít
;

50 
NvU32
 
	tNvKmsK≠iC⁄√˘‹
;

51 
NvU32
 
	tNvKmsK≠iDi•œy
;

60 
	tNVKMS_KAPI_CALL
 
	tNvKmsCh™√lEvítProc
(*
	td©aPå
, 
	tNvU32
 
	td©aU32
);

69 
	sNvKmsK≠iDi•œyModeTimögs
 {

71 
NvU32
 
	mª‰eshR©e
;

72 
NvU32
 
	mpixñClockHz
;

73 
NvU32
 
	mhVisibÀ
;

74 
NvU32
 
	mhSyncSèπ
;

75 
NvU32
 
	mhSyncEnd
;

76 
NvU32
 
	mhTŸÆ
;

77 
NvU32
 
	mhSkew
;

78 
NvU32
 
	mvVisibÀ
;

79 
NvU32
 
	mvSyncSèπ
;

80 
NvU32
 
	mvSyncEnd
;

81 
NvU32
 
	mvTŸÆ
;

85 
NvU32
 
	möãæa˚d
 : 1;

86 
NvU32
 
	mdoubÀSˇn
 : 1;

87 
NvU32
 
	mhSyncPos
 : 1;

88 
NvU32
 
	mhSyncNeg
 : 1;

89 
NvU32
 
	mvSyncPos
 : 1;

90 
NvU32
 
	mvSyncNeg
 : 1;

92 } 
	mÊags
;

94 
NvU32
 
	mwidthMM
;

95 
NvU32
 
	mheightMM
;

99 
	sNvKmsK≠iDi•œyMode
 {

100 
NvKmsK≠iDi•œyModeTimögs
 
	mtimögs
;

101 
	m«me
[
NVKMS_KAPI_MODE_NAME_LEN
];

104 
	sNvKmsK≠iDevi˚Resour˚sInfo
 {

106 
NvU32
 
	mnumHóds
;

108 
NvU32
 
	mnumC⁄√˘‹s
;

109 
NvKmsK≠iC⁄√˘‹
 
	mc⁄√˘‹H™dÀs
[
NVKMS_KAPI_MAX_CONNECTORS
];

113 
NvU32
 
	mmöWidthInPixñs
;

114 
NvU32
 
	mmaxWidthInPixñs
;

116 
NvU32
 
	mmöHeightInPixñs
;

117 
NvU32
 
	mmaxHeightInPixñs
;

119 
NvU32
 
	mmaxCurs‹SizeInPixñs
;

121 
NvU32
 
	mpôchAlignmít
;

123 } 
	mˇps
;

127 
	eNvKmsK≠iPœ√Ty≥Rec
 {

128 
	mNVKMS_KAPI_PLANE_PRIMARY
 = 0,

129 
	mNVKMS_KAPI_PLANE_CURSOR
 = 1,

130 
	mNVKMS_KAPI_PLANE_OVERLAY
 = 2,

131 
	mNVKMS_KAPI_PLANE_MAX
 = 3,

132 } 
	tNvKmsK≠iPœ√Ty≥
;

134 
	#NVKMS_KAPI_PLANE_MASK
(
∂™eTy≥
Ë(1 << (∂™eTy≥))

	)

136 
	eNvKmsK≠iM≠pögTy≥Rec
 {

137 
	mNVKMS_KAPI_MAPPING_TYPE_USER
 = 1,

138 
	mNVKMS_KAPI_MAPPING_TYPE_KERNEL
 = 2,

139 } 
	tNvKmsK≠iM≠pögTy≥
;

141 
	sNvKmsK≠iC⁄√˘‹Info
 {

143 
NvKmsK≠iC⁄√˘‹
 
	mh™dÀ
;

145 
NvU32
 
	mphysiˇlIndex
;

147 
NvU32
 
	mhódMask
;

149 
NvKmsC⁄√˘‹Sig«lF‹m©
 
	msig«lF‹m©
;

150 
NvKmsC⁄√˘‹Ty≥
 
	mty≥
;

156 
NvU32
 
	mnumIncom∑tibÀC⁄√˘‹s
;

157 
NvKmsK≠iC⁄√˘‹
 
	möcom∑tibÀC⁄√˘‹H™dÀs
[
NVKMS_KAPI_MAX_CONNECTORS
];

161 
	sNvKmsK≠iSèticDi•œyInfo
 {

163 
NvKmsK≠iDi•œy
 
	mh™dÀ
;

165 
NvKmsK≠iC⁄√˘‹
 
	mc⁄√˘‹H™dÀ
;

168 
	mdpAddªss
[
NVKMS_DP_ADDRESS_STRING_LENGTH
];

170 
NvBoﬁ
 
	möã∫Æ
;

173 
NvU32
 
	mnumPossibÀCl⁄es
;

174 
NvKmsK≠iDi•œy
 
	mpossibÀCl⁄eH™dÀs
[
NVKMS_KAPI_MAX_CLONE_DISPLAYS
];

178 
	sNvKmsK≠iPœ√C⁄fig
 {

179 
NvKmsK≠iSurÁ˚
 *
	msurÁ˚
;

181 
NvU16
 
	m§cX
, 
	m§cY
;

182 
NvU16
 
	m§cWidth
, 
	m§cHeight
;

184 
NvU16
 
	md°X
, 
	md°Y
;

185 
NvU16
 
	md°Width
, 
	md°Height
;

188 
	sNvKmsK≠iPœ√Reque°edC⁄fig
 {

189 
NvKmsK≠iPœ√C⁄fig
 
	mc⁄fig
;

191 
NvBoﬁ
 
	msurÁ˚Ch™ged
 : 1;

192 
NvBoﬁ
 
	m§cXYCh™ged
 : 1;

193 
NvBoﬁ
 
	m§cWHCh™ged
 : 1;

194 
NvBoﬁ
 
	md°XYCh™ged
 : 1;

195 
NvBoﬁ
 
	md°WHCh™ged
 : 1;

196 } 
	mÊags
;

199 
	sNvKmsK≠iHódModeSëC⁄fig
 {

216 
NvBoﬁ
 
	mbA˘ive
;

218 
NvU32
 
	mnumDi•œys
;

219 
NvKmsK≠iDi•œy
 
	mdi•œys
[
NVKMS_KAPI_MAX_CLONE_DISPLAYS
];

221 
NvKmsK≠iDi•œyMode
 
	mmode
;

224 
	sNvKmsK≠iHódReque°edC⁄fig
 {

225 
NvKmsK≠iHódModeSëC⁄fig
 
	mmodeSëC⁄fig
;

227 
NvBoﬁ
 
	ma˘iveCh™ged
 : 1;

228 
NvBoﬁ
 
	mdi•œysCh™ged
 : 1;

229 
NvBoﬁ
 
	mmodeCh™ged
 : 1;

230 } 
	mÊags
;

232 
NvKmsK≠iPœ√Reque°edC⁄fig


233 
	m∂™eReque°edC⁄fig
[
NVKMS_KAPI_PLANE_MAX
];

236 
	sNvKmsK≠iReque°edModeSëC⁄fig
 {

237 
NvU32
 
	mhódsMask
;

238 
NvKmsK≠iHódReque°edC⁄fig


239 
	mhódReque°edC⁄fig
[
NVKMS_KAPI_MAX_HEADS
];

242 
	sNvKmsK≠iEvítDi•œyCh™ged
 {

243 
NvKmsK≠iDi•œy
 
	mdi•œy
;

246 
	sNvKmsK≠iEvítDy«micDi•œyC⁄√˘ed
 {

247 
NvKmsK≠iDi•œy
 
	mdi•œy
;

250 
	sNvKmsK≠iEvítFlùOccuºed
 {

251 
NvU32
 
	mhód
;

252 
NvKmsK≠iPœ√Ty≥
 
	m∂™e
;

255 
	sNvKmsK≠iEvít
 {

256 
NvKmsEvítTy≥
 
	mty≥
;

258 
NvKmsK≠iDevi˚
 *
	mdevi˚
;

260 *
	m¥iv©eD©a
;

263 
NvKmsK≠iEvítDi•œyCh™ged
 
	mdi•œyCh™ged
;

264 
NvKmsK≠iEvítDy«micDi•œyC⁄√˘ed
 
	mdy«micDi•œyC⁄√˘ed
;

265 
NvKmsK≠iEvítFlùOccuºed
 
	mÊùOccuºed
;

266 } 
	mu
;

269 
	sNvKmsK≠iAŒoˇãDevi˚P¨ams
 {

271 
NvU32
 
	mgpuId
;

274 *
	m¥iv©eD©a
;

276 (*
	mevítCÆlback
)(c⁄° 
NvKmsK≠iEvít
 *
	mevít
);

279 
	sNvKmsK≠iDy«micDi•œyP¨ams
 {

281 
NvKmsK≠iDi•œy
 
	mh™dÀ
;

284 
NvU32
 
	mc⁄√˘ed
;

288 
NvU16
 
	mbuf„rSize
;

289 
NvU8
 
	mbuf„r
[
NVKMS_KAPI_EDID_BUFFER_SIZE
];

290 } 
	medid
;

293 
NvBoﬁ
 
	movîrideEdid
;

296 
NvBoﬁ
 
	mf‹˚C⁄√˘ed
;

299 
NvBoﬁ
 
	mf‹˚Disc⁄√˘ed
;

302 
	sNvKmsK≠iFun˘i⁄sTabÀ
 {

307 c⁄° *
	mvîsi⁄Såög
;

314 
NvBoﬁ
 
	mbAŒowWrôeComböög
;

315 } 
	msy°emInfo
;

325 
NvU32
 
NVKMS_KAPI_CALL
 (*
íumî©eGpus
)(
nv_gpu_öfo_t
 *
	mgpuInfo
);

335 
NvKmsK≠iDevi˚
* 
NVKMS_KAPI_CALL
 (*
ÆloˇãDevi˚
)

337 c⁄° 
NvKmsK≠iAŒoˇãDevi˚P¨ams
 *
	m∑øms


346 
NVKMS_KAPI_CALL
 (*
‰ìDevi˚
)(
NvKmsK≠iDevi˚
 *
	mdevi˚
);

355 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gøbOw√rshù
)(
NvKmsK≠iDevi˚
 *
	mdevi˚
);

362 
NVKMS_KAPI_CALL
 (*
ªÀa£Ow√rshù
)(
NvKmsK≠iDevi˚
 *
	mdevi˚
);

380 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
de˛¨eEvítI¡îe°
)

382 c⁄° 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

383 c⁄° 
NvU32
 
	möãª°Mask


398 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gëDevi˚Resour˚sInfo
)

400 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

401 
NvKmsK≠iDevi˚Resour˚sInfo
 *
	möfo


424 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gëDi•œys
)

426 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

427 
NvU32
 *
	mnumDi•œys
, 
NvKmsK≠iDi•œy
 *
	mdi•œyH™dÀs


444 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gëC⁄√˘‹Info
)

446 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

447 
NvKmsK≠iC⁄√˘‹
 
	mc⁄√˘‹
, 
NvKmsK≠iC⁄√˘‹Info
 *
	möfo


464 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gëSèticDi•œyInfo
)

466 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

467 
NvKmsK≠iDi•œy
 
	mdi•œy
, 
NvKmsK≠iSèticDi•œyInfo
 *
	möfo


479 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gëDy«micDi•œyInfo
)

481 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

482 
NvKmsK≠iDy«micDi•œyP¨ams
 *
	m∑øms


498 
NvKmsK≠iMem‹y
* 
NVKMS_KAPI_CALL
 (*
ÆloˇãMem‹y
)

500 
NvKmsK≠iDevi˚
 *
	mdevi˚
, 
NvU64
 
	msize


525 
NvKmsK≠iMem‹y
* 
NVKMS_KAPI_CALL
 (*
imp‹tMem‹y
)

527 
NvKmsK≠iDevi˚
 *
	mdevi˚
, 
NvU64
 
	msize
,

528 
NvU64
 
	mnvKmsP¨amsU£r
,

529 
NvU64
 
	mnvKmsP¨amsSize


547 
NvKmsK≠iMem‹y
* 
NVKMS_KAPI_CALL
 (*
dupMem‹y
)

549 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

550 c⁄° 
NvKmsK≠iDevi˚
 *
	m§cDevi˚
,

551 c⁄° 
NvKmsK≠iMem‹y
 *
	m§cMem‹y


576 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
exp‹tMem‹y
)

578 c⁄° 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

579 c⁄° 
NvKmsK≠iMem‹y
 *
	mmem‹y
,

580 
NvU64
 
	mnvKmsP¨amsU£r
,

581 
NvU64
 
	mnvKmsP¨amsSize


593 
NVKMS_KAPI_CALL
 (*
‰ìMem‹y
)

595 
NvKmsK≠iDevi˚
 *
	mdevi˚
, 
NvKmsK≠iMem‹y
 *
	mmem‹y


613 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
m≠Mem‹y
)

615 c⁄° 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

616 c⁄° 
NvKmsK≠iMem‹y
 *
	mmem‹y
, 
NvKmsK≠iM≠pögTy≥
 
	mty≥
,

617 **
	mµLöórAddªss


632 
NVKMS_KAPI_CALL
 (*
unm≠Mem‹y
)

634 c⁄° 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

635 c⁄° 
NvKmsK≠iMem‹y
 *
	mmem‹y
, 
NvKmsK≠iM≠pögTy≥
 
	mty≥
,

636 c⁄° *
	mpLöórAddªss


657 
NvKmsK≠iSurÁ˚
* 
NVKMS_KAPI_CALL
 (*
¸óãSurÁ˚
)

659 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

660 
NvKmsK≠iMem‹y
 *
	mmem‹y
, 
NvKmsSurÁ˚Mem‹yF‹m©
 
	mf‹m©
,

661 
NvU32
 
	mwidth
, NvU32 
	mheight
, NvU32 
	mpôch


671 
NVKMS_KAPI_CALL
 (*
de°roySurÁ˚
)

673 
NvKmsK≠iDevi˚
 *
	mdevi˚
, 
NvKmsK≠iSurÁ˚
 *
	msurÁ˚


695 
NVKMS_KAPI_CALL
 (*
gëDi•œyMode
)

697 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

698 
NvKmsK≠iDi•œy
 
	mdi•œy
, 
NvU32
 
	mmodeIndex
,

699 
NvKmsK≠iDi•œyMode
 *
	mmode
, 
NvBoﬁ
 *
	mvÆid


714 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
vÆid©eDi•œyMode
)

716 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

717 
NvKmsK≠iDi•œy
 
	mdi•œy
, c⁄° 
NvKmsK≠iDi•œyMode
 *
	mmode


736 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
≠∂yModeSëC⁄fig
)

738 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

739 c⁄° 
NvKmsK≠iReque°edModeSëC⁄fig
 *
	mªque°edC⁄fig
,

740 c⁄° 
NvBoﬁ
 
	mcommô


757 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gëFlùPídögSètus
)

759 c⁄° 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

760 c⁄° 
NvU32
 
	mhód
,

761 c⁄° 
NvKmsK≠iPœ√Ty≥
 
	m∂™e
,

762 
NvBoﬁ
 *
	m≥ndög


782 
NvKmsK≠iCh™√lEvít
* 
NVKMS_KAPI_CALL
 (*
ÆloˇãCh™√lEvít
)

784 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

785 
NvKmsCh™√lEvítProc
 *
	m¥oc
,

786 *
	md©a
,

787 
NvU64
 
	mnvKmsP¨amsU£r
,

788 
NvU64
 
	mnvKmsP¨amsSize


799 
NVKMS_KAPI_CALL
 (*
‰ìCh™√lEvít
)

801 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

802 
NvKmsK≠iCh™√lEvít
 *
	mcb


818 
NvBoﬁ
 
NVKMS_KAPI_CALL
 (*
gëCRC32
)

820 
NvKmsK≠iDevi˚
 *
	mdevi˚
,

821 
NvU32
 
	mhód
,

822 
NvU32
 *
	m¸c32


833 
NvBoﬁ
 
NVKMS_KAPI_CALL
 
	gnvKmsK≠iGëFun˘i⁄sTabÀ


835 
NvKmsK≠iFun˘i⁄sTabÀ
 *
	gfuncsTabÀ


	@src/common/inc/nvlimits.h

23 #i‚de‡
NVLIMITS_INCLUDED


24 
	#NVLIMITS_INCLUDED


	)

29 
	#NV_MAX_DEVICES
 32

	)

	@src/common/inc/nvstatus.h

24 #i‚de‡
_NVSTATUS_H_


25 
	#_NVSTATUS_H_


	)

30 #i‡!
deföed
(
XAPIGEN
)

32 #ifde‡
__˝lu•lus


36 
	~"nvty≥s.h
"

38 
NvU32
 
	tNV_STATUS
;

40 
	#NV_STATUS_CODE
–
«me
, 
code
, 
°rög
 )Çamêcode,

	)

44 
	~"nv°©uscodes.h
"

47 #unde‡
NV_STATUS_CODE


54 
	#NV_STATUS_LEVEL_OK
 0

	)

69 
	#NV_STATUS_LEVEL_WARN
 1

	)

76 
	#NV_STATUS_LEVEL_ERR
 3

	)

104 
	#NV_STATUS_LEVEL
(
_S
) \

105 ((
_S
Ë=
NV_OK
? 
NV_STATUS_LEVEL_OK
: \

106 ((
_S
Ë!
NV_ERR_GENERIC
 && (_SË& 0x00010000? 
NV_STATUS_LEVEL_WARN
: \

107 
NV_STATUS_LEVEL_ERR
))

	)

116 
	#NV_STATUS_LEVEL_CHAR
(
_S
) \

117 ((
_S
Ë=
NV_OK
? '0': \

118 ((
_S
Ë!
NV_ERR_GENERIC
 && (_S) & 0x00010000? 'W': \

119 'E'))

	)

122 c⁄° *
nv°©usToSåög
(
NV_STATUS
 
nvSètusIn
);

124 #ifde‡
__˝lu•lus


	@src/common/inc/nvstatuscodes.h

24 #i‚de‡
_NVSTATUSCODES_H_


25 
	#_NVSTATUSCODES_H_


	)

30 #i‡!
deföed
(
XAPIGEN
)

32 
NV_STATUS_CODE
(
NV_OK
, 0x00000000, "Success")

33 
NV_STATUS_CODE
(
NV_ERR_GENERIC
, 0x0000FFFF, "Failure: Generic Error")

35 
NV_STATUS_CODE
(
NV_ERR_BROKEN_FB
, 0x00000001, "Frame-Buffer broken")

36 
NV_STATUS_CODE
(
NV_ERR_BUFFER_TOO_SMALL
, 0x00000002, "BufferÖassed in isÅoo small")

37 
NV_STATUS_CODE
(
NV_ERR_BUSY_RETRY
, 0x00000003, "System is busy,ÑetryÜater")

38 
NV_STATUS_CODE
(
NV_ERR_CALLBACK_NOT_SCHEDULED
, 0x00000004, "TheÑequested callback APIÇot scheduled")

39 
NV_STATUS_CODE
(
NV_ERR_CARD_NOT_PRESENT
, 0x00000005, "CardÇot detected")

40 
NV_STATUS_CODE
(
NV_ERR_CYCLE_DETECTED
, 0x00000006, "Call cycle detected")

41 
NV_STATUS_CODE
(
NV_ERR_DMA_IN_USE
, 0x00000007, "Requested DMA is in use")

42 
NV_STATUS_CODE
(
NV_ERR_DMA_MEM_NOT_LOCKED
, 0x00000008, "Requested DMA memory isÇotÜocked")

43 
NV_STATUS_CODE
(
NV_ERR_DMA_MEM_NOT_UNLOCKED
, 0x00000009, "Requested DMA memory isÇot unlocked")

44 
NV_STATUS_CODE
(
NV_ERR_DUAL_LINK_INUSE
, 0x0000000A, "Dual-Link is in use")

45 
NV_STATUS_CODE
(
NV_ERR_ECC_ERROR
, 0x0000000B, "Generic ECCÉrror")

46 
NV_STATUS_CODE
(
NV_ERR_FIFO_BAD_ACCESS
, 0x0000000C, "FIFO: Invalidáccess")

47 
NV_STATUS_CODE
(
NV_ERR_FREQ_NOT_SUPPORTED
, 0x0000000D, "Requested frequency isÇot supported")

48 
NV_STATUS_CODE
(
NV_ERR_GPU_DMA_NOT_INITIALIZED
, 0x0000000E, "Requested DMAÇot initialized")

49 
NV_STATUS_CODE
(
NV_ERR_GPU_IS_LOST
, 0x0000000F, "GPUÜost fromÅhe bus")

50 
NV_STATUS_CODE
(
NV_ERR_GPU_IN_FULLCHIP_RESET
, 0x00000010, "GPU currently in full-chipÑeset")

51 
NV_STATUS_CODE
(
NV_ERR_GPU_NOT_FULL_POWER
, 0x00000011, "GPUÇot in fullÖower")

52 
NV_STATUS_CODE
(
NV_ERR_GPU_UUID_NOT_FOUND
, 0x00000012, "GPU UUIDÇot found")

53 
NV_STATUS_CODE
(
NV_ERR_HOT_SWITCH
, 0x00000013, "System in hot switch")

54 
NV_STATUS_CODE
(
NV_ERR_I2C_ERROR
, 0x00000014, "I2C Error")

55 
NV_STATUS_CODE
(
NV_ERR_I2C_SPEED_TOO_HIGH
, 0x00000015, "I2C Error: SpeedÅoo high")

56 
NV_STATUS_CODE
(
NV_ERR_ILLEGAL_ACTION
, 0x00000016, "Currentáction isÇotállowed")

57 
NV_STATUS_CODE
(
NV_ERR_IN_USE
, 0x00000017, "Generic busyÉrror")

58 
NV_STATUS_CODE
(
NV_ERR_INFLATE_COMPRESSED_DATA_FAILED
, 0x00000018, "FailedÅo inflate compressed data")

59 
NV_STATUS_CODE
(
NV_ERR_INSERT_DUPLICATE_NAME
, 0x00000019, "Foundá duplicateÉntry inÅheÑequested btree")

60 
NV_STATUS_CODE
(
NV_ERR_INSUFFICIENT_RESOURCES
, 0x0000001A, "Ran out ofá criticalÑesource, otherÅhan memory")

61 
NV_STATUS_CODE
(
NV_ERR_INSUFFICIENT_PERMISSIONS
, 0x0000001B, "TheÑequester doesÇot have sufficientÖermissions")

62 
NV_STATUS_CODE
(
NV_ERR_INSUFFICIENT_POWER
, 0x0000001C, "Generic Error: LowÖower")

63 
NV_STATUS_CODE
(
NV_ERR_INVALID_ACCESS_TYPE
, 0x0000001D, "ThisÅype ofáccess isÇotállowed")

64 
NV_STATUS_CODE
(
NV_ERR_INVALID_ADDRESS
, 0x0000001E, "AddressÇot valid")

65 
NV_STATUS_CODE
(
NV_ERR_INVALID_ARGUMENT
, 0x0000001F, "InvalidárgumentÅo call")

66 
NV_STATUS_CODE
(
NV_ERR_INVALID_BASE
, 0x00000020, "Invalid base")

67 
NV_STATUS_CODE
(
NV_ERR_INVALID_CHANNEL
, 0x00000021, "Given channel-idÇot valid")

68 
NV_STATUS_CODE
(
NV_ERR_INVALID_CLASS
, 0x00000022, "Given class-idÇot valid")

69 
NV_STATUS_CODE
(
NV_ERR_INVALID_CLIENT
, 0x00000023, "Given clientÇot valid")

70 
NV_STATUS_CODE
(
NV_ERR_INVALID_COMMAND
, 0x00000024, "CommandÖassed isÇot valid")

71 
NV_STATUS_CODE
(
NV_ERR_INVALID_DATA
, 0x00000025, "Invalid dataÖassed")

72 
NV_STATUS_CODE
(
NV_ERR_INVALID_DEVICE
, 0x00000026, "Current device isÇot valid")

73 
NV_STATUS_CODE
(
NV_ERR_INVALID_DMA_SPECIFIER
, 0x00000027, "TheÑequested DMA specifier isÇot valid")

74 
NV_STATUS_CODE
(
NV_ERR_INVALID_EVENT
, 0x00000028, "InvalidÉvent occured")

75 
NV_STATUS_CODE
(
NV_ERR_INVALID_FLAGS
, 0x00000029, "Invalid flagsÖassed")

76 
NV_STATUS_CODE
(
NV_ERR_INVALID_FUNCTION
, 0x0000002A, "Called function isÇot valid")

77 
NV_STATUS_CODE
(
NV_ERR_INVALID_HEAP
, 0x0000002B, "Heap corrupted")

78 
NV_STATUS_CODE
(
NV_ERR_INVALID_INDEX
, 0x0000002C, "Index invalid")

79 
NV_STATUS_CODE
(
NV_ERR_INVALID_IRQ_LEVEL
, 0x0000002D, "Requested IRQÜevel isÇot valid")

80 
NV_STATUS_CODE
(
NV_ERR_INVALID_LIMIT
, 0x0000002E, "Generic Error: InvalidÜimit")

81 
NV_STATUS_CODE
(
NV_ERR_INVALID_LOCK_STATE
, 0x0000002F, "RequestedÜock stateÇot valid")

82 
NV_STATUS_CODE
(
NV_ERR_INVALID_METHOD
, 0x00000030, "Requested methodÇot valid")

83 
NV_STATUS_CODE
(
NV_ERR_INVALID_OBJECT
, 0x00000031, "ObjectÇot valid")

84 
NV_STATUS_CODE
(
NV_ERR_INVALID_OBJECT_BUFFER
, 0x00000032, "Object bufferÖassed isÇot valid")

85 
NV_STATUS_CODE
(
NV_ERR_INVALID_OBJECT_HANDLE
, 0x00000033, "Object handle isÇot valid")

86 
NV_STATUS_CODE
(
NV_ERR_INVALID_OBJECT_NEW
, 0x00000034, "New object isÇot valid")

87 
NV_STATUS_CODE
(
NV_ERR_INVALID_OBJECT_OLD
, 0x00000035, "Old object isÇot valid")

88 
NV_STATUS_CODE
(
NV_ERR_INVALID_OBJECT_PARENT
, 0x00000036, "ObjectÖarent isÇot valid")

89 
NV_STATUS_CODE
(
NV_ERR_INVALID_OFFSET
, 0x00000037, "The offsetÖassed isÇot valid")

90 
NV_STATUS_CODE
(
NV_ERR_INVALID_OPERATION
, 0x00000038, "Requested operation isÇot valid")

91 
NV_STATUS_CODE
(
NV_ERR_INVALID_OWNER
, 0x00000039, "OwnerÇot valid")

92 
NV_STATUS_CODE
(
NV_ERR_INVALID_PARAM_STRUCT
, 0x0000003A, "Invalid structureÖarameter")

93 
NV_STATUS_CODE
(
NV_ERR_INVALID_PARAMETER
, 0x0000003B, "AtÜeast one ofÅheÖarametersÖassed isÇot valid")

94 
NV_STATUS_CODE
(
NV_ERR_INVALID_PATH
, 0x0000003C, "TheÑequestedÖath isÇot valid")

95 
NV_STATUS_CODE
(
NV_ERR_INVALID_POINTER
, 0x0000003D, "PointerÇot valid")

96 
NV_STATUS_CODE
(
NV_ERR_INVALID_REGISTRY_KEY
, 0x0000003E, "Foundán invalidÑegistry key")

97 
NV_STATUS_CODE
(
NV_ERR_INVALID_REQUEST
, 0x0000003F, "Generic Error: InvalidÑequest")

98 
NV_STATUS_CODE
(
NV_ERR_INVALID_STATE
, 0x00000040, "Generic Error: Invalid state")

99 
NV_STATUS_CODE
(
NV_ERR_INVALID_STRING_LENGTH
, 0x00000041, "The stringÜength isÇot valid")

100 
NV_STATUS_CODE
(
NV_ERR_INVALID_READ
, 0x00000042, "TheÑequestedÑead operation isÇot valid")

101 
NV_STATUS_CODE
(
NV_ERR_INVALID_WRITE
, 0x00000043, "TheÑequested write operation isÇot valid")

102 
NV_STATUS_CODE
(
NV_ERR_INVALID_XLATE
, 0x00000044, "TheÑequestedÅranslate operation isÇot valid")

103 
NV_STATUS_CODE
(
NV_ERR_IRQ_NOT_FIRING
, 0x00000045, "Requested IRQ isÇot firing")

104 
NV_STATUS_CODE
(
NV_ERR_IRQ_EDGE_TRIGGERED
, 0x00000046, "IRQ isÉdgeÅriggered")

105 
NV_STATUS_CODE
(
NV_ERR_MEMORY_TRAINING_FAILED
, 0x00000047, "Failed memoryÅraining sequence")

106 
NV_STATUS_CODE
(
NV_ERR_MISMATCHED_SLAVE
, 0x00000048, "Slave mismatch")

107 
NV_STATUS_CODE
(
NV_ERR_MISMATCHED_TARGET
, 0x00000049, "Target mismatch")

108 
NV_STATUS_CODE
(
NV_ERR_MISSING_TABLE_ENTRY
, 0x0000004A, "RequestedÉntry missingÇot found inÅheÅable")

109 
NV_STATUS_CODE
(
NV_ERR_MODULE_LOAD_FAILED
, 0x0000004B, "FailedÅoÜoadÅheÑequested module")

110 
NV_STATUS_CODE
(
NV_ERR_MORE_DATA_AVAILABLE
, 0x0000004C, "There is more dataávailable")

111 
NV_STATUS_CODE
(
NV_ERR_MORE_PROCESSING_REQUIRED
, 0x0000004D, "MoreÖrocessingÑequired forÅhe given call")

112 
NV_STATUS_CODE
(
NV_ERR_MULTIPLE_MEMORY_TYPES
, 0x0000004E, "Multiple memoryÅypes found")

113 
NV_STATUS_CODE
(
NV_ERR_NO_FREE_FIFOS
, 0x0000004F, "No more free FIFOs found")

114 
NV_STATUS_CODE
(
NV_ERR_NO_INTR_PENDING
, 0x00000050, "No interruptÖending")

115 
NV_STATUS_CODE
(
NV_ERR_NO_MEMORY
, 0x00000051, "Out of memory")

116 
NV_STATUS_CODE
(
NV_ERR_NO_SUCH_DOMAIN
, 0x00000052, "Requested domain doesÇotÉxist")

117 
NV_STATUS_CODE
(
NV_ERR_NO_VALID_PATH
, 0x00000053, "Caller didÇot speficyá validÖath")

118 
NV_STATUS_CODE
(
NV_ERR_NOT_COMPATIBLE
, 0x00000054, "Generic Error: IncompatibleÅypes")

119 
NV_STATUS_CODE
(
NV_ERR_NOT_READY
, 0x00000055, "Generic Error: NotÑeady")

120 
NV_STATUS_CODE
(
NV_ERR_NOT_SUPPORTED
, 0x00000056, "CallÇot supported")

121 
NV_STATUS_CODE
(
NV_ERR_OBJECT_NOT_FOUND
, 0x00000057, "Requested objectÇot found")

122 
NV_STATUS_CODE
(
NV_ERR_OBJECT_TYPE_MISMATCH
, 0x00000058, "Specified objects doÇot match")

123 
NV_STATUS_CODE
(
NV_ERR_OPERATING_SYSTEM
, 0x00000059, "Generic operating systemÉrror")

124 
NV_STATUS_CODE
(
NV_ERR_OTHER_DEVICE_FOUND
, 0x0000005A, "Found other device instead ofÅheÑequested one")

125 
NV_STATUS_CODE
(
NV_ERR_OUT_OF_RANGE
, 0x0000005B, "The specified value is out of bounds")

126 
NV_STATUS_CODE
(
NV_ERR_OVERLAPPING_UVM_COMMIT
, 0x0000005C, "Overlapping unified virtual memory commit")

127 
NV_STATUS_CODE
(
NV_ERR_PAGE_TABLE_NOT_AVAIL
, 0x0000005D, "RequestedÖageÅableÇotávailable")

128 
NV_STATUS_CODE
(
NV_ERR_PID_NOT_FOUND
, 0x0000005E, "Process-IdÇot found")

129 
NV_STATUS_CODE
(
NV_ERR_PROTECTION_FAULT
, 0x0000005F, "Protection fault")

130 
NV_STATUS_CODE
(
NV_ERR_RC_ERROR
, 0x00000060, "Generic RCÉrror")

131 
NV_STATUS_CODE
(
NV_ERR_REJECTED_VBIOS
, 0x00000061, "Given Video BIOSÑejected/invalid")

132 
NV_STATUS_CODE
(
NV_ERR_RESET_REQUIRED
, 0x00000062, "ResetÑequired")

133 
NV_STATUS_CODE
(
NV_ERR_STATE_IN_USE
, 0x00000063, "State in use")

134 
NV_STATUS_CODE
(
NV_ERR_SIGNAL_PENDING
, 0x00000064, "SignalÖending")

135 
NV_STATUS_CODE
(
NV_ERR_TIMEOUT
, 0x00000065, "CallÅimed out")

136 
NV_STATUS_CODE
(
NV_ERR_TIMEOUT_RETRY
, 0x00000066, "CallÅimed out,ÖleaseÑetryÜater")

137 
NV_STATUS_CODE
(
NV_ERR_TOO_MANY_PRIMARIES
, 0x00000067, "Too manyÖrimaries")

138 
NV_STATUS_CODE
(
NV_ERR_UVM_ADDRESS_IN_USE
, 0x00000068, "Unified virtual memoryÑequestedáddressálready in use")

139 
NV_STATUS_CODE
(
NV_ERR_MAX_SESSION_LIMIT_REACHED
, 0x00000069, "MaximumÇumber of sessionsÑeached")

140 
NV_STATUS_CODE
(
NV_ERR_LIB_RM_VERSION_MISMATCH
, 0x0000006A, "Library version doesn't match driver version")

141 
NV_STATUS_CODE
(
NV_ERR_PRIV_SEC_VIOLATION
, 0x0000006B, "Priv security violation")

142 
NV_STATUS_CODE
(
NV_ERR_GPU_IN_DEBUG_MODE
, 0x0000006C, "GPU currently in debug mode")

143 
NV_STATUS_CODE
(
NV_ERR_FEATURE_NOT_ENABLED
, 0x0000006D, "Requested Feature functionality isÇotÉnabled")

144 
NV_STATUS_CODE
(
NV_ERR_RESOURCE_LOST
, 0x0000006E, "RequestedÑesource has been destroyed")

147 
NV_STATUS_CODE
(
NV_WARN_HOT_SWITCH
, 0x00010001, "WARNING Hot switch")

148 
NV_STATUS_CODE
(
NV_WARN_INCORRECT_PERFMON_DATA
, 0x00010002, "WARNING IncorrectÖerformance monitor data")

149 
NV_STATUS_CODE
(
NV_WARN_MISMATCHED_SLAVE
, 0x00010003, "WARNING Slave mismatch")

150 
NV_STATUS_CODE
(
NV_WARN_MISMATCHED_TARGET
, 0x00010004, "WARNING Target mismatch")

151 
NV_STATUS_CODE
(
NV_WARN_MORE_PROCESSING_REQUIRED
, 0x00010005, "WARNING MoreÖrocessingÑequired forÅhe call")

152 
NV_STATUS_CODE
(
NV_WARN_NOTHING_TO_DO
, 0x00010006, "WARNING NothingÅo do")

153 
NV_STATUS_CODE
(
NV_WARN_NULL_OBJECT
, 0x00010007, "WARNING NULL object found")

154 
NV_STATUS_CODE
(
NV_WARN_OUT_OF_RANGE
, 0x00010008, "WARNING value out ofÑange")

	@src/common/inc/nvtypes.h

51 #i‚de‡
NVTYPES_INCLUDED


52 
	#NVTYPES_INCLUDED


	)

57 #i‡!
deföed
(
XAPIGEN
)

59 #ifde‡
__˝lu•lus


63 
	~"˝u›sys.h
"

64 
	~"x≠i-sdk.h
"

66 
	#NVRM_64
 1

	)

67 #i‡
deföed
(
NV_64_BITS
)

68 
	#NVRM_TRUE64
 1

	)

75 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


77 
	tUI¡64
;

78 sig√d 
	tI¡64
;

79 
	tUI¡32
;

80 sig√d 
	tI¡32
;

81 
	tUI¡16
;

82 sig√d 
	tI¡16
;

83 
	tUI¡8
 ;

84 sig√d 
	tI¡8
 ;

86 
	tVoid
;

87 
	tÊﬂt32_t
;

88 
	tÊﬂt64_t
;

93 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


94 
Êﬂt32_t
 
	tNvF32
;

95 
Êﬂt64_t
 
	tNvF64
;

97 
	tNvF32
;

98 
	tNvF64
;

103 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


104 
UI¡8
 
	tNvV8
;

105 
UI¡8
 
	tNvU8
;

106 
I¡8
 
	tNvS8
;

108 
	tNvV8
;

109 
	tNvU8
;

110 sig√d 
	tNvS8
;

115 #ifde‡
__INT16_TYPE__


116 
	t__INT16_TYPE__
 
	tNvV16
;

117 
	t__INT16_TYPE__
 
	tNvU16
;

118 sig√d 
	t__INT16_TYPE__
 
	tNvS16
;

122 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


123 
UI¡16
 
	tNvV16
;

124 
UI¡16
 
	tNvU16
;

125 
I¡16
 
	tNvS16
;

127 
	tNvV16
;

128 
	tNvU16
;

129 sig√d 
	tNvS16
;

135 
	#NvU16_HI08
(
n
Ë((
NvU8
)(((
NvU16
)“)Ë>> 8))

	)

136 
	#NvU16_LO08
(
n
Ë((
NvU8
)((
NvU16
)“)))

	)

139 
	#NvU16_BUILD
(
msb
, 
lsb
Ë(((msbË<< 8)|÷sb))

	)

141 #i‡
deföed
(
macosx
Ë|| deföed(
MACOS
Ë|| deföed(
NV_MACINTOSH
) || \

142 
deföed
(
NV_MACINTOSH_64
Ë|| deföed(
NVCPU_AARCH64
)

143 * 
	tNVREGSTR
;

145 
NvU8
* 
	tNVREGSTR
;

150 #ifde‡
__INT32_TYPE__


151 
	t__INT32_TYPE__
 
	tNvV32
;

152 
	t__INT32_TYPE__
 
	tNvU32
;

153 sig√d 
	t__INT32_TYPE__
 
	tNvS32
;

161 #i‡(
deföed
(
NV_UNIX
Ë|| deföed(
vxw‹ks
Ë|| deföed(
NV_WINDOWS_CE
) || \

162 
deföed
(
__¨m
Ë|| deföed(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
NV_QNX
) || \

163 
deföed
(
NV_INTEGRITY
Ë|| deföed(
NV_HOS
Ë|| deföed(
NV_MODS
) || \

164 
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
Ë|| deföed(
NV_MACINTOSH_64
)) && \

165 (!
deföed
(
NV_MACINTOSH
Ë|| deföed(
NV_MACINTOSH_64
))

166 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


167 
UI¡32
 
	tNvV32
;

168 
UI¡32
 
	tNvU32
;

170 
	tNvV32
;

171 
	tNvU32
;

176 
	tNvV32
;

177 
	tNvU32
;

181 #i‡
deföed
(
NV_MACINTOSH
Ë&& !deföed(
NV_MACINTOSH_64
)

182 sig√d 
	tNvS32
;

184 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


185 
I¡32
 
	tNvS32
;

187 sig√d 
	tNvS32
;

195 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
Ë|| deföed(
__¨m
) || \

196 
deföed
(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
__ghs__
Ë|| deföed(
_WIN64
) || \

197 
deföed
(
__SUNPRO_C
Ë|| deföed(
__SUNPRO_CC
Ë|| deföed (
__xlC__
)

198 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


199 
UI¡64
 
	tNvU64
;

200 
I¡64
 
	tNvS64
;

202 
	tNvU64
;

203 
	tNvS64
;

206 
	#NvU64_fmtX
 "ŒX"

	)

207 
	#NvU64_fmtx
 "Œx"

	)

208 
	#NvU64_fmtu
 "Œu"

	)

209 
	#NvU64_fmto
 "Œo"

	)

210 
	#NvS64_fmtd
 "Œd"

	)

211 
	#NvS64_fmti
 "Œi"

	)

215 
	t__öt64
 
	tNvU64
;

216 
__öt64
 
	tNvS64
;

218 
	#NvU64_fmtX
 "I64X"

	)

219 
	#NvU64_fmtx
 "I64x"

	)

220 
	#NvU64_fmtu
 "I64u"

	)

221 
	#NvU64_fmto
 "I64o"

	)

222 
	#NvS64_fmtd
 "I64d"

	)

223 
	#NvS64_fmti
 "I64i"

	)

227 #ifde‡
NV_TYPESAFE_HANDLES


236 
NvU32
 
vÆ
;

237 } 
	tNvH™dÀ
;

242 
NvU32
 
	tNvH™dÀ
;

246 
NvU8
 
	tNvBoﬁ
;

247 
	#NV_TRUE
 ((
NvBoﬁ
)(0 =0))

	)

248 
	#NV_FALSE
 ((
NvBoﬁ
)(0 !0))

	)

251 
NvU8
 
	tNvTri°©e
;

252 
	#NV_TRISTATE_FALSE
 ((
NvTri°©e
Ë0)

	)

253 
	#NV_TRISTATE_TRUE
 ((
NvTri°©e
Ë1)

	)

254 
	#NV_TRISTATE_INDETERMINATE
 ((
NvTri°©e
Ë2)

	)

258 #ifde‡
NV_MISRA_COMPLIANCE_REQUIRED


259 
	#NvU64_HI32
(
n
Ë((
NvU32
)((((
NvU64
)“)Ë>> 32Ë& 0xffffffffU))

	)

260 
	#NvU64_LO32
(
n
Ë((
NvU32
)(–(
NvU64
)“)Ë& 0xffffffffU))

	)

262 
	#NvU64_HI32
(
n
Ë((
NvU32
)((((
NvU64
)“)Ë>> 32Ë& 0xffffffff))

	)

263 
	#NvU64_LO32
(
n
Ë((
NvU32
)(–(
NvU64
)“)Ë& 0xffffffff))

	)

265 
	#NvU40_HI32
(
n
Ë((
NvU32
)((((
NvU64
)“)Ë>> 8Ë& 0xffffffffU))

	)

266 
	#NvU40_HI24of32
(
n
Ë((
NvU32
)–(
NvU64
)“Ë& 0xffffff00U))

	)

269 
	#NvU32_HI16
(
n
Ë((
NvU16
)((((
NvU32
)“)Ë>> 16Ë& 0xffff))

	)

270 
	#NvU32_LO16
(
n
Ë((
NvU16
)(–(
NvU32
)“)Ë& 0xffff))

	)

278 #i‡
deföed
(
NV_64_BITS
)

280 * 
	tNvP64
;

281 
NvU64
 
	tNvUPå
;

282 
NvS64
 
	tNvSPå
;

283 
NvU64
 
	tNvLígth
;

285 
	#NvP64_VALUE
(
n
Ë“)

	)

286 
	#NvP64_fmt
 "%p"

	)

288 
	#KERNEL_POINTER_FROM_NvP64
(
p
,
v
Ë(’)(v))

	)

289 
	#NvP64_PLUS_OFFSET
(
p
,
o
Ë(
NvP64
)((
NvU64
)’Ë+ (NvU64)(o))

	)

291 
	#NvUPå_fmtX
 
NvU64_fmtX


	)

292 
	#NvUPå_fmtx
 
NvU64_fmtx


	)

293 
	#NvUPå_fmtu
 
NvU64_fmtu


	)

294 
	#NvUPå_fmto
 
NvU64_fmto


	)

295 
	#NvSPå_fmtd
 
NvS64_fmtd


	)

296 
	#NvSPå_fmti
 
NvS64_fmti


	)

300 
NvU64
 
	tNvP64
;

301 
NvU32
 
	tNvUPå
;

302 
NvS32
 
	tNvSPå
;

303 
NvU32
 
	tNvLígth
;

305 
	#NvP64_VALUE
(
n
Ë((*)(
NvUPå
)“))

	)

306 
	#NvP64_fmt
 "0x%Œx"

	)

308 
	#KERNEL_POINTER_FROM_NvP64
(
p
,
v
Ë(’)(
NvUPå
)(v))

	)

309 
	#NvP64_PLUS_OFFSET
(
p
,
o
Ë(’Ë+ (
NvU64
)(o))

	)

311 
	#NvUPå_fmtX
 "X"

	)

312 
	#NvUPå_fmtx
 "x"

	)

313 
	#NvUPå_fmtu
 "u"

	)

314 
	#NvUPå_fmto
 "o"

	)

315 
	#NvSPå_fmtd
 "d"

	)

316 
	#NvSPå_fmti
 "i"

	)

320 
	#NvP64_NULL
 (
NvP64
)0

	)

328 
	#NvU64_ALIGN32_PACK
(
pD°
, 
pSrc
) \

330 (
pD°
)->
lo
 = 
	`NvU64_LO32
(*(
pSrc
)); \

331 (
pD°
)->
hi
 = 
	`NvU64_HI32
(*(
pSrc
)); \

332 } 0)

	)

340 
	#NvU64_ALIGN32_UNPACK
(
pD°
, 
pSrc
) \

342 (*
pD°
Ë
	`NvU64_ALIGN32_VAL
(
pSrc
); \

343 } 0)

	)

350 
	#NvU64_ALIGN32_VAL
(
pSrc
) \

351 ((
NvU64
Ë((NvU64)((
pSrc
)->
lo
Ë| (((NvU64)’Src)->
hi
Ë<< 32)))

	)

362 
	#NvU64_ALIGN32_IS_ZERO
(
_pU64
Ë(((_pU64)->
lo
 =0Ë&& ((_pU64)->
hi
 =0))

	)

371 
	#NvU64_ALIGN32_ADD
(
pD°
, 
pSrc1
, 
pSrc2
) \

373 
NvU64
 
__d°
, 
__§c1
, 
__s¸2
; \

375 
	`NvU64_ALIGN32_UNPACK
(&
__§c1
, 
pSrc1
); \

376 
	`NvU64_ALIGN32_UNPACK
(&
__s¸2
, 
pSrc2
); \

377 
__d°
 = 
__§c1
 + 
__s¸2
; \

378 
	`NvU64_ALIGN32_PACK
(
pD°
, &
__d°
); \

379 } 0)

	)

388 
	#NvU64_ALIGN32_SUB
(
pD°
, 
pSrc1
, 
pSrc2
) \

390 
NvU64
 
__d°
, 
__§c1
, 
__s¸2
; \

392 
	`NvU64_ALIGN32_UNPACK
(&
__§c1
, 
pSrc1
); \

393 
	`NvU64_ALIGN32_UNPACK
(&
__s¸2
, 
pSrc2
); \

394 
__d°
 = 
__§c1
 + 
__s¸2
; \

395 
	`NvU64_ALIGN32_PACK
(
pD°
, &
__d°
); \

396 } 0)

	)

421 
NvU32
 
lo
;

425 
NvU32
 
hi
;

426 } 
	tNvU64_ALIGN32
;

429 
NvP64
 
	tNvP64_VALUE_T
;

430 
	#NvP64_LVALUE
(
n
Ë“)

	)

431 
	#NvP64_SELECTOR
(
n
Ë(0)

	)

434 
	#NV_PTR_TO_NvP64
(
n
Ë(
NvP64
)(
NvUPå
)“)

	)

435 
	#NV_SIGN_EXT_PTR_TO_NvP64
(
p
Ë((
NvP64
)(
NvS64
)(
NvSPå
)’))

	)

436 
	#KERNEL_POINTER_TO_NvP64
(
p
Ë((
NvP64
)(
uöçå_t
)’))

	)

441 #i‚de‡
DONT_DEFINE_U032


442 
NvV8
 
	tV008
;

443 
NvV16
 
	tV016
;

444 
NvV32
 
	tV032
;

445 
NvU8
 
	tU008
;

446 
NvU16
 
	tU016
;

447 
NvU32
 
	tU032
;

448 
NvS8
 
	tS008
;

449 
NvS16
 
	tS016
;

450 
NvS32
 
	tS032
;

452 #i‡
deföed
(
MACOS
Ë|| deföed(
macötosh
Ë|| deföed(
__APPLE_CC__
Ë|| deföed(
NV_MODS
Ë|| deföed(
MINIRM
Ë|| deföed(
NV_UNIX
Ë|| deföed (
NV_QNX
Ë|| deföed(
NV_INTEGRITY
Ë|| deföed(
NV_HOS
)

455 #i‡
deföed
(
__APPLE_CC__
)

456 #unde‡
ULONG


457 
	#ULONG
 

	)

459 
	tULONG
;

461 *
	tPUCHAR
;

479 
	#NV_S8_MIN
 (-128)

	)

480 
	#NV_S8_MAX
 (+127)

	)

481 
	#NV_U8_MIN
 (0U)

	)

482 
	#NV_U8_MAX
 (+255U)

	)

483 
	#NV_S16_MIN
 (-32768)

	)

484 
	#NV_S16_MAX
 (+32767)

	)

485 
	#NV_U16_MIN
 (0U)

	)

486 
	#NV_U16_MAX
 (+65535U)

	)

487 
	#NV_S32_MIN
 (-2147483647 - 1)

	)

488 
	#NV_S32_MAX
 (+2147483647)

	)

489 
	#NV_U32_MIN
 (0U)

	)

490 
	#NV_U32_MAX
 (+4294967295U)

	)

491 
	#NV_S64_MIN
 (-9223372036854775807LL - 1LL)

	)

492 
	#NV_S64_MAX
 (+9223372036854775807LL)

	)

493 
	#NV_U64_MIN
 (0ULL)

	)

494 
	#NV_U64_MAX
 (+18446744073709551615ULL)

	)

496 #i‡!
deföed
(
NV_PTR
)

497 
	#NV_PTR


	)

498 
	#CAST_NV_PTR
(
p
Ë
	)
p

502 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
Ë|| deföed(
NV_QNX
Ë|| deföed(
NV_HOS
)

503 
	#NV_ALIGN_BYTES
(
size
Ë
	`__©åibuã__
 ((
	`Æig√d
 (size)))

	)

504 #ñi‡
deföed
(
__¨m
)

505 
	#NV_ALIGN_BYTES
(
size
Ë
	`__Æign
(
ALIGN
)

	)

509 
	#NV_ALIGN_BYTES
(
size
)

	)

516 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
Ë|| deföed(
NV_QNX
Ë|| deföed(
NV_HOS
)

517 
	#NV_DECLARE_ALIGNED
(
TYPE_VAR
, 
ALIGN
ËTYPE_VAR 
	`__©åibuã__
 ((
	`Æig√d
 (ALIGN)))

	)

518 #ñi‡
deföed
(
_MSC_VER
)

519 
	#NV_DECLARE_ALIGNED
(
TYPE_VAR
, 
ALIGN
Ë
	`__de˛•ec
(
	`Æign
(ALIGN)Ë
	)
TYPE_VAR

520 #ñi‡
deföed
(
__¨m
)

521 
	#NV_DECLARE_ALIGNED
(
TYPE_VAR
, 
ALIGN
Ë
	`__Æign
(ALIGNË
	)
TYPE_VAR

525 #i‡(
deföed
(
_MSC_VER
Ë&& deföed(
NVRM4X_BUILD
))

526 
	#NVRM_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

528 
	#NVRM_IMPORT


	)

532 #i‡
deföed
(
__GNUC__
)

533 
	#NV_TYPEOF_SUPPORTED
 1

	)

535 
	#NV_TYPEOF_SUPPORTED
 0

	)

546 #i‡
deföed
(
_MSC_VER
)

548 #i‡
_MSC_VER
 >= 1310

549 
	#NV_NOINLINE
 
	`__de˛•ec
(
noölöe
)

	)

551 
	#NV_NOINLINE


	)

554 
	#NV_INLINE
 
__ölöe


	)

556 #i‡
_MSC_VER
 >= 1200

557 
	#NV_FORCEINLINE
 
__f‹˚ölöe


	)

559 
	#NV_FORCEINLINE
 
__ölöe


	)

562 
	#NV_APIENTRY
 
__°dˇŒ


	)

563 
	#NV_FASTCALL
 
__Á°ˇŒ


	)

564 
	#NV_CDECLCALL
 
__cde˛


	)

565 
	#NV_STDCALL
 
__°dˇŒ


	)

567 
	#NV_FORCERESULTCHECK


	)

569 
	#NV_ATTRIBUTE_UNUSED


	)

573 #i‡
deföed
(
__GNUC__
)

574 #i‡(
__GNUC__
 > 3) || \

575 ((
__GNUC__
 =3Ë&& (
__GNUC_MINOR__
 >1Ë&& (
__GNUC_PATCHLEVEL__
 >= 1))

576 
	#NV_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

578 #ñi‡
deföed
(
__˛™g__
)

579 #i‡
__has_©åibuã
(
noölöe
)

580 
	#NV_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

582 #ñi‡
deföed
(
__¨m
Ë&& (
__ARMCC_VERSION
 >= 300000)

583 
	#NV_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

584 #ñi‡(
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590)) ||\

585 (
deföed
(
__SUNPRO_CC
) && (__SUNPRO_CC >= 0x590))

586 
	#NV_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

587 #ñi‡
deföed
 (
__INTEL_COMPILER
)

588 
	#NV_NOINLINE
 
	`__©åibuã__
((
noölöe
))

	)

591 #i‡!
deföed
(
NV_NOINLINE
)

592 
	#NV_NOINLINE


	)

597 #i‡
deföed
(
__ghs__
)

598 
	#NV_INLINE
 
ölöe


	)

599 #ñi‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
Ë|| deföed(
__INTEL_COMPILER
)

600 
	#NV_INLINE
 
__ölöe__


	)

601 #ñi‡
deföed
 (
macötosh
Ë|| deföed(
__SUNPRO_C
Ë|| deföed(
__SUNPRO_CC
)

602 
	#NV_INLINE
 
ölöe


	)

603 #ñi‡
deföed
(
__¨m
)

604 
	#NV_INLINE
 
__ölöe


	)

606 
	#NV_INLINE


	)

610 #i‡!
deföed
(
DEBUG
)

613 #i‡
deföed
(
__ghs__
)

614 
	#NV_FORCEINLINE
 
ölöe


	)

615 #ñi‡
deföed
(
__GNUC__
)

617 #i‡(
__GNUC__
 > 3Ë|| ((__GNUC__ =3Ë&& (
__GNUC_MINOR__
 >= 1))

618 
	#NV_FORCEINLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
__ölöe__


	)

620 
	#NV_FORCEINLINE
 
__ölöe__


	)

622 #ñi‡
deföed
(
__˛™g__
)

623 #i‡
__has_©åibuã
(
Æways_ölöe
)

624 
	#NV_FORCEINLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
__ölöe__


	)

626 
	#NV_FORCEINLINE
 
__ölöe__


	)

628 #ñi‡
deföed
(
__¨m
Ë&& (
__ARMCC_VERSION
 >= 220000)

630 
	#NV_FORCEINLINE
 
__f‹˚ölöe


	)

632 
	#NV_FORCEINLINE
 
NV_INLINE


	)

635 
	#NV_FORCEINLINE
 
NV_INLINE


	)

638 
	#NV_APIENTRY


	)

639 
	#NV_FASTCALL


	)

640 
	#NV_CDECLCALL


	)

641 
	#NV_STDCALL


	)

650 #i‡
deföed
(
__GNUC__
Ë&& deföed(
NV_UNIX
)

651 #i‡(
__GNUC__
 > 3Ë|| ((__GNUC__ =3Ë&& (
__GNUC_MINOR__
 >= 4))

652 
	#NV_FORCERESULTCHECK
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

654 
	#NV_FORCERESULTCHECK


	)

656 #ñi‡
deföed
(
__˛™g__
)

657 #i‡
__has_©åibuã
(
w¨n_unu£d_ªsu…
)

658 
	#NV_FORCERESULTCHECK
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

660 
	#NV_FORCERESULTCHECK


	)

663 
	#NV_FORCERESULTCHECK


	)

666 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
Ë|| deföed(
__INTEL_COMPILER
)

667 
	#NV_ATTRIBUTE_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

669 
	#NV_ATTRIBUTE_UNUSED


	)

681 
NvS16
 
	tNvSFXP16
;

682 
NvS32
 
	tNvSFXP32
;

683 
NvU16
 
	tNvUFXP16
;

684 
NvU32
 
	tNvUFXP32
;

685 
NvU64
 
	tNvUFXP64
;

698 
NvSFXP16
 
	tNvSFXP11_5
;

699 
NvSFXP16
 
	tNvSFXP4_12
;

700 
NvSFXP16
 
	tNvSFXP8_8
;

701 
NvSFXP32
 
	tNvSFXP8_24
;

702 
NvSFXP32
 
	tNvSFXP10_22
;

703 
NvSFXP32
 
	tNvSFXP16_16
;

704 
NvSFXP32
 
	tNvSFXP18_14
;

705 
NvSFXP32
 
	tNvSFXP20_12
;

706 
NvSFXP32
 
	tNvSFXP24_8
;

707 
NvSFXP32
 
	tNvSFXP27_5
;

708 
NvSFXP32
 
	tNvSFXP28_4
;

709 
NvSFXP32
 
	tNvSFXP29_3
;

710 
NvSFXP32
 
	tNvSFXP31_1
;

712 
NvUFXP16
 
	tNvUFXP0_16
;

713 
NvUFXP16
 
	tNvUFXP4_12
;

714 
NvUFXP16
 
	tNvUFXP8_8
;

715 
NvUFXP32
 
	tNvUFXP3_29
;

716 
NvUFXP32
 
	tNvUFXP4_28
;

717 
NvUFXP32
 
	tNvUFXP8_24
;

718 
NvUFXP32
 
	tNvUFXP9_23
;

719 
NvUFXP32
 
	tNvUFXP10_22
;

720 
NvUFXP32
 
	tNvUFXP16_16
;

721 
NvUFXP32
 
	tNvUFXP20_12
;

722 
NvUFXP32
 
	tNvUFXP24_8
;

723 
NvUFXP32
 
	tNvUFXP25_7
;

724 
NvUFXP32
 
	tNvUFXP28_4
;

726 
NvUFXP64
 
	tNvUFXP40_24
;

727 
NvUFXP64
 
	tNvUFXP48_16
;

728 
NvUFXP64
 
	tNvUFXP52_12
;

736 
	#NV_TYPES_FXP_INTEGER
(
x
, 
y
Ë((x)+(y)-1):(y)

	)

737 
	#NV_TYPES_FXP_FRACTIONAL
(
x
, 
y
Ë((y)-1):0

	)

738 
	#NV_TYPES_FXP_FRACTIONAL_MSB
(
x
, 
y
Ë((y)-1):((y)-1)

	)

739 
	#NV_TYPES_FXP_FRACTIONAL_MSB_ONE
 0x00000001

	)

740 
	#NV_TYPES_FXP_FRACTIONAL_MSB_ZERO
 0x00000000

	)

741 
	#NV_TYPES_FXP_ZERO
 (0)

	)

746 
	#NV_TYPES_UFXP_INTEGER_MAX
(
x
, 
y
Ë(~(
	`BIT
((y))-1))

	)

747 
	#NV_TYPES_UFXP_INTEGER_MIN
(
x
, 
y
Ë(0)

	)

752 
	#NV_TYPES_SFXP_INTEGER_SIGN
(
x
, 
y
Ë((x)+(y)-1):((x)+(y)-1)

	)

753 
	#NV_TYPES_SFXP_INTEGER_SIGN_NEGATIVE
 0x00000001

	)

754 
	#NV_TYPES_SFXP_INTEGER_SIGN_POSITIVE
 0x00000000

	)

755 
	#NV_TYPES_SFXP_S32_SIGN_EXTENSION
(
x
, 
y
Ë31:(x)

	)

756 
	#NV_TYPES_SFXP_S32_SIGN_EXTENSION_POSITIVE
(
x
, 
y
Ë0x00000000

	)

757 
	#NV_TYPES_SFXP_S32_SIGN_EXTENSION_NEGATIVE
(
x
, 
y
Ë(
	`BIT
(32-(x))-1)

	)

758 
	#NV_TYPES_SFXP_INTEGER_MAX
(
x
, 
y
Ë(
	`BIT
((x))-1)

	)

759 
	#NV_TYPES_SFXP_INTEGER_MIN
(
x
, 
y
Ë(~(
	`BIT
((x))-1))

	)

782 
	#NV_TYPES_U32_TO_UFXP_X_Y
(
x
, 
y
, 
öãgî
) \

783 ((
NvUFXP
##
x
##
_
##
y
Ë(((
NvU32
Ë(
öãgî
)) << \

784 
	`DRF_SHIFT
(
	`NV_TYPES_FXP_INTEGER
((
x
), (
y
)))))

	)

786 
	#NV_TYPES_U32_TO_UFXP_X_Y_SCALED
(
x
, 
y
, 
öãgî
, 
sˇÀ
) \

787 ((
NvUFXP
##
x
##
_
##
y
Ë((((((
NvU32
Ë(
öãgî
)) << \

788 
	`DRF_SHIFT
(
	`NV_TYPES_FXP_INTEGER
((
x
), (
y
))))) / \

789 (
sˇÀ
)) + \

790 ((((((
NvU32
Ë(
öãgî
)) << \

791 
	`DRF_SHIFT
(
	`NV_TYPES_FXP_INTEGER
((
x
), (
y
)))) % \

792 (
sˇÀ
)Ë> ((sˇÀË/ 2)Ë? 1 : 0)))

	)

794 
	#NV_TYPES_UFXP_X_Y_TO_U32
(
x
, 
y
, 
fxp
) \

795 ((
NvU32
Ë(
	`DRF_VAL
(
_TYPES
, 
_FXP
, 
	`_INTEGER
((
x
), (
y
)), \

796 ((
NvUFXP
##
x
##
_
##
y
Ë(
fxp
)))))

	)

798 
	#NV_TYPES_UFXP_X_Y_TO_U32_ROUNDED
(
x
, 
y
, 
fxp
) \

799 (
	`NV_TYPES_UFXP_X_Y_TO_U32
(
x
, 
y
, (
fxp
)) + \

800 !!
	`DRF_VAL
(
_TYPES
, 
_FXP
, 
	`_FRACTIONAL_MSB
((
x
), (
y
)), \

801 ((
NvUFXP
##
x
##
_
##
y
Ë(
fxp
))))

	)

804 
	#NV_TYPES_U64_TO_UFXP_X_Y
(
x
, 
y
, 
öãgî
) \

805 ((
NvUFXP
##
x
##
_
##
y
Ë(((
NvU64
Ë(
öãgî
)) << \

806 
	`DRF_SHIFT
(
	`NV_TYPES_FXP_INTEGER
((
x
), (
y
)))))

	)

808 
	#NV_TYPES_U64_TO_UFXP_X_Y_SCALED
(
x
, 
y
, 
öãgî
, 
sˇÀ
) \

809 ((
NvUFXP
##
x
##
_
##
y
Ë(((((
NvU64
Ë(
öãgî
)) << \

810 
	`DRF_SHIFT
(
	`NV_TYPES_FXP_INTEGER
((
x
), (
y
)))) + \

811 ((
sˇÀ
) / 2)) / \

812 (
sˇÀ
)))

	)

814 
	#NV_TYPES_UFXP_X_Y_TO_U64
(
x
, 
y
, 
fxp
) \

815 ((
NvU64
Ë(
	`DRF_VAL
(
_TYPES
, 
_FXP
, 
	`_INTEGER
((
x
), (
y
)), \

816 ((
NvUFXP
##
x
##
_
##
y
Ë(
fxp
)))))

	)

818 
	#NV_TYPES_UFXP_X_Y_TO_U64_ROUNDED
(
x
, 
y
, 
fxp
) \

819 (
	`NV_TYPES_UFXP_X_Y_TO_U64
(
x
, 
y
, (
fxp
)) + \

820 !!
	`DRF_VAL
(
_TYPES
, 
_FXP
, 
	`_FRACTIONAL_MSB
((
x
), (
y
)), \

821 ((
NvUFXP
##
x
##
_
##
y
Ë(
fxp
))))

	)

828 
	#NV_TYPES_S32_TO_SFXP_X_Y
(
x
, 
y
, 
öãgî
) \

829 ((
NvSFXP
##
x
##
_
##
y
Ë(((
NvU32
Ë(
öãgî
)) << \

830 
	`DRF_SHIFT
(
	`NV_TYPES_FXP_INTEGER
((
x
), (
y
)))))

	)

832 
	#NV_TYPES_S32_TO_SFXP_X_Y_SCALED
(
x
, 
y
, 
öãgî
, 
sˇÀ
) \

833 ((
NvSFXP
##
x
##
_
##
y
Ë(((((
NvS32
Ë(
öãgî
)) << \

834 
	`DRF_SHIFT
(
	`NV_TYPES_FXP_INTEGER
((
x
), (
y
)))) + \

835 ((
sˇÀ
) / 2)) / \

836 (
sˇÀ
)))

	)

838 
	#NV_TYPES_SFXP_X_Y_TO_S32
(
x
, 
y
, 
fxp
) \

839 ((
NvS32
Ë((
	`DRF_VAL
(
_TYPES
, 
_FXP
, 
	`_INTEGER
((
x
), (
y
)), \

840 ((
NvSFXP
##
x
##
_
##
y
Ë(
fxp
)))) | \

841 ((
	`DRF_VAL
(
_TYPES
, 
_SFXP
, 
	`_INTEGER_SIGN
((
x
), (
y
)), (
fxp
)) == \

842 
NV_TYPES_SFXP_INTEGER_SIGN_NEGATIVE
) ? \

843 
	`DRF_NUM
(
_TYPES
, 
_SFXP
, 
	`_S32_SIGN_EXTENSION
((
x
), (
y
)), \

844 
	`NV_TYPES_SFXP_S32_SIGN_EXTENSION_NEGATIVE
((
x
), (
y
))) : \

845 
	`DRF_NUM
(
_TYPES
, 
_SFXP
, 
	`_S32_SIGN_EXTENSION
((
x
), (
y
)), \

846 
	`NV_TYPES_SFXP_S32_SIGN_EXTENSION_POSITIVE
((
x
), (
y
))))))

	)

848 
	#NV_TYPES_SFXP_X_Y_TO_S32_ROUNDED
(
x
, 
y
, 
fxp
) \

849 (
	`NV_TYPES_SFXP_X_Y_TO_S32
(
x
, 
y
, (
fxp
)) + \

850 !!
	`DRF_VAL
(
_TYPES
, 
_FXP
, 
	`_FRACTIONAL_MSB
((
x
), (
y
)), \

851 ((
NvSFXP
##
x
##
_
##
y
Ë(
fxp
))))

	)

877 
	#NV_TYPES_SINGLE_SIGN
 31:31

	)

878 
	#NV_TYPES_SINGLE_SIGN_POSITIVE
 0x00000000

	)

879 
	#NV_TYPES_SINGLE_SIGN_NEGATIVE
 0x00000001

	)

880 
	#NV_TYPES_SINGLE_EXPONENT
 30:23

	)

881 
	#NV_TYPES_SINGLE_EXPONENT_ZERO
 0x00000000

	)

882 
	#NV_TYPES_SINGLE_EXPONENT_BIAS
 0x0000007F

	)

883 
	#NV_TYPES_SINGLE_MANTISSA
 22:0

	)

895 
	#NV_TYPES_SINGLE_MANTISSA_TO_UFXP9_23
(
sögÀ
) \

896 ((
NvUFXP9_23
)(
	`FLD_TEST_DRF
(
_TYPES
, 
_SINGLE
, 
_EXPONENT
, 
_ZERO
, 
sögÀ
) ? \

897 
	`NV_TYPES_U32_TO_UFXP_X_Y
(9, 23, 0) : \

898 (
	`NV_TYPES_U32_TO_UFXP_X_Y
(9, 23, 1) + \

899 
	`DRF_VAL
(
_TYPES
, 
_SINGLE
, 
_MANTISSA
, 
sögÀ
))))

	)

909 
	#NV_TYPES_SINGLE_EXPONENT_BIASED
(
sögÀ
) \

910 ((
NvS32
)(
	`DRF_VAL
(
_TYPES
, 
_SINGLE
, 
_EXPONENT
, 
sögÀ
) - \

911 
NV_TYPES_SINGLE_EXPONENT_BIAS
))

	)

917 
NvSFXP24_8
 
	tNvTemp
;

922 
	#NV_TYPES_CELSIUS_TO_NV_TEMP
(
˚l
) \

923 
	`NV_TYPES_S32_TO_SFXP_X_Y
(24,8,(
˚l
))

	)

924 
	#NV_TYPES_NV_TEMP_TO_CELSIUS_TRUNCED
(
nvt
) \

925 
	`NV_TYPES_SFXP_X_Y_TO_S32
(24,8,(
nvt
))

	)

926 
	#NV_TYPES_NV_TEMP_TO_CELSIUS_ROUNDED
(
nvt
) \

927 
	`NV_TYPES_SFXP_X_Y_TO_S32_ROUNDED
(24,8,(
nvt
))

	)

932 
	#NV_NBITS_IN_TYPE
(
ty≥
Ë(8 * —y≥))

	)

937 
	#NV_TYPES_NVSFXP11_5_TO_NV_TEMP
(
x
Ë((
NvTemp
)(xË<< 3)

	)

942 
	#NV_TYPES_NVUFXP11_5_WATTS_TO_NVU32_MILLI_WATTS
(
x
Ë((((
NvU32
)(x)Ë* ((NvU32)1000)Ë>> 5)

	)

944 #ifde‡
__˝lu•lus


	@src/common/inc/xapi-sdk.h

16 #i‚de‡
XAPI_SDK_H


17 
	#XAPI_SDK_H


	)

22 
	#XAPI_ENVELOPE_SIZE
 16384

	)

23 
	#XAPI_ENVELOPE_MAX_PAYLOAD_SIZE
 (
XAPI_ENVELOPE_SIZE
 - 32 - 4 )

	)

26 
	#XAPI_MAX_FIELD_SIZE
 
XAPI_ENVELOPE_MAX_PAYLOAD_SIZE


	)

28 
	#XAPI_CASE
(
x
)

	)

29 
	#XAPI_CASE_EMPTY
(
x
Ë: 0

	)

30 
	#XAPI_SWITCH
(
x
)

	)

31 
	#XAPI_HIDDEN
(
x
Ë
	)
x

32 
	#XAPI_FIELD_PTR_AS_VALUE
(
TYPE
, 
FIELD_NAME
) \

33 
TYPE
 *
FIELD_NAME


	)

34 
	#XAPI_FIELD_HIDDEN
(
FIELD_NAME
) \

35 
FIELD_NAME


	)

36 
	#XAPI_FIELD_FUNCTION_PTR
(
TYPE
, 
FIELD_NAME
) \

37 
TYPE
 
FIELD_NAME


	)

38 
	#XAPI_FIELD_STRING
(
FIELD_NAME
, 
MAXCHARS
) \

39 
FIELD_NAME
[
MAXCHARS
]

	)

40 
	#XAPI_FIELD_PTR_TO_STRING
(
FIELD_NAME
, 
MAXCHARS
) \

41 *
FIELD_NAME


	)

42 
	#XAPI_FIELD_NVP64_PTR_TO_STRING
(
FIELD_NAME
, 
MAXCHARS
) \

43 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

44 
	#XAPI_FIELD_NVP64_PTR_TO_STRING_CI
(
FIELD_NAME
, 
MAXCHARS
) \

45 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

46 
	#XAPI_FIELD_NVP64_PTR_TO_STRING_CO
(
FIELD_NAME
, 
MAXCHARS
) \

47 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

49 
	#XAPI_FIELD_FIXED_BYTE_ARRAY
(
FIELD_NAME
, 
MAXELEMENTS
) \

50 
NvU8
 
FIELD_NAME
[
MAXELEMENTS
]

	)

51 
	#XAPI_FIELD_FIXED_BYTE_ARRAY_CI
(
FIELD_NAME
, 
MAXELEMENTS
) \

52 
NvU8
 
FIELD_NAME
[
MAXELEMENTS
]

	)

53 
	#XAPI_FIELD_FIXED_BYTE_ARRAY_CO
(
FIELD_NAME
, 
MAXELEMENTS
) \

54 
NvU8
 
FIELD_NAME
[
MAXELEMENTS
]

	)

56 
	#XAPI_FIELD_COUNTED_BYTE_ARRAY
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

57 
NvU8
 
FIELD_NAME
[
MAXELEMENTS
]

	)

58 
	#XAPI_FIELD_COUNTED_BYTE_ARRAY_CI
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

59 
NvU8
 
FIELD_NAME
[
MAXELEMENTS
]

	)

60 
	#XAPI_FIELD_COUNTED_BYTE_ARRAY_CO
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

61 
NvU8
 
FIELD_NAME
[
MAXELEMENTS
]

	)

63 
	#XAPI_FIELD_PTR_TO_COUNTED_BYTE_ARRAY
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

64 
NvU8
 *
FIELD_NAME


	)

65 
	#XAPI_FIELD_PTR_TO_COUNTED_BYTE_ARRAY_CI
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

66 
NvU8
 *
FIELD_NAME


	)

67 
	#XAPI_FIELD_PTR_TO_COUNTED_BYTE_ARRAY_CO
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

68 
NvU8
 *
FIELD_NAME


	)

70 
	#XAPI_FIELD_NVP64_PTR_TO_COUNTED_BYTE_ARRAY
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

71 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

72 
	#XAPI_FIELD_NVP64_PTR_TO_COUNTED_BYTE_ARRAY_CI
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

73 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

74 
	#XAPI_FIELD_NVP64_PTR_TO_COUNTED_BYTE_ARRAY_CO
(
FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

75 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

77 
	#XAPI_FIELD_PTR_TO_ARRAY
(
TYPE
, 
PTR_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

78 
TYPE
 *
PTR_FIELD_NAME


	)

79 
	#XAPI_FIELD_PTR_TO_ARRAY_CI
(
TYPE
, 
PTR_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

80 
TYPE
 *
PTR_FIELD_NAME


	)

81 
	#XAPI_FIELD_PTR_TO_ARRAY_CO
(
TYPE
, 
PTR_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

82 
TYPE
 *
PTR_FIELD_NAME


	)

84 
	#XAPI_FIELD_NVP64_PTR_TO_ARRAY
(
TYPE
, 
PTR_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

85 
NvP64
 
PTR_FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

86 
	#XAPI_FIELD_NVP64_PTR_TO_ARRAY_CI
(
TYPE
, 
PTR_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

87 
NvP64
 
PTR_FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

88 
	#XAPI_FIELD_NVP64_PTR_TO_ARRAY_CO
(
TYPE
, 
PTR_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

89 
NvP64
 
PTR_FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

91 
	#XAPI_FIELD_ARRAY
(
TYPE
, 
INLINE_ARRAY_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

92 
TYPE
 
INLINE_ARRAY_FIELD_NAME
[
MAXELEMENTS
]

	)

93 
	#XAPI_FIELD_ARRAY_CI
(
TYPE
, 
INLINE_ARRAY_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

94 
TYPE
 
INLINE_ARRAY_FIELD_NAME
[
MAXELEMENTS
]

	)

95 
	#XAPI_FIELD_ARRAY_CO
(
TYPE
, 
INLINE_ARRAY_FIELD_NAME
, 
FIELD_COUNT
, 
MAXELEMENTS
) \

96 
TYPE
 
INLINE_ARRAY_FIELD_NAME
[
MAXELEMENTS
]

	)

98 
	#XAPI_FIELD_UNION
(
TYPE
, 
INLINE_UNION_FIELD_NAME
, 
DISCRIMINANT_FIELD
) \

99 
TYPE
 
INLINE_UNION_FIELD_NAME


	)

100 
	#XAPI_FIELD_UNION_CI
(
TYPE
, 
INLINE_UNION_FIELD_NAME
, 
DISCRIMINANT_FIELD
) \

101 
TYPE
 
INLINE_UNION_FIELD_NAME


	)

102 
	#XAPI_FIELD_UNION_CO
(
TYPE
, 
INLINE_UNION_FIELD_NAME
, 
DISCRIMINANT_FIELD
) \

103 
TYPE
 
INLINE_UNION_FIELD_NAME


	)

105 
	#XAPI_FIELD_NVP64_PTR
(
TYPE
, 
FIELD_NAME
) \

106 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

107 
	#XAPI_FIELD_NVP64_PTR_CI
(
TYPE
, 
FIELD_NAME
) \

108 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

109 
	#XAPI_FIELD_NVP64_PTR_CO
(
TYPE
, 
FIELD_NAME
) \

110 
NvP64
 
FIELD_NAME
 
	`NV_ALIGN_BYTES
(8)

	)

112 
	#XAPI_NYI


	)

	@src/common/linuxkpi/drivers/gpu/drm/drm_crtc_helper_internal.h

29 
	~<drm/drm_c⁄√˘‹.h
>

30 
	~<drm/drm_¸tc.h
>

31 
	~<drm/drm_dp_hñ≥r.h
>

32 
	~<drm/drm_ícodî.h
>

33 
	~<drm/drm_modes.h
>

36 #ifde‡
CONFIG_DRM_FBDEV_EMULATION


37 
drm_fb_hñ≥r_modöô
();

39 
ölöe
 
	$drm_fb_hñ≥r_modöô
()

42 
	}
}

46 #ifde‡
CONFIG_DRM_DP_AUX_CHARDEV


47 
drm_dp_aux_dev_öô
();

48 
drm_dp_aux_dev_exô
();

49 
drm_dp_aux_ªgi°î_devnode
(
drm_dp_aux
 *
aux
);

50 
drm_dp_aux_uƒegi°î_devnode
(
drm_dp_aux
 *
aux
);

52 
ölöe
 
	$drm_dp_aux_dev_öô
()

55 
	}
}

57 
ölöe
 
	$drm_dp_aux_dev_exô
()

59 
	}
}

61 
ölöe
 
	$drm_dp_aux_ªgi°î_devnode
(
drm_dp_aux
 *
aux
)

64 
	}
}

66 
ölöe
 
	$drm_dp_aux_uƒegi°î_devnode
(
drm_dp_aux
 *
aux
)

68 
	}
}

72 
drm_mode_°©us
 
drm_¸tc_mode_vÆid
(
drm_¸tc
 *
¸tc
,

73 c⁄° 
drm_di•œy_mode
 *
mode
);

74 
drm_mode_°©us
 
drm_ícodî_mode_vÆid
(
drm_ícodî
 *
ícodî
,

75 c⁄° 
drm_di•œy_mode
 *
mode
);

76 
drm_mode_°©us
 
drm_c⁄√˘‹_mode_vÆid
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

77 
drm_di•œy_mode
 *
mode
);

	@src/common/linuxkpi/drivers/gpu/drm/drm_crtc_internal.h

36 
drm_mode_¸tc_£t_obj_¥›
(
drm_mode_obje˘
 *
obj
,

37 
drm_¥›îty
 *
¥›îty
,

38 
uöt64_t
 
vÆue
);

39 
drm_¸tc_check_võwp‹t
(c⁄° 
drm_¸tc
 *
¸tc
,

40 
x
, 
y
,

41 c⁄° 
drm_di•œy_mode
 *
mode
,

42 c⁄° 
drm_‰amebuf„r
 *
fb
);

43 
drm_¸tc_ªgi°î_Æl
(
drm_devi˚
 *
dev
);

44 
drm_¸tc_uƒegi°î_Æl
(
drm_devi˚
 *
dev
);

46 
dma_„n˚
 *
drm_¸tc_¸óã_„n˚
(
drm_¸tc
 *
¸tc
);

49 
drm_mode_gë¸tc
(
drm_devi˚
 *
dev
,

50 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

51 
drm_mode_£t¸tc
(
drm_devi˚
 *
dev
,

52 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

56 
drm_mode£t_ªgi°î_Æl
(
drm_devi˚
 *
dev
);

57 
drm_mode£t_uƒegi°î_Æl
(
drm_devi˚
 *
dev
);

60 
drm_mode_gëªsour˚s
(
drm_devi˚
 *
dev
,

61 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

66 
drm_mode_¸óã_dumb_io˘l
(
drm_devi˚
 *
dev
,

67 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

68 
drm_mode_mm≠_dumb_io˘l
(
drm_devi˚
 *
dev
,

69 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

70 
drm_mode_de°roy_dumb_io˘l
(
drm_devi˚
 *
dev
,

71 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

76 
drm_mode_gamma_gë_io˘l
(
drm_devi˚
 *
dev
,

77 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

78 
drm_mode_gamma_£t_io˘l
(
drm_devi˚
 *
dev
,

79 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

82 
drm_¥›îty_de°roy_u£r_blobs
(
drm_devi˚
 *
dev
,

83 
drm_fûe
 *
fûe_¥iv
);

84 
boﬁ
 
drm_¥›îty_ch™ge_vÆid_gë
(
drm_¥›îty
 *
¥›îty
,

85 
uöt64_t
 
vÆue
,

86 
drm_mode_obje˘
 **
ªf
);

87 
drm_¥›îty_ch™ge_vÆid_put
(
drm_¥›îty
 *
¥›îty
,

88 
drm_mode_obje˘
 *
ªf
);

91 
drm_mode_gë¥›îty_io˘l
(
drm_devi˚
 *
dev
,

92 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

93 
drm_mode_gëblob_io˘l
(
drm_devi˚
 *
dev
,

94 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

95 
drm_mode_¸óãblob_io˘l
(
drm_devi˚
 *
dev
,

96 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

97 
drm_mode_de°royblob_io˘l
(
drm_devi˚
 *
dev
,

98 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

101 
__drm_mode_obje˘_add
(
drm_devi˚
 *
dev
, 
drm_mode_obje˘
 *
obj
,

102 
uöt32_t
 
obj_ty≥
, 
boﬁ
 
ªgi°î_obj
,

103 (*
obj_‰ì_cb
)(
kªf
 *kref));

104 
	`drm_mode_obje˘_add
(
drm_devi˚
 *
dev
, 
drm_mode_obje˘
 *
obj
,

105 
uöt32_t
 
obj_ty≥
);

106 
	`drm_mode_obje˘_ªgi°î
(
drm_devi˚
 *
dev
,

107 
drm_mode_obje˘
 *
obj
);

108 
drm_mode_obje˘
 *
	`__drm_mode_obje˘_föd
(
drm_devi˚
 *
dev
,

109 
drm_fûe
 *
fûe_¥iv
,

110 
uöt32_t
 
id
, uöt32_à
ty≥
);

111 
	`drm_mode_obje˘_uƒegi°î
(
drm_devi˚
 *
dev
,

112 
drm_mode_obje˘
 *
obje˘
);

113 
	`drm_mode_obje˘_gë_¥›îtõs
(
drm_mode_obje˘
 *
obj
, 
boﬁ
 
©omic
,

114 
uöt32_t
 
__u£r
 *
¥›_±r
,

115 
uöt64_t
 
__u£r
 *
¥›_vÆues
,

116 
uöt32_t
 *
¨g_cou¡_¥›s
);

117 
drm_¥›îty
 *
	`drm_mode_obj_föd_¥›_id
(
drm_mode_obje˘
 *
obj
,

118 
uöt32_t
 
¥›_id
);

122 
	`drm_mode_obj_gë_¥›îtõs_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

123 
drm_fûe
 *
fûe_¥iv
);

124 
	`drm_mode_obj_£t_¥›îty_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

125 
drm_fûe
 *
fûe_¥iv
);

128 
	`drm_ícodî_ªgi°î_Æl
(
drm_devi˚
 *
dev
);

129 
	`drm_ícodî_uƒegi°î_Æl
(
drm_devi˚
 *
dev
);

132 
	`drm_mode_gëícodî
(
drm_devi˚
 *
dev
,

133 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

136 
	`drm_c⁄√˘‹_ida_öô
();

137 
	`drm_c⁄√˘‹_ida_de°roy
();

138 
	`drm_c⁄√˘‹_uƒegi°î_Æl
(
drm_devi˚
 *
dev
);

139 
	`drm_c⁄√˘‹_ªgi°î_Æl
(
drm_devi˚
 *
dev
);

140 
	`drm_mode_c⁄√˘‹_£t_obj_¥›
(
drm_mode_obje˘
 *
obj
,

141 
drm_¥›îty
 *
¥›îty
,

142 
uöt64_t
 
vÆue
);

143 
	`drm_c⁄√˘‹_¸óã_°™d¨d_¥›îtõs
(
drm_devi˚
 *
dev
);

144 c⁄° *
	`drm_gë_c⁄√˘‹_f‹˚_«me
(
drm_c⁄√˘‹_f‹˚
 
f‹˚
);

145 
	`drm_c⁄√˘‹_‰ì_w‹k_‚
(
w‹k_°ru˘
 *
w‹k
);

148 
	`drm_mode_c⁄√˘‹_¥›îty_£t_io˘l
(
drm_devi˚
 *
dev
,

149 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

150 
	`drm_mode_gëc⁄√˘‹
(
drm_devi˚
 *
dev
,

151 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

154 
drm_‰amebuf„r
 *

155 
	`drm_öã∫Æ_‰amebuf„r_¸óã
(
drm_devi˚
 *
dev
,

156 c⁄° 
drm_mode_fb_cmd2
 *
r
,

157 
drm_fûe
 *
fûe_¥iv
);

158 
	`drm_‰amebuf„r_‰ì
(
kªf
 *kref);

159 
	`drm_‰amebuf„r_check_§c_co‹ds
(
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

160 
uöt32_t
 
§c_w
, uöt32_à
§c_h
,

161 c⁄° 
drm_‰amebuf„r
 *
fb
);

162 
	`drm_fb_ªÀa£
(
drm_fûe
 *
fûe_¥iv
);

166 
	`drm_mode_addfb
(
drm_devi˚
 *
dev
,

167 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

168 
	`drm_mode_addfb2
(
drm_devi˚
 *
dev
,

169 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

170 
	`drm_mode_rmfb
(
drm_devi˚
 *
dev
,

171 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

172 
	`drm_mode_gëfb
(
drm_devi˚
 *
dev
,

173 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

174 
	`drm_mode_dútyfb_io˘l
(
drm_devi˚
 *
dev
,

175 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

178 #ifde‡
CONFIG_DEBUG_FS


179 
drm_mö‹
;

180 
	`drm_©omic_debugfs_öô
(
drm_mö‹
 *
mö‹
);

183 
	`drm_©omic_c⁄√˘‹_commô_dpms
(
drm_©omic_°©e
 *
°©e
,

184 
drm_c⁄√˘‹
 *
c⁄√˘‹
,

185 
mode
);

186 
	`drm_©omic_£t_¥›îty
(
drm_©omic_°©e
 *
°©e
,

187 
drm_mode_obje˘
 *
obj
,

188 
drm_¥›îty
 *
¥›
,

189 
uöt64_t
 
¥›_vÆue
);

190 
	`drm_©omic_gë_¥›îty
(
drm_mode_obje˘
 *
obj
,

191 
drm_¥›îty
 *
¥›îty
, 
uöt64_t
 *
vÆ
);

192 
	`drm_mode_©omic_io˘l
(
drm_devi˚
 *
dev
,

193 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

197 
	`drm_∂™e_ªgi°î_Æl
(
drm_devi˚
 *
dev
);

198 
	`drm_∂™e_uƒegi°î_Æl
(
drm_devi˚
 *
dev
);

199 
	`drm_∂™e_check_pixñ_f‹m©
(c⁄° 
drm_∂™e
 *
∂™e
,

200 
u32
 
f‹m©
);

203 
	`drm_bridge_dëach
(
drm_bridge
 *
bridge
);

206 
	`drm_mode_gë∂™e_ªs
(
drm_devi˚
 *
dev
, *
d©a
,

207 
drm_fûe
 *
fûe_¥iv
);

208 
	`drm_mode_gë∂™e
(
drm_devi˚
 *
dev
,

209 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

210 
	`drm_mode_£çœ√
(
drm_devi˚
 *
dev
,

211 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

212 
	`drm_mode_curs‹_io˘l
(
drm_devi˚
 *
dev
,

213 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

214 
	`drm_mode_curs‹2_io˘l
(
drm_devi˚
 *
dev
,

215 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

216 
	`drm_mode_∑ge_Êù_io˘l
(
drm_devi˚
 *
dev
,

217 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

220 
	`drm_mode_fixup_1366x768
(
drm_di•œy_mode
 *
mode
);

	@src/common/linuxkpi/drivers/gpu/drm/drm_internal.h

24 
	#DRM_IF_MAJOR
 1

	)

25 
	#DRM_IF_MINOR
 4

	)

28 
muãx
 
drm_globÆ_muãx
;

29 
drm_œ°˛o£
(
drm_devi˚
 *
dev
);

32 
drm_úq_by_busid
(
drm_devi˚
 *
dev
, *
d©a
,

33 
drm_fûe
 *
fûe_¥iv
);

34 
drm_pci_agp_de°roy
(
drm_devi˚
 *
dev
);

35 
drm_pci_£t_busid
(
drm_devi˚
 *
dev
, 
drm_ma°î
 *
ma°î
);

38 
drm_¥ime_h™dÀ_to_fd_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

39 
drm_fûe
 *
fûe_¥iv
);

40 
drm_¥ime_fd_to_h™dÀ_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

41 
drm_fûe
 *
fûe_¥iv
);

43 
drm_¥ime_öô_fûe_¥iv©e
(
drm_¥ime_fûe_¥iv©e
 *
¥ime_Âriv
);

44 
drm_¥ime_de°roy_fûe_¥iv©e
(
drm_¥ime_fûe_¥iv©e
 *
¥ime_Âriv
);

45 
drm_¥ime_ªmove_buf_h™dÀ_locked
(
drm_¥ime_fûe_¥iv©e
 *
¥ime_Âriv
,

46 
dma_buf
 *dma_buf);

49 
drm_mö‹
 *
drm_mö‹_acquúe
(
mö‹_id
);

50 
drm_mö‹_ªÀa£
(
drm_mö‹
 *
mö‹
);

53 
drm_«me_öfo
(
£q_fûe
 *
m
, *
d©a
);

54 
drm_˛õ¡s_öfo
(
£q_fûe
 *
m
, * 
d©a
);

55 
drm_gem_«me_öfo
(
£q_fûe
 *
m
, *
d©a
);

58 
drm_vbœnk_dißbÀ_™d_ßve
(
drm_devi˚
 *
dev
, 
pùe
);

59 
drm_vbœnk_˛ónup
(
drm_devi˚
 *
dev
);

62 
drm_waô_vbœnk_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

63 
drm_fûe
 *
fûp
);

64 
drm_Àgacy_mode£t_˘l_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

65 
drm_fûe
 *
fûe_¥iv
);

70 
drm_Àgacy_úq_c⁄åﬁ
(
drm_devi˚
 *
dev
, *
d©a
,

71 
drm_fûe
 *
fûe_¥iv
);

73 
drm_¸tc_gë_£quí˚_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

74 
drm_fûe
 *
fûp
);

76 
drm_¸tc_queue_£quí˚_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

77 
drm_fûe
 *
fûp
);

80 
drm_gëmagic
(
drm_devi˚
 *
dev
, *
d©a
,

81 
drm_fûe
 *
fûe_¥iv
);

82 
drm_authmagic
(
drm_devi˚
 *
dev
, *
d©a
,

83 
drm_fûe
 *
fûe_¥iv
);

84 
drm_£tma°î_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

85 
drm_fûe
 *
fûe_¥iv
);

86 
drm_dr›ma°î_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

87 
drm_fûe
 *
fûe_¥iv
);

88 
drm_ma°î_›í
(
drm_fûe
 *
fûe_¥iv
);

89 
drm_ma°î_ªÀa£
(
drm_fûe
 *
fûe_¥iv
);

92 
˛ass
 *
drm_˛ass
;

94 
drm_sysfs_öô
();

95 
drm_sysfs_de°roy
();

96 
devi˚
 *
drm_sysfs_mö‹_Æloc
(
drm_mö‹
 *
mö‹
);

97 
drm_sysfs_c⁄√˘‹_add
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

98 
drm_sysfs_c⁄√˘‹_ªmove
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

101 
drm_gem_öô
(
drm_devi˚
 *
dev
);

102 
drm_gem_de°roy
(
drm_devi˚
 *
dev
);

103 
drm_gem_h™dÀ_¸óã_èû
(
drm_fûe
 *
fûe_¥iv
,

104 
drm_gem_obje˘
 *
obj
,

105 
u32
 *
h™dÀp
);

106 
drm_gem_˛o£_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

107 
drm_fûe
 *
fûe_¥iv
);

108 
drm_gem_Êök_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

109 
drm_fûe
 *
fûe_¥iv
);

110 
drm_gem_›í_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

111 
drm_fûe
 *
fûe_¥iv
);

112 
drm_gem_›í
(
drm_devi˚
 *
dev
, 
drm_fûe
 *
fûe_¥iv©e
);

113 
drm_gem_ªÀa£
(
drm_devi˚
 *
dev
, 
drm_fûe
 *
fûe_¥iv©e
);

114 
drm_gem_¥öt_öfo
(
drm_¥öãr
 *
p
, 
ödít
,

115 c⁄° 
drm_gem_obje˘
 *
obj
);

118 #i‡
deföed
(
CONFIG_DEBUG_FS
)

119 
drm_debugfs_öô
(
drm_mö‹
 *
mö‹
, 
mö‹_id
,

120 
díåy
 *
roŸ
);

121 
drm_debugfs_˛ónup
(
drm_mö‹
 *
mö‹
);

122 
drm_debugfs_c⁄√˘‹_add
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

123 
drm_debugfs_c⁄√˘‹_ªmove
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

124 
drm_debugfs_¸tc_add
(
drm_¸tc
 *
¸tc
);

125 
drm_debugfs_¸tc_ªmove
(
drm_¸tc
 *
¸tc
);

126 
drm_debugfs_¸tc_¸c_add
(
drm_¸tc
 *
¸tc
);

128 
ölöe
 
	$drm_debugfs_öô
(
drm_mö‹
 *
mö‹
, 
mö‹_id
,

129 
díåy
 *
roŸ
)

132 
	}
}

134 
ölöe
 
	$drm_debugfs_˛ónup
(
drm_mö‹
 *
mö‹
)

137 
	}
}

139 
ölöe
 
	$drm_debugfs_c⁄√˘‹_add
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

142 
	}
}

143 
ölöe
 
	$drm_debugfs_c⁄√˘‹_ªmove
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

145 
	}
}

147 
ölöe
 
	$drm_debugfs_¸tc_add
(
drm_¸tc
 *
¸tc
)

150 
	}
}

151 
ölöe
 
	$drm_debugfs_¸tc_ªmove
(
drm_¸tc
 *
¸tc
)

153 
	}
}

155 
ölöe
 
	$drm_debugfs_¸tc_¸c_add
(
drm_¸tc
 *
¸tc
)

158 
	}
}

163 
drm_syncobj_›í
(
drm_fûe
 *
fûe_¥iv©e
);

164 
drm_syncobj_ªÀa£
(
drm_fûe
 *
fûe_¥iv©e
);

165 
drm_syncobj_¸óã_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

166 
drm_fûe
 *
fûe_¥iv©e
);

167 
drm_syncobj_de°roy_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

168 
drm_fûe
 *
fûe_¥iv©e
);

169 
drm_syncobj_h™dÀ_to_fd_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

170 
drm_fûe
 *
fûe_¥iv©e
);

171 
drm_syncobj_fd_to_h™dÀ_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

172 
drm_fûe
 *
fûe_¥iv©e
);

173 
drm_syncobj_waô_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

174 
drm_fûe
 *
fûe_¥iv©e
);

175 
drm_syncobj_ª£t_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

176 
drm_fûe
 *
fûe_¥iv©e
);

177 
drm_syncobj_sig«l_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

178 
drm_fûe
 *
fûe_¥iv©e
);

181 
drm_‰amebuf„r_¥öt_öfo
(
drm_¥öãr
 *
p
, 
ödít
,

182 c⁄° 
drm_‰amebuf„r
 *
fb
);

183 
drm_‰amebuf„r_debugfs_öô
(
drm_mö‹
 *
mö‹
);

	@src/common/linuxkpi/drivers/gpu/drm/drm_legacy.h

1 #i‚de‡
__DRM_LEGACY_H__


2 
	#__DRM_LEGACY_H__


	)

31 
	~<löux/li°.h
>

32 
	~<drm/drm_Àgacy.h
>

34 
	gagp_mem‹y
;

35 
	gdrm_devi˚
;

36 
	gdrm_fûe
;

42 
	#DRM_KERNEL_CONTEXT
 0

	)

43 
	#DRM_RESERVED_CONTEXTS
 1

	)

45 
drm_Àgacy_˘xbôm≠_öô
(
drm_devi˚
 *
dev
);

46 
drm_Àgacy_˘xbôm≠_˛ónup
(
drm_devi˚
 *
dev
);

47 
drm_Àgacy_˘xbôm≠_‰ì
(
drm_devi˚
 *
dev
, 
˘x_h™dÀ
);

48 
drm_Àgacy_˘xbôm≠_Êush
(
drm_devi˚
 *
dev
, 
drm_fûe
 *
fûe
);

50 
drm_Àgacy_ªs˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

51 
drm_Àgacy_add˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

52 
drm_Àgacy_gë˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

53 
drm_Àgacy_swôch˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

54 
drm_Àgacy_√w˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

55 
drm_Àgacy_rm˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

57 
drm_Àgacy_£tßªa˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

58 
drm_Àgacy_gëßªa˘x
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

64 
	#DRM_MAP_HASH_OFFSET
 0x10000000

	)

66 
drm_Àgacy_gëm≠_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

67 
drm_fûe
 *
fûe_¥iv
);

68 
drm_Àgacy_addm≠_io˘l
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

69 
drm_Àgacy_rmm≠_io˘l
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

70 
drm_Àgacy_addbufs
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

71 
drm_Àgacy_öfobufs
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

72 
drm_Àgacy_m¨kbufs
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

73 
drm_Àgacy_‰ìbufs
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

74 
drm_Àgacy_m≠bufs
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

75 
drm_Àgacy_dma_io˘l
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

77 
__drm_Àgacy_öfobufs
(
drm_devi˚
 *, *, *,

78 (*)(*, , 
drm_buf_íåy
 *));

79 
	`__drm_Àgacy_m≠bufs
(
drm_devi˚
 *, *, *,

80 
__u£r
 **,

81 (*)(*, , , 
drm_buf
 *),

82 
drm_fûe
 *);

84 #ifde‡
CONFIG_DRM_VM


85 
	`drm_Àgacy_vma_Êush
(
drm_devi˚
 *
d
);

87 
ölöe
 
	$drm_Àgacy_vma_Êush
(
drm_devi˚
 *
d
)

90 
	}
}

97 
	sdrm_agp_mem
 {

98 
	mh™dÀ
;

99 
agp_mem‹y
 *
	mmem‹y
;

100 
	mbound
;

101 
	m∑ges
;

102 
li°_hód
 
	mhód
;

106 
drm_Àgacy_lock
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

107 
drm_Àgacy_u∆ock
(
drm_devi˚
 *
d
, *
v
, 
drm_fûe
 *
f
);

108 
drm_Àgacy_lock_ªÀa£
(
drm_devi˚
 *
dev
, 
fûe
 *
fûp
);

111 
drm_Àgacy_dma_£tup
(
drm_devi˚
 *
dev
);

112 
drm_Àgacy_dma_èkedown
(
drm_devi˚
 *
dev
);

113 
drm_Àgacy_‰ì_buf„r
(
drm_devi˚
 *
dev
,

114 
drm_buf
 * 
buf
);

115 
drm_Àgacy_ª˛aim_buf„rs
(
drm_devi˚
 *
dev
,

116 
drm_fûe
 *
fûp
);

119 
drm_Àgacy_sg_˛ónup
(
drm_devi˚
 *
dev
);

120 
drm_Àgacy_sg_Æloc
(
drm_devi˚
 *
dev
, *
d©a
,

121 
drm_fûe
 *
fûe_¥iv
);

122 
drm_Àgacy_sg_‰ì
(
drm_devi˚
 *
dev
, *
d©a
,

123 
drm_fûe
 *
fûe_¥iv
);

	@src/common/linuxkpi/drivers/gpu/drm/drm_os_config.h

1 #i‚de‡
DRM_OS_CONFIG_H_


2 
	#DRM_OS_CONFIG_H_


	)

4 
	#CONFIG_DEBUG_FS
 1

	)

5 #ifde‡
__amd64__


6 
	#COMPAT_FREEBSD32
 1

	)

8 #ifde‡
COMPAT_FREEBSD32


9 
	#CONFIG_COMPAT
 1

	)

11 #ifde‡
nŸyë


12 
	#CONFIG_MMU_NOTIFIER
 1

	)

14 #ifde‡
__i386__


15 
	#CONFIG_X86
 1

	)

17 #ifde‡
__amd64__


18 
	#CONFIG_X86
 1

	)

19 
	#CONFIG_X86_64
 1

	)

20 
	#CONFIG_64BIT
 1

	)

22 #ifde‡
__ü64__


23 
	#CONFIG_IA64
 1

	)

24 
	#CONFIG_64BIT
 1

	)

27 #i‡
deföed
(
__i386__
Ë|| deföed(
__amd64__
)

28 
	#CONFIG_PCI
 1

	)

29 
	#CONFIG_ACPI
 1

	)

30 
	#CONFIG_ACPI_SLEEP
 1

	)

31 
	#CONFIG_DRM_I915_KMS
 1

	)

32 #unde‡
CONFIG_INTEL_IOMMU


34 
	#CONFIG_AS_MOVNTDQA


	)

37 #ifde‡
__powîpc64__


38 
	#CONFIG_PPC64
 1

	)

39 
	#CONFIG_64BIT
 1

	)

40 
	#AIM
 1

	)

41 
	#CONFIG_PCI
 1

	)

42 #unde‡
CONFIG_ACPI


43 #unde‡
CONFIG_ACPI_SLEEP


44 #unde‡
CONFIG_DRM_I915_KMS


45 #unde‡
CONFIG_INTEL_IOMMU


46 #unde‡
CONFIG_AS_MOVNTDQA


51 #ifde‡
_KERNEL


52 
	#__KERNEL__


	)

55 #i‡!
deföed
(
__powîpc__
)

56 
	#CONFIG_AGP
 1

	)

59 
	#CONFIG_MTRR
 1

	)

61 
	#CONFIG_FB
 1

	)

63 #unde‡
CONFIG_VGA_CONSOLE


65 
	#CONFIG_BACKLIGHT_CLASS_DEVICE
 1

	)

69 
	#CONFIG_DRM_DP_AUX_CHARDEV
 1

	)

71 
	#CONFIG_SMP
 1

	)

73 
	#CONFIG_PM
 1

	)

80 
	#CONFIG_DMI
 1

	)

82 
	#CONFIG_DRM_LOAD_EDID_FIRMWARE
 1

	)

85 
	#CONFIG_DRM_I915_CAPTURE_ERROR
 1

	)

89 
	#CONFIG_DRM_I915_ALPHA_SUPPORT
 1

	)

91 
	#CONFIG_DRM_AMD_POWERPLAY
 1

	)

98 
	#CONFIG_DRM_AMDGPU_SI


	)

99 
	#CONFIG_DRM_AMDGPU_CIK


	)

117 
	#CONFIG_DRM_FBDEV_OVERALLOC
 100

	)

127 
	#CONFIG_DRM_AMD_DC
 1

	)

128 #ifde‡
__amd64__


129 
	#CONFIG_DRM_AMD_DC_DCN1_0
 1

	)

132 
	#CONFIG_DRM_VMWGFX_FBCON
 1

	)

	@src/common/linuxkpi/drivers/gpu/drm/drm_os_freebsd.h

6 
	~<sys/cdefs.h
>

7 
__FBSDID
("$FreeBSD$");

9 #i‚de‡
_DRM_OS_FREEBSD_H_


10 
	#_DRM_OS_FREEBSD_H_


	)

12 
	~<sys/fbio.h
>

13 
	~<sys/¥iv.h
>

14 
	~<sys/smp.h
>

16 
	~"drm_os_c⁄fig.h
"

18 
	~<löux/kî√l.h
>

19 
	~<asm/uac˚ss.h
>

20 
	~<löux/dñay.h
>

21 
	~<löux/¶ab.h
>

22 
	~<löux/mod_devi˚èbÀ.h
>

23 
	~<löux/pci.h
>

25 
	#DRM_DEV_MODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
)

	)

26 
	#DRM_DEV_UID
 
UID_ROOT


	)

27 
	#DRM_DEV_GID
 
GID_VIDEO


	)

29 c⁄° *
fb_mode_›ti⁄
;

30 
drm_Æways_öãºu±ibÀ
;

32 
	svt_kms_so·c
 {

33 
drm_fb_hñ≥r
 *
	mfb_hñ≥r
;

34 
èsk
 
	mfb_mode_èsk
;

37 
	#DRM_IRQ_ARGS
 
úq
, *
¨g


	)

39 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

41 
	#DRM_HZ
 
hz


	)

42 
	#DRM_CURPROC
 
cuπhªad


	)

43 
	#DRM_SUSER
(
p
Ë(
	`¥iv_check
’, 
PRIV_DRIVER
Ë=0)

	)

44 
	#DRM_UDELAY
(
n
Ë
	`udñay
“);

	)

46 
	#DRM_WAIT_ON
–
ªt
, 
queue
, 
timeout
, 
c⁄dôi⁄
 ) \

48 
	`DECLARE_WAITQUEUE
(
íåy
, 
cuºít
); \

49 
íd
 = 
ticks
 + (
timeout
); \

50 
	`add_waô_queue
(&(
queue
), &
íåy
); \

53 
	`__£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
); \

54 i‡(
c⁄dôi⁄
) \

56 i‡(
	`time_a·î_eq
(
ticks
, 
íd
)) { \

57 
ªt
 = -
EBUSY
; \

60 
	`scheduÀ_timeout
((
HZ
/100 > 1) ? HZ/100 : 1); \

61 i‡(
	`sig«l_≥ndög
(
cuºít
)) { \

62 
ªt
 = -
EINTR
; \

66 
	`__£t_cuºít_°©e
(
TASK_RUNNING
); \

67 
	`ªmove_waô_queue
(&(
queue
), &
íåy
); \

68 } 0)

	)

70 #i‚de‡
ªadq


71 
ölöe
 
uöt64_t


72 
	$ªadq
(c⁄° vﬁ©ûê*
addr
)

74 
uöt32_t
 
vl
 = 
	`ªadl
(
addr
);

75 
uöt32_t
 
vh
 = 
	`ªadl
(
addr
 + 4);

77  (
vl
 | ((
uöt64_t
)
vh
 << 32));

78 
	}
}

79 
	#ªadq
 
ªadq


	)

80 
ölöe
 

81 
	$wrôeq
(
uöt64_t
 
v
, vﬁ©ûê*
addr
)

83 
	`wrôñ
(
v
, 
addr
);

84 
	`wrôñ
(
v
 >> 32, 
addr
 + 4);

85 
	}
}

86 
	#wrôeq
 
wrôeq


	)

89 
	#DRM_WRITE8
(
m≠
, 
off£t
, 
vÆ
) \

90 *(vﬁ©ûê
u_öt8_t
 *)(((
vm_off£t_t
)(
m≠
)->
h™dÀ
) + \

91 (
vm_off£t_t
)(
off£t
)Ë
vÆ


	)

92 
	#DRM_WRITE16
(
m≠
, 
off£t
, 
vÆ
) \

93 *(vﬁ©ûê
u_öt16_t
 *)(((
vm_off£t_t
)(
m≠
)->
h™dÀ
) + \

94 (
vm_off£t_t
)(
off£t
)Ë
	`htﬁe16
(
vÆ
)

	)

95 
	#DRM_WRITE32
(
m≠
, 
off£t
, 
vÆ
) \

96 *(vﬁ©ûê
u_öt32_t
 *)(((
vm_off£t_t
)(
m≠
)->
h™dÀ
) + \

97 (
vm_off£t_t
)(
off£t
)Ë
	`htﬁe32
(
vÆ
)

	)

98 
	#DRM_WRITE64
(
m≠
, 
off£t
, 
vÆ
) \

99 *(vﬁ©ûê
u_öt64_t
 *)(((
vm_off£t_t
)(
m≠
)->
h™dÀ
) + \

100 (
vm_off£t_t
)(
off£t
)Ë
	`htﬁe64
(
vÆ
)

	)

106 
	#DRM_READMEMORYBARRIER
(Ë
	`rmb
()

	)

107 
	#DRM_WRITEMEMORYBARRIER
(Ë
	`wmb
()

	)

108 
	#DRM_MEMORYBARRIER
(Ë
	`mb
()

	)

109 
	#smp_mb__bef‹e_©omic_öc
(Ë
	`mb
()

	)

110 
	#smp_mb__a·î_©omic_öc
(Ë
	`mb
()

	)

112 
	#lowî_32_bôs
(
n
Ë((
u32
)“))

	)

113 
	#uµî_32_bôs
(
n
Ë((
u32
)((“Ë>> 16Ë>> 16))

	)

117 
	#EREMOTEIO
 
EIO


	)

119 
	#KTR_DRM
 
KTR_DEV


	)

120 
	#KTR_DRM_REG
 
KTR_SPARE3


	)

122 
	#DRM_AGP_MEM
 

	)

124 
	#IS_ALIGNED
(
x
, 
y
Ë(((xË& ((yË- 1)Ë=0)

	)

125 
	#gë_u«lig√d
(
±r
) \

126 ({ 
	`__ty≥of__
(*(
±r
)Ë
__tmp
; \

127 
	`mem˝y
(&
__tmp
, (
±r
), (*’å))); __tmp; })

	)

129 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


131 
	s__u«_u32
 { 
u32
 
	mx
; } 
	g__∑cked
;

133 
ölöe
 
u32


134 
	$__gë_u«lig√d_˝u32
(c⁄° *
p
)

136 c⁄° 
__u«_u32
 *
±r
 = (c⁄° __u«_u32 *)
p
;

138  (
±r
->
x
);

139 
	}
}

141 
ölöe
 
u32


142 
	$gë_u«lig√d_À32
(c⁄° *
p
)

145  (
	`__gë_u«lig√d_˝u32
((c⁄° 
u8
 *)
p
));

146 
	}
}

149 
ölöe
 
u32


150 
	$__gë_u«lig√d_À32
(c⁄° 
u8
 *
p
)

153  (
p
[0] |Ö[1] << 8 |Ö[2] << 16 |Ö[3] << 24);

154 
	}
}

156 
ölöe
 
u32


157 
	$gë_u«lig√d_À32
(c⁄° *
p
)

160  (
	`__gë_u«lig√d_À32
((c⁄° 
u8
 *)
p
));

161 
	}
}

164 
	#∑ge_to_phys
(
x
Ë
	`VM_PAGE_TO_PHYS
(x)

	)

166 
	#drm_gë_devi˚_‰om_kdev
(
_kdev
Ë(((
drm_mö‹
 *)(_kdev)->
si_drv1
)->
dev
)

	)

168 
	#DRM_IOC_VOID
 
IOC_VOID


	)

169 
	#DRM_IOC_READ
 
IOC_OUT


	)

170 
	#DRM_IOC_WRITE
 
IOC_IN


	)

171 
	#DRM_IOC_READWRITE
 
IOC_INOUT


	)

172 
	#DRM_IOC
(
dú
, 
group
, 
ƒ
, 
size
Ë
	`_IOC
(dú, group,Çr, size)

	)

174 
ölöe
 

175 
	$__c›y_to_u£r_ö©omic
(
__u£r
 *
to
, c⁄° *
‰om
, 
n
)

178  (
	`c›yout_noÁu…
(
‰om
, 
to
, 
n
) != 0 ?Ç : 0);

179 
	}
}

180 
	#__c›y_to_u£r_ö©omic_noˇche
(
to
, 
‰om
, 
n
) \

181 
	`__c›y_to_u£r_ö©omic
((
to
), (
‰om
), (
n
))

	)

183 
ölöe
 

184 
	$__c›y_‰om_u£r_ö©omic
(*
to
, c⁄° 
__u£r
 *
‰om
,

185 
n
)

195  ((
	`c›yö_noÁu…
(
	`__DECONST
(*, 
‰om
), 
to
, 
n
) != 0 ?Ç : 0));

196 
	}
}

197 
	#__c›y_‰om_u£r_ö©omic_noˇche
(
to
, 
‰om
, 
n
) \

198 
	`__c›y_‰om_u£r_ö©omic
((
to
), (
‰om
), (
n
))

	)

201 
	#sigem±y£t
(
£t
Ë
	`SIGEMPTYSET
(£t)

	)

202 
	#sigadd£t
(
£t
, 
sig
Ë
	`SIGADDSET
(£t, sig)

	)

204 
MALLOC_DECLARE
(
DRM_MEM_DMA
);

205 
MALLOC_DECLARE
(
DRM_MEM_DRIVER
);

206 
MALLOC_DECLARE
(
DRM_MEM_KMS
);

208 
dev˛ass_t
 
drm_dev˛ass
;

210 
	sdrm_pci_id_li°


212 
	mvíd‹
;

213 
	mdevi˚
;

214 
	mdrivî_¥iv©e
;

215 *
	m«me
;

216 } 
	tdrm_pci_id_li°_t
;

218 
	gdrm_mö‹
;

219 
drm_dev_Æüs
(
devi˚
 *
dev
, 
drm_mö‹
 *
mö‹
, c⁄° *
mö‹_°r
);

220 
ˇn˚l_ª£t_debug_log
();

222 
	#c⁄sﬁe_lock
()

	)

223 
	#c⁄sﬁe_u∆ock
()

	)

224 
	#c⁄sﬁe_åylock
(Ë
åue


	)

226 
	#PM_EVENT_SUSPEND
 0x0002

	)

227 
	#PM_EVENT_QUIESCE
 0x0008

	)

228 
	#PM_EVENT_PRETHAW
 
PM_EVENT_QUIESCE


	)

231 
	#drm_¥oc_˛ónup
(
a
, 
b
)

	)

235 
	#VGA_RSRC_NONE
 0x00

	)

236 
	#VGA_RSRC_LEGACY_IO
 0x01

	)

237 
	#VGA_RSRC_LEGACY_MEM
 0x02

	)

238 
	#VGA_RSRC_LEGACY_MASK
 (
VGA_RSRC_LEGACY_IO
 | 
VGA_RSRC_LEGACY_MEM
)

	)

240 
	#VGA_RSRC_NORMAL_IO
 0x04

	)

241 
	#VGA_RSRC_NORMAL_MEM
 0x08

	)

245 
	glöux_fb_öfo
;

247 
ölöe
 
	$vga_swôchîoo_uƒegi°î_˛õ¡
(
pci_dev
 *
pdev
Ë{
	}
}

248 
ölöe
 
	$vga_swôchîoo_ªgi°î_˛õ¡
(
pci_dev
 *
pdev
,

249 c⁄° 
vga_swôchîoo_˛õ¡_›s
 *
›s
Ë{  0; 
	}
}

250 
ölöe
 
	$vga_swôchîoo_˛õ¡_fb_£t
(
pci_dev
 *
pdev
, 
löux_fb_öfo
 *
öfo
Ë{
	}
}

251 
ölöe
 
	$vga_swôchîoo_ªgi°î_h™dÀr
(
vga_swôchîoo_h™dÀr
 *
h™dÀr
Ë{  0; 
	}
}

252 
ölöe
 
	$vga_swôchîoo_ªgi°î_audio_˛õ¡
(
pci_dev
 *
pdev
,

253 c⁄° 
vga_swôchîoo_˛õ¡_›s
 *
›s
,

254 
id
, 
boﬁ
 
a˘ive
Ë{  0; 
	}
}

255 
ölöe
 
	$vga_swôchîoo_uƒegi°î_h™dÀr
(Ë{
	}
}

256 
ölöe
 
	$vga_swôchîoo_¥o˚ss_dñayed_swôch
(Ë{  0; 
	}
}

257 
ölöe
 
	$vga_swôchîoo_gë_˛õ¡_°©e
(
pci_dev
 *
pdev
Ë{  
VGA_SWITCHEROO_ON
; 
	}
}

260 
	#pm_qos_add_ªque°
(
a
, 
b
, 
c
)

	)

261 
	#pm_qos_upd©e_ªque°
(
a
, 
b
)

	)

262 
	#pm_qos_ªmove_ªque°
(
a
)

	)

264 
	#pci_gë_powî_°©e
 
pci_gë_powî°©e


	)

266 
	#ö_dbg_ma°î
(Ë(
kdb_a˘ive
)

	)

267 
	#do_gëtimeofday
 
mi¸Ÿime


	)

268 
	#a˝i_video_ªgi°î
()

	)

269 
	#a˝i_video_uƒegi°î
()

	)

271 
	#CONFIG_X86_PAT


	)

272 
u_öt
 
˝u_˛Êush_löe_size
;

	@src/common/linuxkpi/drivers/gpu/drm/drm_trace.h

2 #i‡!
deföed
(
_DRM_TRACE_H_
Ë|| deföed(
TRACE_HEADER_MULTI_READ
)

3 
	#_DRM_TRACE_H_


	)

5 
	~<löux/°rögify.h
>

6 
	~<löux/ty≥s.h
>

7 
	~<löux/åa˚poöt.h
>

9 #ifde‡
__löux__


11 #unde‡
TRACE_SYSTEM


12 
	#TRACE_SYSTEM
 
drm


	)

13 
	#TRACE_INCLUDE_FILE
 
drm_åa˚


	)

15 
TRACE_EVENT
(
drm_vbœnk_evít
,

16 
TP_PROTO
(
¸tc
, 
£q
),

17 
TP_ARGS
(
¸tc
, 
£q
),

18 
TP_STRUCT__íåy
(

19 
	$__fõld
(, 
¸tc
)

20 
	`__fõld
(, 
£q
)

22 
	`TP_Á°_assign
(

23 
__íåy
->
¸tc
 = crtc;

24 
__íåy
->
£q
 = seq;

26 
	`TP_¥ötk
("¸tc=%d, seq=%u", 
__íåy
->
¸tc
, __íåy->
£q
)

29 
	`TRACE_EVENT
(
drm_vbœnk_evít_queued
,

30 
	`TP_PROTO
(
drm_fûe
 *
fûe
, 
¸tc
, 
£q
),

31 
	`TP_ARGS
(
fûe
, 
¸tc
, 
£q
),

32 
	`TP_STRUCT__íåy
(

33 
	$__fõld
(
drm_fûe
 *, 
fûe
)

34 
	$__fõld
(, 
¸tc
)

35 
	`__fõld
(, 
£q
)

37 
	`TP_Á°_assign
(

38 
__íåy
->
fûe
 = file;

39 
__íåy
->
¸tc
 = crtc;

40 
__íåy
->
£q
 = seq;

42 
	`TP_¥ötk
("fûe=%p, cπc=%d, seq=%u", 
__íåy
->
fûe
, __íåy->
¸tc
, \

43 
__íåy
->
£q
)

46 
	`TRACE_EVENT
(
drm_vbœnk_evít_dñivîed
,

47 
	`TP_PROTO
(
drm_fûe
 *
fûe
, 
¸tc
, 
£q
),

48 
	`TP_ARGS
(
fûe
, 
¸tc
, 
£q
),

49 
	`TP_STRUCT__íåy
(

50 
	$__fõld
(
drm_fûe
 *, 
fûe
)

51 
	$__fõld
(, 
¸tc
)

52 
	`__fõld
(, 
£q
)

54 
	`TP_Á°_assign
(

55 
__íåy
->
fûe
 = file;

56 
__íåy
->
¸tc
 = crtc;

57 
__íåy
->
£q
 = seq;

59 
	`TP_¥ötk
("fûe=%p, cπc=%d, seq=%u", 
__íåy
->
fûe
, __íåy->
¸tc
, \

60 
__íåy
->
£q
)

64 
	~"drm_åa˚_‰ìbsd.h
"

70 #unde‡
TRACE_INCLUDE_PATH


71 
	#TRACE_INCLUDE_PATH
 ../../
drivîs
/
gpu
/
drm


	)

72 
	~<åa˚/deföe_åa˚.h
>

	@src/common/linuxkpi/drivers/gpu/drm/drm_trace_freebsd.h

1 #i‚de‡
_DRM_TRACE_FREEBSD_H_


2 
	#_DRM_TRACE_FREEBSD_H_


	)

4 
	~<drm/drmP.h
>

9 
ölöe
 

10 
	$åa˚_drm_vbœnk_evít
(
¸tc
, 
£q
)

12 
	`CTR2
(
KTR_DRM
, "drm_vbœnk_evíà¸t¯%d, seq %u", 
¸tc
, 
£q
);

13 
	}
}

17 
ölöe
 

18 
	$åa˚_drm_vbœnk_evít_queued
(
drm_fûe
 *
fûe
, 
¸tc
, 
£q
)

20 
	`CTR3
(
KTR_DRM
, "drm_vbœnk_evít_queued cπ¯%d, seq %u", 
fûe
, 
¸tc
, 
£q
);

21 
	}
}

25 
ölöe
 

26 
	$åa˚_drm_vbœnk_evít_dñivîed
(
drm_fûe
 *
fûe
, 
¸tc
, 
£q
)

28 
	`CTR3
(
KTR_DRM
, "drm_vbœnk_evít_dñivîed drm_fûê%p, cπ¯%d, seq %u", 
fûe
, 
¸tc
, 
£q
);

29 
	}
}

	@src/common/linuxkpi/dummy/include/asm/agp.h

	@src/common/linuxkpi/dummy/include/asm/div64.h

	@src/common/linuxkpi/dummy/include/asm/hypervisor.h

	@src/common/linuxkpi/dummy/include/asm/intel-mid.h

	@src/common/linuxkpi/dummy/include/asm/ioctl.h

	@src/common/linuxkpi/dummy/include/asm/msr-index.h

	@src/common/linuxkpi/dummy/include/asm/unaligned.h

	@src/common/linuxkpi/dummy/include/linux/agp_backend.h

	@src/common/linuxkpi/dummy/include/linux/bug.h

	@src/common/linuxkpi/dummy/include/linux/cpu.h

	@src/common/linuxkpi/dummy/include/linux/ctype.h

	@src/common/linuxkpi/dummy/include/linux/dma_remapping.h

	@src/common/linuxkpi/dummy/include/linux/fault-inject.h

	@src/common/linuxkpi/dummy/include/linux/fdtable.h

	@src/common/linuxkpi/dummy/include/linux/init.h

	@src/common/linuxkpi/dummy/include/linux/input.h

	@src/common/linuxkpi/dummy/include/linux/intel-iommu.h

	@src/common/linuxkpi/dummy/include/linux/irq_work.h

	@src/common/linuxkpi/dummy/include/linux/list_sort.h

	@src/common/linuxkpi/dummy/include/linux/media-bus-format.h

	@src/common/linuxkpi/dummy/include/linux/mfd/core.h

	@src/common/linuxkpi/dummy/include/linux/mman.h

	@src/common/linuxkpi/dummy/include/linux/pnp.h

	@src/common/linuxkpi/dummy/include/linux/proc_fs.h

	@src/common/linuxkpi/dummy/include/linux/resource_ext.h

	@src/common/linuxkpi/dummy/include/linux/sched/clock.h

	@src/common/linuxkpi/dummy/include/linux/sched/signal.h

	@src/common/linuxkpi/dummy/include/linux/shmem_fs.h

	@src/common/linuxkpi/dummy/include/linux/stat.h

	@src/common/linuxkpi/dummy/include/linux/stddef.h

	@src/common/linuxkpi/dummy/include/linux/suspend.h

	@src/common/linuxkpi/dummy/include/linux/swiotlb.h

	@src/common/linuxkpi/dummy/include/linux/tty.h

	@src/common/linuxkpi/dummy/include/linux/version.h

	@src/common/linuxkpi/dummy/include/linux/vt.h

	@src/common/linuxkpi/dummy/include/linux/zlib.h

	@src/common/linuxkpi/dummy/include/video/of_videomode.h

	@src/common/linuxkpi/gplv2/include/acpi/acpi.h

1 #i‚de‡
_ACPI_ACPI_H_


2 
	#_ACPI_ACPI_H_


	)

4 
ACPI_HANDLE
 
	ta˝i_h™dÀ
;

5 
ACPI_OBJECT
 
	ta˝i_obje˘
;

6 
ACPI_OBJECT_HANDLER
 
	ta˝i_obje˘_h™dÀr
;

7 
ACPI_OBJECT_TYPE
 
	ta˝i_obje˘_ty≥
;

8 
ACPI_STATUS
 
	ta˝i_°©us
;

9 
ACPI_STRING
 
	ta˝i_°rög
;

10 
ACPI_SIZE
 
	ta˝i_size
;

11 
ACPI_WALK_CALLBACK
 
	ta˝i_wÆk_ˇŒback
;

13 
	#a˝i_gbl_FADT
 
A˝iGbl_FADT


	)

15 
	#a˝i_evÆu©e_obje˘
 
A˝iEvÆu©eObje˘


	)

16 
	#a˝i_f‹m©_ex˚±i⁄
 
A˝iF‹m©Ex˚±i⁄


	)

17 
	#a˝i_gë_h™dÀ
 
A˝iGëH™dÀ


	)

18 
	#a˝i_gë_d©a
 
A˝iGëD©a


	)

19 
	#a˝i_gë_«me
 
A˝iGëName


	)

20 
	#a˝i_gë_èbÀ
 
A˝iGëTabÀ


	)

21 
	#a˝i_wÆk_«me•a˚
 
A˝iWÆkName•a˚


	)

	@src/common/linuxkpi/gplv2/include/acpi/acpi_bus.h

22 #i‚de‡
__ACPI_ACPI_BUS_H__


23 
	#__ACPI_ACPI_BUS_H__


	)

25 
	gdevi˚
;

28 
	#ACPI_MAX_HANDLES
 10

	)

29 
	sa˝i_h™dÀ_li°
 {

30 
u32
 
	mcou¡
;

31 
a˝i_h™dÀ
 
	mh™dÀs
[
ACPI_MAX_HANDLES
];

35 
a˝i_°©us


36 
a˝i_exåa˘_∑ckage
(
a˝i_obje˘
 *
∑ckage
,

37 
a˝i_buf„r
 *
f‹m©
, a˝i_buf„∏*
buf„r
);

38 
a˝i_°©us


39 
a˝i_evÆu©e_öãgî
(
a˝i_h™dÀ
 
h™dÀ
,

40 
a˝i_°rög
 
∑th«me
,

41 
a˝i_obje˘_li°
 *
¨gumíts
, *
d©a
);

42 
a˝i_°©us


43 
a˝i_evÆu©e_ª„ªn˚
(
a˝i_h™dÀ
 
h™dÀ
,

44 
a˝i_°rög
 
∑th«me
,

45 
a˝i_obje˘_li°
 *
¨gumíts
,

46 
a˝i_h™dÀ_li°
 *
li°
);

47 
a˝i_°©us


48 
a˝i_evÆu©e_o°
(
a˝i_h™dÀ
 
h™dÀ
, 
u32
 
sour˚_evít
, u32 
°©us_code
,

49 
a˝i_buf„r
 *
°©us_buf
);

51 
a˝i_°©us


52 
a˝i_gë_physiˇl_devi˚_loˇti⁄
(
a˝i_h™dÀ
 
h™dÀ
, 
a˝i_∂d_öfo
 **
∂d
);

54 
boﬁ
 
a˝i_has_mëhod
(
a˝i_h™dÀ
 
h™dÀ
, *
«me
);

55 
a˝i_°©us
 
a˝i_execuã_sim∂e_mëhod
(
a˝i_h™dÀ
 
h™dÀ
, *
mëhod
,

56 
u64
 
¨g
);

57 
a˝i_°©us
 
a˝i_evÆu©e_ej0
(
a˝i_h™dÀ
 
h™dÀ
);

58 
a˝i_°©us
 
a˝i_evÆu©e_lck
(
a˝i_h™dÀ
 
h™dÀ
, 
lock
);

59 
boﬁ
 
a˝i_©a_m©ch
(
a˝i_h™dÀ
 
h™dÀ
);

60 
boﬁ
 
a˝i_bay_m©ch
(
a˝i_h™dÀ
 
h™dÀ
);

61 
boﬁ
 
a˝i_dock_m©ch
(
a˝i_h™dÀ
 
h™dÀ
);

63 
boﬁ
 
a˝i_check_dsm
(
a˝i_h™dÀ
 
h™dÀ
, c⁄° 
u8
 *
uuid
, 
ªv
, 
u64
 
funcs
);

64 
a˝i_obje˘
 *
a˝i_evÆu©e_dsm
(
a˝i_h™dÀ
 
h™dÀ
, c⁄° 
u8
 *
uuid
,

65 
ªv
, 
func
, 
a˝i_obje˘
 *
¨gv4
);

67 
ölöe
 
a˝i_obje˘
 *

68 
	$a˝i_evÆu©e_dsm_ty≥d
(
a˝i_h™dÀ
 
h™dÀ
, c⁄° 
u8
 *
uuid
, 
ªv
, 
func
,

69 
a˝i_obje˘
 *
¨gv4
, 
a˝i_obje˘_ty≥
 
ty≥
)

71 
a˝i_obje˘
 *
obj
;

73 
obj
 = 
	`a˝i_evÆu©e_dsm
(
h™dÀ
, 
uuid
, 
ªv
, 
func
, 
¨gv4
);

74 i‡(
obj
 && obj->
Ty≥
 !
ty≥
) {

75 
	`ACPI_FREE
(
obj
);

76 
obj
 = 
NULL
;

79  
obj
;

80 
	}
}

82 
	#ACPI_INIT_DSM_ARGV4
(
˙t
, 
ñes
) \

84 .
∑ckage
.
ty≥
 = 
ACPI_TYPE_PACKAGE
, \

85 .
∑ckage
.
cou¡
 = (
˙t
), \

86 .
∑ckage
.
ñemíts
 = (
ñes
) \

87 }

	)

89 
boﬁ
 
a˝i_dev_¥e£¡
(c⁄° *
hid
);

91 #ifde‡
CONFIG_ACPI


93 
	~<löux/¥oc_fs.h
>

95 
	#ACPI_BUS_FILE_ROOT
 "a˝i"

	)

96 
¥oc_dú_íåy
 *
a˝i_roŸ_dú
;

98 
	ea˝i_bus_devi˚_ty≥
 {

99 
	mACPI_BUS_TYPE_DEVICE
 = 0,

100 
	mACPI_BUS_TYPE_POWER
,

101 
	mACPI_BUS_TYPE_PROCESSOR
,

102 
	mACPI_BUS_TYPE_THERMAL
,

103 
	mACPI_BUS_TYPE_POWER_BUTTON
,

104 
	mACPI_BUS_TYPE_SLEEP_BUTTON
,

105 
	mACPI_BUS_DEVICE_TYPE_COUNT


108 
	ga˝i_drivî
;

109 
	ga˝i_devi˚
;

116 
	sa˝i_hŸ∂ug_¥ofûe
 {

117 
kobje˘
 
	mkobj
;

118 (*
	msˇn_dïídít
)(
a˝i_devi˚
 *
	madev
);

119 (*
	mnŸify_⁄löe
)(
a˝i_devi˚
 *
	madev
);

120 
boﬁ
 
	míabÀd
:1;

121 
boﬁ
 
	mdem™d_ofÊöe
:1;

124 
ölöe
 
a˝i_hŸ∂ug_¥ofûe
 *
	$to_a˝i_hŸ∂ug_¥ofûe
(

125 
kobje˘
 *
kobj
)

127  
	`c⁄èöî_of
(
kobj
, 
a˝i_hŸ∂ug_¥ofûe
, kobj);

128 
	}
}

130 
	sa˝i_sˇn_h™dÀr
 {

131 c⁄° 
a˝i_devi˚_id
 *
	mids
;

132 
li°_hód
 
	mli°_node
;

133 
boﬁ
 (*
m©ch
)(c⁄° *
	mid°r
, c⁄° 
a˝i_devi˚_id
 **
	mm©chid
);

134 (*
	m©èch
)(
a˝i_devi˚
 *
	mdev
, c⁄° 
a˝i_devi˚_id
 *
	mid
);

135 (*
	mdëach
)(
a˝i_devi˚
 *
	mdev
);

136 (*
	mböd
)(
devi˚
 *
	mphys_dev
);

137 (*
	munböd
)(
devi˚
 *
	mphys_dev
);

138 
a˝i_hŸ∂ug_¥ofûe
 
	mhŸ∂ug
;

146 
	sa˝i_hŸ∂ug_c⁄ãxt
 {

147 
a˝i_devi˚
 *
	m£lf
;

148 (*
	mnŸify
)(
	ma˝i_devi˚
 *, 
	mu32
);

149 (*
	muevít
)(
	ma˝i_devi˚
 *, 
	mu32
);

150 (*
	mfixup
)(
	ma˝i_devi˚
 *);

158 (*
	ta˝i_›_add
Ë(
	ta˝i_devi˚
 * 
	tdevi˚
);

159 (*
	ta˝i_›_ªmove
Ë(
	ta˝i_devi˚
 * 
	tdevi˚
);

160 (*
	ta˝i_›_nŸify
Ë(
	ta˝i_devi˚
 * 
	tdevi˚
, 
	tu32
 
	tevít
);

162 
	sa˝i_devi˚_›s
 {

163 
a˝i_›_add
 
add
;

164 
a˝i_›_ªmove
 
ªmove
;

165 
a˝i_›_nŸify
 
nŸify
;

168 
	#ACPI_DRIVER_ALL_NOTIFY_EVENTS
 0x1

	)

170 
	sa˝i_drivî
 {

171 
«me
[80];

172 
˛ass
[80];

173 c⁄° 
a˝i_devi˚_id
 *
ids
;

174 
Êags
;

175 
a˝i_devi˚_›s
 
›s
;

176 
devi˚_drivî
 
drv
;

177 
moduÀ
 *
ow√r
;

187 
	sa˝i_devi˚_°©us
 {

188 
u32
 
¥e£¡
:1;

189 
u32
 
íabÀd
:1;

190 
u32
 
show_ö_ui
:1;

191 
u32
 
fun˘i⁄Æ
:1;

192 
u32
 
b©ãry_¥e£¡
:1;

193 
u32
 
ª£rved
:27;

198 
	sa˝i_devi˚_Êags
 {

199 
u32
 
dy«mic_°©us
:1;

200 
u32
 
ªmovabÀ
:1;

201 
u32
 
eje˘abÀ
:1;

202 
u32
 
powî_m™agóbÀ
:1;

203 
u32
 
m©ch_drivî
:1;

204 
u32
 
öôülized
:1;

205 
u32
 
visôed
:1;

206 
u32
 
hŸ∂ug_nŸify
:1;

207 
u32
 
is_dock_°©i⁄
:1;

208 
u32
 
of_com∑tibÀ_ok
:1;

209 
u32
 
cohîít_dma
:1;

210 
u32
 
cˇ_£í
:1;

211 
u32
 
ª£rved
:20;

216 
	sa˝i_devi˚_dú
 {

217 
¥oc_dú_íåy
 *
íåy
;

220 
	#a˝i_devi˚_dú
(
d
Ë((d)->
dú
.
íåy
)

	)

224 
	ta˝i_bus_id
[8];

225 
	ta˝i_bus_addªss
;

226 
	ta˝i_devi˚_«me
[40];

227 
	ta˝i_devi˚_˛ass
[20];

229 
	sa˝i_h¨dw¨e_id
 {

230 
li°_hód
 
li°
;

231 c⁄° *
id
;

234 
	sa˝i_≤p_ty≥
 {

235 
u32
 
h¨dw¨e_id
:1;

236 
u32
 
bus_addªss
:1;

237 
u32
 
∂©f‹m_id
:1;

238 
u32
 
ª£rved
:29;

241 
	sa˝i_devi˚_≤p
 {

242 
a˝i_bus_id
 
bus_id
;

243 
a˝i_≤p_ty≥
 
ty≥
;

244 
a˝i_bus_addªss
 
bus_addªss
;

245 *
unique_id
;

246 
li°_hód
 
ids
;

247 
a˝i_devi˚_«me
 
devi˚_«me
;

248 
a˝i_devi˚_˛ass
 
devi˚_˛ass
;

249 
a˝i_obje˘
 *
°r_obj
;

252 
	#a˝i_devi˚_bid
(
d
Ë((d)->
≤p
.
bus_id
)

	)

253 
	#a˝i_devi˚_adr
(
d
Ë((d)->
≤p
.
bus_addªss
)

	)

254 c⁄° *
	`a˝i_devi˚_hid
(
a˝i_devi˚
 *
devi˚
);

255 
	#a˝i_devi˚_uid
(
d
Ë((d)->
≤p
.
unique_id
)

	)

256 
	#a˝i_devi˚_«me
(
d
Ë((d)->
≤p
.
devi˚_«me
)

	)

257 
	#a˝i_devi˚_˛ass
(
d
Ë((d)->
≤p
.
devi˚_˛ass
)

	)

261 
	sa˝i_devi˚_powî_Êags
 {

262 
u32
 
ex∂icô_gë
:1;

263 
u32
 
powî_ªsour˚s
:1;

264 
u32
 
örush_cuºít
:1;

265 
u32
 
powî_ªmoved
:1;

266 
u32
 
ign‹e_∑ª¡
:1;

267 
u32
 
dsw_¥e£¡
:1;

268 
u32
 
ª£rved
:26;

271 
	sa˝i_devi˚_powî_°©e
 {

273 
u8
 
vÆid
:1;

274 
u8
 
ex∂icô_£t
:1;

275 
u8
 
ª£rved
:6;

276 } 
Êags
;

277 
powî
;

278 
œãncy
;

279 
li°_hód
 
ªsour˚s
;

282 
	sa˝i_devi˚_powî
 {

283 
°©e
;

284 
a˝i_devi˚_powî_Êags
 
Êags
;

285 
a˝i_devi˚_powî_°©e
 
°©es
[
ACPI_D_STATE_COUNT
];

290 
	sa˝i_devi˚_≥rf_Êags
 {

291 
u8
 
ª£rved
:8;

294 
	sa˝i_devi˚_≥rf_°©e
 {

296 
u8
 
vÆid
:1;

297 
u8
 
ª£rved
:7;

298 } 
Êags
;

299 
u8
 
powî
;

300 
u8
 
≥rf‹m™˚
;

301 
œãncy
;

304 
	sa˝i_devi˚_≥rf
 {

305 
°©e
;

306 
a˝i_devi˚_≥rf_Êags
 
Êags
;

307 
°©e_cou¡
;

308 
a˝i_devi˚_≥rf_°©e
 *
°©es
;

312 
	sa˝i_devi˚_wakeup_Êags
 {

313 
u8
 
vÆid
:1;

314 
u8
 
run_wake
:1;

315 
u8
 
nŸifõr_¥e£¡
:1;

316 
u8
 
íabÀd
:1;

319 
	sa˝i_devi˚_wakeup_c⁄ãxt
 {

320 
w‹k_°ru˘
 
w‹k
;

321 
devi˚
 *
dev
;

324 
	sa˝i_devi˚_wakeup
 {

325 
a˝i_h™dÀ
 
g≥_devi˚
;

326 
u64
 
g≥_numbî
;

327 
u64
 
¶ìp_°©e
;

328 
li°_hód
 
ªsour˚s
;

329 
a˝i_devi˚_wakeup_Êags
 
Êags
;

330 
a˝i_devi˚_wakeup_c⁄ãxt
 
c⁄ãxt
;

331 
wakeup_sour˚
 *
ws
;

332 
¥ï¨e_cou¡
;

335 
	sa˝i_devi˚_physiˇl_node
 {

336 
node_id
;

337 
li°_hód
 
node
;

338 
devi˚
 *
dev
;

339 
boﬁ
 
put_⁄löe
:1;

343 
	sa˝i_devi˚_d©a
 {

344 c⁄° 
a˝i_obje˘
 *
poöãr
;

345 c⁄° 
a˝i_obje˘
 *
¥›îtõs
;

346 c⁄° 
a˝i_obje˘
 *
of_com∑tibÀ
;

347 
li°_hód
 
subnodes
;

350 
a˝i_gpio_m≠pög
;

353 
	sa˝i_devi˚
 {

354 
devi˚_ty≥
;

355 
a˝i_h™dÀ
 
h™dÀ
;

356 
fwnode_h™dÀ
 
fwnode
;

357 
a˝i_devi˚
 *
∑ª¡
;

358 
li°_hód
 
chûdªn
;

359 
li°_hód
 
node
;

360 
li°_hód
 
wakeup_li°
;

361 
li°_hód
 
dñ_li°
;

362 
a˝i_devi˚_°©us
 
°©us
;

363 
a˝i_devi˚_Êags
 
Êags
;

364 
a˝i_devi˚_≤p
 
≤p
;

365 
a˝i_devi˚_powî
 
powî
;

366 
a˝i_devi˚_wakeup
 
wakeup
;

367 
a˝i_devi˚_≥rf
 
≥rf‹m™˚
;

368 
a˝i_devi˚_dú
 
dú
;

369 
a˝i_devi˚_d©a
 
d©a
;

370 
a˝i_sˇn_h™dÀr
 *
h™dÀr
;

371 
a˝i_hŸ∂ug_c⁄ãxt
 *
hp
;

372 
a˝i_drivî
 *
drivî
;

373 c⁄° 
a˝i_gpio_m≠pög
 *
drivî_gpios
;

374 *
drivî_d©a
;

375 
devi˚
 
dev
;

376 
physiˇl_node_cou¡
;

377 
dï_unmë
;

378 
li°_hód
 
physiˇl_node_li°
;

379 
muãx
 
physiˇl_node_lock
;

380 (*
ªmove
)(
a˝i_devi˚
 *);

384 
	sa˝i_d©a_node
 {

385 c⁄° *
«me
;

386 
a˝i_h™dÀ
 
h™dÀ
;

387 
fwnode_h™dÀ
 
fwnode
;

388 
a˝i_devi˚_d©a
 
d©a
;

389 
li°_hód
 
siblög
;

390 
kobje˘
 
kobj
;

391 
com∂ëi⁄
 
kobj_d⁄e
;

394 
ölöe
 
boﬁ
 
	$is_a˝i_node
(
fwnode_h™dÀ
 *
fwnode
)

396  
fwnode
 && (fwnode->
ty≥
 =
FWNODE_ACPI


397 || 
fwnode
->
ty≥
 =
FWNODE_ACPI_DATA
);

398 
	}
}

400 
ölöe
 
boﬁ
 
	$is_a˝i_devi˚_node
(
fwnode_h™dÀ
 *
fwnode
)

402  
fwnode
 && fwnode->
ty≥
 =
FWNODE_ACPI
;

403 
	}
}

405 
ölöe
 
a˝i_devi˚
 *
	$to_a˝i_devi˚_node
(
fwnode_h™dÀ
 *
fwnode
)

407  
	`is_a˝i_devi˚_node
(
fwnode
) ?

408 
	`c⁄èöî_of
(
fwnode
, 
a˝i_devi˚
, fwnodeË: 
NULL
;

409 
	}
}

411 
ölöe
 
boﬁ
 
	$is_a˝i_d©a_node
(
fwnode_h™dÀ
 *
fwnode
)

413  
fwnode
 && fwnode->
ty≥
 =
FWNODE_ACPI_DATA
;

414 
	}
}

416 
ölöe
 
a˝i_d©a_node
 *
	$to_a˝i_d©a_node
(
fwnode_h™dÀ
 *
fwnode
)

418  
	`is_a˝i_d©a_node
(
fwnode
) ?

419 
	`c⁄èöî_of
(
fwnode
, 
a˝i_d©a_node
, fwnodeË: 
NULL
;

420 
	}
}

422 
ölöe
 
fwnode_h™dÀ
 *
	$a˝i_fwnode_h™dÀ
(
a˝i_devi˚
 *
adev
)

424  &
adev
->
fwnode
;

425 
	}
}

427 
ölöe
 *
	$a˝i_drivî_d©a
(
a˝i_devi˚
 *
d
)

429  
d
->
drivî_d©a
;

430 
	}
}

432 
	#to_a˝i_devi˚
(
d
Ë
	`c⁄èöî_of
(d, 
a˝i_devi˚
, 
dev
)

	)

433 
	#to_a˝i_drivî
(
d
Ë
	`c⁄èöî_of
(d, 
a˝i_drivî
, 
drv
)

	)

435 
ölöe
 
	$a˝i_£t_devi˚_°©us
(
a˝i_devi˚
 *
adev
, 
u32
 
°a
)

437 *((
u32
 *)&
adev
->
°©us
Ë
°a
;

438 
	}
}

440 
ölöe
 
	$a˝i_£t_hp_c⁄ãxt
(
a˝i_devi˚
 *
adev
,

441 
a˝i_hŸ∂ug_c⁄ãxt
 *
hp
)

443 
hp
->
£lf
 = 
adev
;

444 
adev
->
hp
 = hp;

445 
	}
}

447 
a˝i_öôülize_hp_c⁄ãxt
(
a˝i_devi˚
 *
adev
,

448 
a˝i_hŸ∂ug_c⁄ãxt
 *
hp
,

449 (*
nŸify
)(
a˝i_devi˚
 *, 
u32
),

450 (*
uevít
)(
a˝i_devi˚
 *, 
u32
));

457 
	sa˝i_bus_evít
 {

458 
li°_hód
 
node
;

459 
a˝i_devi˚_˛ass
 
devi˚_˛ass
;

460 
a˝i_bus_id
 
bus_id
;

461 
u32
 
ty≥
;

462 
u32
 
d©a
;

465 
kobje˘
 *
a˝i_kobj
;

466 
	`a˝i_bus_gíî©e_√éök_evít
(c⁄° *, c⁄° *, 
u8
, );

467 
	`a˝i_bus_¥iv©e_d©a_h™dÀr
(
a˝i_h™dÀ
, *);

468 
	`a˝i_bus_gë_¥iv©e_d©a
(
a˝i_h™dÀ
, **);

469 
	`a˝i_bus_©èch_¥iv©e_d©a
(
a˝i_h™dÀ
, *);

470 
	`a˝i_bus_dëach_¥iv©e_d©a
(
a˝i_h™dÀ
);

471 
	`a˝i_nŸifõr_ˇŒ_chaö
(
a˝i_devi˚
 *, 
u32
, u32);

472 
	`ªgi°î_a˝i_nŸifõr
(
nŸifõr_block
 *);

473 
	`uƒegi°î_a˝i_nŸifõr
(
nŸifõr_block
 *);

480 
a˝i_devi˚
 *
	`a˝i_bus_gë_a˝i_devi˚
(
a˝i_h™dÀ
 
h™dÀ
);

481 
	`a˝i_bus_put_a˝i_devi˚
(
a˝i_devi˚
 *
adev
);

482 
a˝i_°©us
 
	`a˝i_bus_gë_°©us_h™dÀ
(
a˝i_h™dÀ
 
h™dÀ
,

483 *
°a
);

484 
	`a˝i_bus_gë_°©us
(
a˝i_devi˚
 *
devi˚
);

486 
	`a˝i_bus_£t_powî
(
a˝i_h™dÀ
 
h™dÀ
, 
°©e
);

487 c⁄° *
	`a˝i_powî_°©e_°rög
(
°©e
);

488 
	`a˝i_devi˚_gë_powî
(
a˝i_devi˚
 *
devi˚
, *
°©e
);

489 
	`a˝i_devi˚_£t_powî
(
a˝i_devi˚
 *
devi˚
, 
°©e
);

490 
	`a˝i_bus_öô_powî
(
a˝i_devi˚
 *
devi˚
);

491 
	`a˝i_devi˚_fix_up_powî
(
a˝i_devi˚
 *
devi˚
);

492 
	`a˝i_bus_upd©e_powî
(
a˝i_h™dÀ
 
h™dÀ
, *
°©e_p
);

493 
	`a˝i_devi˚_upd©e_powî
(
a˝i_devi˚
 *
devi˚
, *
°©e_p
);

494 
boﬁ
 
	`a˝i_bus_powî_m™agóbÀ
(
a˝i_h™dÀ
 
h™dÀ
);

496 #ifde‡
CONFIG_PM


497 
boﬁ
 
	`a˝i_bus_ˇn_wakeup
(
a˝i_h™dÀ
 
h™dÀ
);

499 
ölöe
 
boﬁ
 
	$a˝i_bus_ˇn_wakeup
(
a˝i_h™dÀ
 
h™dÀ
Ë{  
Ál£
; 
	}
}

502 
a˝i_sˇn_lock_acquúe
();

503 
a˝i_sˇn_lock_ªÀa£
();

504 
a˝i_lock_hp_c⁄ãxt
();

505 
a˝i_u∆ock_hp_c⁄ãxt
();

506 
a˝i_sˇn_add_h™dÀr
(
a˝i_sˇn_h™dÀr
 *
h™dÀr
);

507 
a˝i_bus_ªgi°î_drivî
(
a˝i_drivî
 *
drivî
);

508 
a˝i_bus_uƒegi°î_drivî
(
a˝i_drivî
 *
drivî
);

509 
a˝i_bus_sˇn
(
a˝i_h™dÀ
 
h™dÀ
);

510 
a˝i_bus_åim
(
a˝i_devi˚
 *
°¨t
);

511 
a˝i_°©us
 
a˝i_bus_gë_ejd
(
a˝i_h™dÀ
 
h™dÀ
,á˝i_h™dÀ * 
ejd
);

512 
a˝i_¸óã_dú
(
a˝i_devi˚
 *);

513 
a˝i_ªmove_dú
(
a˝i_devi˚
 *);

515 
	gof_devi˚_id
;

517 c⁄° 
a˝i_devi˚_id
 *
löux_a˝i_m©ch_devi˚
(
a˝i_devi˚
 *
devi˚
, c⁄° a˝i_devi˚_id *
ids
,

518 c⁄° 
of_devi˚_id
 *
of_ids
);

520 
ölöe
 

521 
	$a˝i_m©ch_devi˚_ids
(
a˝i_devi˚
 *
devi˚
,

522 c⁄° 
a˝i_devi˚_id
 *
ids
)

524  
	`löux_a˝i_m©ch_devi˚
(
devi˚
, 
ids
, 
NULL
Ë? 0 : -
ENOENT
;

525 
	}
}

528 
ölöe
 
boﬁ
 
	$a˝i_devi˚_íumî©ed
(
a˝i_devi˚
 *
adev
)

530  
adev
 &&ádev->
Êags
.
öôülized
 &&ádev->Êags.
visôed
;

531 
	}
}

541 
	#moduÀ_a˝i_drivî
(
__a˝i_drivî
) \

542 
	`moduÀ_drivî
(
__a˝i_drivî
, 
a˝i_bus_ªgi°î_drivî
, \

543 
a˝i_bus_uƒegi°î_drivî
)

	)

548 
	sa˝i_bus_ty≥
 {

549 
li°_hód
 
	mli°
;

550 c⁄° *
	m«me
;

551 
boﬁ
 (*
m©ch
)(
devi˚
 *
	mdev
);

552 
	ma˝i_devi˚
 * (*
	mföd_com∑ni⁄
)(
	mdevi˚
 *);

553 (*
	m£tup
)(
	mdevi˚
 *);

554 (*
	m˛ónup
)(
	mdevi˚
 *);

556 
ªgi°î_a˝i_bus_ty≥
(
a˝i_bus_ty≥
 *);

557 
uƒegi°î_a˝i_bus_ty≥
(
a˝i_bus_ty≥
 *);

558 
a˝i_böd_⁄e
(
devi˚
 *
dev
, 
a˝i_devi˚
 *
adev
);

559 
a˝i_unböd_⁄e
(
devi˚
 *
dev
);

561 
	sa˝i_pci_roŸ
 {

562 
a˝i_devi˚
 * 
	mdevi˚
;

563 
pci_bus
 *
	mbus
;

564 
u16
 
	m£gmít
;

566 
u32
 
	mosc_suµ‹t_£t
;

567 
u32
 
	mosc_c⁄åﬁ_£t
;

568 
phys_addr_t
 
	mmcfg_addr
;

573 
boﬁ
 
a˝i_dma_suµ‹ãd
(
a˝i_devi˚
 *
adev
);

574 
dev_dma_©å
 
a˝i_gë_dma_©å
(
a˝i_devi˚
 *
adev
);

576 
a˝i_devi˚
 *
a˝i_föd_chûd_devi˚
(a˝i_devi˚ *
∑ª¡
,

577 
u64
 
addªss
, 
boﬁ
 
check_chûdªn
);

578 
a˝i_is_roŸ_bridge
(
a˝i_h™dÀ
);

579 
a˝i_pci_roŸ
 *
a˝i_pci_föd_roŸ
(
a˝i_h™dÀ
 
h™dÀ
);

581 
a˝i_íabÀ_wakeup_devi˚_powî
(
a˝i_devi˚
 *
dev
, 
°©e
);

582 
a˝i_dißbÀ_wakeup_devi˚_powî
(
a˝i_devi˚
 *
dev
);

584 #ifde‡
CONFIG_PM


585 
a˝i_°©us
 
a˝i_add_pm_nŸifõr
(
a˝i_devi˚
 *
adev
, 
devi˚
 *
dev
,

586 (*
w‹k_func
)(
w‹k_°ru˘
 *
w‹k
));

587 
a˝i_°©us
 
	`a˝i_ªmove_pm_nŸifõr
(
a˝i_devi˚
 *
adev
);

588 
	`a˝i_pm_devi˚_¶ìp_°©e
(
devi˚
 *, *, );

589 
	`a˝i_pm_devi˚_run_wake
(
devi˚
 *, 
boﬁ
);

591 
ölöe
 
a˝i_°©us
 
	`a˝i_add_pm_nŸifõr
(
a˝i_devi˚
 *
adev
,

592 
devi˚
 *
dev
,

593 (*
w‹k_func
)(
w‹k_°ru˘
 *
w‹k
))

595  
AE_SUPPORT
;

596 
	}
}

597 
ölöe
 
a˝i_°©us
 
	$a˝i_ªmove_pm_nŸifõr
(
a˝i_devi˚
 *
adev
)

599  
AE_SUPPORT
;

600 
	}
}

601 
ölöe
 
	$a˝i_pm_devi˚_¶ìp_°©e
(
devi˚
 *
d
, *
p
, 
m
)

603 i‡(
p
)

604 *
p
 = 
ACPI_STATE_D0
;

606  (
m
 >
ACPI_STATE_D0
 && m <
ACPI_STATE_D3_COLD
) ?

607 
m
 : 
ACPI_STATE_D0
;

608 
	}
}

609 
ölöe
 
	$a˝i_pm_devi˚_run_wake
(
devi˚
 *
dev
, 
boﬁ
 
íabÀ
)

611  -
ENODEV
;

612 
	}
}

615 #ifde‡
CONFIG_PM_SLEEP


616 
a˝i_pm_devi˚_¶ìp_wake
(
devi˚
 *, 
boﬁ
);

618 
ölöe
 
	$a˝i_pm_devi˚_¶ìp_wake
(
devi˚
 *
dev
, 
boﬁ
 
íabÀ
)

620  -
ENODEV
;

621 
	}
}

624 #ifde‡
CONFIG_ACPI_SLEEP


625 
u32
 
a˝i_èrgë_sy°em_°©e
();

627 
ölöe
 
u32
 
	$a˝i_èrgë_sy°em_°©e
(Ë{  
ACPI_STATE_S0
; 
	}
}

630 
ölöe
 
boﬁ
 
	$a˝i_devi˚_powî_m™agóbÀ
(
a˝i_devi˚
 *
adev
)

632  
adev
->
Êags
.
powî_m™agóbÀ
;

633 
	}
}

635 
ölöe
 
boﬁ
 
	$a˝i_devi˚_ˇn_wakeup
(
a˝i_devi˚
 *
adev
)

637  
adev
->
wakeup
.
Êags
.
vÆid
;

638 
	}
}

640 #ifde‡
__löux__


641 
ölöe
 
boﬁ
 
	$a˝i_devi˚_ˇn_powîoff
(
a˝i_devi˚
 *
adev
)

643  
adev
->
powî
.
°©es
[
ACPI_STATE_D3_COLD
].
Êags
.
vÆid
 ||

644 ((
a˝i_gbl_FADT
.
Hódî
.
ªvisi⁄
 < 6) &&

645 
adev
->
powî
.
°©es
[
ACPI_STATE_D3_HOT
].
Êags
.
ex∂icô_£t
);

646 
	}
}

651 
ölöe
 
	$ªgi°î_a˝i_bus_ty≥
(*
bus
Ë{  0; 
	}
}

652 
ölöe
 
	$uƒegi°î_a˝i_bus_ty≥
(*
bus
Ë{  0; 
	}
}

	@src/common/linuxkpi/gplv2/include/acpi/acpi_drivers.h

9 #i‚de‡
__ACPI_DRIVERS_H__


10 
	#__ACPI_DRIVERS_H__


	)

12 
	#ACPI_MAX_STRING
 80

	)

18 
	#ACPI_BUS_COMPONENT
 0x00010000

	)

19 
	#ACPI_AC_COMPONENT
 0x00020000

	)

20 
	#ACPI_BATTERY_COMPONENT
 0x00040000

	)

21 
	#ACPI_BUTTON_COMPONENT
 0x00080000

	)

22 
	#ACPI_SBS_COMPONENT
 0x00100000

	)

23 
	#ACPI_FAN_COMPONENT
 0x00200000

	)

24 
	#ACPI_PCI_COMPONENT
 0x00400000

	)

25 
	#ACPI_POWER_COMPONENT
 0x00800000

	)

26 
	#ACPI_CONTAINER_COMPONENT
 0x01000000

	)

27 
	#ACPI_SYSTEM_COMPONENT
 0x02000000

	)

28 
	#ACPI_THERMAL_COMPONENT
 0x04000000

	)

29 
	#ACPI_MEMORY_DEVICE_COMPONENT
 0x08000000

	)

30 
	#ACPI_VIDEO_COMPONENT
 0x10000000

	)

31 
	#ACPI_PROCESSOR_COMPONENT
 0x20000000

	)

39 
	#ACPI_POWER_HID
 "LNXPOWER"

	)

40 
	#ACPI_PROCESSOR_OBJECT_HID
 "LNXCPU"

	)

41 
	#ACPI_SYSTEM_HID
 "LNXSYSTM"

	)

42 
	#ACPI_THERMAL_HID
 "LNXTHERM"

	)

43 
	#ACPI_BUTTON_HID_POWERF
 "LNXPWRBN"

	)

44 
	#ACPI_BUTTON_HID_SLEEPF
 "LNXSLPBN"

	)

45 
	#ACPI_VIDEO_HID
 "LNXVIDEO"

	)

46 
	#ACPI_BAY_HID
 "LNXIOBAY"

	)

47 
	#ACPI_DOCK_HID
 "LNXDOCK"

	)

49 
	#ACPI_SMBUS_IBM_HID
 "SMBUSIBM"

	)

59 
	#ACPI_FIXED_HARDWARE_EVENT
 0x100

	)

68 
a˝i_úq_≥«…y_öô
();

69 
a˝i_pci_lök_Æloˇã_úq
(
a˝i_h™dÀ
 
h™dÀ
, 
ödex
, *
åiggîög
,

70 *
pﬁ¨ôy
, **
«me
);

71 
a˝i_pci_lök_‰ì_úq
(
a˝i_h™dÀ
 
h™dÀ
);

75 
	gpci_bus
;

77 
pci_dev
 *
a˝i_gë_pci_dev
(
a˝i_h™dÀ
);

81 
	ga˝i_pci_roŸ
;

83 
pci_bus
 *
pci_a˝i_sˇn_roŸ
(
a˝i_pci_roŸ
 *
roŸ
);

85 #ifde‡
CONFIG_X86


86 
pci_a˝i_¸s_quúks
();

88 
ölöe
 
	$pci_a˝i_¸s_quúks
(Ë{ 
	}
}

95 
	#ACPI_PROCESSOR_LIMIT_NONE
 0x00

	)

96 
	#ACPI_PROCESSOR_LIMIT_INCREMENT
 0x01

	)

97 
	#ACPI_PROCESSOR_LIMIT_DECREMENT
 0x02

	)

102 #ifde‡
CONFIG_ACPI_DOCK


103 
is_dock_devi˚
(
a˝i_devi˚
 *
adev
);

105 
ölöe
 
	$is_dock_devi˚
(
a˝i_devi˚
 *
adev
)

108 
	}
}

	@src/common/linuxkpi/gplv2/include/acpi/button.h

1 #i‚de‡
ACPI_BUTTON_H


2 
	#ACPI_BUTTON_H


	)

4 
	~<löux/nŸifõr.h
>

6 
a˝i_lid_nŸifõr_ªgi°î
(
nŸifõr_block
 *
nb
);

7 
a˝i_lid_nŸifõr_uƒegi°î
(
nŸifõr_block
 *
nb
);

8 
a˝i_lid_›í
();

	@src/common/linuxkpi/gplv2/include/acpi/video.h

1 #i‚de‡
_LINUX_ACPI_VIDEO_H_


2 
	#_LINUX_ACPI_VIDEO_H_


	)

4 
	~<sys/sy°m.h
>

6 
	#ACPI_VIDEO_CLASS
 "video"

	)

8 
	ea˝i_backlight_ty≥
 {

9 
	ma˝i_backlight_undef
 = -1,

10 
	ma˝i_backlight_n⁄e
 = 0,

11 
	ma˝i_backlight_video
,

12 
	ma˝i_backlight_víd‹
,

13 
	ma˝i_backlight_«tive
,

16 
a˝i_backlight_ty≥
 
a˝i_video_gë_backlight_ty≥
();

	@src/common/linuxkpi/gplv2/include/asm/barrier.h

1 #i‚de‡
_ASM_BARRIER_H


2 
	#_ASM_BARRIER_H


	)

4 
	~<asm/¥o˚ss‹.h
>

6 
	#smp_°‹e_ªÀa£
(
p
, 
v
) \

8 
	`smp_mb
(); \

9 
	`WRITE_ONCE
(*
p
, 
v
); \

10 } 0)

	)

13 
	#smp_lﬂd_acquúe
(
p
) \

15 
	`ty≥of
(*
p
Ë
___p1
 = 
	`READ_ONCE
(*p); \

16 
	`smp_mb
(); \

17 
___p1
; \

18 })

	)

	@src/common/linuxkpi/gplv2/include/asm/cpufeature.h

1 #i‚de‡
_ASM_CPUFEATURE_H_


2 
	#_ASM_CPUFEATURE_H_


	)

5 
	#ã°_˝u_ˇp
(
c
, 
bô
) \

6 
	`ã°_bô
(
bô
, (*)((
c
)->
x86_ˇ∑bûôy
))

	)

9 
	#REQUIRED_MASK_BIT_SET
(
bô
) \

10 –(((
bô
)>>5)==0 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK0
 )) || \

11 (((
bô
)>>5)==1 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK1
 )) || \

12 (((
bô
)>>5)==2 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK2
 )) || \

13 (((
bô
)>>5)==3 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK3
 )) || \

14 (((
bô
)>>5)==4 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK4
 )) || \

15 (((
bô
)>>5)==5 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK5
 )) || \

16 (((
bô
)>>5)==6 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK6
 )) || \

17 (((
bô
)>>5)==7 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK7
 )) || \

18 (((
bô
)>>5)==8 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK8
 )) || \

19 (((
bô
)>>5)==9 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK9
 )) || \

20 (((
bô
)>>5)==10 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK10
)) || \

21 (((
bô
)>>5)==11 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK11
)) || \

22 (((
bô
)>>5)==12 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK12
)) || \

23 (((
bô
)>>5)==13 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK13
)) || \

24 (((
bô
)>>5)==13 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK14
)) || \

25 (((
bô
)>>5)==13 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK15
)) || \

26 (((
bô
)>>5)==14 && (1UL<<((bô)&31Ë& 
REQUIRED_MASK16
)Ë)

	)

29 
	#˝u_has
(
c
, 
bô
) \

30 (
	`__buûtö_c⁄°™t_p
(
bô
Ë&& 
	`REQUIRED_MASK_BIT_SET
(bit) ? 1 : \

31 
	`ã°_˝u_ˇp
(
c
, 
bô
))

	)

34 
	#boŸ_˝u_has
(
bô
Ë
	`˝u_has
(&
boŸ_˝u_d©a
, bô)

	)

41 #i‡
deföed
(
CC_HAVE_ASM_GOTO
Ë&& deföed(
CONFIG_X86_FAST_FEATURE_TESTS
)

47 
__Æways_ölöe
 
__puª
 
boﬁ
 
	$_°©ic_˝u_has
(
u16
 
bô
)

49 
	`asm_vﬁ©ûe_gŸo
("1: jmp 6f\n"

80 : : "i" (
bô
), "i" (
X86_FEATURE_ALWAYS
),

81 [
bônum
] "i" (1 << (
bô
 & 7)),

82 [
ˇp_byã
] "m" (((c⁄° *)
boŸ_˝u_d©a
.
x86_ˇ∑bûôy
)[
bô
 >> 3])

83 : : 
t_yes
, 
t_no
);

84 
t_yes
:

85  
åue
;

86 
t_no
:

87  
Ál£
;

88 
	}
}

90 
	#°©ic_˝u_has
(
bô
) \

92 
	`__buûtö_c⁄°™t_p
(
	`boŸ_˝u_has
(
bô
)) ? \

93 
	`boŸ_˝u_has
(
bô
) : \

94 
	`_°©ic_˝u_has
(
bô
) \

95 )

	)

101 
	#°©ic_˝u_has
(
bô
Ë
	`boŸ_˝u_has
(bô)

	)

	@src/common/linuxkpi/gplv2/include/asm/cpufeatures.h

1 #i‚de‡
_ASM_X86_CPUFEATURES_H


2 
	#_ASM_X86_CPUFEATURES_H


	)

4 #i‚de‡
_ASM_X86_REQUIRED_FEATURES_H


5 
	~<asm/ªquúed-„©uªs.h
>

11 
	#NCAPINTS
 17

	)

12 
	#NBUGINTS
 1

	)

21 
	#X86_FEATURE_FPU
 ( 0*32+ 0Ë

	)

22 
	#X86_FEATURE_VME
 ( 0*32+ 1Ë

	)

23 
	#X86_FEATURE_DE
 ( 0*32+ 2Ë

	)

24 
	#X86_FEATURE_PSE
 ( 0*32+ 3Ë

	)

25 
	#X86_FEATURE_TSC
 ( 0*32+ 4Ë

	)

26 
	#X86_FEATURE_MSR
 ( 0*32+ 5Ë

	)

27 
	#X86_FEATURE_PAE
 ( 0*32+ 6Ë

	)

28 
	#X86_FEATURE_MCE
 ( 0*32+ 7Ë

	)

29 
	#X86_FEATURE_CX8
 ( 0*32+ 8Ë

	)

30 
	#X86_FEATURE_APIC
 ( 0*32+ 9Ë

	)

31 
	#X86_FEATURE_SEP
 ( 0*32+11Ë

	)

32 
	#X86_FEATURE_MTRR
 ( 0*32+12Ë

	)

33 
	#X86_FEATURE_PGE
 ( 0*32+13Ë

	)

34 
	#X86_FEATURE_MCA
 ( 0*32+14Ë

	)

35 
	#X86_FEATURE_CMOV
 ( 0*32+15Ë

	)

37 
	#X86_FEATURE_PAT
 ( 0*32+16Ë

	)

38 
	#X86_FEATURE_PSE36
 ( 0*32+17Ë

	)

39 
	#X86_FEATURE_PN
 ( 0*32+18Ë

	)

40 
	#X86_FEATURE_CLFLUSH
 ( 0*32+19Ë

	)

41 
	#X86_FEATURE_DS
 ( 0*32+21Ë

	)

42 
	#X86_FEATURE_ACPI
 ( 0*32+22Ë

	)

43 
	#X86_FEATURE_MMX
 ( 0*32+23Ë

	)

44 
	#X86_FEATURE_FXSR
 ( 0*32+24Ë

	)

45 
	#X86_FEATURE_XMM
 ( 0*32+25Ë

	)

46 
	#X86_FEATURE_XMM2
 ( 0*32+26Ë

	)

47 
	#X86_FEATURE_SELFSNOOP
 ( 0*32+27Ë

	)

48 
	#X86_FEATURE_HT
 ( 0*32+28Ë

	)

49 
	#X86_FEATURE_ACC
 ( 0*32+29Ë

	)

50 
	#X86_FEATURE_IA64
 ( 0*32+30Ë

	)

51 
	#X86_FEATURE_PBE
 ( 0*32+31Ë

	)

55 
	#X86_FEATURE_SYSCALL
 ( 1*32+11Ë

	)

56 
	#X86_FEATURE_MP
 ( 1*32+19Ë

	)

57 
	#X86_FEATURE_NX
 ( 1*32+20Ë

	)

58 
	#X86_FEATURE_MMXEXT
 ( 1*32+22Ë

	)

59 
	#X86_FEATURE_FXSR_OPT
 ( 1*32+25Ë

	)

60 
	#X86_FEATURE_GBPAGES
 ( 1*32+26Ë

	)

61 
	#X86_FEATURE_RDTSCP
 ( 1*32+27Ë

	)

62 
	#X86_FEATURE_LM
 ( 1*32+29Ë

	)

63 
	#X86_FEATURE_3DNOWEXT
 ( 1*32+30Ë

	)

64 
	#X86_FEATURE_3DNOW
 ( 1*32+31Ë

	)

67 
	#X86_FEATURE_RECOVERY
 ( 2*32+ 0Ë

	)

68 
	#X86_FEATURE_LONGRUN
 ( 2*32+ 1Ë

	)

69 
	#X86_FEATURE_LRTI
 ( 2*32+ 3Ë

	)

73 
	#X86_FEATURE_CXMMX
 ( 3*32+ 0Ë

	)

74 
	#X86_FEATURE_K6_MTRR
 ( 3*32+ 1Ë

	)

75 
	#X86_FEATURE_CYRIX_ARR
 ( 3*32+ 2Ë

	)

76 
	#X86_FEATURE_CENTAUR_MCR
 ( 3*32+ 3Ë

	)

78 
	#X86_FEATURE_K8
 ( 3*32+ 4Ë

	)

79 
	#X86_FEATURE_K7
 ( 3*32+ 5Ë

	)

80 
	#X86_FEATURE_P3
 ( 3*32+ 6Ë

	)

81 
	#X86_FEATURE_P4
 ( 3*32+ 7Ë

	)

82 
	#X86_FEATURE_CONSTANT_TSC
 ( 3*32+ 8Ë

	)

83 
	#X86_FEATURE_UP
 ( 3*32+ 9Ë

	)

84 
	#X86_FEATURE_ART
 ( 3*32+10Ë

	)

85 
	#X86_FEATURE_ARCH_PERFMON
 ( 3*32+11Ë

	)

86 
	#X86_FEATURE_PEBS
 ( 3*32+12Ë

	)

87 
	#X86_FEATURE_BTS
 ( 3*32+13Ë

	)

88 
	#X86_FEATURE_SYSCALL32
 ( 3*32+14Ë

	)

89 
	#X86_FEATURE_SYSENTER32
 ( 3*32+15Ë

	)

90 
	#X86_FEATURE_REP_GOOD
 ( 3*32+16Ë

	)

91 
	#X86_FEATURE_MFENCE_RDTSC
 ( 3*32+17Ë

	)

92 
	#X86_FEATURE_LFENCE_RDTSC
 ( 3*32+18Ë

	)

93 
	#X86_FEATURE_ACC_POWER
 ( 3*32+19Ë

	)

94 
	#X86_FEATURE_NOPL
 ( 3*32+20Ë

	)

95 
	#X86_FEATURE_ALWAYS
 ( 3*32+21Ë

	)

96 
	#X86_FEATURE_XTOPOLOGY
 ( 3*32+22Ë

	)

97 
	#X86_FEATURE_TSC_RELIABLE
 ( 3*32+23Ë

	)

98 
	#X86_FEATURE_NONSTOP_TSC
 ( 3*32+24Ë

	)

100 
	#X86_FEATURE_EXTD_APICID
 ( 3*32+26Ë

	)

101 
	#X86_FEATURE_AMD_DCM
 ( 3*32+27Ë

	)

102 
	#X86_FEATURE_APERFMPERF
 ( 3*32+28Ë

	)

103 
	#X86_FEATURE_EAGER_FPU
 ( 3*32+29Ë

	)

104 
	#X86_FEATURE_NONSTOP_TSC_S3
 ( 3*32+30Ë

	)

105 
	#X86_FEATURE_MCE_RECOVERY
 ( 3*32+31Ë

	)

108 
	#X86_FEATURE_XMM3
 ( 4*32+ 0Ë

	)

109 
	#X86_FEATURE_PCLMULQDQ
 ( 4*32+ 1Ë

	)

110 
	#X86_FEATURE_DTES64
 ( 4*32+ 2Ë

	)

111 
	#X86_FEATURE_MWAIT
 ( 4*32+ 3Ë

	)

112 
	#X86_FEATURE_DSCPL
 ( 4*32+ 4Ë

	)

113 
	#X86_FEATURE_VMX
 ( 4*32+ 5Ë

	)

114 
	#X86_FEATURE_SMX
 ( 4*32+ 6Ë

	)

115 
	#X86_FEATURE_EST
 ( 4*32+ 7Ë

	)

116 
	#X86_FEATURE_TM2
 ( 4*32+ 8Ë

	)

117 
	#X86_FEATURE_SSSE3
 ( 4*32+ 9Ë

	)

118 
	#X86_FEATURE_CID
 ( 4*32+10Ë

	)

119 
	#X86_FEATURE_SDBG
 ( 4*32+11Ë

	)

120 
	#X86_FEATURE_FMA
 ( 4*32+12Ë

	)

121 
	#X86_FEATURE_CX16
 ( 4*32+13Ë

	)

122 
	#X86_FEATURE_XTPR
 ( 4*32+14Ë

	)

123 
	#X86_FEATURE_PDCM
 ( 4*32+15Ë

	)

124 
	#X86_FEATURE_PCID
 ( 4*32+17Ë

	)

125 
	#X86_FEATURE_DCA
 ( 4*32+18Ë

	)

126 
	#X86_FEATURE_XMM4_1
 ( 4*32+19Ë

	)

127 
	#X86_FEATURE_XMM4_2
 ( 4*32+20Ë

	)

128 
	#X86_FEATURE_X2APIC
 ( 4*32+21Ë

	)

129 
	#X86_FEATURE_MOVBE
 ( 4*32+22Ë

	)

130 
	#X86_FEATURE_POPCNT
 ( 4*32+23Ë

	)

131 
	#X86_FEATURE_TSC_DEADLINE_TIMER
 ( 4*32+24Ë

	)

132 
	#X86_FEATURE_AES
 ( 4*32+25Ë

	)

133 
	#X86_FEATURE_XSAVE
 ( 4*32+26Ë

	)

134 
	#X86_FEATURE_OSXSAVE
 ( 4*32+27Ë

	)

135 
	#X86_FEATURE_AVX
 ( 4*32+28Ë

	)

136 
	#X86_FEATURE_F16C
 ( 4*32+29Ë

	)

137 
	#X86_FEATURE_RDRAND
 ( 4*32+30Ë

	)

138 
	#X86_FEATURE_HYPERVISOR
 ( 4*32+31Ë

	)

141 
	#X86_FEATURE_XSTORE
 ( 5*32+ 2Ë

	)

142 
	#X86_FEATURE_XSTORE_EN
 ( 5*32+ 3Ë

	)

143 
	#X86_FEATURE_XCRYPT
 ( 5*32+ 6Ë

	)

144 
	#X86_FEATURE_XCRYPT_EN
 ( 5*32+ 7Ë

	)

145 
	#X86_FEATURE_ACE2
 ( 5*32+ 8Ë

	)

146 
	#X86_FEATURE_ACE2_EN
 ( 5*32+ 9Ë

	)

147 
	#X86_FEATURE_PHE
 ( 5*32+10Ë

	)

148 
	#X86_FEATURE_PHE_EN
 ( 5*32+11Ë

	)

149 
	#X86_FEATURE_PMM
 ( 5*32+12Ë

	)

150 
	#X86_FEATURE_PMM_EN
 ( 5*32+13Ë

	)

153 
	#X86_FEATURE_LAHF_LM
 ( 6*32+ 0Ë

	)

154 
	#X86_FEATURE_CMP_LEGACY
 ( 6*32+ 1Ë

	)

155 
	#X86_FEATURE_SVM
 ( 6*32+ 2Ë

	)

156 
	#X86_FEATURE_EXTAPIC
 ( 6*32+ 3Ë

	)

157 
	#X86_FEATURE_CR8_LEGACY
 ( 6*32+ 4Ë

	)

158 
	#X86_FEATURE_ABM
 ( 6*32+ 5Ë

	)

159 
	#X86_FEATURE_SSE4A
 ( 6*32+ 6Ë

	)

160 
	#X86_FEATURE_MISALIGNSSE
 ( 6*32+ 7Ë

	)

161 
	#X86_FEATURE_3DNOWPREFETCH
 ( 6*32+ 8Ë

	)

162 
	#X86_FEATURE_OSVW
 ( 6*32+ 9Ë

	)

163 
	#X86_FEATURE_IBS
 ( 6*32+10Ë

	)

164 
	#X86_FEATURE_XOP
 ( 6*32+11Ë

	)

165 
	#X86_FEATURE_SKINIT
 ( 6*32+12Ë

	)

166 
	#X86_FEATURE_WDT
 ( 6*32+13Ë

	)

167 
	#X86_FEATURE_LWP
 ( 6*32+15Ë

	)

168 
	#X86_FEATURE_FMA4
 ( 6*32+16Ë

	)

169 
	#X86_FEATURE_TCE
 ( 6*32+17Ë

	)

170 
	#X86_FEATURE_NODEID_MSR
 ( 6*32+19Ë

	)

171 
	#X86_FEATURE_TBM
 ( 6*32+21Ë

	)

172 
	#X86_FEATURE_TOPOEXT
 ( 6*32+22Ë

	)

173 
	#X86_FEATURE_PERFCTR_CORE
 ( 6*32+23Ë

	)

174 
	#X86_FEATURE_PERFCTR_NB
 ( 6*32+24Ë

	)

175 
	#X86_FEATURE_BPEXT
 (6*32+26Ë

	)

176 
	#X86_FEATURE_PERFCTR_L2
 ( 6*32+28Ë

	)

177 
	#X86_FEATURE_MWAITX
 ( 6*32+29Ë

	)

186 
	#X86_FEATURE_CPB
 ( 7*32+ 2Ë

	)

187 
	#X86_FEATURE_EPB
 ( 7*32+ 3Ë

	)

189 
	#X86_FEATURE_HW_PSTATE
 ( 7*32+ 8Ë

	)

190 
	#X86_FEATURE_PROC_FEEDBACK
 ( 7*32+ 9Ë

	)

192 
	#X86_FEATURE_INTEL_PT
 ( 7*32+15Ë

	)

195 
	#X86_FEATURE_TPR_SHADOW
 ( 8*32+ 0Ë

	)

196 
	#X86_FEATURE_VNMI
 ( 8*32+ 1Ë

	)

197 
	#X86_FEATURE_FLEXPRIORITY
 ( 8*32+ 2Ë

	)

198 
	#X86_FEATURE_EPT
 ( 8*32+ 3Ë

	)

199 
	#X86_FEATURE_VPID
 ( 8*32+ 4Ë

	)

201 
	#X86_FEATURE_VMMCALL
 ( 8*32+15Ë

	)

202 
	#X86_FEATURE_XENPV
 ( 8*32+16Ë

	)

206 
	#X86_FEATURE_FSGSBASE
 ( 9*32+ 0Ë

	)

207 
	#X86_FEATURE_TSC_ADJUST
 ( 9*32+ 1Ë

	)

208 
	#X86_FEATURE_BMI1
 ( 9*32+ 3Ë

	)

209 
	#X86_FEATURE_HLE
 ( 9*32+ 4Ë

	)

210 
	#X86_FEATURE_AVX2
 ( 9*32+ 5Ë

	)

211 
	#X86_FEATURE_SMEP
 ( 9*32+ 7Ë

	)

212 
	#X86_FEATURE_BMI2
 ( 9*32+ 8Ë

	)

213 
	#X86_FEATURE_ERMS
 ( 9*32+ 9Ë

	)

214 
	#X86_FEATURE_INVPCID
 ( 9*32+10Ë

	)

215 
	#X86_FEATURE_RTM
 ( 9*32+11Ë

	)

216 
	#X86_FEATURE_CQM
 ( 9*32+12Ë

	)

217 
	#X86_FEATURE_MPX
 ( 9*32+14Ë

	)

218 
	#X86_FEATURE_AVX512F
 ( 9*32+16Ë

	)

219 
	#X86_FEATURE_AVX512DQ
 ( 9*32+17Ë

	)

220 
	#X86_FEATURE_RDSEED
 ( 9*32+18Ë

	)

221 
	#X86_FEATURE_ADX
 ( 9*32+19Ë

	)

222 
	#X86_FEATURE_SMAP
 ( 9*32+20Ë

	)

223 
	#X86_FEATURE_PCOMMIT
 ( 9*32+22Ë

	)

224 
	#X86_FEATURE_CLFLUSHOPT
 ( 9*32+23Ë

	)

225 
	#X86_FEATURE_CLWB
 ( 9*32+24Ë

	)

226 
	#X86_FEATURE_AVX512PF
 ( 9*32+26Ë

	)

227 
	#X86_FEATURE_AVX512ER
 ( 9*32+27Ë

	)

228 
	#X86_FEATURE_AVX512CD
 ( 9*32+28Ë

	)

229 
	#X86_FEATURE_SHA_NI
 ( 9*32+29Ë

	)

230 
	#X86_FEATURE_AVX512BW
 ( 9*32+30Ë

	)

231 
	#X86_FEATURE_AVX512VL
 ( 9*32+31Ë

	)

234 
	#X86_FEATURE_XSAVEOPT
 (10*32+ 0Ë

	)

235 
	#X86_FEATURE_XSAVEC
 (10*32+ 1Ë

	)

236 
	#X86_FEATURE_XGETBV1
 (10*32+ 2Ë

	)

237 
	#X86_FEATURE_XSAVES
 (10*32+ 3Ë

	)

240 
	#X86_FEATURE_CQM_LLC
 (11*32+ 1Ë

	)

243 
	#X86_FEATURE_CQM_OCCUP_LLC
 (12*32+ 0Ë

	)

244 
	#X86_FEATURE_CQM_MBM_TOTAL
 (12*32+ 1Ë

	)

245 
	#X86_FEATURE_CQM_MBM_LOCAL
 (12*32+ 2Ë

	)

248 
	#X86_FEATURE_CLZERO
 (13*32+0Ë

	)

251 
	#X86_FEATURE_DTHERM
 (14*32+ 0Ë

	)

252 
	#X86_FEATURE_IDA
 (14*32+ 1Ë

	)

253 
	#X86_FEATURE_ARAT
 (14*32+ 2Ë

	)

254 
	#X86_FEATURE_PLN
 (14*32+ 4Ë

	)

255 
	#X86_FEATURE_PTS
 (14*32+ 6Ë

	)

256 
	#X86_FEATURE_HWP
 (14*32+ 7Ë

	)

257 
	#X86_FEATURE_HWP_NOTIFY
 (14*32+ 8Ë

	)

258 
	#X86_FEATURE_HWP_ACT_WINDOW
 (14*32+ 9Ë

	)

259 
	#X86_FEATURE_HWP_EPP
 (14*32+10Ë

	)

260 
	#X86_FEATURE_HWP_PKG_REQ
 (14*32+11Ë

	)

263 
	#X86_FEATURE_NPT
 (15*32+ 0Ë

	)

264 
	#X86_FEATURE_LBRV
 (15*32+ 1Ë

	)

265 
	#X86_FEATURE_SVML
 (15*32+ 2Ë

	)

266 
	#X86_FEATURE_NRIPS
 (15*32+ 3Ë

	)

267 
	#X86_FEATURE_TSCRATEMSR
 (15*32+ 4Ë

	)

268 
	#X86_FEATURE_VMCBCLEAN
 (15*32+ 5Ë

	)

269 
	#X86_FEATURE_FLUSHBYASID
 (15*32+ 6Ë

	)

270 
	#X86_FEATURE_DECODEASSISTS
 (15*32+ 7Ë

	)

271 
	#X86_FEATURE_PAUSEFILTER
 (15*32+10Ë

	)

272 
	#X86_FEATURE_PFTHRESHOLD
 (15*32+12Ë

	)

273 
	#X86_FEATURE_AVIC
 (15*32+13Ë

	)

276 
	#X86_FEATURE_PKU
 (16*32+ 3Ë

	)

277 
	#X86_FEATURE_OSPKE
 (16*32+ 4Ë

	)

282 
	#X86_BUG
(
x
Ë(
NCAPINTS
*32 + (x))

	)

284 
	#X86_BUG_F00F
 
	`X86_BUG
(0Ë

	)

285 
	#X86_BUG_FDIV
 
	`X86_BUG
(1Ë

	)

286 
	#X86_BUG_COMA
 
	`X86_BUG
(2Ë

	)

287 
	#X86_BUG_AMD_TLB_MMATCH
 
	`X86_BUG
(3Ë

	)

288 
	#X86_BUG_AMD_APIC_C1E
 
	`X86_BUG
(4Ë

	)

289 
	#X86_BUG_11AP
 
	`X86_BUG
(5Ë

	)

290 
	#X86_BUG_FXSAVE_LEAK
 
	`X86_BUG
(6Ë

	)

291 
	#X86_BUG_CLFLUSH_MONITOR
 
	`X86_BUG
(7Ë

	)

292 
	#X86_BUG_SYSRET_SS_ATTRS
 
	`X86_BUG
(8Ë

	)

294 #ifde‡
CONFIG_X86_32


299 
	#X86_BUG_ESPFIX
 
	`X86_BUG
(9Ë

	)

302 
	#˝u_has_∑t
 
	`boŸ_˝u_has
(
X86_FEATURE_PAT
)

	)

	@src/common/linuxkpi/gplv2/include/asm/fpu/api.h

1 #i‚de‡
_ASM_X86_FPU_API_H


2 
	#_ASM_X86_FPU_API_H


	)

4 #ifde‡
__i386__


5 
	~<machöe/≈x.h
>

7 
	~<machöe/Âu.h
>

10 
	#kî√l_Âu_begö
() \

11 
Âu_kîn_˘x
 *
__Âu_˘x
; \

12 
__Âu_˘x
 = 
	`Âu_kîn_Æloc_˘x
(0); \

13 
	`Âu_kîn_íãr
(
cuπhªad
, 
__Âu_˘x
, \

14 
FPU_KERN_NORMAL
);

	)

16 
	#kî√l_Âu_íd
() \

17 
	`Âu_kîn_Àave
(
cuπhªad
, 
__Âu_˘x
); \

18 
	`Âu_kîn_‰ì_˘x
(
__Âu_˘x
);

	)

	@src/common/linuxkpi/gplv2/include/asm/iosf_mbi.h

6 #i‚de‡
IOSF_MBI_SYMS_H


7 
	#IOSF_MBI_SYMS_H


	)

9 
	~<löux/nŸifõr.h
>

11 
	#MBI_MCR_OFFSET
 0xD0

	)

12 
	#MBI_MDR_OFFSET
 0xD4

	)

13 
	#MBI_MCRX_OFFSET
 0xD8

	)

15 
	#MBI_RD_MASK
 0xFEFFFFFF

	)

16 
	#MBI_WR_MASK
 0X01000000

	)

18 
	#MBI_MASK_HI
 0xFFFFFF00

	)

19 
	#MBI_MASK_LO
 0x000000FF

	)

20 
	#MBI_ENABLE
 0xF0

	)

23 
	#MBI_MMIO_READ
 0x00

	)

24 
	#MBI_MMIO_WRITE
 0x01

	)

25 
	#MBI_CFG_READ
 0x04

	)

26 
	#MBI_CFG_WRITE
 0x05

	)

27 
	#MBI_CR_READ
 0x06

	)

28 
	#MBI_CR_WRITE
 0x07

	)

29 
	#MBI_REG_READ
 0x10

	)

30 
	#MBI_REG_WRITE
 0x11

	)

31 
	#MBI_ESRAM_READ
 0x12

	)

32 
	#MBI_ESRAM_WRITE
 0x13

	)

35 
	#BT_MBI_UNIT_AUNIT
 0x00

	)

36 
	#BT_MBI_UNIT_SMC
 0x01

	)

37 
	#BT_MBI_UNIT_CPU
 0x02

	)

38 
	#BT_MBI_UNIT_BUNIT
 0x03

	)

39 
	#BT_MBI_UNIT_PMC
 0x04

	)

40 
	#BT_MBI_UNIT_GFX
 0x06

	)

41 
	#BT_MBI_UNIT_SMI
 0x0C

	)

42 
	#BT_MBI_UNIT_USB
 0x43

	)

43 
	#BT_MBI_UNIT_SATA
 0xA3

	)

44 
	#BT_MBI_UNIT_PCIE
 0xA6

	)

47 
	#QRK_MBI_UNIT_HBA
 0x00

	)

48 
	#QRK_MBI_UNIT_HB
 0x03

	)

49 
	#QRK_MBI_UNIT_RMU
 0x04

	)

50 
	#QRK_MBI_UNIT_MM
 0x05

	)

51 
	#QRK_MBI_UNIT_SOC
 0x31

	)

54 
	#MBI_PMIC_BUS_ACCESS_BEGIN
 1

	)

55 
	#MBI_PMIC_BUS_ACCESS_END
 2

	)

57 #i‡
IS_ENABLED
(
CONFIG_IOSF_MBI
)

59 
boﬁ
 
iosf_mbi_avaûabÀ
();

71 
iosf_mbi_ªad
(
u8
 
p‹t
, u8 
›code
, 
u32
 
off£t
, u32 *
mdr
);

83 
iosf_mbi_wrôe
(
u8
 
p‹t
, u8 
›code
, 
u32
 
off£t
, u32 
mdr
);

96 
iosf_mbi_modify
(
u8
 
p‹t
, u8 
›code
, 
u32
 
off£t
, u32 
mdr
, u32 
mask
);

118 
iosf_mbi_punô_acquúe
();

123 
iosf_mbi_punô_ªÀa£
();

140 
iosf_mbi_ªgi°î_pmic_bus_ac˚ss_nŸifõr
(
nŸifõr_block
 *
nb
);

147 
iosf_mbi_uƒegi°î_pmic_bus_ac˚ss_nŸifõr
(
nŸifõr_block
 *
nb
);

158 
iosf_mbi_uƒegi°î_pmic_bus_ac˚ss_nŸifõr_u∆ocked
(

159 
nŸifõr_block
 *
nb
);

167 
iosf_mbi_ˇŒ_pmic_bus_ac˚ss_nŸifõr_chaö
(
vÆ
, *
v
);

172 
iosf_mbi_as£π_punô_acquúed
();

175 
ölöe


176 
boﬁ
 
	$iosf_mbi_avaûabÀ
()

178  
Ál£
;

179 
	}
}

181 
ölöe


182 
	$iosf_mbi_ªad
(
u8
 
p‹t
, u8 
›code
, 
u32
 
off£t
, u32 *
mdr
)

184 
	`WARN
(1, "IOSF_MBI driverÇotávailable");

185  -
EPERM
;

186 
	}
}

188 
ölöe


189 
	$iosf_mbi_wrôe
(
u8
 
p‹t
, u8 
›code
, 
u32
 
off£t
, u32 
mdr
)

191 
	`WARN
(1, "IOSF_MBI driverÇotávailable");

192  -
EPERM
;

193 
	}
}

195 
ölöe


196 
	$iosf_mbi_modify
(
u8
 
p‹t
, u8 
›code
, 
u32
 
off£t
, u32 
mdr
, u32 
mask
)

198 
	`WARN
(1, "IOSF_MBI driverÇotávailable");

199  -
EPERM
;

200 
	}
}

202 
ölöe
 
	$iosf_mbi_punô_acquúe
(Ë{
	}
}

203 
ölöe
 
	$iosf_mbi_punô_ªÀa£
(Ë{
	}
}

205 
ölöe


206 
	$iosf_mbi_ªgi°î_pmic_bus_ac˚ss_nŸifõr
(
nŸifõr_block
 *
nb
)

209 
	}
}

211 
ölöe


212 
	$iosf_mbi_uƒegi°î_pmic_bus_ac˚ss_nŸifõr
(
nŸifõr_block
 *
nb
)

215 
	}
}

217 
ölöe
 

218 
	$iosf_mbi_uƒegi°î_pmic_bus_ac˚ss_nŸifõr_u∆ocked
(
nŸifõr_block
 *
nb
)

221 
	}
}

223 
ölöe


224 
	$iosf_mbi_ˇŒ_pmic_bus_ac˚ss_nŸifõr_chaö
(
vÆ
, *
v
)

227 
	}
}

229 
ölöe
 
	$iosf_mbi_as£π_punô_acquúed
(Ë{
	}
}

	@src/common/linuxkpi/gplv2/include/asm/mtrr.h

1 #i‚de‡
_ASM_X86_MTRR_H


2 
	#_ASM_X86_MTRR_H


	)

5 
	#MTRR_TYPE_UNCACHABLE
 0

	)

6 
	#MTRR_TYPE_WRCOMB
 1

	)

8 
	#MTRR_TYPE_WRTHROUGH
 4

	)

9 
	#MTRR_TYPE_WRPROT
 5

	)

10 
	#MTRR_TYPE_WRBACK
 6

	)

11 
	#MTRR_NUM_TYPES
 7

	)

14 
¨ch_phys_wc_add
(
ba£
, 
size
);

15 
¨ch_phys_wc_dñ
(
h™dÀ
);

17 
	#¨ch_phys_wc_ödex
(
x
Ë(x)

	)

	@src/common/linuxkpi/gplv2/include/asm/pgtable.h

1 #i‚de‡
_ASM_GPLV2_PGTABLE_H_


2 
	#_ASM_GPLV2_PGTABLE_H_


	)

4 #ö˛ude_√xà<
asm
/
pgèbÀ
.
h
>

6 
	#_AT
(
T
,
X
Ë((T)(X))

	)

8 
	#_PAGE_BIT_PRESENT
 0

	)

9 
	#_PAGE_BIT_RW
 1

	)

10 
	#_PAGE_BIT_USER
 2

	)

11 
	#_PAGE_BIT_PWT
 3

	)

12 
	#_PAGE_BIT_PCD
 4

	)

13 
	#_PAGE_BIT_ACCESSED
 5

	)

14 
	#_PAGE_BIT_DIRTY
 6

	)

15 
	#_PAGE_BIT_PSE
 7

	)

16 
	#_PAGE_BIT_PAT
 7

	)

17 
	#_PAGE_BIT_GLOBAL
 8

	)

18 
	#_PAGE_BIT_SOFTW1
 9

	)

19 
	#_PAGE_BIT_SOFTW2
 10

	)

20 
	#_PAGE_BIT_SOFTW3
 11

	)

21 
	#_PAGE_BIT_PAT_LARGE
 12

	)

22 
	#_PAGE_BIT_SOFTW4
 58

	)

23 
	#_PAGE_BIT_PKEY_BIT0
 59

	)

24 
	#_PAGE_BIT_PKEY_BIT1
 60

	)

25 
	#_PAGE_BIT_PKEY_BIT2
 61

	)

26 
	#_PAGE_BIT_PKEY_BIT3
 62

	)

27 
	#_PAGE_BIT_NX
 63

	)

29 
	#_PAGE_BIT_SPECIAL
 
_PAGE_BIT_SOFTW1


	)

30 
	#_PAGE_BIT_CPA_TEST
 
_PAGE_BIT_SOFTW1


	)

32 
	#_PAGE_PRESENT
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_PRESENT
)

	)

33 
	#_PAGE_RW
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_RW
)

	)

34 
	#_PAGE_USER
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_USER
)

	)

35 
	#_PAGE_PWT
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_PWT
)

	)

36 
	#_PAGE_PCD
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_PCD
)

	)

37 
	#_PAGE_ACCESSED
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_ACCESSED
)

	)

38 
	#_PAGE_DIRTY
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_DIRTY
)

	)

39 
	#_PAGE_PSE
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_PSE
)

	)

40 
	#_PAGE_GLOBAL
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_GLOBAL
)

	)

41 
	#_PAGE_SOFTW1
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_SOFTW1
)

	)

42 
	#_PAGE_SOFTW2
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_SOFTW2
)

	)

43 
	#_PAGE_PAT
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_PAT
)

	)

44 
	#_PAGE_PAT_LARGE
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_PAT_LARGE
)

	)

45 
	#_PAGE_SPECIAL
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_SPECIAL
)

	)

46 
	#_PAGE_CPA_TEST
 (
	`_AT
(
±evÆ_t
, 1Ë<< 
_PAGE_BIT_CPA_TEST
)

	)

48 
	#_PAGE_CACHE_MASK
 (
_PAGE_PAT
 | 
_PAGE_PCD
 | 
_PAGE_PWT
)

	)

50 
	#__PAGE_KERNEL_EXEC
 \

51 (
_PAGE_PRESENT
 | 
_PAGE_RW
 | 
_PAGE_DIRTY
 | 
_PAGE_ACCESSED
 | 
_PAGE_GLOBAL
)

	)

52 
	#__PAGE_KERNEL
 (
__PAGE_KERNEL_EXEC
 | 
_PAGE_NX
)

	)

54 
	#__PAGE_KERNEL_IO
 (
__PAGE_KERNEL
)

	)

56 
	#pg¥Ÿ_vÆ
(
x
Ë((x))

	)

57 
	#__pg¥Ÿ
(
x
Ë((
pg¥Ÿ_t
Ë{ (xË} )

	)

60 
	#±e_vÆ
(
x
Ë
	`«tive_±e_vÆ
(x)

	)

61 
	#__±e
(
x
Ë
	`«tive_make_±e
(x)

	)

63 
ölöe
 
±evÆ_t
 
	$«tive_±e_vÆ
(
löux_±e_t
 
±e
)

65  
±e
;

66 
	}
}

68 
ölöe
 
löux_±e_t
 
	$«tive_make_±e
(
±evÆ_t
 
vÆ
)

70  (
löux_±e_t
Ë(
vÆ
);

71 
	}
}

73 
ölöe
 
löux_±e_t
 
	$±e_£t_Êags
(
löux_±e_t
 
±e
, 
±evÆ_t
 
£t
)

75 
±evÆ_t
 
v
 = 
	`«tive_±e_vÆ
(
±e
);

77  
	`«tive_make_±e
(
v
 | 
£t
);

78 
	}
}

80 
ölöe
 
löux_±e_t
 
	$±e_mk•ecül
(
löux_±e_t
 
±e
)

82  
	`±e_£t_Êags
(
±e
, 
_PAGE_SPECIAL
);

83 
	}
}

85 
ölöe
 
	$«tive_£t_±e
(
löux_±e_t
 *
±ï
,Üöux_±e_à
±e
)

87 *
±ï
 = 
±e
;

88 
	}
}

90 
ölöe
 
	$«tive_£t_±e_©
(
mm_°ru˘
 *
mm
, 
addr
,

91 
löux_±e_t
 *
±ï
 ,Üöux_±e_à
±e
)

93 
	`«tive_£t_±e
(
±ï
, 
±e
);

94 
	}
}

96 
	#£t_±e
(
±ï
, 
±e
Ë
	`«tive_£t_±e
’ãp,Öã)

	)

97 
	#£t_±e_©
(
mm
, 
addr
, 
±ï
, 
±e
Ë
	`«tive_£t_±e_©
(mm,áddr,Öãp,Öã)

	)

98 
	#£t_pmd_©
(
mm
, 
addr
, 
pmdp
, 
pmd
Ë
	`«tive_£t_pmd_©
(mm,áddr,Ömdp,Ömd)

	)

	@src/common/linuxkpi/gplv2/include/asm/processor.h

1 #i‚de‡
_ASM_X86_PROCESSOR_H


2 
	#_ASM_X86_PROCESSOR_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/˝u„©uªs.h
>

8 
	~<machöe/˝u.h
>

10 
	s˝uöfo_x86
 {

11 
__u8
 
	mx86
;

12 
__u8
 
	mx86_víd‹
;

13 
__u8
 
	mx86_modñ
;

14 
__u8
 
	mx86_mask
;

15 #ifde‡
CONFIG_X86_32


16 
	mwp_w‹ks_ok
;

19 
	mrfu
;

20 
	m∑d0
;

21 
	m∑d1
;

24 
	mx86_ébsize
;

26 
__u8
 
	mx86_vút_bôs
;

27 
__u8
 
	mx86_phys_bôs
;

29 
__u8
 
	mx86_c‹eid_bôs
;

31 
__u32
 
	mexãnded_˝uid_Àvñ
;

33 
	m˝uid_Àvñ
;

34 
__u32
 
	mx86_ˇ∑bûôy
[
NCAPINTS
 + 
NBUGINTS
];

35 
	mx86_víd‹_id
[16];

36 
	mx86_modñ_id
[64];

38 
	mx86_ˇche_size
;

39 
	mx86_ˇche_Æignmít
;

41 
	mx86_ˇche_max_rmid
;

42 
	mx86_ˇche_occ_sˇÀ
;

43 
	mx86_powî
;

44 
	mlo›s_≥r_jiffy
;

46 
u16
 
	mx86_max_c‹es
;

47 
u16
 
	m≠icid
;

48 
u16
 
	möôül_≠icid
;

49 
u16
 
	mx86_˛Êush_size
;

51 
u16
 
	mboŸed_c‹es
;

53 
u16
 
	mphys_¥oc_id
;

55 
u16
 
	mlogiˇl_¥oc_id
;

57 
u16
 
	m˝u_c‹e_id
;

59 
u16
 
	m˝u_ödex
;

60 
u32
 
	mmi¸ocode
;

62 #i‚de‡
mb


63 
	#mb
(Ë
__asm
 
	`__vﬁ©ûe
("m„n˚;" : : : "mem‹y")

	)

65 #i‚de‡
wmb


66 
	#wmb
(Ë
__asm
 
	`__vﬁ©ûe
("s„n˚;" : : : "mem‹y")

	)

68 #i‚de‡
rmb


69 
	#rmb
(Ë
__asm
 
	`__vﬁ©ûe
("l„n˚;" : : : "mem‹y")

	)

72 
	#smp_mb
(Ë
	`mb
()

	)

73 
	#smp_wmb
(Ë
	`wmb
()

	)

74 
	#smp_rmb
(Ë
	`rmb
()

	)

76 
__Æways_ölöe
 
	$˝u_ªœx
()

78 
	`˝u_•öwaô
();

79 
	}
}

81 
	#˝u_ªœx_lowœãncy
(Ë
	`˝u_ªœx
()

	)

83 
	#smp_ªad_b¨rõr_dïíds
(Ëdÿ{} 0)

	)

85 
˝uöfo_x86
 
boŸ_˝u_d©a
;

87 
	#__smp_°‹e_mb
(
v¨
, 
vÆue
Ëdÿ{ ()
	`xchg
(&(v¨), vÆue); } 0)

	)

89 
	#smp_°‹e_mb
 
__smp_°‹e_mb


	)

	@src/common/linuxkpi/gplv2/include/asm/required-features.h

1 #i‚de‡
_ASM_X86_REQUIRED_FEATURES_H


2 
	#_ASM_X86_REQUIRED_FEATURES_H


	)

14 #i‚de‡
CONFIG_MATH_EMULATION


15 
	#NEED_FPU
 (1<<(
X86_FEATURE_FPU
 & 31))

	)

17 
	#NEED_FPU
 0

	)

20 #i‡
deföed
(
CONFIG_X86_PAE
Ë|| deföed(
CONFIG_X86_64
)

21 
	#NEED_PAE
 (1<<(
X86_FEATURE_PAE
 & 31))

	)

23 
	#NEED_PAE
 0

	)

26 #ifde‡
CONFIG_X86_CMPXCHG64


27 
	#NEED_CX8
 (1<<(
X86_FEATURE_CX8
 & 31))

	)

29 
	#NEED_CX8
 0

	)

32 #i‡
deföed
(
CONFIG_X86_CMOV
Ë|| deföed(
CONFIG_X86_64
)

33 
	#NEED_CMOV
 (1<<(
X86_FEATURE_CMOV
 & 31))

	)

35 
	#NEED_CMOV
 0

	)

38 #ifde‡
CONFIG_X86_USE_3DNOW


39 
	#NEED_3DNOW
 (1<<(
X86_FEATURE_3DNOW
 & 31))

	)

41 
	#NEED_3DNOW
 0

	)

44 #i‡
deföed
(
CONFIG_X86_P6_NOP
Ë|| deföed(
CONFIG_X86_64
)

45 
	#NEED_NOPL
 (1<<(
X86_FEATURE_NOPL
 & 31))

	)

47 
	#NEED_NOPL
 0

	)

50 #ifde‡
CONFIG_MATOM


51 
	#NEED_MOVBE
 (1<<(
X86_FEATURE_MOVBE
 & 31))

	)

53 
	#NEED_MOVBE
 0

	)

56 #ifde‡
CONFIG_X86_64


57 #ifde‡
CONFIG_PARAVIRT


59 
	#NEED_PSE
 0

	)

60 
	#NEED_PGE
 0

	)

62 
	#NEED_PSE
 (1<<(
X86_FEATURE_PSE
Ë& 31)

	)

63 
	#NEED_PGE
 (1<<(
X86_FEATURE_PGE
Ë& 31)

	)

65 
	#NEED_MSR
 (1<<(
X86_FEATURE_MSR
 & 31))

	)

66 
	#NEED_FXSR
 (1<<(
X86_FEATURE_FXSR
 & 31))

	)

67 
	#NEED_XMM
 (1<<(
X86_FEATURE_XMM
 & 31))

	)

68 
	#NEED_XMM2
 (1<<(
X86_FEATURE_XMM2
 & 31))

	)

69 
	#NEED_LM
 (1<<(
X86_FEATURE_LM
 & 31))

	)

71 
	#NEED_PSE
 0

	)

72 
	#NEED_MSR
 0

	)

73 
	#NEED_PGE
 0

	)

74 
	#NEED_FXSR
 0

	)

75 
	#NEED_XMM
 0

	)

76 
	#NEED_XMM2
 0

	)

77 
	#NEED_LM
 0

	)

80 
	#REQUIRED_MASK0
 (
NEED_FPU
|
NEED_PSE
|
NEED_MSR
|
NEED_PAE
|\

81 
NEED_CX8
|
NEED_PGE
|
NEED_FXSR
|
NEED_CMOV
|\

82 
NEED_XMM
|
NEED_XMM2
)

	)

83 
	#SSE_MASK
 (
NEED_XMM
|
NEED_XMM2
)

	)

85 
	#REQUIRED_MASK1
 (
NEED_LM
|
NEED_3DNOW
)

	)

87 
	#REQUIRED_MASK2
 0

	)

88 
	#REQUIRED_MASK3
 (
NEED_NOPL
)

	)

89 
	#REQUIRED_MASK4
 (
NEED_MOVBE
)

	)

90 
	#REQUIRED_MASK5
 0

	)

91 
	#REQUIRED_MASK6
 0

	)

92 
	#REQUIRED_MASK7
 0

	)

93 
	#REQUIRED_MASK8
 0

	)

94 
	#REQUIRED_MASK9
 0

	)

95 
	#REQUIRED_MASK10
 0

	)

96 
	#REQUIRED_MASK11
 0

	)

97 
	#REQUIRED_MASK12
 0

	)

98 
	#REQUIRED_MASK13
 0

	)

99 
	#REQUIRED_MASK14
 0

	)

100 
	#REQUIRED_MASK15
 0

	)

101 
	#REQUIRED_MASK16
 0

	)

	@src/common/linuxkpi/gplv2/include/asm/set_memory.h

1 #i‚de‡
_ASM_SET_MEMORY_H


2 
	#_ASM_SET_MEMORY_H


	)

4 
£t_mem‹y_wb
(
addr
, 
num∑ges
);

5 
£t_mem‹y_uc
(
addr
, 
num∑ges
);

6 
£t_mem‹y_wc
(
addr
, 
num∑ges
);

	@src/common/linuxkpi/gplv2/include/linux/acpi.h

20 #i‡
deföed
(
__i386__
Ë|| deföed(
__amd64__
)

21 #i‚de‡
_LINUX_GPLV2_ACPI_H_


22 
	#_LINUX_GPLV2_ACPI_H_


	)

24 
	~<löux/î∫o.h
>

25 
	~<löux/ªsour˚_ext.h
>

26 
	~<löux/devi˚.h
>

27 
	~<löux/¥›îty.h
>

28 
	~<löux/nŸifõr.h
>

29 
	~<löux/li°.h
>

30 
	~<löux/mod_devi˚èbÀ.h
>

32 
	~<c⁄åib/dev/a˝iˇ/ö˛ude/a˝i.h
>

33 
	~<a˝i/a˝i.h
>

34 
	~<a˝i/a˝i_bus.h
>

35 
	~<a˝i/a˝i_drivîs.h
>

37 
ölöe
 
a˝i_h™dÀ
 
	$a˝i_devi˚_h™dÀ
(
a˝i_devi˚
 *
adev
)

39  
adev
 ?ádev->
h™dÀ
 : 
NULL
;

40 
	}
}

42 
	#ACPI_COMPANION
(
dev
Ë
	`to_a˝i_devi˚_node
((dev)->
fwnode
)

	)

43 
	#ACPI_HANDLE_GET
(
dev
Ë
	`a˝i_devi˚_h™dÀ
(
	`ACPI_COMPANION
(dev))

	)

44 
	#ACPI_HANDLE
(
dev
Ë
	`a˝i_devi˚_h™dÀ
(
	`ACPI_COMPANION
(dev))

	)

46 
	#ACPI_VIDEO_OUTPUT_SWITCHING
 0x0001

	)

47 
	#ACPI_VIDEO_DEVICE_POSTING
 0x0002

	)

48 
	#ACPI_VIDEO_ROM_AVAILABLE
 0x0004

	)

49 
	#ACPI_VIDEO_BACKLIGHT
 0x0008

	)

50 
	#ACPI_VIDEO_BACKLIGHT_FORCE_VENDOR
 0x0010

	)

51 
	#ACPI_VIDEO_BACKLIGHT_FORCE_VIDEO
 0x0020

	)

52 
	#ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VENDOR
 0x0040

	)

53 
	#ACPI_VIDEO_OUTPUT_SWITCHING_FORCE_VIDEO
 0x0080

	)

54 
	#ACPI_VIDEO_BACKLIGHT_DMI_VENDOR
 0x0100

	)

55 
	#ACPI_VIDEO_BACKLIGHT_DMI_VIDEO
 0x0200

	)

56 
	#ACPI_VIDEO_OUTPUT_SWITCHING_DMI_VENDOR
 0x0400

	)

57 
	#ACPI_VIDEO_OUTPUT_SWITCHING_DMI_VIDEO
 0x0800

	)

59 
a˝i_is_video_devi˚
(
a˝i_h™dÀ
 
h™dÀ
);

61 
ölöe
 c⁄° *
	$a˝i_dev_«me
(
a˝i_devi˚
 *
adev
)

63  
	`dev_«me
(&
adev
->
dev
);

64 
	}
}

66 
a˝i_sˇn_dr›_devi˚
(
a˝i_h™dÀ
 
h™dÀ
, *
c⁄ãxt
);

69 
pci_dev
 *
a˝i_gë_pci_dev
(
a˝i_h™dÀ
 
h™dÀ
);

71 
a˝i_bus_gë_devi˚
(
a˝i_h™dÀ
 
h™dÀ
, 
a˝i_devi˚
 **
devi˚
);

	@src/common/linuxkpi/gplv2/include/linux/agp_backend.h

1 #i‚de‡
_LINUX_GPLV2_AGP_BACKEND_H_


2 
	#_LINUX_GPLV2_AGP_BACKEND_H_


	)

4 
	sagp_vîsi⁄
 {

5 
u16
 
	mmaj‹
;

6 
u16
 
	mmö‹
;

9 
	sagp_kîn_öfo
 {

10 
agp_vîsi⁄
 
	mvîsi⁄
;

11 #ifde‡
__löux__


12 
pci_dev
 *
	mdevi˚
;

13 
chù£t_ty≥
 
	mchù£t
;

15 
u16
 
	mvíd‹
;

16 
u16
 
	mdevi˚
;

18 
	mmode
;

19 
	m≠î_ba£
;

20 
size_t
 
	m≠î_size
;

21 
	mmax_mem‹y
;

22 
	mcuºít_mem‹y
;

23 
boﬁ
 
	mˇ¡_u£_≠îtuª
;

24 
	m∑ge_mask
;

25 #ifde‡
__löux__


26 c⁄° 
vm_›î©i⁄s_°ru˘
 *
	mvm_›s
;

	@src/common/linuxkpi/gplv2/include/linux/anon_inodefs.h

1 #i‚de‡
_LINUX_GPLV2_ANON_INODEFS_H_


2 
	#_LINUX_GPLV2_ANON_INODEFS_H_


	)

4 
	~<löux/fs.h
>

5 
	~<löux/fûe.h
>

6 
	~<löux/ty≥s.h
>

8 
díåy
 *
™⁄_öodefs_¸óã_fûe
(c⁄° *
«me
, 
umode_t
 
mode
,

9 
díåy
 *
∑ª¡
, *
d©a
,

10 c⁄° 
fûe_›î©i⁄s
 *
f›s
);

12 
™⁄_öodefs_ªmove
(
díåy
 *dentry);

	@src/common/linuxkpi/gplv2/include/linux/anon_inodes.h

1 #i‚de‡
_LINUX_GPLV2_ANON_INODES_H_


2 
	#_LINUX_GPLV2_ANON_INODES_H_


	)

4 
	~<löux/fs.h
>

5 
	~<löux/fûe.h
>

6 
	~<löux/ty≥s.h
>

9 
fûe
 *

10 
™⁄_öode_gëfûe
(c⁄° *
«me
, c⁄° 
fûe_›î©i⁄s
 *
f›s
,

11 *
¥iv
, 
Êags
);

13 
™⁄_öode_ªÀa£
(
fûe
 *file);

	@src/common/linuxkpi/gplv2/include/linux/async.h

13 #i‚de‡
_LINUX_GPLV2_ASYNC_H_


14 
	#_LINUX_GPLV2_ASYNC_H_


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/li°.h
>

18 
	~<löux/w‹kqueue.h
>

20 
u64
 
	tasync_cookõ_t
;

22 (*
	tasync_func_t
Ë(*
	td©a
, 
	tasync_cookõ_t
 
	tcookõ
);

24 
	sasync_domaö
 {

25 
li°_hód
 
≥ndög
;

26 
ªgi°îed
:1;

29 
	sasync_íåy
 {

30 
li°_hód
 
domaö_li°
;

31 
li°_hód
 
globÆ_li°
;

32 
w‹k_°ru˘
 
w‹k
;

33 
async_cookõ_t
 
cookõ
;

34 
async_func_t
 
func
;

35 *
d©a
;

36 
async_domaö
 *
domaö
;

39 
async_cookõ_t
 
	`async_scheduÀ
(
async_func_t
 
func
, *
d©a
);

41 
ölöe
 

42 
	$async_synchr⁄ize_fuŒ
()

44 
	`UNIMPLEMENTED
();

45 
	}
}

47 
ölöe
 

48 
	$async_synchr⁄ize_cookõ
(
async_cookõ_t
 
cookõ
)

50 
	`UNIMPLEMENTED
();

51 
	}
}

53 
ölöe
 
boﬁ


54 
	$cuºít_is_async
()

56 
	`UNIMPLEMENTED
();

57  (
Ál£
);

58 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/backlight.h

8 #i‚de‡
_LINUX_BACKLIGHT_H


9 
	#_LINUX_BACKLIGHT_H


	)

11 
	~<löux/devi˚.h
>

12 
	~<löux/fb.h
>

13 
	~<löux/muãx.h
>

14 
	~<löux/nŸifõr.h
>

31 
	ebacklight_upd©e_ªas⁄
 {

32 
	mBACKLIGHT_UPDATE_HOTKEY
,

33 
	mBACKLIGHT_UPDATE_SYSFS
,

36 
	ebacklight_ty≥
 {

37 
	mBACKLIGHT_RAW
 = 1,

38 
	mBACKLIGHT_PLATFORM
,

39 
	mBACKLIGHT_FIRMWARE
,

40 
	mBACKLIGHT_TYPE_MAX
,

43 
	ebacklight_nŸifiˇti⁄
 {

44 
	mBACKLIGHT_REGISTERED
,

45 
	mBACKLIGHT_UNREGISTERED
,

48 
	gbacklight_devi˚
;

49 
	glöux_fb_öfo
;

51 
	sbacklight_›s
 {

52 
	m›ti⁄s
;

54 
	#BL_CORE_SUSPENDRESUME
 (1 << 0)

	)

57 (*
	mupd©e_°©us
)(
	mbacklight_devi˚
 *);

60 (*
	mgë_brighäess
)(
	mbacklight_devi˚
 *);

63 (*
	mcheck_fb
)(
	mbacklight_devi˚
 *, 
	mlöux_fb_öfo
 *);

67 
	sbacklight_¥›îtõs
 {

69 
	mbrighäess
;

71 
	mmax_brighäess
;

74 
	mpowî
;

77 
	mfb_bœnk
;

79 
backlight_ty≥
 
	mty≥
;

82 
	m°©e
;

84 
	#BL_CORE_SUSPENDED
 (1 << 0Ë

	)

85 
	#BL_CORE_FBBLANK
 (1 << 1Ë

	)

86 
	#BL_CORE_DRIVER4
 (1 << 28Ë

	)

87 
	#BL_CORE_DRIVER3
 (1 << 29Ë

	)

88 
	#BL_CORE_DRIVER2
 (1 << 30Ë

	)

89 
	#BL_CORE_DRIVER1
 (1 << 31Ë

	)

93 
	sbacklight_devi˚
 {

95 
backlight_¥›îtõs
 
	m¥›s
;

98 
muãx
 
	mupd©e_lock
;

103 
muãx
 
	m›s_lock
;

104 c⁄° 
backlight_›s
 *
	m›s
;

107 
nŸifõr_block
 
	mfb_nŸif
;

110 
li°_hód
 
	míåy
;

112 
devi˚
 
	mdev
;

115 
boﬁ
 
	mfb_bl_⁄
[
FB_MAX
];

117 
	mu£_cou¡
;

120 
ölöe
 
	$backlight_upd©e_°©us
(
backlight_devi˚
 *
bd
)

122 
ªt
 = -
ENOENT
;

124 
	`muãx_lock
(&
bd
->
upd©e_lock
);

125 i‡(
bd
->
›s
 && bd->›s->
upd©e_°©us
)

126 
ªt
 = 
bd
->
›s
->
	`upd©e_°©us
(bd);

127 
	`muãx_u∆ock
(&
bd
->
upd©e_lock
);

129  
ªt
;

130 
	}
}

132 
backlight_devi˚
 *
backlight_devi˚_ªgi°î
(c⁄° *
«me
,

133 
devi˚
 *
dev
, *
devd©a
, c⁄° 
backlight_›s
 *
›s
,

134 c⁄° 
backlight_¥›îtõs
 *
¥›s
);

135 
backlight_devi˚
 *
devm_backlight_devi˚_ªgi°î
(

136 
devi˚
 *
dev
, c⁄° *
«me
, devi˚ *
∑ª¡
,

137 *
devd©a
, c⁄° 
backlight_›s
 *
›s
,

138 c⁄° 
backlight_¥›îtõs
 *
¥›s
);

139 
backlight_devi˚_uƒegi°î
(
backlight_devi˚
 *
bd
);

140 
devm_backlight_devi˚_uƒegi°î
(
devi˚
 *
dev
,

141 
backlight_devi˚
 *
bd
);

142 
backlight_f‹˚_upd©e
(
backlight_devi˚
 *
bd
,

143 
backlight_upd©e_ªas⁄
 
ªas⁄
);

144 
boﬁ
 
backlight_devi˚_ªgi°îed
(
backlight_ty≥
 
ty≥
);

145 
backlight_ªgi°î_nŸifõr
(
nŸifõr_block
 *
nb
);

146 
backlight_uƒegi°î_nŸifõr
(
nŸifõr_block
 *
nb
);

148 
	#to_backlight_devi˚
(
obj
Ë
	`c⁄èöî_of
(obj, 
backlight_devi˚
, 
dev
)

	)

150 
ölöe
 * 
	$bl_gë_d©a
(
backlight_devi˚
 *
bl_dev
)

152  
	`dev_gë_drvd©a
(&
bl_dev
->
dev
);

153 
	}
}

155 
	sgíîic_bl_öfo
 {

156 c⁄° *
	m«me
;

157 
	mmax_öãnsôy
;

158 
	mdeÁu…_öãnsôy
;

159 
	mlimô_mask
;

160 (*
	m£t_bl_öãnsôy
)(
	möãnsôy
);

161 (*
	mkick_b©ãry
)();

164 #ifde‡
CONFIG_OF


165 
backlight_devi˚
 *
of_föd_backlight_by_node
(
devi˚_node
 *
node
);

167 
ölöe
 
backlight_devi˚
 *

168 
	$of_föd_backlight_by_node
(
devi˚_node
 *
node
)

170  
NULL
;

171 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/capability.h

1 #i‚de‡
__LINUX_CAPABILITY_H_


2 
	#__LINUX_CAPABILITY_H_


	)

4 
	~<sys/ty≥s.h
>

5 
	~<sys/∑øm.h
>

6 
	~<sys/sy°m.h
>

7 
	~<sys/¥oc.h
>

8 
	~<sys/¥iv.h
>

10 
	#fûe_ns_ˇ∑bÀ
(
a
, 
b
, 
c
Ë(1)

	)

12 
	e__lkpi_ˇ∑bûôõs
 {

13 
	mCAP_SYS_ADMIN
,

14 
	mCAP_SYS_NICE


17 
ölöe
 
boﬁ


18 
	$ˇ∑bÀ
(
__lkpi_ˇ∑bûôõs
 
ˇp
)

21 
ˇp
) {

22 
CAP_SYS_ADMIN
:

23  (
	`¥iv_check
(
cuπhªad
, 
PRIV_DRIVER
) == 0);

25 
CAP_SYS_NICE
:

27  (
	`¥iv_check
(
cuπhªad
, 
PRIV_DRIVER
) == 0);

30 
	`∑nic
("%s: unh™dÀd c≠abûôy: %0x", 
__func__
, 
ˇp
);

31  (
Ál£
);

33 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/circ_buf.h

5 #i‚de‡
_LINUX_CIRC_BUF_H


6 
	#_LINUX_CIRC_BUF_H
 1

	)

8 
	scúc_buf
 {

9 *
	mbuf
;

10 
	mhód
;

11 
	mèû
;

15 
	#CIRC_CNT
(
hód
,
èû
,
size
Ë(((hódË- (èû)Ë& ((size)-1))

	)

20 
	#CIRC_SPACE
(
hód
,
èû
,
size
Ë
	`CIRC_CNT
(—aû),((hód)+1),(size))

	)

25 
	#CIRC_CNT_TO_END
(
hód
,
èû
,
size
) \

26 ({
íd
 = (
size
Ë- (
èû
); \

27 
n
 = ((
hód
Ë+ 
íd
Ë& ((
size
)-1); \

28 
n
 < 
íd
 ?Ç :Énd;})

	)

31 
	#CIRC_SPACE_TO_END
(
hód
,
èû
,
size
) \

32 ({
íd
 = (
size
Ë- 1 - (
hód
); \

33 
n
 = (
íd
 + (
èû
)Ë& ((
size
)-1); \

34 
n
 <
íd
 ?Ç :Énd+1;})

	)

	@src/common/linuxkpi/gplv2/include/linux/compiler.h

1 #i‚de‡
_LINUX_GPLV2_COMPILER_H_


2 
	#_LINUX_GPLV2_COMPILER_H_


	)

4 #ö˛ude_√xà<
löux
/
compûî
.
h
>

6 
	~<sys/sy¶og.h
>

8 #i‚de‡
PRINT_UNIMPLEMENTED


9 
	#PRINT_UNIMPLEMENTED
 1

	)

12 
	#UNIMPLEMENTED_ONCE
() do { \

13 
£í
 = 0; \

15 i‡(!
£í
 && 
PRINT_UNIMPLEMENTED
) { \

16 
	`log
(
LOG_WARNING
, \

18 
__FUNCTION__
); \

19 
£í
 = 1; \

21 } 0)

	)

23 
	#DODGY_ONCE
() do { \

24 
£í
 = 0; \

26 i‡(!
£í
 && 
PRINT_UNIMPLEMENTED
) { \

27 
	`log
(
LOG_WARNING
, \

29 
__FUNCTION__
); \

30 
£í
 = 1; \

32 } 0)

	)

34 #unde‡
UNIMPLEMENTED


35 
	#UNIMPLEMENTED
(Ë
	`UNIMPLEMENTED_ONCE
()

	)

36 
	#WARN_NOT
(Ë
	`UNIMPLEMENTED_ONCE
()

	)

37 
	#DODGY
(Ë
	`DODGY_ONCE
()

	)

39 
	#uƒóchabÀ
(Ë
	`__uƒóchabÀ
()

	)

	@src/common/linuxkpi/gplv2/include/linux/component.h

14 #i‚de‡
_LINUX_GPLV2_COMPONENT_H_


15 
	#_LINUX_GPLV2_COMPONENT_H_


	)

17 
	~<löux/°ddef.h
>

18 
	~<löux/devi˚.h
>

20 
muãx
 
comp⁄ít_muãx
;

22 
li°_hód
 
löux_comp⁄ít_li°
;

23 
li°_hód
 
löux_comp⁄ít_ma°îs
;

25 
	glöux_comp⁄ít
;

27 
	scomp⁄ít_ma°î_›s
 {

28 (*
	mböd
)(
devi˚
 *
	mma°î
);

29 (*
	munböd
)(
devi˚
 *
	mma°î
);

32 
	scomp⁄ít_›s
 {

33 (*
	mböd
)(
devi˚
 *
	mcomp
, devi˚ *
	mma°î
,

34 *
	mma°î_d©a
);

35 (*
	munböd
)(
devi˚
 *
	mcomp
, devi˚ *
	mma°î
,

36 *
	mma°î_d©a
);

39 
	slöux_comp⁄ít_m©ch_¨øy
 {

40 *
	md©a
;

41 (*
	mcom∑ª
)(
	mdevi˚
 *, *);

42 (*
	mªÀa£
)(
	mdevi˚
 *, *);

43 
löux_comp⁄ít
 *
	mcomp⁄ít
;

44 
boﬁ
 
	mdu∂iˇã
;

47 
	slöux_comp⁄ít_m©ch
 {

48 
size_t
 
	mÆloc
;

49 
size_t
 
	mnum
;

50 
löux_comp⁄ít_m©ch_¨øy
 *
	mcom∑ª
;

53 
	slöux_comp⁄ít_ma°î
 {

54 
li°_hód
 
	mnode
;

55 
boﬁ
 
	mbound
;

57 c⁄° 
comp⁄ít_ma°î_›s
 *
	m›s
;

58 
devi˚
 *
	mdev
;

59 
löux_comp⁄ít_m©ch
 *
	mm©ch
;

62 
	slöux_comp⁄ít
 {

63 
li°_hód
 
	mnode
;

64 
löux_comp⁄ít_ma°î
 *
	mma°î
;

65 
boﬁ
 
	mbound
;

67 c⁄° 
comp⁄ít_›s
 *
	m›s
;

68 
devi˚
 *
	mdev
;

71 
ölöe
 

72 
	$ªmove_comp⁄ít
(
löux_comp⁄ít_ma°î
 *
ma°î
, 
löux_comp⁄ít
 *
c
)

74 
size_t
 
i
;

77 
i
 = 0; i < 
ma°î
->
m©ch
->
num
; i++)

78 i‡(
ma°î
->
m©ch
->
com∑ª
[
i
].
comp⁄ít
 =
c
)

79 
ma°î
->
m©ch
->
com∑ª
[
i
].
comp⁄ít
 = 
NULL
;

80 
	}
}

83 
ölöe
 
löux_comp⁄ít
 *

84 
föd_comp⁄ít
(
löux_comp⁄ít_ma°î
 *
ma°î
,

85 (*
com∑ª
)(
devi˚
 *, *), *
com∑ª_d©a
)

87 
löux_comp⁄ít
 *
c
;

89 
	`li°_f‹_óch_íåy
(
c
, &
löux_comp⁄ít_li°
, 
node
) {

90 i‡(
c
->
ma°î
 && c->master != master)

93 i‡(
	`com∑ª
(
c
->
dev
, 
com∑ª_d©a
))

94  
c
;

97  
NULL
;

98 
	}
}

101 
ölöe
 

102 
	$föd_comp⁄íts
(
löux_comp⁄ít_ma°î
 *
ma°î
)

104 
löux_comp⁄ít_m©ch
 *
m©ch
 = 
ma°î
->match;

105 
size_t
 
i
;

106 
ªt
 = 0;

112 
i
 = 0; i < 
m©ch
->
num
; i++) {

113 
löux_comp⁄ít_m©ch_¨øy
 *
mc
 = &
m©ch
->
com∑ª
[
i
];

114 
löux_comp⁄ít
 *
c
;

116 
	`dev_dbg
(
ma°î
->
dev
, "Lookög f‹ comp⁄íà%zu\n", 
i
);

118 i‡(
m©ch
->
com∑ª
[
i
].
comp⁄ít
)

121 
c
 = 
	`föd_comp⁄ít
(
ma°î
, 
mc
->
com∑ª
, mc->
d©a
);

122 i‡(!
c
) {

123 
ªt
 = -
ENXIO
;

127 
	`dev_dbg
(
ma°î
->
dev
, "found comp⁄íà%s, du∂iˇã %u\n", 
	`dev_«me
(
c
->dev), !!c->master);

130 
m©ch
->
com∑ª
[
i
].
du∂iˇã
 = !!
c
->
ma°î
;

131 
m©ch
->
com∑ª
[
i
].
comp⁄ít
 = 
c
;

132 
c
->
ma°î
 = master;

134  
ªt
;

135 
	}
}

137 
ölöe
 

138 
	$åy_to_brög_up_ma°î
(
löux_comp⁄ít_ma°î
 *
ma°î
,

139 
löux_comp⁄ít
 *
comp⁄ít
)

141 
ªt
;

143 
	`dev_dbg
(
ma°î
->
dev
, "tryingÅo bring up master\n");

145 i‡(
	`föd_comp⁄íts
(
ma°î
)) {

146 
	`dev_dbg
(
ma°î
->
dev
, "master has incomplete components\n");

150 i‡(
comp⁄ít
 && comp⁄ít->
ma°î
 != master) {

151 
	`dev_dbg
(
ma°î
->
dev
, "master isÇot forÅhis component (%s)\n",

152 
	`dev_«me
(
comp⁄ít
->
dev
));

156 i‡(!
	`devªs_›í_group
(
ma°î
->
dev
, 
NULL
, 
GFP_KERNEL
))

157  -
ENOMEM
;

160 
ªt
 = 
ma°î
->
›s
->
	`böd
(ma°î->
dev
);

161 i‡(
ªt
 < 0) {

162 
	`devªs_ªÀa£_group
(
ma°î
->
dev
, 
NULL
);

163 
	`dev_öfo
(
ma°î
->
dev
, "ma°î böd faûed: %d\n", 
ªt
);

164  
ªt
;

167 
ma°î
->
bound
 = 
åue
;

169 
	}
}

171 
ölöe
 

172 
	$åy_to_brög_up_ma°îs
(
löux_comp⁄ít
 *
comp⁄ít
)

174 
löux_comp⁄ít_ma°î
 *
m
;

175 
ªt
 = 0;

177 
	`li°_f‹_óch_íåy
(
m
, &
löux_comp⁄ít_ma°îs
, 
node
) {

178 i‡(!
m
->
bound
) {

179 
ªt
 = 
	`åy_to_brög_up_ma°î
(
m
, 
comp⁄ít
);

180 i‡(
ªt
 != 0)

185  
ªt
;

186 
	}
}

188 
ölöe
 

189 
	$èke_down_ma°î
(
löux_comp⁄ít_ma°î
 *
ma°î
)

191 i‡(
ma°î
->
bound
) {

192 
ma°î
->
›s
->
	`unböd
(ma°î->
dev
);

193 
	`devªs_ªÀa£_group
(
ma°î
->
dev
, 
NULL
);

194 
ma°î
->
bound
 = 
Ál£
;

196 
	}
}

198 
ölöe
 

199 
	$comp⁄ít_add
(
devi˚
 *
dev
, c⁄° 
comp⁄ít_›s
 *
›s
)

201 
löux_comp⁄ít
 *
comp⁄ít
;

202 
ªt
;

204 
comp⁄ít
 = 
	`kzÆloc
((*comp⁄ít), 
GFP_KERNEL
);

205 i‡(!
comp⁄ít
)

206  -
ENOMEM
;

208 
comp⁄ít
->
›s
 = ops;

209 
comp⁄ít
->
dev
 = dev;

211 
	`dev_dbg
(
dev
, "addög comp⁄íà(›†%ps)\n", 
›s
);

213 
	`muãx_lock
(&
comp⁄ít_muãx
);

214 
	`li°_add_èû
(&
comp⁄ít
->
node
, &
löux_comp⁄ít_li°
);

216 
ªt
 = 
	`åy_to_brög_up_ma°îs
(
comp⁄ít
);

217 i‡(
ªt
 < 0) {

218 i‡(
comp⁄ít
->
ma°î
)

219 
	`ªmove_comp⁄ít
(
comp⁄ít
->
ma°î
, component);

220 
	`li°_dñ
(&
comp⁄ít
->
node
);

222 
	`k‰ì
(
comp⁄ít
);

224 
	`muãx_u∆ock
(&
comp⁄ít_muãx
);

226  (
ªt
 < 0 ?Ñet : 0);

227 
	}
}

229 
ölöe
 

230 
	$comp⁄ít_dñ
(
devi˚
 *
dev
, c⁄° 
comp⁄ít_›s
 *
›s
)

232 
löux_comp⁄ít
 *
c
, *
comp⁄ít
 = 
NULL
;

234 
	`muãx_lock
(&
comp⁄ít_muãx
);

235 
	`li°_f‹_óch_íåy
(
c
, &
löux_comp⁄ít_li°
, 
node
)

236 i‡(
c
->
dev
 =dev && c->
›s
 == ops) {

237 
	`li°_dñ
(&
c
->
node
);

238 
comp⁄ít
 = 
c
;

242 i‡(
comp⁄ít
 && comp⁄ít->
ma°î
) {

243 
	`èke_down_ma°î
(
comp⁄ít
->
ma°î
);

244 
	`ªmove_comp⁄ít
(
comp⁄ít
->
ma°î
, component);

247 
	`muãx_u∆ock
(&
comp⁄ít_muãx
);

249 
	`WARN_ON
(!
comp⁄ít
);

250 
	`k‰ì
(
comp⁄ít
);

251 
	}
}

253 
comp⁄ít_böd_Æl
(
devi˚
 *
ma°î
, *
ma°î_d©a
);

254 
comp⁄ít_unböd_Æl
(
devi˚
 *
ma°î
, *
ma°î_d©a
);

257 
ölöe
 

258 
	$comp⁄ít_ma°î_dñ
(
devi˚
 *
dev
, c⁄° 
comp⁄ít_ma°î_›s
 *
›s
)

260 
	`UNIMPLEMENTED
();

261 
	}
}

264 
comp⁄ít_ma°î_add_wôh_m©ch
(
devi˚
 *,

265 c⁄° 
comp⁄ít_ma°î_›s
 *, 
löux_comp⁄ít_m©ch
 *);

266 
comp⁄ít_m©ch_add_ªÀa£
(
devi˚
 *
ma°î
,

267 
löux_comp⁄ít_m©ch
 **
m©ch±r
,

268 (*
ªÀa£
)(
devi˚
 *, *),

269 (*
com∑ª
)(
devi˚
 *, *), *
com∑ª_d©a
);

271 
ölöe
 
	`comp⁄ít_m©ch_add
(
devi˚
 *
ma°î
,

272 
löux_comp⁄ít_m©ch
 **
m©ch±r
,

273 (*
com∑ª
)(
devi˚
 *, *), *
com∑ª_d©a
)

275 
	`comp⁄ít_m©ch_add_ªÀa£
(
ma°î
, 
m©ch±r
, 
NULL
, 
com∑ª
,

276 
com∑ª_d©a
);

277 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/console.h

14 #i‚de‡
_LINUX_CONSOLE_H_


15 
	#_LINUX_CONSOLE_H_
 1

	)

16 
	~<löux/ty≥s.h
>

20 
	#VESA_NO_BLANKING
 0

	)

21 
	#VESA_VSYNC_SUSPEND
 1

	)

22 
	#VESA_HSYNC_SUSPEND
 2

	)

23 
	#VESA_POWERDOWN
 3

	)

25 #ifde‡
CONFIG_VGA_CONSOLE


26 
boﬁ
 
vgac⁄_ãxt_f‹˚
();

28 
ölöe
 
boﬁ
 
	$vgac⁄_ãxt_f‹˚
(Ë{  
Ál£
; 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/cpufreq.h

26 #i‚de‡
_LINUX_CPUFREQ_H_


27 
	#_LINUX_CPUFREQ_H_


	)

28 
	~<löux/nŸifõr.h
>

30 
	s˝u‰eq_˝uöfo
 {

31 
	mmax_‰eq
;

32 
	mmö_‰eq
;

33 
	må™sôi⁄_œãncy
;

37 
	s˝u‰eq_pﬁicy
 {

38 
˝u‰eq_˝uöfo
 
	m˝uöfo
;

41 
ölöe
 
˝u‰eq_pﬁicy
 *

42 
	$˝u‰eq_˝u_gë_øw
(
˝u
)

44  
NULL
;

45 
	}
}

47 
ölöe
 
˝u‰eq_pﬁicy
 *

48 
	$˝u‰eq_˝u_gë
(
˝u
)

50  
NULL
;

51 
	}
}

53 
ölöe
 

54 
	$˝u‰eq_˝u_put
(
˝u‰eq_pﬁicy
 *
pﬁicy
)

56 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/debugfs.h

15 #i‚de‡
_DEBUGFS_H_


16 
	#_DEBUGFS_H_


	)

18 
	~<löux/fs.h
>

19 
	~<löux/£q_fûe.h
>

21 
	~<löux/ty≥s.h
>

24 
debugfs_ªmove
(
díåy
 *dentry);

26 
díåy
 *
debugfs_¸óã_fûe
(c⁄° *
«me
, 
umode_t
 
mode
,

27 
díåy
 *
∑ª¡
, *
d©a
,

28 c⁄° 
fûe_›î©i⁄s
 *
f›s
);

30 
díåy
 *
debugfs_¸óã_dú
(c⁄° *
«me
, díåy *
∑ª¡
);

32 
debugfs_ªmove_ªcursive
(
díåy
 *dentry);

	@src/common/linuxkpi/gplv2/include/linux/device.h

1 #i‚def 
_LINUX_GPLV2_DEVICE_H_


2 
	#_LINUX_GPLV2_DEVICE_H_


	)

4 #ö˛ude_√xà<
löux
/
devi˚
.
h
>

6 
	~<löux/numa.h
>

7 
	~<löux/pm.h
>

9 (*
	tdr_ªÀa£_t
)(
	tdevi˚
 *
	tdev
, *
	tªs
);

10 (*
	tdr_m©ch_t
)(
	tdevi˚
 *
	tdev
, *
	tªs
, *
	tm©ch_d©a
);

12 
	sdevªs_node
 {

13 
li°_hód
 
íåy
;

14 
dr_ªÀa£_t
 
ªÀa£
;

17 
	sdevªs
 {

18 
devªs_node
 
node
;

19 
d©a
[];

22 
	sdevªs_group
 {

23 
devªs_node
 
node
[2];

24 *
id
;

25 
cﬁ‹
;

28 
ölöe
 *

29 
	$devm_kmÆloc
(
devi˚
 *
dev
, 
size_t
 
size
, 
gÂ_t
 
gÂ
)

35 
	`DODGY
();

36  (
	`kmÆloc
(
size
, 
gÂ
));

37 
	}
}

39 
ölöe
 *

40 
	$devm_kzÆloc
(
devi˚
 *
dev
, 
size_t
 
size
, 
gÂ_t
 
gÂ
)

42  
	`devm_kmÆloc
(
dev
, 
size
, 
gÂ
 | 
__GFP_ZERO
);

43 
	}
}

54 
ölöe
 

55 
	$group_›í_ªÀa£
(
devi˚
 *
dev
, *
ªs
)

58 
	}
}

60 
ölöe
 

61 
	$group_˛o£_ªÀa£
(
devi˚
 *
dev
, *
ªs
)

64 
	}
}

66 
ölöe
 
devªs_group
 *

67 
	$node_to_group
(
devªs_node
 *
node
)

69 i‡(
node
->
ªÀa£
 =&
group_›í_ªÀa£
)

70  
	`c⁄èöî_of
(
node
, 
devªs_group
,Çode[0]);

71 i‡(
node
->
ªÀa£
 =&
group_˛o£_ªÀa£
)

72  
	`c⁄èöî_of
(
node
, 
devªs_group
,Çode[1]);

73  
NULL
;

74 
	}
}

77 
ölöe
 

78 
	$add_dr
(
devi˚
 *
dev
, 
devªs_node
 *
node
)

80 
	`BUG_ON
(!
	`li°_em±y
(&
node
->
íåy
));

81 
	`li°_add_èû
(&
node
->
íåy
, &
dev
->
devªs_hód
);

82 
	}
}

85 
ölöe
 *

86 
	$devªs_›í_group
(
devi˚
 *
dev
, *
id
, 
gÂ_t
 
gÂ
)

88 
devªs_group
 *
gΩ
;

89 
Êags
 
__unu£d
;

91 
gΩ
 = 
	`kmÆloc
((*gΩ), 
gÂ
);

92 i‡(
	`u∆ikñy
(!
gΩ
))

93  
NULL
;

95 
gΩ
->
node
[0].
ªÀa£
 = &
group_›í_ªÀa£
;

96 
gΩ
->
node
[1].
ªÀa£
 = &
group_˛o£_ªÀa£
;

97 
	`INIT_LIST_HEAD
(&
gΩ
->
node
[0].
íåy
);

98 
	`INIT_LIST_HEAD
(&
gΩ
->
node
[1].
íåy
);

99 
gΩ
->
id
 = grp;

100 i‡(
id
)

101 
gΩ
->
id
 = id;

103 
	`•ö_lock_úqßve
(&
dev
->
devªs_lock
, 
Êags
);

104 
	`add_dr
(
dev
, &
gΩ
->
node
[0]);

105 
	`•ö_u∆ock_úqª°‹e
(&
dev
->
devªs_lock
, 
Êags
);

106  
gΩ
->
id
;

107 
	}
}

109 
ölöe
 
devªs_group
 *

110 
	$föd_group
(
devi˚
 *
dev
, *
id
)

112 
devªs_node
 *
node
;

114 
	`li°_f‹_óch_íåy_ªvî£
(
node
, &
dev
->
devªs_hód
, 
íåy
) {

115 
devªs_group
 *
gΩ
;

116 i‡(
node
->
ªÀa£
 !&
group_›í_ªÀa£
)

118 
gΩ
 = 
	`c⁄èöî_of
(
node
, 
devªs_group
,Çode[0]);

119 i‡(
id
) {

120 i‡(
gΩ
->
id
 == id)

121  
gΩ
;

122 } i‡(
	`li°_em±y
(&
gΩ
->
node
[1].
íåy
))

123  
gΩ
;

125  
NULL
;

126 
	}
}

128 
ölöe
 

129 
	$devªs_˛o£_group
(
devi˚
 *
dev
, *
id
)

131 
devªs_group
 *
gΩ
;

132 
Êags
 
__unu£d
;

134 
	`•ö_lock_úqßve
(&
dev
->
devªs_lock
, 
Êags
);

136 
gΩ
 = 
	`föd_group
(
dev
, 
id
);

137 i‡(
gΩ
)

138 
	`add_dr
(
dev
, &
gΩ
->
node
[1]);

140 
	`WARN_ON
(1);

142 
	`•ö_u∆ock_úqª°‹e
(&
dev
->
devªs_lock
, 
Êags
);

143 
	}
}

145 
ölöe
 

146 
	$löux_ªmove_nodes
(
devi˚
 *
dev
,

147 
li°_hód
 *
fú°
, li°_hód *
íd
,

148 
li°_hód
 *
todo
)

150 
˙t
 = 0, 
ƒ_groups
 = 0;

151 
li°_hód
 *
cur
;

153 
cur
 = 
fú°
;

154 
cur
 !
íd
) {

155 
devªs_node
 *
node
;

156 
devªs_group
 *
gΩ
;

158 
node
 = 
	`li°_íåy
(
cur
, 
devªs_node
, 
íåy
);

159 
cur
 = cur->
√xt
;

161 
gΩ
 = 
	`node_to_group
(
node
);

162 i‡(
gΩ
) {

163 
gΩ
->
cﬁ‹
 = 0;

164 
ƒ_groups
++;

166 i‡(&
node
->
íåy
 =
fú°
)

167 
fú°
 = fú°->
√xt
;

168 
	`li°_move_èû
(&
node
->
íåy
, 
todo
);

169 
˙t
++;

173 i‡(!
ƒ_groups
)

174  
˙t
;

176 
cur
 = 
fú°
;

177 
cur
 !
íd
) {

178 
devªs_node
 *
node
;

179 
devªs_group
 *
gΩ
;

181 
node
 = 
	`li°_íåy
(
cur
, 
devªs_node
, 
íåy
);

182 
cur
 = cur->
√xt
;

184 
gΩ
 = 
	`node_to_group
(
node
);

185 
	`BUG_ON
(!
gΩ
 || 
	`li°_em±y
(&gΩ->
node
[0].
íåy
));

187 
gΩ
->
cﬁ‹
++;

188 i‡(
	`li°_em±y
(&
gΩ
->
node
[1].
íåy
))

189 
gΩ
->
cﬁ‹
++;

191 
	`BUG_ON
(
gΩ
->
cﬁ‹
 <= 0 || grp->color > 2);

192 i‡(
gΩ
->
cﬁ‹
 == 2) {

193 
	`li°_move_èû
(&
gΩ
->
node
[0].
íåy
, 
todo
);

194 
	`li°_dñ_öô
(&
gΩ
->
node
[1].
íåy
);

198  
˙t
;

199 
	}
}

201 
ölöe
 

202 
	$löux_ªÀa£_nodes
(
devi˚
 *
dev
, 
li°_hód
 *
fú°
,

203 
li°_hód
 *
íd
, 
Êags
)

205 
	`LIST_HEAD
(
todo
);

206 
˙t
;

207 
devªs
 *
dr
, *
tmp
;

209 
˙t
 = 
	`löux_ªmove_nodes
(
dev
, 
fú°
, 
íd
, &
todo
);

211 
	`•ö_u∆ock_úqª°‹e
(&
dev
->
devªs_lock
, 
Êags
);

212 
	`li°_f‹_óch_íåy_ß„_ªvî£
(
dr
, 
tmp
, &
todo
, 
node
.
íåy
) {

213 
dr
->
node
.
	`ªÀa£
(
dev
, dr->
d©a
);

214 
	`k‰ì
(
dr
);

217  
˙t
;

218 
	}
}

220 
devªs_add
(
devi˚
 *
dev
, *
ªs
);

221 *
devªs_Æloc_node
(
dr_ªÀa£_t
 
ªÀa£
, 
size_t
 
size
, 
gÂ_t
 
gÂ
,

222 
nid
);

223 
devªs_‰ì
(*
ªs
);

224 
devªs_ªÀa£
(
devi˚
 *
dev
, 
dr_ªÀa£_t
 
ªÀa£
,

225 
dr_m©ch_t
 
m©ch
, *
m©ch_d©a
);

226 *
devªs_ªmove
(
devi˚
 *
dev
, 
dr_ªÀa£_t
 
ªÀa£
,

227 
dr_m©ch_t
 
m©ch
, *
m©ch_d©a
);

229 
ölöe
 *

230 
	$devªs_Æloc
(
dr_ªÀa£_t
 
ªÀa£
, 
size_t
 
size
, 
gÂ_t
 
gÂ
)

232  
	`devªs_Æloc_node
(
ªÀa£
, 
size
, 
gÂ
, 
NUMA_NO_NODE
);

233 
	}
}

235 
ölöe
 

236 
	$devªs_ªÀa£_group
(
devi˚
 *
dev
, *
id
)

238 
devªs_group
 *
gΩ
;

239 
Êags
;

240 
˙t
 = 0;

242 
	`•ö_lock_úqßve
(&
dev
->
devªs_lock
, 
Êags
);

244 
gΩ
 = 
	`föd_group
(
dev
, 
id
);

245 i‡(
gΩ
) {

246 
li°_hód
 *
fú°
 = &
gΩ
->
node
[0].
íåy
;

247 
li°_hód
 *
íd
 = &
dev
->
devªs_hód
;

249 i‡(!
	`li°_em±y
(&
gΩ
->
node
[1].
íåy
))

250 
íd
 = 
gΩ
->
node
[1].
íåy
.
√xt
;

252 
˙t
 = 
	`löux_ªÀa£_nodes
(
dev
, 
fú°
, 
íd
, 
Êags
);

254 
	`WARN_ON
(1);

255 
	`•ö_u∆ock_úqª°‹e
(&
dev
->
devªs_lock
, 
Êags
);

258  
˙t
;

259 
	}
}

274 
	~<löux/idr.h
>

276 
ida
 *
hwm⁄_id≠
;

278 
ölöe
 *

279 
	$°Ωbrk
(c⁄° *
s
, c⁄° *
b
)

281 c⁄° *
p
;

284 
p
 = 
b
; *∞!'\0' && *∞!*
s
; ++p)

286 i‡(*
p
 != '\0')

287  ((*)(
uöçå_t
)
s
);

288 } *
s
++);

290  (
NULL
);

291 
	}
}

293 
˛ass
 
	ghwm⁄_˛ass
 = {

294 .
«me
 = "hwmon",

295 .
	gow√r
 = 
THIS_MODULE
,

298 
	#HWMON_ID_PREFIX
 "hwm⁄"

	)

299 
	#HWMON_ID_FORMAT
 
HWMON_ID_PREFIX
 "%d"

	)

301 
	shwm⁄_devi˚
 {

302 c⁄° *
	m«me
;

303 
devi˚
 
	mdev
;

306 
ölöe
 
devi˚
 *

307 
	$hwm⁄_devi˚_ªgi°î_wôh_groups
(
devi˚
 *
dev
, c⁄° *
«me
,

308 *
drvd©a
,

309 c⁄° 
©åibuã_group
 **
groups
)

311 
hwm⁄_devi˚
 *
hwdev
;

312 
îr
, 
id
;

315 i‡(
«me
 && (!
	`°æí
“ameË|| 
	`°Ωbrk
(name, "-* \t\n")))

316  
	`ERR_PTR
(-
EINVAL
);

318 
id
 = 
	`ida_sim∂e_gë
(
hwm⁄_id≠
, 0, 0, 
GFP_KERNEL
);

319 i‡(
id
 < 0)

320  
	`ERR_PTR
(
id
);

322 
hwdev
 = 
	`kzÆloc
((*hwdev), 
GFP_KERNEL
);

323 i‡(
hwdev
 =
NULL
) {

324 
îr
 = -
ENOMEM
;

325 
ida_ªmove
;

328 
hwdev
->
«me
 =Çame;

329 
hwdev
->
dev
.
˛ass
 = &
hwm⁄_˛ass
;

330 
hwdev
->
dev
.
∑ª¡
 = dev;

331 
hwdev
->
dev
.
groups
 = groups;

332 
	`dev_£t_drvd©a
(&
hwdev
->
dev
, 
drvd©a
);

333 
	`dev_£t_«me
(&
hwdev
->
dev
, 
HWMON_ID_FORMAT
, 
id
);

334 
îr
 = 
	`devi˚_ªgi°î
(&
hwdev
->
dev
);

335 i‡(
îr
)

336 
‰ì
;

338  &
hwdev
->
dev
;

340 
‰ì
:

341 
	`k‰ì
(
hwdev
);

342 
ida_ªmove
:

343 
	`ida_sim∂e_ªmove
(
hwm⁄_id≠
, 
id
);

344  
	`ERR_PTR
(
îr
);

345 
	}
}

348 
ölöe
 

349 
	$hwm⁄_devi˚_uƒegi°î
(
devi˚
 *
dev
)

351 
id
;

353 i‡(
	`likñy
(
	`ssˇnf
(
	`dev_«me
(
dev
), 
HWMON_ID_FORMAT
, &
id
) == 1)) {

354 
	`devi˚_uƒegi°î
(
dev
);

355 
	`ida_sim∂e_ªmove
(
hwm⁄_id≠
, 
id
);

357 
	`devi˚_¥ötf
(
dev
->
bsddev
,

359 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/dma-buf.h

25 #i‚de‡
_LINUX_GPLV2_DMA_BUF_H_


26 
	#_LINUX_GPLV2_DMA_BUF_H_


	)

28 
	~<löux/fûe.h
>

29 
	~<löux/îr.h
>

30 
	~<löux/sˇâîli°.h
>

31 
	~<löux/li°.h
>

32 
	~<löux/dma-m≠pög.h
>

33 
	~<löux/fs.h
>

34 
	~<löux/dma-„n˚.h
>

35 
	~<löux/waô.h
>

36 
	~<löux/moduÀ.h
>

38 
	gdevi˚
;

39 
	gdma_buf
;

40 
	gdma_buf_©èchmít
;

41 
	gdma_buf_exp‹t_öfo
;

43 
dma_buf_fd
(
dma_buf
 *
dmabuf
, 
Êags
);

44 
dma_buf
 *
dma_buf_gë
(
fd
);

45 
dma_buf_put
(
dma_buf
 *
db
);

47 
dma_buf
 *
dma_buf_exp‹t
(c⁄° 
dma_buf_exp‹t_öfo
 *
exp_öfo
);

49 
	sdma_buf_exp‹t_öfo
 {

50 c⁄° *
	mexp_«me
;

51 
moduÀ
 *
	mow√r
;

52 c⁄° 
dma_buf_›s
 *
	m›s
;

53 
size_t
 
	msize
;

54 
	mÊags
;

55 
ª£rv©i⁄_obje˘
 *
	mªsv
;

56 *
	m¥iv
;

59 
	#DEFINE_DMA_BUF_EXPORT_INFO
(
a
) \

60 
dma_buf_exp‹t_öfo
 
a
 = { .
exp_«me
 = 
KBUILD_MODNAME
, \

61 .
ow√r
 = 
THIS_MODULE
 }

	)

63 
	sdma_buf_›s
 {

64 (*
	m©èch
)(
	mdma_buf
 *, 
	mdevi˚
 *,

65 
	mdma_buf_©èchmít
 *);

67 (*
	mdëach
)(
	mdma_buf
 *, 
	mdma_buf_©èchmít
 *);

73 
	msg_èbÀ
 * (*
	mm≠_dma_buf
)(
	mdma_buf_©èchmít
 *,

74 
	mdma_d©a_dúe˘i⁄
);

75 (*
	munm≠_dma_buf
)(
	mdma_buf_©èchmít
 *,

76 
	msg_èbÀ
 *,

77 
	mdma_d©a_dúe˘i⁄
);

83 (*
	mªÀa£
)(
	mdma_buf
 *);

85 (*
	mbegö_˝u_ac˚ss
)(
	mdma_buf
 *, 
	mdma_d©a_dúe˘i⁄
);

86 (*
	míd_˝u_ac˚ss
)(
	mdma_buf
 *, 
	mdma_d©a_dúe˘i⁄
);

88 *(*
	mm≠_©omic
)(
	mdma_buf
 *, );

89 (*
	munm≠_©omic
)(
	mdma_buf
 *, , *);

91 *(*
	mm≠
)(
	mdma_buf
 *, );

92 (*
	munm≠
)(
	mdma_buf
 *, , *);

94 (*
	mmm≠
)(
	mdma_buf
 *, 
vm_¨ó_°ru˘
 *
	mvma
);

96 *(*
	mvm≠
)(
	mdma_buf
 *);

97 (*
	mvunm≠
)(
	mdma_buf
 *, *
	mvaddr
);

100 #unde‡
fûe


101 
	sdma_buf
 {

102 
size_t
 
	msize
;

103 
fûe
 *
	mlöux_fûe
;

104 
li°_hód
 
	m©èchmíts
;

105 c⁄° 
dma_buf_›s
 *
	m›s
;

107 
muãx
 
	mlock
;

108 
	mvm≠pög_cou¡î
;

109 *
	mvm≠_±r
;

110 c⁄° *
	mexp_«me
;

111 
moduÀ
 *
	mow√r
;

112 
li°_hód
 
	mli°_node
;

113 *
	m¥iv
;

114 
ª£rv©i⁄_obje˘
 *
	mªsv
;

117 
waô_queue_hód_t
 
	mpﬁl
;

119 
	sdma_buf_pﬁl_cb_t
 {

120 
dma_„n˚_cb
 
	mcb
;

121 
waô_queue_hód_t
 *
	mpﬁl
;

123 
	ma˘ive
;

124 } 
	mcb_ex˛
, 
	mcb_sh¨ed
;

127 
	sdma_buf_©èchmít
 {

128 
dma_buf
 *
	mdmabuf
;

129 
devi˚
 *
	mdev
;

130 
li°_hód
 
	mnode
;

131 *
	m¥iv
;

133 
	#fûe
 
löux_fûe


	)

134 
ölöe
 

135 
	$gë_dma_buf
(
dma_buf
 *
dmabuf
)

137 
	`fhﬁd
(
dmabuf
->
fûe
);

138 
	}
}

141 
dma_buf_©èchmít
 *
dma_buf_©èch
(
dma_buf
 *
dmabuf
,

142 
devi˚
 *
dev
);

143 
dma_buf_dëach
(
dma_buf
 *
dmabuf
,

144 
dma_buf_©èchmít
 *
dmabuf_©èch
);

146 
sg_èbÀ
 *
dma_buf_m≠_©èchmít
(
dma_buf_©èchmít
 *,

147 
dma_d©a_dúe˘i⁄
);

148 
dma_buf_unm≠_©èchmít
(
dma_buf_©èchmít
 *, 
sg_èbÀ
 *,

149 
dma_d©a_dúe˘i⁄
);

	@src/common/linuxkpi/gplv2/include/linux/dma-fence-array.h

11 #i‚de‡
__LINUX_GPLV2_DMA_FENCE_ARRAY_H


12 
	#__LINUX_GPLV2_DMA_FENCE_ARRAY_H


	)

14 
	~<löux/dma-„n˚.h
>

21 
	sdma_„n˚_¨øy_cb
 {

22 
dma_„n˚_cb
 
	mcb
;

23 
dma_„n˚_¨øy
 *
	m¨øy
;

34 
	sdma_„n˚_¨øy
 {

35 
dma_„n˚
 
	mba£
;

37 
•ölock_t
 
	mlock
;

38 
	mnum_„n˚s
;

39 
©omic_t
 
	mnum_≥ndög
;

40 
dma_„n˚
 **
	m„n˚s
;

43 c⁄° 
dma_„n˚_›s
 
dma_„n˚_¨øy_›s
;

52 
ölöe
 
dma_„n˚_¨øy
 *
	$to_dma_„n˚_¨øy
(
dma_„n˚
 *
„n˚
)

54 i‡(
„n˚
->
›s
 !&
dma_„n˚_¨øy_›s
)

55  
NULL
;

57  
	`c⁄èöî_of
(
„n˚
, 
dma_„n˚_¨øy
, 
ba£
);

58 
	}
}

60 
dma_„n˚_¨øy
 *
dma_„n˚_¨øy_¸óã
(
num_„n˚s
, 
dma_„n˚
 **
„n˚s
,

61 
u64
 
c⁄ãxt
, 
£qno
,

62 
boﬁ
 
sig«l_⁄_™y
);

70 
ölöe
 
boﬁ
 
	$dma_„n˚_is_¨øy
(
dma_„n˚
 *
„n˚
)

72  
„n˚
->
›s
 =&
dma_„n˚_¨øy_›s
;

73 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/dma-fence.h

4 #i‚de‡
__LINUX_GPLV2_DMA_FENCE_H


5 
	#__LINUX_GPLV2_DMA_FENCE_H


	)

7 
	~<löux/îr.h
>

8 
	~<löux/waô.h
>

9 
	~<löux/li°.h
>

10 
	~<löux/bô›s.h
>

11 
	~<löux/kªf.h
>

12 
	~<löux/kthªad.h
>

13 
	~<löux/¥ötk.h
>

14 
	~<löux/rcupd©e.h
>

15 
	~<löux/kî√l.h
>

17 
	~<löux/com∑t.h
>

18 
	~<löux/ktime.h
>

20 
	~<sys/∑øm.h
>

21 
	~<sys/¥oc.h
>

22 
	~<sys/c⁄dv¨.h
>

24 
	gdma_„n˚
;

25 
	gdma_„n˚_cb
;

27 (*
	tdma_„n˚_func_t
)(
	tdma_„n˚
 *
	t„n˚
, 
	tdma_„n˚_cb
 *
	tcb
);

29 
	sdma_„n˚_cb
 {

30 
li°_hód
 
node
;

31 
dma_„n˚_func_t
 
func
;

34 
	sdeÁu…_waô_cb
 {

35 
dma_„n˚_cb
 
ba£
;

36 
èsk_°ru˘
 *
èsk
;

39 
	sdma_„n˚
 {

40 
kªf
 
ªfcou¡
;

41 c⁄° 
dma_„n˚_›s
 *
›s
;

42 
rcu_hód
 
rcu
;

43 
li°_hód
 
cb_li°
;

44 
•ölock_t
 *
lock
;

45 
u64
 
c⁄ãxt
;

46 
£qno
;

47 
Êags
;

48 
ktime_t
 
time°amp
;

49 
°©us
;

50 
îr‹
;

51 
li°_hód
 
chûd_li°
;

52 
li°_hód
 
a˘ive_li°
;

55 
	edma_„n˚_Êag_bôs
 {

56 
DMA_FENCE_FLAG_SIGNALED_BIT
,

57 
DMA_FENCE_FLAG_TIMESTAMP_BIT
,

58 
DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT
,

59 
DMA_FENCE_FLAG_USER_BITS
,

62 
	sdma_„n˚_›s
 {

63 c⁄° * (*
gë_drivî_«me
)(
dma_„n˚
 *
„n˚
);

64 c⁄° * (*
gë_timñöe_«me
)(
dma_„n˚
 *
„n˚
);

65 
	`boﬁ
 (*
íabÀ_sig«lög
)(
dma_„n˚
 *
„n˚
);

66 
	`boﬁ
 (*
sig«Àd
)(
dma_„n˚
 *
„n˚
);

67 sig√d (*
waô
)(
dma_„n˚
 *
„n˚
, 
boﬁ
 
öå
, sig√d 
timeout
);

68 (*
ªÀa£
)(
dma_„n˚
 *
„n˚
);

70 (*
fûl_drivî_d©a
)(
dma_„n˚
 *
„n˚
, *
d©a
, 
size
);

71 (*
„n˚_vÆue_°r
)(
dma_„n˚
 *
„n˚
, *
°r
, 
size
);

72 (*
timñöe_vÆue_°r
)(
dma_„n˚
 *
„n˚
, *
°r
, 
size
);

76 
u64
 
	`dma_„n˚_c⁄ãxt_Æloc
(
num
);

77 
	`dma_„n˚_gë_°©us
(
dma_„n˚
 *
„n˚
);

80 
ölöe
 

81 
	$dma_„n˚_‰ì
(
dma_„n˚
 *
„n˚
)

83 
	`k‰ì_rcu
(
„n˚
, 
rcu
);

84 
	}
}

86 
ölöe
 

87 
	$dma_„n˚_ªÀa£
(
kªf
 *kref)

89 
dma_„n˚
 *
„n˚
 = 
	`c⁄èöî_of
(
kªf
, dma_„n˚, 
ªfcou¡
);

91 
	`BUG_ON
(!
	`li°_em±y
(&
„n˚
->
cb_li°
));

92 i‡(
„n˚
->
›s
->
ªÀa£
)

93 
„n˚
->
›s
->
	`ªÀa£
(fence);

95 
	`k‰ì
(
„n˚
);

96 
	}
}

98 
ölöe
 

99 
	$dma_„n˚_put
(
dma_„n˚
 *
„n˚
)

101 i‡(
„n˚
)

102 
	`kªf_put
(&
„n˚
->
ªfcou¡
, 
dma_„n˚_ªÀa£
);

103 
	}
}

105 
ölöe
 
dma_„n˚
 *

106 
	$dma_„n˚_gë
(
dma_„n˚
 *
„n˚
)

108 i‡(
„n˚
)

109 
	`kªf_gë
(&
„n˚
->
ªfcou¡
);

110  (
„n˚
);

111 
	}
}

113 
ölöe
 
dma_„n˚
 *

114 
	$dma_„n˚_gë_rcu
(
dma_„n˚
 *
„n˚
)

116 i‡(
	`kªf_gë_u∆ess_zîo
(&
„n˚
->
ªfcou¡
))

117  (
„n˚
);

119  (
NULL
);

120 
	}
}

122 
ölöe
 
dma_„n˚
 *

123 
	$dma_„n˚_gë_rcu_ß„
(
dma_„n˚
 * 
__rcu
 *
„n˚p
)

126 
dma_„n˚
 *
„n˚
;

128 
„n˚
 = 
	`rcu_dîe„ªn˚
(*
„n˚p
);

129 i‡(!
„n˚
 || !
	`dma_„n˚_gë_rcu
(fence))

130  
NULL
;

132 i‡(
„n˚
 =
	`rcu_ac˚ss_poöãr
(*
„n˚p
))

133  
	`rcu_poöãr_h™doff
(
„n˚
);

135 
	`dma_„n˚_put
(
„n˚
);

137 
	}
}

139 
ölöe
 

140 
	$dma_„n˚_sig«l_locked_sub
(
dma_„n˚
 *
„n˚
)

142 
dma_„n˚_cb
 *
cur
;

144 (
cur
 = 
	`li°_fú°_íåy_‹_nuŒ
(&
„n˚
->
cb_li°
,

145 
dma_„n˚_cb
, 
node
)Ë!
NULL
) {

146 
	`li°_dñ_öô
(&
cur
->
node
);

147 
	`•ö_u∆ock
(
„n˚
->
lock
);

148 
cur
->
	`func
(
„n˚
, cur);

149 
	`•ö_lock
(
„n˚
->
lock
);

151 
	}
}

153 
ölöe
 

154 
	$dma_„n˚_sig«l_locked
(
dma_„n˚
 *
„n˚
)

156 
ªt
 = 0;

158 i‡(
	`WARN_ON
(!
„n˚
))

159  (-
EINVAL
);

161 i‡(
	`ã°_™d_£t_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
)) {

162 
ªt
 = (-
EINVAL
);

164 
„n˚
->
time°amp
 = 
	`ktime_gë
();

165 
	`£t_bô
(
DMA_FENCE_FLAG_TIMESTAMP_BIT
, &
„n˚
->
Êags
);

168 
	`dma_„n˚_sig«l_locked_sub
(
„n˚
);

169  (
ªt
);

170 
	}
}

172 
ölöe
 

173 
	$dma_„n˚_sig«l
(
dma_„n˚
 *
„n˚
)

175 i‡(!
„n˚
)

176  (-
EINVAL
);

178 i‡(
	`ã°_™d_£t_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
))

179  (-
EINVAL
);

181 
„n˚
->
time°amp
 = 
	`ktime_gë
();

182 
	`£t_bô
(
DMA_FENCE_FLAG_TIMESTAMP_BIT
, &
„n˚
->
Êags
);

184 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT
, &
„n˚
->
Êags
)) {

185 
	`•ö_lock
(
„n˚
->
lock
);

186 
	`dma_„n˚_sig«l_locked_sub
(
„n˚
);

187 
	`•ö_u∆ock
(
„n˚
->
lock
);

190 
	}
}

192 
ölöe
 

193 
	$dma_„n˚_íabÀ_sw_sig«lög
(
dma_„n˚
 *
„n˚
)

195 i‡(!
	`ã°_™d_£t_bô
(
DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT
, &
„n˚
->
Êags
)

196 && !
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
)) {

197 
	`•ö_lock
(
„n˚
->
lock
);

198 i‡(!
„n˚
->
›s
->
	`íabÀ_sig«lög
(fence))

199 
	`dma_„n˚_sig«l_locked
(
„n˚
);

200 
	`•ö_u∆ock
(
„n˚
->
lock
);

202 
	}
}

204 
ölöe
 
boﬁ


205 
	$dma_„n˚_is_sig«Àd
(
dma_„n˚
 *
„n˚
)

207 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
))

208  (
åue
);

210 i‡(
„n˚
->
›s
->
sig«Àd
 && fí˚->›s->
	`sig«Àd
(fence)) {

211 
	`dma_„n˚_sig«l
(
„n˚
);

212  (
åue
);

215  (
Ál£
);

216 
	}
}

218 
ölöe
 
boﬁ


219 
	$dma_„n˚_is_sig«Àd_locked
(
dma_„n˚
 *
„n˚
)

221 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
))

222  (
åue
);

224 i‡(
„n˚
->
›s
->
sig«Àd
 && fí˚->›s->
	`sig«Àd
(fence)) {

225 
	`dma_„n˚_sig«l_locked
(
„n˚
);

226  (
åue
);

229  (
Ál£
);

230 
	}
}

232 
ölöe
 

233 
	$dma_„n˚_gë_°©us_locked
(
dma_„n˚
 *
„n˚
)

235 i‡(
	`dma_„n˚_is_sig«Àd_locked
(
„n˚
))

236  (
„n˚
->
îr‹
 ?: 1);

239 
	}
}

241 
ölöe
 signed 

242 
	$dma_„n˚_waô_timeout
(
dma_„n˚
 *
„n˚
, 
boﬁ
 
öå
, sig√d 
timeout
)

246 
timeout
 = ()timeout;

248 i‡(
	`WARN_ON
(
timeout
 < 0))

249  (-
EINVAL
);

251 i‡(
timeout
 == 0)

252  (
	`dma_„n˚_is_sig«Àd
(
„n˚
));

254  (
„n˚
->
›s
->
	`waô
(„n˚, 
öå
, 
timeout
));

255 
	}
}

258 
ölöe
 signed 

259 
	$dma_„n˚_waô
(
dma_„n˚
 *
„n˚
, 
boﬁ
 
öå
)

261 sig√d 
ªt
;

263 
ªt
 = 
	`dma_„n˚_waô_timeout
(
„n˚
, 
öå
, 
MAX_SCHEDULE_TIMEOUT
);

265  (
ªt
 < 0 ?Ñet : 0);

266 
	}
}

269 
ölöe
 

270 
	$dma_„n˚_add_ˇŒback
(
dma_„n˚
 *
„n˚
, 
dma_„n˚_cb
 *
cb
,

271 
dma_„n˚_func_t
 
func
)

273 
ªt
 = 0;

274 
boﬁ
 
was_£t
;

276 i‡(
	`WARN_ON
(!
„n˚
 || !
func
))

277  -
EINVAL
;

279 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
)) {

280 
	`INIT_LIST_HEAD
(&
cb
->
node
);

281  -
ENOENT
;

284 
	`•ö_lock
(
„n˚
->
lock
);

286 
was_£t
 = 
	`ã°_™d_£t_bô
(
DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT
, &
„n˚
->
Êags
);

288 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
)) {

289 
	`INIT_LIST_HEAD
(&
cb
->
node
);

290 
ªt
 = -
ENOENT
;

291 } i‡(
was_£t
 == 0 &&

292 
„n˚
->
›s
->
	`íabÀ_sig«lög
(fence) == 0) {

293 
	`INIT_LIST_HEAD
(&
cb
->
node
);

294 
ªt
 = -
ENOENT
;

295 
	`dma_„n˚_sig«l_locked
(
„n˚
);

297 
cb
->
func
 = func;

298 
	`li°_add_èû
(&
cb
->
node
, &
„n˚
->
cb_li°
);

300 
	`•ö_u∆ock
(
„n˚
->
lock
);

302  (
ªt
);

303 
	}
}

305 
ölöe
 
boﬁ


306 
	$dma_„n˚_ªmove_ˇŒback
(
dma_„n˚
 *
„n˚
, 
dma_„n˚_cb
 *
cb
)

308 
boﬁ
 
ªt
;

310 
	`•ö_lock
(
„n˚
->
lock
);

312 
ªt
 = !
	`li°_em±y
(&
cb
->
node
);

313 i‡(
ªt
)

314 
	`li°_dñ_öô
(&
cb
->
node
);

316 
	`•ö_u∆ock
(
„n˚
->
lock
);

318  
ªt
;

319 
	}
}

321 
ölöe
 

322 
	$dma_„n˚_deÁu…_waô_cb
(
dma_„n˚
 *
„n˚
, 
dma_„n˚_cb
 *
cb
)

324 
deÁu…_waô_cb
 *
waô
 =

325 
	`c⁄èöî_of
(
cb
, 
deÁu…_waô_cb
, 
ba£
);

327 
	`wake_up_¥o˚ss
(
waô
->
èsk
);

328 
	}
}

330 
ölöe
 signed 

331 
	$dma_„n˚_deÁu…_waô
(
dma_„n˚
 *
„n˚
, 
boﬁ
 
öå
, sig√d 
timeout
)

333 
deÁu…_waô_cb
 
cb
;

334 sig√d 
ªt
;

335 
boﬁ
 
was_£t
;

338 
timeout
 = ()timeout;

339 
ªt
 = 
timeout
;

341 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
))

342  
timeout
;

344 
	`•ö_lock
(
„n˚
->
lock
);

346 i‡(
öå
 && 
	`sig«l_≥ndög
(
cuºít
)) {

347 
ªt
 = -
ERESTARTSYS
;

348 
out
;

351 
was_£t
 = 
	`ã°_™d_£t_bô
(
DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT
, &
„n˚
->
Êags
);

353 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
))

354 
out
;

356 i‡(!
was_£t
) {

357 i‡(!
„n˚
->
›s
->
	`íabÀ_sig«lög
(fence)) {

358 
	`dma_„n˚_sig«l_locked
(
„n˚
);

359 
out
;

363 
cb
.
ba£
.
func
 = 
dma_„n˚_deÁu…_waô_cb
;

364 
cb
.
èsk
 = 
cuºít
;

365 
	`li°_add
(&
cb
.
ba£
.
node
, &
„n˚
->
cb_li°
);

367 !
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
Ë&& 
ªt
 > 0) {

368 i‡(
öå
)

369 
	`__£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

371 
	`__£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

372 
	`•ö_u∆ock
(
„n˚
->
lock
);

374 
ªt
 = 
	`scheduÀ_timeout
(ret);

376 
	`•ö_lock
(
„n˚
->
lock
);

377 i‡(
ªt
 > 0 && 
öå
 && 
	`sig«l_≥ndög
(
cuºít
))

378 
ªt
 = -
ERESTARTSYS
;

381 i‡(!
	`li°_em±y
(&
cb
.
ba£
.
node
))

382 
	`li°_dñ
(&
cb
.
ba£
.
node
);

383 
	`__£t_cuºít_°©e
(
TASK_RUNNING
);

385 
out
:

386 
	`•ö_u∆ock
(
„n˚
->
lock
);

387  
ªt
;

388 
	}
}

390 
ölöe
 
boﬁ


391 
	$dma_„n˚_ã°_sig«Àd_™y
(
dma_„n˚
 **
„n˚s
, 
uöt32_t
 
cou¡
)

393 
i
;

395 
i
 = 0; i < 
cou¡
; ++i) {

396 
dma_„n˚
 *
„n˚
 = 
„n˚s
[
i
];

397 i‡(
	`ã°_bô
(
DMA_FENCE_FLAG_SIGNALED_BIT
, &
„n˚
->
Êags
))

398  
åue
;

400  
Ál£
;

401 
	}
}

403 
ölöe
 signed 

404 
	$dma_„n˚_waô_™y_timeout
(
dma_„n˚
 **
„n˚s
, 
uöt32_t
 
cou¡
,

405 
boﬁ
 
öå
, sig√d 
timeout
, 
uöt32_t
 *
idx
)

407 
deÁu…_waô_cb
 *
cb
;

408 sig√d 
ªt
;

409 
i
;

412 
timeout
 = ()timeout;

413 
ªt
 = 
timeout
;

415 i‡(
	`WARN_ON
(!
„n˚s
 || !
cou¡
 || 
timeout
 < 0))

416  -
EINVAL
;

418 i‡(
timeout
 == 0) {

419 
i
 = 0; i < 
cou¡
; ++i)

420 i‡(
	`dma_„n˚_is_sig«Àd
(
„n˚s
[
i
]))

426 
cb
 = 
	`kˇŒoc
(
cou¡
, (
deÁu…_waô_cb
), 
GFP_KERNEL
);

427 i‡(
cb
 =
NULL
) {

428 
ªt
 = -
ENOMEM
;

429 
îr_‰ì_cb
;

432 
i
 = 0; i < 
cou¡
; ++i) {

433 
dma_„n˚
 *
„n˚
 = 
„n˚s
[
i
];

435 i‡(
„n˚
->
›s
->
waô
 !
dma_„n˚_deÁu…_waô
) {

436 
ªt
 = -
EINVAL
;

437 
dma_„n˚_rm_cb
;

440 
cb
[
i
].
èsk
 = 
cuºít
;

441 i‡(
	`dma_„n˚_add_ˇŒback
(
„n˚
, &
cb
[
i
].
ba£
,

442 
dma_„n˚_deÁu…_waô_cb
)) {

443 
dma_„n˚_rm_cb
;

447 
ªt
 > 0) {

448 i‡(
öå
)

449 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

451 
	`£t_cuºít_°©e
(
TASK_UNINTERRUPTIBLE
);

453 i‡(
	`dma_„n˚_ã°_sig«Àd_™y
(
„n˚s
, 
cou¡
))

456 
ªt
 = 
	`scheduÀ_timeout
(ret);

458 i‡(
ªt
 > 0 && 
öå
 && 
	`sig«l_≥ndög
(
cuºít
))

459 
ªt
 = -
ERESTARTSYS
;

462 
	`__£t_cuºít_°©e
(
TASK_RUNNING
);

464 
dma_„n˚_rm_cb
:

465 
i
-- > 0)

466 
	`dma_„n˚_ªmove_ˇŒback
(
„n˚s
[
i
], &
cb
[i].
ba£
);

468 
îr_‰ì_cb
:

469 
	`k‰ì
(
cb
);

471  (
ªt
);

472 
	}
}

474 
ölöe
 

475 
	$dma_„n˚_öô
(
dma_„n˚
 *
„n˚
, c⁄° 
dma_„n˚_›s
 *
›s
,

476 
•ölock_t
 *
lock
, 
u64
 
c⁄ãxt
, 
£qno
)

479 
	`mem£t
(
„n˚
, 0, (*fence));

480 
„n˚
->
›s
 = ops;

481 
„n˚
->
lock
 =Üock;

482 
„n˚
->
c⁄ãxt
 = context;

483 
„n˚
->
£qno
 = seqno;

484 
	`INIT_LIST_HEAD
(&
„n˚
->
cb_li°
);

485 
	`kªf_öô
(&
„n˚
->
ªfcou¡
);

486 
„n˚
->
îr‹
 = 0;

487 
	}
}

489 
ölöe
 
boﬁ


490 
	$dma_„n˚_is_œãr
(
dma_„n˚
 *
f1
, dma_„n˚ *
f2
){

493 if(
	`WARN_ON
(
f1
->
c⁄ãxt
 !
f2
->c⁄ãxt)Ë 
Ál£
;

495  (
f1
->
£qno
 > 
f2
->seqno);

496 
	}
}

498 
ölöe
 

499 
	$dma_„n˚_£t_îr‹
(
dma_„n˚
 *
f
, 
îr‹
)

502 
f
->
îr‹
 =Érror;

503 
	}
}

505 
	#DMA_FENCE_TRACE
(
f
, 
fmt
, 
¨gs
...) \

507 
dma_„n˚
 *
__ff
 = (
f
); \

508 i‡(
	`c⁄fig_íabÀd
(
CONFIG_DMA_FENCE_TRACE
)) \

509 
	`¥_öfo
("‡%u#%u: " 
fmt
, \

510 
__ff
->
c⁄ãxt
, __ff->
£qno
, ##
¨gs
); \

511 } 0)

	)

513 
	#DMA_FENCE_WARN
(
f
, 
fmt
, 
¨gs
...) \

515 
dma_„n˚
 *
__ff
 = (
f
); \

516 
	`¥_w¨n
("‡%u#%u: " 
fmt
, 
__ff
->
c⁄ãxt
, __ff->
£qno
, \

517 ##
¨gs
); \

518 } 0)

	)

520 
	#DMA_FENCE_ERR
(
f
, 
fmt
, 
¨gs
...) \

522 
dma_„n˚
 *
__ff
 = (
f
); \

523 
	`¥_îr
("‡%u#%u: " 
fmt
, 
__ff
->
c⁄ãxt
, __ff->
£qno
, \

524 ##
¨gs
); \

525 } 0)

	)

	@src/common/linuxkpi/gplv2/include/linux/dma-mapping.h

1 #i‚de‡
_LINUX_GPLV2_DMA_MAPPING_H_


2 
	#_LINUX_GPLV2_DMA_MAPPING_H_


	)

4 #ö˛ude_√xà<
löux
/
dma
-
m≠pög
.
h
>

6 
	~<löux/compûî.h
>

8 
ölöe
 

9 
	$dma_gë_sgèbÀ_©ås
(
devi˚
 *
dev
, 
sg_èbÀ
 *
sgt
, *
˝u_addr
,

10 
dma_addr_t
 
dma_addr
, 
size_t
 
size
, 
dma_©ås
 *
©ås
)

13 
	`UNIMPLEMENTED
();

14  (-
ENOMEM
);

15 
	}
}

17 
	#dma_gë_sgèbÀ
(
d
, 
t
, 
v
, 
h
, 
s
Ë
	`dma_gë_sgèbÀ_©ås
(d,Å, v, h, s, 
NULL
)

	)

19 
ölöe
 *
	$dma_Æloc_wc
(
devi˚
 *
dev
, 
size_t
 
size
,

20 
dma_addr_t
 *
dma_addr
, 
gÂ_t
 
gÂ
)

23 
	`∑nic
("implement me");

24 
	}
}

25 #i‚de‡
dma_Æloc_wrôecomböe


26 
	#dma_Æloc_wrôecomböe
 
dma_Æloc_wc


	)

29 
ölöe
 
	$dma_‰ì_wc
(
devi˚
 *
dev
, 
size_t
 
size
,

30 *
˝u_addr
, 
dma_addr_t
 
dma_addr
)

32 
	`∑nic
("implement me");

33 
	}
}

34 #i‚de‡
dma_‰ì_wrôecomböe


35 
	#dma_‰ì_wrôecomböe
 
dma_‰ì_wc


	)

38 
ölöe
 
	$dma_mm≠_wc
(
devi˚
 *
dev
,

39 
vm_¨ó_°ru˘
 *
vma
,

40 *
˝u_addr
, 
dma_addr_t
 
dma_addr
,

41 
size_t
 
size
)

43 
	`∑nic
("implement me!!!");

44 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/dmi.h

1 #i‚de‡
__DMI_H__


2 
	#__DMI_H__


	)

4 
	~<löux/li°.h
>

5 
	~<löux/kobje˘.h
>

6 
	~<löux/mod_devi˚èbÀ.h
>

8 #ifde‡
CONFIG_DMI


11 
kobje˘
 *
dmi_kobj
;

12 
dmi_check_sy°em
(c⁄° 
dmi_sy°em_id
 *
li°
);

13 c⁄° 
dmi_sy°em_id
 *
dmi_fú°_m©ch
(c⁄° dmi_sy°em_id *
li°
);

14 c⁄° * 
dmi_gë_sy°em_öfo
(
fõld
);

15 c⁄° 
dmi_devi˚
 * 
dmi_föd_devi˚
(
ty≥
, c⁄° *
«me
,

16 c⁄° 
dmi_devi˚
 *
‰om
);

17 
dmi_sˇn_machöe
();

18 
boﬁ
 
dmi_m©ch
(
dmi_fõld
 
f
, c⁄° *
°r
);

22 
	gdmi_hódî
;

24 
ölöe
 
	$dmi_check_sy°em
(c⁄° 
dmi_sy°em_id
 *
li°
Ë{  0; 
	}
}

25 
ölöe
 c⁄° * 
	$dmi_gë_sy°em_öfo
(
fõld
Ë{  
NULL
; 
	}
}

26 
ölöe
 c⁄° 
dmi_devi˚
 * 
	$dmi_föd_devi˚
(
ty≥
, c⁄° *
«me
,

27 c⁄° 
dmi_devi˚
 *
‰om
Ë{  
NULL
; 
	}
}

28 
ölöe
 
	$dmi_sˇn_machöe
(Ë{ ; 
	}
}

29 
ölöe
 
	$dmi_memdev_wÆk
(Ë{ 
	}
}

30 
ölöe
 
	$dmi_£t_dump_°ack_¨ch_desc
(Ë{ 
	}
}

31 
ölöe
 
boﬁ
 
	$dmi_gë_d©e
(
fõld
, *
yóΩ
, *
m⁄thp
, *
dayp
)

33 i‡(
yóΩ
)

34 *
yóΩ
 = 0;

35 i‡(
m⁄thp
)

36 *
m⁄thp
 = 0;

37 i‡(
dayp
)

38 *
dayp
 = 0;

39  
Ál£
;

40 
	}
}

41 
ölöe
 
	$dmi_«me_ö_víd‹s
(c⁄° *
s
Ë{  0; 
	}
}

42 
ölöe
 
	$dmi_«me_ö_£rül
(c⁄° *
s
Ë{  0; 
	}
}

43 
	#dmi_avaûabÀ
 0

	)

44 
ölöe
 
dmi_wÆk
((*
decode
)(c⁄° 
dmi_hódî
 *, *),

45 *
¥iv©e_d©a
Ë{  -
ENXIO
; 
	}
}

46 
ölöe
 
boﬁ
 
	$dmi_m©ch
(
dmi_fõld
 
f
, c⁄° *
°r
)

47 {  
Ál£
; 
	}
}

48 
ölöe
 
	$dmi_memdev_«me
(
u16
 
h™dÀ
, c⁄° **
b™k
,

49 c⁄° **
devi˚
Ë{ 
	}
}

50 
ölöe
 c⁄° 
dmi_sy°em_id
 *

51 
	$dmi_fú°_m©ch
(c⁄° 
dmi_sy°em_id
 *
li°
Ë{  
NULL
; 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/efi.h

1 #i‚de‡
_LINUX_EFI_H_


2 
	#_LINUX_EFI_H_


	)

4 
	~<löux/compûî.h
>

6 
	#EFI_BOOT
 0

	)

8 
ölöe
 
	$efi_íabÀd
(
íabÀd
){

9 
	`UNIMPLEMENTED
();

11 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/fb.h

1 #i‚de‡
__LINUX_FB_H_


2 
	#__LINUX_FB_H_


	)

3 
	~<sys/fbio.h
>

4 
	~<u≠i/löux/fb.h
>

6 
	~<löux/fs.h
>

7 
	~<löux/öô.h
>

8 
	~<löux/w‹kqueue.h
>

9 
	~<löux/li°.h
>

10 
	~<löux/backlight.h
>

11 
	~<löux/¶ab.h
>

12 
	~<löux/muãx.h
>

13 
	~<asm/io.h
>

14 
	~<löux/nŸifõr.h
>

16 
	#CONFIG_DRM_FBDEV_EMULATION


	)

18 
	glöux_fb_öfo
;

19 
	gvideomode
;

20 
	gvm_¨ó_°ru˘
;

22 
	#FB_TYPE_PACKED_PIXELS
 0

	)

23 
	#FB_TYPE_PLANES
 1

	)

24 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

25 
	#FB_TYPE_TEXT
 3

	)

26 
	#FB_TYPE_VGA_PLANES
 4

	)

27 
	#FB_TYPE_FOURCC
 5

	)

29 
	#FB_AUX_TEXT_MDA
 0

	)

30 
	#FB_AUX_TEXT_CGA
 1

	)

31 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

32 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

33 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

34 
	#FB_AUX_TEXT_SVGA_GROUP
 8

	)

35 
	#FB_AUX_TEXT_SVGA_MASK
 7

	)

36 
	#FB_AUX_TEXT_SVGA_STEP2
 8

	)

37 
	#FB_AUX_TEXT_SVGA_STEP4
 9

	)

38 
	#FB_AUX_TEXT_SVGA_STEP8
 10

	)

39 
	#FB_AUX_TEXT_SVGA_STEP16
 11

	)

40 
	#FB_AUX_TEXT_SVGA_LAST
 15

	)

42 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

43 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

44 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

46 
	#FB_VISUAL_MONO01
 0

	)

47 
	#FB_VISUAL_MONO10
 1

	)

48 
	#FB_VISUAL_TRUECOLOR
 2

	)

49 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

50 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

51 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

52 
	#FB_VISUAL_FOURCC
 6

	)

55 
	#FB_ACCEL_NONE
 0

	)

57 
	#FB_ACTIVATE_NOW
 0

	)

58 
	#FB_ACTIVATE_NXTOPEN
 1

	)

59 
	#FB_ACTIVATE_TEST
 2

	)

60 
	#FB_ACTIVATE_MASK
 15

	)

62 
	#FB_ACTIVATE_VBL
 16

	)

63 
	#FB_CHANGE_CMAP_VBL
 32

	)

64 
	#FB_ACTIVATE_ALL
 64

	)

65 
	#FB_ACTIVATE_FORCE
 128

	)

66 
	#FB_ACTIVATE_INV_MODE
 256

	)

68 
	#FB_ACCELF_TEXT
 1

	)

71 
	#FB_MODE_IS_UNKNOWN
 0

	)

72 
	#FB_MODE_IS_DETAILED
 1

	)

73 
	#FB_MODE_IS_STANDARD
 2

	)

74 
	#FB_MODE_IS_VESA
 4

	)

75 
	#FB_MODE_IS_CALCULATED
 8

	)

76 
	#FB_MODE_IS_FIRST
 16

	)

77 
	#FB_MODE_IS_FROM_VAR
 32

	)

79 
	sfb_videomode
 {

80 c⁄° *
	m«me
;

81 
u32
 
	mª‰esh
;

82 
u32
 
	mxªs
;

83 
u32
 
	myªs
;

84 
u32
 
	mpix˛ock
;

85 
u32
 
	mÀ·_m¨gö
;

86 
u32
 
	mright_m¨gö
;

87 
u32
 
	muµî_m¨gö
;

88 
u32
 
	mlowî_m¨gö
;

89 
u32
 
	mhsync_Àn
;

90 
u32
 
	mvsync_Àn
;

91 
u32
 
	msync
;

92 
u32
 
	mvmode
;

93 
u32
 
	mÊag
;

96 c⁄° *
fb_mode_›ti⁄
;

97 c⁄° 
fb_videomode
 
veß_modes
[];

98 c⁄° 
fb_videomode
 
˚a_modes
[64];

100 
	sfb_modñi°
 {

101 
li°_hód
 
	mli°
;

102 
fb_videomode
 
	mmode
;

106 
	#FB_DPMS_ACTIVE_OFF
 1

	)

107 
	#FB_DPMS_SUSPEND
 2

	)

108 
	#FB_DPMS_STANDBY
 4

	)

110 
	#FB_DISP_DDI
 1

	)

111 
	#FB_DISP_ANA_700_300
 2

	)

112 
	#FB_DISP_ANA_714_286
 4

	)

113 
	#FB_DISP_ANA_1000_400
 8

	)

114 
	#FB_DISP_ANA_700_000
 16

	)

116 
	#FB_DISP_MONO
 32

	)

117 
	#FB_DISP_RGB
 64

	)

118 
	#FB_DISP_MULTI
 128

	)

119 
	#FB_DISP_UNKNOWN
 256

	)

121 
	#FB_SIGNAL_NONE
 0

	)

122 
	#FB_SIGNAL_BLANK_BLANK
 1

	)

123 
	#FB_SIGNAL_SEPARATE
 2

	)

124 
	#FB_SIGNAL_COMPOSITE
 4

	)

125 
	#FB_SIGNAL_SYNC_ON_GREEN
 8

	)

126 
	#FB_SIGNAL_SERRATION_ON
 16

	)

128 
	#FB_MISC_PRIM_COLOR
 1

	)

129 
	#FB_MISC_1ST_DETAIL
 2

	)

130 
	sfb_chroma
 {

131 
__u32
 
	mªdx
;

132 
__u32
 
	mgªíx
;

133 
__u32
 
	mbluex
;

134 
__u32
 
	mwhôex
;

135 
__u32
 
	mªdy
;

136 
__u32
 
	mgªíy
;

137 
__u32
 
	mbluey
;

138 
__u32
 
	mwhôey
;

141 
	sfb_m⁄•ecs
 {

142 
fb_chroma
 
	mchroma
;

143 
fb_videomode
 *
	mmodedb
;

144 
__u8
 
	mm™uÁ˘uªr
[4];

145 
__u8
 
	mm⁄ô‹
[14];

146 
__u8
 
	m£rül_no
[14];

147 
__u8
 
	mascii
[14];

148 
__u32
 
	mmodedb_Àn
;

149 
__u32
 
	mmodñ
;

150 
__u32
 
	m£rül
;

151 
__u32
 
	myór
;

152 
__u32
 
	mwìk
;

153 
__u32
 
	mhfmö
;

154 
__u32
 
	mhfmax
;

155 
__u32
 
	md˛kmö
;

156 
__u32
 
	md˛kmax
;

157 
__u16
 
	möput
;

158 
__u16
 
	mdpms
;

159 
__u16
 
	msig«l
;

160 
__u16
 
	mvfmö
;

161 
__u16
 
	mvfmax
;

162 
__u16
 
	mgamma
;

163 
__u16
 
	mgtf
 : 1;

164 
__u16
 
	mmisc
;

165 
__u8
 
	mvîsi⁄
;

166 
__u8
 
	mªvisi⁄
;

167 
__u8
 
	mmax_x
;

168 
__u8
 
	mmax_y
;

172 
	#FB_VMODE_NONINTERLACED
 0

	)

173 
	#FB_VMODE_INTERLACED
 1

	)

174 
	#FB_VMODE_DOUBLE
 2

	)

175 
	#FB_VMODE_ODD_FLD_FIRST
 4

	)

176 
	#FB_VMODE_MASK
 255

	)

178 
	#FB_VMODE_YWRAP
 256

	)

179 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

180 
	#FB_VMODE_CONUPDATE
 512

	)

182 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

183 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

185 
	sfb_fix_s¸ìnöfo
 {

186 
	mid
[16];

187 
	msmem_°¨t
;

189 
__u32
 
	msmem_Àn
;

190 
__u32
 
	mty≥
;

191 
__u32
 
	mty≥_aux
;

192 
__u32
 
	mvisuÆ
;

193 
__u16
 
	mx∑n°ï
;

194 
__u16
 
	my∑n°ï
;

195 
__u16
 
	mywøp°ï
;

196 
__u32
 
	mlöe_Àngth
;

197 
	mmmio_°¨t
;

199 
__u32
 
	mmmio_Àn
;

200 
__u32
 
	mac˚l
;

202 
__u16
 
	mˇ∑bûôõs
;

203 
__u16
 
	mª£rved
[2];

206 
	sfb_bôfõld
 {

207 
__u32
 
	moff£t
;

208 
__u32
 
	mÀngth
;

209 
__u32
 
	mmsb_right
;

214 
	#FB_NONSTD_HAM
 1

	)

215 
	#FB_NONSTD_REV_PIX_IN_B
 2

	)

217 
	#FB_ACTIVATE_NOW
 0

	)

218 
	#FB_ACTIVATE_NXTOPEN
 1

	)

219 
	#FB_ACTIVATE_TEST
 2

	)

220 
	#FB_ACTIVATE_MASK
 15

	)

222 
	#FB_ACTIVATE_VBL
 16

	)

223 
	#FB_CHANGE_CMAP_VBL
 32

	)

224 
	#FB_ACTIVATE_ALL
 64

	)

225 
	#FB_ACTIVATE_FORCE
 128

	)

226 
	#FB_ACTIVATE_INV_MODE
 256

	)

229 
	sfb_v¨_s¸ìnöfo
 {

230 
__u32
 
	mxªs
;

231 
__u32
 
	myªs
;

232 
__u32
 
	mxªs_vútuÆ
;

233 
__u32
 
	myªs_vútuÆ
;

234 
__u32
 
	mxoff£t
;

235 
__u32
 
	myoff£t
;

237 
__u32
 
	mbôs_≥r_pixñ
;

238 
__u32
 
	mgøysˇÀ
;

240 
fb_bôfõld
 
	mªd
;

241 
fb_bôfõld
 
	mgªí
;

242 
fb_bôfõld
 
	mblue
;

243 
fb_bôfõld
 
	må™•
;

245 
__u32
 
	mn⁄°d
;

247 
__u32
 
	ma˘iv©e
;

249 
__u32
 
	mheight
;

250 
__u32
 
	mwidth
;

252 
__u32
 
	mac˚l_Êags
;

255 
__u32
 
	mpix˛ock
;

256 
__u32
 
	mÀ·_m¨gö
;

257 
__u32
 
	mright_m¨gö
;

258 
__u32
 
	muµî_m¨gö
;

259 
__u32
 
	mlowî_m¨gö
;

260 
__u32
 
	mhsync_Àn
;

261 
__u32
 
	mvsync_Àn
;

262 
__u32
 
	msync
;

263 
__u32
 
	mvmode
;

264 
__u32
 
	mrŸ©e
;

265 
__u32
 
	mcﬁ‹•a˚
;

266 
__u32
 
	mª£rved
[4];

269 
	sfb_cm≠
 {

270 
__u32
 
	m°¨t
;

271 
__u32
 
	mÀn
;

272 
__u16
 *
	mªd
;

273 
__u16
 *
	mgªí
;

274 
__u16
 *
	mblue
;

275 
__u16
 *
	må™•
;

280 
	#VESA_NO_BLANKING
 0

	)

281 
	#VESA_VSYNC_SUSPEND
 1

	)

282 
	#VESA_HSYNC_SUSPEND
 2

	)

283 
	#VESA_POWERDOWN
 3

	)

288 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

291 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

294 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

297 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

300 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

303 
	#FB_VBLANK_VBLANKING
 0x001

	)

304 
	#FB_VBLANK_HBLANKING
 0x002

	)

305 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

306 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

307 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

308 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

309 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

310 
	#FB_VBLANK_VSYNCING
 0x080

	)

311 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

313 
	sfb_vbœnk
 {

314 
__u32
 
	mÊags
;

315 
__u32
 
	mcou¡
;

316 
__u32
 
	mvcou¡
;

317 
__u32
 
	mhcou¡
;

318 
__u32
 
	mª£rved
[4];

326 
	#FB_EVENT_MODE_CHANGE
 0x01

	)

330 
	#FB_EVENT_SUSPEND
 0x02

	)

334 
	#FB_EVENT_RESUME
 0x03

	)

336 
	#FB_EVENT_MODE_DELETE
 0x04

	)

338 
	#FB_EVENT_FB_REGISTERED
 0x05

	)

340 
	#FB_EVENT_FB_UNREGISTERED
 0x06

	)

342 
	#FB_EVENT_GET_CONSOLE_MAP
 0x07

	)

344 
	#FB_EVENT_SET_CONSOLE_MAP
 0x08

	)

346 
	#FB_EVENT_BLANK
 0x09

	)

348 
	#FB_EVENT_NEW_MODELIST
 0x0A

	)

351 
	#FB_EVENT_MODE_CHANGE_ALL
 0x0B

	)

353 
	#FB_EVENT_CONBLANK
 0x0C

	)

355 
	#FB_EVENT_GET_REQ
 0x0D

	)

357 
	#FB_EVENT_FB_UNBIND
 0x0E

	)

359 
	#FB_EVENT_REMAP_ALL_CONSOLE
 0x0F

	)

361 
	#FB_EARLY_EVENT_BLANK
 0x10

	)

363 
	#FB_R_EARLY_EVENT_BLANK
 0x11

	)

365 
	sfb_evít
 {

366 
löux_fb_öfo
 *
	möfo
;

367 *
	md©a
;

370 
	sfb_blô_ˇps
 {

371 
u32
 
	mx
;

372 
u32
 
	my
;

373 
u32
 
	mÀn
;

374 
u32
 
	mÊags
;

377 #ifde‡
CONFIG_FB_NOTIFY


378 
fb_ªgi°î_˛õ¡
(
nŸifõr_block
 *
nb
);

379 
fb_uƒegi°î_˛õ¡
(
nŸifõr_block
 *
nb
);

380 
fb_nŸifõr_ˇŒ_chaö
(
vÆ
, *
v
);

382 
ölöe
 
	$fb_ªgi°î_˛õ¡
(
nŸifõr_block
 *
nb
)

385 
	}
};

387 
ölöe
 
	$fb_uƒegi°î_˛õ¡
(
nŸifõr_block
 *
nb
)

390 
	}
};

392 
ölöe
 
	$fb_nŸifõr_ˇŒ_chaö
(
vÆ
, *
v
)

395 
	}
};

407 
	#FB_PIXMAP_DEFAULT
 1

	)

408 
	#FB_PIXMAP_SYSTEM
 2

	)

409 
	#FB_PIXMAP_IO
 4

	)

410 
	#FB_PIXMAP_SYNC
 256

	)

412 
	sfb_pixm≠
 {

413 
u8
 *
	maddr
;

414 
u32
 
	msize
;

415 
u32
 
	moff£t
;

416 
u32
 
	mbuf_Æign
;

417 
u32
 
	msˇn_Æign
;

418 
u32
 
	mac˚ss_Æign
;

419 
u32
 
	mÊags
;

420 
u32
 
	mblô_x
;

421 
u32
 
	mblô_y
;

425 (*
	mwrôeio
)(
löux_fb_öfo
 *
	möfo
, 
__iomem
 *
	md°
, *
	m§c
, 
	msize
);

426 (*
	mªadio
Ë(
löux_fb_öfo
 *
	möfo
, *
	md°
, 
__iomem
 *
	m§c
, 
	msize
);

430 
	#ROP_COPY
 0

	)

431 
	#ROP_XOR
 1

	)

433 
	sfb_c›y¨ó
 {

434 
__u32
 
	mdx
;

435 
__u32
 
	mdy
;

436 
__u32
 
	mwidth
;

437 
__u32
 
	mheight
;

438 
__u32
 
	msx
;

439 
__u32
 
	msy
;

442 
	sfb_fûÃe˘
 {

443 
__u32
 
	mdx
;

444 
__u32
 
	mdy
;

445 
__u32
 
	mwidth
;

446 
__u32
 
	mheight
;

447 
__u32
 
	mcﬁ‹
;

448 
__u32
 
	mr›
;

451 
	sfb_image
 {

452 
__u32
 
	mdx
;

453 
__u32
 
	mdy
;

454 
__u32
 
	mwidth
;

455 
__u32
 
	mheight
;

456 
__u32
 
	mfg_cﬁ‹
;

457 
__u32
 
	mbg_cﬁ‹
;

458 
__u8
 
	mdïth
;

459 c⁄° *
	md©a
;

460 
fb_cm≠
 
	mcm≠
;

463 
	slfbcuΩos
 {

464 
__u16
 
	mx
, 
	my
;

467 
	sfb_curs‹
 {

468 
__u16
 
	m£t
;

469 
__u16
 
	míabÀ
;

470 
__u16
 
	mr›
;

471 c⁄° *
	mmask
;

472 
lfbcuΩos
 
	mhŸ
;

473 
fb_image
 
	mimage
;

476 
	sfb_›s
 {

478 
moduÀ
 *
	mow√r
;

479 (*
	mfb_›í
)(
löux_fb_öfo
 *
	möfo
, 
	mu£r
);

480 (*
	mfb_ªÀa£
)(
löux_fb_öfo
 *
	möfo
, 
	mu£r
);

485 
ssize_t
 (*
fb_ªad
)(
löux_fb_öfo
 *
	möfo
, 
__u£r
 *
	mbuf
,

486 
size_t
 
	mcou¡
, 
loff_t
 *
	mµos
);

487 
ssize_t
 (*
fb_wrôe
)(
löux_fb_öfo
 *
	möfo
, c⁄° 
__u£r
 *
	mbuf
,

488 
size_t
 
	mcou¡
, 
loff_t
 *
	mµos
);

492 (*
	mfb_check_v¨
)(
fb_v¨_s¸ìnöfo
 *
	mv¨
, 
löux_fb_öfo
 *
	möfo
);

495 (*
	mfb_£t_∑r
)(
löux_fb_öfo
 *
	möfo
);

498 (*
	mfb_£tcﬁªg
)(
	mªgno
, 
	mªd
, 
	mgªí
,

499 
	mblue
, 
	må™•
, 
löux_fb_öfo
 *
	möfo
);

502 (*
	mfb_£tcm≠
)(
fb_cm≠
 *
	mcm≠
, 
löux_fb_öfo
 *
	möfo
);

505 (*
	mfb_bœnk
)(
	mbœnk
, 
löux_fb_öfo
 *
	möfo
);

508 (*
	mfb_∑n_di•œy
)(
fb_v¨_s¸ìnöfo
 *
	mv¨
, 
löux_fb_öfo
 *
	möfo
);

511 (*
	mfb_fûÃe˘
Ë(
löux_fb_öfo
 *
	möfo
, c⁄° 
fb_fûÃe˘
 *
	mª˘
);

513 (*
	mfb_c›y¨ó
Ë(
löux_fb_öfo
 *
	möfo
, c⁄° 
fb_c›y¨ó
 *
	mªgi⁄
);

515 (*
	mfb_imageblô
Ë(
löux_fb_öfo
 *
	möfo
, c⁄° 
fb_image
 *
	mimage
);

518 (*
	mfb_curs‹
Ë(
löux_fb_öfo
 *
	möfo
, 
fb_curs‹
 *
	mcurs‹
);

521 (*
	mfb_rŸ©e
)(
löux_fb_öfo
 *
	möfo
, 
	m™gÀ
);

524 (*
	mfb_sync
)(
löux_fb_öfo
 *
	möfo
);

527 (*
	mfb_io˘l
)(
löux_fb_öfo
 *
	möfo
, 
	mcmd
,

528 
	m¨g
);

531 (*
	mfb_com∑t_io˘l
)(
löux_fb_öfo
 *
	möfo
, 
	mcmd
,

532 
	m¨g
);

535 (*
	mfb_mm≠
)(
löux_fb_öfo
 *
	möfo
, 
vm_¨ó_°ru˘
 *
	mvma
);

538 (*
	mfb_gë_ˇps
)(
löux_fb_öfo
 *
	möfo
, 
fb_blô_ˇps
 *
	mˇps
,

539 
fb_v¨_s¸ìnöfo
 *
	mv¨
);

542 (*
	mfb_de°roy
)(
löux_fb_öfo
 *
	möfo
);

545 (*
	mfb_debug_íãr
)(
löux_fb_öfo
 *
	möfo
);

546 (*
	mfb_debug_Àave
)(
löux_fb_öfo
 *
	möfo
);

552 
	#FBINFO_MODULE
 0x0001

	)

553 
	#FBINFO_HWACCEL_DISABLED
 0x0002

	)

560 
	#FBINFO_VIRTFB
 0x0004

	)

561 
	#FBINFO_PARTIAL_PAN_OK
 0x0040

	)

562 
	#FBINFO_READS_FAST
 0x0080

	)

570 
	#FBINFO_HWACCEL_NONE
 0x0000

	)

571 
	#FBINFO_HWACCEL_COPYAREA
 0x0100

	)

572 
	#FBINFO_HWACCEL_FILLRECT
 0x0200

	)

573 
	#FBINFO_HWACCEL_IMAGEBLIT
 0x0400

	)

574 
	#FBINFO_HWACCEL_ROTATE
 0x0800

	)

575 
	#FBINFO_HWACCEL_XPAN
 0x1000

	)

576 
	#FBINFO_HWACCEL_YPAN
 0x2000

	)

577 
	#FBINFO_HWACCEL_YWRAP
 0x4000

	)

579 
	#FBINFO_MISC_USEREVENT
 0x10000

	)

581 
	#FBINFO_MISC_TILEBLITTING
 0x20000

	)

593 
	#FBINFO_MISC_ALWAYS_SETPAR
 0x40000

	)

596 
	#FBINFO_MISC_FIRMWARE
 0x80000

	)

600 
	#FBINFO_FOREIGN_ENDIAN
 0x100000

	)

606 
	#FBINFO_BE_MATH
 0x100000

	)

610 
	#FBINFO_CAN_FORCE_OUTPUT
 0x200000

	)

612 
	slöux_fb_öfo
 {

613 
©omic_t
 
	mcou¡
;

614 
	mnode
;

615 
	mÊags
;

620 
	mfbc⁄_rŸ©e_höt
;

621 
muãx
 
	mlock
;

622 
muãx
 
	mmm_lock
;

623 
fb_v¨_s¸ìnöfo
 
	mv¨
;

624 
fb_fix_s¸ìnöfo
 
	mfix
;

625 
fb_m⁄•ecs
 
	mm⁄•ecs
;

626 
w‹k_°ru˘
 
	mqueue
;

627 
fb_pixm≠
 
	mpixm≠
;

628 
fb_pixm≠
 
	m•rôe
;

629 
fb_cm≠
 
	mcm≠
;

630 
li°_hód
 
	mmodñi°
;

631 
fb_videomode
 *
	mmode
;

633 #ifde‡
CONFIG_FB_BACKLIGHT


637 
backlight_devi˚
 *
	mbl_dev
;

640 
muãx
 
	mbl_curve_muãx
;

641 
u8
 
	mbl_curve
[
FB_BACKLIGHT_LEVELS
];

643 #ifde‡
CONFIG_FB_DEFERRED_IO


644 
dñayed_w‹k
 
	mde„ºed_w‹k
;

645 
fb_de„ºed_io
 *
	mfbdefio
;

648 
fb_›s
 *
	mfb›s
;

649 
devi˚
 *
	mdevi˚
;

650 
devi˚
 *
	mdev
;

651 
	m˛ass_Êag
;

652 #ifde‡
CONFIG_FB_TILEBLITTING


653 
fb_tûe_›s
 *
	mtûe›s
;

655 
__iomem
 *
	ms¸ìn_ba£
;

656 
	ms¸ìn_size
;

657 *
	mp£udo_∑Àâe
;

658 
	#FBINFO_STATE_RUNNING
 0

	)

659 
	#FBINFO_STATE_SUSPENDED
 1

	)

660 
u32
 
	m°©e
;

661 *
	mfbc⁄_∑r
;

663 *
	m∑r
;

667 
	s≠îtuªs_°ru˘
 {

668 
	mcou¡
;

669 
	s≠îtuª
 {

670 
ªsour˚_size_t
 
	mba£
;

671 
ªsour˚_size_t
 
	msize
;

672 } 
	mønges
[0];

673 } *
	m≠îtuªs
;

674 
boﬁ
 
	mskù_vt_swôch
;

676 
fb_öfo
 
	mfbio
;

677 
cdev
 *
	mfb_cdev
;

678 
devi˚_t
 
	mfb_bsddev
;

682 
ölöe
 
≠îtuªs_°ru˘
 *
	$Æloc_≠îtuªs
(
max_num
) {

683 
≠îtuªs_°ru˘
 *
a
 = 
	`kzÆloc
((apertures_struct)

684 + 
max_num
 * (
≠îtuª
), 
GFP_KERNEL
);

685 i‡(!
a
)

686  
NULL
;

687 
a
->
cou¡
 = 
max_num
;

688  
a
;

689 
	}
}

691 #ifde‡
MODULE


692 
	#FBINFO_DEFAULT
 
FBINFO_MODULE


	)

694 
	#FBINFO_DEFAULT
 0

	)

698 
	#FBINFO_FLAG_MODULE
 
FBINFO_MODULE


	)

699 
	#FBINFO_FLAG_DEFAULT
 
FBINFO_DEFAULT


	)

701 
fb_£t_v¨
(
löux_fb_öfo
 *
öfo
, 
fb_v¨_s¸ìnöfo
 *
v¨
);

702 
fb_∑n_di•œy
(
löux_fb_öfo
 *
öfo
, 
fb_v¨_s¸ìnöfo
 *
v¨
);

703 
fb_bœnk
(
löux_fb_öfo
 *
öfo
, 
bœnk
);

704 
cfb_fûÃe˘
(
löux_fb_öfo
 *
öfo
, c⁄° 
fb_fûÃe˘
 *
ª˘
);

705 
cfb_c›y¨ó
(
löux_fb_öfo
 *
öfo
, c⁄° 
fb_c›y¨ó
 *
¨ó
);

706 
cfb_imageblô
(
löux_fb_öfo
 *
öfo
, c⁄° 
fb_image
 *
image
);

710 
sys_fûÃe˘
(
löux_fb_öfo
 *
öfo
, c⁄° 
fb_fûÃe˘
 *
ª˘
);

711 
sys_c›y¨ó
(
löux_fb_öfo
 *
öfo
, c⁄° 
fb_c›y¨ó
 *
¨ó
);

712 
sys_imageblô
(
löux_fb_öfo
 *
öfo
, c⁄° 
fb_image
 *
image
);

713 
ssize_t
 
fb_sys_ªad
(
löux_fb_öfo
 *
öfo
, 
__u£r
 *
buf
,

714 
size_t
 
cou¡
, 
loff_t
 *
µos
);

715 
ssize_t
 
fb_sys_wrôe
(
löux_fb_öfo
 *
öfo
, c⁄° 
__u£r
 *
buf
,

716 
size_t
 
cou¡
, 
loff_t
 *
µos
);

719 
löux_ªgi°î_‰amebuf„r
(
löux_fb_öfo
 *
fb_öfo
);

720 
löux_uƒegi°î_‰amebuf„r
(
löux_fb_öfo
 *
fb_öfo
);

721 
ªmove_c⁄Êi˘ög_‰amebuf„rs
(
≠îtuªs_°ru˘
 *
a
,

722 c⁄° *
«me
, 
boﬁ
 
¥im¨y
);

723 
löux_fb_öfo
 *
‰amebuf„r_Æloc
(
size_t
 
size
, 
devi˚
 *
dev
);

724 
‰amebuf„r_ªÀa£
(
löux_fb_öfo
 *
öfo
);

727 
u∆ök_‰amebuf„r
(
löux_fb_öfo
 *
fb_öfo
);

728 
fb_¥ï¨e_logo
(
löux_fb_öfo
 *
fb_öfo
, 
rŸ©e
);

729 
fb_show_logo
(
löux_fb_öfo
 *
fb_öfo
, 
rŸ©e
);

730 * 
fb_gë_buf„r_off£t
(
löux_fb_öfo
 *
öfo
, 
fb_pixm≠
 *
buf
, 
u32
 
size
);

731 
fb_∑d_u«lig√d_buf„r
(
u8
 *
d°
, 
u32
 
d_pôch
, u8 *
§c
, u32 
idx
,

732 
u32
 
height
, u32 
shi·_high
, u32 
shi·_low
, u32 
mod
);

733 
fb_∑d_Æig√d_buf„r
(
u8
 *
d°
, 
u32
 
d_pôch
, u8 *
§c
, u32 
s_pôch
, u32 
height
);

734 
fb_£t_su•íd
(
löux_fb_öfo
 *
öfo
, 
°©e
);

735 
fb_gë_cﬁ‹_dïth
(
fb_v¨_s¸ìnöfo
 *
v¨
,

736 
fb_fix_s¸ìnöfo
 *
fix
);

737 
fb_√w_modñi°
(
löux_fb_öfo
 *
öfo
);

740 
fb_Æloc_cm≠
(
fb_cm≠
 *
cm≠
, 
Àn
, 
å™•
);

741 
fb_dóŒoc_cm≠
(
fb_cm≠
 *
cm≠
);

744 
drm_Àgacy_fb_öô
(
löux_fb_öfo
 *
fb_öfo
);

745 
fb_gë_›ti⁄s
(c⁄° *
«me
, **
›ti⁄
);

753 c⁄° 
fb_cm≠
 * 
èöãd_fb_deÁu…_cm≠
(
Àn
);

754 
èöãd_cfb_fûÃe˘
(
löux_fb_öfo
 *
p
, c⁄° 
fb_fûÃe˘
 *
ª˘
);

755 
èöãd_cfb_c›y¨ó
(
löux_fb_öfo
 *
p
, c⁄° 
fb_c›y¨ó
 *
¨ó
);

756 
èöãd_cfb_imageblô
(
löux_fb_öfo
 *
p
, c⁄° 
fb_image
 *
image
);

	@src/common/linuxkpi/gplv2/include/linux/firmware.h

1 #i‚de‡
_LINUX_FIRMWARE_H


2 
	#_LINUX_FIRMWARE_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/compûî.h
>

6 
	~<löux/gÂ.h
>

8 
	#FW_ACTION_NOHOTPLUG
 0

	)

9 
	#FW_ACTION_HOTPLUG
 1

	)

11 
	slöux_fúmw¨e
 {

12 
size_t
 
	msize
;

13 c⁄° 
u8
 *
	md©a
;

14 
∑ge
 **
	m∑ges
;

17 *
	m¥iv
;

20 
	gmoduÀ
;

21 
	gdevi˚
;

23 
	sbuûtö_fw
 {

24 *
	m«me
;

25 *
	md©a
;

26 
	msize
;

31 
	#__fw_c⁄ˇt1
(
x
, 
y
Ëx##
	)
y

32 
	#__fw_c⁄ˇt
(
x
, 
y
Ë
	`__fw_c⁄ˇt1
(x, y)

	)

34 
	#DECLARE_BUILTIN_FIRMWARE
(
«me
, 
blob
) \

35 
	`DECLARE_BUILTIN_FIRMWARE_SIZE
(
«me
, &(
blob
), (blob))

	)

37 
	#DECLARE_BUILTIN_FIRMWARE_SIZE
(
«me
, 
blob
, 
size
) \

38 c⁄° 
buûtö_fw
 
	`__fw_c⁄ˇt
(
__buûtö_fw
,
__COUNTER__
) \

39 
__u£d
 
	`__£˘i⁄
(.
buûtö_fw
Ë{ 
«me
, 
blob
, 
size
 }

	)

41 
ªque°_fúmw¨e
(c⁄° 
löux_fúmw¨e
 **
fw
, c⁄° *
«me
,

42 
devi˚
 *device);

43 
ªque°_fúmw¨e_nowaô
(

44 
moduÀ
 *moduÀ, 
boﬁ
 
uevít
,

45 c⁄° *
«me
, 
devi˚
 *devi˚, 
gÂ_t
 
gÂ
, *
c⁄ãxt
,

46 (*
c⁄t
)(c⁄° 
löux_fúmw¨e
 *
fw
, *
c⁄ãxt
));

47 
	`ªque°_fúmw¨e_dúe˘
(c⁄° 
löux_fúmw¨e
 **
fw
, c⁄° *
«me
,

48 
devi˚
 *device);

50 
	`ªÀa£_fúmw¨e
(c⁄° 
löux_fúmw¨e
 *
fw
);

51 
	#fúmw¨e
 
löux_fúmw¨e


	)

	@src/common/linuxkpi/gplv2/include/linux/frame.h

2 #i‚de‡
_LINUX_FRAME_H


3 
	#_LINUX_FRAME_H


	)

5 #ifde‡
CONFIG_STACK_VALIDATION


14 
	#STACK_FRAME_NON_STANDARD
(
func
) \

15 
__u£d
 
	`__£˘i⁄
(.
disˇrd
.
func_°ack_‰ame_n⁄_°™d¨d
) \

16 *
__func_°ack_‰ame_n⁄_°™d¨d_
##
func
 = 
	)
func

20 
	#STACK_FRAME_NON_STANDARD
(
func
)

	)

	@src/common/linuxkpi/gplv2/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_NEXT_H_


2 
	#_LINUX_FS_NEXT_H_


	)

4 
	~<löux/ˇ∑bûôy.h
>

5 
	~<löux/muãx.h
>

6 
	~<löux/shrökî.h
>

7 
	~<löux/Œi°.h
>

8 
	~<löux/uuid.h
>

10 #ö˛ude_√xà<
löux
/
fs
.
h
>

13 
	#FMODE_UNSIGNED_OFFSET
 0x2000

	)

15 
ölöe
 

16 
	$i_size_wrôe
(*
öode
, 
uöt64_t
 
size
)

18 
	`¥ötf
("%†unim∂emíãd\n", 
__FUNCTION__
);

19 
	}
}

21 
loff_t
 
deÁu…_Œ£ek
(
fûe
 *fûe,Üoff_à
off£t
, 
whí˚
);

22 
loff_t
 
gíîic_fûe_Œ£ek
(
fûe
 *fûe,Üoff_à
off£t
, 
whí˚
);

24 
	ssim∂e_©å
 {

25 
sbuf
 *
	msb
;

26 (*
	mgë
)(*, 
	mu64
 *);

27 (*
	m£t
)(*, 
	mu64
);

28 *
	md©a
;

29 c⁄° *
	mfmt
;

30 
muãx
 
	mmuãx
;

33 
ssize_t
 
sim∂e_ªad_‰om_buf„r
(
__u£r
 *
to
, 
size_t
 
cou¡
,

34 
loff_t
 *
µos
, c⁄° *
‰om
, 
size_t
 
avaûabÀ
);

35 
ssize_t
 
sim∂e_wrôe_to_buf„r
(*
to
, 
size_t
 
avaûabÀ
, 
loff_t
 *
µos
,

36 c⁄° 
__u£r
 *
‰om
, 
size_t
 
cou¡
);

38 
ölöe
 
loff_t
 
	$fixed_size_Œ£ek
(
fûe
 *fûe, 
loff_t
 
off£t
,

39 
whí˚
, 
loff_t
 
size
)

41 
	`∑nic
("%†unim∂emíãd", 
__FUNCTION__
);

42 
	}
}

45 
ölöe
 
	$__¥ötf
(1, 2)

46 
	$__sim∂e_©å_check_f‹m©
(c⁄° *
fmt
, ...)

49 
	}
}

51 
sim∂e_©å_›í
(
öode
 *öode, 
fûe
 *file,

52 (*
gë
)(*, 
u64
 *), (*
£t
)(*, u64),

53 c⁄° *
fmt
);

54 
	`sim∂e_©å_ªÀa£
(
öode
 *öode, 
fûe
 *file);

55 
ssize_t
 
	`sim∂e_©å_ªad
(
fûe
 *fûe, 
__u£r
 *
buf
,

56 
size_t
 
Àn
, 
loff_t
 *
µos
);

57 
ssize_t
 
	`sim∂e_©å_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
buf
,

58 
size_t
 
Àn
, 
loff_t
 *
µos
);

61 
	#DEFINE_SIMPLE_ATTRIBUTE
(
__f›s
, 
__gë
, 
__£t
, 
__fmt
) \

62 
__f›s
 ## 
	`_›í
(
öode
 *öode, 
fûe
 *file) \

64 
	`__sim∂e_©å_check_f‹m©
(
__fmt
, 0ull); \

65  
	`sim∂e_©å_›í
(
öode
, 
fûe
, 
__gë
, 
__£t
, 
__fmt
); \

66 
	}
} \

67 c⁄° 
fûe_›î©i⁄s
 
__f›s
 = { \

68 .
ow√r
 = 
THIS_MODULE
, \

69 .
›í
 = 
__f›s
 ## 
_›í
, \

70 .
ªÀa£
 = 
sim∂e_©å_ªÀa£
, \

71 .
ªad
 = 
sim∂e_©å_ªad
, \

72 .
wrôe
 = 
sim∂e_©å_wrôe
, \

73 .
Œ£ek
 = 
gíîic_fûe_Œ£ek
, \

74 }

	)

	@src/common/linuxkpi/gplv2/include/linux/fwnode.h

1 #i‚de‡
_LINUX_FWNODE_H_


2 
	#_LINUX_FWNODE_H_


	)

4 
	efwnode_ty≥
 {

5 
	mFWNODE_INVALID
 = 0,

6 
	mFWNODE_OF
,

7 
	mFWNODE_ACPI
,

8 
	mFWNODE_ACPI_DATA
,

9 
	mFWNODE_PDATA
,

10 
	mFWNODE_IRQCHIP
,

13 
	sfwnode_h™dÀ
 {

14 
fwnode_ty≥
 
	mty≥
;

15 
fwnode_h™dÀ
 *
	m£c⁄d¨y
;

	@src/common/linuxkpi/gplv2/include/linux/gcd.h

1 #i‚de‡
_LINUX_GCD_H_


2 
	#_LINUX_GCD_H_


	)

4 
ölöe
 

5 
	$gcd
(
a
, 
b
)

8 i‡(
b
 == 0)

9  (
a
);

10  (
	`gcd
(
b
, 
a
 % b));

11 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/gpio/consumer.h

1 #i‚de‡
__LINUX_GPIO_CONSUMER_H


2 
	#__LINUX_GPIO_CONSUMER_H


	)

4 
	~<löux/bug.h
>

5 
	~<löux/îr.h
>

6 
	~<löux/kî√l.h
>

8 
	gdevi˚
;

17 
	ggpio_desc
;

23 
	sgpio_descs
 {

24 
	mndescs
;

25 
gpio_desc
 *
	mdesc
[];

28 
	#GPIOD_FLAGS_BIT_DIR_SET
 
	`BIT
(0)

	)

29 
	#GPIOD_FLAGS_BIT_DIR_OUT
 
	`BIT
(1)

	)

30 
	#GPIOD_FLAGS_BIT_DIR_VAL
 
	`BIT
(2)

	)

36 
	egpiod_Êags
 {

37 
	mGPIOD_ASIS
 = 0,

38 
	mGPIOD_IN
 = 
GPIOD_FLAGS_BIT_DIR_SET
,

39 
	mGPIOD_OUT_LOW
 = 
GPIOD_FLAGS_BIT_DIR_SET
 | 
GPIOD_FLAGS_BIT_DIR_OUT
,

40 
	mGPIOD_OUT_HIGH
 = 
GPIOD_FLAGS_BIT_DIR_SET
 | 
GPIOD_FLAGS_BIT_DIR_OUT
 |

41 
GPIOD_FLAGS_BIT_DIR_VAL
,

45 
gpiod_cou¡
(
devi˚
 *
dev
, c⁄° *
c⁄_id
);

48 
ölöe
 
gpio_desc
 *

49 
	$gpiod_gë
(
devi˚
 *
dev
, c⁄° *
c⁄_id
, 
gpiod_Êags
 
Êags
)

51 
	`UNIMPLEMENTED
();

52  (
	`ERR_PTR
(-
ENOENT
));

53 
	}
}

54 
ölöe
 

55 
	$gpiod_put
(
gpio_desc
 *
desc
)

57 
	`UNIMPLEMENTED
();

58 
	}
}

61 
gpiod_gë_vÆue_ˇn¶ìp
(c⁄° 
gpio_desc
 *
desc
);

63 
ölöe
 

64 
	$gpiod_£t_vÆue_ˇn¶ìp
(
gpio_desc
 *
desc
, 
vÆue
)

66 
	`UNIMPLEMENTED
();

67 
	}
}

69 
gpiod_£t_¨øy_vÆue_ˇn¶ìp
(
¨øy_size
,

70 
gpio_desc
 **
desc_¨øy
,

71 *
vÆue_¨øy
);

73 
ölöe
 
gpio_desc
 *

74 
	$devm_gpiod_gë_ödex
(
devi˚
 *
dev
,

75 c⁄° *
c⁄_id
,

76 
idx
,

77 
gpiod_Êags
 
Êags
)

79 
	`UNIMPLEMENTED
();

80  
	`ERR_PTR
(-
ENOSYS
);

81 
	}
}

83 
ölöe
 
	$gpiod_£t_vÆue
(
gpio_desc
 *
desc
, 
vÆue
)

85 
	`UNIMPLEMENTED
();

87 
	`WARN_ON
(1);

88 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/hash.h

27 #i‚de‡
_LINUX_HASH_H_


28 
	#_LINUX_HASH_H_


	)

30 
	~<asm/ty≥s.h
>

31 
	~<sys/hash.h
>

32 
	~<löux/bô›s.h
>

34 
ölöe
 
u64
 
	$hash_64
(
u64
 
vÆ
, 
bôs
)

36 
u64
 
ªt
;

38 
ªt
 = (
uöt64_t
)
	`hash32_buf
(&
vÆ
, (vÆ), 
bôs
);

40  
ªt
 >> (64 - 
bôs
);

41 
	}
}

43 
ölöe
 
u32
 
	$hash_32
(
u32
 
vÆ
, 
bôs
)

45 
u32
 
ªt
;

47 
ªt
 = 
	`hash32_buf
(&
vÆ
, (vÆ), 
bôs
);

49  
ªt
 >> (32 - 
bôs
);

50 
	}
}

52 #i‡
BITS_PER_LONG
 == 64

53 
	#hash_l⁄g
(
vÆ
, 
bôs
Ë
	`hash_64
(vÆ, bôs)

	)

55 
	#hash_l⁄g
(
vÆ
, 
bôs
Ë
	`hash_32
(vÆ, bôs)

	)

	@src/common/linuxkpi/gplv2/include/linux/hashtable.h

6 #i‚de‡
_LINUX_HASHTABLE_H


7 
	#_LINUX_HASHTABLE_H


	)

9 
	~<löux/li°.h
>

10 
	~<löux/ty≥s.h
>

11 
	~<löux/kî√l.h
>

12 
	~<löux/hash.h
>

13 
	~<löux/rculi°.h
>

15 
	#DEFINE_HASHTABLE
(
«me
, 
bôs
) \

16 
hli°_hód
 
«me
[1 << (
bôs
)] = \

17 { [0 ... ((1 << (
bôs
)Ë- 1)] = 
HLIST_HEAD_INIT
 }

	)

19 
	#DEFINE_READ_MOSTLY_HASHTABLE
(
«me
, 
bôs
) \

20 
hli°_hód
 
«me
[1 << (
bôs
)] 
__ªad_mo°ly
 = \

21 { [0 ... ((1 << (
bôs
)Ë- 1)] = 
HLIST_HEAD_INIT
 }

	)

23 
	#DECLARE_HASHTABLE
(
«me
, 
bôs
) \

24 
hli°_hód
 
«me
[1 << (
bôs
)]

	)

26 
	#HASH_SIZE
(
«me
Ë(
	`ARRAY_SIZE
“ame))

	)

27 
	#HASH_BITS
(
«me
Ë
	`ûog2
(
	`HASH_SIZE
“ame))

	)

30 
	#hash_mö
(
vÆ
, 
bôs
) \

31 ((
vÆ
Ë<4 ? 
	`hash_32
(vÆ, 
bôs
Ë: 
	`hash_l⁄g
(vÆ, bôs))

	)

33 
ölöe
 
	$__hash_öô
(
hli°_hód
 *
ht
, 
sz
)

35 
i
;

37 
i
 = 0; i < 
sz
; i++)

38 
	`INIT_HLIST_HEAD
(&
ht
[
i
]);

39 
	}
}

51 
	#hash_öô
(
hashèbÀ
Ë
	`__hash_öô
(hashèbÀ, 
	`HASH_SIZE
(hashèbÀ))

	)

59 
	#hash_add
(
hashèbÀ
, 
node
, 
key
) \

60 
	`hli°_add_hód
(
node
, &
hashèbÀ
[
	`hash_mö
(
key
, 
	`HASH_BITS
(hashèbÀ))])

	)

68 
	#hash_add_rcu
(
hashèbÀ
, 
node
, 
key
) \

69 
	`hli°_add_hód_rcu
(
node
, &
hashèbÀ
[
	`hash_mö
(
key
, 
	`HASH_BITS
(hashèbÀ))])

	)

75 
ölöe
 
boﬁ
 
	$hash_hashed
(
hli°_node
 *
node
)

77  !
	`hli°_unhashed
(
node
);

78 
	}
}

80 
ölöe
 
boﬁ
 
	$__hash_em±y
(
hli°_hód
 *
ht
, 
sz
)

82 
i
;

84 
i
 = 0; i < 
sz
; i++)

85 i‡(!
	`hli°_em±y
(&
ht
[
i
]))

86  
Ál£
;

88  
åue
;

89 
	}
}

98 
	#hash_em±y
(
hashèbÀ
Ë
	`__hash_em±y
(hashèbÀ, 
	`HASH_SIZE
(hashèbÀ))

	)

104 
ölöe
 
	$hash_dñ
(
hli°_node
 *
node
)

106 
	`hli°_dñ_öô
(
node
);

107 
	}
}

113 
ölöe
 
	$hash_dñ_rcu
(
hli°_node
 *
node
)

115 
	`hli°_dñ_öô_rcu
(
node
);

116 
	}
}

125 
	#hash_f‹_óch
(
«me
, 
bkt
, 
obj
, 
membî
) \

126 (
bkt
Ë0, 
obj
 = 
NULL
; obj =NULL && (bktË< 
	`HASH_SIZE
(
«me
);\

127 (
bkt
)++)\

128 
	`hli°_f‹_óch_íåy
(
obj
, &
«me
[
bkt
], 
membî
)

	)

137 
	#hash_f‹_óch_rcu
(
«me
, 
bkt
, 
obj
, 
membî
) \

138 (
bkt
Ë0, 
obj
 = 
NULL
; obj =NULL && (bktË< 
	`HASH_SIZE
(
«me
);\

139 (
bkt
)++)\

140 
	`hli°_f‹_óch_íåy_rcu
(
obj
, &
«me
[
bkt
], 
membî
)

	)

151 
	#hash_f‹_óch_ß„
(
«me
, 
bkt
, 
tmp
, 
obj
, 
membî
) \

152 (
bkt
Ë0, 
obj
 = 
NULL
; obj =NULL && (bktË< 
	`HASH_SIZE
(
«me
);\

153 (
bkt
)++)\

154 
	`hli°_f‹_óch_íåy_ß„
(
obj
, 
tmp
, &
«me
[
bkt
], 
membî
)

	)

164 
	#hash_f‹_óch_possibÀ
(
«me
, 
obj
, 
membî
, 
key
) \

165 
	`hli°_f‹_óch_íåy
(
obj
, &
«me
[
	`hash_mö
(
key
, 
	`HASH_BITS
“ame))], 
membî
)

	)

176 
	#hash_f‹_óch_possibÀ_rcu
(
«me
, 
obj
, 
membî
, 
key
) \

177 
	`hli°_f‹_óch_íåy_rcu
(
obj
, &
«me
[
	`hash_mö
(
key
, 
	`HASH_BITS
(name))],\

178 
membî
)

	)

191 
	#hash_f‹_óch_possibÀ_rcu_nŸø˚
(
«me
, 
obj
, 
membî
, 
key
) \

192 
	`hli°_f‹_óch_íåy_rcu_nŸø˚
(
obj
, \

193 &
«me
[
	`hash_mö
(
key
, 
	`HASH_BITS
“ame))], 
membî
)

	)

204 
	#hash_f‹_óch_possibÀ_ß„
(
«me
, 
obj
, 
tmp
, 
membî
, 
key
) \

205 
	`hli°_f‹_óch_íåy_ß„
(
obj
, 
tmp
,\

206 &
«me
[
	`hash_mö
(
key
, 
	`HASH_BITS
“ame))], 
membî
)

	)

	@src/common/linuxkpi/gplv2/include/linux/hdmi.h

24 #i‚de‡
__LINUX_HDMI_H_


25 
	#__LINUX_HDMI_H_


	)

27 
	~<löux/ty≥s.h
>

28 
	~<sys/bus.h
>

29 
	~<löux/devi˚.h
>

31 
	ehdmi_öfo‰ame_ty≥
 {

32 
	mHDMI_INFOFRAME_TYPE_VENDOR
 = 0x81,

33 
	mHDMI_INFOFRAME_TYPE_AVI
 = 0x82,

34 
	mHDMI_INFOFRAME_TYPE_SPD
 = 0x83,

35 
	mHDMI_INFOFRAME_TYPE_AUDIO
 = 0x84,

38 
	#HDMI_IEEE_OUI
 0x000c03

	)

39 
	#HDMI_FORUM_IEEE_OUI
 0xc45dd8

	)

40 
	#HDMI_INFOFRAME_HEADER_SIZE
 4

	)

41 
	#HDMI_AVI_INFOFRAME_SIZE
 13

	)

42 
	#HDMI_SPD_INFOFRAME_SIZE
 25

	)

43 
	#HDMI_AUDIO_INFOFRAME_SIZE
 10

	)

45 
	#HDMI_INFOFRAME_SIZE
(
ty≥
) \

46 (
HDMI_INFOFRAME_HEADER_SIZE
 + 
HDMI_
 ## 
ty≥
 ## 
_INFOFRAME_SIZE
)

	)

48 
	shdmi_™y_öfo‰ame
 {

49 
hdmi_öfo‰ame_ty≥
 
	mty≥
;

50 
	mvîsi⁄
;

51 
	mÀngth
;

54 
	ehdmi_cﬁ‹•a˚
 {

55 
	mHDMI_COLORSPACE_RGB
,

56 
	mHDMI_COLORSPACE_YUV422
,

57 
	mHDMI_COLORSPACE_YUV444
,

58 
	mHDMI_COLORSPACE_YUV420
,

59 
	mHDMI_COLORSPACE_RESERVED4
,

60 
	mHDMI_COLORSPACE_RESERVED5
,

61 
	mHDMI_COLORSPACE_RESERVED6
,

62 
	mHDMI_COLORSPACE_IDO_DEFINED
,

65 
	ehdmi_sˇn_mode
 {

66 
	mHDMI_SCAN_MODE_NONE
,

67 
	mHDMI_SCAN_MODE_OVERSCAN
,

68 
	mHDMI_SCAN_MODE_UNDERSCAN
,

69 
	mHDMI_SCAN_MODE_RESERVED
,

72 
	ehdmi_cﬁ‹imëry
 {

73 
	mHDMI_COLORIMETRY_NONE
,

74 
	mHDMI_COLORIMETRY_ITU_601
,

75 
	mHDMI_COLORIMETRY_ITU_709
,

76 
	mHDMI_COLORIMETRY_EXTENDED
,

79 
	ehdmi_pi˘uª_a•e˘
 {

80 
	mHDMI_PICTURE_ASPECT_NONE
,

81 
	mHDMI_PICTURE_ASPECT_4_3
,

82 
	mHDMI_PICTURE_ASPECT_16_9
,

83 
	mHDMI_PICTURE_ASPECT_64_27
,

84 
	mHDMI_PICTURE_ASPECT_256_135
,

85 
	mHDMI_PICTURE_ASPECT_RESERVED
,

88 
	ehdmi_a˘ive_a•e˘
 {

89 
	mHDMI_ACTIVE_ASPECT_16_9_TOP
 = 2,

90 
	mHDMI_ACTIVE_ASPECT_14_9_TOP
 = 3,

91 
	mHDMI_ACTIVE_ASPECT_16_9_CENTER
 = 4,

92 
	mHDMI_ACTIVE_ASPECT_PICTURE
 = 8,

93 
	mHDMI_ACTIVE_ASPECT_4_3
 = 9,

94 
	mHDMI_ACTIVE_ASPECT_16_9
 = 10,

95 
	mHDMI_ACTIVE_ASPECT_14_9
 = 11,

96 
	mHDMI_ACTIVE_ASPECT_4_3_SP_14_9
 = 13,

97 
	mHDMI_ACTIVE_ASPECT_16_9_SP_14_9
 = 14,

98 
	mHDMI_ACTIVE_ASPECT_16_9_SP_4_3
 = 15,

101 
	ehdmi_exãnded_cﬁ‹imëry
 {

102 
	mHDMI_EXTENDED_COLORIMETRY_XV_YCC_601
,

103 
	mHDMI_EXTENDED_COLORIMETRY_XV_YCC_709
,

104 
	mHDMI_EXTENDED_COLORIMETRY_S_YCC_601
,

105 
	mHDMI_EXTENDED_COLORIMETRY_ADOBE_YCC_601
,

106 
	mHDMI_EXTENDED_COLORIMETRY_ADOBE_RGB
,

109 
	mHDMI_EXTENDED_COLORIMETRY_BT2020_CONST_LUM
,

110 
	mHDMI_EXTENDED_COLORIMETRY_BT2020
,

111 
	mHDMI_EXTENDED_COLORIMETRY_RESERVED
,

114 
	ehdmi_qu™tiz©i⁄_ønge
 {

115 
	mHDMI_QUANTIZATION_RANGE_DEFAULT
,

116 
	mHDMI_QUANTIZATION_RANGE_LIMITED
,

117 
	mHDMI_QUANTIZATION_RANGE_FULL
,

118 
	mHDMI_QUANTIZATION_RANGE_RESERVED
,

122 
	ehdmi_nups
 {

123 
	mHDMI_NUPS_UNKNOWN
,

124 
	mHDMI_NUPS_HORIZONTAL
,

125 
	mHDMI_NUPS_VERTICAL
,

126 
	mHDMI_NUPS_BOTH
,

129 
	ehdmi_ycc_qu™tiz©i⁄_ønge
 {

130 
	mHDMI_YCC_QUANTIZATION_RANGE_LIMITED
,

131 
	mHDMI_YCC_QUANTIZATION_RANGE_FULL
,

134 
	ehdmi_c⁄ã¡_ty≥
 {

135 
	mHDMI_CONTENT_TYPE_GRAPHICS
,

136 
	mHDMI_CONTENT_TYPE_PHOTO
,

137 
	mHDMI_CONTENT_TYPE_CINEMA
,

138 
	mHDMI_CONTENT_TYPE_GAME
,

141 
	shdmi_avi_öfo‰ame
 {

142 
hdmi_öfo‰ame_ty≥
 
	mty≥
;

143 
	mvîsi⁄
;

144 
	mÀngth
;

145 
hdmi_cﬁ‹•a˚
 
	mcﬁ‹•a˚
;

146 
hdmi_sˇn_mode
 
	msˇn_mode
;

147 
hdmi_cﬁ‹imëry
 
	mcﬁ‹imëry
;

148 
hdmi_pi˘uª_a•e˘
 
	mpi˘uª_a•e˘
;

149 
hdmi_a˘ive_a•e˘
 
	ma˘ive_a•e˘
;

150 
boﬁ
 
	môc
;

151 
hdmi_exãnded_cﬁ‹imëry
 
	mexãnded_cﬁ‹imëry
;

152 
hdmi_qu™tiz©i⁄_ønge
 
	mqu™tiz©i⁄_ønge
;

153 
hdmi_nups
 
	mnups
;

154 
	mvideo_code
;

155 
hdmi_ycc_qu™tiz©i⁄_ønge
 
	mycc_qu™tiz©i⁄_ønge
;

156 
hdmi_c⁄ã¡_ty≥
 
	mc⁄ã¡_ty≥
;

157 
	mpixñ_ª≥©
;

158 
	mt›_b¨
;

159 
	mbŸtom_b¨
;

160 
	mÀ·_b¨
;

161 
	mright_b¨
;

164 
hdmi_avi_öfo‰ame_öô
(
hdmi_avi_öfo‰ame
 *
‰ame
);

165 
ssize_t
 
hdmi_avi_öfo‰ame_∑ck
(
hdmi_avi_öfo‰ame
 *
‰ame
, *
buf„r
,

166 
size_t
 
size
);

168 
	ehdmi_•d_sdi
 {

169 
	mHDMI_SPD_SDI_UNKNOWN
,

170 
	mHDMI_SPD_SDI_DSTB
,

171 
	mHDMI_SPD_SDI_DVDP
,

172 
	mHDMI_SPD_SDI_DVHS
,

173 
	mHDMI_SPD_SDI_HDDVR
,

174 
	mHDMI_SPD_SDI_DVC
,

175 
	mHDMI_SPD_SDI_DSC
,

176 
	mHDMI_SPD_SDI_VCD
,

177 
	mHDMI_SPD_SDI_GAME
,

178 
	mHDMI_SPD_SDI_PC
,

179 
	mHDMI_SPD_SDI_BD
,

180 
	mHDMI_SPD_SDI_SACD
,

181 
	mHDMI_SPD_SDI_HDDVD
,

182 
	mHDMI_SPD_SDI_PMP
,

185 
	shdmi_•d_öfo‰ame
 {

186 
hdmi_öfo‰ame_ty≥
 
	mty≥
;

187 
	mvîsi⁄
;

188 
	mÀngth
;

189 
	mvíd‹
[8];

190 
	m¥odu˘
[16];

191 
hdmi_•d_sdi
 
	msdi
;

194 
hdmi_•d_öfo‰ame_öô
(
hdmi_•d_öfo‰ame
 *
‰ame
,

195 c⁄° *
víd‹
, c⁄° *
¥odu˘
);

196 
ssize_t
 
hdmi_•d_öfo‰ame_∑ck
(
hdmi_•d_öfo‰ame
 *
‰ame
, *
buf„r
,

197 
size_t
 
size
);

199 
	ehdmi_audio_codög_ty≥
 {

200 
	mHDMI_AUDIO_CODING_TYPE_STREAM
,

201 
	mHDMI_AUDIO_CODING_TYPE_PCM
,

202 
	mHDMI_AUDIO_CODING_TYPE_AC3
,

203 
	mHDMI_AUDIO_CODING_TYPE_MPEG1
,

204 
	mHDMI_AUDIO_CODING_TYPE_MP3
,

205 
	mHDMI_AUDIO_CODING_TYPE_MPEG2
,

206 
	mHDMI_AUDIO_CODING_TYPE_AAC_LC
,

207 
	mHDMI_AUDIO_CODING_TYPE_DTS
,

208 
	mHDMI_AUDIO_CODING_TYPE_ATRAC
,

209 
	mHDMI_AUDIO_CODING_TYPE_DSD
,

210 
	mHDMI_AUDIO_CODING_TYPE_EAC3
,

211 
	mHDMI_AUDIO_CODING_TYPE_DTS_HD
,

212 
	mHDMI_AUDIO_CODING_TYPE_MLP
,

213 
	mHDMI_AUDIO_CODING_TYPE_DST
,

214 
	mHDMI_AUDIO_CODING_TYPE_WMA_PRO
,

215 
	mHDMI_AUDIO_CODING_TYPE_CXT
,

218 
	ehdmi_audio_ßm∂e_size
 {

219 
	mHDMI_AUDIO_SAMPLE_SIZE_STREAM
,

220 
	mHDMI_AUDIO_SAMPLE_SIZE_16
,

221 
	mHDMI_AUDIO_SAMPLE_SIZE_20
,

222 
	mHDMI_AUDIO_SAMPLE_SIZE_24
,

225 
	ehdmi_audio_ßm∂e_‰equícy
 {

226 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_STREAM
,

227 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_32000
,

228 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_44100
,

229 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_48000
,

230 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_88200
,

231 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_96000
,

232 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_176400
,

233 
	mHDMI_AUDIO_SAMPLE_FREQUENCY_192000
,

236 
	ehdmi_audio_codög_ty≥_ext
 {

238 
	mHDMI_AUDIO_CODING_TYPE_EXT_CT
,

245 
	mHDMI_AUDIO_CODING_TYPE_EXT_HE_AAC
,

246 
	mHDMI_AUDIO_CODING_TYPE_EXT_HE_AAC_V2
,

247 
	mHDMI_AUDIO_CODING_TYPE_EXT_MPEG_SURROUND
,

250 
	mHDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC
,

251 
	mHDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_V2
,

252 
	mHDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC
,

253 
	mHDMI_AUDIO_CODING_TYPE_EXT_DRA
,

254 
	mHDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_SURROUND
,

255 
	mHDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC_SURROUND
 = 10,

258 
	shdmi_audio_öfo‰ame
 {

259 
hdmi_öfo‰ame_ty≥
 
	mty≥
;

260 
	mvîsi⁄
;

261 
	mÀngth
;

262 
	mch™√ls
;

263 
hdmi_audio_codög_ty≥
 
	mcodög_ty≥
;

264 
hdmi_audio_ßm∂e_size
 
	mßm∂e_size
;

265 
hdmi_audio_ßm∂e_‰equícy
 
	mßm∂e_‰equícy
;

266 
hdmi_audio_codög_ty≥_ext
 
	mcodög_ty≥_ext
;

267 
	mch™√l_Æloˇti⁄
;

268 
	mÀvñ_shi·_vÆue
;

269 
boﬁ
 
	mdownmix_öhibô
;

273 
hdmi_audio_öfo‰ame_öô
(
hdmi_audio_öfo‰ame
 *
‰ame
);

274 
ssize_t
 
hdmi_audio_öfo‰ame_∑ck
(
hdmi_audio_öfo‰ame
 *
‰ame
,

275 *
buf„r
, 
size_t
 
size
);

277 
	ehdmi_3d_°ru˘uª
 {

278 
	mHDMI_3D_STRUCTURE_INVALID
 = -1,

279 
	mHDMI_3D_STRUCTURE_FRAME_PACKING
 = 0,

280 
	mHDMI_3D_STRUCTURE_FIELD_ALTERNATIVE
,

281 
	mHDMI_3D_STRUCTURE_LINE_ALTERNATIVE
,

282 
	mHDMI_3D_STRUCTURE_SIDE_BY_SIDE_FULL
,

283 
	mHDMI_3D_STRUCTURE_L_DEPTH
,

284 
	mHDMI_3D_STRUCTURE_L_DEPTH_GFX_GFX_DEPTH
,

285 
	mHDMI_3D_STRUCTURE_TOP_AND_BOTTOM
,

286 
	mHDMI_3D_STRUCTURE_SIDE_BY_SIDE_HALF
 = 8,

290 
	shdmi_víd‹_öfo‰ame
 {

291 
hdmi_öfo‰ame_ty≥
 
	mty≥
;

292 
	mvîsi⁄
;

293 
	mÀngth
;

294 
	moui
;

295 
u8
 
	mvic
;

296 
hdmi_3d_°ru˘uª
 
	ms3d_°ru˘
;

297 
	ms3d_ext_d©a
;

300 
hdmi_víd‹_öfo‰ame_öô
(
hdmi_víd‹_öfo‰ame
 *
‰ame
);

301 
ssize_t
 
hdmi_víd‹_öfo‰ame_∑ck
(
hdmi_víd‹_öfo‰ame
 *
‰ame
,

302 *
buf„r
, 
size_t
 
size
);

304 
	uhdmi_víd‹_™y_öfo‰ame
 {

306 
hdmi_öfo‰ame_ty≥
 
	mty≥
;

307 
	mvîsi⁄
;

308 
	mÀngth
;

309 
	moui
;

310 } 
	m™y
;

311 
hdmi_víd‹_öfo‰ame
 
	mhdmi
;

326 
	uhdmi_öfo‰ame
 {

327 
hdmi_™y_öfo‰ame
 
	m™y
;

328 
hdmi_avi_öfo‰ame
 
	mavi
;

329 
hdmi_•d_öfo‰ame
 
	m•d
;

330 
hdmi_víd‹_™y_öfo‰ame
 
	mvíd‹
;

331 
hdmi_audio_öfo‰ame
 
	maudio
;

334 
ssize_t


335 
hdmi_öfo‰ame_∑ck
(
hdmi_öfo‰ame
 *
‰ame
, *
buf„r
, 
size_t
 
size
);

336 
hdmi_öfo‰ame_u≈ack
(
hdmi_öfo‰ame
 *
‰ame
, *
buf„r
);

337 
hdmi_öfo‰ame_log
(c⁄° *
Àvñ
, 
devi˚
 *
dev
,

338 
hdmi_öfo‰ame
 *
‰ame
);

	@src/common/linuxkpi/gplv2/include/linux/highmem.h

1 #i‚de‡
_LINUX_HIGHMEM_H_


2 
	#_LINUX_HIGHMEM_H_


	)

4 
	~<löux/∑ge.h
>

6 
	#PageHighMem
(
p
Ë(0)

	)

8 
ölöe
 
∑ge
 *
	$km≠_to_∑ge
(*
addr
)

10  
	`vút_to_∑ge
(
addr
);

11 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/hwmon-sysfs.h

1 #i‚de‡
_LINUX_HWMON_SYSFS_H


2 
	#_LINUX_HWMON_SYSFS_H


	)

4 
	~<löux/devi˚.h
>

6 
	s£ns‹_devi˚_©åibuã
{

7 
devi˚_©åibuã
 
	mdev_©å
;

8 
	mödex
;

10 
	#to_£ns‹_dev_©å
(
_dev_©å
) \

11 
	`c⁄èöî_of
(
_dev_©å
, 
£ns‹_devi˚_©åibuã
, 
dev_©å
)

	)

13 
	#SENSOR_ATTR
(
_«me
, 
_mode
, 
_show
, 
_°‹e
, 
_ödex
) \

14 { .
dev_©å
 = 
	`__ATTR
(
_«me
, 
_mode
, 
_show
, 
_°‹e
), \

15 .
ödex
 = 
_ödex
 }

	)

17 
	#SENSOR_DEVICE_ATTR
(
_«me
, 
_mode
, 
_show
, 
_°‹e
, 
_ödex
) \

18 
£ns‹_devi˚_©åibuã
 
£ns‹_dev_©å_
##
_«me
 \

19 
	`SENSOR_ATTR
(
_«me
, 
_mode
, 
_show
, 
_°‹e
, 
_ödex
)

	)

	@src/common/linuxkpi/gplv2/include/linux/hwmon.h

1 #i‚de‡
_LINUX_HWMON_H_


2 
	#_LINUX_HWMON_H_


	)

4 
	gdevi˚
;

5 
	g©åibuã_group
;

7 
devi˚
 *
hwm⁄_devi˚_ªgi°î
(devi˚ *
dev
);

8 
devi˚
 *

9 
hwm⁄_devi˚_ªgi°î_wôh_groups
(
devi˚
 *
dev
, c⁄° *
«me
,

10 *
drvd©a
,

11 c⁄° 
©åibuã_group
 **
groups
);

12 
devi˚
 *

13 
devm_hwm⁄_devi˚_ªgi°î_wôh_groups
(
devi˚
 *
dev
, c⁄° *
«me
,

14 *
drvd©a
,

15 c⁄° 
©åibuã_group
 **
groups
);

17 
hwm⁄_devi˚_uƒegi°î
(
devi˚
 *
dev
);

18 
devm_hwm⁄_devi˚_uƒegi°î
(
devi˚
 *
dev
);

	@src/common/linuxkpi/gplv2/include/linux/i2c-algo-bit.h

1 #i‚de‡
_LINUX_I2C_ALGO_BIT_H_


2 
	#_LINUX_I2C_ALGO_BIT_H_


	)

5 
	gi2c_ad≠ãr
;

8 
	si2c_Ægo_bô_d©a
 {

9 *
	md©a
;

10 (*
	m£tsda
Ë(*
	md©a
, 
	m°©e
);

11 (*
	m£ts˛
Ë(*
	md©a
, 
	m°©e
);

12 (*
	mgësda
Ë(*
	md©a
);

13 (*
	mgës˛
Ë(*
	md©a
);

14 (*
	m¥e_x„r
Ë(
	mi2c_ad≠ãr
 *);

15 (*
	mpo°_x„r
Ë(
	mi2c_ad≠ãr
 *);

18 
	mudñay
;

22 
	mtimeout
;

25 
i2c_bô_add_bus
(
i2c_ad≠ãr
 *);

26 
i2c_bô_add_numbîed_bus
(
i2c_ad≠ãr
 *);

27 c⁄° 
i2c_Æg‹ôhm
 
i2c_bô_Ægo
;

	@src/common/linuxkpi/gplv2/include/linux/i2c.h

1 #i‚de‡
_LINUX_I2C_H_


2 
	#_LINUX_I2C_H_


	)

4 
	~<löux/mod_devi˚èbÀ.h
>

5 
	~<löux/devi˚.h
>

6 
	~<löux/muãx.h
>

7 
	~<löux/com∂ëi⁄.h
>

8 
	~<löux/sched.h
>

9 
	~<löux/of.h
>

11 
	gi2c_ad≠ãr
;

12 
	gi2c_msg
;

16 
	si2c_msg
 {

17 
__u16
 
	maddr
;

18 
__u16
 
	mÊags
;

19 
	#I2C_M_TEN
 0x0010

	)

20 
	#I2C_M_RD
 0x0001

	)

21 
	#I2C_M_STOP
 0x8000

	)

22 
	#I2C_M_NOSTART
 0x4000

	)

23 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

24 
	#I2C_M_IGNORE_NAK
 0x1000

	)

25 
	#I2C_M_NO_RD_ACK
 0x0800

	)

26 
	#I2C_M_RECV_LEN
 0x0400

	)

27 
__u16
 
	mÀn
;

28 
__u8
 *
	mbuf
;

31 
	#I2C_FUNC_I2C
 0x00000001

	)

32 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

33 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

34 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

35 
	#I2C_FUNC_NOSTART
 0x00000010

	)

36 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

37 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

38 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

39 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

40 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

41 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

42 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

43 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

44 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

45 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

46 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

47 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

48 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

50 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

51 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

52 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

53 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

54 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

55 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

56 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

57 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

58 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

59 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

61 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

62 
I2C_FUNC_SMBUS_BYTE
 | \

63 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

64 
I2C_FUNC_SMBUS_WORD_DATA
 | \

65 
I2C_FUNC_SMBUS_PROC_CALL
 | \

66 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

67 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

68 
I2C_FUNC_SMBUS_PEC
)

	)

72 
	#I2C_CLASS_HWMON
 (1<<0Ë

	)

73 
	#I2C_CLASS_DDC
 (1<<3Ë

	)

74 
	#I2C_CLASS_SPD
 (1<<7Ë

	)

77 
	#I2C_CLIENT_TEN
 0x10

	)

79 
	#I2C_CLIENT_SLAVE
 0x20

	)

81 
	#I2C_CLIENT_END
 0xff„U

	)

86 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

87 
	ui2c_smbus_d©a
 {

88 
__u8
 
	mbyã
;

89 
__u16
 
	mw‹d
;

90 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

95 
	#I2C_SMBUS_READ
 1

	)

96 
	#I2C_SMBUS_WRITE
 0

	)

98 
	si2c_Æg‹ôhm
 {

105 (*
	mma°î_x„r
)(
i2c_ad≠ãr
 *
	mad≠
, 
i2c_msg
 *
	mmsgs
,

106 
	mnum
);

107 (*
	msmbus_x„r
Ë(
i2c_ad≠ãr
 *
	mad≠
, 
u16
 
	maddr
,

108 
	mÊags
, 
	mªad_wrôe
,

109 
u8
 
	mcomm™d
, 
	msize
, 
i2c_smbus_d©a
 *
	md©a
);

112 
u32
 (*
fun˘i⁄Æôy
Ë(
	mi2c_ad≠ãr
 *);

123 
	si2c_lock_›î©i⁄s
 {

124 (*
	mlock_bus
)(
	mi2c_ad≠ãr
 *, 
	mÊags
);

125 (*
	måylock_bus
)(
	mi2c_ad≠ãr
 *, 
	mÊags
);

126 (*
	mu∆ock_bus
)(
	mi2c_ad≠ãr
 *, 
	mÊags
);

129 
	si2c_ad≠ãr
 {

130 
moduÀ
 *
	mow√r
;

131 
	m˛ass
;

132 c⁄° 
i2c_Æg‹ôhm
 *
	mÆgo
;

133 *
	mÆgo_d©a
;

136 c⁄° 
i2c_lock_›î©i⁄s
 *
	mlock_›s
;

137 
muãx
 
	mbus_lock
;

138 
	mtimeout
;

139 
	mªåõs
;

140 
devi˚
 
	mdev
;

142 
	mƒ
;

143 
	m«me
[48];

144 
com∂ëi⁄
 
	mdev_ªÀa£d
;

148 
	si2c_bﬂrd_öfo
 {

149 
	mty≥
[
I2C_NAME_SIZE
];

150 
	mÊags
;

151 
	maddr
;

152 *
	m∂©f‹m_d©a
;

153 
dev_¨chd©a
 *
	m¨chd©a
;

154 
devi˚_node
 *
	mof_node
;

155 
fwnode_h™dÀ
 *
	mfwnode
;

156 
	múq
;

159 
	si2c_˛õ¡
 {

160 
	mÊags
;

161 
	maddr
;

164 
	m«me
[
I2C_NAME_SIZE
];

165 
i2c_ad≠ãr
 *
	mad≠ãr
;

166 
devi˚
 
	mdev
;

167 
	múq
;

168 
li°_hód
 
	mdëe˘ed
;

169 #i‡
IS_ENABLED
(
CONFIG_I2C_SLAVE
)

170 
i2c_¶ave_cb_t
 
	m¶ave_cb
;

174 
	si2c_drivî
 {

175 
	m˛ass
;

180 (*
	m©èch_ad≠ãr
)(
	mi2c_ad≠ãr
 *Ë
	m__dïªˇãd
;

183 (*
	m¥obe
)(
	mi2c_˛õ¡
 *, c⁄° 
	mi2c_devi˚_id
 *);

184 (*
	mªmove
)(
	mi2c_˛õ¡
 *);

187 (*
	mshutdown
)(
	mi2c_˛õ¡
 *);

194 (*
	mÆît
)(
	mi2c_˛õ¡
 *, 
	md©a
);

199 (*
	mcomm™d
)(
i2c_˛õ¡
 *
	m˛õ¡
, 
	mcmd
, *
	m¨g
);

201 
devi˚_drivî
 
	mdrivî
;

202 c⁄° 
i2c_devi˚_id
 *
	mid_èbÀ
;

205 (*
	mdëe˘
)(
	mi2c_˛õ¡
 *, 
	mi2c_bﬂrd_öfo
 *);

206 c⁄° *
	maddªss_li°
;

207 
li°_hód
 
	m˛õ¡s
;

209 
	#to_i2c_drivî
(
d
Ë
	`c⁄èöî_of
(d, 
i2c_drivî
, 
drivî
)

	)

212 
ölöe
 

213 
	$i2c_ad≠ãr_id
(
i2c_ad≠ãr
 *
ad≠
)

215  
ad≠
->
ƒ
;

216 
	}
}

218 
i2c_˛õ¡
 *

219 
i2c_√w_devi˚
(
i2c_ad≠ãr
 *
ad≠
, 
i2c_bﬂrd_öfo
 c⁄° *
öfo
);

220 
i2c_add_ad≠ãr
(
i2c_ad≠ãr
 *
ad≠ãr
);

222 
i2c_dñ_ad≠ãr
(
i2c_ad≠ãr
 *);

224 
i2c_ªgi°î_drivî
(
moduÀ
 *, 
i2c_drivî
 *);

225 
i2c_dñ_drivî
(
i2c_drivî
 *);

228 
i2c_å™s„r
(
i2c_ad≠ãr
 *
ad≠
, 
i2c_msg
 *
msgs
,

229 
num
);

232 
	#__i2c_å™s„r
(
a
, 
m
, 
n
Ë
	`i2c_å™s„r
◊, m,Ç)

	)

234 
ölöe
 

235 
	$i2c_uƒegi°î_devi˚
(
i2c_˛õ¡
 *
˛õ¡
)

237 
	`devi˚_uƒegi°î
(&
˛õ¡
->
dev
);

238 
	}
}

240 
ölöe
 *

241 
	$i2c_gë_ad≠d©a
(c⁄° 
i2c_ad≠ãr
 *
dev
)

243  
	`dev_gë_drvd©a
(&
dev
->dev);

244 
	}
}

246 
ölöe
 

247 
	$i2c_£t_ad≠d©a
(
i2c_ad≠ãr
 *
dev
, *
d©a
)

249 
	`dev_£t_drvd©a
(&
dev
->dev, 
d©a
);

250 
	}
}

258 
ölöe
 

259 
	$i2c_lock_bus
(
i2c_ad≠ãr
 *
ad≠ãr
, 
Êags
)

261 
ad≠ãr
->
lock_›s
->
	`lock_bus
◊d≠ãr, 
Êags
);

262 
	}
}

272 
ölöe
 

273 
	$i2c_åylock_bus
(
i2c_ad≠ãr
 *
ad≠ãr
, 
Êags
)

275  
ad≠ãr
->
lock_›s
->
	`åylock_bus
◊d≠ãr, 
Êags
);

276 
	}
}

284 
ölöe
 

285 
	$i2c_u∆ock_bus
(
i2c_ad≠ãr
 *
ad≠ãr
, 
Êags
)

287 
ad≠ãr
->
lock_›s
->
	`u∆ock_bus
◊d≠ãr, 
Êags
);

288 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/interval_tree.h

2 #i‚de‡
_LINUX_INTERVAL_TREE_H


3 
	#_LINUX_INTERVAL_TREE_H


	)

5 
	~<löux/rbåì.h
>

7 
	söãrvÆ_åì_node
 {

8 
rb_node
 
	mrb
;

9 
	m°¨t
;

10 
	mœ°
;

11 
	m__subåì_œ°
;

15 
öãrvÆ_åì_ö£π
(
öãrvÆ_åì_node
 *
node
,

16 
rb_roŸ_ˇched
 *
roŸ
);

19 
öãrvÆ_åì_ªmove
(
öãrvÆ_åì_node
 *
node
,

20 
rb_roŸ_ˇched
 *
roŸ
);

22 
öãrvÆ_åì_node
 *

23 
öãrvÆ_åì_ôî_fú°
(
rb_roŸ_ˇched
 *
roŸ
,

24 
°¨t
, 
œ°
);

26 
öãrvÆ_åì_node
 *

27 
öãrvÆ_åì_ôî_√xt
(
öãrvÆ_åì_node
 *
node
,

28 
°¨t
, 
œ°
);

	@src/common/linuxkpi/gplv2/include/linux/interval_tree_generic.h

22 
	~<löux/rbåì_augmíãd.h
>

40 
	#INTERVAL_TREE_DEFINE
(
ITSTRUCT
, 
ITRB
, 
ITTYPE
, 
ITSUBTREE
, \

41 
ITSTART
, 
ITLAST
, 
ITSTATIC
, 
ITPREFIX
) \

45 
ölöe
 
ITTYPE
 
ITPREFIX
 ## 
	`_compuã_subåì_œ°
(
ITSTRUCT
 *
node
) \

47 
ITTYPE
 
max
 = 
	`ITLAST
(
node
), 
subåì_œ°
; \

48 i‡(
node
->
ITRB
.
rb_À·
) { \

49 
subåì_œ°
 = 
	`rb_íåy
(
node
->
ITRB
.
rb_À·
, \

50 
ITSTRUCT
, 
ITRB
)->
ITSUBTREE
; \

51 i‡(
max
 < 
subåì_œ°
) \

52 
max
 = 
subåì_œ°
; \

54 i‡(
node
->
ITRB
.
rb_right
) { \

55 
subåì_œ°
 = 
	`rb_íåy
(
node
->
ITRB
.
rb_right
, \

56 
ITSTRUCT
, 
ITRB
)->
ITSUBTREE
; \

57 i‡(
max
 < 
subåì_œ°
) \

58 
max
 = 
subåì_œ°
; \

60  
max
; \

63 
	`RB_DECLARE_CALLBACKS
(, 
ITPREFIX
 ## 
_augmít
, 
ITSTRUCT
, 
ITRB
, \

64 
ITTYPE
, 
ITSUBTREE
, 
ITPREFIX
 ## 
_compuã_subåì_œ°
) \

68 
ITSTATIC
 
ITPREFIX
 ## 
	`_ö£π
(
ITSTRUCT
 *
node
, \

69 
rb_roŸ_ˇched
 *
roŸ
) \

71 
rb_node
 **
lök
 = &
roŸ
->
rb_roŸ
.rb_node, *
rb_∑ª¡
 = 
NULL
; \

72 
ITTYPE
 
°¨t
 = 
	`ITSTART
(
node
), 
œ°
 = 
	`ITLAST
(node); \

73 
ITSTRUCT
 *
∑ª¡
; \

74 
boﬁ
 
À·mo°
 = 
åue
; \

76 *
lök
) { \

77 
rb_∑ª¡
 = *
lök
; \

78 
∑ª¡
 = 
	`rb_íåy
(
rb_∑ª¡
, 
ITSTRUCT
, 
ITRB
); \

79 i‡(
∑ª¡
->
ITSUBTREE
 < 
œ°
) \

80 
∑ª¡
->
ITSUBTREE
 = 
œ°
; \

81 i‡(
°¨t
 < 
	`ITSTART
(
∑ª¡
)) \

82 
lök
 = &
∑ª¡
->
ITRB
.
rb_À·
; \

84 
lök
 = &
∑ª¡
->
ITRB
.
rb_right
; \

85 
À·mo°
 = 
Ál£
; \

89 
node
->
ITSUBTREE
 = 
œ°
; \

90 
	`rb_lök_node
(&
node
->
ITRB
, 
rb_∑ª¡
, 
lök
); \

91 
	`rb_ö£π_augmíãd_ˇched
(&
node
->
ITRB
, 
roŸ
, \

92 
À·mo°
, &
ITPREFIX
 ## 
_augmít
); \

95 
ITSTATIC
 
ITPREFIX
 ## 
	`_ªmove
(
ITSTRUCT
 *
node
, \

96 
rb_roŸ_ˇched
 *
roŸ
) \

98 
	`rb_îa£_augmíãd_ˇched
(&
node
->
ITRB
, 
roŸ
, &
ITPREFIX
 ## 
_augmít
); \

110 
ITSTRUCT
 * \

111 
ITPREFIX
 ## 
	`_subåì_£¨ch
(
ITSTRUCT
 *
node
, 
ITTYPE
 
°¨t
, ITTYPE 
œ°
) \

113 
åue
) { \

118 i‡(
node
->
ITRB
.
rb_À·
) { \

119 
ITSTRUCT
 *
À·
 = 
	`rb_íåy
(
node
->
ITRB
.
rb_À·
, \

120 
ITSTRUCT
, 
ITRB
); \

121 i‡(
°¨t
 <
À·
->
ITSUBTREE
) { \

130 
node
 = 
À·
; \

134 i‡(
	`ITSTART
(
node
Ë<
œ°
) { \

135 i‡(
°¨t
 <
	`ITLAST
(
node
)) \

136  
node
; \

137 i‡(
node
->
ITRB
.
rb_right
) { \

138 
node
 = 
	`rb_íåy
“ode->
ITRB
.
rb_right
, \

139 
ITSTRUCT
, 
ITRB
); \

140 i‡(
°¨t
 <
node
->
ITSUBTREE
) \

144  
NULL
; \

148 
ITSTATIC
 
ITSTRUCT
 * \

149 
ITPREFIX
 ## 
	`_ôî_fú°
(
rb_roŸ_ˇched
 *
roŸ
, \

150 
ITTYPE
 
°¨t
, ITTYPE 
œ°
) \

152 
ITSTRUCT
 *
node
, *
À·mo°
; \

154 i‡(!
roŸ
->
rb_roŸ
.
rb_node
) \

155  
NULL
; \

170 
node
 = 
	`rb_íåy
(
roŸ
->
rb_roŸ
.
rb_node
, 
ITSTRUCT
, 
ITRB
); \

171 i‡(
node
->
ITSUBTREE
 < 
°¨t
) \

172  
NULL
; \

174 
À·mo°
 = 
	`rb_íåy
(
roŸ
->
rb_À·mo°
, 
ITSTRUCT
, 
ITRB
); \

175 i‡(
	`ITSTART
(
À·mo°
Ë> 
œ°
) \

176  
NULL
; \

178  
ITPREFIX
 ## 
	`_subåì_£¨ch
(
node
, 
°¨t
, 
œ°
); \

181 
ITSTATIC
 
ITSTRUCT
 * \

182 
ITPREFIX
 ## 
	`_ôî_√xt
(
ITSTRUCT
 *
node
, 
ITTYPE
 
°¨t
, ITTYPE 
œ°
) \

184 
rb_node
 *
rb
 = 
node
->
ITRB
.
rb_right
, *
¥ev
; \

186 
åue
) { \

194 i‡(
rb
) { \

195 
ITSTRUCT
 *
right
 = 
	`rb_íåy
(
rb
, ITSTRUCT, 
ITRB
); \

196 i‡(
°¨t
 <
right
->
ITSUBTREE
) \

197  
ITPREFIX
 ## 
	`_subåì_£¨ch
(
right
, \

198 
°¨t
, 
œ°
); \

203 
rb
 = 
	`rb_∑ª¡
(&
node
->
ITRB
); \

204 i‡(!
rb
) \

205  
NULL
; \

206 
¥ev
 = &
node
->
ITRB
; \

207 
node
 = 
	`rb_íåy
(
rb
, 
ITSTRUCT
, 
ITRB
); \

208 
rb
 = 
node
->
ITRB
.
rb_right
; \

209 } 
¥ev
 =
rb
); \

212 i‡(
œ°
 < 
	`ITSTART
(
node
)) \

213  
NULL
; \

214 i‡(
°¨t
 <
	`ITLAST
(
node
)) \

215  
node
; \

217 }

	)

	@src/common/linuxkpi/gplv2/include/linux/io.h

1 #i‚def 
_LINUX_GPLV2_IO_H_


2 
	#_LINUX_GPLV2_IO_H_


	)

4 #ö˛ude_√xà<
löux
/
io
.
h
>

6 #i‡
deföed
(
__amd64__
Ë|| deföed(
__i386__
Ë|| deföed(
__powîpc__
)

7 
¨ch_io_ª£rve_memty≥_wc
(
ªsour˚_size_t
 
°¨t
,Ñesour˚_size_à
size
);

8 
¨ch_io_‰ì_memty≥_wc
(
ªsour˚_size_t
 
°¨t
,Ñesour˚_size_à
size
);

	@src/common/linuxkpi/gplv2/include/linux/iommu.h

19 #i‚de‡
__LINUX_IOMMU_H


20 
	#__LINUX_IOMMU_H


	)

22 
	~<löux/sˇâîli°.h
>

23 
	~<löux/devi˚.h
>

24 
	~<löux/ty≥s.h
>

25 
	~<löux/î∫o.h
>

26 
	~<löux/îr.h
>

27 
	~<löux/of.h
>

29 
	#IOMMU_READ
 (1 << 0)

	)

30 
	#IOMMU_WRITE
 (1 << 1)

	)

31 
	#IOMMU_CACHE
 (1 << 2Ë

	)

32 
	#IOMMU_NOEXEC
 (1 << 3)

	)

33 
	#IOMMU_MMIO
 (1 << 4Ë

	)

43 
	#IOMMU_PRIV
 (1 << 5)

	)

45 
	giommu_›s
;

46 
	giommu_group
;

47 
	gbus_ty≥
;

48 
	gdevi˚
;

49 
	giommu_domaö
;

50 
	gnŸifõr_block
;

53 
	#IOMMU_FAULT_READ
 0x0

	)

54 
	#IOMMU_FAULT_WRITE
 0x1

	)

56 (*
	tiommu_Áu…_h™dÀr_t
)(
	tiommu_domaö
 *,

57 
	tdevi˚
 *, , , *);

59 
	siommu_domaö_geomëry
 {

60 
dma_addr_t
 
≠îtuª_°¨t
;

61 
dma_addr_t
 
≠îtuª_íd
;

62 
boﬁ
 
f‹˚_≠îtuª
;

66 
	#__IOMMU_DOMAIN_PAGING
 (1U << 0Ë

	)

67 
	#__IOMMU_DOMAIN_DMA_API
 (1U << 1Ë

	)

69 
	#__IOMMU_DOMAIN_PT
 (1U << 2Ë

	)

83 
	#IOMMU_DOMAIN_BLOCKED
 (0U)

	)

84 
	#IOMMU_DOMAIN_IDENTITY
 (
__IOMMU_DOMAIN_PT
)

	)

85 
	#IOMMU_DOMAIN_UNMANAGED
 (
__IOMMU_DOMAIN_PAGING
)

	)

86 
	#IOMMU_DOMAIN_DMA
 (
__IOMMU_DOMAIN_PAGING
 | \

87 
__IOMMU_DOMAIN_DMA_API
)

	)

89 
	siommu_domaö
 {

90 
ty≥
;

91 c⁄° 
iommu_›s
 *
›s
;

92 
pgsize_bôm≠
;

93 
iommu_Áu…_h™dÀr_t
 
h™dÀr
;

94 *
h™dÀr_tokí
;

95 
iommu_domaö_geomëry
 
geomëry
;

96 *
iova_cookõ
;

99 
	eiommu_ˇp
 {

100 
IOMMU_CAP_CACHE_COHERENCY
,

102 
IOMMU_CAP_INTR_REMAP
,

103 
IOMMU_CAP_NOEXEC
,

119 
	eiommu_©å
 {

120 
DOMAIN_ATTR_GEOMETRY
,

121 
DOMAIN_ATTR_PAGING
,

122 
DOMAIN_ATTR_WINDOWS
,

123 
DOMAIN_ATTR_FSL_PAMU_STASH
,

124 
DOMAIN_ATTR_FSL_PAMU_ENABLE
,

125 
DOMAIN_ATTR_FSL_PAMUV1
,

126 
DOMAIN_ATTR_NESTING
,

127 
DOMAIN_ATTR_MAX
,

131 
	eiommu_ªsv_ty≥
 {

133 
IOMMU_RESV_DIRECT
,

135 
IOMMU_RESV_RESERVED
,

137 
IOMMU_RESV_MSI
,

139 
IOMMU_RESV_SW_MSI
,

150 
	siommu_ªsv_ªgi⁄
 {

151 
li°_hód
 
li°
;

152 
phys_addr_t
 
°¨t
;

153 
size_t
 
Àngth
;

154 
¥Ÿ
;

155 
iommu_ªsv_ty≥
 
ty≥
;

158 #ifde‡
CONFIG_IOMMU_API


166 
	siommu_›s
 {};

167 
	siommu_group
 {};

168 
	siommu_fw•ec
 {};

169 
	siommu_devi˚
 {};

171 
ölöe
 
boﬁ
 
	$iommu_¥e£¡
(
bus_ty≥
 *
bus
)

173  
Ál£
;

174 
	}
}

176 
ölöe
 
boﬁ
 
	$iommu_ˇ∑bÀ
(
bus_ty≥
 *
bus
, 
iommu_ˇp
 
ˇp
)

178  
Ál£
;

179 
	}
}

181 
ölöe
 
iommu_domaö
 *
	$iommu_domaö_Æloc
(
bus_ty≥
 *
bus
)

183  
NULL
;

184 
	}
}

186 
ölöe
 
iommu_group
 *
	$iommu_group_gë_by_id
(
id
)

188  
NULL
;

189 
	}
}

191 
ölöe
 
	$iommu_domaö_‰ì
(
iommu_domaö
 *
domaö
)

193 
	}
}

195 
ölöe
 
	$iommu_©èch_devi˚
(
iommu_domaö
 *
domaö
,

196 
devi˚
 *
dev
)

198  -
ENODEV
;

199 
	}
}

201 
ölöe
 
	$iommu_dëach_devi˚
(
iommu_domaö
 *
domaö
,

202 
devi˚
 *
dev
)

204 
	}
}

206 
ölöe
 
iommu_domaö
 *
	$iommu_gë_domaö_f‹_dev
(
devi˚
 *
dev
)

208  
NULL
;

209 
	}
}

211 
ölöe
 
	$iommu_m≠
(
iommu_domaö
 *
domaö
, 
iova
,

212 
phys_addr_t
 
∑ddr
, 
size_t
 
size
, 
¥Ÿ
)

214  -
ENODEV
;

215 
	}
}

217 
ölöe
 
	$iommu_unm≠
(
iommu_domaö
 *
domaö
, 
iova
,

218 
size_t
 
size
)

220  -
ENODEV
;

221 
	}
}

223 
ölöe
 
	$iommu_unm≠_Á°
(
iommu_domaö
 *
domaö
, 
iova
,

224 
gÂ_‹dî
)

226  -
ENODEV
;

227 
	}
}

229 
ölöe
 
size_t
 
	$iommu_m≠_sg
(
iommu_domaö
 *
domaö
,

230 
iova
, 
sˇâîli°
 *
sg
,

231 
√¡s
, 
¥Ÿ
)

233  -
ENODEV
;

234 
	}
}

236 
ölöe
 
	$iommu_Êush_éb_Æl
(
iommu_domaö
 *
domaö
)

238 
	}
}

240 
ölöe
 
	$iommu_éb_ønge_add
(
iommu_domaö
 *
domaö
,

241 
iova
, 
size_t
 
size
)

243 
	}
}

245 
ölöe
 
	$iommu_éb_sync
(
iommu_domaö
 *
domaö
)

247 
	}
}

249 
ölöe
 
	$iommu_domaö_wödow_íabÀ
(
iommu_domaö
 *
domaö
,

250 
u32
 
wnd_ƒ
, 
phys_addr_t
 
∑ddr
,

251 
u64
 
size
, 
¥Ÿ
)

253  -
ENODEV
;

254 
	}
}

256 
ölöe
 
	$iommu_domaö_wödow_dißbÀ
(
iommu_domaö
 *
domaö
,

257 
u32
 
wnd_ƒ
)

259 
	}
}

261 
ölöe
 
phys_addr_t
 
	$iommu_iova_to_phys
(
iommu_domaö
 *
domaö
, 
dma_addr_t
 
iova
)

264 
	}
}

266 
ölöe
 
	$iommu_£t_Áu…_h™dÀr
(
iommu_domaö
 *
domaö
,

267 
iommu_Áu…_h™dÀr_t
 
h™dÀr
, *
tokí
)

269 
	}
}

271 
ölöe
 
	$iommu_gë_ªsv_ªgi⁄s
(
devi˚
 *
dev
,

272 
li°_hód
 *
li°
)

274 
	}
}

276 
ölöe
 
	$iommu_put_ªsv_ªgi⁄s
(
devi˚
 *
dev
,

277 
li°_hód
 *
li°
)

279 
	}
}

281 
ölöe
 
	$iommu_gë_group_ªsv_ªgi⁄s
(
iommu_group
 *
group
,

282 
li°_hód
 *
hód
)

284  -
ENODEV
;

285 
	}
}

287 
ölöe
 
	$iommu_ªque°_dm_f‹_dev
(
devi˚
 *
dev
)

289  -
ENODEV
;

290 
	}
}

292 
ölöe
 
	$iommu_©èch_group
(
iommu_domaö
 *
domaö
,

293 
iommu_group
 *
group
)

295  -
ENODEV
;

296 
	}
}

298 
ölöe
 
	$iommu_dëach_group
(
iommu_domaö
 *
domaö
,

299 
iommu_group
 *
group
)

301 
	}
}

303 
ölöe
 
iommu_group
 *
	$iommu_group_Æloc
()

305  
	`ERR_PTR
(-
ENODEV
);

306 
	}
}

308 
ölöe
 *
	$iommu_group_gë_iommud©a
(
iommu_group
 *
group
)

310  
NULL
;

311 
	}
}

313 
ölöe
 
iommu_group_£t_iommud©a
(
iommu_group
 *
group
,

314 *
iommu_d©a
,

315 (*
ªÀa£
)(*
iommu_d©a
))

317 
	}
}

319 
ölöe
 
	$iommu_group_£t_«me
(
iommu_group
 *
group
,

320 c⁄° *
«me
)

322  -
ENODEV
;

323 
	}
}

325 
ölöe
 
	$iommu_group_add_devi˚
(
iommu_group
 *
group
,

326 
devi˚
 *
dev
)

328  -
ENODEV
;

329 
	}
}

331 
ölöe
 
	$iommu_group_ªmove_devi˚
(
devi˚
 *
dev
)

333 
	}
}

335 
ölöe
 
iommu_group_f‹_óch_dev
(
iommu_group
 *
group
,

336 *
d©a
,

337 (*
‚
)(
devi˚
 *, *))

339  -
ENODEV
;

340 
	}
}

342 
ölöe
 
iommu_group
 *
	$iommu_group_gë
(
devi˚
 *
dev
)

344  
NULL
;

345 
	}
}

347 
ölöe
 
	$iommu_group_put
(
iommu_group
 *
group
)

349 
	}
}

351 
ölöe
 
	$iommu_group_ªgi°î_nŸifõr
(
iommu_group
 *
group
,

352 
nŸifõr_block
 *
nb
)

354  -
ENODEV
;

355 
	}
}

357 
ölöe
 
	$iommu_group_uƒegi°î_nŸifõr
(
iommu_group
 *
group
,

358 
nŸifõr_block
 *
nb
)

361 
	}
}

363 
ölöe
 
	$iommu_group_id
(
iommu_group
 *
group
)

365  -
ENODEV
;

366 
	}
}

368 
ölöe
 
	$iommu_domaö_gë_©å
(
iommu_domaö
 *
domaö
,

369 
iommu_©å
 
©å
, *
d©a
)

371  -
EINVAL
;

372 
	}
}

374 
ölöe
 
	$iommu_domaö_£t_©å
(
iommu_domaö
 *
domaö
,

375 
iommu_©å
 
©å
, *
d©a
)

377  -
EINVAL
;

378 
	}
}

380 
ölöe
 
	$iommu_devi˚_ªgi°î
(
iommu_devi˚
 *
iommu
)

382  -
ENODEV
;

383 
	}
}

385 
ölöe
 
	$iommu_devi˚_£t_›s
(
iommu_devi˚
 *
iommu
,

386 c⁄° 
iommu_›s
 *
›s
)

388 
	}
}

390 
ölöe
 
	$iommu_devi˚_£t_fwnode
(
iommu_devi˚
 *
iommu
,

391 
fwnode_h™dÀ
 *
fwnode
)

393 
	}
}

395 
ölöe
 
iommu_devi˚
 *
	$dev_to_iommu_devi˚
(
devi˚
 *
dev
)

397  
NULL
;

398 
	}
}

400 
ölöe
 
	$iommu_devi˚_uƒegi°î
(
iommu_devi˚
 *
iommu
)

402 
	}
}

404 
ölöe
 
	$iommu_devi˚_sysfs_add
(
iommu_devi˚
 *
iommu
,

405 
devi˚
 *
∑ª¡
,

406 c⁄° 
©åibuã_group
 **
groups
,

407 c⁄° *
fmt
, ...)

409  -
ENODEV
;

410 
	}
}

412 
ölöe
 
	$iommu_devi˚_sysfs_ªmove
(
iommu_devi˚
 *
iommu
)

414 
	}
}

416 
ölöe
 
	$iommu_devi˚_lök
(
devi˚
 *
dev
, devi˚ *
lök
)

418  -
EINVAL
;

419 
	}
}

421 
ölöe
 
	$iommu_devi˚_u∆ök
(
devi˚
 *
dev
, devi˚ *
lök
)

423 
	}
}

425 
ölöe
 
	$iommu_fw•ec_öô
(
devi˚
 *
dev
,

426 
fwnode_h™dÀ
 *
iommu_fwnode
,

427 c⁄° 
iommu_›s
 *
›s
)

429  -
ENODEV
;

430 
	}
}

432 
ölöe
 
	$iommu_fw•ec_‰ì
(
devi˚
 *
dev
)

434 
	}
}

436 
ölöe
 
	$iommu_fw•ec_add_ids
(
devi˚
 *
dev
, 
u32
 *
ids
,

437 
num_ids
)

439  -
ENODEV
;

440 
	}
}

442 
ölöe


443 c⁄° 
iommu_›s
 *
	$iommu_›s_‰om_fwnode
(
fwnode_h™dÀ
 *
fwnode
)

445  
NULL
;

446 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/irq.h

1 #i‚de‡
_LINUX_IRQ_H


2 
	#_LINUX_IRQ_H


	)

4 
	~<löux/smp.h
>

5 
	~<löux/ˇche.h
>

6 
	~<löux/•ölock.h
>

7 
	~<löux/gÂ.h
>

8 
	~<löux/öãºu±.h
>

9 
	~<löux/úqh™dÀr.h
>

10 
	~<löux/î∫o.h
>

11 
	~<löux/waô.h
>

12 
	~<löux/io.h
>

13 
	~<löux/kthªad.h
>

14 
	~<löux/bôm≠.h
>

16 
	~<asm/¥o˚ss‹.h
>

18 #i‡
deföed
(
__i386__
Ë|| deföed(
__amd64__
Ë|| deföed(
__powîpc__
)

19 
	#NR_IRQS
 512

	)

24 
	#IRQ_BITMAP_BITS
 
NR_IRQS


	)

26 
muãx
 
•¨£_úq_lock
;

28 
DECLARE_BITMAP
(
Æloˇãd_úqs
, 
IRQ_BITMAP_BITS
);

30 
úq_chù
 
no_úq_chù
;

31 
	gmsi_desc
;

32 
ƒ_úqs
;

33 
	súq_comm⁄_d©a
 {

34 
	m°©e_u£_ac˚ss‹s
;

35 *
	mh™dÀr_d©a
;

36 
msi_desc
 *
	mmsi_desc
;

39 
	súq_d©a
 {

40 
u32
 
	mmask
;

41 
	múq
;

42 
	mhwúq
;

43 
úq_comm⁄_d©a
 *
	mcomm⁄
;

44 
úq_chù
 *
	mchù
;

45 
úq_domaö
 *
	mdomaö
;

46 *
	mchù_d©a
;

49 
	súq_chù
 {

50 c⁄° *
	m«me
;

51 (*
	múq_mask
)(
úq_d©a
 *
	md©a
);

52 (*
	múq_unmask
)(
úq_d©a
 *
	md©a
);

54 #i‚de‡
ARCH_IRQ_INIT_FLAGS


55 
	#ARCH_IRQ_INIT_FLAGS
 0

	)

58 
	#IRQ_DEFAULT_INIT_FLAGS
 
ARCH_IRQ_INIT_FLAGS


	)

61 
	mIRQCHIP_SET_TYPE_MASKED
 = (1 << 0),

62 
	mIRQCHIP_EOI_IF_HANDLED
 = (1 << 1),

63 
	mIRQCHIP_MASK_ON_SUSPEND
 = (1 << 2),

64 
	mIRQCHIP_ONOFFLINE_ENABLED
 = (1 << 3),

65 
	mIRQCHIP_SKIP_SET_WAKE
 = (1 << 4),

66 
	mIRQCHIP_ONESHOT_SAFE
 = (1 << 5),

67 
	mIRQCHIP_EOI_THREADED
 = (1 << 6),

70 
	súqa˘i⁄
 {

71 
úq_h™dÀr_t
 
	mh™dÀr
;

72 *
	mdev_id
;

73 
úqa˘i⁄
 *
	m√xt
;

74 
úq_h™dÀr_t
 
	mthªad_‚
;

75 
èsk_°ru˘
 *
	mthªad
;

76 
úqa˘i⁄
 *
	m£c⁄d¨y
;

77 
	múq
;

78 
	mÊags
;

79 
	mthªad_Êags
;

80 
	mthªad_mask
;

81 c⁄° *
	m«me
;

84 
	~<löux/úqdesc.h
>

87 
	mIRQ_TYPE_NONE
 = 0x00000000,

88 
	mIRQ_TYPE_EDGE_RISING
 = 0x00000001,

89 
	mIRQ_TYPE_EDGE_FALLING
 = 0x00000002,

90 
	mIRQ_TYPE_EDGE_BOTH
 = (
IRQ_TYPE_EDGE_FALLING
 | 
IRQ_TYPE_EDGE_RISING
),

91 
	mIRQ_TYPE_LEVEL_HIGH
 = 0x00000004,

92 
	mIRQ_TYPE_LEVEL_LOW
 = 0x00000008,

93 
	mIRQ_TYPE_LEVEL_MASK
 = (
IRQ_TYPE_LEVEL_LOW
 | 
IRQ_TYPE_LEVEL_HIGH
),

94 
	mIRQ_TYPE_SENSE_MASK
 = 0x0000000f,

95 
	mIRQ_TYPE_DEFAULT
 = 
IRQ_TYPE_SENSE_MASK
,

97 
	mIRQ_TYPE_PROBE
 = 0x00000010,

99 
	mIRQ_LEVEL
 = (1 << 8),

100 
	mIRQ_PER_CPU
 = (1 << 9),

101 
	mIRQ_NOPROBE
 = (1 << 10),

102 
	mIRQ_NOREQUEST
 = (1 << 11),

103 
	mIRQ_NOAUTOEN
 = (1 << 12),

104 
	mIRQ_NO_BALANCING
 = (1 << 13),

105 
	mIRQ_MOVE_PCNTXT
 = (1 << 14),

106 
	mIRQ_NESTED_THREAD
 = (1 << 15),

107 
	mIRQ_NOTHREAD
 = (1 << 16),

108 
	mIRQ_PER_CPU_DEVID
 = (1 << 17),

109 
	mIRQ_IS_POLLED
 = (1 << 18),

110 
	mIRQ_DISABLE_UNLAZY
 = (1 << 19),

114 
	mIRQD_TRIGGER_MASK
 = 0xf,

115 
	mIRQD_SETAFFINITY_PENDING
 = (1 << 8),

116 
	mIRQD_NO_BALANCING
 = (1 << 10),

117 
	mIRQD_PER_CPU
 = (1 << 11),

118 
	mIRQD_AFFINITY_SET
 = (1 << 12),

119 
	mIRQD_LEVEL
 = (1 << 13),

120 
	mIRQD_WAKEUP_STATE
 = (1 << 14),

121 
	mIRQD_MOVE_PCNTXT
 = (1 << 15),

122 
	mIRQD_IRQ_DISABLED
 = (1 << 16),

123 
	mIRQD_IRQ_MASKED
 = (1 << 17),

124 
	mIRQD_IRQ_INPROGRESS
 = (1 << 18),

125 
	mIRQD_WAKEUP_ARMED
 = (1 << 19),

126 
	mIRQD_FORWARDED_TO_VCPU
 = (1 << 20),

130 
	mIRQS_AUTODETECT
 = 0x00000001,

131 
	mIRQS_SPURIOUS_DISABLED
 = 0x00000002,

132 
	mIRQS_POLL_INPROGRESS
 = 0x00000008,

133 
	mIRQS_ONESHOT
 = 0x00000020,

134 
	mIRQS_REPLAY
 = 0x00000040,

135 
	mIRQS_WAITING
 = 0x00000080,

136 
	mIRQS_PENDING
 = 0x00000200,

137 
	mIRQS_SUSPENDED
 = 0x00000800,

141 
	mIRQTF_RUNTHREAD
,

142 
	mIRQTF_WARNED
,

143 
	mIRQTF_AFFINITY
,

144 
	mIRQTF_FORCED_THREAD
,

148 
	#IRQF_MODIFY_MASK
 \

149 (
IRQ_TYPE_SENSE_MASK
 | 
IRQ_NOPROBE
 | 
IRQ_NOREQUEST
 | \

150 
IRQ_NOAUTOEN
 | 
IRQ_MOVE_PCNTXT
 | 
IRQ_LEVEL
 | 
IRQ_NO_BALANCING
 | \

151 
IRQ_PER_CPU
 | 
IRQ_NESTED_THREAD
 | 
IRQ_NOTHREAD
 | 
IRQ_PER_CPU_DEVID
 | \

152 
IRQ_IS_POLLED
 | 
IRQ_DISABLE_UNLAZY
)

	)

155 
	m_IRQ_DEFAULT_INIT_FLAGS
 = 
IRQ_DEFAULT_INIT_FLAGS
,

156 
	m_IRQ_PER_CPU
 = 
IRQ_PER_CPU
,

157 
	m_IRQ_LEVEL
 = 
IRQ_LEVEL
,

158 
	m_IRQ_NOPROBE
 = 
IRQ_NOPROBE
,

159 
	m_IRQ_NOREQUEST
 = 
IRQ_NOREQUEST
,

160 
	m_IRQ_NOTHREAD
 = 
IRQ_NOTHREAD
,

161 
	m_IRQ_NOAUTOEN
 = 
IRQ_NOAUTOEN
,

162 
	m_IRQ_MOVE_PCNTXT
 = 
IRQ_MOVE_PCNTXT
,

163 
	m_IRQ_NO_BALANCING
 = 
IRQ_NO_BALANCING
,

164 
	m_IRQ_NESTED_THREAD
 = 
IRQ_NESTED_THREAD
,

165 
	m_IRQ_PER_CPU_DEVID
 = 
IRQ_PER_CPU_DEVID
,

166 
	m_IRQ_IS_POLLED
 = 
IRQ_IS_POLLED
,

167 
	m_IRQ_DISABLE_UNLAZY
 = 
IRQ_DISABLE_UNLAZY
,

168 
	m_IRQF_MODIFY_MASK
 = 
IRQF_MODIFY_MASK
,

172 
	#löux_úqd_to_°©e
(
d
Ë((d)->
comm⁄
->
°©e_u£_ac˚ss‹s
)

	)

174 
ölöe
 

175 
	$úq_£âögs_˛r_™d_£t
(
úq_desc
 *
desc
, 
u32
 
˛r
, u32 
£t
)

177 
desc
->
°©us_u£_ac˚ss‹s
 &~(
˛r
 & 
_IRQF_MODIFY_MASK
);

178 
desc
->
°©us_u£_ac˚ss‹s
 |(
£t
 & 
_IRQF_MODIFY_MASK
);

179 
	}
}

181 
ölöe
 
u32
 
	$úq_£âögs_gë_åiggî_mask
(
úq_desc
 *
desc
)

183  
desc
->
°©us_u£_ac˚ss‹s
 & 
IRQ_TYPE_SENSE_MASK
;

184 
	}
}

186 
ölöe
 

187 
	$úq_£âögs_£t_åiggî_mask
(
úq_desc
 *
desc
, 
u32
 
mask
)

189 
desc
->
°©us_u£_ac˚ss‹s
 &~
IRQ_TYPE_SENSE_MASK
;

190 
desc
->
°©us_u£_ac˚ss‹s
 |
mask
 & 
IRQ_TYPE_SENSE_MASK
;

191 
	}
}

193 
ölöe
 

194 
	$úqd_˛ór
(
úq_d©a
 *
d
, 
mask
)

196 
	`löux_úqd_to_°©e
(
d
Ë&~
mask
;

197 
	}
}

199 
ölöe
 

200 
	$úqd_£t
(
úq_d©a
 *
d
, 
mask
)

202 
	`löux_úqd_to_°©e
(
d
Ë|
mask
;

203 
	}
}

205 
ölöe
 

206 
	$úq_modify_°©us
(
úq
, 
˛r
, 
£t
)

208 
Êags
;

209 
úq_desc
 *
desc
 = 
	`úq_gë_desc_lock
(
úq
, &
Êags
, 0);

211 i‡(!
desc
)

213 
	`úq_£âögs_˛r_™d_£t
(
desc
, 
˛r
, 
£t
);

215 
	`úqd_˛ór
(&
desc
->
úq_d©a
, 
IRQD_NO_BALANCING
 | 
IRQD_PER_CPU
 |

216 
IRQD_TRIGGER_MASK
 | 
IRQD_LEVEL
 | 
IRQD_MOVE_PCNTXT
);

217 
	`úqd_£t
(&
desc
->
úq_d©a
, 
	`úq_£âögs_gë_åiggî_mask
(desc));

219 
	`úq_put_desc_u∆ock
(
desc
, 
Êags
);

220 
	}
}

223 
	#úq_Æloc_descs_‰om
(
‰om
, 
˙t
, 
node
) \

224 
	`úq_Æloc_descs
(-1, 
‰om
, 
˙t
, 
node
)

	)

227 
ölöe
 
	$úq_£t_°©us_Êags
(
úq
, 
£t
)

229 
	`úq_modify_°©us
(
úq
, 0, 
£t
);

230 
	}
}

232 
ölöe
 
	$úq_˛ór_°©us_Êags
(
úq
, 
˛r
)

234 
	`úq_modify_°©us
(
úq
, 
˛r
, 0);

235 
	}
}

238 
ölöe
 
boﬁ


239 
	$úqd_has_£t
(
úq_d©a
 *
d
, 
mask
)

241  
	`löux_úqd_to_°©e
(
d
Ë& 
mask
;

242 
	}
}

244 
ölöe
 
boﬁ


245 
	$úqd_úq_dißbÀd
(
úq_d©a
 *
d
)

247  
	`löux_úqd_to_°©e
(
d
Ë& 
IRQD_IRQ_DISABLED
;

248 
	}
}

250 
ölöe
 
boﬁ


251 
	$úqd_úq_ö¥ogªss
(
úq_d©a
 *
d
)

253  
	`löux_úqd_to_°©e
(
d
Ë& 
IRQD_IRQ_INPROGRESS
;

254 
	}
}

257 
ölöe
 
boﬁ


258 
	$úq_waô_f‹_pﬁl
(
úq_desc
 *
desc
)

262 
	`•ö_u∆ock
(&
desc
->
lock
);

263 
	`úqd_úq_ö¥ogªss
(&
desc
->
úq_d©a
))

264 
	`˝u_ªœx
();

265 
	`•ö_lock
(&
desc
->
lock
);

266 } 
	`úqd_úq_ö¥ogªss
(&
desc
->
úq_d©a
));

268  !
	`úqd_úq_dißbÀd
(&
desc
->
úq_d©a
Ë&& desc->
a˘i⁄
;

269 
	}
}

271 
ölöe
 
boﬁ


272 
	$úq_check_pﬁl
(
úq_desc
 *
desc
)

274 i‡(!(
desc
->
i°©e
 & 
IRQS_POLL_INPROGRESS
))

275  
Ál£
;

276  
	`úq_waô_f‹_pﬁl
(
desc
);

277 
	}
}

279 
ölöe
 
boﬁ


280 
	$úq_pm_check_wakeup
(
úq_desc
 *
desc
)

282  (
Ál£
);

283 
	}
}

285 
ölöe
 
boﬁ


286 
	$úq_may_run
(
úq_desc
 *
desc
)

288 
mask
 = 
IRQD_IRQ_INPROGRESS
 | 
IRQD_WAKEUP_ARMED
;

290 i‡(!
	`úqd_has_£t
(&
desc
->
úq_d©a
, 
mask
))

291  
åue
;

293 i‡(
	`úq_pm_check_wakeup
(
desc
))

294  
Ál£
;

296  
	`úq_check_pﬁl
(
desc
);

297 
	}
}

299 
ölöe
 

300 
	$löux_úq_wake_thªad
(
úq_desc
 *
desc
, 
úqa˘i⁄
 *
a˘i⁄
)

302 i‡(
	`kthªad_should_°›_èsk
(
a˘i⁄
->
thªad
))

304 i‡(
	`ã°_™d_£t_bô
(
IRQTF_RUNTHREAD
, &
a˘i⁄
->
thªad_Êags
))

306 
desc
->
thªads_⁄eshŸ
 |
a˘i⁄
->
thªad_mask
;

307 
	`©omic_öc
(&
desc
->
thªads_a˘ive
);

308 
	`wake_up_¥o˚ss
(
a˘i⁄
->
thªad
);

309 
	}
}

311 
ölöe
 
úqªtu∫_t


312 
	$h™dÀ_úq_evít_≥r˝u
(
úq_desc
 *
desc
)

314 
úqªtu∫_t
 
ªtvÆ
 = 
IRQ_NONE
;

315 
Êags
 = 0, 
úq
 = 
desc
->
úq_d©a
.irq;

316 
úqa˘i⁄
 *
a˘i⁄
;

318 
	`f‹_óch_a˘i⁄_of_desc
(
desc
, 
a˘i⁄
) {

319 
úqªtu∫_t
 
ªs
;

321 
ªs
 = 
a˘i⁄
->
	`h™dÀr
(
úq
,á˘i⁄->
dev_id
);

322 
ªs
) {

323 
IRQ_WAKE_THREAD
:

324 
	`MPASS
(
a˘i⁄
->
thªad_‚
 !
NULL
);

325 
	`löux_úq_wake_thªad
(
desc
, 
a˘i⁄
);

326 
IRQ_HANDLED
:

327 
Êags
 |
a˘i⁄
->flags;

332 
ªtvÆ
 |
ªs
;

334  (
ªtvÆ
);

335 
	}
}

337 
ölöe
 
úqªtu∫_t


338 
	$h™dÀ_úq_evít
(
úq_desc
 *
desc
)

340 
úqªtu∫_t
 
ªt
;

342 
desc
->
i°©e
 &~
IRQS_PENDING
;

343 
	`úqd_£t
(&
desc
->
úq_d©a
, 
IRQD_IRQ_INPROGRESS
);

344 
	`•ö_u∆ock
(&
desc
->
lock
);

346 
ªt
 = 
	`h™dÀ_úq_evít_≥r˝u
(
desc
);

348 
	`•ö_lock
(&
desc
->
lock
);

349 
	`úqd_˛ór
(&
desc
->
úq_d©a
, 
IRQD_IRQ_INPROGRESS
);

350  
ªt
;

351 
	}
}

353 
ölöe
 

354 
	$h™dÀ_sim∂e_úq
(
úq_desc
 *
desc
)

356 
	`•ö_lock
(&
desc
->
lock
);

358 i‡(!
	`úq_may_run
(
desc
))

359 
out_u∆ock
;

361 
desc
->
i°©e
 &~(
IRQS_REPLAY
 | 
IRQS_WAITING
);

363 i‡(
	`u∆ikñy
(
desc
->
a˘i⁄
 =
NULL
 || 
	`úqd_úq_dißbÀd
(&desc->
úq_d©a
))) {

364 
desc
->
i°©e
 |
IRQS_PENDING
;

365 
out_u∆ock
;

368 
	`h™dÀ_úq_evít
(
desc
);

370 
out_u∆ock
:

371 
	`•ö_u∆ock
(&
desc
->
lock
);

373 
	}
}

375 
ölöe
 

376 
	$úq_£t_chù
(
úq
, 
úq_chù
 *
chù
)

378 
Êags
;

379 
úq_desc
 *
desc
 = 
	`úq_gë_desc_lock
(
úq
, &
Êags
, 0);

381 i‡(!
desc
)

382  -
EINVAL
;

384 i‡(!
chù
)

385 
chù
 = &
no_úq_chù
;

387 
desc
->
úq_d©a
.
chù
 = chip;

388 
	`úq_put_desc_u∆ock
(
desc
, 
Êags
);

390 
	}
}

392 
ölöe
 

393 
	$löux_úq_£t_h™dÀr
(
úq
, 
úq_Êow_h™dÀr_t
 
h™dÀ
, 
is_chaöed
,

394 c⁄° *
«me
)

396 
Êags
;

397 
úq_desc
 *
desc
 = 
	`úq_gë_desc_lock
(
úq
, &
Êags
, 0);

399 i‡(!
desc
)

401 
desc
->
h™dÀ_úq
 = 
h™dÀ
;

402 
desc
->
«me
 =Çame;

403 
	`úq_put_desc_u∆ock
(
desc
, 
Êags
);

404 
	}
}

406 
ölöe
 

407 
	$úq_£t_chù_™d_h™dÀr_«me
(
úq
, 
úq_chù
 *
chù
,

408 
úq_Êow_h™dÀr_t
 
h™dÀ
, c⁄° *
«me
)

410 
	`úq_£t_chù
(
úq
, 
chù
);

411 
	`löux_úq_£t_h™dÀr
(
úq
, 
h™dÀ
, 0, 
«me
);

412 
	}
}

414 
ölöe
 

415 
	$úq_£t_chù_™d_h™dÀr
(
úq
, 
úq_chù
 *
chù
,

416 
úq_Êow_h™dÀr_t
 
h™dÀ
)

418 
	`úq_£t_chù_™d_h™dÀr_«me
(
úq
, 
chù
, 
h™dÀ
, 
NULL
);

419 
	}
}

421 
ölöe
 

422 
	$úq_ex∑nd_ƒ_úqs
(
ƒ
)

424 i‡(
ƒ
 > 
IRQ_BITMAP_BITS
)

425  -
ENOMEM
;

426 
ƒ_úqs
 = 
ƒ
;

428 
	}
}

430 
ölöe
 

431 
	$úq_‰ì_desc
(
úq
)

433 
úq_desc
 *
desc
 = 
	`úq_to_desc
(
úq
);

435 i‡(
úq
 >
ƒ_úqs
)

438 
	`muãx_lock
(&
•¨£_úq_lock
);

439 
	`dñëe_úq_desc
(
úq
);

440 
	`bôm≠_˛ór
(
Æloˇãd_úqs
, 
úq
, 1);

441 
	`muãx_u∆ock
(&
•¨£_úq_lock
);

442 
	`ˇŒ_rcu
(&
desc
->
rcu
, 
dñayed_‰ì_desc
);

443 
	}
}

445 
ölöe
 

446 
	$úq_Æloc_descs
(
úq
, 
‰om
, 
˙t
, 
node
)

448 
°¨t
, 
ªt
;

450 i‡(!
˙t
)

451  (-
EINVAL
);

453 i‡(
úq
 >= 0) {

454 i‡(
‰om
 > 
úq
)

455  (-
EINVAL
);

456 
‰om
 = 
úq
;

458 #ifde‡
__nŸyë__


460 
‰om
 = 
	`¨ch_dynúq_lowî_bound
(from);

463 
	`muãx_lock
(&
•¨£_úq_lock
);

465 
°¨t
 = 
	`bôm≠_föd_√xt_zîo_¨ó
(
Æloˇãd_úqs
, 
IRQ_BITMAP_BITS
,

466 
‰om
, 
˙t
, 0);

467 
ªt
 = -
EEXIST
;

468 i‡(
úq
 >=0 && 
°¨t
 != irq)

469 
îr
;

471 i‡(
°¨t
 + 
˙t
 > 
ƒ_úqs
) {

472 
ªt
 = 
	`úq_ex∑nd_ƒ_úqs
(
°¨t
 + 
˙t
);

473 i‡(
ªt
)

474 
îr
;

477 
	`bôm≠_£t
(
Æloˇãd_úqs
, 
°¨t
, 
˙t
);

478 
	`muãx_u∆ock
(&
•¨£_úq_lock
);

479  (
°¨t
);

481 
îr
:

482 
	`muãx_u∆ock
(&
•¨£_úq_lock
);

483  
ªt
;

484 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/irqdesc.h

1 #i‚de‡
_LINUX_IRQDESC_H


2 
	#_LINUX_IRQDESC_H


	)

4 
	~<löux/rcupd©e.h
>

5 
	~<löux/idr.h
>

6 
	~<löux/öãºu±.h
>

7 
	~<löux/rcupd©e.h
>

8 
	~<löux/•ölock.h
>

10 
idr
 
úq_idr
;

11 
	súq_desc
 {

12 
úq_d©a
 
	múq_d©a
;

13 
úq_Êow_h™dÀr_t
 
	mh™dÀ_úq
;

14 
•ölock_t
 
	mlock
;

15 
úqa˘i⁄
 *
	ma˘i⁄
;

16 
	mi°©e
;

17 
	m°©us_u£_ac˚ss‹s
;

18 
	mthªads_⁄eshŸ
;

19 
©omic_t
 
	mthªads_a˘ive
;

21 
rcu_hód
 
	mrcu
;

22 c⁄° *
	m«me
;

25 
	#f‹_óch_a˘i⁄_of_desc
(
desc
, 
a˘
) \

26 
a˘
 = 
desc
->a˘;á˘;á˘ =á˘->
√xt
)

	)

28 
ölöe
 
úq_desc
 *

29 
	$úq_to_desc
(
úq
)

31  (
	`idr_föd
(&
úq_idr
, 
úq
));

32 
	}
}

34 
ölöe
 
úq_desc
 *

35 
	$úq_gë_desc_lock
(
úq
, *
Êags
, 
check
)

37 
úq_desc
 *
desc
 = 
	`úq_to_desc
(
úq
);

39 i‡(
desc
)

40 
	`•ö_lock_úqßve
(&
desc
->
lock
, *
Êags
);

41  (
desc
);

42 
	}
}

44 
ölöe
 

45 
	$úq_put_desc_u∆ock
(
úq_desc
 *
desc
, 
Êags
)

47 
	`•ö_u∆ock_úqª°‹e
(&
desc
->
lock
, 
Êags
);

48 
	}
}

50 
ölöe
 

51 
	$gíîic_h™dÀ_úq_desc
(
úq_desc
 *
desc
)

53 
desc
->
	`h™dÀ_úq
(desc);

54 
	}
}

57 
ölöe
 

58 
	$gíîic_h™dÀ_úq
(
úq
)

60 
úq_desc
 *
desc
 = 
	`úq_to_desc
(
úq
);

62 i‡(!
desc
)

63  -
EINVAL
;

64 
	`gíîic_h™dÀ_úq_desc
(
desc
);

66 
	}
}

69 
ölöe
 

70 
	$dñëe_úq_desc
(
úq
)

72 
	`idr_ªmove
(&
úq_idr
, 
úq
);

73 
	}
}

76 
ölöe
 

77 
	$dñayed_‰ì_desc
(
rcu_hód
 *
rhp
)

79 
úq_desc
 *
desc
 = 
	`c⁄èöî_of
(
rhp
, úq_desc, 
rcu
);

81 
	`k‰ì
(
desc
);

82 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/irqdomain.h

2 #i‚de‡
_LINUX_IRQDOMAIN_H


3 
	#_LINUX_IRQDOMAIN_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/úqh™dÀr.h
>

7 
	~<löux/of.h
>

8 
	~<löux/ødix-åì.h
>

9 
	~<löux/úq.h
>

12 
	gúq_domaö_›s
;

13 
muãx
 
úq_domaö_muãx
;

14 
úq_domaö
 *
úq_deÁu…_domaö
;

16 
muãx
 
ªvm≠_åìs_muãx
;

17 
li°_hód
 
úq_domaö_li°
;

19 
	súq_domaö
 {

20 
li°_hód
 
	mlök
;

21 c⁄° *
	m«me
;

22 c⁄° 
úq_domaö_›s
 *
	m›s
;

23 *
	mho°_d©a
;

24 
	mÊags
;

26 
fwnode_h™dÀ
 *
	mfwnode
;

29 
úq_hw_numbî_t
 
	mhwúq_max
;

30 
	mªvm≠_dúe˘_max_úq
;

31 
	mªvm≠_size
;

32 
ødix_åì_roŸ
 
	mªvm≠_åì
;

33 
	mlöór_ªvm≠
[];

37 
	eúq_domaö_bus_tokí
 {

38 
	mDOMAIN_BUS_ANY
 = 0,

39 
	mDOMAIN_BUS_WIRED
,

40 
	mDOMAIN_BUS_PCI_MSI
,

41 
	mDOMAIN_BUS_PLATFORM_MSI
,

42 
	mDOMAIN_BUS_NEXUS
,

43 
	mDOMAIN_BUS_IPI
,

44 
	mDOMAIN_BUS_FSL_MC_MSI
,

48 
	mIRQ_DOMAIN_FLAG_HIERARCHY
 = (1 << 0),

49 
	mIRQ_DOMAIN_FLAG_AUTO_RECURSIVE
 = (1 << 1),

50 
	mIRQ_DOMAIN_FLAG_IPI_PER_CPU
 = (1 << 2),

51 
	mIRQ_DOMAIN_FLAG_IPI_SINGLE
 = (1 << 3),

52 
	mIRQ_DOMAIN_FLAG_NONCORE
 = (1 << 16),

56 
	súq_domaö_›s
 {

57 (*
	mm©ch
)(
úq_domaö
 *
	md
, 
devi˚_node
 *
	mnode
,

58 
úq_domaö_bus_tokí
 
	mbus_tokí
);

59 (*
	mm≠
)(
úq_domaö
 *
	md
, 
	mvúq
, 
úq_hw_numbî_t
 
	mhw
);

60 (*
	munm≠
)(
úq_domaö
 *
	md
, 
	mvúq
);

61 (*
	mÆloc
)(
úq_domaö
 *
	md
, 
	mvúq
,

62 
	mƒ_úqs
, *
	m¨g
);

63 (*
	m‰ì
)(
úq_domaö
 *
	md
, 
	mvúq
,

64 
	mƒ_úqs
);

68 
ölöe
 
úq_d©a
 *

69 
	$úq_gë_úq_d©a
(
úq
)

71 
úq_desc
 *
desc
 = 
	`úq_to_desc
(
úq
);

73  
desc
 ? &desc->
úq_d©a
 : 
NULL
;

74 
	}
}

76 
ölöe
 
úq_d©a
 *

77 
	$úq_domaö_gë_úq_d©a
(
úq_domaö
 *
domaö
, 
vúq
)

79 
úq_d©a
 *úq_d©®
	`úq_gë_úq_d©a
(
vúq
);

81  (
úq_d©a
 && irq_d©a->
domaö
 =domaöË? irq_d©®: 
NULL
;

82 
	}
}

84 
ölöe
 

85 
	$úq_domaö_check_hõørchy
(
úq_domaö
 *
domaö
)

88 i‡(
domaö
->
›s
->
Æloc
)

89 
domaö
->
Êags
 |
IRQ_DOMAIN_FLAG_HIERARCHY
;

90 
	}
}

92 
ölöe
 
devi˚_node
 *

93 
	$úq_domaö_gë_of_node
(
úq_domaö
 *
d
)

95  
	`to_of_node
(
d
->
fwnode
);

96 
	}
}

98 
ölöe
 

99 
	$úq_domaö_Æloc_descs
(
vúq
, 
˙t
, 
úq_hw_numbî_t
 
hwúq
,

100 
node
)

102 
höt
;

104 i‡(
vúq
 >= 0) {

105 
vúq
 = 
	`úq_Æloc_descs
(vúq, vúq, 
˙t
, 
node
);

107 
höt
 = 
hwúq
 % 
ƒ_úqs
;

108 i‡(
höt
 == 0)

109 
höt
++;

110 
vúq
 = 
	`úq_Æloc_descs_‰om
(
höt
, 
˙t
, 
node
);

111 i‡(
vúq
 <0 && 
höt
 > 1)

112 
vúq
 = 
	`úq_Æloc_descs_‰om
(1, 
˙t
, 
node
);

115  
vúq
;

116 
	}
}

118 
ölöe
 
úq_domaö
 *

119 
	$__úq_domaö_add
(
fwnode_h™dÀ
 *
fwnode
, 
size
,

120 
úq_hw_numbî_t
 
hwúq_max
, 
dúe˘_max
,

121 c⁄° 
úq_domaö_›s
 *
›s
,

122 *
ho°_d©a
)

124 
úq_domaö
 *
domaö
;

125 
devi˚_node
 *
of_node
;

127 
of_node
 = 
	`to_of_node
(
fwnode
);

129 
domaö
 = 
	`kzÆloc_node
((*domaöË+ ((Ë* 
size
),

130 
GFP_KERNEL
, 
	`of_node_to_nid
(
of_node
));

131 i‡(
	`WARN_ON
(!
domaö
))

132  (
NULL
);

134 
	`of_node_gë
(
of_node
);

137 
	`INIT_RADIX_TREE
(&
domaö
->
ªvm≠_åì
, 
GFP_KERNEL
);

138 
domaö
->
›s
 = ops;

139 
domaö
->
ho°_d©a
 = host_data;

140 
domaö
->
fwnode
 = fwnode;

141 
domaö
->
hwúq_max
 = hwirq_max;

142 
domaö
->
ªvm≠_size
 = 
size
;

143 
domaö
->
ªvm≠_dúe˘_max_úq
 = 
dúe˘_max
;

144 
	`úq_domaö_check_hõørchy
(
domaö
);

146 
	`muãx_lock
(&
úq_domaö_muãx
);

147 
	`li°_add
(&
domaö
->
lök
, &
úq_domaö_li°
);

148 
	`muãx_u∆ock
(&
úq_domaö_muãx
);

149  (
domaö
);

150 
	}
}

152 
ölöe
 
úq_domaö
 *

153 
	$úq_domaö_add_löór
(
devi˚_node
 *
of_node
,

154 
size
,

155 c⁄° 
úq_domaö_›s
 *
›s
,

156 *
ho°_d©a
)

158  
	`__úq_domaö_add
(
	`of_node_to_fwnode
(
of_node
), 
size
, size, 0, 
›s
, 
ho°_d©a
);

159 
	}
}

161 
ölöe
 

162 
	$úq_domaö_ªmove
(
úq_domaö
 *
domaö
)

164 
	`muãx_lock
(&
úq_domaö_muãx
);

165 
	`WARN_ON
(
domaö
->
ªvm≠_åì
.
height
);

166 
	`li°_dñ
(&
domaö
->
lök
);

168 i‡(
	`u∆ikñy
(
úq_deÁu…_domaö
 =
domaö
))

169 
úq_deÁu…_domaö
 = 
NULL
;

170 
	`muãx_u∆ock
(&
úq_domaö_muãx
);

172 
	`of_node_put
(
	`úq_domaö_gë_of_node
(
domaö
));

173 
	`k‰ì
(
domaö
);

174 
	}
}

176 
ölöe
 

177 
	$úq_domaö_assocüã
(
úq_domaö
 *
domaö
, 
vúq
,

178 
úq_hw_numbî_t
 
hwúq
)

180 
úq_d©a
 *úq_d©®
	`úq_gë_úq_d©a
(
vúq
);

181 
ªt
;

183 i‡(
	`WARN
(
hwúq
 >
domaö
->
hwúq_max
,

184 "îr‹: hwúq 0x%x i†toÿœrgêf‹ %s\n", ()
hwúq
, 
domaö
->
«me
))

185  -
EINVAL
;

186 i‡(
	`WARN
(!
úq_d©a
, "îr‹: vúq%òi†nŸáŒoˇãd", 
vúq
))

187  -
EINVAL
;

188 i‡(
	`WARN
(
úq_d©a
->
domaö
, "îr‹: vúq%òi†Æªadyássocüãd", 
vúq
))

189  -
EINVAL
;

191 
	`muãx_lock
(&
úq_domaö_muãx
);

192 
úq_d©a
->
hwúq
 = hwirq;

193 
úq_d©a
->
domaö
 = domain;

194 i‡(
domaö
->
›s
->
m≠
) {

195 
ªt
 = 
domaö
->
›s
->
	`m≠
(domaö, 
vúq
, 
hwúq
);

196 i‡(
ªt
 != 0) {

197 
úq_d©a
->
domaö
 = 
NULL
;

198 
úq_d©a
->
hwúq
 = 0;

199 
	`muãx_u∆ock
(&
úq_domaö_muãx
);

200  (
ªt
);

202 i‡(!
domaö
->
«me
 && 
úq_d©a
->
chù
)

203 
domaö
->
«me
 = 
úq_d©a
->
chù
->name;

206 i‡(
hwúq
 < 
domaö
->
ªvm≠_size
) {

207 
domaö
->
löór_ªvm≠
[
hwúq
] = 
vúq
;

209 
	`muãx_lock
(&
ªvm≠_åìs_muãx
);

210 
	`ødix_åì_ö£π
(&
domaö
->
ªvm≠_åì
, 
hwúq
, 
úq_d©a
);

211 
	`muãx_u∆ock
(&
ªvm≠_åìs_muãx
);

213 
	`muãx_u∆ock
(&
úq_domaö_muãx
);

215 
	`úq_˛ór_°©us_Êags
(
vúq
, 
IRQ_NOREQUEST
);

217 
	}
}

219 
ölöe
 

220 
	$úq_föd_m≠pög
(
úq_domaö
 *
domaö
, 
úq_hw_numbî_t
 
hwúq
)

222 
úq_d©a
 *
d©a
;

225 i‡(
domaö
 =
NULL
)

226 
domaö
 = 
úq_deÁu…_domaö
;

227 i‡(
domaö
 =
NULL
)

230 i‡(
hwúq
 < 
domaö
->
ªvm≠_dúe˘_max_úq
) {

231 
d©a
 = 
	`úq_domaö_gë_úq_d©a
(
domaö
, 
hwúq
);

232 i‡(
d©a
 && d©a->
hwúq
 == hwirq)

233  (
hwúq
);

235 i‡(
hwúq
 < 
domaö
->
ªvm≠_size
)

236  
domaö
->
löór_ªvm≠
[
hwúq
];

238 
	`rcu_ªad_lock
();

239 
d©a
 = 
	`ødix_åì_lookup
(&
domaö
->
ªvm≠_åì
, 
hwúq
);

240 
	`rcu_ªad_u∆ock
();

241  (
d©a
 ? d©a->
úq
 : 0);

242 
	}
}

244 
ölöe
 

245 
	$úq_¸óã_m≠pög
(
úq_domaö
 *
domaö
, 
úq_hw_numbî_t
 
hwúq
)

247 
devi˚_node
 *
of_node
;

248 
vúq
;

250 i‡(
domaö
 =
NULL
)

251 
domaö
 = 
úq_deÁu…_domaö
;

252 i‡(
domaö
 =
NULL
) {

253 
	`WARN
(1, "%s(, %lxËˇŒed wôh NULL domaö\n", 
__func__
, 
hwúq
);

256 
of_node
 = 
	`úq_domaö_gë_of_node
(
domaö
);

258 
vúq
 = 
	`úq_föd_m≠pög
(
domaö
, 
hwúq
);

259 i‡(
vúq
)

260  (
vúq
);

261 
vúq
 = 
	`úq_domaö_Æloc_descs
(-1, 1, 
hwúq
, 
	`of_node_to_nid
(
of_node
));

262 i‡(
vúq
 <= 0)

264 i‡(
	`úq_domaö_assocüã
(
domaö
, 
vúq
, 
hwúq
)) {

265 
	`úq_‰ì_desc
(
vúq
);

268  (
vúq
);

269 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/irqflags.h

1 #i‚de‡
_LINUX_IRQFLAGS_H_


2 
	#_LINUX_IRQFLAGS_H_


	)

4 
	#loˇl_úq_dißbÀ
(Ëdÿ{ } 0)

	)

5 
	#loˇl_úq_íabÀ
(Ëdÿ{ } 0)

	)

6 
	#loˇl_ßve_Êags
(Ë0

	)

7 
	#loˇl_úq_ª°‹e
(
Êags
Ëdÿ{ } 0)

	)

8 
	#loˇl_úq_ßve
(
Êags
Ëdÿ{ (ÊagsË0; } 0)

	)

	@src/common/linuxkpi/gplv2/include/linux/irqhandler.h

1 #i‚de‡
_LINUX_IRQHANDLER_H


2 
	#_LINUX_IRQHANDLER_H


	)

9 
	gúq_desc
;

10 
	gúq_d©a
;

11 (*
	túq_Êow_h™dÀr_t
)(
	túq_desc
 *
	tdesc
);

12 (*
	túq_¥eÊow_h™dÀr_t
)(
	túq_d©a
 *
	td©a
);

	@src/common/linuxkpi/gplv2/include/linux/kconfig.h

1 #i‚de‡
__LINUX_KCONFIG_H


2 
	#__LINUX_KCONFIG_H


	)

4 
	~<gíî©ed/autoc⁄f.h
>

20 
	#__ARG_PLACEHOLDER_1
 0,

	)

21 
	#c⁄fig_íabÀd
(
cfg
Ë
	`_c⁄fig_íabÀd
(cfg)

	)

22 
	#_c⁄fig_íabÀd
(
vÆue
Ë
	`__c⁄fig_íabÀd
(
__ARG_PLACEHOLDER_
##vÆue)

	)

23 
	#__c⁄fig_íabÀd
(
¨g1_‹_junk
Ë
	`___c⁄fig_íabÀd
◊rg1_‹_junk 1, 0)

	)

24 
	#___c⁄fig_íabÀd
(
__ign‹ed
, 
vÆ
, ...Ë
	)
val

31 
	#IS_BUILTIN
(
›ti⁄
Ë
	`c⁄fig_íabÀd
(›ti⁄)

	)

37 
	#IS_MODULE
(
›ti⁄
Ë
	`c⁄fig_íabÀd
(›ti⁄##
_MODULE
)

	)

45 
	#IS_REACHABLE
(
›ti⁄
Ë(
	`c⁄fig_íabÀd
(option) || \

46 (
	`c⁄fig_íabÀd
(
›ti⁄
##
_MODULE
Ë&& c⁄fig_íabÀd(
MODULE
)))

	)

52 
	#IS_ENABLED
(
›ti⁄
) \

53 (
	`IS_BUILTIN
(
›ti⁄
Ë|| 
	`IS_MODULE
(›ti⁄))

	)

	@src/common/linuxkpi/gplv2/include/linux/kernel.h

1 #i‚de‡
_KERNEL_GPLV2_H_


2 
	#_KERNEL_GPLV2_H_


	)

4 #ö˛ude_√xà<
löux
/
kî√l
.
h
>

7 
	#úqs_dißbÀd
(Ë(
cuπhªad
->
td_¸ô√°
 !0 || cuπhªad->
td_öå_√°ög_Àvñ
 !0)

	)

9 
	#add_èöt
(
a
,
b
)

	)

11 
	~<löux/úqÊags.h
>

12 
	~<löux/kc⁄fig.h
>

14 
	~<asm/˝u„©uª.h
>

15 
	~<asm/¥o˚ss‹.h
>

16 
	~<asm/b¨rõr.h
>

	@src/common/linuxkpi/gplv2/include/linux/kfifo.h

22 #i‚de‡
_LINUX_KFIFO_H


23 
	#_LINUX_KFIFO_H


	)

24 
	~<löux/kî√l.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/°ddef.h
>

27 
	~<löux/sˇâîli°.h
>

29 
	~<asm/¥o˚ss‹.h
>

31 
	s__kfifo
 {

32 
	mö
;

33 
	mout
;

34 
	mmask
;

35 
	mesize
;

36 *
	md©a
;

39 
	#__STRUCT_KFIFO_COMMON
(
d©©y≥
, 
ªcsize
, 
±πy≥
) \

41 
__kfifo
 
kfifo
; \

42 
d©©y≥
 *
ty≥
; \

43 c⁄° 
d©©y≥
 *
c⁄°_ty≥
; \

44 (*
ª˘y≥
)[
ªcsize
]; \

45 
±πy≥
 *
±r
; \

46 
±πy≥
 c⁄° *
±r_c⁄°
; \

47 }

	)

49 
	#__STRUCT_KFIFO
(
ty≥
, 
size
, 
ªcsize
, 
±πy≥
) \

51 
	`__STRUCT_KFIFO_COMMON
(
ty≥
, 
ªcsize
, 
±πy≥
); \

52 
ty≥
 
buf
[((
size
 < 2) || (size & (size - 1))) ? -1 : size]; \

53 }

	)

55 
	#STRUCT_KFIFO
(
ty≥
, 
size
) \

56 
	`__STRUCT_KFIFO
(
ty≥
, 
size
, 0,Åy≥)

	)

58 
	#__STRUCT_KFIFO_PTR
(
ty≥
, 
ªcsize
, 
±πy≥
) \

60 
	`__STRUCT_KFIFO_COMMON
(
ty≥
, 
ªcsize
, 
±πy≥
); \

61 
ty≥
 
buf
[0]; \

62 }

	)

64 
	#STRUCT_KFIFO_PTR
(
ty≥
) \

65 
	`__STRUCT_KFIFO_PTR
(
ty≥
, 0,Åy≥)

	)

70 
kfifo
 
__STRUCT_KFIFO_PTR
(, 0, );

72 
	#STRUCT_KFIFO_REC_1
(
size
) \

73 
	`__STRUCT_KFIFO
(, 
size
, 1, )

	)

75 
	#STRUCT_KFIFO_REC_2
(
size
) \

76 
	`__STRUCT_KFIFO
(, 
size
, 2, )

	)

78 
kfifo_ªc_±r_1
 
__STRUCT_KFIFO_PTR
(, 1, );

79 
kfifo_ªc_±r_2
 
__STRUCT_KFIFO_PTR
(, 2, );

81 
	#__is_kfifo_±r
(
fifo
Ë((*fifoË=(
__kfifo
))

	)

82 
	#DECLARE_KFIFO_PTR
(
fifo
, 
ty≥
Ë
	`STRUCT_KFIFO_PTR
—y≥Ë
	)
fifo

83 
	#DECLARE_KFIFO
(
fifo
, 
ty≥
, 
size
Ë
	`STRUCT_KFIFO
—y≥, sizeË
	)
fifo

85 
	#INIT_KFIFO
(
fifo
) \

87 
	`ty≥of
(&(
fifo
)Ë
__tmp
 = &(fifo); \

88 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

89 
__kfifo
->
ö
 = 0; \

90 
__kfifo
->
out
 = 0; \

91 
__kfifo
->
mask
 = 
	`__is_kfifo_±r
(
__tmp
Ë? 0 : 
	`ARRAY_SIZE
(__tmp->
buf
) - 1;\

92 
__kfifo
->
esize
 = (*
__tmp
->
buf
); \

93 
__kfifo
->
d©a
 = 
	`__is_kfifo_±r
(
__tmp
Ë? 
NULL
 : __tmp->
buf
; \

94 })

	)

95 
	#DEFINE_KFIFO
(
fifo
, 
ty≥
, 
size
) \

96 
	`DECLARE_KFIFO
(
fifo
, 
ty≥
, 
size
) = \

97 (
	`ty≥of
(
fifo
)) { \

100 .
ö
 = 0, \

101 .
out
 = 0, \

102 .
mask
 = 
	`__is_kfifo_±r
(&(
fifo
)) ? \

104 
	`ARRAY_SIZE
((
fifo
).
buf
) - 1, \

105 .
esize
 = (*(
fifo
).
buf
), \

106 .
d©a
 = 
	`__is_kfifo_±r
(&(
fifo
)) ? \

107 
NULL
 : \

108 (
fifo
).
buf
, \

111 }

	)

114 
ölöe
 
__mu°_check


115 
	$__kfifo_uöt_mu°_check_hñ≥r
(
vÆ
)

117  
vÆ
;

118 
	}
}

120 
ölöe
 
__mu°_check


121 
	$__kfifo_öt_mu°_check_hñ≥r
(
vÆ
)

123  
vÆ
;

124 
	}
}

126 
	#kfifo_öôülized
(
fifo
Ë((fifo)->
kfifo
.
mask
)

	)

127 
	#kfifo_esize
(
fifo
Ë((fifo)->
kfifo
.
esize
)

	)

128 
	#kfifo_ªcsize
(
fifo
Ë((*(fifo)->
ª˘y≥
))

	)

129 
	#kfifo_size
(
fifo
Ë((fifo)->
kfifo
.
mask
 + 1)

	)

131 
	#kfifo_ª£t
(
fifo
) \

133 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

134 
__tmp
->
kfifo
.
ö
 = __tmp->kfifo.
out
 = 0; \

135 })

	)

137 
	#kfifo_ª£t_out
(
fifo
) \

139 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

140 
__tmp
->
kfifo
.
out
 = __tmp->kfifo.
ö
; \

141 })

	)

143 
	#kfifo_Àn
(
fifo
) \

145 
	`ty≥of
((
fifo
Ë+ 1Ë
__tm∂
 = (fifo); \

146 
__tm∂
->
kfifo
.
ö
 - __tm∂->kfifo.
out
; \

147 })

	)

149 
	#kfifo_is_em±y
(
fifo
) \

151 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmpq
 = (fifo); \

152 
__tmpq
->
kfifo
.
ö
 =__tmpq->kfifo.
out
; \

153 })

	)

155 
	#kfifo_is_fuŒ
(
fifo
) \

157 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmpq
 = (fifo); \

158 
	`kfifo_Àn
(
__tmpq
Ë> __tmpq->
kfifo
.
mask
; \

159 })

	)

161 
	#kfifo_avaû
(
fifo
) \

162 
	`__kfifo_uöt_mu°_check_hñ≥r
( \

164 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmpq
 = (fifo); \

165 c⁄° 
size_t
 
__ªcsize
 = (*
__tmpq
->
ª˘y≥
); \

166 
__avaû
 = 
	`kfifo_size
(
__tmpq
Ë- 
	`kfifo_Àn
(__tmpq); \

167 (
__ªcsize
Ë? ((
__avaû
 <= __recsize) ? 0 : \

168 
	`__kfifo_max_r
(
__avaû
 - 
__ªcsize
, __recsize)) : \

169 
__avaû
; \

171 )

	)

174 
	#kfifo_Æloc
(
fifo
, 
size
, 
gÂ_mask
) \

175 
	`__kfifo_öt_mu°_check_hñ≥r
( \

177 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

178 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

179 
	`__is_kfifo_±r
(
__tmp
) ? \

180 
	`löux_kfifo_Æloc
(
__kfifo
, 
size
, (*
__tmp
->
ty≥
), 
gÂ_mask
) : \

181 -
EINVAL
; \

183 )

	)

185 
	#kfifo_‰ì
(
fifo
) \

187 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

188 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

189 i‡(
	`__is_kfifo_±r
(
__tmp
)) \

190 
	`löux_kfifo_‰ì
(
__kfifo
); \

191 })

	)

193 
	#kfifo_öô
(
fifo
, 
buf„r
, 
size
) \

195 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

196 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

197 
	`__is_kfifo_±r
(
__tmp
) ? \

198 
	`__kfifo_öô
(
__kfifo
, 
buf„r
, 
size
, (*
__tmp
->
ty≥
)) : \

199 -
EINVAL
; \

200 })

	)

202 
	#kfifo_put
(
fifo
, 
vÆ
) \

204 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

205 
	`ty≥of
(*
__tmp
->
c⁄°_ty≥
Ë
__vÆ
 = (
vÆ
); \

206 
__ªt
; \

207 
size_t
 
__ªcsize
 = (*
__tmp
->
ª˘y≥
); \

208 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

209 i‡(
__ªcsize
) \

210 
__ªt
 = 
	`__kfifo_ö_r
(
__kfifo
, &
__vÆ
, (__val), \

211 
__ªcsize
); \

213 
__ªt
 = !
	`kfifo_is_fuŒ
(
__tmp
); \

214 i‡(
__ªt
) { \

215 (
	`__is_kfifo_±r
(
__tmp
) ? \

216 ((
	`ty≥of
(
__tmp
->
ty≥
))
__kfifo
->
d©a
) : \

217 (
__tmp
->
buf
) \

218 )[
__kfifo
->
ö
 & 
__tmp
->
kfifo
.
mask
] = \

219 *(
	`ty≥of
(
__tmp
->
ty≥
))&
__vÆ
; \

220 
	`smp_wmb
(); \

221 
__kfifo
->
ö
++; \

224 
__ªt
; \

225 })

	)

228 
	#kfifo_gë
(
fifo
, 
vÆ
) \

229 
	`__kfifo_uöt_mu°_check_hñ≥r
( \

231 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

232 
	`ty≥of
(
__tmp
->
±r
Ë
__vÆ
 = (
vÆ
); \

233 
__ªt
; \

234 c⁄° 
size_t
 
__ªcsize
 = (*
__tmp
->
ª˘y≥
); \

235 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

236 i‡(
__ªcsize
) \

237 
__ªt
 = 
	`__kfifo_out_r
(
__kfifo
, 
__vÆ
, (*__val), \

238 
__ªcsize
); \

240 
__ªt
 = !
	`kfifo_is_em±y
(
__tmp
); \

241 i‡(
__ªt
) { \

242 *(
	`ty≥of
(
__tmp
->
ty≥
))
__vÆ
 = \

243 (
	`__is_kfifo_±r
(
__tmp
) ? \

244 ((
	`ty≥of
(
__tmp
->
ty≥
))
__kfifo
->
d©a
) : \

245 (
__tmp
->
buf
) \

246 )[
__kfifo
->
out
 & 
__tmp
->
kfifo
.
mask
]; \

247 
	`smp_wmb
(); \

248 
__kfifo
->
out
++; \

251 
__ªt
; \

253 )

	)

255 
	#kfifo_≥ek
(
fifo
, 
vÆ
) \

256 
	`__kfifo_uöt_mu°_check_hñ≥r
( \

258 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

259 
	`ty≥of
(
__tmp
->
±r
Ë
__vÆ
 = (
vÆ
); \

260 
__ªt
; \

261 c⁄° 
size_t
 
__ªcsize
 = (*
__tmp
->
ª˘y≥
); \

262 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

263 i‡(
__ªcsize
) \

264 
__ªt
 = 
	`__kfifo_out_≥ek_r
(
__kfifo
, 
__vÆ
, (*__val), \

265 
__ªcsize
); \

267 
__ªt
 = !
	`kfifo_is_em±y
(
__tmp
); \

268 i‡(
__ªt
) { \

269 *(
	`ty≥of
(
__tmp
->
ty≥
))
__vÆ
 = \

270 (
	`__is_kfifo_±r
(
__tmp
) ? \

271 ((
	`ty≥of
(
__tmp
->
ty≥
))
__kfifo
->
d©a
) : \

272 (
__tmp
->
buf
) \

273 )[
__kfifo
->
out
 & 
__tmp
->
kfifo
.
mask
]; \

274 
	`smp_wmb
(); \

277 
__ªt
; \

279 )

	)

281 
	#kfifo_ö
(
fifo
, 
buf
, 
n
) \

283 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

284 
	`ty≥of
(
__tmp
->
±r_c⁄°
Ë
__buf
 = (
buf
); \

285 
__n
 = (
n
); \

286 c⁄° 
size_t
 
__ªcsize
 = (*
__tmp
->
ª˘y≥
); \

287 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

288 (
__ªcsize
) ?\

289 
	`__kfifo_ö_r
(
__kfifo
, 
__buf
, 
__n
, 
__ªcsize
) : \

290 
	`löux_kfifo_ö
(
__kfifo
, 
__buf
, 
__n
); \

291 })

	)

293 
	#kfifo_ö_•ölocked
(
fifo
, 
buf
, 
n
, 
lock
) \

295 
__Êags
; \

296 
__ªt
; \

297 
	`•ö_lock_úqßve
(
lock
, 
__Êags
); \

298 
__ªt
 = 
	`kfifo_ö
(
fifo
, 
buf
, 
n
); \

299 
	`•ö_u∆ock_úqª°‹e
(
lock
, 
__Êags
); \

300 
__ªt
; \

301 })

	)

303 
	#kfifo_ö_locked
(
fifo
, 
buf
, 
n
, 
lock
) \

304 
	`kfifo_ö_•ölocked
(
fifo
, 
buf
, 
n
, 
lock
)

	)

306 
	#kfifo_out
(
fifo
, 
buf
, 
n
) \

307 
	`__kfifo_uöt_mu°_check_hñ≥r
( \

309 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

310 
	`ty≥of
(
__tmp
->
±r
Ë
__buf
 = (
buf
); \

311 
__n
 = (
n
); \

312 c⁄° 
size_t
 
__ªcsize
 = (*
__tmp
->
ª˘y≥
); \

313 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

314 (
__ªcsize
) ?\

315 
	`__kfifo_out_r
(
__kfifo
, 
__buf
, 
__n
, 
__ªcsize
) : \

316 
	`löux_kfifo_out
(
__kfifo
, 
__buf
, 
__n
); \

318 )

	)

320 
	#kfifo_out_•ölocked
(
fifo
, 
buf
, 
n
, 
lock
) \

321 
	`__kfifo_uöt_mu°_check_hñ≥r
( \

323 
__Êags
; \

324 
__ªt
; \

325 
	`•ö_lock_úqßve
(
lock
, 
__Êags
); \

326 
__ªt
 = 
	`kfifo_out
(
fifo
, 
buf
, 
n
); \

327 
	`•ö_u∆ock_úqª°‹e
(
lock
, 
__Êags
); \

328 
__ªt
; \

330 )

	)

332 
	#kfifo_out_locked
(
fifo
, 
buf
, 
n
, 
lock
) \

333 
	`kfifo_out_•ölocked
(
fifo
, 
buf
, 
n
, 
lock
)

	)

335 
	#kfifo_‰om_u£r
(
fifo
, 
‰om
, 
Àn
, 
c›õd
) \

336 
	`__kfifo_uöt_mu°_check_hñ≥r
( \

338 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

339 c⁄° 
__u£r
 *
__‰om
 = (
‰om
); \

340 
__Àn
 = (
Àn
); \

341 *
__c›õd
 = (
c›õd
); \

342 c⁄° 
size_t
 
__ªcsize
 = (*
__tmp
->
ª˘y≥
); \

343 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

344 (
__ªcsize
) ? \

345 
	`__kfifo_‰om_u£r_r
(
__kfifo
, 
__‰om
, 
__Àn
, 
__c›õd
, 
__ªcsize
) : \

346 
	`__kfifo_‰om_u£r
(
__kfifo
, 
__‰om
, 
__Àn
, 
__c›õd
); \

348 )

	)

350 
	#kfifo_out_≥ek
(
fifo
, 
buf
, 
n
) \

351 
	`__kfifo_uöt_mu°_check_hñ≥r
( \

353 
	`ty≥of
((
fifo
Ë+ 1Ë
__tmp
 = (fifo); \

354 
	`ty≥of
(
__tmp
->
±r
Ë
__buf
 = (
buf
); \

355 
__n
 = (
n
); \

356 c⁄° 
size_t
 
__ªcsize
 = (*
__tmp
->
ª˘y≥
); \

357 
__kfifo
 *__kfifÿ&
__tmp
->
kfifo
; \

358 (
__ªcsize
) ? \

359 
	`__kfifo_out_≥ek_r
(
__kfifo
, 
__buf
, 
__n
, 
__ªcsize
) : \

360 
	`löux_kfifo_out_≥ek
(
__kfifo
, 
__buf
, 
__n
); \

362 )

	)

365 
ölöe
 

366 
	$kfifo_unu£d
(
__kfifo
 *
fifo
)

368  (
fifo
->
mask
 + 1Ë- (fifo->
ö
 - fifo->
out
);

369 
	}
}

371 
ölöe
 

372 
	$löux_kfifo_Æloc
(
__kfifo
 *
fifo
, 
size
,

373 
size_t
 
esize
, 
gÂ_t
 
gÂ_mask
)

379 
size
 = 
	`roundup_pow_of_two
(size);

381 
fifo
->
ö
 = 0;

382 
fifo
->
out
 = 0;

383 
fifo
->
esize
 =Ésize;

385 i‡(
size
 < 2) {

386 
fifo
->
d©a
 = 
NULL
;

387 
fifo
->
mask
 = 0;

388  -
EINVAL
;

391 
fifo
->
d©a
 = 
	`kmÆloc
(
size
 * 
esize
, 
gÂ_mask
);

393 i‡(!
fifo
->
d©a
) {

394 
fifo
->
mask
 = 0;

395  -
ENOMEM
;

397 
fifo
->
mask
 = 
size
 - 1;

400 
	}
}

402 
ölöe
 

403 
	$löux_kfifo_‰ì
(
__kfifo
 *
fifo
)

405 
	`k‰ì
(
fifo
->
d©a
);

406 
fifo
->
ö
 = 0;

407 
fifo
->
out
 = 0;

408 
fifo
->
esize
 = 0;

409 
fifo
->
d©a
 = 
NULL
;

410 
fifo
->
mask
 = 0;

411 
	}
}

413 
ölöe
 

414 
	$kfifo_c›y_ö
(
__kfifo
 *
fifo
, c⁄° *
§c
,

415 
Àn
, 
off
)

417 
size
 = 
fifo
->
mask
 + 1;

418 
esize
 = 
fifo
->esize;

419 
l
;

421 
off
 &
fifo
->
mask
;

422 i‡(
esize
 != 1) {

423 
off
 *
esize
;

424 
size
 *
esize
;

425 
Àn
 *
esize
;

427 
l
 = 
	`mö
(
Àn
, 
size
 - 
off
);

429 
	`mem˝y
(
fifo
->
d©a
 + 
off
, 
§c
, 
l
);

430 
	`mem˝y
(
fifo
->
d©a
, 
§c
 + 
l
, 
Àn
 -Ü);

435 
	`smp_wmb
();

436 
	}
}

438 
ölöe
 

439 
	$löux_kfifo_ö
(
__kfifo
 *
fifo
,

440 c⁄° *
buf
, 
Àn
)

442 
l
;

444 
l
 = 
	`kfifo_unu£d
(
fifo
);

445 i‡(
Àn
 > 
l
)

446 
Àn
 = 
l
;

448 
	`kfifo_c›y_ö
(
fifo
, 
buf
, 
Àn
, fifo->
ö
);

449 
fifo
->
ö
 +
Àn
;

450  
Àn
;

451 
	}
}

453 
ölöe
 

454 
	$kfifo_c›y_out
(
__kfifo
 *
fifo
, *
d°
,

455 
Àn
, 
off
)

457 
size
 = 
fifo
->
mask
 + 1;

458 
esize
 = 
fifo
->esize;

459 
l
;

461 
off
 &
fifo
->
mask
;

462 i‡(
esize
 != 1) {

463 
off
 *
esize
;

464 
size
 *
esize
;

465 
Àn
 *
esize
;

467 
l
 = 
	`mö
(
Àn
, 
size
 - 
off
);

469 
	`mem˝y
(
d°
, 
fifo
->
d©a
 + 
off
, 
l
);

470 
	`mem˝y
(
d°
 + 
l
, 
fifo
->
d©a
, 
Àn
 -Ü);

475 
	`smp_wmb
();

476 
	}
}

478 
ölöe
 

479 
	$löux_kfifo_out_≥ek
(
__kfifo
 *
fifo
,

480 *
buf
, 
Àn
)

482 
l
;

484 
l
 = 
fifo
->
ö
 - fifo->
out
;

485 i‡(
Àn
 > 
l
)

486 
Àn
 = 
l
;

488 
	`kfifo_c›y_out
(
fifo
, 
buf
, 
Àn
, fifo->
out
);

489  
Àn
;

490 
	}
}

492 
ölöe
 

493 
	$löux_kfifo_out
(
__kfifo
 *
fifo
,

494 *
buf
, 
Àn
)

496 
Àn
 = 
	`löux_kfifo_out_≥ek
(
fifo
, 
buf
,Üen);

497 
fifo
->
out
 +
Àn
;

498  
Àn
;

499 
	}
}

501 
__kfifo_öô
(
__kfifo
 *
fifo
, *
buf„r
,

502 
size
, 
size_t
 
esize
);

504 
__kfifo_‰om_u£r
(
__kfifo
 *
fifo
,

505 c⁄° 
__u£r
 *
‰om
, 
Àn
, *
c›õd
);

507 
__kfifo_to_u£r
(
__kfifo
 *
fifo
,

508 
__u£r
 *
to
, 
Àn
, *
c›õd
);

510 
__kfifo_dma_ö_¥ï¨e
(
__kfifo
 *
fifo
,

511 
sˇâîli°
 *
sgl
, 
√¡s
, 
Àn
);

513 
__kfifo_dma_out_¥ï¨e
(
__kfifo
 *
fifo
,

514 
sˇâîli°
 *
sgl
, 
√¡s
, 
Àn
);

517 
__kfifo_ö_r
(
__kfifo
 *
fifo
,

518 c⁄° *
buf
, 
Àn
, 
size_t
 
ªcsize
);

520 
__kfifo_out_r
(
__kfifo
 *
fifo
,

521 *
buf
, 
Àn
, 
size_t
 
ªcsize
);

523 
__kfifo_‰om_u£r_r
(
__kfifo
 *
fifo
,

524 c⁄° 
__u£r
 *
‰om
, 
Àn
, *
c›õd
,

525 
size_t
 
ªcsize
);

527 
__kfifo_to_u£r_r
(
__kfifo
 *
fifo
, 
__u£r
 *
to
,

528 
Àn
, *
c›õd
, 
size_t
 
ªcsize
);

530 
__kfifo_dma_ö_¥ï¨e_r
(
__kfifo
 *
fifo
,

531 
sˇâîli°
 *
sgl
, 
√¡s
, 
Àn
, 
size_t
 
ªcsize
);

533 
__kfifo_dma_ö_föish_r
(
__kfifo
 *
fifo
,

534 
Àn
, 
size_t
 
ªcsize
);

536 
__kfifo_dma_out_¥ï¨e_r
(
__kfifo
 *
fifo
,

537 
sˇâîli°
 *
sgl
, 
√¡s
, 
Àn
, 
size_t
 
ªcsize
);

539 
__kfifo_dma_out_föish_r
(
__kfifo
 *
fifo
, 
size_t
 
ªcsize
);

541 
__kfifo_Àn_r
(
__kfifo
 *
fifo
, 
size_t
 
ªcsize
);

543 
__kfifo_skù_r
(
__kfifo
 *
fifo
, 
size_t
 
ªcsize
);

545 
__kfifo_out_≥ek_r
(
__kfifo
 *
fifo
,

546 *
buf
, 
Àn
, 
size_t
 
ªcsize
);

548 
__kfifo_max_r
(
Àn
, 
size_t
 
ªcsize
);

	@src/common/linuxkpi/gplv2/include/linux/llist.h

1 #i‚de‡
_LINUX_GPLV2_LLIST_H


2 
	#_LINUX_GPLV2_LLIST_H


	)

63 
	~<löux/©omic.h
>

64 
	~<löux/kî√l.h
>

66 
	sŒi°_hód
 {

67 
Œi°_node
 *
	mfú°
;

70 
	sŒi°_node
 {

71 
Œi°_node
 *
	m√xt
;

74 
	#LLIST_HEAD_INIT
(
«me
Ë{ 
NULL
 }

	)

75 
	#LLIST_HEAD
(
«me
Ë
Œi°_hód
Çamê
	`LLIST_HEAD_INIT
“ame)

	)

81 
ölöe
 
	$öô_Œi°_hód
(
Œi°_hód
 *
li°
)

83 
li°
->
fú°
 = 
NULL
;

84 
	}
}

92 
	#Œi°_íåy
(
±r
, 
ty≥
, 
membî
) \

93 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

109 
	#Œi°_f‹_óch
(
pos
, 
node
) \

110 (
pos
Ë(
node
);Öos; (posË’os)->
√xt
)

	)

127 
	#Œi°_f‹_óch_íåy
(
pos
, 
node
, 
membî
) \

128 (
pos
Ë
	`Œi°_íåy
((
node
), 
	`ty≥of
(*’os)), 
membî
); \

129 (
pos
Ë!
	`Œi°_íåy
(
NULL
, 
	`ty≥of
(*’os)), 
membî
); \

130 (
pos
Ë
	`Œi°_íåy
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

149 
	#Œi°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
node
, 
membî
) \

150 
pos
 = 
	`Œi°_íåy
((
node
), 
	`ty≥of
(*pos), 
membî
); \

151 (
pos
Ë!
	`Œi°_íåy
(
NULL
, 
	`ty≥of
(*’os)), 
membî
) && \

152 (
n
 = 
	`Œi°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*n), membî), 
åue
); \

153 
pos
 = 
n
)

	)

163 
ölöe
 
boﬁ
 
	$Œi°_em±y
(c⁄° 
Œi°_hód
 *
hód
)

165  
	`ACCESS_ONCE
(
hód
->
fú°
Ë=
NULL
;

166 
	}
}

168 
ölöe
 
Œi°_node
 *
	$Œi°_√xt
(
Œi°_node
 *
node
)

170  
node
->
√xt
;

171 
	}
}

173 
boﬁ
 
Œi°_add_b©ch
(
Œi°_node
 *
√w_fú°
,

174 
Œi°_node
 *
√w_œ°
,

175 
Œi°_hód
 *
hód
);

183 
ölöe
 
boﬁ
 
	$Œi°_add
(
Œi°_node
 *
√w
, 
Œi°_hód
 *
hód
)

185  
	`Œi°_add_b©ch
(
√w
,Çew, 
hód
);

186 
	}
}

196 
ölöe
 
Œi°_node
 *
	$Œi°_dñ_Æl
(
Œi°_hód
 *
hód
)

198  
	`xchg
(&
hód
->
fú°
, 
NULL
);

199 
	}
}

201 
Œi°_node
 *
Œi°_dñ_fú°
(
Œi°_hód
 *
hód
);

203 
Œi°_node
 *
Œi°_ªvî£_‹dî
(Œi°_nodê*
hód
);

	@src/common/linuxkpi/gplv2/include/linux/mem_encrypt.h

1 #i‚de‡
__MEM_ENCRYPT_H__


2 
	#__MEM_ENCRYPT_H__


	)

4 #ifde‡
CONFIG_ARCH_HAS_MEM_ENCRYPT


8 
	~<asm/mem_í¸y±.h
>

12 
	#sme_me_mask
 0ULL

	)

17 #i‚de‡
pg¥Ÿ_í¸y±ed


18 
	#pg¥Ÿ_í¸y±ed
(
¥Ÿ
Ë’rŸ)

	)

21 #i‚de‡
pg¥Ÿ_de¸y±ed


22 
	#pg¥Ÿ_de¸y±ed
(
¥Ÿ
Ë’rŸ)

	)

	@src/common/linuxkpi/gplv2/include/linux/mempolicy.h

1 #i‚de‡
_LINUX_MEMPOLICY_H


2 
	#_LINUX_MEMPOLICY_H


	)

4 
	~<löux/¶ab.h
>

5 
	~<löux/•ölock.h
>

6 
	~<löux/∑gem≠.h
>

	@src/common/linuxkpi/gplv2/include/linux/mmu_context.h

27 #i‚de‡
_LINUX_MMU_CONTEXT_H


28 
	#_LINUX_MMU_CONTEXT_H


	)

30 
	gmm_°ru˘
;

32 
ölöe
 
__unu£d


33 
	$u£_mm
(
mm_°ru˘
 *
mm
)

36 
	}
}

38 
ölöe
 
__unu£d


39 
	$unu£_mm
(
mm_°ru˘
 *
mm
)

42 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/mmu_notifier.h

29 #i‚de‡
_LINUX_MMU_NOTIFIER_H_


30 
	#_LINUX_MMU_NOTIFIER_H_


	)

32 
	smmu_nŸifõr
 {

	@src/common/linuxkpi/gplv2/include/linux/mod_devicetable.h

1 #i‚de‡
LINUX_MOD_DEVICETABLE_H


2 
	#LINUX_MOD_DEVICETABLE_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<löux/ty≥s.h
>

7 
	#I2C_NAME_SIZE
 20

	)

8 
	#I2C_MODULE_PREFIX
 "i2c:"

	)

10 
	si2c_devi˚_id
 {

11 
	m«me
[
I2C_NAME_SIZE
];

12 
uöçå_t
 
	mdrivî_d©a
;

15 
	edmi_fõld
 {

16 
	mDMI_NONE
,

17 
	mDMI_BIOS_VENDOR
,

18 
	mDMI_BIOS_VERSION
,

19 
	mDMI_BIOS_DATE
,

20 
	mDMI_SYS_VENDOR
,

21 
	mDMI_PRODUCT_NAME
,

22 
	mDMI_PRODUCT_VERSION
,

23 
	mDMI_PRODUCT_SERIAL
,

24 
	mDMI_PRODUCT_UUID
,

25 
	mDMI_BOARD_VENDOR
,

26 
	mDMI_BOARD_NAME
,

27 
	mDMI_BOARD_VERSION
,

28 
	mDMI_BOARD_SERIAL
,

29 
	mDMI_BOARD_ASSET_TAG
,

30 
	mDMI_CHASSIS_VENDOR
,

31 
	mDMI_CHASSIS_TYPE
,

32 
	mDMI_CHASSIS_VERSION
,

33 
	mDMI_CHASSIS_SERIAL
,

34 
	mDMI_CHASSIS_ASSET_TAG
,

35 
	mDMI_STRING_MAX
,

38 
	sdmi_°rm©ch
 {

39 
	m¶Ÿ
:7;

40 
	mexa˘_m©ch
:1;

41 
	msub°r
[79];

44 
	sdmi_sy°em_id
 {

45 (*
	mˇŒback
)(c⁄° 
	mdmi_sy°em_id
 *);

46 c⁄° *
	midít
;

47 
dmi_°rm©ch
 
	mm©ches
[4];

48 *
	mdrivî_d©a
;

51 
	#ACPI_ID_LEN
 9

	)

53 
	sa˝i_devi˚_id
 {

54 
__u8
 
	mid
[
ACPI_ID_LEN
];

55 
u_l⁄g
 
	mdrivî_d©a
;

56 
__u32
 
	m˛s
;

57 
__u32
 
	m˛s_msk
;

61 
	#dmi_devi˚_id
 
dmi_sy°em_id


	)

63 
	#DMI_MATCH
(
a
, 
b
Ë{ .
¶Ÿ
 =á, .
sub°r
 = b }

	)

64 
	#DMI_EXACT_MATCH
(
a
, 
b
Ë{ .
¶Ÿ
 =á, .
sub°r
 = b, .
exa˘_m©ch
 = 1 }

	)

	@src/common/linuxkpi/gplv2/include/linux/module.h

1 #i‚de‡
_LINUX_GPLV2_MODULE_H_


2 
	#_LINUX_GPLV2_MODULE_H_


	)

4 
	~<sys/∑øm.h
>

5 
	~<sys/moduÀ.h
>

7 #ö˛ude_√xà<
löux
/
moduÀ
.
h
>

10 
	#LKPI_DRIVER_MODULE
(
mod
, 
öô
, 
exô
) \

11 
mod
##
	`_evh
(
moduÀ_t
 
m
, 
e
, *
a
) \

13 
e
) { \

14 
MOD_LOAD
: \

15 (
öô
)(); \

17 
MOD_UNLOAD
: \

18 (
exô
)(); \

23 
moduÀd©a_t
 
mod
##
_md
 = \

25 .
«me
 = #mod, \

26 .
evh™d
 = 
mod
##
_evh
, \

28 
	`DECLARE_MODULE
(
mod
, mod##
_md
, 
SI_SUB_DRIVERS
, 
SI_ORDER_ANY
);

	)

31 
	#LKPI_PNP_INFO
(
bus
, 
«me
, 
èbÀ
) \

32 
	`MODULE_PNP_INFO
("U32:vendor;U32:device;", \

33 
bus
, 
«me
, 
èbÀ
, 
	`nôems
—abÀË- 1);

	)

	@src/common/linuxkpi/gplv2/include/linux/notifier.h

1 #i‚def 
_LINUX_GPLV2_NOTIFIER_H_


2 
	#_LINUX_GPLV2_NOTIFIER_H_


	)

4 
	~<löux/muãx.h
>

5 
	~<löux/rw£m.h
>

7 #ö˛ude_√xà<
löux
/
nŸifõr
.
h
>

9 
	#NOTIFY_OK
 0x01

	)

10 
	#NOTIFY_STOP_MASK
 0x80

	)

11 
	#NOTIFY_BAD
 (
NOTIFY_STOP_MASK
|0x02)

	)

13 
	s©omic_nŸifõr_hód
 {

14 
•ölock_t
 
	mlock
;

15 
nŸifõr_block
 
__rcu
 *
	mhód
;

18 
	sblockög_nŸifõr_hód
 {

19 
rw_£m≠h‹e
 
	mrw£m
;

20 
nŸifõr_block
 
__rcu
 *
	mhód
;

23 
	#ATOMIC_INIT_NOTIFIER_HEAD
(
«me
) do { \

24 
	`•ö_lock_öô
(&(
«me
)->
lock
); \

25 (
«me
)->
hód
 = 
NULL
; \

26 } 0)

	)

27 
	#BLOCKING_INIT_NOTIFIER_HEAD
(
«me
) do { \

28 
	`öô_rw£m
(&(
«me
)->
rw£m
); \

29 (
«me
)->
hód
 = 
NULL
; \

30 } 0)

	)

32 
©omic_nŸifõr_ˇŒ_chaö
(
©omic_nŸifõr_hód
 *
nh
,

33 
vÆ
, *
v
);

34 
__©omic_nŸifõr_ˇŒ_chaö
(
©omic_nŸifõr_hód
 *
nh
,

35 
vÆ
, *
v
, 
ƒ_to_ˇŒ
, *
ƒ_ˇŒs
);

37 
blockög_nŸifõr_chaö_ªgi°î
(
blockög_nŸifõr_hód
 *
nh
,

38 
nŸifõr_block
 *
nb
);

39 
blockög_nŸifõr_ˇŒ_chaö
(
blockög_nŸifõr_hód
 *
nh
,

40 
vÆ
, *
v
);

41 
blockög_nŸifõr_chaö_uƒegi°î
(
blockög_nŸifõr_hód
 *
nh
,

42 
nŸifõr_block
 *
nb
);

	@src/common/linuxkpi/gplv2/include/linux/numa.h

1 #i‚de‡
_LINUX_NUMA_H


2 
	#_LINUX_NUMA_H


	)

5 #ifde‡
CONFIG_NODES_SHIFT


6 
	#NODES_SHIFT
 
CONFIG_NODES_SHIFT


	)

8 
	#NODES_SHIFT
 0

	)

11 
	#MAX_NUMNODES
 (1 << 
NODES_SHIFT
)

	)

13 
	#NUMA_NO_NODE
 (-1)

	)

	@src/common/linuxkpi/gplv2/include/linux/of.h

1 #i‚de‡
_LINUX_OF_H


2 
	#_LINUX_OF_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/bô›s.h
>

6 
	~<löux/î∫o.h
>

7 
	~<löux/kobje˘.h
>

8 
	~<löux/mod_devi˚èbÀ.h
>

9 
	~<löux/•ölock.h
>

10 
	~<löux/nŸifõr.h
>

11 
	~<löux/¥›îty.h
>

12 
	~<löux/li°.h
>

13 
	~<löux/îr.h
>

15 
	sdevi˚_node
 {

16 c⁄° *
	m«me
;

17 c⁄° *
	mty≥
;

18 
fwnode_h™dÀ
 
	mfwnode
;

22 
ölöe
 
boﬁ


23 
	$is_of_node
(
fwnode_h™dÀ
 *
fwnode
)

25  !
	`IS_ERR_OR_NULL
(
fwnode
Ë&& fwnode->
ty≥
 =
FWNODE_OF
;

26 
	}
}

28 
ölöe
 
devi˚_node
 *

29 
	$to_of_node
(
fwnode_h™dÀ
 *
fwnode
)

31  
	`is_of_node
(
fwnode
) ?

32 
	`c⁄èöî_of
(
fwnode
, 
devi˚_node
, fwnodeË: 
NULL
;

33 
	}
}

35 
ölöe
 
fwnode_h™dÀ


36 *
	$of_node_to_fwnode
(
devi˚_node
 *
node
)

38  
node
 ? &node->
fwnode
 : 
NULL
;

39 
	}
}

42 
ölöe
 
devi˚_node
 *

43 
	$of_node_gë
(
devi˚_node
 *
node
)

45  
node
;

46 
	}
}

48 
ölöe
 
	$of_node_put
(
devi˚_node
 *
node
Ë{ 
	}
}

50 
ölöe
 

51 
	$of_node_to_nid
(
devi˚_node
 *
devi˚
)

54 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/of_device.h

1 #i‚de‡
_LINUX_OF_DEVICE_H


2 
	#_LINUX_OF_DEVICE_H


	)

3 
	~<löux/of.h
>

4 
	~<löux/mod_devi˚èbÀ.h
>

6 
	gdevi˚
;

7 
	gdevi˚_drivî
;

8 
	gkobj_uevít_ív
;

10 
ölöe
 
	$of_drivî_m©ch_devi˚
(
devi˚
 *
dev
,

11 c⁄° 
devi˚_drivî
 *
drv
)

14 
	}
}

16 
ölöe
 
	$of_devi˚_uevít
(
devi˚
 *
dev
,

17 
kobj_uevít_ív
 *
ív
Ë{ 
	}
}

19 
ölöe
 c⁄° *
	$of_devi˚_gë_m©ch_d©a
(c⁄° 
devi˚
 *
dev
)

21  
NULL
;

22 
	}
}

24 
ölöe
 
	$of_devi˚_gë_modÆüs
(
devi˚
 *
dev
,

25 *
°r
, 
ssize_t
 
Àn
)

27  -
ENODEV
;

28 
	}
}

30 
ölöe
 
	$of_devi˚_uevít_modÆüs
(
devi˚
 *
dev
,

31 
kobj_uevít_ív
 *
ív
)

33  -
ENODEV
;

34 
	}
}

36 
ölöe
 
	$of_devi˚_node_put
(
devi˚
 *
dev
Ë{ 
	}
}

38 
ölöe
 c⁄° 
of_devi˚_id
 *
	$__of_m©ch_devi˚
(

39 c⁄° 
of_devi˚_id
 *
m©ches
, c⁄° 
devi˚
 *
dev
)

41  
NULL
;

42 
	}
}

43 
	#of_m©ch_devi˚
(
m©ches
, 
dev
) \

44 
	`__of_m©ch_devi˚
(
	`of_m©ch_±r
(
m©ches
), (
dev
))

	)

46 
ölöe
 
devi˚_node
 *
	$of_˝u_devi˚_node_gë
(
˝u
)

48  
NULL
;

49 
	}
}

50 
ölöe
 
	$of_dma_c⁄figuª
(
devi˚
 *
dev
, 
devi˚_node
 *
≈
)

51 {
	}
}

	@src/common/linuxkpi/gplv2/include/linux/oom.h

1 #i‚de‡
__INCLUDE_LINUX_OOM_H


2 
	#__INCLUDE_LINUX_OOM_H


	)

4 
	~<löux/sched.h
>

5 
	~<löux/ty≥s.h
>

7 
	gnŸifõr_block
;

9 
ªgi°î_oom_nŸifõr
(
nŸifõr_block
 *
nb
);

10 
uƒegi°î_oom_nŸifõr
(
nŸifõr_block
 *
nb
);

	@src/common/linuxkpi/gplv2/include/linux/page.h

1 #i‚def 
_LINUX_GPLV2_PAGE_H_


2 
	#_LINUX_GPLV2_PAGE_H_


	)

4 #ö˛ude_√xà<
löux
/
∑ge
.
h
>

6 
	#PAGE_KERNEL_IO
 0x0000

	)

9 *
km≠
(
vm_∑ge_t
 
∑ge
);

10 *
km≠_©omic
(
vm_∑ge_t
 
∑ge
);

11 *
km≠_©omic_¥Ÿ
(
vm_∑ge_t
 
∑ge
, 
pg¥Ÿ_t
 
¥Ÿ
);

12 
kunm≠
(
vm_∑ge_t
 
∑ge
);

13 
kunm≠_©omic
(*
vaddr
);

15 
iounm≠_©omic
(*
vaddr
);

17 
ölöe
 

18 
	$∑ge_cou¡
(
vm_∑ge_t
 
∑ge
 
__unu£d
)

21 
	}
}

24 
ölöe
 *

25 
	$mem£t64
(
uöt64_t
 *
s
, uöt64_à
v
, 
size_t
 
cou¡
)

27 
uöt64_t
 *
xs
 = 
s
;

29 
cou¡
--)

30 *
xs
++ = 
v
;

31  
s
;

32 
	}
}

34 
£t_∑ges_¨øy_wb
(
∑ge
 **
∑ges
, 
addrö¨øy
);

35 
£t_∑ges_¨øy_uc
(
∑ge
 **
∑ges
, 
addrö¨øy
);

36 
£t_∑ges_¨øy_wc
(
∑ge
 **
∑ges
, 
addrö¨øy
);

38 
£t_∑ges_wb
(
vm_∑ge_t
 
∑ge
, 
num∑ges
);

39 
£t_∑ges_uc
(
vm_∑ge_t
 
∑ge
, 
num∑ges
);

40 
£t_∑ges_wc
(
vm_∑ge_t
 
∑ge
, 
num∑ges
);

42 
vm_∑ddr_t
 
∑ge_to_phys
(
vm_∑ge_t
 
∑ge
);

44 
unm≠_m≠pög_ønge
(*
obj
, 
loff_t
 c⁄° 
hﬁebegö
,

45 
loff_t
 c⁄° 
hﬁñí
, 
eví_cows
);

47 
	#löux_˛Êush›t
(
¨g
Ë
	`__löux_˛Êush›t
((
u_l⁄g
)◊rg))

	)

48 
__löux_˛Êush›t
(
u_l⁄g
 
addr
);

	@src/common/linuxkpi/gplv2/include/linux/pagemap.h

1 #i‚de‡
_LINUX_PAGEMAP_H


2 
	#_LINUX_PAGEMAP_H


	)

4 
	~<löux/mm.h
>

5 
	~<löux/fs.h
>

6 
	~<löux/li°.h
>

7 
	~<löux/highmem.h
>

8 
	~<löux/compûî.h
>

9 
	~<löux/h¨dúq.h
>

10 
	~<löux/mm.h
>

13 
ölöe
 

14 
	$Áu…_ö_mu…ùages_ªadabÀ
(c⁄° 
__u£r
 *
uaddr
, 
size
)

16 
c
;

17 
ªt
 = 0;

18 c⁄° 
__u£r
 *
íd
 = 
uaddr
 + 
size
 - 1;

20 i‡(
	`u∆ikñy
(
size
 == 0))

21  
ªt
;

23 
uaddr
 <
íd
) {

24 
ªt
 = -
	`c›yö
(
uaddr
, &
c
, 1);

25 i‡(
ªt
 != 0)

26  -
EFAULT
;

27 
uaddr
 +
PAGE_SIZE
;

31 i‡((()
uaddr
 & ~(
PAGE_SIZE
 - 1)) ==

32 (()
íd
 & ~(
PAGE_SIZE
 - 1))) {

33 
ªt
 = -
	`c›yö
(
íd
, &
c
, 1);

36  
ªt
;

37 
	}
}

39 
ölöe
 

40 
	$Áu…_ö_mu…ùages_wrôóbÀ
(
__u£r
 *
uaddr
, 
size
)

42 
ªt
 = 0;

43 
__u£r
 *
íd
 = 
uaddr
 + 
size
 - 1;

45 i‡(
	`u∆ikñy
(
size
 == 0))

46  
ªt
;

52 
uaddr
 <
íd
) {

53 
ªt
 = 
	`subyã
(
uaddr
, 0);

54 i‡(
ªt
 != 0)

55  -
EFAULT
;

56 
uaddr
 +
PAGE_SIZE
;

60 i‡((()
uaddr
 & ~(
PAGE_SIZE
 - 1)) ==

61 (()
íd
 & ~(
PAGE_SIZE
 - 1)))

62 
ªt
 = 
	`subyã
(
íd
, 0);

64  
ªt
;

65 
	}
}

67 
ölöe
 

68 
	$Áu…_ö_∑ges_wrôóbÀ
(
__u£r
 *
uaddr
, 
size
)

70  (
	`Áu…_ö_mu…ùages_wrôóbÀ
(
uaddr
, 
size
));

71 
	}
}

73 
ölöe
 

74 
	$Áu…_ö_∑ges_ªadabÀ
(
__u£r
 *
uaddr
, 
size
)

76  (
	`Áu…_ö_mu…ùages_ªadabÀ
(
uaddr
, 
size
));

77 
	}
}

79 
ölöe
 

80 
	$ªÀa£_∑ges
(
∑ge
 **
∑ges
, 
ƒ
)

82 
i
;

84 
i
 = 0; i < 
ƒ
; i++)

85 
	`put_∑ge
(
∑ges
[
i
]);

86 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/pagevec.h

8 #i‚de‡
_LINUX_PAGEVEC_H


9 
	#_LINUX_PAGEVEC_H


	)

11 
	~<löux/∑gem≠.h
>

14 
	#PAGEVEC_SIZE
 14

	)

16 
	g∑ge
;

17 
	gaddªss_•a˚
;

19 
	s∑gevec
 {

20 
	mƒ
;

21 
∑ge
 *
	m∑ges
[
PAGEVEC_SIZE
];

24 
ölöe
 
	$∑gevec_öô
(
∑gevec
 *
pvec
)

26 
pvec
->
ƒ
 = 0;

27 
	}
}

29 
ölöe
 
	$∑gevec_ªöô
(
∑gevec
 *
pvec
)

31 
pvec
->
ƒ
 = 0;

32 
	}
}

34 
ölöe
 
	$∑gevec_cou¡
(
∑gevec
 *
pvec
)

36  
pvec
->
ƒ
;

37 
	}
}

39 
ölöe
 
	$∑gevec_•a˚
(
∑gevec
 *
pvec
)

41  
PAGEVEC_SIZE
 - 
pvec
->
ƒ
;

42 
	}
}

47 
ölöe
 
	$∑gevec_add
(
∑gevec
 *
pvec
, 
∑ge
 *page)

49 
	`gë_∑ge
(
∑ge
);

50 
pvec
->
∑ges
[pvec->
ƒ
++] = 
∑ge
;

51  
	`∑gevec_•a˚
(
pvec
);

52 
	}
}

54 
ölöe
 
	$__∑gevec_ªÀa£
(
∑gevec
 *
pvec
)

56 
	`ªÀa£_∑ges
(
pvec
->
∑ges
, 
	`∑gevec_cou¡
(pvec));

57 
	`∑gevec_ªöô
(
pvec
);

58 
	}
}

60 
ölöe
 
	$∑gevec_ªÀa£
(
∑gevec
 *
pvec
)

62 i‡(
	`∑gevec_cou¡
(
pvec
))

63 
	`__∑gevec_ªÀa£
(
pvec
);

64 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/pci-aspm.h

16 #i‚de‡
LINUX_ASPM_H


17 
	#LINUX_ASPM_H


	)

19 
	~<löux/pci.h
>

21 
	#PCIE_LINK_STATE_L0S
 1

	)

22 
	#PCIE_LINK_STATE_L1
 2

	)

23 
	#PCIE_LINK_STATE_CLKPM
 4

	)

25 #ifde‡
CONFIG_PCIEASPM


26 
pcõ_a•m_öô_lök_°©e
(
pci_dev
 *
pdev
);

27 
pcõ_a•m_exô_lök_°©e
(
pci_dev
 *
pdev
);

28 
pcõ_a•m_pm_°©e_ch™ge
(
pci_dev
 *
pdev
);

29 
pcõ_a•m_powîßve_c⁄fig_lök
(
pci_dev
 *
pdev
);

30 
pci_dißbÀ_lök_°©e
(
pci_dev
 *
pdev
, 
°©e
);

31 
pci_dißbÀ_lök_°©e_locked
(
pci_dev
 *
pdev
, 
°©e
);

32 
pcõ_no_a•m
();

34 
ölöe
 
	$pcõ_a•m_öô_lök_°©e
(
pci_dev
 *
pdev
)

36 
	}
}

37 
ölöe
 
	$pcõ_a•m_exô_lök_°©e
(
pci_dev
 *
pdev
)

39 
	}
}

40 
ölöe
 
	$pcõ_a•m_pm_°©e_ch™ge
(
pci_dev
 *
pdev
)

42 
	}
}

43 
ölöe
 
	$pcõ_a•m_powîßve_c⁄fig_lök
(
pci_dev
 *
pdev
)

45 
	}
}

46 
ölöe
 
	$pci_dißbÀ_lök_°©e
(
pci_dev
 *
pdev
, 
°©e
)

48 
	}
}

49 
ölöe
 
	$pcõ_no_a•m
()

51 
	}
}

54 #ifde‡
CONFIG_PCIEASPM_DEBUG


55 
pcõ_a•m_¸óã_sysfs_dev_fûes
(
pci_dev
 *
pdev
);

56 
pcõ_a•m_ªmove_sysfs_dev_fûes
(
pci_dev
 *
pdev
);

58 
ölöe
 
	$pcõ_a•m_¸óã_sysfs_dev_fûes
(
pci_dev
 *
pdev
)

60 
	}
}

61 
ölöe
 
	$pcõ_a•m_ªmove_sysfs_dev_fûes
(
pci_dev
 *
pdev
)

63 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/pci.h

1 #i‚de‡
_LINUX_GPLV2_PCI_H_


2 
	#_LINUX_GPLV2_PCI_H_


	)

4 
	~<sys/∑øm.h
>

5 
	~<sys/bus.h
>

6 
	~<machöe/bus.h
>

7 
	~<sys/rm™.h
>

8 
	~<machöe/ªsour˚.h
>

10 #ö˛ude_√xà<
löux
/
pci
.
h
>

12 
	#DEFINE_RES_MEM
(
_°¨t
, 
_size
) \

14 .
bsd_ªs
 = 
NULL
, \

15 .
°¨t
 = (
_°¨t
), \

16 .
íd
 = (
_°¨t
Ë+ (
_size
) - 1, \

17 }

	)

19 
	#BSD_TO_LINUX_RESOURCE
(
r
) \

21 .
bsd_ªs
 = (
r
), \

22 .
°¨t
 = 
	`rm™_gë_°¨t
(
r
), \

23 .
íd
 = 
	`rm™_gë_íd
(
r
), \

24 }

	)

26 
	slöux_ªsour˚
 {

27 
ªsour˚
 *
	mbsd_ªs
;

28 
ªsour˚_size_t
 
	m°¨t
;

29 
ªsour˚_size_t
 
	míd
;

36 
pci_dev
 *
löux_pci_gë_˛ass
(
˛ass
, pci_dev *
‰om
);

38 
ölöe
 
ªsour˚_size_t


39 
	$ªsour˚_size
(c⁄° 
löux_ªsour˚
 *
ªs
)

41  
ªs
->
íd
 -Ñes->
°¨t
 + 1;

42 
	}
}

44 
ölöe
 
boﬁ


45 
	$ªsour˚_c⁄èös
(
löux_ªsour˚
 *
a
, löux_ªsour˚ *
b
)

47  
a
->
°¨t
 <
b
->°¨à&&á->
íd
 >= b->end;

48 
	}
}

50 
ölöe
 

51 
	$pci_bus_ªad_c⁄fig
(
pci_bus
 *
bus
, 
dev‚
,

52 
whîe
, 
uöt32_t
 *
vÆ
, 
size
)

54 
devi˚_t
 
dev
;

55 
dom
, 
busid
, 
¶Ÿ
, 
func
;

57 
dom
 = 
	`pci_gë_domaö
(
bus
->
£lf
->
dev
.
bsddev
);

58 
busid
 = 
	`pci_gë_bus
(
bus
->
£lf
->
dev
.
bsddev
);

59 
¶Ÿ
 = ((
dev‚
 >> 3) & 0x1f);

60 
func
 = 
dev‚
 & 0x7;

61 
dev
 = 
	`pci_föd_dbsf
(
dom
, 
busid
, 
¶Ÿ
, 
func
);

62 *
vÆ
 = 
	`pci_ªad_c⁄fig
(
dev
, 
whîe
, 
size
);

64 
	}
}

66 
ölöe
 

67 
	$pci_bus_ªad_c⁄fig_w‹d
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u16
 *
vÆ
)

69  (
	`pci_bus_ªad_c⁄fig
(
bus
, 
dev‚
, 
whîe
, (
uöt32_t
 *)
vÆ
, 2));

70 
	}
}

72 
ölöe
 

73 
	$pci_bus_ªad_c⁄fig_byã
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
, 
u8
 *
vÆ
)

75  (
	`pci_bus_ªad_c⁄fig
(
bus
, 
dev‚
, 
whîe
, (
uöt32_t
 *)
vÆ
, 1));

76 
	}
}

78 
ölöe
 

79 
	$pci_bus_wrôe_c⁄fig
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
,

80 
uöt32_t
 
vÆ
, 
size
)

82 
devi˚_t
 
dev
;

83 
dom
, 
busid
, 
¶Ÿ
, 
func
;

85 
dom
 = 
	`pci_gë_domaö
(
bus
->
£lf
->
dev
.
bsddev
);

86 
busid
 = 
	`pci_gë_bus
(
bus
->
£lf
->
dev
.
bsddev
);

87 
¶Ÿ
 = ((
dev‚
 >> 3) & 0x1f);

88 
func
 = 
dev‚
 & 0x7;

89 
dev
 = 
	`pci_föd_dbsf
(
dom
, 
busid
, 
¶Ÿ
, 
func
);

90 
	`pci_wrôe_c⁄fig
(
dev
, 
whîe
, 
vÆ
, 
size
);

92 
	}
}

94 
ölöe
 

95 
	$pci_bus_wrôe_c⁄fig_byã
(
pci_bus
 *
bus
, 
dev‚
, 
whîe
,

96 
uöt8_t
 
vÆ
)

98  (
	`pci_bus_wrôe_c⁄fig
(
bus
, 
dev‚
, 
whîe
, 
vÆ
, 1));

99 
	}
}

101 
pci_dev
 *
pci_gë_bus_™d_¶Ÿ
(
bus
, 
dev‚
);

103 
pci_dev_put
(
pci_dev
 *
pdev
);

105 
ölöe
 
boﬁ


106 
	$pci_is_roŸ_bus
(
pci_bus
 *
pbus
)

109  (
pbus
->
£lf
 =
NULL
);

110 
	}
}

112 
ölöe
 
pci_dev
 *

113 
	$pci_up°ªam_bridge
(
pci_dev
 *
dev
)

116 
	`UNIMPLEMENTED
();

117  (
NULL
);

118 
	}
}

120 
ölöe
 
boﬁ


121 
	$pci_is_thundîbﬁt_©èched
(
pci_dev
 *
pdev
)

123 
	`UNIMPLEMENTED
();

124  
Ál£
;

125 
	}
}

127 
ölöe
 *

128 
	$pci_∂©f‹m_rom
(
pci_dev
 *
pdev
, 
size_t
 *
size
)

131 
	`UNIMPLEMENTED
();

132  (
NULL
);

133 
	}
}

135 
ölöe
 

136 
	$löux_pci_ßve_°©e
(
pci_dev
 *
pdev
)

139 
	`pci_ßve_°©e
(
pdev
->
dev
.
bsddev
);

140 
	}
}

142 
ölöe
 

143 
	$löux_pci_ª°‹e_°©e
(
pci_dev
 *
pdev
)

146 
	`pci_ª°‹e_°©e
(
pdev
->
dev
.
bsddev
);

147 
	}
}

149 
ölöe
 

150 
	$pci_ign‹e_hŸ∂ug
(
pci_dev
 *
pdev
)

153 
	`UNIMPLEMENTED
();

154 
	}
}

156 
ölöe
 *

157 
	$pci_Æloc_c⁄si°ít
(
pci_dev
 *
hwdev
, 
size_t
 
size
, 
dma_addr_t
 *
dma_h™dÀ
)

160  (
	`dma_Æloc_cohîít
(
hwdev
 =
NULL
 ? NULL : &hwdev->
dev
, 
size
,

161 
dma_h™dÀ
, 
GFP_ATOMIC
));

162 
	}
}

164 
ölöe
 

165 
	$pcõ_gë_ªadrq
(
pci_dev
 *
dev
)

167 
u16
 
˘l
;

169 i‡(
	`pcõ_ˇ∑bûôy_ªad_w‹d
(
dev
, 
PCI_EXP_DEVCTL
, &
˘l
))

170  (-
EINVAL
);

172  128 << ((
˘l
 & 
PCI_EXP_DEVCTL_READRQ
) >> 12);

173 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/perf_event.h

1 #i‚de‡
_LINUX_GPLV2_PERF_EVENT_H_


2 
	#_LINUX_GPLV2_PERF_EVENT_H_


	)

4 
	spmu
 {};

	@src/common/linuxkpi/gplv2/include/linux/platform_device.h

1 #i‚de‡
_LINUX__PLATFORM_DEVICE_H_


2 
	#_LINUX__PLATFORM_DEVICE_H_


	)

4 
	~<löux/devi˚.h
>

6 
	s∂©f‹m_devi˚
 {

7 
devi˚
 
	mdev
;

10 
ölöe
 

11 
	$∂©f‹m_devi˚_uƒegi°î
(
∂©f‹m_devi˚
 *
pdev
)

14 
	`∑nic
("%s: unim∂emíãd", 
__func__
);

15 
	}
}

17 
ölöe
 
∂©f‹m_devi˚
 *

18 
	$∂©f‹m_devi˚_ªgi°î_sim∂e
(c⁄° *
«me
, 
id
,

19 *
ªs
, 
num
)

22 
	`∑nic
("%s: unim∂emíãd", 
__func__
);

23 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/pm.h

21 #i‚de‡
_LINUX_PM_H_


22 
	#_LINUX_PM_H_


	)

24 
	~<löux/devi˚.h
>

25 
	~<löux/li°.h
>

26 
	~<löux/w‹kqueue.h
>

27 
	~<löux/•ölock.h
>

28 
	~<löux/waô.h
>

29 
	~<löux/timî.h
>

30 
	~<löux/com∂ëi⁄.h
>

32 
	#DPM_FLAG_NEVER_SKIP
 
	`BIT
(0)

	)

33 
	#DPM_FLAG_SMART_PREPARE
 
	`BIT
(1)

	)

34 
	#DPM_FLAG_SMART_SUSPEND
 
	`BIT
(2)

	)

36 
	gdevi˚
;

38 c⁄° 
powî_group_«me
[];

45 #ifde‡
CONFIG_PM_SLEEP


46 
	#SET_SYSTEM_SLEEP_PM_OPS
(
su•íd_‚
, 
ªsume_‚
) \

47 .
su•íd
 = 
su•íd_‚
, \

48 .
ªsume
 = 
ªsume_‚
, \

49 .
‰ìze
 = 
su•íd_‚
, \

50 .
thaw
 = 
ªsume_‚
, \

51 .
powîoff
 = 
su•íd_‚
, \

52 .
ª°‹e
 = 
ªsume_‚
,

	)

54 
	#SET_SYSTEM_SLEEP_PM_OPS
(
su•íd_‚
, 
ªsume_‚
)

	)

57 
	#SIMPLE_DEV_PM_OPS
(
«me
, 
su•íd_‚
, 
ªsume_‚
) \

58 c⁄° 
dev_pm_›s
 
«me
 = { \

59 
	`SET_SYSTEM_SLEEP_PM_OPS
(
su•íd_‚
, 
ªsume_‚
) \

60 }

	)

62 
	sdev_pm_domaö
 {

63 
dev_pm_›s
 
	m›s
;

64 (*
	mdëach
)(
devi˚
 *
	mdev
, 
boﬁ
 
	mpowî_off
);

65 (*
	ma˘iv©e
)(
devi˚
 *
	mdev
);

66 (*
	msync
)(
devi˚
 *
	mdev
);

67 (*
	mdismiss
)(
devi˚
 *
	mdev
);

70 
	#PM_EVENT_INVALID
 (-1)

	)

71 
	#PM_EVENT_ON
 0x0000

	)

72 
	#PM_EVENT_FREEZE
 0x0001

	)

73 
	#PM_EVENT_SUSPEND
 0x0002

	)

74 
	#PM_EVENT_HIBERNATE
 0x0004

	)

75 
	#PM_EVENT_QUIESCE
 0x0008

	)

76 
	#PM_EVENT_RESUME
 0x0010

	)

77 
	#PM_EVENT_THAW
 0x0020

	)

78 
	#PM_EVENT_RESTORE
 0x0040

	)

79 
	#PM_EVENT_RECOVER
 0x0080

	)

80 
	#PM_EVENT_USER
 0x0100

	)

81 
	#PM_EVENT_REMOTE
 0x0200

	)

82 
	#PM_EVENT_AUTO
 0x0400

	)

84 
	#PM_EVENT_SLEEP
 (
PM_EVENT_SUSPEND
 | 
PM_EVENT_HIBERNATE
)

	)

85 
	#PM_EVENT_USER_SUSPEND
 (
PM_EVENT_USER
 | 
PM_EVENT_SUSPEND
)

	)

86 
	#PM_EVENT_USER_RESUME
 (
PM_EVENT_USER
 | 
PM_EVENT_RESUME
)

	)

87 
	#PM_EVENT_REMOTE_RESUME
 (
PM_EVENT_REMOTE
 | 
PM_EVENT_RESUME
)

	)

88 
	#PM_EVENT_AUTO_SUSPEND
 (
PM_EVENT_AUTO
 | 
PM_EVENT_SUSPEND
)

	)

89 
	#PM_EVENT_AUTO_RESUME
 (
PM_EVENT_AUTO
 | 
PM_EVENT_RESUME
)

	)

91 
	#PMSG_INVALID
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_INVALID
, })

	)

92 
	#PMSG_ON
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_ON
, })

	)

93 
	#PMSG_FREEZE
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_FREEZE
, })

	)

94 
	#PMSG_QUIESCE
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_QUIESCE
, })

	)

95 
	#PMSG_SUSPEND
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_SUSPEND
, })

	)

96 
	#PMSG_HIBERNATE
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_HIBERNATE
, })

	)

97 
	#PMSG_RESUME
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_RESUME
, })

	)

98 
	#PMSG_THAW
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_THAW
, })

	)

99 
	#PMSG_RESTORE
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_RESTORE
, })

	)

100 
	#PMSG_RECOVER
 ((
pm_mesßge
){ .
evít
 = 
PM_EVENT_RECOVER
, })

	)

101 
	#PMSG_USER_SUSPEND
 ((
pm_mesßge
) \

102 { .
evít
 = 
PM_EVENT_USER_SUSPEND
, })

	)

103 
	#PMSG_USER_RESUME
 ((
pm_mesßge
) \

104 { .
evít
 = 
PM_EVENT_USER_RESUME
, })

	)

105 
	#PMSG_REMOTE_RESUME
 ((
pm_mesßge
) \

106 { .
evít
 = 
PM_EVENT_REMOTE_RESUME
, })

	)

107 
	#PMSG_AUTO_SUSPEND
 ((
pm_mesßge
) \

108 { .
evít
 = 
PM_EVENT_AUTO_SUSPEND
, })

	)

109 
	#PMSG_AUTO_RESUME
 ((
pm_mesßge
) \

110 { .
evít
 = 
PM_EVENT_AUTO_RESUME
, })

	)

	@src/common/linuxkpi/gplv2/include/linux/pm_domain.h

	@src/common/linuxkpi/gplv2/include/linux/pm_qos.h

1 #i‚de‡
_LINUX_PM_QOS_H_


2 
	#_LINUX_PM_QOS_H_


	)

3 
	~<löux/nŸifõr.h
>

4 
	~<löux/devi˚.h
>

7 
	spm_qos_ªque°
 {};

	@src/common/linuxkpi/gplv2/include/linux/pm_runtime.h

1 #i‚de‡
_LINUX_PM_RUNTIME_H_


2 
	#_LINUX_PM_RUNTIME_H_


	)

4 
	~<löux/li°.h
>

5 
	~<löux/w‹kqueue.h
>

6 
	~<löux/•ölock.h
>

7 
	~<löux/waô.h
>

8 
	~<löux/timî.h
>

9 
	~<löux/com∂ëi⁄.h
>

10 
	~<löux/devi˚.h
>

12 
ölöe
 

13 
	$pm_ru¡ime_m¨k_œ°_busy
(
devi˚
 *
dev
)

15 
	`UNIMPLEMENTED_ONCE
();

16 
	}
}

20 
	#RPM_ASYNC
 0x01

	)

21 
	#RPM_NOWAIT
 0x02

	)

23 
	#RPM_GET_PUT
 0x04

	)

25 
	#RPM_AUTO
 0x08

	)

28 
ölöe
 

29 
	$__pm_ru¡ime_su•íd
(
devi˚
 *
dev
, 
ΩmÊags
)

31 
	`UNIMPLEMENTED_ONCE
();

33 
	}
}

35 
ölöe
 

36 
	$pm_ru¡ime_gë_if_ö_u£
(
devi˚
 *
dev
)

38 
	`UNIMPLEMENTED
();

40 
	}
}

42 
ölöe
 

43 
	$__pm_ru¡ime_u£_autosu•íd
(
devi˚
 *
dev
, 
boﬁ
 
u£
)

45 
	`UNIMPLEMENTED
();

46 
	}
}

48 
ölöe
 

49 
	$pm_ru¡ime_£t_autosu•íd_dñay
(
devi˚
 *
dev
, 
dñay
)

51 
	`UNIMPLEMENTED
();

52 
	}
}

54 
ölöe
 

55 
	$__pm_ru¡ime_ªsume
(
devi˚
 *
dev
, 
ΩmÊags
)

57 
	`UNIMPLEMENTED_ONCE
();

59 
	}
}

61 
ölöe
 

62 
	$__pm_ru¡ime_idÀ
(
devi˚
 *
dev
, 
ΩmÊags
)

64 
	`UNIMPLEMENTED
();

66 
	}
}

68 
ölöe
 

69 
	$pm_ru¡ime_gë_n‹esume
(
devi˚
 *
dev
)

71 #ifde‡
__löux__


72 
	`©omic_öc
(&
dev
->
powî
.
ußge_cou¡
);

74 
	}
}

76 
ölöe
 
	$pm_ru¡ime_ªsume
(
devi˚
 *
dev
)

78  
	`__pm_ru¡ime_ªsume
(
dev
, 0);

79 
	}
}

81 
ölöe
 

82 
	$pm_ru¡ime_gë
(
devi˚
 *
dev
)

84  (
	`__pm_ru¡ime_ªsume
(
dev
, 
RPM_GET_PUT
 | 
RPM_ASYNC
));

85 
	}
}

87 
ölöe
 

88 
	$pm_ru¡ime_gë_sync
(
devi˚
 *
dev
)

90  (
	`__pm_ru¡ime_ªsume
(
dev
, 
RPM_GET_PUT
));

91 
	}
}

93 
ölöe
 

94 
	$pm_ru¡ime_put
(
devi˚
 *
dev
)

96  (
	`__pm_ru¡ime_idÀ
(
dev
, 
RPM_GET_PUT
 | 
RPM_ASYNC
));

97 
	}
}

99 
ölöe
 
	$pm_ru¡ime_put_noidÀ
(
devi˚
 *
dev
)

101 #ifde‡
__löux__


102 
	`©omic_add_u∆ess
(&
dev
->
powî
.
ußge_cou¡
, -1, 0);

104 
	}
}

106 
ölöe
 

107 
	$pm_ru¡ime_put_autosu•íd
(
devi˚
 *
dev
)

109  (
	`__pm_ru¡ime_su•íd
(
dev
, 
RPM_GET_PUT
 | 
RPM_ASYNC
 | 
RPM_AUTO
));

110 
	}
}

112 
ölöe
 

113 
	$pm_ru¡ime_u£_autosu•íd
(
devi˚
 *
dev
)

115 
	`__pm_ru¡ime_u£_autosu•íd
(
dev
, 
åue
);

116 
	}
}

118 
ölöe
 

119 
	$pm_ru¡ime_d⁄t_u£_autosu•íd
(
devi˚
 *
dev
)

121 
	`__pm_ru¡ime_u£_autosu•íd
(
dev
, 
Ál£
);

122 
	}
}

124 
ölöe
 

125 
	$pm_gíîic_ru¡ime_su•íd
(
devi˚
 *
dev
)

127 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

129  (
pm
 &&Öm->
ru¡ime_su•íd
 ?Öm->
	`ru¡ime_su•íd
(
dev
) : 0);

130 
	}
}

132 
ölöe
 

133 
	$pm_gíîic_ru¡ime_ªsume
(
devi˚
 *
dev
)

135 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

137  (
pm
 &&Öm->
ru¡ime_ªsume
 ?Öm->
	`ru¡ime_ªsume
(
dev
) : 0);

138 
	}
}

140 
ölöe
 

141 
	$pm_gíîic_su•íd
(
devi˚
 *
dev
)

143 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

145  (
pm
 &&Öm->
su•íd
 ?Öm->
	`su•íd
(
dev
) : 0);

146 
	}
}

148 
ölöe
 

149 
	$pm_gíîic_ªsume
(
devi˚
 *
dev
)

151 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

153  
pm
 &&Öm->
ªsume
 ?Öm->
	`ªsume
(
dev
) : 0;

154 
	}
}

156 
ölöe
 

157 
	$pm_gíîic_ª°‹e
(
devi˚
 *
dev
)

159 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

161  (
pm
 &&Öm->
ª°‹e
 ?Öm->
	`ª°‹e
(
dev
) : 0);

162 
	}
}

164 
ölöe
 

165 
	$pm_gíîic_‰ìze
(
devi˚
 *
dev
)

167 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

169  (
pm
 &&Öm->
‰ìze
 ?Öm->
	`‰ìze
(
dev
) : 0);

170 
	}
}

172 
ölöe
 

173 
	$pm_gíîic_thaw
(
devi˚
 *
dev
)

175 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

177  (
pm
 &&Öm->
thaw
 ?Öm->
	`thaw
(
dev
) : 0);

178 
	}
}

179 
ölöe
 

180 
	$pm_gíîic_powîoff
(
devi˚
 *
dev
)

182 c⁄° 
dev_pm_›s
 *
pm
 = 
dev
->
drivî
 ? dev->drivî->pm : 
NULL
;

184  (
pm
 &&Öm->
powîoff
 ?Öm->
	`powîoff
(
dev
) : 0);

185 
	}
}

187 
ölöe
 

188 
	$pm_ru¡ime_f‹bid
(
devi˚
 *
dev
){

189 
	`UNIMPLEMENTED
();

190 
	}
}

192 
ölöe
 

193 
	$pm_ru¡ime_autosu•íd
(
devi˚
 *
dev
){

194 
	`UNIMPLEMENTED
();

196 
	}
}

198 
ölöe
 

199 
	$pm_ru¡ime_£t_a˘ive
(
devi˚
 *
dev
){

200 
	`UNIMPLEMENTED
();

202 
	}
}

204 
ölöe
 

205 
	$pm_ru¡ime_Ælow
(
devi˚
 *
dev
){

206 
	`UNIMPLEMENTED
();

207 
	}
}

209 
ölöe
 
	$pm_ru¡ime_íabÀ
(
devi˚
 *
dev
Ë{ 
	`UNIMPLEMENTED
();
	}
}

211 
ölöe
 
	$__pm_ru¡ime_dißbÀ
(
devi˚
 *
dev
, 
boﬁ
 
c
Ë{ 
	`UNIMPLEMENTED
(); 
	}
}

212 
ölöe
 
	$pm_ru¡ime_dißbÀ
(
devi˚
 *
dev
)

214 
	`__pm_ru¡ime_dißbÀ
(
dev
, 
åue
);

215 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/power_supply.h

1 #i‚de‡
_LINUX_POWER_SUPPLY_H_


2 
	#_LINUX_POWER_SUPPLY_H_


	)

4 
	~<sys/î∫o.h
>

6 
ölöe
 
	$powî_suµly_is_sy°em_suµlõd
(Ë{  -
ENOSYS
; 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/prefetch.h

1 #i‚de‡
_LINUX_PREFETCH_H


2 
	#_LINUX_PREFETCH_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/¥o˚ss‹.h
>

7 #i‚de‡
ARCH_HAS_PREFETCH


8 
	#¥e„tch
(
x
Ë
	`__buûtö_¥e„tch
(x)

	)

11 #i‚de‡
ARCH_HAS_PREFETCHW


12 
	#¥e„tchw
(
x
Ë
	`__buûtö_¥e„tch
(x,1)

	)

	@src/common/linuxkpi/gplv2/include/linux/property.h

1 #i‚de‡
_LINUX_PROPERTY_H_


2 
	#_LINUX_PROPERTY_H_


	)

4 
	~<löux/fwnode.h
>

5 
	~<löux/ty≥s.h
>

	@src/common/linuxkpi/gplv2/include/linux/pwm.h

1 #i‚de‡
_LINUX_PWM_H_


2 
	#_LINUX_PWM_H_


	)

4 
	~<löux/muãx.h
>

5 
	~<löux/devi˚.h
>

7 
	epwm_pﬁ¨ôy
 {

8 
	mPWM_POLARITY_NORMAL
,

9 
	mPWM_POLARITY_INVERSED
,

12 
	spwm_¨gs
 {

13 
	m≥riod
;

14 
pwm_pﬁ¨ôy
 
	mpﬁ¨ôy
;

18 
	mPWMF_REQUESTED
 = 1 << 0,

19 
	mPWMF_EXPORTED
 = 1 << 1,

22 
	spwm_°©e
 {

23 
	m≥riod
;

24 
	mduty_cy˛e
;

25 
pwm_pﬁ¨ôy
 
	mpﬁ¨ôy
;

26 
boﬁ
 
	míabÀd
;

29 
	spwm_devi˚
 {

30 c⁄° *
	mœbñ
;

31 
	mÊags
;

32 
	mhwpwm
;

33 
	mpwm
;

34 
pwm_chù
 *
	mchù
;

35 *
	mchù_d©a
;

37 
pwm_¨gs
 
	m¨gs
;

38 
pwm_°©e
 
	m°©e
;

42 
ölöe
 
	$pwm_gë_°©e
(c⁄° 
pwm_devi˚
 *
pwm
,

43 
pwm_°©e
 *
°©e
)

45 *
°©e
 = 
pwm
->state;

46 
	}
}

48 
ölöe
 
	$pwm_≠∂y_°©e
(
pwm_devi˚
 *
pwm
,

49 c⁄° 
pwm_°©e
 *
°©e
)

51 
	`UNIMPLEMENTED
();

52  -
ENOTSUPP
;

53 
	}
}

55 
ölöe
 

56 
	$pwm_put
(
pwm_devi˚
 *
pwm
)

58 
	`UNIMPLEMENTED
();

59 
	}
}

61 
ölöe
 
pwm_devi˚
 *

62 
	$pwm_gë
(
devi˚
 *
dev
, c⁄° *
c⁄_id
)

64 
	`UNIMPLEMENTED
();

65  (
NULL
);

66 
	}
}

68 
ölöe
 

69 
	$pwm_íabÀ
(
pwm_devi˚
 *
pwm
)

71 
	`UNIMPLEMENTED
();

73 
	}
}

75 
ölöe
 
	$pwm_dißbÀ
(
pwm_devi˚
 *
pwm
)

77 
pwm_°©e
 
°©e
;

79 i‡(!
pwm
)

82 
	`pwm_gë_°©e
(
pwm
, &
°©e
);

83 i‡(!
°©e
.
íabÀd
)

86 
°©e
.
íabÀd
 = 
Ál£
;

87 
	`pwm_≠∂y_°©e
(
pwm
, &
°©e
);

88 
	}
}

91 
ölöe
 

92 
	$pwm_gë_duty_cy˛e
(c⁄° 
pwm_devi˚
 *
pwm
)

94 
	`UNIMPLEMENTED
();

96 
	}
}

98 
ölöe
 

99 
	$pwm_c⁄fig
(
pwm_devi˚
 *
pwm
, 
duty_ns
, 
≥riod_ns
)

101 
	`UNIMPLEMENTED
();

103 
	}
}

105 
ölöe
 
	$pwm_£t_pﬁ¨ôy
(
pwm_devi˚
 *
pwm
,

106 
pwm_pﬁ¨ôy
 
pﬁ¨ôy
)

108 
pwm_°©e
 
°©e
;

110 i‡(!
pwm
)

111  -
EINVAL
;

113 
	`pwm_gë_°©e
(
pwm
, &
°©e
);

114 i‡(
°©e
.
pﬁ¨ôy
 ==Öolarity)

124 i‡(
°©e
.
íabÀd
)

125  -
EBUSY
;

127 
°©e
.
pﬁ¨ôy
 =Öolarity;

128  
	`pwm_≠∂y_°©e
(
pwm
, &
°©e
);

129 
	}
}

132 
ölöe
 
	$pwm_≠∂y_¨gs
(
pwm_devi˚
 *
pwm
)

156 
	`pwm_dißbÀ
(
pwm
);

157 
	`pwm_£t_pﬁ¨ôy
(
pwm
,Öwm->
¨gs
.
pﬁ¨ôy
);

158 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/ratelimit.h

1 #i‚de‡
_LINUX_RATELIMIT_H


2 
	#_LINUX_RATELIMIT_H


	)

4 
	~<löux/sched.h
>

5 
	~<löux/•ölock.h
>

7 
	#DEFAULT_RATELIMIT_INTERVAL
 (5 * 1000 )

	)

8 
	#DEFAULT_RATELIMIT_BURST
 10

	)

11 
	#RATELIMIT_MSG_ON_RELEASE
 
	`BIT
(0)

	)

13 
	søãlimô_°©e
 {

14 
•ölock_t
 
	mlock
;

16 
	möãrvÆ
;

17 
	mbur°
;

18 
	m¥öãd
;

19 
	mmis£d
;

20 
	mbegö
;

21 
	mÊags
;

24 
	#RATELIMIT_STATE_INIT
(
«me
, 
öãrvÆ_öô
, 
bur°_öô
) { \

25 .
öãrvÆ
 = 
öãrvÆ_öô
, \

26 .
bur°
 = 
bur°_öô
, \

27 }

	)

29 
	#RATELIMIT_STATE_INIT_DISABLED
 \

30 
	`RATELIMIT_STATE_INIT
(
øãlimô_°©e
, 0, 
DEFAULT_RATELIMIT_BURST
)

	)

32 
	#DEFINE_RATELIMIT_STATE
(
«me
, 
öãrvÆ_öô
, 
bur°_öô
) \

34 
øãlimô_°©e
 
«me
 = \

35 
	`RATELIMIT_STATE_INIT
(
«me
, 
öãrvÆ_öô
, 
bur°_öô
) \

36 

	)

37 
ölöe
 
	$øãlimô_°©e_öô
(
øãlimô_°©e
 *
rs
,

38 
öãrvÆ
, 
bur°
)

40 
	`mem£t
(
rs
, 0, (*rs));

42 
	`•ö_lock_öô
(&
rs
->
lock
);

43 
rs
->
öãrvÆ
 = interval;

44 
rs
->
bur°
 = burst;

45 
	}
}

48 
ölöe
 

49 
	$___øãlimô
(
øãlimô_°©e
 *
rs
, c⁄° *
func
)

53 
	}
}

54 
	#__øãlimô
(
°©e
Ë
	`___øãlimô
(°©e, 
__func__
)

	)

	@src/common/linuxkpi/gplv2/include/linux/rbtree.h

29 #i‚def 
_LINUX_RBTREE_H


30 
	#_LINUX_RBTREE_H


	)

36 
	~<sys/∑øm.h
>

37 
	~<sys/sockë.h
>

39 
	~<√t/if.h
>

40 
	~<√t/if_v¨.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/ö_v¨.h
>

45 #unde‡
RB_ROOT


46 #unde‡
RB_RED


47 #unde‡
RB_BLACK


50 
	~<löux/kî√l.h
>

51 
	~<löux/°ddef.h
>

52 
	~<löux/rcupd©e.h
>

54 
	srb_node
 {

55 
	m__rb_∑ª¡_cﬁ‹
;

56 
rb_node
 *
	mrb_right
;

57 
rb_node
 *
	mrb_À·
;

58 } 
__©åibuã__
((
Æig√d
(())));

61 
	srb_roŸ
 {

62 
rb_node
 *
	mrb_node
;

75 
	srb_roŸ_ˇched
 {

76 
rb_roŸ
 
	mrb_roŸ
;

77 
rb_node
 *
	mrb_À·mo°
;

80 
	#rb_∑ª¡
(
r
Ë((
rb_node
 *)(‘)->
__rb_∑ª¡_cﬁ‹
 & ~3))

	)

82 
	#RB_ROOT
 (
rb_roŸ
Ë{ 
NULL
, }

	)

83 
	#RB_ROOT_CACHED
 (
rb_roŸ_ˇched
Ë{ {
NULL
, }, NULL }

	)

84 
	#rb_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

86 
	#RB_EMPTY_ROOT
(
roŸ
Ë(
	`READ_ONCE
(‘oŸ)->
rb_node
Ë=
NULL
)

	)

89 
	#RB_EMPTY_NODE
(
node
) \

90 ((
node
)->
__rb_∑ª¡_cﬁ‹
 =()“ode))

	)

91 
	#RB_CLEAR_NODE
(
node
) \

92 ((
node
)->
__rb_∑ª¡_cﬁ‹
 = ()“ode))

	)

95 
rb_ö£π_cﬁ‹
(
rb_node
 *, 
rb_roŸ
 *);

96 
rb_îa£
(
rb_node
 *, 
rb_roŸ
 *);

100 
rb_node
 *
rb_√xt
(const rb_node *);

101 
rb_node
 *
rb_¥ev
(const rb_node *);

102 
rb_node
 *
rb_fú°
(c⁄° 
rb_roŸ
 *);

103 
rb_node
 *
rb_œ°
(c⁄° 
rb_roŸ
 *);

105 
rb_ö£π_cﬁ‹_ˇched
(
rb_node
 *,

106 
rb_roŸ_ˇched
 *, 
boﬁ
);

107 
rb_îa£_ˇched
(
rb_node
 *
node
, 
rb_roŸ_ˇched
 *);

109 
	#rb_fú°_ˇched
(
roŸ
Ë‘oŸ)->
rb_À·mo°


	)

112 
rb_node
 *
rb_fú°_po°‹dî
(c⁄° 
rb_roŸ
 *);

113 
rb_node
 *
rb_√xt_po°‹dî
(const rb_node *);

116 
rb_ª∂a˚_node
(
rb_node
 *
vi˘im
, rb_nodê*
√w
,

117 
rb_roŸ
 *
roŸ
);

118 
rb_ª∂a˚_node_rcu
(
rb_node
 *
vi˘im
, rb_nodê*
√w
,

119 
rb_roŸ
 *
roŸ
);

120 
rb_ª∂a˚_node_ˇched
(
rb_node
 *
vi˘im
, rb_nodê*
√w
,

121 
rb_roŸ_ˇched
 *
roŸ
);

123 
ölöe
 
	$rb_lök_node
(
rb_node
 *
node
, rb_nodê*
∑ª¡
,

124 
rb_node
 **
rb_lök
)

126 
node
->
__rb_∑ª¡_cﬁ‹
 = ()
∑ª¡
;

127 
node
->
rb_À·
 =Çode->
rb_right
 = 
NULL
;

129 *
rb_lök
 = 
node
;

130 
	}
}

132 
ölöe
 
	$rb_lök_node_rcu
(
rb_node
 *
node
, rb_nodê*
∑ª¡
,

133 
rb_node
 **
rb_lök
)

135 
node
->
__rb_∑ª¡_cﬁ‹
 = ()
∑ª¡
;

136 
node
->
rb_À·
 =Çode->
rb_right
 = 
NULL
;

138 
	`rcu_assign_poöãr
(*
rb_lök
, 
node
);

139 
	}
}

141 
	#rb_íåy_ß„
(
±r
, 
ty≥
, 
membî
) \

142 ({ 
	`ty≥of
(
±r
Ë
____±r
 = (ptr); \

143 
____±r
 ? 
	`rb_íåy
(____±r, 
ty≥
, 
membî
Ë: 
NULL
; \

144 })

	)

163 
	#rbåì_po°‹dî_f‹_óch_íåy_ß„
(
pos
, 
n
, 
roŸ
, 
fõld
) \

164 
pos
 = 
	`rb_íåy_ß„
(
	`rb_fú°_po°‹dî
(
roŸ
), 
	`ty≥of
(*pos), 
fõld
); \

165 
pos
 && ({ 
n
 = 
	`rb_íåy_ß„
(
	`rb_√xt_po°‹dî
(&pos->
fõld
), \

166 
	`ty≥of
(*
pos
), 
fõld
); 1; }); \

167 
pos
 = 
n
)

	)

	@src/common/linuxkpi/gplv2/include/linux/rbtree_augmented.h

24 #i‚de‡
_LINUX_RBTREE_AUGMENTED_H


25 
	#_LINUX_RBTREE_AUGMENTED_H


	)

27 
	~<löux/compûî.h
>

28 
	~<löux/rbåì.h
>

38 
	srb_augmít_ˇŒbacks
 {

39 (*
	m¥›ag©e
)(
rb_node
 *
	mnode
, rb_nodê*
	m°›
);

40 (*
	mc›y
)(
rb_node
 *
	mﬁd
, rb_nodê*
	m√w
);

41 (*
	mrŸ©e
)(
rb_node
 *
	mﬁd
, rb_nodê*
	m√w
);

44 
__rb_ö£π_augmíãd
(
rb_node
 *
node
,

45 
rb_roŸ
 *
roŸ
,

46 
boﬁ
 
√wÀ·
, 
rb_node
 **
À·mo°
,

47 (*
augmít_rŸ©e
)(
rb_node
 *
ﬁd
, rb_nodê*
√w
));

58 
ölöe
 

59 
	$rb_ö£π_augmíãd
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
,

60 c⁄° 
rb_augmít_ˇŒbacks
 *
augmít
)

62 
	`__rb_ö£π_augmíãd
(
node
, 
roŸ
, 
Ál£
, 
NULL
, 
augmít
->
rŸ©e
);

63 
	}
}

65 
ölöe
 

66 
	$rb_ö£π_augmíãd_ˇched
(
rb_node
 *
node
,

67 
rb_roŸ_ˇched
 *
roŸ
, 
boﬁ
 
√wÀ·
,

68 c⁄° 
rb_augmít_ˇŒbacks
 *
augmít
)

70 
	`__rb_ö£π_augmíãd
(
node
, &
roŸ
->
rb_roŸ
,

71 
√wÀ·
, &
roŸ
->
rb_À·mo°
, 
augmít
->
rŸ©e
);

72 
	}
}

74 
	#RB_DECLARE_CALLBACKS
(
rb°©ic
, 
rb«me
, 
rb°ru˘
, 
rbfõld
, \

75 
rbty≥
, 
rbaugmíãd
, 
rbcompuã
) \

76 
ölöe
 \

77 
rb«me
 ## 
	`_¥›ag©e
(
rb_node
 *
rb
, rb_nodê*
°›
) \

79 
rb
 !
°›
) { \

80 
rb°ru˘
 *
node
 = 
	`rb_íåy
(
rb
,Ñb°ru˘, 
rbfõld
); \

81 
rbty≥
 
augmíãd
 = 
	`rbcompuã
(
node
); \

82 i‡(
node
->
rbaugmíãd
 =
augmíãd
) \

84 
node
->
rbaugmíãd
 = 
augmíãd
; \

85 
rb
 = 
	`rb_∑ª¡
(&
node
->
rbfõld
); \

88 
ölöe
 \

89 
rb«me
 ## 
	`_c›y
(
rb_node
 *
rb_ﬁd
, rb_nodê*
rb_√w
) \

91 
rb°ru˘
 *
ﬁd
 = 
	`rb_íåy
(
rb_ﬁd
,Ñb°ru˘, 
rbfõld
); \

92 
rb°ru˘
 *
√w
 = 
	`rb_íåy
(
rb_√w
,Ñb°ru˘, 
rbfõld
); \

93 
√w
->
rbaugmíãd
 = 
ﬁd
->rbaugmented; \

96 
rb«me
 ## 
	`_rŸ©e
(
rb_node
 *
rb_ﬁd
, rb_nodê*
rb_√w
) \

98 
rb°ru˘
 *
ﬁd
 = 
	`rb_íåy
(
rb_ﬁd
,Ñb°ru˘, 
rbfõld
); \

99 
rb°ru˘
 *
√w
 = 
	`rb_íåy
(
rb_√w
,Ñb°ru˘, 
rbfõld
); \

100 
√w
->
rbaugmíãd
 = 
ﬁd
->rbaugmented; \

101 
ﬁd
->
rbaugmíãd
 = 
	`rbcompuã
(old); \

103 
rb°©ic
 c⁄° 
rb_augmít_ˇŒbacks
 
rb«me
 = { \

104 .
¥›ag©e
 = 
rb«me
 ## 
_¥›ag©e
, \

105 .
c›y
 = 
rb«me
 ## 
_c›y
, \

106 .
rŸ©e
 = 
rb«me
 ## 
_rŸ©e
 \

107 };

	)

110 
	#RB_RED
 0

	)

111 
	#RB_BLACK
 1

	)

113 
	#__rb_∑ª¡
(
pc
Ë((
rb_node
 *)’¯& ~3))

	)

115 
	#__rb_cﬁ‹
(
pc
Ë(’cË& 1)

	)

116 
	#__rb_is_bœck
(
pc
Ë
	`__rb_cﬁ‹
’c)

	)

117 
	#__rb_is_ªd
(
pc
Ë(!
	`__rb_cﬁ‹
’c))

	)

118 
	#rb_cﬁ‹
(
rb
Ë
	`__rb_cﬁ‹
(‘b)->
__rb_∑ª¡_cﬁ‹
)

	)

119 
	#rb_is_ªd
(
rb
Ë
	`__rb_is_ªd
(‘b)->
__rb_∑ª¡_cﬁ‹
)

	)

120 
	#rb_is_bœck
(
rb
Ë
	`__rb_is_bœck
(‘b)->
__rb_∑ª¡_cﬁ‹
)

	)

122 
ölöe
 
	$rb_£t_∑ª¡
(
rb_node
 *
rb
, rb_nodê*
p
)

124 
rb
->
__rb_∑ª¡_cﬁ‹
 = 
	`rb_cﬁ‹
‘bË| ()
p
;

125 
	}
}

127 
ölöe
 
	$rb_£t_∑ª¡_cﬁ‹
(
rb_node
 *
rb
,

128 
rb_node
 *
p
, 
cﬁ‹
)

130 
rb
->
__rb_∑ª¡_cﬁ‹
 = ()
p
 | 
cﬁ‹
;

131 
	}
}

133 
ölöe
 

134 
	$__rb_ch™ge_chûd
(
rb_node
 *
ﬁd
, rb_nodê*
√w
,

135 
rb_node
 *
∑ª¡
, 
rb_roŸ
 *
roŸ
)

137 i‡(
∑ª¡
) {

138 i‡(
∑ª¡
->
rb_À·
 =
ﬁd
)

139 
	`WRITE_ONCE
(
∑ª¡
->
rb_À·
, 
√w
);

141 
	`WRITE_ONCE
(
∑ª¡
->
rb_right
, 
√w
);

143 
	`WRITE_ONCE
(
roŸ
->
rb_node
, 
√w
);

144 
	}
}

146 
ölöe
 

147 
	$__rb_ch™ge_chûd_rcu
(
rb_node
 *
ﬁd
, rb_nodê*
√w
,

148 
rb_node
 *
∑ª¡
, 
rb_roŸ
 *
roŸ
)

150 i‡(
∑ª¡
) {

151 i‡(
∑ª¡
->
rb_À·
 =
ﬁd
)

152 
	`rcu_assign_poöãr
(
∑ª¡
->
rb_À·
, 
√w
);

154 
	`rcu_assign_poöãr
(
∑ª¡
->
rb_right
, 
√w
);

156 
	`rcu_assign_poöãr
(
roŸ
->
rb_node
, 
√w
);

157 
	}
}

159 
__rb_îa£_cﬁ‹
(
rb_node
 *
∑ª¡
, 
rb_roŸ
 *
roŸ
,

160 (*
augmít_rŸ©e
)(
rb_node
 *
ﬁd
, rb_nodê*
√w
));

162 
__Æways_ölöe
 
rb_node
 *

163 
	$__rb_îa£_augmíãd
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
,

164 
rb_node
 **
À·mo°
,

165 c⁄° 
rb_augmít_ˇŒbacks
 *
augmít
)

167 
rb_node
 *
chûd
 = 
node
->
rb_right
;

168 
rb_node
 *
tmp
 = 
node
->
rb_À·
;

169 
rb_node
 *
∑ª¡
, *
ªbÆ™˚
;

170 
pc
;

172 i‡(
À·mo°
 && 
node
 == *leftmost)

173 *
À·mo°
 = 
	`rb_√xt
(
node
);

175 i‡(!
tmp
) {

183 
pc
 = 
node
->
__rb_∑ª¡_cﬁ‹
;

184 
∑ª¡
 = 
	`__rb_∑ª¡
(
pc
);

185 
	`__rb_ch™ge_chûd
(
node
, 
chûd
, 
∑ª¡
, 
roŸ
);

186 i‡(
chûd
) {

187 
chûd
->
__rb_∑ª¡_cﬁ‹
 = 
pc
;

188 
ªbÆ™˚
 = 
NULL
;

190 
ªbÆ™˚
 = 
	`__rb_is_bœck
(
pc
Ë? 
∑ª¡
 : 
NULL
;

191 
tmp
 = 
∑ª¡
;

192 } i‡(!
chûd
) {

194 
tmp
->
__rb_∑ª¡_cﬁ‹
 = 
pc
 = 
node
->__rb_parent_color;

195 
∑ª¡
 = 
	`__rb_∑ª¡
(
pc
);

196 
	`__rb_ch™ge_chûd
(
node
, 
tmp
, 
∑ª¡
, 
roŸ
);

197 
ªbÆ™˚
 = 
NULL
;

198 
tmp
 = 
∑ª¡
;

200 
rb_node
 *
suc˚ss‹
 = 
chûd
, *
chûd2
;

202 
tmp
 = 
chûd
->
rb_À·
;

203 i‡(!
tmp
) {

213 
∑ª¡
 = 
suc˚ss‹
;

214 
chûd2
 = 
suc˚ss‹
->
rb_right
;

216 
augmít
->
	`c›y
(
node
, 
suc˚ss‹
);

233 
∑ª¡
 = 
suc˚ss‹
;

234 
suc˚ss‹
 = 
tmp
;

235 
tmp
 =Åmp->
rb_À·
;

236 } 
tmp
);

237 
chûd2
 = 
suc˚ss‹
->
rb_right
;

238 
	`WRITE_ONCE
(
∑ª¡
->
rb_À·
, 
chûd2
);

239 
	`WRITE_ONCE
(
suc˚ss‹
->
rb_right
, 
chûd
);

240 
	`rb_£t_∑ª¡
(
chûd
, 
suc˚ss‹
);

242 
augmít
->
	`c›y
(
node
, 
suc˚ss‹
);

243 
augmít
->
	`¥›ag©e
(
∑ª¡
, 
suc˚ss‹
);

246 
tmp
 = 
node
->
rb_À·
;

247 
	`WRITE_ONCE
(
suc˚ss‹
->
rb_À·
, 
tmp
);

248 
	`rb_£t_∑ª¡
(
tmp
, 
suc˚ss‹
);

250 
pc
 = 
node
->
__rb_∑ª¡_cﬁ‹
;

251 
tmp
 = 
	`__rb_∑ª¡
(
pc
);

252 
	`__rb_ch™ge_chûd
(
node
, 
suc˚ss‹
, 
tmp
, 
roŸ
);

254 i‡(
chûd2
) {

255 
suc˚ss‹
->
__rb_∑ª¡_cﬁ‹
 = 
pc
;

256 
	`rb_£t_∑ª¡_cﬁ‹
(
chûd2
, 
∑ª¡
, 
RB_BLACK
);

257 
ªbÆ™˚
 = 
NULL
;

259 
pc2
 = 
suc˚ss‹
->
__rb_∑ª¡_cﬁ‹
;

260 
suc˚ss‹
->
__rb_∑ª¡_cﬁ‹
 = 
pc
;

261 
ªbÆ™˚
 = 
	`__rb_is_bœck
(
pc2
Ë? 
∑ª¡
 : 
NULL
;

263 
tmp
 = 
suc˚ss‹
;

266 
augmít
->
	`¥›ag©e
(
tmp
, 
NULL
);

267  
ªbÆ™˚
;

268 
	}
}

270 
__Æways_ölöe
 

271 
	$rb_îa£_augmíãd
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
,

272 c⁄° 
rb_augmít_ˇŒbacks
 *
augmít
)

274 
rb_node
 *
ªbÆ™˚
 = 
	`__rb_îa£_augmíãd
(
node
, 
roŸ
,

275 
NULL
, 
augmít
);

276 i‡(
ªbÆ™˚
)

277 
	`__rb_îa£_cﬁ‹
(
ªbÆ™˚
, 
roŸ
, 
augmít
->
rŸ©e
);

278 
	}
}

280 
__Æways_ölöe
 

281 
	$rb_îa£_augmíãd_ˇched
(
rb_node
 *
node
, 
rb_roŸ_ˇched
 *
roŸ
,

282 c⁄° 
rb_augmít_ˇŒbacks
 *
augmít
)

284 
rb_node
 *
ªbÆ™˚
 = 
	`__rb_îa£_augmíãd
(
node
, &
roŸ
->
rb_roŸ
,

285 &
roŸ
->
rb_À·mo°
,

286 
augmít
);

287 i‡(
ªbÆ™˚
)

288 
	`__rb_îa£_cﬁ‹
(
ªbÆ™˚
, &
roŸ
->
rb_roŸ
, 
augmít
->
rŸ©e
);

289 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/reboot.h

1 #i‚de‡
_LINUX_REBOOT_H


2 
	#_LINUX_REBOOT_H


	)

5 
	~<löux/nŸifõr.h
>

7 
	~<u≠i/löux/ªboŸ.h
>

9 
	#SYS_DOWN
 0x0001

	)

10 
	#SYS_RESTART
 
SYS_DOWN


	)

11 
	#SYS_HALT
 0x0002

	)

12 
	#SYS_POWER_OFF
 0x0003

	)

14 
	eªboŸ_mode
 {

15 
	mREBOOT_COLD
 = 0,

16 
	mREBOOT_WARM
,

17 
	mREBOOT_HARD
,

18 
	mREBOOT_SOFT
,

19 
	mREBOOT_GPIO
,

21 
ªboŸ_mode
Ñeboot_mode;

23 
	eªboŸ_ty≥
 {

24 
	mBOOT_TRIPLE
 = 't',

25 
	mBOOT_KBD
 = 'k',

26 
	mBOOT_BIOS
 = 'b',

27 
	mBOOT_ACPI
 = 'a',

28 
	mBOOT_EFI
 = 'e',

29 
	mBOOT_CF9_FORCE
 = 'p',

30 
	mBOOT_CF9_SAFE
 = 'q',

32 
ªboŸ_ty≥
Ñeboot_type;

34 
ªboŸ_deÁu…
;

35 
ªboŸ_˝u
;

36 
ªboŸ_f‹˚
;

39 
ªgi°î_ªboŸ_nŸifõr
(
nŸifõr_block
 *);

40 
uƒegi°î_ªboŸ_nŸifõr
(
nŸifõr_block
 *);

42 
ªgi°î_ª°¨t_h™dÀr
(
nŸifõr_block
 *);

	@src/common/linuxkpi/gplv2/include/linux/refcount.h

1 #i‚de‡
_LINUX_REFCOUNT_H


2 
	#_LINUX_REFCOUNT_H


	)

4 
	~<löux/©omic.h
>

7 
ölöe
 
boﬁ


8 
	$ªfcou¡_dec_™d_ã°
(
©omic_t
 *
r
)

11  
	`©omic_dec_™d_ã°
(
r
);

12 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/relay.h

2 #i‚de‡
_LINUX_RELAY_H


3 
	#_LINUX_RELAY_H


	)

5 
	~<löux/ty≥s.h
>

6 
	~<löux/sched.h
>

7 
	~<löux/timî.h
>

8 
	~<löux/waô.h
>

9 
	~<löux/li°.h
>

11 
	~<löux/bug.h
>

12 
	~<löux/fs.h
>

13 
	~<löux/pﬁl.h
>

14 
	~<löux/kªf.h
>

16 
	~<asm/smp.h
>

20 
	#RELAYFS_CHANNEL_VERSION
 7

	)

25 
	#úq_w‹k_sync
(
x
)

	)

26 
	#úq_w‹k_queue
(
x
)

	)

27 
	#öô_úq_w‹k
(
x
, 
y
)

	)

28 
	#Æloc_≥r˝u
(
x
Ë
	`kmÆloc
(
mp_n˝us
*(x), 
GFP_KERNEL
)

	)

31 
	súq_w‹k
 {

35 
	srch™_buf


37 *
	m°¨t
;

38 *
	md©a
;

39 
size_t
 
	moff£t
;

40 
size_t
 
	msubbufs_¥odu˚d
;

41 
size_t
 
	msubbufs_c⁄sumed
;

42 
rch™
 *
	mch™
;

43 
waô_queue_hód_t
 
	mªad_waô
;

44 
úq_w‹k
 
	mwakeup_w‹k
;

45 
díåy
 *
	mdíåy
;

46 
kªf
 
	mkªf
;

47 
∑ge
 **
	m∑ge_¨øy
;

48 
	m∑ge_cou¡
;

49 
	mföÆized
;

50 
size_t
 *
	m∑ddög
;

51 
size_t
 
	m¥ev_∑ddög
;

52 
size_t
 
	mbyãs_c⁄sumed
;

53 
size_t
 
	móæy_byãs
;

54 
	m˝u
;

57 
	srch™


59 
u32
 
	mvîsi⁄
;

60 
size_t
 
	msubbuf_size
;

61 
size_t
 
	mn_subbufs
;

62 
size_t
 
	mÆloc_size
;

63 
rch™_ˇŒbacks
 *
	mcb
;

64 
kªf
 
	mkªf
;

65 *
	m¥iv©e_d©a
;

66 
size_t
 
	mœ°_toobig
;

67 
rch™_buf
 ** 
__≥r˝u
 
	mbuf
;

68 
	mis_globÆ
;

69 
li°_hód
 
	mli°
;

70 
díåy
 *
	m∑ª¡
;

71 
	mhas_ba£_fûíame
;

72 
	mba£_fûíame
[
NAME_MAX
];

76 
	srch™_ˇŒbacks
 {

77 (*
	msubbuf_°¨t
Ë(
rch™_buf
 *
	mbuf
,

78 *
	msubbuf
,

79 *
	m¥ev_subbuf
,

80 
size_t
 
	m¥ev_∑ddög
);

82 (*
	mbuf_m≠≥d
)(
rch™_buf
 *
	mbuf
,

83 
fûe
 *
	mfûp
);

85 (*
	mbuf_unm≠≥d
)(
rch™_buf
 *
	mbuf
,

86 
fûe
 *
	mfûp
);

88 
	mdíåy
 *(*
	m¸óã_buf_fûe
)(c⁄° *
	mfûíame
,

89 
díåy
 *
	m∑ª¡
,

90 
umode_t
 
	mmode
,

91 
rch™_buf
 *
	mbuf
,

92 *
	mis_globÆ
);

94 (*
	mªmove_buf_fûe
)(
díåy
 *
	mdíåy
);

99 
rch™
 *
ªœy_›í
(c⁄° *
ba£_fûíame
,

100 
díåy
 *
∑ª¡
,

101 
size_t
 
subbuf_size
,

102 
size_t
 
n_subbufs
,

103 
rch™_ˇŒbacks
 *
cb
,

104 *
¥iv©e_d©a
);

105 
ªœy_œã_£tup_fûes
(
rch™
 *
ch™
,

106 c⁄° *
ba£_fûíame
,

107 
díåy
 *
∑ª¡
);

108 
ªœy_˛o£
(
rch™
 *
ch™
);

109 
ªœy_Êush
(
rch™
 *
ch™
);

110 
ªœy_subbufs_c⁄sumed
(
rch™
 *
ch™
,

111 
˝u
,

112 
size_t
 
subbufs_c⁄sumed
);

113 
ªœy_ª£t
(
rch™
 *
ch™
);

114 
ªœy_buf_fuŒ
(
rch™_buf
 *
buf
);

116 
size_t
 
ªœy_swôch_subbuf
(
rch™_buf
 *
buf
,

117 
size_t
 
Àngth
);

119 
ölöe
 
	$__ªœy_wrôe
(
rch™
 *
ch™
,

120 c⁄° *
d©a
,

121 
size_t
 
Àngth
) {

122 
rch™_buf
 *
buf
;

123 
cuº_˝u
;

125 
cuº_˝u
 = 
	`gë_˝u
();

126 
buf
 = 
ch™
->buf[
cuº_˝u
];

127 i‡(
	`u∆ikñy
(
buf
->
off£t
 + 
Àngth
 > buf->
ch™
->
subbuf_size
))

128 
Àngth
 = 
	`ªœy_swôch_subbuf
(
buf
,Üength);

129 
	`mem˝y
((*)
buf
->
d©a
 + buf->
off£t
, d©a, 
Àngth
);

130 
buf
->
off£t
 +
Àngth
;

131 
	`put_˝u
();

132 
	}
}

134 
ölöe
 
	$ªœy_wrôe
(
rch™
 *
ch™
,

135 c⁄° *
d©a
,

136 
size_t
 
Àngth
) {

139 
	`__ªœy_wrôe
(
ch™
, 
d©a
, 
Àngth
);

141 
	}
}

143 
ölöe
 *
	$ªœy_ª£rve
(
rch™
 *
ch™
, 
size_t
 
Àngth
)

145 *
ª£rved
 = 
NULL
;

146 
cuº_˝u
 = 
	`gë_˝u
();

147 
rch™_buf
 *
buf
 = 
ch™
->buf[
cuº_˝u
];

149 i‡(
	`u∆ikñy
(
buf
->
off£t
 + 
Àngth
 > buf->
ch™
->
subbuf_size
)) {

150 
Àngth
 = 
	`ªœy_swôch_subbuf
(
buf
,Üength);

151 i‡(!
Àngth
)

152 
íd
;

154 
ª£rved
 = (*)
buf
->
d©a
 + buf->
off£t
;

155 
buf
->
off£t
 +
Àngth
;

157 
íd
:

158 
	`put_˝u
();

159  
ª£rved
;

160 
	}
}

162 
ölöe
 
	$subbuf_°¨t_ª£rve
(
rch™_buf
 *
buf
,

163 
size_t
 
Àngth
) {

164 
	`BUG_ON
(
Àngth
 >
buf
->
ch™
->
subbuf_size
 - 1);

165 
buf
->
off£t
 = 
Àngth
;

166 
	}
}

168 c⁄° 
fûe_›î©i⁄s
 
ªœy_fûe_›î©i⁄s
;

171 
ªœy_¥ï¨e_˝u
(
˝u
);

	@src/common/linuxkpi/gplv2/include/linux/reservation.h

39 #i‚de‡
_LINUX_RESERVATION_H


40 
	#_LINUX_RESERVATION_H


	)

42 
	~<löux/ww_muãx.h
>

43 
	~<löux/dma-„n˚.h
>

44 
	~<löux/¶ab.h
>

45 
	~<löux/£qlock.h
>

46 
	~<löux/rcupd©e.h
>

47 
	~<löux/©omic.h
>

48 
	~<löux/ødix-åì.h
>

51 
ww_˛ass
 
ª£rv©i⁄_ww_˛ass
;

52 
lock_˛ass_key
 
ª£rv©i⁄_£qcou¡_˛ass
;

53 c⁄° 
ª£rv©i⁄_£qcou¡_°rög
[];

55 
	sª£rv©i⁄_obje˘_li°
 {

56 
rcu_hód
 
	mrcu
;

57 
u32
 
	msh¨ed_cou¡
, 
	msh¨ed_max
;

58 
dma_„n˚
 
__rcu
 *
	msh¨ed
[];

61 
	sª£rv©i⁄_obje˘
 {

62 
ww_muãx
 
	mlock
;

63 
£qcou¡_t
 
	m£q
;

65 
dma_„n˚
 
__rcu
 *
	m„n˚_ex˛
;

66 
ª£rv©i⁄_obje˘_li°
 
__rcu
 *
	m„n˚
;

67 
ª£rv©i⁄_obje˘_li°
 *
	m°aged
;

70 
	#ª£rv©i⁄_obje˘_hñd
(
obj
Ë
	`lockdï_is_hñd
(&(obj)->
lock
.
ba£
)

	)

71 
	#ª£rv©i⁄_obje˘_as£π_hñd
(
obj
) \

72 
	`lockdï_as£π_hñd
(&(
obj
)->
lock
.
ba£
)

	)

74 
ölöe
 

75 
	$ª£rv©i⁄_obje˘_öô
(
ª£rv©i⁄_obje˘
 *
obj
)

77 
	`ww_muãx_öô
(&
obj
->
lock
, &
ª£rv©i⁄_ww_˛ass
);

79 
	`__£qcou¡_öô
(&
obj
->
£q
, 
ª£rv©i⁄_£qcou¡_°rög
, &
ª£rv©i⁄_£qcou¡_˛ass
);

80 
	`RCU_INIT_POINTER
(
obj
->
„n˚
, 
NULL
);

81 
	`RCU_INIT_POINTER
(
obj
->
„n˚_ex˛
, 
NULL
);

82 
obj
->
°aged
 = 
NULL
;

83 
	}
}

85 
ölöe
 

86 
	$ª£rv©i⁄_obje˘_föi
(
ª£rv©i⁄_obje˘
 *
obj
)

88 
i
;

89 
ª£rv©i⁄_obje˘_li°
 *
fobj
;

90 
dma_„n˚
 *
ex˛
;

96 
ex˛
 = 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
obj
->
„n˚_ex˛
, 1);

97 i‡(
ex˛
)

98 
	`dma_„n˚_put
(
ex˛
);

100 
fobj
 = 
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
obj
->
„n˚
, 1);

101 i‡(
fobj
) {

102 
i
 = 0; i < 
fobj
->
sh¨ed_cou¡
; ++i)

103 
	`dma_„n˚_put
(
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
fobj
->
sh¨ed
[
i
], 1));

105 
	`k‰ì
(
fobj
);

107 
	`k‰ì
(
obj
->
°aged
);

109 
	`ww_muãx_de°roy
(&
obj
->
lock
);

110 
	}
}

112 
ölöe
 
ª£rv©i⁄_obje˘_li°
 *

113 
	$ª£rv©i⁄_obje˘_gë_li°
(
ª£rv©i⁄_obje˘
 *
obj
)

115  
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
obj
->
„n˚
,

116 
	`ª£rv©i⁄_obje˘_hñd
(
obj
));

117 
	}
}

119 
ölöe
 
dma_„n˚
 *

120 
	$ª£rv©i⁄_obje˘_gë_ex˛
(
ª£rv©i⁄_obje˘
 *
obj
)

122  
	`rcu_dîe„ªn˚_¥Ÿe˘ed
(
obj
->
„n˚_ex˛
,

123 
	`ª£rv©i⁄_obje˘_hñd
(
obj
));

124 
	}
}

126 
ölöe
 
dma_„n˚
 *

127 
	$ª£rv©i⁄_obje˘_gë_ex˛_rcu
(
ª£rv©i⁄_obje˘
 *
obj
)

129 
dma_„n˚
 *
„n˚
;

130 
£q
;

131 
ªåy
:

132 
£q
 = 
	`ªad_£qcou¡_begö
(&
obj
->seq);

133 
	`rcu_ªad_lock
();

134 
„n˚
 = 
	`rcu_dîe„ªn˚
(
obj
->
„n˚_ex˛
);

135 i‡(
	`ªad_£qcou¡_ªåy
(&
obj
->
£q
, seq)) {

136 
	`rcu_ªad_u∆ock
();

137 
ªåy
;

139 
„n˚
 = 
	`dma_„n˚_gë
(fence);

140 
	`rcu_ªad_u∆ock
();

141  
„n˚
;

142 
	}
}

144 
ölöe
 

145 
	$ª£rv©i⁄_obje˘_lock
(
ª£rv©i⁄_obje˘
 *
obj
,

146 
ww_acquúe_˘x
 *
˘x
)

148  
	`ww_muãx_lock
(&
obj
->
lock
, 
˘x
);

149 
	}
}

151 
ölöe
 

152 
	$ª£rv©i⁄_obje˘_lock_öãºu±ibÀ
(
ª£rv©i⁄_obje˘
 *
obj
,

153 
ww_acquúe_˘x
 *
˘x
)

155  
	`ww_muãx_lock_öãºu±ibÀ
(&
obj
->
lock
, 
˘x
);

156 
	}
}

158 
ölöe
 

159 
	$ª£rv©i⁄_obje˘_u∆ock
(
ª£rv©i⁄_obje˘
 *
obj
)

161 
	`ww_muãx_u∆ock
(&
obj
->
lock
);

162 
	}
}

164 
ölöe
 
boﬁ


165 
	$ª£rv©i⁄_obje˘_åylock
(
ª£rv©i⁄_obje˘
 *
obj
)

167  
	`ww_muãx_åylock
(&
obj
->
lock
);

168 
	}
}

170 
ª£rv©i⁄_obje˘_ª£rve_sh¨ed
(
ª£rv©i⁄_obje˘
 *
obj
);

171 
ª£rv©i⁄_obje˘_add_sh¨ed_„n˚
(
ª£rv©i⁄_obje˘
 *
obj
,

172 
dma_„n˚
 *
„n˚
);

174 
ª£rv©i⁄_obje˘_add_ex˛_„n˚
(
ª£rv©i⁄_obje˘
 *
obj
,

175 
dma_„n˚
 *
„n˚
);

177 
ª£rv©i⁄_obje˘_gë_„n˚s_rcu
(
ª£rv©i⁄_obje˘
 *
obj
,

178 
dma_„n˚
 **
p„n˚_ex˛
,

179 *
psh¨ed_cou¡
,

180 
dma_„n˚
 ***
psh¨ed
);

182 
ª£rv©i⁄_obje˘_c›y_„n˚s
(
ª£rv©i⁄_obje˘
 *
d°
,

183 
ª£rv©i⁄_obje˘
 *
§c
);

185 
ª£rv©i⁄_obje˘_waô_timeout_rcu
(
ª£rv©i⁄_obje˘
 *
obj
,

186 
boﬁ
 
waô_Æl
, boﬁ 
öå
,

187 
timeout
);

189 
boﬁ
 
ª£rv©i⁄_obje˘_ã°_sig«Àd_rcu
(
ª£rv©i⁄_obje˘
 *
obj
,

190 
boﬁ
 
ã°_Æl
);

	@src/common/linuxkpi/gplv2/include/linux/scatterlist.h

29 #i‚def 
_LINUX_GPLV2_SCATTERLIST_H_


30 
	#_LINUX_GPLV2_SCATTERLIST_H_


	)

32 #ö˛ude_√xà<
löux
/
sˇâîli°
.
h
>

34 
ölöe
 
size_t


35 
	$sg_pc›y_‰om_buf„r
(
sˇâîli°
 *
sgl
, 
√¡s
,

36 c⁄° *
buf
, 
size_t
 
buÊí
, 
off_t
 
off£t
)

38 
sg_∑ge_ôî
 
ôî
;

39 
sˇâîli°
 *
sg
;

40 
∑ge
 *page;

41 *
vaddr
;

42 
size_t
 
tŸÆ
 = 0;

43 
size_t
 
Àn
;

45 
	`f‹_óch_sg_∑ge
(
sgl
, &
ôî
, 
√¡s
, 0) {

46 
sg
 = 
ôî
.sg;

48 i‡(
off£t
 >
sg
->
Àngth
) {

49 
off£t
 -
sg
->
Àngth
;

52 
Àn
 = 
	`mö
(
buÊí
, 
sg
->
Àngth
 - 
off£t
);

53 i‡(
Àn
 == 0)

56 
∑ge
 = 
	`sg_∑ge_ôî_∑ge
(&
ôî
);

57 
vaddr
 = ((
ˇddr_t
)
	`km≠
(
∑ge
)Ë+ 
sg
->
off£t
 + offset;

58 
	`mem˝y
(
vaddr
, 
buf
, 
Àn
);

59 
	`kunm≠
(
∑ge
);

62 
off£t
 = 0;

65 
buf
 = (c⁄° *)bu‡+ 
Àn
;

66 
buÊí
 -
Àn
;

67 
tŸÆ
 +
Àn
;

69  (
tŸÆ
);

70 
	}
}

72 
ölöe
 
size_t


73 
	$sg_c›y_‰om_buf„r
(
sˇâîli°
 *
sgl
, 
√¡s
,

74 c⁄° *
buf
, 
size_t
 
buÊí
)

76  (
	`sg_pc›y_‰om_buf„r
(
sgl
, 
√¡s
, 
buf
, 
buÊí
, 0));

77 
	}
}

79 
ölöe
 
size_t


80 
	$sg_pc›y_to_buf„r
(
sˇâîli°
 *
sgl
, 
√¡s
,

81 *
buf
, 
size_t
 
buÊí
, 
off_t
 
off£t
)

83 
sg_∑ge_ôî
 
ôî
;

84 
sˇâîli°
 *
sg
;

85 
∑ge
 *page;

86 *
vaddr
;

87 
size_t
 
tŸÆ
 = 0;

88 
size_t
 
Àn
;

90 
	`f‹_óch_sg_∑ge
(
sgl
, &
ôî
, 
√¡s
, 0) {

91 
sg
 = 
ôî
.sg;

93 i‡(
off£t
 >
sg
->
Àngth
) {

94 
off£t
 -
sg
->
Àngth
;

97 
Àn
 = 
	`mö
(
buÊí
, 
sg
->
Àngth
 - 
off£t
);

98 i‡(
Àn
 == 0)

101 
∑ge
 = 
	`sg_∑ge_ôî_∑ge
(&
ôî
);

102 
vaddr
 = ((
ˇddr_t
)
	`km≠
(
∑ge
)Ë+ 
sg
->
off£t
 + offset;

103 
	`mem˝y
(
buf
, 
vaddr
, 
Àn
);

104 
	`kunm≠
(
∑ge
);

107 
off£t
 = 0;

110 
buf
 = (*)bu‡+ 
Àn
;

111 
buÊí
 -
Àn
;

112 
tŸÆ
 +
Àn
;

114  (
tŸÆ
);

115 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/sched.h

1 #i‚de‡
_LINUX_GPLV2_SCHED_H_


2 
	#_LINUX_GPLV2_SCHED_H_


	)

4 #ö˛ude_√xà<
löux
/
sched
.
h
>

6 
	~<löux/hπimî.h
>

9 
	#smp_mb__bef‹e_©omic
(Ë
	`©omic_thªad_„n˚_£q_c°
()

	)

10 
	g£q_fûe
;

12 
ölöe
 

13 
	$sched_£tscheduÀr
(
èsk_°ru˘
 *
t
, 
pﬁicy
,

14 c⁄° 
sched_∑øm
 *
∑øm
)

16 
	`UNIMPLEMENTED
();

18 
	}
}

20 
ölöe
 

21 
	$sched_£tscheduÀr_nocheck
(
èsk_°ru˘
 *
t
, 
pﬁicy
,

22 c⁄° 
sched_∑øm
 *
∑øm
)

24 
	`UNIMPLEMENTED
();

26 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/sched/mm.h

1 #i‚de‡
_LINUX_SCHED_MM_H


2 
	#_LINUX_SCHED_MM_H


	)

4 
	~<löux/gÂ.h
>

6 #ifde‡
CONFIG_LOCKDEP


7 
fs_ª˛aim_acquúe
(
gÂ_t
 
gÂ_mask
);

8 
fs_ª˛aim_ªÀa£
(
gÂ_t
 
gÂ_mask
);

10 
ölöe
 
	$fs_ª˛aim_acquúe
(
gÂ_t
 
gÂ_mask
Ë{ 
	}
}

11 
ölöe
 
	$fs_ª˛aim_ªÀa£
(
gÂ_t
 
gÂ_mask
Ë{ 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/seq_file.h

27 #i‚de‡
_LINUX_SEQ_FILE_H_


28 
	#_LINUX_SEQ_FILE_H_


	)

30 
	~<löux/ty≥s.h
>

31 
	~<löux/bug.h
>

32 
	~<löux/fs.h
>

33 
	~<sys/sbuf.h
>

35 
	g£q_›î©i⁄s
;

37 
	s£q_fûe
 {

38 
sbuf
 *
	mbuf
;

40 c⁄° 
£q_›î©i⁄s
 *
	m›
;

41 c⁄° 
löux_fûe
 *
	mfûe
;

42 *
	m¥iv©e
;

45 
	s£q_›î©i⁄s
 {

46 * (*
	m°¨t
Ë(
£q_fûe
 *
	mm
, 
loff_t
 *
	mpos
);

47 (*
	m°›
Ë(
£q_fûe
 *
	mm
, *
	mv
);

48 * (*
	m√xt
Ë(
£q_fûe
 *
	mm
, *
	mv
, 
loff_t
 *
	mpos
);

49 (*
	mshow
Ë(
£q_fûe
 *
	mm
, *
	mv
);

52 
ssize_t
 
löux_£q_ªad
(
fûe
 *, 
__u£r
 *, 
size_t
, 
loff_t
 *);

53 
£q_wrôe
(
£q_fûe
 *
£q
, c⁄° *
d©a
, 
size_t
 
Àn
);

55 
loff_t
 
£q_l£ek
(
fûe
 *fûe,Üoff_à
off£t
, 
whí˚
);

56 
sögÀ_›í
(
fûe
 *, (*)(
£q_fûe
 *, *), *);

57 
	`sögÀ_ªÀa£
(
öode
 *, 
fûe
 *);

59 
	#£q_¥ötf
(
m
, 
fmt
, ...Ë
	`sbuf_¥ötf
((m)->
buf
, (fmt), ##
__VA_ARGS__
)

	)

61 
	#£q_puts
(
m
, 
°r
Ë
	`sbuf_¥ötf
((m)->
buf
, så)

	)

62 
	#£q_putc
(
m
, 
°r
Ë
	`sbuf_putc
((m)->
buf
, så)

	)

63 
	#£q_ªad
 
löux_£q_ªad


	)

	@src/common/linuxkpi/gplv2/include/linux/seqlock.h

1 #i‚de‡
__LINUX_SEQLOCK_H


2 
	#__LINUX_SEQLOCK_H


	)

35 
	~<löux/•ölock.h
>

36 
	~<löux/¥ìm±.h
>

37 
	~<löux/lockdï.h
>

38 
	~<löux/compûî.h
>

39 
	~<asm/¥o˚ss‹.h
>

40 
	~<löux/©omic.h
>

49 
	s£qcou¡
 {

50 
	m£quí˚
;

51 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


52 
lockdï_m≠
 
	mdï_m≠
;

54 } 
	t£qcou¡_t
;

57 
	#lockdï_öô_m≠
(
a
, 
b
, 
c
, 
d
)

	)

59 
ölöe
 
	$__£qcou¡_öô
(
£qcou¡_t
 *
s
, c⁄° *
«me
,

60 
lock_˛ass_key
 *
key
)

65 
	`lockdï_öô_m≠
(&
s
->
dï_m≠
, 
«me
, 
key
, 0);

66 
s
->
£quí˚
 = 0;

67 
	}
}

69 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


70 
	#SEQCOUNT_DEP_MAP_INIT
(
lock«me
) \

71 .
dï_m≠
 = { .
«me
 = #lockname } \

72 

	)

73 
	#£qcou¡_öô
(
s
) \

75 
lock_˛ass_key
 
__key
; \

76 
	`__£qcou¡_öô
((
s
), #s, &
__key
); \

77 } 0)

	)

79 
ölöe
 
	$£qcou¡_lockdï_ªadî_ac˚ss
(
£qcou¡_t
 *
s
)

81 
£qcou¡_t
 *
l
 = (£qcou¡_à*)
s
;

82 
Êags
;

84 
	`loˇl_úq_ßve
(
Êags
);

85 
	`£qcou¡_acquúe_ªad
(&
l
->
dï_m≠
, 0, 0, 
_RET_IP_
);

86 
	`£qcou¡_ªÀa£
(&
l
->
dï_m≠
, 1, 
_RET_IP_
);

87 
	`loˇl_úq_ª°‹e
(
Êags
);

88 
	}
}

91 
	#SEQCOUNT_DEP_MAP_INIT
(
lock«me
)

	)

92 
	#£qcou¡_öô
(
s
Ë
	`__£qcou¡_öô
(s, 
NULL
, NULL)

	)

93 
	#£qcou¡_lockdï_ªadî_ac˚ss
(
x
)

	)

96 
	#SEQCNT_ZERO
(
lock«me
Ë{ .
£quí˚
 = 0, 
	`SEQCOUNT_DEP_MAP_INIT
÷ock«me)}

	)

112 
ölöe
 
	$__ªad_£qcou¡_begö
(
£qcou¡_t
 *
s
)

114 
ªt
;

116 
ª≥©
:

117 
ªt
 = 
	`READ_ONCE
(
s
->
£quí˚
);

118 i‡(
	`u∆ikñy
(
ªt
 & 1)) {

119 
	`˝u_ªœx
();

120 
ª≥©
;

122  
ªt
;

123 
	}
}

134 
ölöe
 
	$øw_ªad_£qcou¡
(
£qcou¡_t
 *
s
)

136 
ªt
 = 
	`READ_ONCE
(
s
->
£quí˚
);

137 
	`smp_rmb
();

138  
ªt
;

139 
	}
}

150 
ölöe
 
	$øw_ªad_£qcou¡_begö
(
£qcou¡_t
 *
s
)

152 
ªt
 = 
	`__ªad_£qcou¡_begö
(
s
);

153 
	`smp_rmb
();

154  
ªt
;

155 
	}
}

166 
ölöe
 
	$ªad_£qcou¡_begö
(
£qcou¡_t
 *
s
)

168 
	`£qcou¡_lockdï_ªadî_ac˚ss
(
s
);

169  
	`øw_ªad_£qcou¡_begö
(
s
);

170 
	}
}

186 
ölöe
 
	$øw_£qcou¡_begö
(
£qcou¡_t
 *
s
)

188 
ªt
 = 
	`READ_ONCE
(
s
->
£quí˚
);

189 
	`smp_rmb
();

190  
ªt
 & ~1;

191 
	}
}

207 
ölöe
 
	$__ªad_£qcou¡_ªåy
(
£qcou¡_t
 *
s
, 
°¨t
)

209  
	`u∆ikñy
(
s
->
£quí˚
 !
°¨t
);

210 
	}
}

222 
ölöe
 
	$ªad_£qcou¡_ªåy
(
£qcou¡_t
 *
s
, 
°¨t
)

224 
	`smp_rmb
();

225  
	`__ªad_£qcou¡_ªåy
(
s
, 
°¨t
);

226 
	}
}

230 
ölöe
 
	$øw_wrôe_£qcou¡_begö
(
£qcou¡_t
 *
s
)

232 
s
->
£quí˚
++;

233 
	`smp_wmb
();

234 
	}
}

236 
ölöe
 
	$øw_wrôe_£qcou¡_íd
(
£qcou¡_t
 *
s
)

238 
	`smp_wmb
();

239 
s
->
£quí˚
++;

240 
	}
}

276 
ölöe
 
	$øw_wrôe_£qcou¡_b¨rõr
(
£qcou¡_t
 *
s
)

278 
s
->
£quí˚
++;

279 
	`smp_wmb
();

280 
s
->
£quí˚
++;

281 
	}
}

283 
ölöe
 
	$øw_ªad_£qcou¡_œtch
(
£qcou¡_t
 *
s
)

285  
	`lockÀss_dîe„ªn˚
(
s
->
£quí˚
);

286 
	}
}

365 
ölöe
 
	$øw_wrôe_£qcou¡_œtch
(
£qcou¡_t
 *
s
)

367 
	`smp_wmb
();

368 
s
->
£quí˚
++;

369 
	`smp_wmb
();

370 
	}
}

376 
ölöe
 
	$wrôe_£qcou¡_begö_√°ed
(
£qcou¡_t
 *
s
, 
sub˛ass
)

378 
	`øw_wrôe_£qcou¡_begö
(
s
);

379 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


380 
	`£qcou¡_acquúe
(&
s
->
dï_m≠
, 
sub˛ass
, 0, 
_RET_IP_
);

382 
	}
}

384 
ölöe
 
	$wrôe_£qcou¡_begö
(
£qcou¡_t
 *
s
)

386 
	`wrôe_£qcou¡_begö_√°ed
(
s
, 0);

387 
	}
}

389 
ölöe
 
	$wrôe_£qcou¡_íd
(
£qcou¡_t
 *
s
)

391 #ifde‡
CONFIG_DEBUG_LOCK_ALLOC


392 
	`£qcou¡_ªÀa£
(&
s
->
dï_m≠
, 1, 
_RET_IP_
);

394 
	`øw_wrôe_£qcou¡_íd
(
s
);

395 
	}
}

404 
ölöe
 
	$wrôe_£qcou¡_övÆid©e
(
£qcou¡_t
 *
s
)

406 
	`smp_wmb
();

407 
s
->
£quí˚
+=2;

408 
	}
}

411 
£qcou¡
 
	m£qcou¡
;

412 
•ölock_t
 
	mlock
;

413 } 
	t£qlock_t
;

419 
	#__SEQLOCK_UNLOCKED
(
lock«me
) \

421 .
£qcou¡
 = 
	`SEQCNT_ZERO
(
lock«me
), \

422 .
lock
 = 
	`__SPIN_LOCK_UNLOCKED
(
lock«me
) \

423 }

	)

425 
	#£qlock_öô
(
x
) \

427 
	`£qcou¡_öô
(&(
x
)->
£qcou¡
); \

428 
	`•ö_lock_öô
(&(
x
)->
lock
); \

429 } 0)

	)

431 
	#DEFINE_SEQLOCK
(
x
) \

432 
£qlock_t
 
x
 = 
	`__SEQLOCK_UNLOCKED
(x)

	)

437 
ölöe
 
	$ªad_£qbegö
(
£qlock_t
 *
¶
)

439  
	`ªad_£qcou¡_begö
(&
¶
->
£qcou¡
);

440 
	}
}

442 
ölöe
 
	$ªad_£qªåy
(
£qlock_t
 *
¶
, 
°¨t
)

444  
	`ªad_£qcou¡_ªåy
(&
¶
->
£qcou¡
, 
°¨t
);

445 
	}
}

452 
ölöe
 
	$wrôe_£qlock
(
£qlock_t
 *
¶
)

454 
	`•ö_lock
(&
¶
->
lock
);

455 
	`wrôe_£qcou¡_begö
(&
¶
->
£qcou¡
);

456 
	}
}

458 
ölöe
 
	$wrôe_£qu∆ock
(
£qlock_t
 *
¶
)

460 
	`wrôe_£qcou¡_íd
(&
¶
->
£qcou¡
);

461 
	`•ö_u∆ock
(&
¶
->
lock
);

462 
	}
}

464 
ölöe
 
	$wrôe_£qlock_bh
(
£qlock_t
 *
¶
)

466 
	`•ö_lock_bh
(&
¶
->
lock
);

467 
	`wrôe_£qcou¡_begö
(&
¶
->
£qcou¡
);

468 
	}
}

470 
ölöe
 
	$wrôe_£qu∆ock_bh
(
£qlock_t
 *
¶
)

472 
	`wrôe_£qcou¡_íd
(&
¶
->
£qcou¡
);

473 
	`•ö_u∆ock_bh
(&
¶
->
lock
);

474 
	}
}

476 
ölöe
 
	$wrôe_£qlock_úq
(
£qlock_t
 *
¶
)

478 
	`•ö_lock_úq
(&
¶
->
lock
);

479 
	`wrôe_£qcou¡_begö
(&
¶
->
£qcou¡
);

480 
	}
}

482 
ölöe
 
	$wrôe_£qu∆ock_úq
(
£qlock_t
 *
¶
)

484 
	`wrôe_£qcou¡_íd
(&
¶
->
£qcou¡
);

485 
	`•ö_u∆ock_úq
(&
¶
->
lock
);

486 
	}
}

488 
ölöe
 
	$__wrôe_£qlock_úqßve
(
£qlock_t
 *
¶
)

490 
Êags
;

492 
	`•ö_lock_úqßve
(&
¶
->
lock
, 
Êags
);

493 
	`wrôe_£qcou¡_begö
(&
¶
->
£qcou¡
);

494  
Êags
;

495 
	}
}

497 
	#wrôe_£qlock_úqßve
(
lock
, 
Êags
) \

498 dÿ{ 
Êags
 = 
	`__wrôe_£qlock_úqßve
(
lock
); } 0)

	)

500 
ölöe
 

501 
	$wrôe_£qu∆ock_úqª°‹e
(
£qlock_t
 *
¶
, 
Êags
)

503 
	`wrôe_£qcou¡_íd
(&
¶
->
£qcou¡
);

504 
	`•ö_u∆ock_úqª°‹e
(&
¶
->
lock
, 
Êags
);

505 
	}
}

512 
ölöe
 
	$ªad_£qlock_ex˛
(
£qlock_t
 *
¶
)

514 
	`•ö_lock
(&
¶
->
lock
);

515 
	}
}

517 
ölöe
 
	$ªad_£qu∆ock_ex˛
(
£qlock_t
 *
¶
)

519 
	`•ö_u∆ock
(&
¶
->
lock
);

520 
	}
}

532 
ölöe
 
	$ªad_£qbegö_‹_lock
(
£qlock_t
 *
lock
, *
£q
)

534 i‡(!(*
£q
 & 1))

535 *
£q
 = 
	`ªad_£qbegö
(
lock
);

537 
	`ªad_£qlock_ex˛
(
lock
);

538 
	}
}

540 
ölöe
 
	$√ed_£qªåy
(
£qlock_t
 *
lock
, 
£q
)

542  !(
£q
 & 1Ë&& 
	`ªad_£qªåy
(
lock
, seq);

543 
	}
}

545 
ölöe
 
	$d⁄e_£qªåy
(
£qlock_t
 *
lock
, 
£q
)

547 i‡(
£q
 & 1)

548 
	`ªad_£qu∆ock_ex˛
(
lock
);

549 
	}
}

551 
ölöe
 
	$ªad_£qlock_ex˛_bh
(
£qlock_t
 *
¶
)

553 
	`•ö_lock_bh
(&
¶
->
lock
);

554 
	}
}

556 
ölöe
 
	$ªad_£qu∆ock_ex˛_bh
(
£qlock_t
 *
¶
)

558 
	`•ö_u∆ock_bh
(&
¶
->
lock
);

559 
	}
}

561 
ölöe
 
	$ªad_£qlock_ex˛_úq
(
£qlock_t
 *
¶
)

563 
	`•ö_lock_úq
(&
¶
->
lock
);

564 
	}
}

566 
ölöe
 
	$ªad_£qu∆ock_ex˛_úq
(
£qlock_t
 *
¶
)

568 
	`•ö_u∆ock_úq
(&
¶
->
lock
);

569 
	}
}

571 
ölöe
 
	$__ªad_£qlock_ex˛_úqßve
(
£qlock_t
 *
¶
)

573 
Êags
;

575 
	`•ö_lock_úqßve
(&
¶
->
lock
, 
Êags
);

576  
Êags
;

577 
	}
}

579 
	#ªad_£qlock_ex˛_úqßve
(
lock
, 
Êags
) \

580 dÿ{ 
Êags
 = 
	`__ªad_£qlock_ex˛_úqßve
(
lock
); } 0)

	)

582 
ölöe
 

583 
	$ªad_£qu∆ock_ex˛_úqª°‹e
(
£qlock_t
 *
¶
, 
Êags
)

585 
	`•ö_u∆ock_úqª°‹e
(&
¶
->
lock
, 
Êags
);

586 
	}
}

588 
ölöe
 

589 
	$ªad_£qbegö_‹_lock_úqßve
(
£qlock_t
 *
lock
, *
£q
)

591 
Êags
 = 0;

593 i‡(!(*
£q
 & 1))

594 *
£q
 = 
	`ªad_£qbegö
(
lock
);

596 
	`ªad_£qlock_ex˛_úqßve
(
lock
, 
Êags
);

598  
Êags
;

599 
	}
}

601 
ölöe
 

602 
	$d⁄e_£qªåy_úqª°‹e
(
£qlock_t
 *
lock
, 
£q
, 
Êags
)

604 i‡(
£q
 & 1)

605 
	`ªad_£qu∆ock_ex˛_úqª°‹e
(
lock
, 
Êags
);

606 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/shrinker.h

1 #i‚de‡
_LINUX_SHRINKER_H


2 
	#_LINUX_SHRINKER_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/li°.h
>

7 
	~<asm/©omic-l⁄g.h
>

9 
	sshrök_c⁄åﬁ
 {

10 
gÂ_t
 
	mgÂ_mask
;

17 
	mƒ_to_sˇn
;

24 
	mƒ_sˇ¬ed
;

26 
	mnid
;

30 
	#SHRINK_STOP
 (~0UL)

	)

32 
	sshrökî
 {

33 (*
	mcou¡_obje˘s
)(
	mshrökî
 *,

34 
shrök_c⁄åﬁ
 *
	msc
);

35 (*
	msˇn_obje˘s
)(
	mshrökî
 *,

36 
shrök_c⁄åﬁ
 *
	msc
);

38 
	m£eks
;

39 
	mb©ch
;

40 
	mÊags
;

43 
li°_hód
 
	mli°
;

45 
©omic_l⁄g_t
 *
	mƒ_de„ºed
;

47 
	#DEFAULT_SEEKS
 2

	)

49 
	#SHRINKER_NUMA_AWARE
 (1 << 0)

	)

50 
	#SHRINKER_MEMCG_AWARE
 (1 << 1)

	)

52 
ªgi°î_shrökî
(
shrökî
 *);

53 
uƒegi°î_shrökî
(
shrökî
 *);

	@src/common/linuxkpi/gplv2/include/linux/sort.h

1 #i‚de‡
_LINUX_SORT_H


2 
	#_LINUX_SORT_H


	)

4 
	~<löux/ty≥s.h
>

6 
s‹t
(*
ba£
, 
size_t
 
num
, size_à
size
,

7 (*
cmp
)(const *, const *),

8 (*
sw≠
)(*, *, ));

	@src/common/linuxkpi/gplv2/include/linux/statfs.h

1 #i‚de‡
_LINUX_STATFS_H


2 
	#_LINUX_STATFS_H


	)

4 
	~<löux/ty≥s.h
>

7 
	mvÆ
[2];

8 } 
	t__kî√l_fsid_t
;

10 
	sk°©fs
 {

11 
	mf_ty≥
;

12 
	mf_bsize
;

13 
u64
 
	mf_blocks
;

14 
u64
 
	mf_b‰ì
;

15 
u64
 
	mf_bavaû
;

16 
u64
 
	mf_fûes
;

17 
u64
 
	mf_f‰ì
;

18 
__kî√l_fsid_t
 
	mf_fsid
;

19 
	mf_«mñí
;

20 
	mf_‰size
;

21 
	mf_Êags
;

22 
	mf_•¨e
[4];

	@src/common/linuxkpi/gplv2/include/linux/stop_machine.h

1 #i‚de‡
_LINUX_STOP_MACHINE


2 
	#_LINUX_STOP_MACHINE


	)

4 
	~<sys/∑øm.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/¥oc.h
>

7 
	~<sys/sched.h
>

9 
	~<löux/˝u.h
>

10 
	~<löux/smp.h
>

11 
	~<löux/li°.h
>

13 (*
	t˝u_°›_‚_t
)(*
	t¨g
);

15 
ölöe
 

16 
	$°›_machöe
(
˝u_°›_‚_t
 
‚
, *
d©a
, *
dummy
)

18 
ªt
;

19 
	`sched_pö
();

20 
ªt
 = 
	`‚
(
d©a
);

21 
	`sched_u≈ö
();

22  (
ªt
);

23 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/stringify.h

1 #i‚de‡
__LINUX_STRINGIFY_H


2 
	#__LINUX_STRINGIFY_H


	)

4 
	~<löux/compûî.h
>

	@src/common/linuxkpi/gplv2/include/linux/suspend.h

1 #i‚de‡
_LINUX_GPLV2_SUSPEND_H_


2 
	#_LINUX_GPLV2_SUSPEND_H_


	)

4 
	~<löux/nŸifõr.h
>

7 
	#PM_HIBERNATION_PREPARE
 0x0001

	)

8 
	#PM_POST_HIBERNATION
 0x0002

	)

9 
	#PM_SUSPEND_PREPARE
 0x0003

	)

10 
	#PM_POST_SUSPEND
 0x0004

	)

11 
	#PM_RESTORE_PREPARE
 0x0005

	)

12 
	#PM_POST_RESTORE
 0x0006

	)

14 
ölöe
 

15 
	$ªgi°î_pm_nŸifõr
(
nŸifõr_block
 *
nb
)

18 
	}
}

20 
ölöe
 

21 
	$uƒegi°î_pm_nŸifõr
(
nŸifõr_block
 *
nb
)

24 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/swap.h

1 #i‚de‡
_LINUX_SWAP_H


2 
	#_LINUX_SWAP_H


	)

4 
	~<löux/ty≥s.h
>

6 
ölöe
 

7 
	$gë_ƒ_sw≠_∑ges
()

9 
	`UNIMPLEMENTED
();

11 
	}
}

13 
ölöe
 

14 
	$cuºít_is_ksw≠d
()

16 
	`UNIMPLEMENTED
();

18 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/sync_file.h

13 #i‚de‡
_LINUX_SYNC_FILE_H


14 
	#_LINUX_SYNC_FILE_H


	)

16 
	~<löux/ty≥s.h
>

17 
	~<löux/ktime.h
>

18 
	~<löux/li°.h
>

19 
	~<löux/•ölock.h
>

20 
	~<löux/dma-„n˚.h
>

21 
	~<löux/dma-„n˚-¨øy.h
>

22 
	~<löux/fs.h
>

32 
	ssync_fûe
 {

33 
fûe
 *
	mfûe
;

41 
	mu£r_«me
[32];

42 #ifde‡
CONFIG_DEBUG_FS


43 
li°_hód
 
	msync_fûe_li°
;

46 
waô_queue_hód_t
 
	mwq
;

47 
	mÊags
;

49 
dma_„n˚
 *
	m„n˚
;

50 
dma_„n˚_cb
 
	mcb
;

53 
	#POLL_ENABLED
 0

	)

55 
sync_fûe
 *
sync_fûe_¸óã
(
dma_„n˚
 *
„n˚
);

56 
dma_„n˚
 *
sync_fûe_gë_„n˚
(
fd
);

57 *
sync_fûe_gë_«me
(
sync_fûe
 *sync_fûe, *
buf
, 
Àn
);

	@src/common/linuxkpi/gplv2/include/linux/sysrq.h

1 #i‚de‡
_LINUX_SYSRQ_H


2 
	#_LINUX_SYSRQ_H


	)

4 
	~<löux/î∫o.h
>

5 
	~<löux/ty≥s.h
>

8 
	#SYSRQ_DEFAULT_ENABLE
 1

	)

12 
	#SYSRQ_ENABLE_LOG
 0x0002

	)

13 
	#SYSRQ_ENABLE_KEYBOARD
 0x0004

	)

14 
	#SYSRQ_ENABLE_DUMP
 0x0008

	)

15 
	#SYSRQ_ENABLE_SYNC
 0x0010

	)

16 
	#SYSRQ_ENABLE_REMOUNT
 0x0020

	)

17 
	#SYSRQ_ENABLE_SIGNAL
 0x0040

	)

18 
	#SYSRQ_ENABLE_BOOT
 0x0080

	)

19 
	#SYSRQ_ENABLE_RTNICE
 0x0100

	)

21 
	ssy§q_key_›
 {

22 (*
	mh™dÀr
)();

23 *
	mhñp_msg
;

24 *
	ma˘i⁄_msg
;

25 
	míabÀ_mask
;

27 
	#ªgi°î_sy§q_key
(
a
, 
b
)

	)

28 
	#uƒegi°î_sy§q_key
(
a
, 
b
)

	)

	@src/common/linuxkpi/gplv2/include/linux/tracepoint.h

1 #i‚de‡
_LINUX_TRACEPOINT_H


2 
	#_LINUX_TRACEPOINT_H


	)

	@src/common/linuxkpi/gplv2/include/linux/typecheck.h

1 #i‚de‡
TYPECHECK_H_INCLUDED


2 
	#TYPECHECK_H_INCLUDED


	)

8 
	#ty≥check
(
ty≥
,
x
) \

9 ({ 
ty≥
 
__dummy
; \

10 
	`ty≥of
(
x
Ë
__dummy2
; \

11 ()(&
__dummy
 =&
__dummy2
); \

13 })

	)

19 
	#ty≥check_‚
(
ty≥
,
fun˘i⁄
) \

20 ({ 
	`ty≥of
(
ty≥
Ë
__tmp
 = 
fun˘i⁄
; \

21 ()
__tmp
; \

22 })

	)

	@src/common/linuxkpi/gplv2/include/linux/uuid.h

16 #i‚de‡
_LINUX_UUID_H_


17 
	#_LINUX_UUID_H_


	)

19 
	~<u≠i/löux/uuid.h
>

21 
	#UUID_SIZE
 16

	)

24 
__u8
 
	mb
[
UUID_SIZE
];

25 } 
	tuuid_t
;

27 
	#UUID_INIT
(
a
, 
b
, 
c
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
) \

28 ((
uuid_t
) \

29 {{ ((
a
) >> 24) & 0xff, ((a) >> 16) & 0xff, ((a) >> 8) & 0xff, (a) & 0xff, \

30 ((
b
) >> 8) & 0xff, (b) & 0xff, \

31 ((
c
) >> 8) & 0xff, (c) & 0xff, \

32 (
d0
), (
d1
), (
d2
), (
d3
), (
d4
), (
d5
), (
d6
), (
d7
Ë}})

	)

38 
	#UUID_STRING_LEN
 36

	)

40 c⁄° 
guid_t
 
guid_nuŒ
;

41 c⁄° 
uuid_t
 
uuid_nuŒ
;

43 
ölöe
 
boﬁ
 
	$guid_equÆ
(c⁄° 
guid_t
 *
u1
, c⁄° guid_à*
u2
)

45  
	`memcmp
(
u1
, 
u2
, (
guid_t
)) == 0;

46 
	}
}

48 
ölöe
 
	$guid_c›y
(
guid_t
 *
d°
, c⁄° guid_à*
§c
)

50 
	`mem˝y
(
d°
, 
§c
, (
guid_t
));

51 
	}
}

53 
ölöe
 
boﬁ
 
	$guid_is_nuŒ
(c⁄° 
guid_t
 *
guid
)

55  
	`guid_equÆ
(
guid
, &
guid_nuŒ
);

56 
	}
}

58 
ölöe
 
boﬁ
 
	$uuid_equÆ
(c⁄° 
uuid_t
 *
u1
, c⁄° uuid_à*
u2
)

60  
	`memcmp
(
u1
, 
u2
, (
uuid_t
)) == 0;

61 
	}
}

63 
ölöe
 
	$uuid_c›y
(
uuid_t
 *
d°
, c⁄° uuid_à*
§c
)

65 
	`mem˝y
(
d°
, 
§c
, (
uuid_t
));

66 
	}
}

68 
ölöe
 
boﬁ
 
	$uuid_is_nuŒ
(c⁄° 
uuid_t
 *
uuid
)

70  
	`uuid_equÆ
(
uuid
, &
uuid_nuŒ
);

71 
	}
}

73 
gíî©e_øndom_uuid
(
uuid
[16]);

75 
guid_gí
(
guid_t
 *
u
);

76 
uuid_gí
(
uuid_t
 *
u
);

78 
boﬁ
 
__mu°_check
 
uuid_is_vÆid
(c⁄° *
uuid
);

80 c⁄° 
u8
 
guid_ödex
[16];

81 c⁄° 
u8
 
uuid_ödex
[16];

83 
guid_∑r£
(c⁄° *
uuid
, 
guid_t
 *
u
);

84 
uuid_∑r£
(c⁄° *
uuid
, 
uuid_t
 *
u
);

87 
	#uuid_À_gí
(
u
Ë
	`guid_gí
(u)

	)

88 
	#uuid_À_to_bö
(
guid
, 
u
Ë
	`guid_∑r£
(guid, u)

	)

90 
ölöe
 
	$uuid_À_cmp
(c⁄° 
guid_t
 
u1
, c⁄° guid_à
u2
)

92  
	`memcmp
(&
u1
, &
u2
, (
guid_t
));

93 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/vga_switcheroo.h

31 #i‚de‡
_LINUX_VGA_SWITCHEROO_H_


32 
	#_LINUX_VGA_SWITCHEROO_H_


	)

34 
	~<löux/fb.h
>

36 
	gpci_dev
;

37 
	gdev_pm_domaö
;

54 
	evga_swôchîoo_h™dÀr_Êags_t
 {

55 
	mVGA_SWITCHEROO_CAN_SWITCH_DDC
 = (1 << 0),

56 
	mVGA_SWITCHEROO_NEEDS_EDP_CONFIG
 = (1 << 1),

69 
	evga_swôchîoo_°©e
 {

70 
	mVGA_SWITCHEROO_OFF
,

71 
	mVGA_SWITCHEROO_ON
,

73 
	mVGA_SWITCHEROO_NOT_FOUND
,

87 
	evga_swôchîoo_˛õ¡_id
 {

88 
	mVGA_SWITCHEROO_UNKNOWN_ID
 = -1,

89 
	mVGA_SWITCHEROO_IGD
,

90 
	mVGA_SWITCHEROO_DIS
,

91 
	mVGA_SWITCHEROO_MAX_CLIENTS
,

117 
	svga_swôchîoo_h™dÀr
 {

118 (*
	möô
)();

119 (*
	mswôchto
)(
vga_swôchîoo_˛õ¡_id
 
	mid
);

120 (*
	mswôch_ddc
)(
vga_swôchîoo_˛õ¡_id
 
	mid
);

121 (*
	mpowî_°©e
)(
vga_swôchîoo_˛õ¡_id
 
	mid
,

122 
vga_swôchîoo_°©e
 
	m°©e
);

123 
vga_swôchîoo_˛õ¡_id
 (*
gë_˛õ¡_id
)(
pci_dev
 *
	mpdev
);

142 
	svga_swôchîoo_˛õ¡_›s
 {

143 (*
	m£t_gpu_°©e
)(
pci_dev
 *
	mdev
, 
	mvga_swôchîoo_°©e
);

144 (*
	mª¥obe
)(
pci_dev
 *
	mdev
);

145 
boﬁ
 (*
ˇn_swôch
)(
pci_dev
 *
	mdev
);

148 #i‡
deföed
(
CONFIG_VGA_SWITCHEROO
)

149 
vga_swôchîoo_uƒegi°î_˛õ¡
(
pci_dev
 *
dev
);

150 
vga_swôchîoo_ªgi°î_˛õ¡
(
pci_dev
 *
dev
,

151 c⁄° 
vga_swôchîoo_˛õ¡_›s
 *
›s
,

152 
boﬁ
 
drivî_powî_c⁄åﬁ
);

153 
vga_swôchîoo_ªgi°î_audio_˛õ¡
(
pci_dev
 *
pdev
,

154 c⁄° 
vga_swôchîoo_˛õ¡_›s
 *
›s
,

155 
vga_swôchîoo_˛õ¡_id
 
id
);

157 
vga_swôchîoo_˛õ¡_fb_£t
(
pci_dev
 *
dev
,

158 
löux_fb_öfo
 *
öfo
);

160 
vga_swôchîoo_ªgi°î_h™dÀr
(c⁄° 
vga_swôchîoo_h™dÀr
 *
h™dÀr
,

161 
vga_swôchîoo_h™dÀr_Êags_t
 
h™dÀr_Êags
);

162 
vga_swôchîoo_uƒegi°î_h™dÀr
();

163 
vga_swôchîoo_h™dÀr_Êags_t
 
vga_swôchîoo_h™dÀr_Êags
();

164 
vga_swôchîoo_lock_ddc
(
pci_dev
 *
pdev
);

165 
vga_swôchîoo_u∆ock_ddc
(
pci_dev
 *
pdev
);

167 
vga_swôchîoo_¥o˚ss_dñayed_swôch
();

169 
boﬁ
 
vga_swôchîoo_˛õ¡_¥obe_de„r
(
pci_dev
 *
pdev
);

170 
vga_swôchîoo_°©e
 
vga_swôchîoo_gë_˛õ¡_°©e
(
pci_dev
 *
dev
);

172 
vga_swôchîoo_£t_dy«mic_swôch
(
pci_dev
 *
pdev
, 
vga_swôchîoo_°©e
 
dy«mic
);

174 
vga_swôchîoo_öô_domaö_pm_›s
(
devi˚
 *
dev
, 
dev_pm_domaö
 *
domaö
);

175 
vga_swôchîoo_föi_domaö_pm_›s
(
devi˚
 *
dev
);

176 
vga_swôchîoo_öô_domaö_pm_›timus_hdmi_audio
(
devi˚
 *
dev
, 
dev_pm_domaö
 *
domaö
);

179 
ölöe
 
	$vga_swôchîoo_uƒegi°î_˛õ¡
(
pci_dev
 *
dev
Ë{
	}
}

180 
ölöe
 
	$vga_swôchîoo_ªgi°î_˛õ¡
(
pci_dev
 *
dev
,

181 c⁄° 
vga_swôchîoo_˛õ¡_›s
 *
›s
, 
boﬁ
 
drivî_powî_c⁄åﬁ
Ë{  0; 
	}
}

182 
ölöe
 
	$vga_swôchîoo_˛õ¡_fb_£t
(
pci_dev
 *
dev
, 
löux_fb_öfo
 *
öfo
Ë{
	}
}

183 
ölöe
 
	$vga_swôchîoo_ªgi°î_h™dÀr
(c⁄° 
vga_swôchîoo_h™dÀr
 *
h™dÀr
,

184 
vga_swôchîoo_h™dÀr_Êags_t
 
h™dÀr_Êags
Ë{  0; 
	}
}

185 
ölöe
 
	$vga_swôchîoo_ªgi°î_audio_˛õ¡
(
pci_dev
 *
pdev
,

186 c⁄° 
vga_swôchîoo_˛õ¡_›s
 *
›s
,

187 
vga_swôchîoo_˛õ¡_id
 
id
Ë{  0; 
	}
}

188 
ölöe
 
	$vga_swôchîoo_uƒegi°î_h™dÀr
(Ë{
	}
}

189 
ölöe
 
vga_swôchîoo_h™dÀr_Êags_t
 
	$vga_swôchîoo_h™dÀr_Êags
(Ë{  0; 
	}
}

190 
ölöe
 
	$vga_swôchîoo_lock_ddc
(
pci_dev
 *
pdev
Ë{  -
ENODEV
; 
	}
}

191 
ölöe
 
	$vga_swôchîoo_u∆ock_ddc
(
pci_dev
 *
pdev
Ë{  -
ENODEV
; 
	}
}

192 
ölöe
 
	$vga_swôchîoo_¥o˚ss_dñayed_swôch
(Ë{  0; 
	}
}

193 
ölöe
 
boﬁ
 
	$vga_swôchîoo_˛õ¡_¥obe_de„r
(
pci_dev
 *
pdev
Ë{  
Ál£
; 
	}
}

194 
ölöe
 
vga_swôchîoo_°©e
 
	$vga_swôchîoo_gë_˛õ¡_°©e
(
pci_dev
 *
dev
Ë{  
VGA_SWITCHEROO_ON
; 
	}
}

196 
ölöe
 
	$vga_swôchîoo_£t_dy«mic_swôch
(
pci_dev
 *
pdev
, 
vga_swôchîoo_°©e
 
dy«mic
Ë{
	}
}

198 
ölöe
 
	$vga_swôchîoo_öô_domaö_pm_›s
(
devi˚
 *
dev
, 
dev_pm_domaö
 *
domaö
Ë{  -
EINVAL
; 
	}
}

199 
ölöe
 
	$vga_swôchîoo_föi_domaö_pm_›s
(
devi˚
 *
dev
Ë{
	}
}

200 
ölöe
 
	$vga_swôchîoo_öô_domaö_pm_›timus_hdmi_audio
(
devi˚
 *
dev
, 
dev_pm_domaö
 *
domaö
Ë{  -
EINVAL
; 
	}
}

	@src/common/linuxkpi/gplv2/include/linux/vgaarb.h

31 #i‚de‡
LINUX_VGA_H


32 
	#LINUX_VGA_H


	)

34 
	~<video/vga.h
>

37 
	#VGA_RSRC_NONE
 0x00

	)

38 
	#VGA_RSRC_LEGACY_IO
 0x01

	)

39 
	#VGA_RSRC_LEGACY_MEM
 0x02

	)

40 
	#VGA_RSRC_LEGACY_MASK
 (
VGA_RSRC_LEGACY_IO
 | 
VGA_RSRC_LEGACY_MEM
)

	)

42 
	#VGA_RSRC_NORMAL_IO
 0x04

	)

43 
	#VGA_RSRC_NORMAL_MEM
 0x08

	)

49 
	#VGA_DEFAULT_DEVICE
 (
NULL
)

	)

51 
	gpci_dev
;

68 #i‡
deföed
(
CONFIG_VGA_ARB
)

69 
vga_£t_Àgacy_decodög
(
pci_dev
 *
pdev
,

70 
decodes
);

72 
ölöe
 
	$vga_£t_Àgacy_decodög
(
pci_dev
 *
pdev
,

73 
decodes
Ë{ 
	}
};

104 #i‡
deföed
(
CONFIG_VGA_ARB
)

105 
vga_gë
(
pci_dev
 *
pdev
, 
r§c
, 
öãºu±ibÀ
);

107 
ölöe
 
	$vga_gë
(
pci_dev
 *
pdev
, 
r§c
, 
öãºu±ibÀ
Ë{  0; 
	}
}

116 
ölöe
 
	$vga_gë_öãºu±ibÀ
(
pci_dev
 *
pdev
,

117 
r§c
)

119  
	`vga_gë
(
pdev
, 
r§c
, 1);

120 
	}
}

128 
ölöe
 
	$vga_gë_unöãºu±ibÀ
(
pci_dev
 *
pdev
,

129 
r§c
)

131  
	`vga_gë
(
pdev
, 
r§c
, 0);

132 
	}
}

145 #i‡
deföed
(
CONFIG_VGA_ARB
)

146 
vga_åygë
(
pci_dev
 *
pdev
, 
r§c
);

148 
ölöe
 
	$vga_åygë
(
pci_dev
 *
pdev
, 
r§c
Ë{  0; 
	}
}

164 #i‡
deföed
(
CONFIG_VGA_ARB
)

165 
vga_put
(
pci_dev
 *
pdev
, 
r§c
);

167 
	#vga_put
(
pdev
, 
r§c
)

	)

190 #ifde‡
CONFIG_VGA_ARB


191 
pci_dev
 *
vga_deÁu…_devi˚
();

192 
vga_£t_deÁu…_devi˚
(
pci_dev
 *
pdev
);

194 
ölöe
 
pci_dev
 *
	$vga_deÁu…_devi˚
(Ë{  
NULL
; 
	}
};

195 
ölöe
 
	$vga_£t_deÁu…_devi˚
(
pci_dev
 *
pdev
Ë{ 
	}
};

206 #i‚de‡
__ARCH_HAS_VGA_CONFLICT


207 
ölöe
 
	$vga_c⁄Êi˘s
(
pci_dev
 *
p1
, pci_dev *
p2
)

210 
	}
}

241 #i‡
deföed
(
CONFIG_VGA_ARB
)

242 
vga_˛õ¡_ªgi°î
(
pci_dev
 *
pdev
, *
cookõ
,

243 (*
úq_£t_°©e
)(*
cookõ
, 
boﬁ
 
°©e
),

244 (*
£t_vga_decode
)(*
cookõ
, 
boﬁ
 
°©e
));

246 
ölöe
 
	`vga_˛õ¡_ªgi°î
(
pci_dev
 *
pdev
, *
cookõ
,

247 (*
úq_£t_°©e
)(*
cookõ
, 
boﬁ
 
°©e
),

248 (*
£t_vga_decode
)(*
cookõ
, 
boﬁ
 
°©e
))

251 
	}
}

	@src/common/linuxkpi/gplv2/include/trace/define_trace.h

18 #ifde‡
CREATE_TRACE_POINTS


21 #unde‡
CREATE_TRACE_POINTS


23 
	~<löux/°rögify.h
>

25 #unde‡
TRACE_EVENT


26 
	#TRACE_EVENT
(
«me
, 
¥Ÿo
, 
¨gs
, 
t°ru˘
, 
assign
, 
¥öt
) \

27 
	`DEFINE_TRACE
(
«me
)

	)

29 #unde‡
TRACE_EVENT_CONDITION


30 
	#TRACE_EVENT_CONDITION
(
«me
, 
¥Ÿo
, 
¨gs
, 
c⁄d
, 
t°ru˘
, 
assign
, 
¥öt
) \

31 
	`TRACE_EVENT
(
«me
, \

32 
	`PARAMS
(
¥Ÿo
), \

33 
	`PARAMS
(
¨gs
), \

34 
	`PARAMS
(
t°ru˘
), \

35 
	`PARAMS
(
assign
), \

36 
	`PARAMS
(
¥öt
))

	)

38 #unde‡
TRACE_EVENT_FN


39 
	#TRACE_EVENT_FN
(
«me
, 
¥Ÿo
, 
¨gs
, 
t°ru˘
, \

40 
assign
, 
¥öt
, 
ªg
, 
uƒeg
) \

41 
	`DEFINE_TRACE_FN
(
«me
, 
ªg
, 
uƒeg
)

	)

43 #unde‡
TRACE_EVENT_FN_COND


44 
	#TRACE_EVENT_FN_COND
(
«me
, 
¥Ÿo
, 
¨gs
, 
c⁄d
, 
t°ru˘
, \

45 
assign
, 
¥öt
, 
ªg
, 
uƒeg
) \

46 
	`DEFINE_TRACE_FN
(
«me
, 
ªg
, 
uƒeg
)

	)

48 #unde‡
DEFINE_EVENT


49 
	#DEFINE_EVENT
(
ãm∂©e
, 
«me
, 
¥Ÿo
, 
¨gs
) \

50 
	`DEFINE_TRACE
(
«me
)

	)

52 #unde‡
DEFINE_EVENT_FN


53 
	#DEFINE_EVENT_FN
(
ãm∂©e
, 
«me
, 
¥Ÿo
, 
¨gs
, 
ªg
, 
uƒeg
) \

54 
	`DEFINE_TRACE_FN
(
«me
, 
ªg
, 
uƒeg
)

	)

56 #unde‡
DEFINE_EVENT_PRINT


57 
	#DEFINE_EVENT_PRINT
(
ãm∂©e
, 
«me
, 
¥Ÿo
, 
¨gs
, 
¥öt
) \

58 
	`DEFINE_TRACE
(
«me
)

	)

60 #unde‡
DEFINE_EVENT_CONDITION


61 
	#DEFINE_EVENT_CONDITION
(
ãm∂©e
, 
«me
, 
¥Ÿo
, 
¨gs
, 
c⁄d
) \

62 
	`DEFINE_EVENT
(
ãm∂©e
, 
«me
, 
	`PARAMS
(
¥Ÿo
), PARAMS(
¨gs
))

	)

64 #unde‡
DECLARE_TRACE


65 
	#DECLARE_TRACE
(
«me
, 
¥Ÿo
, 
¨gs
) \

66 
	`DEFINE_TRACE
(
«me
)

	)

68 #unde‡
TRACE_INCLUDE


69 #unde‡
__TRACE_INCLUDE


71 #i‚de‡
TRACE_INCLUDE_FILE


72 
	#TRACE_INCLUDE_FILE
 
TRACE_SYSTEM


	)

73 
	#UNDEF_TRACE_INCLUDE_FILE


	)

76 #i‚de‡
TRACE_INCLUDE_PATH


77 
	#__TRACE_INCLUDE
(
sy°em
Ë<
åa˚
/
evíts
/sy°em.
h
>

	)

78 
	#UNDEF_TRACE_INCLUDE_PATH


	)

80 
	#__TRACE_INCLUDE
(
sy°em
Ë
	`__°rögify
(
TRACE_INCLUDE_PATH
/sy°em.
h
)

	)

83 
	#TRACE_INCLUDE
(
sy°em
Ë
	`__TRACE_INCLUDE
(sy°em)

	)

86 
	#TRACE_HEADER_MULTI_READ


	)

88 #ö˛udê
TRACE_INCLUDE
(
TRACE_INCLUDE_FILE
)

91 #unde‡
DECLARE_TRACE


92 
	#DECLARE_TRACE
(
«me
, 
¥Ÿo
, 
¨gs
)

	)

94 #ifde‡
TRACEPOINTS_ENABLED


95 
	~<åa˚/åa˚_evíts.h
>

96 
	~<åa˚/≥rf.h
>

99 #unde‡
TRACE_EVENT


100 #unde‡
TRACE_EVENT_FN


101 #unde‡
TRACE_EVENT_FN_COND


102 #unde‡
TRACE_EVENT_CONDITION


103 #unde‡
DECLARE_EVENT_CLASS


104 #unde‡
DEFINE_EVENT


105 #unde‡
DEFINE_EVENT_FN


106 #unde‡
DEFINE_EVENT_PRINT


107 #unde‡
DEFINE_EVENT_CONDITION


108 #unde‡
TRACE_HEADER_MULTI_READ


109 #unde‡
DECLARE_TRACE


112 #ifde‡
UNDEF_TRACE_INCLUDE_FILE


113 #unde‡
TRACE_INCLUDE_FILE


114 #unde‡
UNDEF_TRACE_INCLUDE_FILE


117 #ifde‡
UNDEF_TRACE_INCLUDE_PATH


118 #unde‡
TRACE_INCLUDE_PATH


119 #unde‡
UNDEF_TRACE_INCLUDE_PATH


123 
	#CREATE_TRACE_POINTS


	)

	@src/common/linuxkpi/gplv2/include/trace/events/dma_fence.h

1 #i‚de‡
_TRACE_DMA_FENCE_H_


2 
	#_TRACE_DMA_FENCE_H_


	)

4 
	~<löux/dma-„n˚.h
>

7 
ölöe
 

8 
	$åa˚_dma_„n˚_íabÀ_sig«l
(
dma_„n˚
 *
„n˚
)

10 
	`CTR1
(
KTR_DRM
, "dma_„n˚_íabÀ_sig«»dma_„n˚ %p", 
„n˚
);

11 
	}
}

	@src/common/linuxkpi/gplv2/include/uapi/linux/dma-buf.h

1 #i‚de‡
_DMA_BUF_UAPI_H_


2 
	#_DMA_BUF_UAPI_H_


	)

4 
	~<löux/ty≥s.h
>

7 
	sdma_buf_sync
 {

8 
__u64
 
	mÊags
;

11 
	#DMA_BUF_SYNC_READ
 (1 << 0)

	)

12 
	#DMA_BUF_SYNC_WRITE
 (2 << 0)

	)

13 
	#DMA_BUF_SYNC_RW
 (
DMA_BUF_SYNC_READ
 | 
DMA_BUF_SYNC_WRITE
)

	)

14 
	#DMA_BUF_SYNC_START
 (0 << 2)

	)

15 
	#DMA_BUF_SYNC_END
 (1 << 2)

	)

16 
	#DMA_BUF_SYNC_VALID_FLAGS_MASK
 \

17 (
DMA_BUF_SYNC_RW
 | 
DMA_BUF_SYNC_END
)

	)

19 
	#DMA_BUF_BASE
 'b'

	)

20 
	#DMA_BUF_IOCTL_SYNC
 
	`_IOW
(
DMA_BUF_BASE
, 0, 
dma_buf_sync
)

	)

	@src/common/linuxkpi/gplv2/include/uapi/linux/fb.h

1 #i‚de‡
_UAPI_LINUX_FB_H


2 
	#_UAPI_LINUX_FB_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/i2c.h
>

9 
	#FB_MAX
 32

	)

12 #ifde‡
CONFIG_FB_BACKLIGHT


14 
	#FB_BACKLIGHT_LEVELS
 128

	)

15 
	#FB_BACKLIGHT_MAX
 0xFF

	)

21 
	#FB_ROTATE_UR
 0

	)

22 
	#FB_ROTATE_CW
 1

	)

23 
	#FB_ROTATE_UD
 2

	)

24 
	#FB_ROTATE_CCW
 3

	)

26 
	#FBIO_WAITFORVSYNC
 
	`_IOW
('F', 0x20, 
__u32
)

	)

	@src/common/linuxkpi/gplv2/include/uapi/linux/sched/types.h

1 #i‚de‡
_UAPI_LINUX_SCHED_TYPES_H


2 
	#_UAPI_LINUX_SCHED_TYPES_H


	)

4 
	~<löux/ty≥s.h
>

6 #i‚de‡
_SCHED_H_


7 
	ssched_∑øm
 {

8 
	msched_¥i‹ôy
;

12 
	#SCHED_ATTR_SIZE_VER0
 48

	)

58 
	ssched_©å
 {

59 
u32
 
	msize
;

61 
u32
 
	msched_pﬁicy
;

62 
u64
 
	msched_Êags
;

65 
s32
 
	msched_ni˚
;

68 
u32
 
	msched_¥i‹ôy
;

71 
u64
 
	msched_ru¡ime
;

72 
u64
 
	msched_dódlöe
;

73 
u64
 
	msched_≥riod
;

	@src/common/linuxkpi/gplv2/include/uapi/linux/sync_file.h

12 #i‚de‡
_UAPI_LINUX_SYNC_H


13 
	#_UAPI_LINUX_SYNC_H


	)

15 
	~<löux/io˘l.h
>

16 
	~<löux/ty≥s.h
>

26 
	ssync_mîge_d©a
 {

27 
	m«me
[32];

28 
__s32
 
	mfd2
;

29 
__s32
 
	m„n˚
;

30 
__u32
 
	mÊags
;

31 
__u32
 
	m∑d
;

42 
	ssync_„n˚_öfo
 {

43 
	mobj_«me
[32];

44 
	mdrivî_«me
[32];

45 
__s32
 
	m°©us
;

46 
__u32
 
	mÊags
;

47 
__u64
 
	mtime°amp_ns
;

60 
	ssync_fûe_öfo
 {

61 
	m«me
[32];

62 
__s32
 
	m°©us
;

63 
__u32
 
	mÊags
;

64 
__u32
 
	mnum_„n˚s
;

65 
__u32
 
	m∑d
;

67 
__u64
 
	msync_„n˚_öfo
;

70 
	#SYNC_IOC_MAGIC
 '>'

	)

86 
	#SYNC_IOC_MERGE
 
	`_IOWR
(
SYNC_IOC_MAGIC
, 3, 
sync_mîge_d©a
)

	)

96 
	#SYNC_IOC_FILE_INFO
 
	`_IOWR
(
SYNC_IOC_MAGIC
, 4, 
sync_fûe_öfo
)

	)

	@src/common/linuxkpi/gplv2/include/uapi/linux/uuid.h

1 #i‚de‡
_UAPI_LINUX_UUID_H_


2 
	#_UAPI_LINUX_UUID_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/°rög.h
>

8 
__u8
 
	mb
[16];

9 } 
	tguid_t
;

11 
	#GUID_INIT
(
a
, 
b
, 
c
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
) \

12 ((
guid_t
) \

13 {{ (
a
) & 0xff, ((a) >> 8) & 0xff, \

14 ((
a
) >> 16) & 0xff, ((a) >> 24) & 0xff, \

15 (
b
) & 0xff, ((b) >> 8) & 0xff, \

16 (
c
) & 0xff, ((c) >> 8) & 0xff, \

17 (
d0
), (
d1
), (
d2
), (
d3
), \

18 (
d4
), (
d5
), (
d6
), (
d7
Ë}})

	)

21 
guid_t
 
	tuuid_À
;

22 
	#UUID_LE
(
a
, 
b
, 
c
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
) \

23 
	`GUID_INIT
(
a
, 
b
, 
c
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
)

	)

24 
	#NULL_UUID_LE
 \

25 
	`UUID_LE
(0x00000000, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, \

26 0x00, 0x00, 0x00, 0x00)

	)

	@src/common/linuxkpi/gplv2/include/video/display_timing.h

9 #i‚de‡
__LINUX_DISPLAY_TIMING_H


10 
	#__LINUX_DISPLAY_TIMING_H


	)

12 
	~<löux/bô›s.h
>

13 
	~<löux/ty≥s.h
>

15 
	edi•œy_Êags
 {

16 
	mDISPLAY_FLAGS_HSYNC_LOW
 = 
BIT
(0),

17 
	mDISPLAY_FLAGS_HSYNC_HIGH
 = 
BIT
(1),

18 
	mDISPLAY_FLAGS_VSYNC_LOW
 = 
BIT
(2),

19 
	mDISPLAY_FLAGS_VSYNC_HIGH
 = 
BIT
(3),

22 
	mDISPLAY_FLAGS_DE_LOW
 = 
BIT
(4),

23 
	mDISPLAY_FLAGS_DE_HIGH
 = 
BIT
(5),

25 
	mDISPLAY_FLAGS_PIXDATA_POSEDGE
 = 
BIT
(6),

27 
	mDISPLAY_FLAGS_PIXDATA_NEGEDGE
 = 
BIT
(7),

28 
	mDISPLAY_FLAGS_INTERLACED
 = 
BIT
(8),

29 
	mDISPLAY_FLAGS_DOUBLESCAN
 = 
BIT
(9),

30 
	mDISPLAY_FLAGS_DOUBLECLK
 = 
BIT
(10),

37 
	stimög_íåy
 {

38 
u32
 
	mmö
;

39 
u32
 
	mtyp
;

40 
u32
 
	mmax
;

60 
	sdi•œy_timög
 {

61 
timög_íåy
 
	mpixñ˛ock
;

63 
timög_íåy
 
	mha˘ive
;

64 
timög_íåy
 
	mh‰⁄t_p‹ch
;

65 
timög_íåy
 
	mhback_p‹ch
;

66 
timög_íåy
 
	mhsync_Àn
;

68 
timög_íåy
 
	mva˘ive
;

69 
timög_íåy
 
	mv‰⁄t_p‹ch
;

70 
timög_íåy
 
	mvback_p‹ch
;

71 
timög_íåy
 
	mvsync_Àn
;

73 
di•œy_Êags
 
	mÊags
;

82 
	sdi•œy_timögs
 {

83 
	mnum_timögs
;

84 
	m«tive_mode
;

86 
di•œy_timög
 **
	mtimögs
;

90 
ölöe
 
di•œy_timög
 *
	$di•œy_timögs_gë
(const 

91 
di•œy_timögs
 *
di•
,

92 
ödex
)

94 i‡(
di•
->
num_timögs
 > 
ödex
)

95  
di•
->
timögs
[
ödex
];

97  
NULL
;

98 
	}
}

100 
di•œy_timögs_ªÀa£
(
di•œy_timögs
 *
di•
);

	@src/common/linuxkpi/gplv2/include/video/mipi_display.h

13 #i‚de‡
MIPI_DISPLAY_H


14 
	#MIPI_DISPLAY_H


	)

18 
	mMIPI_DSI_V_SYNC_START
 = 0x01,

19 
	mMIPI_DSI_V_SYNC_END
 = 0x11,

20 
	mMIPI_DSI_H_SYNC_START
 = 0x21,

21 
	mMIPI_DSI_H_SYNC_END
 = 0x31,

23 
	mMIPI_DSI_COLOR_MODE_OFF
 = 0x02,

24 
	mMIPI_DSI_COLOR_MODE_ON
 = 0x12,

25 
	mMIPI_DSI_SHUTDOWN_PERIPHERAL
 = 0x22,

26 
	mMIPI_DSI_TURN_ON_PERIPHERAL
 = 0x32,

28 
	mMIPI_DSI_GENERIC_SHORT_WRITE_0_PARAM
 = 0x03,

29 
	mMIPI_DSI_GENERIC_SHORT_WRITE_1_PARAM
 = 0x13,

30 
	mMIPI_DSI_GENERIC_SHORT_WRITE_2_PARAM
 = 0x23,

32 
	mMIPI_DSI_GENERIC_READ_REQUEST_0_PARAM
 = 0x04,

33 
	mMIPI_DSI_GENERIC_READ_REQUEST_1_PARAM
 = 0x14,

34 
	mMIPI_DSI_GENERIC_READ_REQUEST_2_PARAM
 = 0x24,

36 
	mMIPI_DSI_DCS_SHORT_WRITE
 = 0x05,

37 
	mMIPI_DSI_DCS_SHORT_WRITE_PARAM
 = 0x15,

39 
	mMIPI_DSI_DCS_READ
 = 0x06,

41 
	mMIPI_DSI_SET_MAXIMUM_RETURN_PACKET_SIZE
 = 0x37,

43 
	mMIPI_DSI_END_OF_TRANSMISSION
 = 0x08,

45 
	mMIPI_DSI_NULL_PACKET
 = 0x09,

46 
	mMIPI_DSI_BLANKING_PACKET
 = 0x19,

47 
	mMIPI_DSI_GENERIC_LONG_WRITE
 = 0x29,

48 
	mMIPI_DSI_DCS_LONG_WRITE
 = 0x39,

50 
	mMIPI_DSI_LOOSELY_PACKED_PIXEL_STREAM_YCBCR20
 = 0x0c,

51 
	mMIPI_DSI_PACKED_PIXEL_STREAM_YCBCR24
 = 0x1c,

52 
	mMIPI_DSI_PACKED_PIXEL_STREAM_YCBCR16
 = 0x2c,

54 
	mMIPI_DSI_PACKED_PIXEL_STREAM_30
 = 0x0d,

55 
	mMIPI_DSI_PACKED_PIXEL_STREAM_36
 = 0x1d,

56 
	mMIPI_DSI_PACKED_PIXEL_STREAM_YCBCR12
 = 0x3d,

58 
	mMIPI_DSI_PACKED_PIXEL_STREAM_16
 = 0x0e,

59 
	mMIPI_DSI_PACKED_PIXEL_STREAM_18
 = 0x1e,

60 
	mMIPI_DSI_PIXEL_STREAM_3BYTE_18
 = 0x2e,

61 
	mMIPI_DSI_PACKED_PIXEL_STREAM_24
 = 0x3e,

66 
	mMIPI_DSI_RX_ACKNOWLEDGE_AND_ERROR_REPORT
 = 0x02,

67 
	mMIPI_DSI_RX_END_OF_TRANSMISSION
 = 0x08,

68 
	mMIPI_DSI_RX_GENERIC_SHORT_READ_RESPONSE_1BYTE
 = 0x11,

69 
	mMIPI_DSI_RX_GENERIC_SHORT_READ_RESPONSE_2BYTE
 = 0x12,

70 
	mMIPI_DSI_RX_GENERIC_LONG_READ_RESPONSE
 = 0x1a,

71 
	mMIPI_DSI_RX_DCS_LONG_READ_RESPONSE
 = 0x1c,

72 
	mMIPI_DSI_RX_DCS_SHORT_READ_RESPONSE_1BYTE
 = 0x21,

73 
	mMIPI_DSI_RX_DCS_SHORT_READ_RESPONSE_2BYTE
 = 0x22,

78 
	mMIPI_DCS_NOP
 = 0x00,

79 
	mMIPI_DCS_SOFT_RESET
 = 0x01,

80 
	mMIPI_DCS_GET_DISPLAY_ID
 = 0x04,

81 
	mMIPI_DCS_GET_RED_CHANNEL
 = 0x06,

82 
	mMIPI_DCS_GET_GREEN_CHANNEL
 = 0x07,

83 
	mMIPI_DCS_GET_BLUE_CHANNEL
 = 0x08,

84 
	mMIPI_DCS_GET_DISPLAY_STATUS
 = 0x09,

85 
	mMIPI_DCS_GET_POWER_MODE
 = 0x0A,

86 
	mMIPI_DCS_GET_ADDRESS_MODE
 = 0x0B,

87 
	mMIPI_DCS_GET_PIXEL_FORMAT
 = 0x0C,

88 
	mMIPI_DCS_GET_DISPLAY_MODE
 = 0x0D,

89 
	mMIPI_DCS_GET_SIGNAL_MODE
 = 0x0E,

90 
	mMIPI_DCS_GET_DIAGNOSTIC_RESULT
 = 0x0F,

91 
	mMIPI_DCS_ENTER_SLEEP_MODE
 = 0x10,

92 
	mMIPI_DCS_EXIT_SLEEP_MODE
 = 0x11,

93 
	mMIPI_DCS_ENTER_PARTIAL_MODE
 = 0x12,

94 
	mMIPI_DCS_ENTER_NORMAL_MODE
 = 0x13,

95 
	mMIPI_DCS_EXIT_INVERT_MODE
 = 0x20,

96 
	mMIPI_DCS_ENTER_INVERT_MODE
 = 0x21,

97 
	mMIPI_DCS_SET_GAMMA_CURVE
 = 0x26,

98 
	mMIPI_DCS_SET_DISPLAY_OFF
 = 0x28,

99 
	mMIPI_DCS_SET_DISPLAY_ON
 = 0x29,

100 
	mMIPI_DCS_SET_COLUMN_ADDRESS
 = 0x2A,

101 
	mMIPI_DCS_SET_PAGE_ADDRESS
 = 0x2B,

102 
	mMIPI_DCS_WRITE_MEMORY_START
 = 0x2C,

103 
	mMIPI_DCS_WRITE_LUT
 = 0x2D,

104 
	mMIPI_DCS_READ_MEMORY_START
 = 0x2E,

105 
	mMIPI_DCS_SET_PARTIAL_AREA
 = 0x30,

106 
	mMIPI_DCS_SET_SCROLL_AREA
 = 0x33,

107 
	mMIPI_DCS_SET_TEAR_OFF
 = 0x34,

108 
	mMIPI_DCS_SET_TEAR_ON
 = 0x35,

109 
	mMIPI_DCS_SET_ADDRESS_MODE
 = 0x36,

110 
	mMIPI_DCS_SET_SCROLL_START
 = 0x37,

111 
	mMIPI_DCS_EXIT_IDLE_MODE
 = 0x38,

112 
	mMIPI_DCS_ENTER_IDLE_MODE
 = 0x39,

113 
	mMIPI_DCS_SET_PIXEL_FORMAT
 = 0x3A,

114 
	mMIPI_DCS_WRITE_MEMORY_CONTINUE
 = 0x3C,

115 
	mMIPI_DCS_READ_MEMORY_CONTINUE
 = 0x3E,

116 
	mMIPI_DCS_SET_TEAR_SCANLINE
 = 0x44,

117 
	mMIPI_DCS_GET_SCANLINE
 = 0x45,

118 
	mMIPI_DCS_SET_DISPLAY_BRIGHTNESS
 = 0x51,

119 
	mMIPI_DCS_GET_DISPLAY_BRIGHTNESS
 = 0x52,

120 
	mMIPI_DCS_WRITE_CONTROL_DISPLAY
 = 0x53,

121 
	mMIPI_DCS_GET_CONTROL_DISPLAY
 = 0x54,

122 
	mMIPI_DCS_WRITE_POWER_SAVE
 = 0x55,

123 
	mMIPI_DCS_GET_POWER_SAVE
 = 0x56,

124 
	mMIPI_DCS_SET_CABC_MIN_BRIGHTNESS
 = 0x5E,

125 
	mMIPI_DCS_GET_CABC_MIN_BRIGHTNESS
 = 0x5F,

126 
	mMIPI_DCS_READ_DDB_START
 = 0xA1,

127 
	mMIPI_DCS_READ_DDB_CONTINUE
 = 0xA8,

131 
	#MIPI_DCS_PIXEL_FMT_24BIT
 7

	)

132 
	#MIPI_DCS_PIXEL_FMT_18BIT
 6

	)

133 
	#MIPI_DCS_PIXEL_FMT_16BIT
 5

	)

134 
	#MIPI_DCS_PIXEL_FMT_12BIT
 3

	)

135 
	#MIPI_DCS_PIXEL_FMT_8BIT
 2

	)

136 
	#MIPI_DCS_PIXEL_FMT_3BIT
 1

	)

	@src/common/linuxkpi/gplv2/include/video/vga.h

1 #i‚de‡
__löux_video_vga_h__


2 
	#__löux_video_vga_h__


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/io.h
>

6 
	~<asm/byã‹dî.h
>

	@src/common/linuxkpi/gplv2/include/video/videomode.h

9 #i‚de‡
__LINUX_VIDEOMODE_H


10 
	#__LINUX_VIDEOMODE_H


	)

12 
	~<löux/ty≥s.h
>

13 
	~<video/di•œy_timög.h
>

19 
	svideomode
 {

20 
	mpixñ˛ock
;

22 
u32
 
	mha˘ive
;

23 
u32
 
	mh‰⁄t_p‹ch
;

24 
u32
 
	mhback_p‹ch
;

25 
u32
 
	mhsync_Àn
;

27 
u32
 
	mva˘ive
;

28 
u32
 
	mv‰⁄t_p‹ch
;

29 
u32
 
	mvback_p‹ch
;

30 
u32
 
	mvsync_Àn
;

32 
di•œy_Êags
 
	mÊags
;

43 
videomode_‰om_timög
(c⁄° 
di•œy_timög
 *
dt
,

44 
videomode
 *
vm
);

55 
videomode_‰om_timögs
(c⁄° 
di•œy_timögs
 *
di•
,

56 
videomode
 *
vm
, 
ödex
);

	@src/common/linuxkpi/include/drm/amd_asic_type.h

23 #i‚de‡
__AMD_ASIC_TYPE_H__


24 
	#__AMD_ASIC_TYPE_H__


	)

28 
	eamd_asic_ty≥
 {

29 
	mCHIP_TAHITI
 = 0,

30 
	mCHIP_PITCAIRN
,

31 
	mCHIP_VERDE
,

32 
	mCHIP_OLAND
,

33 
	mCHIP_HAINAN
,

34 
	mCHIP_BONAIRE
,

35 
	mCHIP_KAVERI
,

36 
	mCHIP_KABINI
,

37 
	mCHIP_HAWAII
,

38 
	mCHIP_MULLINS
,

39 
	mCHIP_TOPAZ
,

40 
	mCHIP_TONGA
,

41 
	mCHIP_FIJI
,

42 
	mCHIP_CARRIZO
,

43 
	mCHIP_STONEY
,

44 
	mCHIP_POLARIS10
,

45 
	mCHIP_POLARIS11
,

46 
	mCHIP_POLARIS12
,

47 
	mCHIP_VEGA10
,

48 
	mCHIP_RAVEN
,

49 
	mCHIP_LAST
,

	@src/common/linuxkpi/include/drm/ati_pcigart.h

2 #i‚de‡
DRM_ATI_PCIGART_H


3 
	#DRM_ATI_PCIGART_H


	)

5 
	~<drm/drm_Àgacy.h
>

8 
	#DRM_ATI_GART_MAIN
 1

	)

9 
	#DRM_ATI_GART_FB
 2

	)

11 
	#DRM_ATI_GART_PCI
 1

	)

12 
	#DRM_ATI_GART_PCIE
 2

	)

13 
	#DRM_ATI_GART_IGP
 3

	)

15 
	sdrm_©i_pcig¨t_öfo
 {

16 
	mg¨t_èbÀ_loˇti⁄
;

17 
	mg¨t_ªg_if
;

18 *
	maddr
;

19 
dma_addr_t
 
	mbus_addr
;

20 
dma_addr_t
 
	mèbÀ_mask
;

21 
drm_dma_h™dÀ
 *
	mèbÀ_h™dÀ
;

22 
drm_loˇl_m≠
 
	mm≠pög
;

23 
	mèbÀ_size
;

26 
drm_©i_pcig¨t_öô
(
drm_devi˚
 *
dev
,

27 
drm_©i_pcig¨t_öfo
 * 
g¨t_öfo
);

28 
drm_©i_pcig¨t_˛ónup
(
drm_devi˚
 *
dev
,

29 
drm_©i_pcig¨t_öfo
 * 
g¨t_öfo
);

	@src/common/linuxkpi/include/drm/bridge/analogix_dp.h

11 #i‚de‡
_ANALOGIX_DP_H_


12 
	#_ANALOGIX_DP_H_


	)

14 
	~<drm/drm_¸tc.h
>

16 
	e™Æogix_dp_devty≥
 {

17 
	mEXYNOS_DP
,

18 
	mRK3288_DP
,

19 
	mRK3399_EDP
,

22 
ölöe
 
boﬁ
 
	$is_rockchù
(
™Æogix_dp_devty≥
 
ty≥
)

24  
ty≥
 =
RK3288_DP
 ||Åy≥ =
RK3399_EDP
;

25 
	}
}

27 
	s™Æogix_dp_∂©_d©a
 {

28 
™Æogix_dp_devty≥
 
	mdev_ty≥
;

29 
drm_∑√l
 *
	m∑√l
;

30 
drm_ícodî
 *
	mícodî
;

31 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
;

33 (*
	mpowî_⁄
)(
	m™Æogix_dp_∂©_d©a
 *);

34 (*
	mpowî_off
)(
	m™Æogix_dp_∂©_d©a
 *);

35 (*
	m©èch
)(
	m™Æogix_dp_∂©_d©a
 *, 
	mdrm_bridge
 *,

36 
	mdrm_c⁄√˘‹
 *);

37 (*
	mgë_modes
)(
	m™Æogix_dp_∂©_d©a
 *,

38 
	mdrm_c⁄√˘‹
 *);

41 
™Æogix_dp_p§_suµ‹ãd
(
devi˚
 *
dev
);

42 
™Æogix_dp_íabÀ_p§
(
devi˚
 *
dev
);

43 
™Æogix_dp_dißbÀ_p§
(
devi˚
 *
dev
);

45 
™Æogix_dp_ªsume
(
devi˚
 *
dev
);

46 
™Æogix_dp_su•íd
(
devi˚
 *
dev
);

48 
™Æogix_dp_böd
(
devi˚
 *
dev
, 
drm_devi˚
 *
drm_dev
,

49 
™Æogix_dp_∂©_d©a
 *
∂©_d©a
);

50 
™Æogix_dp_unböd
(
devi˚
 *
dev
, devi˚ *
ma°î
, *
d©a
);

52 
™Æogix_dp_°¨t_¸c
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

53 
™Æogix_dp_°›_¸c
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

	@src/common/linuxkpi/include/drm/bridge/dw_hdmi.h

10 #i‚de‡
__DW_HDMI__


11 
	#__DW_HDMI__


	)

13 
	~<drm/drmP.h
>

15 
	gdw_hdmi
;

79 
	mDW_HDMI_RES_8
,

80 
	mDW_HDMI_RES_10
,

81 
	mDW_HDMI_RES_12
,

82 
	mDW_HDMI_RES_MAX
,

85 
	edw_hdmi_phy_ty≥
 {

86 
	mDW_HDMI_PHY_DWC_HDMI_TX_PHY
 = 0x00,

87 
	mDW_HDMI_PHY_DWC_MHL_PHY_HEAC
 = 0xb2,

88 
	mDW_HDMI_PHY_DWC_MHL_PHY
 = 0xc2,

89 
	mDW_HDMI_PHY_DWC_HDMI_3D_TX_PHY_HEAC
 = 0xe2,

90 
	mDW_HDMI_PHY_DWC_HDMI_3D_TX_PHY
 = 0xf2,

91 
	mDW_HDMI_PHY_DWC_HDMI20_TX_PHY
 = 0xf3,

92 
	mDW_HDMI_PHY_VENDOR_PHY
 = 0xfe,

95 
	sdw_hdmi_m∂l_c⁄fig
 {

96 
	mmpixñ˛ock
;

98 
u16
 
	m˝˚
;

99 
u16
 
	mgmp
;

100 } 
	mªs
[
DW_HDMI_RES_MAX
];

103 
	sdw_hdmi_cuº_˘æ
 {

104 
	mmpixñ˛ock
;

105 
u16
 
	mcuº
[
DW_HDMI_RES_MAX
];

108 
	sdw_hdmi_phy_c⁄fig
 {

109 
	mmpixñ˛ock
;

110 
u16
 
	msym_˘r
;

111 
u16
 
	mãrm
;

112 
u16
 
	mvÀv_˘r
;

115 
	sdw_hdmi_phy_›s
 {

116 (*
	möô
)(
dw_hdmi
 *
	mhdmi
, *
	md©a
,

117 
drm_di•œy_mode
 *
	mmode
);

118 (*
	mdißbÀ
)(
dw_hdmi
 *
	mhdmi
, *
	md©a
);

119 
drm_c⁄√˘‹_°©us
 (*
ªad_hpd
)(
dw_hdmi
 *
	mhdmi
, *
	md©a
);

120 (*
	mupd©e_hpd
)(
dw_hdmi
 *
	mhdmi
, *
	md©a
,

121 
boﬁ
 
	mf‹˚
, boﬁ 
	mdißbÀd
, boﬁ 
	mrx£n£
);

122 (*
	m£tup_hpd
)(
dw_hdmi
 *
	mhdmi
, *
	md©a
);

125 
	sdw_hdmi_∂©_d©a
 {

126 
ªgm≠
 *
	mªgm
;

127 
drm_mode_°©us
 (*
mode_vÆid
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

128 c⁄° 
drm_di•œy_mode
 *
	mmode
);

129 
	möput_bus_f‹m©
;

130 
	möput_bus_ícodög
;

133 c⁄° 
dw_hdmi_phy_›s
 *
	mphy_›s
;

134 c⁄° *
	mphy_«me
;

135 *
	mphy_d©a
;

138 c⁄° 
dw_hdmi_m∂l_c⁄fig
 *
	mm∂l_cfg
;

139 c⁄° 
dw_hdmi_cuº_˘æ
 *
	mcur_˘r
;

140 c⁄° 
dw_hdmi_phy_c⁄fig
 *
	mphy_c⁄fig
;

141 (*
	mc⁄figuª_phy
)(
dw_hdmi
 *
	mhdmi
,

142 c⁄° 
dw_hdmi_∂©_d©a
 *
	mpd©a
,

143 
	mmpixñ˛ock
);

146 
dw_hdmi_¥obe
(
∂©f‹m_devi˚
 *
pdev
,

147 c⁄° 
dw_hdmi_∂©_d©a
 *
∂©_d©a
);

148 
dw_hdmi_ªmove
(
∂©f‹m_devi˚
 *
pdev
);

149 
dw_hdmi_unböd
(
devi˚
 *
dev
);

150 
dw_hdmi_böd
(
∂©f‹m_devi˚
 *
pdev
, 
drm_ícodî
 *
ícodî
,

151 c⁄° 
dw_hdmi_∂©_d©a
 *
∂©_d©a
);

153 
dw_hdmi_£tup_rx_£n£
(
devi˚
 *
dev
, 
boﬁ
 
hpd
, boﬁ 
rx_£n£
);

155 
dw_hdmi_£t_ßm∂e_øã
(
dw_hdmi
 *
hdmi
, 
øã
);

156 
dw_hdmi_audio_íabÀ
(
dw_hdmi
 *
hdmi
);

157 
dw_hdmi_audio_dißbÀ
(
dw_hdmi
 *
hdmi
);

160 
dw_hdmi_phy_i2c_wrôe
(
dw_hdmi
 *
hdmi
, 
d©a
,

161 
addr
);

	@src/common/linuxkpi/include/drm/bridge/dw_mipi_dsi.h

10 #i‚de‡
__DW_MIPI_DSI__


11 
	#__DW_MIPI_DSI__


	)

13 
	sdw_mùi_dsi_phy_›s
 {

14 (*
	möô
)(*
	m¥iv_d©a
);

15 (*
	mgë_œ√_mbps
)(*
	m¥iv_d©a
, 
drm_di•œy_mode
 *
	mmode
,

16 
	mmode_Êags
, 
u32
 
	mœ√s
, u32 
	mf‹m©
,

17 *
	mœ√_mbps
);

20 
	sdw_mùi_dsi_∂©_d©a
 {

21 
__iomem
 *
	mba£
;

22 
	mmax_d©a_œ√s
;

24 
drm_mode_°©us
 (*
mode_vÆid
)(*
	m¥iv_d©a
,

25 c⁄° 
drm_di•œy_mode
 *
	mmode
);

27 c⁄° 
dw_mùi_dsi_phy_›s
 *
	mphy_›s
;

29 *
	m¥iv_d©a
;

32 
dw_mùi_dsi_¥obe
(
∂©f‹m_devi˚
 *
pdev
,

33 c⁄° 
dw_mùi_dsi_∂©_d©a
 *
∂©_d©a
);

34 
dw_mùi_dsi_ªmove
(
∂©f‹m_devi˚
 *
pdev
);

35 
dw_mùi_dsi_böd
(
∂©f‹m_devi˚
 *
pdev
, 
drm_ícodî
 *
ícodî
,

36 c⁄° 
dw_mùi_dsi_∂©_d©a
 *
∂©_d©a
);

37 
dw_mùi_dsi_unböd
(
devi˚
 *
dev
);

	@src/common/linuxkpi/include/drm/bridge/mhl.h

15 #i‚de‡
__MHL_H__


16 
	#__MHL_H__


	)

18 
	~<löux/ty≥s.h
>

22 
	mMHL_DCAP_DEV_STATE
,

23 
	mMHL_DCAP_MHL_VERSION
,

24 
	mMHL_DCAP_CAT
,

25 
	mMHL_DCAP_ADOPTER_ID_H
,

26 
	mMHL_DCAP_ADOPTER_ID_L
,

27 
	mMHL_DCAP_VID_LINK_MODE
,

28 
	mMHL_DCAP_AUD_LINK_MODE
,

29 
	mMHL_DCAP_VIDEO_TYPE
,

30 
	mMHL_DCAP_LOG_DEV_MAP
,

31 
	mMHL_DCAP_BANDWIDTH
,

32 
	mMHL_DCAP_FEATURE_FLAG
,

33 
	mMHL_DCAP_DEVICE_ID_H
,

34 
	mMHL_DCAP_DEVICE_ID_L
,

35 
	mMHL_DCAP_SCRATCHPAD_SIZE
,

36 
	mMHL_DCAP_INT_STAT_SIZE
,

37 
	mMHL_DCAP_RESERVED
,

38 
	mMHL_DCAP_SIZE


41 
	#MHL_DCAP_CAT_SINK
 0x01

	)

42 
	#MHL_DCAP_CAT_SOURCE
 0x02

	)

43 
	#MHL_DCAP_CAT_POWER
 0x10

	)

44 
	#MHL_DCAP_CAT_PLIM
(
x
Ë((xË<< 5)

	)

46 
	#MHL_DCAP_VID_LINK_RGB444
 0x01

	)

47 
	#MHL_DCAP_VID_LINK_YCBCR444
 0x02

	)

48 
	#MHL_DCAP_VID_LINK_YCBCR422
 0x04

	)

49 
	#MHL_DCAP_VID_LINK_PPIXEL
 0x08

	)

50 
	#MHL_DCAP_VID_LINK_ISLANDS
 0x10

	)

51 
	#MHL_DCAP_VID_LINK_VGA
 0x20

	)

52 
	#MHL_DCAP_VID_LINK_16BPP
 0x40

	)

54 
	#MHL_DCAP_AUD_LINK_2CH
 0x01

	)

55 
	#MHL_DCAP_AUD_LINK_8CH
 0x02

	)

57 
	#MHL_DCAP_VT_GRAPHICS
 0x00

	)

58 
	#MHL_DCAP_VT_PHOTO
 0x02

	)

59 
	#MHL_DCAP_VT_CINEMA
 0x04

	)

60 
	#MHL_DCAP_VT_GAMES
 0x08

	)

61 
	#MHL_DCAP_SUPP_VT
 0x80

	)

63 
	#MHL_DCAP_LD_DISPLAY
 0x01

	)

64 
	#MHL_DCAP_LD_VIDEO
 0x02

	)

65 
	#MHL_DCAP_LD_AUDIO
 0x04

	)

66 
	#MHL_DCAP_LD_MEDIA
 0x08

	)

67 
	#MHL_DCAP_LD_TUNER
 0x10

	)

68 
	#MHL_DCAP_LD_RECORD
 0x20

	)

69 
	#MHL_DCAP_LD_SPEAKER
 0x40

	)

70 
	#MHL_DCAP_LD_GUI
 0x80

	)

71 
	#MHL_DCAP_LD_ALL
 0xFF

	)

73 
	#MHL_DCAP_FEATURE_RCP_SUPPORT
 0x01

	)

74 
	#MHL_DCAP_FEATURE_RAP_SUPPORT
 0x02

	)

75 
	#MHL_DCAP_FEATURE_SP_SUPPORT
 0x04

	)

76 
	#MHL_DCAP_FEATURE_UCP_SEND_SUPPOR
 0x08

	)

77 
	#MHL_DCAP_FEATURE_UCP_RECV_SUPPORT
 0x10

	)

78 
	#MHL_DCAP_FEATURE_RBP_SUPPORT
 0x40

	)

82 
	mMHL_XDC_ECBUS_SPEEDS
,

83 
	mMHL_XDC_TMDS_SPEEDS
,

84 
	mMHL_XDC_ECBUS_ROLES
,

85 
	mMHL_XDC_LOG_DEV_MAPX
,

86 
	mMHL_XDC_SIZE


89 
	#MHL_XDC_ECBUS_S_075
 0x01

	)

90 
	#MHL_XDC_ECBUS_S_8BIT
 0x02

	)

91 
	#MHL_XDC_ECBUS_S_12BIT
 0x04

	)

92 
	#MHL_XDC_ECBUS_D_150
 0x10

	)

93 
	#MHL_XDC_ECBUS_D_8BIT
 0x20

	)

95 
	#MHL_XDC_TMDS_000
 0x00

	)

96 
	#MHL_XDC_TMDS_150
 0x01

	)

97 
	#MHL_XDC_TMDS_300
 0x02

	)

98 
	#MHL_XDC_TMDS_600
 0x04

	)

101 
	#MHL_XDC_DEV_HOST
 0x01

	)

102 
	#MHL_XDC_DEV_DEVICE
 0x02

	)

103 
	#MHL_XDC_DEV_CHARGER
 0x04

	)

104 
	#MHL_XDC_HID_HOST
 0x08

	)

105 
	#MHL_XDC_HID_DEVICE
 0x10

	)

108 
	#MHL_XDC_LD_PHONE
 0x01

	)

112 
	mMHL_DST_CONNECTED_RDY
,

113 
	mMHL_DST_LINK_MODE
,

114 
	mMHL_DST_VERSION
,

115 
	mMHL_DST_SIZE


119 
	#MHL_DST_OFFSET
 0x30

	)

120 
	#MHL_DST_REG
(
«me
Ë(
MHL_DST_OFFSET
 + 
MHL_DST_
##«me)

	)

122 
	#MHL_DST_CONN_DCAP_RDY
 0x01

	)

123 
	#MHL_DST_CONN_XDEVCAPP_SUPP
 0x02

	)

124 
	#MHL_DST_CONN_POW_STAT
 0x04

	)

125 
	#MHL_DST_CONN_PLIM_STAT_MASK
 0x38

	)

127 
	#MHL_DST_LM_CLK_MODE_MASK
 0x07

	)

128 
	#MHL_DST_LM_CLK_MODE_PACKED_PIXEL
 0x02

	)

129 
	#MHL_DST_LM_CLK_MODE_NORMAL
 0x03

	)

130 
	#MHL_DST_LM_PATH_EN_MASK
 0x08

	)

131 
	#MHL_DST_LM_PATH_ENABLED
 0x08

	)

132 
	#MHL_DST_LM_PATH_DISABLED
 0x00

	)

133 
	#MHL_DST_LM_MUTED_MASK
 0x10

	)

137 
	mMHL_XDS_CURR_ECBUS_MODE
,

138 
	mMHL_XDS_AVLINK_MODE_STATUS
,

139 
	mMHL_XDS_AVLINK_MODE_CONTROL
,

140 
	mMHL_XDS_MULTI_SINK_STATUS
,

141 
	mMHL_XDS_SIZE


145 
	#MHL_XDS_OFFSET
 0x90

	)

146 
	#MHL_XDS_REG
(
«me
Ë(
MHL_XDS_OFFSET
 + 
MHL_XDS_
##«me)

	)

149 
	#MHL_XDS_SLOT_MODE_8BIT
 0x00

	)

150 
	#MHL_XDS_SLOT_MODE_6BIT
 0x01

	)

151 
	#MHL_XDS_ECBUS_S
 0x04

	)

152 
	#MHL_XDS_ECBUS_D
 0x08

	)

154 
	#MHL_XDS_LINK_CLOCK_75MHZ
 0x00

	)

155 
	#MHL_XDS_LINK_CLOCK_150MHZ
 0x10

	)

156 
	#MHL_XDS_LINK_CLOCK_300MHZ
 0x20

	)

157 
	#MHL_XDS_LINK_CLOCK_600MHZ
 0x30

	)

159 
	#MHL_XDS_LINK_STATUS_NO_SIGNAL
 0x00

	)

160 
	#MHL_XDS_LINK_STATUS_CRU_LOCKED
 0x01

	)

161 
	#MHL_XDS_LINK_STATUS_TMDS_NORMAL
 0x02

	)

162 
	#MHL_XDS_LINK_STATUS_TMDS_RESERVED
 0x03

	)

164 
	#MHL_XDS_LINK_RATE_1_5_GBPS
 0x00

	)

165 
	#MHL_XDS_LINK_RATE_3_0_GBPS
 0x01

	)

166 
	#MHL_XDS_LINK_RATE_6_0_GBPS
 0x02

	)

167 
	#MHL_XDS_ATT_CAPABLE
 0x08

	)

169 
	#MHL_XDS_SINK_STATUS_1_HPD_LOW
 0x00

	)

170 
	#MHL_XDS_SINK_STATUS_1_HPD_HIGH
 0x01

	)

171 
	#MHL_XDS_SINK_STATUS_2_HPD_LOW
 0x00

	)

172 
	#MHL_XDS_SINK_STATUS_2_HPD_HIGH
 0x04

	)

173 
	#MHL_XDS_SINK_STATUS_3_HPD_LOW
 0x00

	)

174 
	#MHL_XDS_SINK_STATUS_3_HPD_HIGH
 0x10

	)

175 
	#MHL_XDS_SINK_STATUS_4_HPD_LOW
 0x00

	)

176 
	#MHL_XDS_SINK_STATUS_4_HPD_HIGH
 0x40

	)

180 
	mMHL_INT_RCHANGE
,

181 
	mMHL_INT_DCHANGE
,

182 
	mMHL_INT_SIZE


186 
	#MHL_INT_OFFSET
 0x20

	)

187 
	#MHL_INT_REG
(
«me
Ë(
MHL_INT_OFFSET
 + 
MHL_INT_
##«me)

	)

189 
	#MHL_INT_RC_DCAP_CHG
 0x01

	)

190 
	#MHL_INT_RC_DSCR_CHG
 0x02

	)

191 
	#MHL_INT_RC_REQ_WRT
 0x04

	)

192 
	#MHL_INT_RC_GRT_WRT
 0x08

	)

193 
	#MHL_INT_RC_3D_REQ
 0x10

	)

194 
	#MHL_INT_RC_FEAT_REQ
 0x20

	)

195 
	#MHL_INT_RC_FEAT_COMPLETE
 0x40

	)

197 
	#MHL_INT_DC_EDID_CHG
 0x02

	)

200 
	mMHL_ACK
 = 0x33,

201 
	mMHL_NACK
 = 0x34,

202 
	mMHL_ABORT
 = 0x35,

203 
	mMHL_WRITE_STAT
 = 0xe0,

204 
	mMHL_SET_INT
 = 0x60,

205 
	mMHL_READ_DEVCAP_REG
 = 0x61,

206 
	mMHL_GET_STATE
 = 0x62,

207 
	mMHL_GET_VENDOR_ID
 = 0x63,

208 
	mMHL_SET_HPD
 = 0x64,

209 
	mMHL_CLR_HPD
 = 0x65,

210 
	mMHL_SET_CAP_ID
 = 0x66,

211 
	mMHL_GET_CAP_ID
 = 0x67,

212 
	mMHL_MSC_MSG
 = 0x68,

213 
	mMHL_GET_SC1_ERRORCODE
 = 0x69,

214 
	mMHL_GET_DDC_ERRORCODE
 = 0x6A,

215 
	mMHL_GET_MSC_ERRORCODE
 = 0x6B,

216 
	mMHL_WRITE_BURST
 = 0x6C,

217 
	mMHL_GET_SC3_ERRORCODE
 = 0x6D,

218 
	mMHL_WRITE_XSTAT
 = 0x70,

219 
	mMHL_READ_XDEVCAP_REG
 = 0x71,

221 
	mMHL_READ_EDID_BLOCK
,

222 
	mMHL_SEND_3D_REQ_OR_FEAT_REQ
,

223 
	mMHL_READ_DEVCAP
,

224 
	mMHL_READ_XDEVCAP


229 
	mMHL_MSC_MSG_RCP
 = 0x10,

230 
	mMHL_MSC_MSG_RCPK
 = 0x11,

231 
	mMHL_MSC_MSG_RCPE
 = 0x12,

232 
	mMHL_MSC_MSG_RAP
 = 0x20,

233 
	mMHL_MSC_MSG_RAPK
 = 0x21,

234 
	mMHL_MSC_MSG_RBP
 = 0x22,

235 
	mMHL_MSC_MSG_RBPK
 = 0x23,

236 
	mMHL_MSC_MSG_RBPE
 = 0x24,

237 
	mMHL_MSC_MSG_UCP
 = 0x30,

238 
	mMHL_MSC_MSG_UCPK
 = 0x31,

239 
	mMHL_MSC_MSG_UCPE
 = 0x32,

240 
	mMHL_MSC_MSG_RUSB
 = 0x40,

241 
	mMHL_MSC_MSG_RUSBK
 = 0x41,

242 
	mMHL_MSC_MSG_RHID
 = 0x42,

243 
	mMHL_MSC_MSG_RHIDK
 = 0x43,

244 
	mMHL_MSC_MSG_ATT
 = 0x50,

245 
	mMHL_MSC_MSG_ATTK
 = 0x51,

246 
	mMHL_MSC_MSG_BIST_TRIGGER
 = 0x60,

247 
	mMHL_MSC_MSG_BIST_REQUEST_STAT
 = 0x61,

248 
	mMHL_MSC_MSG_BIST_READY
 = 0x62,

249 
	mMHL_MSC_MSG_BIST_STOP
 = 0x63,

253 
	#MHL_RAP_POLL
 0x00

	)

254 
	#MHL_RAP_CONTENT_ON
 0x10

	)

255 
	#MHL_RAP_CONTENT_OFF
 0x11

	)

256 
	#MHL_RAP_CBUS_MODE_DOWN
 0x20

	)

257 
	#MHL_RAP_CBUS_MODE_UP
 0x21

	)

260 
	#MHL_RAPK_NO_ERR
 0x00

	)

261 
	#MHL_RAPK_UNRECOGNIZED
 0x01

	)

262 
	#MHL_RAPK_UNSUPPORTED
 0x02

	)

263 
	#MHL_RAPK_BUSY
 0x03

	)

266 
	#MHL_RCP_KEY_RELEASED_MASK
 0x80

	)

267 
	#MHL_RCP_KEY_ID_MASK
 0x7F

	)

273 
	#MHL_RCPE_STATUS_NO_ERROR
 0x00

	)

275 
	#MHL_RCPE_STATUS_INEFFECTIVE_KEY_CODE
 0x01

	)

277 
	#MHL_RCPE_STATUS_BUSY
 0x02

	)

283 
	#MHL_RBPE_STATUS_NO_ERROR
 0x00

	)

285 
	#MHL_RBPE_STATUS_INEFFECTIVE_BUTTON_CODE
 0x01

	)

287 
	#MHL_RBPE_STATUS_BUSY
 0x02

	)

293 
	#MHL_UCPE_STATUS_NO_ERROR
 0x00

	)

295 
	#MHL_UCPE_STATUS_INEFFECTIVE_KEY_CODE
 0x01

	)

297 
	emhl_bur°_id
 {

298 
	mMHL_BURST_ID_3D_VIC
 = 0x10,

299 
	mMHL_BURST_ID_3D_DTD
 = 0x11,

300 
	mMHL_BURST_ID_HEV_VIC
 = 0x20,

301 
	mMHL_BURST_ID_HEV_DTDA
 = 0x21,

302 
	mMHL_BURST_ID_HEV_DTDB
 = 0x22,

303 
	mMHL_BURST_ID_VC_ASSIGN
 = 0x38,

304 
	mMHL_BURST_ID_VC_CONFIRM
 = 0x39,

305 
	mMHL_BURST_ID_AUD_DELAY
 = 0x40,

306 
	mMHL_BURST_ID_ADT_BURSTID
 = 0x41,

307 
	mMHL_BURST_ID_BIST_SETUP
 = 0x51,

308 
	mMHL_BURST_ID_BIST_RETURN_STAT
 = 0x52,

309 
	mMHL_BURST_ID_EMSC_SUPPORT
 = 0x61,

310 
	mMHL_BURST_ID_HID_PAYLOAD
 = 0x62,

311 
	mMHL_BURST_ID_BLK_RCV_BUFFER_INFO
 = 0x63,

312 
	mMHL_BURST_ID_BITS_PER_PIXEL_FMT
 = 0x64,

315 
	smhl_bur°_blk_rcv_buf„r_öfo
 {

316 
__be16
 
	mid
;

317 
__À16
 
	msize
;

318 } 
	g__∑cked
;

320 
	smhl3_bur°_hódî
 {

321 
__be16
 
	mid
;

322 
u8
 
	mchecksum
;

323 
u8
 
	mtŸÆ_íåõs
;

324 
u8
 
	m£quí˚_ödex
;

325 } 
	g__∑cked
;

327 
	smhl_bur°_bôs_≥r_pixñ_fmt
 {

328 
mhl3_bur°_hódî
 
	mhdr
;

329 
u8
 
	mnum_íåõs
;

331 
u8
 
	m°ªam_id
;

332 
u8
 
	mpixñ_f‹m©
;

333 } 
__∑cked
 
	mdesc
[0];

334 } 
	g__∑cked
;

336 
	smhl_bur°_emsc_suµ‹t
 {

337 
mhl3_bur°_hódî
 
	mhdr
;

338 
u8
 
	mnum_íåõs
;

339 
__be16
 
	mbur°_id
[0];

340 } 
	g__∑cked
;

342 
	smhl_bur°_audio_des¸
 {

343 
mhl3_bur°_hódî
 
	mhdr
;

344 
u8
 
	mÊags
;

345 
u8
 
	msh‹t_desc
[9];

346 } 
	g__∑cked
;

352 
	#MHL3_IEEE_OUI
 0x7ˇ61d

	)

353 
	#MHL3_INFOFRAME_SIZE
 15

	)

355 
	emhl3_video_f‹m©
 {

356 
	mMHL3_VIDEO_FORMAT_NONE
,

357 
	mMHL3_VIDEO_FORMAT_3D
,

358 
	mMHL3_VIDEO_FORMAT_MULTI_VIEW
,

359 
	mMHL3_VIDEO_FORMAT_DUAL_3D


362 
	emhl3_3d_f‹m©_ty≥
 {

363 
	mMHL3_3D_FORMAT_TYPE_FS
,

364 
	mMHL3_3D_FORMAT_TYPE_TB
,

365 
	mMHL3_3D_FORMAT_TYPE_LR
,

366 
	mMHL3_3D_FORMAT_TYPE_FS_TB
,

367 
	mMHL3_3D_FORMAT_TYPE_FS_LR
,

368 
	mMHL3_3D_FORMAT_TYPE_TB_LR


371 
	smhl3_öfo‰ame
 {

372 
	mvîsi⁄
;

373 
mhl3_video_f‹m©
 
	mvideo_f‹m©
;

374 
mhl3_3d_f‹m©_ty≥
 
	mf‹m©_ty≥
;

375 
boﬁ
 
	m£p_audio
;

376 
	mhev_f‹m©
;

377 
	mav_dñay
;

	@src/common/linuxkpi/include/drm/drmP.h

32 #i‚de‡
_DRM_P_H_


33 
	#_DRM_P_H_


	)

35 #i‡
deföed
(
_KERNEL
Ë|| deföed(
__KERNEL__
)

36 
	~<sys/∑øm.h
>

37 
	~<sys/queue.h
>

38 
	~<sys/mÆloc.h
>

39 
	~<sys/kî√l.h
>

40 
	~<sys/kå.h
>

41 
	~<sys/moduÀ.h
>

42 
	~<sys/sy°m.h
>

43 
	~<sys/c⁄f.h
>

44 
	~<sys/sgli°.h
>

45 
	~<sys/°©.h
>

46 
	~<sys/¥iv.h
>

47 
	~<sys/¥oc.h
>

48 
	~<sys/lock.h
>

49 
	~<sys/f˙é.h
>

50 
	~<sys/uio.h
>

51 
	~<sys/fûio.h
>

52 
	~<sys/rwlock.h
>

53 
	~<sys/£löfo.h
>

54 
	~<sys/sys˘l.h
>

55 
	~<sys/bus.h
>

56 
	~<sys/queue.h
>

57 
	~<sys/sig«lv¨.h
>

58 
	~<sys/pciio.h
>

59 
	~<sys/pﬁl.h
>

60 
	~<sys/sbuf.h
>

61 
	~<sys/èskqueue.h
>

62 
	~<sys/ªsour˚v¨.h
>

63 
	~<sys/vmmëî.h
>

64 
	~<vm/vm.h
>

65 
	~<vm/pm≠.h
>

66 
	~<vm/vm_exã∫.h
>

67 
	~<vm/vm_kîn.h
>

68 
	~<vm/vm_m≠.h
>

69 
	~<vm/vm_obje˘.h
>

70 
	~<vm/vm_∑ge.h
>

71 
	~<vm/vm_∑geout.h
>

72 
	~<vm/vm_∑gî.h
>

73 
	~<vm/vm_∑øm.h
>

74 
	~<vm/vm_phys.h
>

75 
	~<machöe/bus.h
>

76 
	~<machöe/ªsour˚.h
>

77 #i‡
deföed
(
__i386__
Ë|| deföed(
__amd64__
)

78 
	~<machöe/•ecüÃeg.h
>

80 
	~<machöe/syßrch.h
>

81 
	~<sys/ídün.h
>

82 
	~<sys/mm™.h
>

83 
	~<sys/rm™.h
>

84 
	~<sys/memønge.h
>

85 
	~<dev/agp/agpv¨.h
>

86 
	~<sys/agpio.h
>

87 
	~<sys/muãx.h
>

88 
	~<dev/pci/pciv¨.h
>

89 
	~<dev/pci/pcúeg.h
>

90 
	~<sys/£löfo.h
>

91 
	~<sys/bus.h
>

93 
	~<löux/io.h
>

94 
	~<löux/∂©f‹m_devi˚.h
>

95 
	~<löux/idr.h
>

96 
	~<löux/°rög.h
>

97 
	~<löux/com∑t.h
>

98 
	~<löux/compûî.h
>

99 
	~<löux/fs.h
>

100 
	~<löux/gÂ.h
>

101 
	~<löux/pm.h
>

102 
	~<löux/ktime.h
>

103 
	~<löux/pﬁl.h
>

104 
	~<löux/øãlimô.h
>

105 
	~<löux/sched.h
>

106 
	~<löux/¶ab.h
>

107 
	~<löux/ty≥s.h
>

108 
	~<löux/vmÆloc.h
>

109 
	~<löux/mm.h
>

110 
	~<löux/io˘l.h
>

111 
	~<löux/w‹kqueue.h
>

112 
	~<löux/m©h64.h
>

113 
	~<löux/dma-„n˚.h
>

114 
	~<löux/moduÀ.h
>

115 
	~<löux/ªfcou¡.h
>

117 
	~<drm/drm_hashèb.h
>

118 #ifde‡
__löux__


119 
	~<asm/mm™.h
>

120 
	~<asm/pgÆloc.h
>

122 
	~<löux/uac˚ss.h
>

124 
	~<u≠i/drm/drm.h
>

128 
	~<löux/devi˚.h
>

129 
	~<löux/moduÀ.h
>

130 
	~<löux/•ölock.h
>

131 
	~<löux/muãx.h
>

132 
	~<löux/i2c.h
>

133 
	~<löux/kthªad.h
>

134 
	~<löux/öãºu±.h
>

135 
	~<löux/∑gem≠.h
>

138 
	~<asm/mår.h
>

139 
	~<drm/drm_os_‰ìbsd.h
>

140 
	~<drm/drm_agpsuµ‹t.h
>

141 
	~<drm/drm_¸tc.h
>

142 
	~<drm/drm_fourcc.h
>

143 
	~<drm/drm_globÆ.h
>

144 
	~<drm/drm_hashèb.h
>

145 
	~<drm/drm_mm.h
>

146 
	~<drm/drm_io˘l.h
>

147 
	~<u≠i/drm/drm_ßªa.h
>

148 
	~<drm/drm_vma_m™agî.h
>

149 
	~<löux/©omic.h
>

151 
	#smp_wmb
(Ë
	`wmb
()

	)

152 
	~<drm/drm_drv.h
>

153 
	~<drm/drm_¥ime.h
>

154 
	~<drm/drm_¥öt.h
>

155 
	~<drm/drm_pci.h
>

156 
	~<drm/drm_fûe.h
>

157 
	~<drm/drm_debugfs.h
>

158 
	~<drm/drm_io˘l.h
>

159 
	~<drm/drm_sysfs.h
>

160 
	~<drm/drm_vbœnk.h
>

161 
	~<drm/drm_úq.h
>

162 
	~<drm/drm_devi˚.h
>

164 
	~"›t_com∑t.h
"

165 
	~"›t_drm.h
"

166 
	~"›t_sysc⁄s.h
"

168 
	#__OS_HAS_AGP
 (
	`deföed
(
CONFIG_AGP
Ë|| (deföed(
CONFIG_AGP_MODULE
Ë&& deföed(
MODULE
)))

	)

169 
	#__OS_HAS_MTRR
 (
	`deföed
(
CONFIG_MTRR
))

	)

171 #unde‡
DRM_LINUX


172 
	#DRM_LINUX
 0

	)

174 
drm_skùwc
;

176 
	gdevi˚_node
;

177 
	gvideomode
;

178 
	gª£rv©i⁄_obje˘
;

179 
	g£q_fûe
;

180 
	gdma_buf_©èchmít
;

182 
	gpci_dev
;

183 
	gpci_c⁄åﬁÀr
;

193 
	#DRM_IF_VERSION
(
maj
, 
mö
Ë(maj << 16 | mö)

	)

203 
ölöe
 
boﬁ
 
	$drm_drv_u£s_©omic_mode£t
(
drm_devi˚
 *
dev
)

205  
dev
->
mode_c⁄fig
.
funcs
->
©omic_commô
 !
NULL
;

206 
	}
}

208 
	#DRM_SWITCH_POWER_ON
 0

	)

209 
	#DRM_SWITCH_POWER_OFF
 1

	)

210 
	#DRM_SWITCH_POWER_CHANGING
 2

	)

211 
	#DRM_SWITCH_POWER_DYNAMIC_OFF
 3

	)

213 
__ölöe__
 
	$drm_c‹e_check_„©uª
(
drm_devi˚
 *
dev
,

214 
„©uª
)

216  ((
dev
->
drivî
->
drivî_„©uªs
 & 
„©uª
) ? 1 : 0);

217 
	}
}

233 
__ölöe__
 
boﬁ
 
	$drm_ˇn_¶ìp
()

235 i‡(
	`ö_©omic
(Ë|| 
	`ö_dbg_ma°î
(Ë|| 
	`úqs_dißbÀd
(Ë|| 
cﬁd
)

236  
Ál£
;

237  
åue
;

238 
	}
}

241 
drm_sys˘l_öô
(
drm_devi˚
 *
dev
);

242 
drm_sys˘l_˛ónup
(
drm_devi˚
 *
dev
);

245 
	#f‹_óch_if
(
c⁄dôi⁄
Ëi‡(!(c⁄dôi⁄)Ë{} 

	)

247 #ifde‡
ENABLE_DRM_ERR_RET


248 
	#DRM_ERR_RET
(
V
) do { \

249 
	`¥ötf
("%s:%dÑë %d\n", 
__FUNCTION__
, 
__LINE__
, 
V
); \

250  
V
; \

251 } 0)

	)

253 
	#DRM_ERR_RET
(
V
Ë 
	)
V

	@src/common/linuxkpi/include/drm/drm_agpsupport.h

2 #i‚de‡
_DRM_AGPSUPPORT_H_


3 
	#_DRM_AGPSUPPORT_H_


	)

5 
	~<löux/agp_backíd.h
>

6 
	~<löux/kî√l.h
>

7 
	~<löux/li°.h
>

8 
	~<löux/mm.h
>

9 
	~<löux/muãx.h
>

10 
	~<löux/ty≥s.h
>

11 
	~<u≠i/drm/drm.h
>

13 
	gdrm_devi˚
;

14 
	gdrm_fûe
;

16 
	sdrm_agp_hód
 {

17 
agp_kîn_öfo
 
	magp_öfo
;

18 
li°_hód
 
	mmem‹y
;

19 
	mmode
;

20 #ifde‡
__löux__


21 
agp_bridge_d©a
 *
	mbridge
;

23 
devi˚_t
 
	mbridge
;

25 
	míabÀd
;

26 
	macquúed
;

27 
	mba£
;

28 
	magp_mår
;

29 
	mˇ¡_u£_≠îtuª
;

30 
	m∑ge_mask
;

33 #i‡
IS_ENABLED
(
CONFIG_AGP
)

34 
drm_‰ì_agp
(
DRM_AGP_MEM
 * 
h™dÀ
, 
∑ges
);

35 
drm_böd_agp
(
DRM_AGP_MEM
 * 
h™dÀ
, 
°¨t
);

36 
drm_unböd_agp
(
DRM_AGP_MEM
 * 
h™dÀ
);

37 
DRM_AGP_MEM
 *
drm_agp_böd_∑ges
(
drm_devi˚
 *
dev
,

38 
∑ge
 **
∑ges
,

39 
num_∑ges
,

40 
uöt32_t
 
gâ_off£t
,

41 
uöt32_t
 
ty≥
);

43 
drm_agp_hód
 *
drm_agp_öô
(
drm_devi˚
 *
dev
);

44 
drm_Àgacy_agp_˛ór
(
drm_devi˚
 *
dev
);

45 
drm_agp_acquúe
(
drm_devi˚
 *
dev
);

46 
drm_agp_acquúe_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

47 
drm_fûe
 *
fûe_¥iv
);

48 
drm_agp_ªÀa£
(
drm_devi˚
 *
dev
);

49 
drm_agp_ªÀa£_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

50 
drm_fûe
 *
fûe_¥iv
);

51 
drm_agp_íabÀ
(
drm_devi˚
 *
dev
, 
drm_agp_mode
 
mode
);

52 
drm_agp_íabÀ_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

53 
drm_fûe
 *
fûe_¥iv
);

54 
drm_agp_öfo
(
drm_devi˚
 *
dev
, drm_agp_öfÿ*
öfo
);

55 
drm_agp_öfo_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

56 
drm_fûe
 *
fûe_¥iv
);

57 
drm_agp_Æloc
(
drm_devi˚
 *
dev
, 
drm_agp_buf„r
 *
ªque°
);

58 
drm_agp_Æloc_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

59 
drm_fûe
 *
fûe_¥iv
);

60 
drm_agp_‰ì
(
drm_devi˚
 *
dev
, 
drm_agp_buf„r
 *
ªque°
);

61 
drm_agp_‰ì_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

62 
drm_fûe
 *
fûe_¥iv
);

63 
drm_agp_unböd
(
drm_devi˚
 *
dev
, 
drm_agp_bödög
 *
ªque°
);

64 
drm_agp_unböd_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

65 
drm_fûe
 *
fûe_¥iv
);

66 
drm_agp_böd
(
drm_devi˚
 *
dev
, 
drm_agp_bödög
 *
ªque°
);

67 
drm_agp_böd_io˘l
(
drm_devi˚
 *
dev
, *
d©a
,

68 
drm_fûe
 *
fûe_¥iv
);

72 
ölöe
 
	$drm_‰ì_agp
(
DRM_AGP_MEM
 * 
h™dÀ
, 
∑ges
)

74 
	}
}

76 
ölöe
 
	$drm_böd_agp
(
DRM_AGP_MEM
 * 
h™dÀ
, 
°¨t
)

78  -
ENODEV
;

79 
	}
}

81 
ölöe
 
	$drm_unböd_agp
(
DRM_AGP_MEM
 * 
h™dÀ
)

83  -
ENODEV
;

84 
	}
}

86 
ölöe
 
DRM_AGP_MEM
 *
	$drm_agp_böd_∑ges
(
drm_devi˚
 *
dev
,

87 
∑ge
 **
∑ges
,

88 
num_∑ges
,

89 
uöt32_t
 
gâ_off£t
,

90 
uöt32_t
 
ty≥
)

92  
NULL
;

93 
	}
}

95 
ölöe
 
drm_agp_hód
 *
	$drm_agp_öô
(
drm_devi˚
 *
dev
)

97  
NULL
;

98 
	}
}

100 
ölöe
 
	$drm_Àgacy_agp_˛ór
(
drm_devi˚
 *
dev
)

102 
	}
}

104 
ölöe
 
	$drm_agp_acquúe
(
drm_devi˚
 *
dev
)

106  -
ENODEV
;

107 
	}
}

109 
ölöe
 
	$drm_agp_ªÀa£
(
drm_devi˚
 *
dev
)

111  -
ENODEV
;

112 
	}
}

114 
ölöe
 
	$drm_agp_íabÀ
(
drm_devi˚
 *
dev
,

115 
drm_agp_mode
 
mode
)

117  -
ENODEV
;

118 
	}
}

120 
ölöe
 
	$drm_agp_öfo
(
drm_devi˚
 *
dev
,

121 
drm_agp_öfo
 *
öfo
)

123  -
ENODEV
;

124 
	}
}

126 
ölöe
 
	$drm_agp_Æloc
(
drm_devi˚
 *
dev
,

127 
drm_agp_buf„r
 *
ªque°
)

129  -
ENODEV
;

130 
	}
}

132 
ölöe
 
	$drm_agp_‰ì
(
drm_devi˚
 *
dev
,

133 
drm_agp_buf„r
 *
ªque°
)

135  -
ENODEV
;

136 
	}
}

138 
ölöe
 
	$drm_agp_unböd
(
drm_devi˚
 *
dev
,

139 
drm_agp_bödög
 *
ªque°
)

141  -
ENODEV
;

142 
	}
}

144 
ölöe
 
	$drm_agp_böd
(
drm_devi˚
 *
dev
,

145 
drm_agp_bödög
 *
ªque°
)

147  -
ENODEV
;

148 
	}
}

	@src/common/linuxkpi/include/drm/drm_atomic.h

28 #i‚de‡
DRM_ATOMIC_H_


29 
	#DRM_ATOMIC_H_


	)

31 
	~<drm/drm_¸tc.h
>

69 
	sdrm_¸tc_commô
 {

75 
drm_¸tc
 *
	m¸tc
;

84 
kªf
 
	mªf
;

95 
com∂ëi⁄
 
	mÊù_d⁄e
;

110 
com∂ëi⁄
 
	mhw_d⁄e
;

121 
com∂ëi⁄
 
	m˛ónup_d⁄e
;

129 
li°_hód
 
	mcommô_íåy
;

136 
drm_≥ndög_vbœnk_evít
 *
	mevít
;

145 
boﬁ
 
	mab‹t_com∂ëi⁄
;

148 
	s__drm_∂™es_°©e
 {

149 
drm_∂™e
 *
	m±r
;

150 
drm_∂™e_°©e
 *
	m°©e
, *
	mﬁd_°©e
, *
	m√w_°©e
;

153 
	s__drm_¸tcs_°©e
 {

154 
drm_¸tc
 *
	m±r
;

155 
drm_¸tc_°©e
 *
	m°©e
, *
	mﬁd_°©e
, *
	m√w_°©e
;

156 
s32
 
__u£r
 *
	mout_„n˚_±r
;

157 
	mœ°_vbœnk_cou¡
;

160 
	s__drm_c⁄¬e˘‹s_°©e
 {

161 
drm_c⁄√˘‹
 *
	m±r
;

162 
drm_c⁄√˘‹_°©e
 *
	m°©e
, *
	mﬁd_°©e
, *
	m√w_°©e
;

165 
	gdrm_¥iv©e_obj
;

166 
	gdrm_¥iv©e_°©e
;

178 
	sdrm_¥iv©e_°©e_funcs
 {

190 
	mdrm_¥iv©e_°©e
 *(*
	m©omic_du∂iˇã_°©e
)(
drm_¥iv©e_obj
 *
	mobj
);

197 (*
	m©omic_de°roy_°©e
)(
drm_¥iv©e_obj
 *
	mobj
,

198 
drm_¥iv©e_°©e
 *
	m°©e
);

212 
	sdrm_¥iv©e_obj
 {

216 
drm_¥iv©e_°©e
 *
	m°©e
;

224 c⁄° 
drm_¥iv©e_°©e_funcs
 *
	mfuncs
;

235 
	sdrm_¥iv©e_°©e
 {

236 
drm_©omic_°©e
 *
	m°©e
;

239 
	s__drm_¥iv©e_objs_°©e
 {

240 
drm_¥iv©e_obj
 *
	m±r
;

241 
drm_¥iv©e_°©e
 *
	m°©e
, *
	mﬁd_°©e
, *
	m√w_°©e
;

263 
	sdrm_©omic_°©e
 {

264 
kªf
 
	mªf
;

266 
drm_devi˚
 *
	mdev
;

267 
boﬁ
 
	mÆlow_mode£t
 : 1;

268 
boﬁ
 
	mÀgacy_curs‹_upd©e
 : 1;

269 
boﬁ
 
	masync_upd©e
 : 1;

270 
__drm_∂™es_°©e
 *
	m∂™es
;

271 
__drm_¸tcs_°©e
 *
	m¸tcs
;

272 
	mnum_c⁄√˘‹
;

273 
__drm_c⁄¬e˘‹s_°©e
 *
	mc⁄√˘‹s
;

274 
	mnum_¥iv©e_objs
;

275 
__drm_¥iv©e_objs_°©e
 *
	m¥iv©e_objs
;

277 
drm_mode£t_acquúe_˘x
 *
	macquúe_˘x
;

289 
drm_¸tc_commô
 *
	mÁke_commô
;

297 
w‹k_°ru˘
 
	mcommô_w‹k
;

300 
__drm_¸tc_commô_‰ì
(
kªf
 *kref);

311 
ölöe
 
drm_¸tc_commô
 *
	$drm_¸tc_commô_gë
(
drm_¸tc_commô
 *
commô
)

313 
	`kªf_gë
(&
commô
->
ªf
);

314  
commô
;

315 
	}
}

324 
ölöe
 
	$drm_¸tc_commô_put
(
drm_¸tc_commô
 *
commô
)

326 
	`kªf_put
(&
commô
->
ªf
, 
__drm_¸tc_commô_‰ì
);

327 
	}
}

329 
drm_©omic_°©e
 * 
__mu°_check


330 
drm_©omic_°©e_Æloc
(
drm_devi˚
 *
dev
);

331 
drm_©omic_°©e_˛ór
(
drm_©omic_°©e
 *
°©e
);

339 
ölöe
 
drm_©omic_°©e
 *

340 
	$drm_©omic_°©e_gë
(
drm_©omic_°©e
 *
°©e
)

342 
	`kªf_gë
(&
°©e
->
ªf
);

343  
°©e
;

344 
	}
}

346 
__drm_©omic_°©e_‰ì
(
kªf
 *
ªf
);

355 
ölöe
 
	$drm_©omic_°©e_put
(
drm_©omic_°©e
 *
°©e
)

357 
	`kªf_put
(&
°©e
->
ªf
, 
__drm_©omic_°©e_‰ì
);

358 
	}
}

360 
__mu°_check


361 
drm_©omic_°©e_öô
(
drm_devi˚
 *
dev
, 
drm_©omic_°©e
 *
°©e
);

362 
drm_©omic_°©e_deÁu…_˛ór
(
drm_©omic_°©e
 *
°©e
);

363 
drm_©omic_°©e_deÁu…_ªÀa£
(
drm_©omic_°©e
 *
°©e
);

365 
drm_¸tc_°©e
 * 
__mu°_check


366 
drm_©omic_gë_¸tc_°©e
(
drm_©omic_°©e
 *
°©e
,

367 
drm_¸tc
 *
¸tc
);

368 
drm_©omic_¸tc_£t_¥›îty
(
drm_¸tc
 *
¸tc
,

369 
drm_¸tc_°©e
 *
°©e
, 
drm_¥›îty
 *
¥›îty
,

370 
uöt64_t
 
vÆ
);

371 
drm_∂™e_°©e
 * 
__mu°_check


372 
drm_©omic_gë_∂™e_°©e
(
drm_©omic_°©e
 *
°©e
,

373 
drm_∂™e
 *
∂™e
);

374 
drm_c⁄√˘‹_°©e
 * 
__mu°_check


375 
drm_©omic_gë_c⁄√˘‹_°©e
(
drm_©omic_°©e
 *
°©e
,

376 
drm_c⁄√˘‹
 *
c⁄√˘‹
);

378 
drm_©omic_¥iv©e_obj_öô
(
drm_¥iv©e_obj
 *
obj
,

379 
drm_¥iv©e_°©e
 *
°©e
,

380 c⁄° 
drm_¥iv©e_°©e_funcs
 *
funcs
);

381 
drm_©omic_¥iv©e_obj_föi
(
drm_¥iv©e_obj
 *
obj
);

383 
drm_¥iv©e_°©e
 * 
__mu°_check


384 
drm_©omic_gë_¥iv©e_obj_°©e
(
drm_©omic_°©e
 *
°©e
,

385 
drm_¥iv©e_obj
 *
obj
);

398 
ölöe
 
drm_¸tc_°©e
 *

399 
	$drm_©omic_gë_exi°ög_¸tc_°©e
(
drm_©omic_°©e
 *
°©e
,

400 
drm_¸tc
 *
¸tc
)

402  
°©e
->
¸tcs
[
	`drm_¸tc_ödex
(
¸tc
)].state;

403 
	}
}

413 
ölöe
 
drm_¸tc_°©e
 *

414 
	$drm_©omic_gë_ﬁd_¸tc_°©e
(
drm_©omic_°©e
 *
°©e
,

415 
drm_¸tc
 *
¸tc
)

417  
°©e
->
¸tcs
[
	`drm_¸tc_ödex
(
¸tc
)].
ﬁd_°©e
;

418 
	}
}

427 
ölöe
 
drm_¸tc_°©e
 *

428 
	$drm_©omic_gë_√w_¸tc_°©e
(
drm_©omic_°©e
 *
°©e
,

429 
drm_¸tc
 *
¸tc
)

431  
°©e
->
¸tcs
[
	`drm_¸tc_ödex
(
¸tc
)].
√w_°©e
;

432 
	}
}

445 
ölöe
 
drm_∂™e_°©e
 *

446 
	$drm_©omic_gë_exi°ög_∂™e_°©e
(
drm_©omic_°©e
 *
°©e
,

447 
drm_∂™e
 *
∂™e
)

449  
°©e
->
∂™es
[
	`drm_∂™e_ödex
(
∂™e
)].state;

450 
	}
}

460 
ölöe
 
drm_∂™e_°©e
 *

461 
	$drm_©omic_gë_ﬁd_∂™e_°©e
(
drm_©omic_°©e
 *
°©e
,

462 
drm_∂™e
 *
∂™e
)

464  
°©e
->
∂™es
[
	`drm_∂™e_ödex
(
∂™e
)].
ﬁd_°©e
;

465 
	}
}

475 
ölöe
 
drm_∂™e_°©e
 *

476 
	$drm_©omic_gë_√w_∂™e_°©e
(
drm_©omic_°©e
 *
°©e
,

477 
drm_∂™e
 *
∂™e
)

479  
°©e
->
∂™es
[
	`drm_∂™e_ödex
(
∂™e
)].
√w_°©e
;

480 
	}
}

493 
ölöe
 
drm_c⁄√˘‹_°©e
 *

494 
	$drm_©omic_gë_exi°ög_c⁄√˘‹_°©e
(
drm_©omic_°©e
 *
°©e
,

495 
drm_c⁄√˘‹
 *
c⁄√˘‹
)

497 
ödex
 = 
	`drm_c⁄√˘‹_ödex
(
c⁄√˘‹
);

499 i‡(
ödex
 >
°©e
->
num_c⁄√˘‹
)

500  
NULL
;

502  
°©e
->
c⁄√˘‹s
[
ödex
].state;

503 
	}
}

513 
ölöe
 
drm_c⁄√˘‹_°©e
 *

514 
	$drm_©omic_gë_ﬁd_c⁄√˘‹_°©e
(
drm_©omic_°©e
 *
°©e
,

515 
drm_c⁄√˘‹
 *
c⁄√˘‹
)

517 
ödex
 = 
	`drm_c⁄√˘‹_ödex
(
c⁄√˘‹
);

519 i‡(
ödex
 >
°©e
->
num_c⁄√˘‹
)

520  
NULL
;

522  
°©e
->
c⁄√˘‹s
[
ödex
].
ﬁd_°©e
;

523 
	}
}

533 
ölöe
 
drm_c⁄√˘‹_°©e
 *

534 
	$drm_©omic_gë_√w_c⁄√˘‹_°©e
(
drm_©omic_°©e
 *
°©e
,

535 
drm_c⁄√˘‹
 *
c⁄√˘‹
)

537 
ödex
 = 
	`drm_c⁄√˘‹_ödex
(
c⁄√˘‹
);

539 i‡(
ödex
 >
°©e
->
num_c⁄√˘‹
)

540  
NULL
;

542  
°©e
->
c⁄√˘‹s
[
ödex
].
√w_°©e
;

543 
	}
}

571 
ölöe
 c⁄° 
drm_∂™e_°©e
 *

572 
	$__drm_©omic_gë_cuºít_∂™e_°©e
(
drm_©omic_°©e
 *
°©e
,

573 
drm_∂™e
 *
∂™e
)

575 i‡(
°©e
->
∂™es
[
	`drm_∂™e_ödex
(
∂™e
)].state)

576  
°©e
->
∂™es
[
	`drm_∂™e_ödex
(
∂™e
)].state;

578  
∂™e
->
°©e
;

579 
	}
}

581 
__mu°_check


582 
drm_©omic_£t_mode_f‹_¸tc
(
drm_¸tc_°©e
 *
°©e
,

583 c⁄° 
drm_di•œy_mode
 *
mode
);

584 
__mu°_check


585 
drm_©omic_£t_mode_¥›_f‹_¸tc
(
drm_¸tc_°©e
 *
°©e
,

586 
drm_¥›îty_blob
 *
blob
);

587 
__mu°_check


588 
drm_©omic_£t_¸tc_f‹_∂™e
(
drm_∂™e_°©e
 *
∂™e_°©e
,

589 
drm_¸tc
 *
¸tc
);

590 
drm_©omic_£t_fb_f‹_∂™e
(
drm_∂™e_°©e
 *
∂™e_°©e
,

591 
drm_‰amebuf„r
 *
fb
);

592 
drm_©omic_£t_„n˚_f‹_∂™e
(
drm_∂™e_°©e
 *
∂™e_°©e
,

593 
dma_„n˚
 *
„n˚
);

594 
__mu°_check


595 
drm_©omic_£t_¸tc_f‹_c⁄√˘‹
(
drm_c⁄√˘‹_°©e
 *
c⁄n_°©e
,

596 
drm_¸tc
 *
¸tc
);

597 
__mu°_check


598 
drm_©omic_add_af„˘ed_c⁄√˘‹s
(
drm_©omic_°©e
 *
°©e
,

599 
drm_¸tc
 *
¸tc
);

600 
__mu°_check


601 
drm_©omic_add_af„˘ed_∂™es
(
drm_©omic_°©e
 *
°©e
,

602 
drm_¸tc
 *
¸tc
);

605 
drm_©omic_˛ón_ﬁd_fb
(
drm_devi˚
 *
dev
, 
∂™e_mask
, 
ªt
);

607 
__mu°_check
 
drm_©omic_check_⁄ly
(
drm_©omic_°©e
 *
°©e
);

608 
__mu°_check
 
drm_©omic_commô
(
drm_©omic_°©e
 *
°©e
);

609 
__mu°_check
 
drm_©omic_n⁄blockög_commô
(
drm_©omic_°©e
 *
°©e
);

611 
drm_°©e_dump
(
drm_devi˚
 *
dev
, 
drm_¥öãr
 *
p
);

627 
	#f‹_óch_ﬁd√w_c⁄√˘‹_ö_°©e
(
__°©e
, 
c⁄√˘‹
, 
ﬁd_c⁄√˘‹_°©e
, 
√w_c⁄√˘‹_°©e
, 
__i
) \

628 (
__i
) = 0; \

629 (
__i
Ë< (
__°©e
)->
num_c⁄√˘‹
; \

630 (
__i
)++) \

631 
	`f‹_óch_if
 ((
__°©e
)->
c⁄√˘‹s
[
__i
].
±r
 && \

632 ((
c⁄√˘‹
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
±r
, \

633 (
ﬁd_c⁄√˘‹_°©e
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
ﬁd_°©e
, \

634 (
√w_c⁄√˘‹_°©e
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
√w_°©e
, 1))

	)

648 
	#f‹_óch_ﬁd_c⁄√˘‹_ö_°©e
(
__°©e
, 
c⁄√˘‹
, 
ﬁd_c⁄√˘‹_°©e
, 
__i
) \

649 (
__i
) = 0; \

650 (
__i
Ë< (
__°©e
)->
num_c⁄√˘‹
; \

651 (
__i
)++) \

652 
	`f‹_óch_if
 ((
__°©e
)->
c⁄√˘‹s
[
__i
].
±r
 && \

653 ((
c⁄√˘‹
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
±r
, \

654 (
ﬁd_c⁄√˘‹_°©e
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
ﬁd_°©e
, 1))

	)

668 
	#f‹_óch_√w_c⁄√˘‹_ö_°©e
(
__°©e
, 
c⁄√˘‹
, 
√w_c⁄√˘‹_°©e
, 
__i
) \

669 (
__i
) = 0; \

670 (
__i
Ë< (
__°©e
)->
num_c⁄√˘‹
; \

671 (
__i
)++) \

672 
	`f‹_óch_if
 ((
__°©e
)->
c⁄√˘‹s
[
__i
].
±r
 && \

673 ((
c⁄√˘‹
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
±r
, \

674 (
√w_c⁄√˘‹_°©e
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
√w_°©e
, 1))

	)

688 
	#f‹_óch_ﬁd√w_¸tc_ö_°©e
(
__°©e
, 
¸tc
, 
ﬁd_¸tc_°©e
, 
√w_¸tc_°©e
, 
__i
) \

689 (
__i
) = 0; \

690 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_¸tc
; \

691 (
__i
)++) \

692 
	`f‹_óch_if
 ((
__°©e
)->
¸tcs
[
__i
].
±r
 && \

693 ((
¸tc
Ë(
__°©e
)->
¸tcs
[
__i
].
±r
, \

694 (
ﬁd_¸tc_°©e
Ë(
__°©e
)->
¸tcs
[
__i
].
ﬁd_°©e
, \

695 (
√w_¸tc_°©e
Ë(
__°©e
)->
¸tcs
[
__i
].
√w_°©e
, 1))

	)

708 
	#f‹_óch_ﬁd_¸tc_ö_°©e
(
__°©e
, 
¸tc
, 
ﬁd_¸tc_°©e
, 
__i
) \

709 (
__i
) = 0; \

710 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_¸tc
; \

711 (
__i
)++) \

712 
	`f‹_óch_if
 ((
__°©e
)->
¸tcs
[
__i
].
±r
 && \

713 ((
¸tc
Ë(
__°©e
)->
¸tcs
[
__i
].
±r
, \

714 (
ﬁd_¸tc_°©e
Ë(
__°©e
)->
¸tcs
[
__i
].
ﬁd_°©e
, 1))

	)

727 
	#f‹_óch_√w_¸tc_ö_°©e
(
__°©e
, 
¸tc
, 
√w_¸tc_°©e
, 
__i
) \

728 (
__i
) = 0; \

729 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_¸tc
; \

730 (
__i
)++) \

731 
	`f‹_óch_if
 ((
__°©e
)->
¸tcs
[
__i
].
±r
 && \

732 ((
¸tc
Ë(
__°©e
)->
¸tcs
[
__i
].
±r
, \

733 (
√w_¸tc_°©e
Ë(
__°©e
)->
¸tcs
[
__i
].
√w_°©e
, 1))

	)

747 
	#f‹_óch_ﬁd√w_∂™e_ö_°©e
(
__°©e
, 
∂™e
, 
ﬁd_∂™e_°©e
, 
√w_∂™e_°©e
, 
__i
) \

748 (
__i
) = 0; \

749 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_tŸÆ_∂™e
; \

750 (
__i
)++) \

751 
	`f‹_óch_if
 ((
__°©e
)->
∂™es
[
__i
].
±r
 && \

752 ((
∂™e
Ë(
__°©e
)->
∂™es
[
__i
].
±r
, \

753 (
ﬁd_∂™e_°©e
Ë(
__°©e
)->
∂™es
[
__i
].
ﬁd_°©e
,\

754 (
√w_∂™e_°©e
Ë(
__°©e
)->
∂™es
[
__i
].
√w_°©e
, 1))

	)

767 
	#f‹_óch_ﬁd_∂™e_ö_°©e
(
__°©e
, 
∂™e
, 
ﬁd_∂™e_°©e
, 
__i
) \

768 (
__i
) = 0; \

769 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_tŸÆ_∂™e
; \

770 (
__i
)++) \

771 
	`f‹_óch_if
 ((
__°©e
)->
∂™es
[
__i
].
±r
 && \

772 ((
∂™e
Ë(
__°©e
)->
∂™es
[
__i
].
±r
, \

773 (
ﬁd_∂™e_°©e
Ë(
__°©e
)->
∂™es
[
__i
].
ﬁd_°©e
, 1))

	)

785 
	#f‹_óch_√w_∂™e_ö_°©e
(
__°©e
, 
∂™e
, 
√w_∂™e_°©e
, 
__i
) \

786 (
__i
) = 0; \

787 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_tŸÆ_∂™e
; \

788 (
__i
)++) \

789 
	`f‹_óch_if
 ((
__°©e
)->
∂™es
[
__i
].
±r
 && \

790 ((
∂™e
Ë(
__°©e
)->
∂™es
[
__i
].
±r
, \

791 (
√w_∂™e_°©e
Ë(
__°©e
)->
∂™es
[
__i
].
√w_°©e
, 1))

	)

805 
	#f‹_óch_ﬁd√w_¥iv©e_obj_ö_°©e
(
__°©e
, 
obj
, 
ﬁd_obj_°©e
, 
√w_obj_°©e
, 
__i
) \

806 (
__i
) = 0; \

807 (
__i
Ë< (
__°©e
)->
num_¥iv©e_objs
 && \

808 ((
obj
Ë(
__°©e
)->
¥iv©e_objs
[
__i
].
±r
, \

809 (
ﬁd_obj_°©e
Ë(
__°©e
)->
¥iv©e_objs
[
__i
].
ﬁd_°©e
, \

810 (
√w_obj_°©e
Ë(
__°©e
)->
¥iv©e_objs
[
__i
].
√w_°©e
, 1); \

811 (
__i
)++)

	)

824 
	#f‹_óch_ﬁd_¥iv©e_obj_ö_°©e
(
__°©e
, 
obj
, 
ﬁd_obj_°©e
, 
__i
) \

825 (
__i
) = 0; \

826 (
__i
Ë< (
__°©e
)->
num_¥iv©e_objs
 && \

827 ((
obj
Ë(
__°©e
)->
¥iv©e_objs
[
__i
].
±r
, \

828 (
ﬁd_obj_°©e
Ë(
__°©e
)->
¥iv©e_objs
[
__i
].
ﬁd_°©e
, 1); \

829 (
__i
)++)

	)

842 
	#f‹_óch_√w_¥iv©e_obj_ö_°©e
(
__°©e
, 
obj
, 
√w_obj_°©e
, 
__i
) \

843 (
__i
) = 0; \

844 (
__i
Ë< (
__°©e
)->
num_¥iv©e_objs
 && \

845 ((
obj
Ë(
__°©e
)->
¥iv©e_objs
[
__i
].
±r
, \

846 (
√w_obj_°©e
Ë(
__°©e
)->
¥iv©e_objs
[
__i
].
√w_°©e
, 1); \

847 (
__i
)++)

	)

868 
ölöe
 
boﬁ


869 
	$drm_©omic_¸tc_√eds_mode£t
(c⁄° 
drm_¸tc_°©e
 *
°©e
)

871  
°©e
->
mode_ch™ged
 || sèã->
a˘ive_ch™ged
 ||

872 
°©e
->
c⁄√˘‹s_ch™ged
;

873 
	}
}

	@src/common/linuxkpi/include/drm/drm_atomic_helper.h

28 #i‚de‡
DRM_ATOMIC_HELPER_H_


29 
	#DRM_ATOMIC_HELPER_H_


	)

31 
	~<drm/drm_¸tc.h
>

32 
	~<drm/drm_mode£t_hñ≥r_vèbÀs.h
>

33 
	~<drm/drm_mode£t_hñ≥r.h
>

35 
	gdrm_©omic_°©e
;

36 
	gdrm_¥iv©e_obj
;

37 
	gdrm_¥iv©e_°©e
;

39 
drm_©omic_hñ≥r_check_mode£t
(
drm_devi˚
 *
dev
,

40 
drm_©omic_°©e
 *
°©e
);

41 
drm_©omic_hñ≥r_check_∂™e_°©e
(
drm_∂™e_°©e
 *
∂™e_°©e
,

42 c⁄° 
drm_¸tc_°©e
 *
¸tc_°©e
,

43 c⁄° 
drm_ª˘
 *
˛ù
,

44 
mö_sˇÀ
,

45 
max_sˇÀ
,

46 
boﬁ
 
ˇn_posôi⁄
,

47 
boﬁ
 
ˇn_upd©e_dißbÀd
);

48 
drm_©omic_hñ≥r_check_∂™es
(
drm_devi˚
 *
dev
,

49 
drm_©omic_°©e
 *
°©e
);

50 
drm_©omic_hñ≥r_check
(
drm_devi˚
 *
dev
,

51 
drm_©omic_°©e
 *
°©e
);

52 
drm_©omic_hñ≥r_commô_èû
(
drm_©omic_°©e
 *
°©e
);

53 
drm_©omic_hñ≥r_commô_èû_Ωm
(
drm_©omic_°©e
 *
°©e
);

54 
drm_©omic_hñ≥r_commô
(
drm_devi˚
 *
dev
,

55 
drm_©omic_°©e
 *
°©e
,

56 
boﬁ
 
n⁄block
);

57 
drm_©omic_hñ≥r_async_check
(
drm_devi˚
 *
dev
,

58 
drm_©omic_°©e
 *
°©e
);

59 
drm_©omic_hñ≥r_async_commô
(
drm_devi˚
 *
dev
,

60 
drm_©omic_°©e
 *
°©e
);

62 
drm_©omic_hñ≥r_waô_f‹_„n˚s
(
drm_devi˚
 *
dev
,

63 
drm_©omic_°©e
 *
°©e
,

64 
boﬁ
 
¥e_sw≠
);

66 
drm_©omic_hñ≥r_waô_f‹_vbœnks
(
drm_devi˚
 *
dev
,

67 
drm_©omic_°©e
 *
ﬁd_°©e
);

69 
drm_©omic_hñ≥r_waô_f‹_Êù_d⁄e
(
drm_devi˚
 *
dev
,

70 
drm_©omic_°©e
 *
ﬁd_°©e
);

73 
drm_©omic_hñ≥r_upd©e_Àgacy_mode£t_°©e
(
drm_devi˚
 *
dev
,

74 
drm_©omic_°©e
 *
ﬁd_°©e
);

76 
drm_©omic_hñ≥r_commô_mode£t_dißbÀs
(
drm_devi˚
 *
dev
,

77 
drm_©omic_°©e
 *
°©e
);

78 
drm_©omic_hñ≥r_commô_mode£t_íabÀs
(
drm_devi˚
 *
dev
,

79 
drm_©omic_°©e
 *
ﬁd_°©e
);

81 
drm_©omic_hñ≥r_¥ï¨e_∂™es
(
drm_devi˚
 *
dev
,

82 
drm_©omic_°©e
 *
°©e
);

84 
	#DRM_PLANE_COMMIT_ACTIVE_ONLY
 
	`BIT
(0)

	)

85 
	#DRM_PLANE_COMMIT_NO_DISABLE_AFTER_MODESET
 
	`BIT
(1)

	)

87 
drm_©omic_hñ≥r_commô_∂™es
(
drm_devi˚
 *
dev
,

88 
drm_©omic_°©e
 *
°©e
,

89 
uöt32_t
 
Êags
);

90 
drm_©omic_hñ≥r_˛ónup_∂™es
(
drm_devi˚
 *
dev
,

91 
drm_©omic_°©e
 *
ﬁd_°©e
);

92 
drm_©omic_hñ≥r_commô_∂™es_⁄_¸tc
(
drm_¸tc_°©e
 *
ﬁd_¸tc_°©e
);

94 
drm_©omic_hñ≥r_dißbÀ_∂™es_⁄_¸tc
(
drm_¸tc_°©e
 *
ﬁd_¸tc_°©e
,

95 
boﬁ
 
©omic
);

97 
__mu°_check
 
drm_©omic_hñ≥r_sw≠_°©e
(
drm_©omic_°©e
 *
°©e
,

98 
boﬁ
 
°Æl
);

101 
drm_©omic_hñ≥r_£tup_commô
(
drm_©omic_°©e
 *
°©e
,

102 
boﬁ
 
n⁄block
);

103 
drm_©omic_hñ≥r_waô_f‹_dïídícõs
(
drm_©omic_°©e
 *
°©e
);

104 
drm_©omic_hñ≥r_commô_hw_d⁄e
(
drm_©omic_°©e
 *
°©e
);

105 
drm_©omic_hñ≥r_commô_˛ónup_d⁄e
(
drm_©omic_°©e
 *
°©e
);

108 
drm_©omic_hñ≥r_upd©e_∂™e
(
drm_∂™e
 *
∂™e
,

109 
drm_¸tc
 *
¸tc
,

110 
drm_‰amebuf„r
 *
fb
,

111 
¸tc_x
, 
¸tc_y
,

112 
¸tc_w
, 
¸tc_h
,

113 
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

114 
uöt32_t
 
§c_w
, uöt32_à
§c_h
,

115 
drm_mode£t_acquúe_˘x
 *
˘x
);

116 
drm_©omic_hñ≥r_dißbÀ_∂™e
(
drm_∂™e
 *
∂™e
,

117 
drm_mode£t_acquúe_˘x
 *
˘x
);

118 
__drm_©omic_hñ≥r_dißbÀ_∂™e
(
drm_∂™e
 *
∂™e
,

119 
drm_∂™e_°©e
 *
∂™e_°©e
);

120 
drm_©omic_hñ≥r_£t_c⁄fig
(
drm_mode_£t
 *
£t
,

121 
drm_mode£t_acquúe_˘x
 *
˘x
);

122 
__drm_©omic_hñ≥r_£t_c⁄fig
(
drm_mode_£t
 *
£t
,

123 
drm_©omic_°©e
 *
°©e
);

125 
drm_©omic_hñ≥r_dißbÀ_Æl
(
drm_devi˚
 *
dev
,

126 
drm_mode£t_acquúe_˘x
 *
˘x
);

127 
drm_©omic_hñ≥r_shutdown
(
drm_devi˚
 *
dev
);

128 
drm_©omic_°©e
 *
drm_©omic_hñ≥r_su•íd
(
drm_devi˚
 *
dev
);

129 
drm_©omic_hñ≥r_commô_du∂iˇãd_°©e
(
drm_©omic_°©e
 *
°©e
,

130 
drm_mode£t_acquúe_˘x
 *
˘x
);

131 
drm_©omic_hñ≥r_ªsume
(
drm_devi˚
 *
dev
,

132 
drm_©omic_°©e
 *
°©e
);

134 
drm_©omic_hñ≥r_∑ge_Êù
(
drm_¸tc
 *
¸tc
,

135 
drm_‰amebuf„r
 *
fb
,

136 
drm_≥ndög_vbœnk_evít
 *
evít
,

137 
uöt32_t
 
Êags
,

138 
drm_mode£t_acquúe_˘x
 *
˘x
);

139 
drm_©omic_hñ≥r_∑ge_Êù_èrgë
(

140 
drm_¸tc
 *
¸tc
,

141 
drm_‰amebuf„r
 *
fb
,

142 
drm_≥ndög_vbœnk_evít
 *
evít
,

143 
uöt32_t
 
Êags
,

144 
uöt32_t
 
èrgë
,

145 
drm_mode£t_acquúe_˘x
 *
˘x
);

146 
drm_ícodî
 *

147 
drm_©omic_hñ≥r_be°_ícodî
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

150 
drm_©omic_hñ≥r_¸tc_ª£t
(
drm_¸tc
 *
¸tc
);

151 
__drm_©omic_hñ≥r_¸tc_du∂iˇã_°©e
(
drm_¸tc
 *
¸tc
,

152 
drm_¸tc_°©e
 *
°©e
);

153 
drm_¸tc_°©e
 *

154 
drm_©omic_hñ≥r_¸tc_du∂iˇã_°©e
(
drm_¸tc
 *
¸tc
);

155 
__drm_©omic_hñ≥r_¸tc_de°roy_°©e
(
drm_¸tc_°©e
 *
°©e
);

156 
drm_©omic_hñ≥r_¸tc_de°roy_°©e
(
drm_¸tc
 *
¸tc
,

157 
drm_¸tc_°©e
 *
°©e
);

159 
drm_©omic_hñ≥r_∂™e_ª£t
(
drm_∂™e
 *
∂™e
);

160 
__drm_©omic_hñ≥r_∂™e_du∂iˇã_°©e
(
drm_∂™e
 *
∂™e
,

161 
drm_∂™e_°©e
 *
°©e
);

162 
drm_∂™e_°©e
 *

163 
drm_©omic_hñ≥r_∂™e_du∂iˇã_°©e
(
drm_∂™e
 *
∂™e
);

164 
__drm_©omic_hñ≥r_∂™e_de°roy_°©e
(
drm_∂™e_°©e
 *
°©e
);

165 
drm_©omic_hñ≥r_∂™e_de°roy_°©e
(
drm_∂™e
 *
∂™e
,

166 
drm_∂™e_°©e
 *
°©e
);

168 
__drm_©omic_hñ≥r_c⁄√˘‹_ª£t
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

169 
drm_c⁄√˘‹_°©e
 *
c⁄n_°©e
);

170 
drm_©omic_hñ≥r_c⁄√˘‹_ª£t
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

172 
__drm_©omic_hñ≥r_c⁄√˘‹_du∂iˇã_°©e
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

173 
drm_c⁄√˘‹_°©e
 *
°©e
);

174 
drm_c⁄√˘‹_°©e
 *

175 
drm_©omic_hñ≥r_c⁄√˘‹_du∂iˇã_°©e
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

176 
drm_©omic_°©e
 *

177 
drm_©omic_hñ≥r_du∂iˇã_°©e
(
drm_devi˚
 *
dev
,

178 
drm_mode£t_acquúe_˘x
 *
˘x
);

180 
__drm_©omic_hñ≥r_c⁄√˘‹_de°roy_°©e
(
drm_c⁄√˘‹_°©e
 *
°©e
);

181 
drm_©omic_hñ≥r_c⁄√˘‹_de°roy_°©e
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

182 
drm_c⁄√˘‹_°©e
 *
°©e
);

183 
drm_©omic_hñ≥r_Àgacy_gamma_£t
(
drm_¸tc
 *
¸tc
,

184 
u16
 *
ªd
, u16 *
gªí
, u16 *
blue
,

185 
uöt32_t
 
size
,

186 
drm_mode£t_acquúe_˘x
 *
˘x
);

187 
__drm_©omic_hñ≥r_¥iv©e_obj_du∂iˇã_°©e
(
drm_¥iv©e_obj
 *
obj
,

188 
drm_¥iv©e_°©e
 *
°©e
);

201 
	#drm_©omic_¸tc_f‹_óch_∂™e
(
∂™e
, 
¸tc
) \

202 
	`drm_f‹_óch_∂™e_mask
(
∂™e
, (
¸tc
)->
dev
, (¸tc)->
°©e
->
∂™e_mask
)

	)

214 
	#drm_©omic_¸tc_°©e_f‹_óch_∂™e
(
∂™e
, 
¸tc_°©e
) \

215 
	`drm_f‹_óch_∂™e_mask
(
∂™e
, (
¸tc_°©e
)->
°©e
->
dev
, (¸tc_°©e)->
∂™e_mask
)

	)

232 
	#drm_©omic_¸tc_°©e_f‹_óch_∂™e_°©e
(
∂™e
, 
∂™e_°©e
, 
¸tc_°©e
) \

233 
	`drm_f‹_óch_∂™e_mask
(
∂™e
, (
¸tc_°©e
)->
°©e
->
dev
, (¸tc_°©e)->
∂™e_mask
) \

234 
	`f‹_óch_if
 ((
∂™e_°©e
 = \

235 
	`__drm_©omic_gë_cuºít_∂™e_°©e
((
¸tc_°©e
)->
°©e
, \

236 
∂™e
)))

	)

250 
ölöe
 
boﬁ


251 
	$drm_©omic_∂™e_dißblög
(
drm_∂™e_°©e
 *
ﬁd_∂™e_°©e
,

252 
drm_∂™e_°©e
 *
√w_∂™e_°©e
)

259 
	`WARN_ON
((
√w_∂™e_°©e
->
¸tc
 =
NULL
 &&Çew_∂™e_°©e->
fb
 != NULL) ||

260 (
√w_∂™e_°©e
->
¸tc
 !
NULL
 &&Çew_∂™e_°©e->
fb
 == NULL));

262  
ﬁd_∂™e_°©e
->
¸tc
 && !
√w_∂™e_°©e
->crtc;

263 
	}
}

	@src/common/linuxkpi/include/drm/drm_auth.h

28 #i‚de‡
_DRM_AUTH_H_


29 
	#_DRM_AUTH_H_


	)

37 
	sdrm_lock_d©a
 {

38 
drm_hw_lock
 *
	mhw_lock
;

39 
drm_fûe
 *
	mfûe_¥iv
;

40 
waô_queue_hód_t
 
	mlock_queue
;

41 
	mlock_time
;

42 
•ölock_t
 
	m•ölock
;

43 
uöt32_t
 
	mkî√l_waôîs
;

44 
uöt32_t
 
	mu£r_waôîs
;

45 
	midÀ_has_lock
;

65 
	sdrm_ma°î
 {

66 
kªf
 
	mªfcou¡
;

67 
drm_devi˚
 *
	mdev
;

72 *
	munique
;

77 
	munique_Àn
;

82 
idr
 
	mmagic_m≠
;

83 
drm_lock_d©a
 
	mlock
;

84 *
	mdrivî_¥iv
;

92 
drm_ma°î
 *
	mÀss‹
;

93 
	mÀs£e_id
;

94 
li°_hód
 
	mÀs£e_li°
;

95 
li°_hód
 
	mÀs£es
;

96 
idr
 
	mÀa£s
;

97 
idr
 
	mÀs£e_idr
;

100 
drm_ma°î
 *
drm_ma°î_gë
(drm_ma°î *
ma°î
);

101 
drm_ma°î_put
(
drm_ma°î
 **
ma°î
);

102 
boﬁ
 
drm_is_cuºít_ma°î
(
drm_fûe
 *
Âriv
);

104 
drm_ma°î
 *
drm_ma°î_¸óã
(
drm_devi˚
 *
dev
);

	@src/common/linuxkpi/include/drm/drm_blend.h

23 #i‚de‡
__DRM_BLEND_H__


24 
	#__DRM_BLEND_H__


	)

26 
	~<löux/li°.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<drm/drm_mode.h
>

30 
	gdrm_devi˚
;

31 
	gdrm_©omic_°©e
;

32 
	gdrm_∂™e
;

34 
ölöe
 
boﬁ
 
	$drm_rŸ©i⁄_90_‹_270
(
rŸ©i⁄
)

36  
rŸ©i⁄
 & (
DRM_MODE_ROTATE_90
 | 
DRM_MODE_ROTATE_270
);

37 
	}
}

39 
drm_∂™e_¸óã_rŸ©i⁄_¥›îty
(
drm_∂™e
 *
∂™e
,

40 
rŸ©i⁄
,

41 
suµ‹ãd_rŸ©i⁄s
);

42 
drm_rŸ©i⁄_sim∂ify
(
rŸ©i⁄
,

43 
suµ‹ãd_rŸ©i⁄s
);

45 
drm_∂™e_¸óã_zpos_¥›îty
(
drm_∂™e
 *
∂™e
,

46 
zpos
,

47 
mö
, 
max
);

48 
drm_∂™e_¸óã_zpos_immuèbÀ_¥›îty
(
drm_∂™e
 *
∂™e
,

49 
zpos
);

50 
drm_©omic_n‹mÆize_zpos
(
drm_devi˚
 *
dev
,

51 
drm_©omic_°©e
 *
°©e
);

	@src/common/linuxkpi/include/drm/drm_bridge.h

23 #i‚de‡
__DRM_BRIDGE_H__


24 
	#__DRM_BRIDGE_H__


	)

26 
	~<löux/li°.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<drm/drm_mode_obje˘.h
>

29 
	~<drm/drm_modes.h
>

31 
	gdrm_bridge
;

32 
	gdrm_∑√l
;

37 
	sdrm_bridge_funcs
 {

50 (*
	m©èch
)(
drm_bridge
 *
	mbridge
);

60 (*
	mdëach
)(
drm_bridge
 *
	mbridge
);

93 
drm_mode_°©us
 (*
mode_vÆid
)(
drm_bridge
 *
	m¸tc
,

94 c⁄° 
drm_di•œy_mode
 *
	mmode
);

131 
boﬁ
 (*
mode_fixup
)(
drm_bridge
 *
	mbridge
,

132 c⁄° 
drm_di•œy_mode
 *
	mmode
,

133 
drm_di•œy_mode
 *
	madju°ed_mode
);

150 (*
	mdißbÀ
)(
drm_bridge
 *
	mbridge
);

169 (*
	mpo°_dißbÀ
)(
drm_bridge
 *
	mbridge
);

181 (*
	mmode_£t
)(
drm_bridge
 *
	mbridge
,

182 
drm_di•œy_mode
 *
	mmode
,

183 
drm_di•œy_mode
 *
	madju°ed_mode
);

202 (*
	m¥e_íabÀ
)(
drm_bridge
 *
	mbridge
);

222 (*
	míabÀ
)(
drm_bridge
 *
	mbridge
);

235 
	sdrm_bridge
 {

236 
drm_devi˚
 *
	mdev
;

237 
drm_ícodî
 *
	mícodî
;

238 
drm_bridge
 *
	m√xt
;

239 #ifde‡
CONFIG_OF


240 
devi˚_node
 *
	mof_node
;

242 
li°_hód
 
	mli°
;

244 c⁄° 
drm_bridge_funcs
 *
	mfuncs
;

245 *
	mdrivî_¥iv©e
;

248 
drm_bridge_add
(
drm_bridge
 *
bridge
);

249 
drm_bridge_ªmove
(
drm_bridge
 *
bridge
);

250 #ifde‡
__löux__


251 
drm_bridge
 *
of_drm_föd_bridge
(
devi˚_node
 *
≈
);

253 
drm_bridge_©èch
(
drm_ícodî
 *
ícodî
, 
drm_bridge
 *
bridge
,

254 
drm_bridge
 *
¥evious
);

256 
boﬁ
 
drm_bridge_mode_fixup
(
drm_bridge
 *
bridge
,

257 c⁄° 
drm_di•œy_mode
 *
mode
,

258 
drm_di•œy_mode
 *
adju°ed_mode
);

259 
drm_mode_°©us
 
drm_bridge_mode_vÆid
(
drm_bridge
 *
bridge
,

260 c⁄° 
drm_di•œy_mode
 *
mode
);

261 
drm_bridge_dißbÀ
(
drm_bridge
 *
bridge
);

262 
drm_bridge_po°_dißbÀ
(
drm_bridge
 *
bridge
);

263 
drm_bridge_mode_£t
(
drm_bridge
 *
bridge
,

264 
drm_di•œy_mode
 *
mode
,

265 
drm_di•œy_mode
 *
adju°ed_mode
);

266 
drm_bridge_¥e_íabÀ
(
drm_bridge
 *
bridge
);

267 
drm_bridge_íabÀ
(
drm_bridge
 *
bridge
);

269 #ifde‡
CONFIG_DRM_PANEL_BRIDGE


270 
drm_bridge
 *
drm_∑√l_bridge_add
(
drm_∑√l
 *
∑√l
,

271 
u32
 
c⁄√˘‹_ty≥
);

272 
drm_∑√l_bridge_ªmove
(
drm_bridge
 *
bridge
);

273 
drm_bridge
 *
devm_drm_∑√l_bridge_add
(
devi˚
 *
dev
,

274 
drm_∑√l
 *
∑√l
,

275 
u32
 
c⁄√˘‹_ty≥
);

	@src/common/linuxkpi/include/drm/drm_cache.h

33 #i‚de‡
_DRM_CACHE_H_


34 
	#_DRM_CACHE_H_


	)

36 
	~<löux/sˇâîli°.h
>

38 
drm_˛Êush_∑ges
(
∑ge
 *
∑ges
[], 
num_∑ges
);

39 
drm_˛Êush_sg
(
sg_èbÀ
 *
°
);

40 
drm_˛Êush_vút_ønge
(*
addr
, 
Àngth
);

42 
ölöe
 
boﬁ
 
	$drm_¨ch_ˇn_wc_mem‹y
()

44 #i‡
	`deföed
(
CONFIG_PPC
Ë&& !deföed(
CONFIG_NOT_COHERENT_CACHE
)

45  
Ál£
;

46 #ñi‡
	`deföed
(
CONFIG_MIPS
Ë&& deföed(
CONFIG_CPU_LOONGSON3
)

47  
Ál£
;

49  
åue
;

51 
	}
}

	@src/common/linuxkpi/include/drm/drm_color_mgmt.h

23 #i‚de‡
__DRM_COLOR_MGMT_H__


24 
	#__DRM_COLOR_MGMT_H__


	)

26 
	~<löux/˘y≥.h
>

28 
	gdrm_¸tc
;

30 
uöt32_t
 
drm_cﬁ‹_lut_exåa˘
(uöt32_à
u£r_öput
, uöt32_à
bô_¥ecisi⁄
);

32 
drm_¸tc_íabÀ_cﬁ‹_mgmt
(
drm_¸tc
 *
¸tc
,

33 
uöt
 
degamma_lut_size
,

34 
boﬁ
 
has_˘m
,

35 
uöt
 
gamma_lut_size
);

37 
drm_mode_¸tc_£t_gamma_size
(
drm_¸tc
 *
¸tc
,

38 
gamma_size
);

	@src/common/linuxkpi/include/drm/drm_connector.h

23 #i‚de‡
__DRM_CONNECTOR_H__


24 
	#__DRM_CONNECTOR_H__


	)

26 
	~<löux/li°.h
>

27 
	~<löux/Œi°.h
>

28 
	~<löux/˘y≥.h
>

29 
	~<löux/hdmi.h
>

30 
	~<drm/drm_mode_obje˘.h
>

32 
	~<u≠i/drm/drm_mode.h
>

34 
	gdrm_c⁄√˘‹_hñ≥r_funcs
;

35 
	gdrm_mode£t_acquúe_˘x
;

36 
	gdrm_devi˚
;

37 
	gdrm_¸tc
;

38 
	gdrm_ícodî
;

39 
	gdrm_¥›îty
;

40 
	gdrm_¥›îty_blob
;

41 
	gdrm_¥öãr
;

42 
	gedid
;

44 
	edrm_c⁄√˘‹_f‹˚
 {

45 
	mDRM_FORCE_UNSPECIFIED
,

46 
	mDRM_FORCE_OFF
,

47 
	mDRM_FORCE_ON
,

48 
	mDRM_FORCE_ON_DIGITAL
,

57 
	edrm_c⁄√˘‹_°©us
 {

62 
	mc⁄√˘‹_°©us_c⁄√˘ed
 = 1,

70 
	mc⁄√˘‹_°©us_disc⁄√˘ed
 = 2,

81 
	mc⁄√˘‹_°©us_unknown
 = 3,

84 
	esubpixñ_‹dî
 {

85 
	mSubPixñUnknown
 = 0,

86 
	mSubPixñH‹iz⁄èlRGB
,

87 
	mSubPixñH‹iz⁄èlBGR
,

88 
	mSubPixñVîtiˇlRGB
,

89 
	mSubPixñVîtiˇlBGR
,

90 
	mSubPixñN⁄e
,

97 
	sdrm_s¸amblög
 {

101 
boﬁ
 
	msuµ‹ãd
;

105 
boﬁ
 
	mlow_øãs
;

114 
	sdrm_scdc
 {

118 
boﬁ
 
	msuµ‹ãd
;

122 
boﬁ
 
	mªad_ªque°
;

126 
drm_s¸amblög
 
	ms¸amblög
;

136 
	sdrm_hdmi_öfo
 {

138 
drm_scdc
 
	mscdc
;

146 
	my420_vdb_modes
[
BITS_TO_LONGS
(128)];

154 
	my420_cmdb_modes
[
BITS_TO_LONGS
(128)];

157 
u64
 
	my420_cmdb_m≠
;

160 
u8
 
	my420_dc_modes
;

174 
	edrm_lök_°©us
 {

175 
	mDRM_LINK_STATUS_GOOD
 = 
DRM_MODE_LINK_STATUS_GOOD
,

176 
	mDRM_LINK_STATUS_BAD
 = 
DRM_MODE_LINK_STATUS_BAD
,

200 
	edrm_∑√l_‹õ¡©i⁄
 {

201 
	mDRM_MODE_PANEL_ORIENTATION_UNKNOWN
 = -1,

202 
	mDRM_MODE_PANEL_ORIENTATION_NORMAL
 = 0,

203 
	mDRM_MODE_PANEL_ORIENTATION_BOTTOM_UP
,

204 
	mDRM_MODE_PANEL_ORIENTATION_LEFT_UP
,

205 
	mDRM_MODE_PANEL_ORIENTATION_RIGHT_UP
,

219 
	sdrm_di•œy_öfo
 {

223 
	m«me
[
DRM_DISPLAY_INFO_LEN
];

228 
	mwidth_mm
;

232 
	mheight_mm
;

239 
	mpixñ_˛ock
;

243 
	mbpc
;

248 
subpixñ_‹dî
 
	msubpixñ_‹dî
;

250 
	#DRM_COLOR_FORMAT_RGB444
 (1<<0)

	)

251 
	#DRM_COLOR_FORMAT_YCRCB444
 (1<<1)

	)

252 
	#DRM_COLOR_FORMAT_YCRCB422
 (1<<2)

	)

253 
	#DRM_COLOR_FORMAT_YCRCB420
 (1<<3)

	)

262 
	m∑√l_‹õ¡©i⁄
;

270 
u32
 
	mcﬁ‹_f‹m©s
;

277 c⁄° 
u32
 *
	mbus_f‹m©s
;

281 
	mnum_bus_f‹m©s
;

283 
	#DRM_BUS_FLAG_DE_LOW
 (1<<0)

	)

284 
	#DRM_BUS_FLAG_DE_HIGH
 (1<<1)

	)

286 
	#DRM_BUS_FLAG_PIXDATA_POSEDGE
 (1<<2)

	)

288 
	#DRM_BUS_FLAG_PIXDATA_NEGEDGE
 (1<<3)

	)

290 
	#DRM_BUS_FLAG_DATA_MSB_TO_LSB
 (1<<4)

	)

292 
	#DRM_BUS_FLAG_DATA_LSB_TO_MSB
 (1<<5)

	)

298 
u32
 
	mbus_Êags
;

304 
	mmax_tmds_˛ock
;

309 
boﬁ
 
	mdvi_duÆ
;

314 
boﬁ
 
	mhas_hdmi_öfo‰ame
;

320 
u8
 
	medid_hdmi_dc_modes
;

325 
u8
 
	m˚a_ªv
;

330 
drm_hdmi_öfo
 
	mhdmi
;

335 
boﬁ
 
	mn⁄_deskt›
;

338 
drm_di•œy_öfo_£t_bus_f‹m©s
(
drm_di•œy_öfo
 *
öfo
,

339 c⁄° 
u32
 *
f‹m©s
,

340 
num_f‹m©s
);

354 
	sdrm_tv_c⁄√˘‹_°©e
 {

355 
drm_mode_subc⁄√˘‹
 
	msubc⁄√˘‹
;

357 
	mÀ·
;

358 
	mright
;

359 
	mt›
;

360 
	mbŸtom
;

361 } 
	mm¨gös
;

362 
	mmode
;

363 
	mbrighäess
;

364 
	mc⁄åa°
;

365 
	mÊickî_ªdu˘i⁄
;

366 
	movîsˇn
;

367 
	mßtuøti⁄
;

368 
	mhue
;

378 
	sdrm_c⁄√˘‹_°©e
 {

379 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
;

387 
drm_¸tc
 *
	m¸tc
;

389 
drm_ícodî
 *
	mbe°_ícodî
;

395 
drm_lök_°©us
 
	mlök_°©us
;

397 
drm_©omic_°©e
 *
	m°©e
;

404 
drm_¸tc_commô
 *
	mcommô
;

406 
drm_tv_c⁄√˘‹_°©e
 
	mtv
;

415 
hdmi_pi˘uª_a•e˘
 
	mpi˘uª_a•e˘_øtio
;

421 
	msˇlög_mode
;

431 
	sdrm_c⁄√˘‹_funcs
 {

448 (*
	mdpms
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
, 
	mmode
);

460 (*
	mª£t
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

488 
drm_c⁄√˘‹_°©us
 (*
dëe˘
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

489 
boﬁ
 
	mf‹˚
);

505 (*
	mf‹˚
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

531 (*
	mfûl_modes
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
, 
uöt32_t
 
	mmax_width
, uöt32_à
	mmax_height
);

547 (*
	m£t_¥›îty
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
, 
drm_¥›îty
 *
	m¥›îty
,

548 
uöt64_t
 
	mvÆ
);

566 (*
	mœã_ªgi°î
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

579 (*
	móæy_uƒegi°î
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

589 (*
	mde°roy
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

620 
	mdrm_c⁄√˘‹_°©e
 *(*
	m©omic_du∂iˇã_°©e
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

628 (*
	m©omic_de°roy_°©e
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

629 
drm_c⁄√˘‹_°©e
 *
	m°©e
);

673 (*
	m©omic_£t_¥›îty
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

674 
drm_c⁄√˘‹_°©e
 *
	m°©e
,

675 
drm_¥›îty
 *
	m¥›îty
,

676 
uöt64_t
 
	mvÆ
);

696 (*
	m©omic_gë_¥›îty
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

697 c⁄° 
drm_c⁄√˘‹_°©e
 *
	m°©e
,

698 
drm_¥›îty
 *
	m¥›îty
,

699 
uöt64_t
 *
	mvÆ
);

710 (*
	m©omic_¥öt_°©e
)(
drm_¥öãr
 *
	mp
,

711 c⁄° 
drm_c⁄√˘‹_°©e
 *
	m°©e
);

715 
	sdrm_cmdlöe_mode
 {

716 
boﬁ
 
	m•ecifõd
;

717 
boﬁ
 
	mª‰esh_•ecifõd
;

718 
boﬁ
 
	mbµ_•ecifõd
;

719 
	mxªs
, 
	myªs
;

720 
	mbµ
;

721 
	mª‰esh
;

722 
boﬁ
 
	mrb
;

723 
boﬁ
 
	möãæa˚
;

724 
boﬁ
 
	mcvt
;

725 
boﬁ
 
	mm¨gös
;

726 
drm_c⁄√˘‹_f‹˚
 
	mf‹˚
;

775 
	sdrm_c⁄√˘‹
 {

776 
drm_devi˚
 *
	mdev
;

777 
devi˚
 *
	mkdev
;

778 
devi˚_©åibuã
 *
	m©å
;

779 
li°_hód
 
	mhód
;

781 
drm_mode_obje˘
 
	mba£
;

783 *
	m«me
;

790 
muãx
 
	mmuãx
;

798 
	mödex
;

800 
	mc⁄√˘‹_ty≥
;

801 
	mc⁄√˘‹_ty≥_id
;

802 
boﬁ
 
	möãæa˚_Ælowed
;

803 
boﬁ
 
	mdoubÀsˇn_Ælowed
;

804 
boﬁ
 
	m°îeo_Ælowed
;

812 
boﬁ
 
	mycb¸_420_Ælowed
;

818 
boﬁ
 
	mªgi°îed
;

825 
li°_hód
 
	mmodes
;

832 
drm_c⁄√˘‹_°©us
 
	m°©us
;

840 
li°_hód
 
	m¥obed_modes
;

851 
drm_di•œy_öfo
 
	mdi•œy_öfo
;

852 c⁄° 
drm_c⁄√˘‹_funcs
 *
	mfuncs
;

854 
drm_¥›îty_blob
 *
	medid_blob_±r
;

855 
drm_obje˘_¥›îtõs
 
	m¥›îtõs
;

857 
drm_¥›îty
 *
	msˇlög_mode_¥›îty
;

864 
drm_¥›îty_blob
 *
	m∑th_blob_±r
;

876 
drm_¥›îty_blob
 *
	mtûe_blob_±r
;

880 
	#DRM_CONNECTOR_POLL_HPD
 (1 << 0)

	)

882 
	#DRM_CONNECTOR_POLL_CONNECT
 (1 << 1)

	)

885 
	#DRM_CONNECTOR_POLL_DISCONNECT
 (1 << 2)

	)

906 
uöt8_t
 
	mpﬁÀd
;

909 
	mdpms
;

911 c⁄° 
drm_c⁄√˘‹_hñ≥r_funcs
 *
	mhñ≥r_¥iv©e
;

914 
drm_cmdlöe_mode
 
	mcmdlöe_mode
;

915 
drm_c⁄√˘‹_f‹˚
 
	mf‹˚
;

916 
boﬁ
 
	movîride_edid
;

918 
	#DRM_CONNECTOR_MAX_ENCODER
 3

	)

919 
uöt32_t
 
	mícodî_ids
[
DRM_CONNECTOR_MAX_ENCODER
];

926 
drm_ícodî
 *
	mícodî
;

928 
	#MAX_ELD_BYTES
 128

	)

930 
uöt8_t
 
	mñd
[
MAX_ELD_BYTES
];

931 
boﬁ
 
	mœãncy_¥e£¡
[2];

932 
	mvideo_œãncy
[2];

933 
	maudio_œãncy
[2];

934 
	mnuŒ_edid_cou¡î
;

935 
	mbad_edid_cou¡î
;

940 
boﬁ
 
	medid_c‹ru±
;

942 
díåy
 *
	mdebugfs_íåy
;

958 
drm_c⁄√˘‹_°©e
 *
	m°©e
;

961 
boﬁ
 
	mhas_tûe
;

962 
drm_tûe_group
 *
	mtûe_group
;

963 
boﬁ
 
	mtûe_is_sögÀ_m⁄ô‹
;

965 
uöt8_t
 
	mnum_h_tûe
, 
	mnum_v_tûe
;

966 
uöt8_t
 
	mtûe_h_loc
, 
	mtûe_v_loc
;

967 
uöt16_t
 
	mtûe_h_size
, 
	mtûe_v_size
;

976 
Œi°_node
 
	m‰ì_node
;

979 
	#obj_to_c⁄√˘‹
(
x
Ë
	`c⁄èöî_of
(x, 
drm_c⁄√˘‹
, 
ba£
)

	)

981 
drm_c⁄√˘‹_öô
(
drm_devi˚
 *
dev
,

982 
drm_c⁄√˘‹
 *
c⁄√˘‹
,

983 c⁄° 
drm_c⁄√˘‹_funcs
 *
funcs
,

984 
c⁄√˘‹_ty≥
);

985 
drm_c⁄√˘‹_ªgi°î
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

986 
drm_c⁄√˘‹_uƒegi°î
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

987 
drm_mode_c⁄√˘‹_©èch_ícodî
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

988 
drm_ícodî
 *
ícodî
);

990 
drm_c⁄√˘‹_˛ónup
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

991 
ölöe
 
	$drm_c⁄√˘‹_ödex
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

993  
c⁄√˘‹
->
ödex
;

994 
	}
}

1005 
ölöe
 
drm_c⁄√˘‹
 *
	$drm_c⁄√˘‹_lookup
(
drm_devi˚
 *
dev
,

1006 
drm_fûe
 *
fûe_¥iv
,

1007 
uöt32_t
 
id
)

1009 
drm_mode_obje˘
 *
mo
;

1010 
mo
 = 
	`drm_mode_obje˘_föd
(
dev
, 
fûe_¥iv
, 
id
, 
DRM_MODE_OBJECT_CONNECTOR
);

1011  
mo
 ? 
	`obj_to_c⁄√˘‹
(moË: 
NULL
;

1012 
	}
}

1020 
ölöe
 
	$drm_c⁄√˘‹_gë
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

1022 
	`drm_mode_obje˘_gë
(&
c⁄√˘‹
->
ba£
);

1023 
	}
}

1032 
ölöe
 
	$drm_c⁄√˘‹_put
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

1034 
	`drm_mode_obje˘_put
(&
c⁄√˘‹
->
ba£
);

1035 
	}
}

1044 
ölöe
 
	$drm_c⁄√˘‹_ª„ªn˚
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

1046 
	`drm_c⁄√˘‹_gë
(
c⁄√˘‹
);

1047 
	}
}

1056 
ölöe
 
	$drm_c⁄√˘‹_uƒe„ªn˚
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

1058 
	`drm_c⁄√˘‹_put
(
c⁄√˘‹
);

1059 
	}
}

1061 c⁄° *
drm_gë_c⁄√˘‹_°©us_«me
(
drm_c⁄√˘‹_°©us
 
°©us
);

1062 c⁄° *
drm_gë_subpixñ_‹dî_«me
(
subpixñ_‹dî
 
‹dî
);

1063 c⁄° *
drm_gë_dpms_«me
(
vÆ
);

1064 c⁄° *
drm_gë_dvi_i_subc⁄√˘‹_«me
(
vÆ
);

1065 c⁄° *
drm_gë_dvi_i_£À˘_«me
(
vÆ
);

1066 c⁄° *
drm_gë_tv_subc⁄√˘‹_«me
(
vÆ
);

1067 c⁄° *
drm_gë_tv_£À˘_«me
(
vÆ
);

1069 
drm_mode_¸óã_dvi_i_¥›îtõs
(
drm_devi˚
 *
dev
);

1070 
drm_mode_¸óã_tv_¥›îtõs
(
drm_devi˚
 *
dev
,

1071 
num_modes
,

1072 c⁄° * c⁄° 
modes
[]);

1073 
drm_mode_¸óã_sˇlög_mode_¥›îty
(
drm_devi˚
 *
dev
);

1074 
drm_c⁄√˘‹_©èch_sˇlög_mode_¥›îty
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

1075 
u32
 
sˇlög_mode_mask
);

1076 
drm_mode_¸óã_a•e˘_øtio_¥›îty
(
drm_devi˚
 *
dev
);

1077 
drm_mode_¸óã_sugge°ed_off£t_¥›îtõs
(
drm_devi˚
 *
dev
);

1079 
drm_mode_c⁄√˘‹_£t_∑th_¥›îty
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

1080 c⁄° *
∑th
);

1081 
drm_mode_c⁄√˘‹_£t_tûe_¥›îty
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

1082 
drm_mode_c⁄√˘‹_upd©e_edid_¥›îty
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

1083 c⁄° 
edid
 *edid);

1084 
drm_mode_c⁄√˘‹_£t_lök_°©us_¥›îty
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

1085 
uöt64_t
 
lök_°©us
);

1086 
drm_c⁄√˘‹_öô_∑√l_‹õ¡©i⁄_¥›îty
(

1087 
drm_c⁄√˘‹
 *
c⁄√˘‹
, 
width
, 
height
);

1099 
	sdrm_tûe_group
 {

1100 
kªf
 
	mªfcou¡
;

1101 
drm_devi˚
 *
	mdev
;

1102 
	mid
;

1103 
u8
 
	mgroup_d©a
[8];

1106 
drm_tûe_group
 *
drm_mode_¸óã_tûe_group
(
drm_devi˚
 *
dev
,

1107 
t›ﬁogy
[8]);

1108 
drm_tûe_group
 *
drm_mode_gë_tûe_group
(
drm_devi˚
 *
dev
,

1109 
t›ﬁogy
[8]);

1110 
drm_mode_put_tûe_group
(
drm_devi˚
 *
dev
,

1111 
drm_tûe_group
 *
tg
);

1122 
	sdrm_c⁄√˘‹_li°_ôî
 {

1124 
drm_devi˚
 *
	mdev
;

1125 
drm_c⁄√˘‹
 *
	mc⁄n
;

1128 
drm_c⁄√˘‹_li°_ôî_begö
(
drm_devi˚
 *
dev
,

1129 
drm_c⁄√˘‹_li°_ôî
 *
ôî
);

1130 
drm_c⁄√˘‹
 *

1131 
drm_c⁄√˘‹_li°_ôî_√xt
(
drm_c⁄√˘‹_li°_ôî
 *
ôî
);

1132 
drm_c⁄√˘‹_li°_ôî_íd
(
drm_c⁄√˘‹_li°_ôî
 *
ôî
);

1143 
	#drm_f‹_óch_c⁄√˘‹_ôî
(
c⁄√˘‹
, 
ôî
) \

1144 (
c⁄√˘‹
 = 
	`drm_c⁄√˘‹_li°_ôî_√xt
(
ôî
)))

	)

	@src/common/linuxkpi/include/drm/drm_crtc.h

25 #i‚de‡
__DRM_CRTC_H__


26 
	#__DRM_CRTC_H__


	)

28 
	~<löux/i2c.h
>

29 
	~<löux/•ölock.h
>

30 
	~<löux/ty≥s.h
>

31 
	~<löux/fb.h
>

32 
	~<löux/hdmi.h
>

33 
	~<löux/medü-bus-f‹m©.h
>

34 
	~<u≠i/drm/drm_mode.h
>

35 
	~<u≠i/drm/drm_fourcc.h
>

36 
	~<drm/drm_mode£t_lock.h
>

37 
	~<drm/drm_ª˘.h
>

38 
	~<drm/drm_mode_obje˘.h
>

39 
	~<drm/drm_‰amebuf„r.h
>

40 
	~<drm/drm_modes.h
>

41 
	~<drm/drm_c⁄√˘‹.h
>

42 
	~<drm/drm_¥›îty.h
>

43 
	~<drm/drm_bridge.h
>

44 
	~<drm/drm_edid.h
>

45 
	~<drm/drm_∂™e.h
>

46 
	~<drm/drm_bÀnd.h
>

47 
	~<drm/drm_cﬁ‹_mgmt.h
>

48 
	~<drm/drm_debugfs_¸c.h
>

49 
	~<drm/drm_mode_c⁄fig.h
>

51 
	gdrm_devi˚
;

52 
	gdrm_mode_£t
;

53 
	gdrm_fûe
;

54 
	gdrm_˛ù_ª˘
;

55 
	gdrm_¥öãr
;

56 
	gdevi˚_node
;

57 
	gdma_„n˚
;

58 
	gedid
;

60 
ölöe
 
öt64_t
 
	$U642I64
(
uöt64_t
 
vÆ
)

62  (
öt64_t
)*((öt64_à*)&
vÆ
);

63 
	}
}

64 
ölöe
 
uöt64_t
 
	$I642U64
(
öt64_t
 
vÆ
)

66  (
uöt64_t
)*((uöt64_à*)&
vÆ
);

67 
	}
}

69 
	gdrm_¸tc
;

70 
	gdrm_≥ndög_vbœnk_evít
;

71 
	gdrm_∂™e
;

72 
	gdrm_bridge
;

73 
	gdrm_©omic_°©e
;

75 
	gdrm_¸tc_hñ≥r_funcs
;

76 
	gdrm_∂™e_hñ≥r_funcs
;

108 
	sdrm_¸tc_°©e
 {

109 
drm_¸tc
 *
	m¸tc
;

111 
boﬁ
 
	míabÀ
;

112 
boﬁ
 
	ma˘ive
;

115 
boﬁ
 
	m∂™es_ch™ged
 : 1;

116 
boﬁ
 
	mmode_ch™ged
 : 1;

117 
boﬁ
 
	ma˘ive_ch™ged
 : 1;

118 
boﬁ
 
	mc⁄√˘‹s_ch™ged
 : 1;

119 
boﬁ
 
	mzpos_ch™ged
 : 1;

120 
boﬁ
 
	mcﬁ‹_mgmt_ch™ged
 : 1;

127 
u32
 
	m∂™e_mask
;

129 
u32
 
	mc⁄√˘‹_mask
;

130 
u32
 
	mícodî_mask
;

142 
drm_di•œy_mode
 
	madju°ed_mode
;

159 
drm_di•œy_mode
 
	mmode
;

162 
drm_¥›îty_blob
 *
	mmode_blob
;

171 
drm_¥›îty_blob
 *
	mdegamma_lut
;

179 
drm_¥›îty_blob
 *
	m˘m
;

188 
drm_¥›îty_blob
 *
	mgamma_lut
;

196 
u32
 
	mèrgë_vbœnk
;

204 
u32
 
	m∑geÊù_Êags
;

254 
drm_≥ndög_vbœnk_evít
 *
	mevít
;

263 
drm_¸tc_commô
 *
	mcommô
;

265 
drm_©omic_°©e
 *
	m°©e
;

280 
	sdrm_¸tc_funcs
 {

291 (*
	mª£t
)(
drm_¸tc
 *
	m¸tc
);

314 (*
	mcurs‹_£t
)(
drm_¸tc
 *
	m¸tc
, 
drm_fûe
 *
	mfûe_¥iv
,

315 
uöt32_t
 
	mh™dÀ
, uöt32_à
	mwidth
, uöt32_à
	mheight
);

336 (*
	mcurs‹_£t2
)(
drm_¸tc
 *
	m¸tc
, 
drm_fûe
 *
	mfûe_¥iv
,

337 
uöt32_t
 
	mh™dÀ
, uöt32_à
	mwidth
, uöt32_à
	mheight
,

338 
öt32_t
 
	mhŸ_x
, i¡32_à
	mhŸ_y
);

356 (*
	mcurs‹_move
)(
drm_¸tc
 *
	m¸tc
, 
	mx
, 
	my
);

371 (*
	mgamma_£t
)(
drm_¸tc
 *
	m¸tc
, 
u16
 *
	mr
, u16 *
	mg
, u16 *
	mb
,

372 
uöt32_t
 
	msize
,

373 
drm_mode£t_acquúe_˘x
 *
	m˘x
);

382 (*
	mde°roy
)(
drm_¸tc
 *
	m¸tc
);

398 (*
	m£t_c⁄fig
)(
drm_mode_£t
 *
	m£t
,

399 
drm_mode£t_acquúe_˘x
 *
	m˘x
);

454 (*
	m∑ge_Êù
)(
drm_¸tc
 *
	m¸tc
,

455 
drm_‰amebuf„r
 *
	mfb
,

456 
drm_≥ndög_vbœnk_evít
 *
	mevít
,

457 
uöt32_t
 
	mÊags
,

458 
drm_mode£t_acquúe_˘x
 *
	m˘x
);

473 (*
	m∑ge_Êù_èrgë
)(
drm_¸tc
 *
	m¸tc
,

474 
drm_‰amebuf„r
 *
	mfb
,

475 
drm_≥ndög_vbœnk_evít
 *
	mevít
,

476 
uöt32_t
 
	mÊags
, uöt32_à
	mèrgë
,

477 
drm_mode£t_acquúe_˘x
 *
	m˘x
);

493 (*
	m£t_¥›îty
)(
drm_¸tc
 *
	m¸tc
,

494 
drm_¥›îty
 *
	m¥›îty
, 
uöt64_t
 
	mvÆ
);

525 
	mdrm_¸tc_°©e
 *(*
	m©omic_du∂iˇã_°©e
)(
drm_¸tc
 *
	m¸tc
);

533 (*
	m©omic_de°roy_°©e
)(
drm_¸tc
 *
	m¸tc
,

534 
drm_¸tc_°©e
 *
	m°©e
);

578 (*
	m©omic_£t_¥›îty
)(
drm_¸tc
 *
	m¸tc
,

579 
drm_¸tc_°©e
 *
	m°©e
,

580 
drm_¥›îty
 *
	m¥›îty
,

581 
uöt64_t
 
	mvÆ
);

600 (*
	m©omic_gë_¥›îty
)(
drm_¸tc
 *
	m¸tc
,

601 c⁄° 
drm_¸tc_°©e
 *
	m°©e
,

602 
drm_¥›îty
 *
	m¥›îty
,

603 
uöt64_t
 *
	mvÆ
);

618 (*
	mœã_ªgi°î
)(
drm_¸tc
 *
	m¸tc
);

629 (*
	móæy_uƒegi°î
)(
drm_¸tc
 *
	m¸tc
);

655 (*
	m£t_¸c_sour˚
)(
drm_¸tc
 *
	m¸tc
, c⁄° *
	msour˚
,

656 
size_t
 *
	mvÆues_˙t
);

667 (*
	m©omic_¥öt_°©e
)(
drm_¥öãr
 *
	mp
,

668 c⁄° 
drm_¸tc_°©e
 *
	m°©e
);

694 
u32
 (*
gë_vbœnk_cou¡î
)(
drm_¸tc
 *
	m¸tc
);

707 (*
	míabÀ_vbœnk
)(
drm_¸tc
 *
	m¸tc
);

715 (*
	mdißbÀ_vbœnk
)(
drm_¸tc
 *
	m¸tc
);

744 
	sdrm_¸tc
 {

745 
drm_devi˚
 *
	mdev
;

746 
devi˚_node
 *
	mp‹t
;

747 
li°_hód
 
	mhód
;

749 *
	m«me
;

761 
drm_mode£t_lock
 
	mmuãx
;

763 
drm_mode_obje˘
 
	mba£
;

766 
drm_∂™e
 *
	m¥im¨y
;

767 
drm_∂™e
 *
	mcurs‹
;

773 
	mödex
;

776 
	mcurs‹_x
;

777 
	mcurs‹_y
;

779 
boﬁ
 
	míabÀd
;

782 
drm_di•œy_mode
 
	mmode
;

787 
drm_di•œy_mode
 
	mhwmode
;

789 
	mx
, 
	my
;

790 c⁄° 
drm_¸tc_funcs
 *
	mfuncs
;

793 
uöt32_t
 
	mgamma_size
;

794 
uöt16_t
 *
	mgamma_°‹e
;

797 c⁄° 
drm_¸tc_hñ≥r_funcs
 *
	mhñ≥r_¥iv©e
;

799 
drm_obje˘_¥›îtõs
 
	m¥›îtõs
;

814 
drm_¸tc_°©e
 *
	m°©e
;

831 
li°_hód
 
	mcommô_li°
;

838 
•ölock_t
 
	mcommô_lock
;

840 #ifde‡
CONFIG_DEBUG_FS


846 
díåy
 *
	mdebugfs_íåy
;

854 
drm_¸tc_¸c
 
	m¸c
;

861 
	m„n˚_c⁄ãxt
;

869 
•ölock_t
 
	m„n˚_lock
;

876 
	m„n˚_£qno
;

883 
	mtimñöe_«me
[32];

899 
	sdrm_mode_£t
 {

900 
drm_‰amebuf„r
 *
	mfb
;

901 
drm_¸tc
 *
	m¸tc
;

902 
drm_di•œy_mode
 *
	mmode
;

904 
uöt32_t
 
	mx
;

905 
uöt32_t
 
	my
;

907 
drm_c⁄√˘‹
 **
	mc⁄√˘‹s
;

908 
size_t
 
	mnum_c⁄√˘‹s
;

911 
	#obj_to_¸tc
(
x
Ë
	`c⁄èöî_of
(x, 
drm_¸tc
, 
ba£
)

	)

913 
	$__¥ötf
(6, 7)

914 
	`drm_¸tc_öô_wôh_∂™es
(
drm_devi˚
 *
dev
,

915 
drm_¸tc
 *
¸tc
,

916 
drm_∂™e
 *
¥im¨y
,

917 
drm_∂™e
 *
curs‹
,

918 c⁄° 
drm_¸tc_funcs
 *
funcs
,

919 c⁄° *
«me
, ...);

920 
	`drm_¸tc_˛ónup
(
drm_¸tc
 *
¸tc
);

929 
ölöe
 
	$drm_¸tc_ödex
(c⁄° 
drm_¸tc
 *
¸tc
)

931  
¸tc
->
ödex
;

932 
	}
}

941 
ölöe
 
uöt32_t
 
	$drm_¸tc_mask
(c⁄° 
drm_¸tc
 *
¸tc
)

943  1 << 
	`drm_¸tc_ödex
(
¸tc
);

944 
	}
}

946 
drm_¸tc_f‹˚_dißbÀ
(
drm_¸tc
 *
¸tc
);

947 
drm_¸tc_f‹˚_dißbÀ_Æl
(
drm_devi˚
 *
dev
);

949 
drm_mode_£t_c⁄fig_öã∫Æ
(
drm_mode_£t
 *
£t
);

950 
drm_¸tc
 *
drm_¸tc_‰om_ödex
(
drm_devi˚
 *
dev
, 
idx
);

962 
ölöe
 
drm_¸tc
 *
	$drm_¸tc_föd
(
drm_devi˚
 *
dev
,

963 
drm_fûe
 *
fûe_¥iv
,

964 
uöt32_t
 
id
)

966 
drm_mode_obje˘
 *
mo
;

967 
mo
 = 
	`drm_mode_obje˘_föd
(
dev
, 
fûe_¥iv
, 
id
, 
DRM_MODE_OBJECT_CRTC
);

968  
mo
 ? 
	`obj_to_¸tc
(moË: 
NULL
;

969 
	}
}

978 
	#drm_f‹_óch_¸tc
(
¸tc
, 
dev
) \

979 
	`li°_f‹_óch_íåy
(
¸tc
, &(
dev
)->
mode_c⁄fig
.
¸tc_li°
, 
hód
)

	)

	@src/common/linuxkpi/include/drm/drm_crtc_helper.h

33 #i‚de‡
__DRM_CRTC_HELPER_H__


34 
	#__DRM_CRTC_HELPER_H__


	)

36 
	~<löux/•ölock.h
>

37 
	~<löux/ty≥s.h
>

38 
	~<löux/idr.h
>

40 
	~<löux/fb.h
>

42 
	~<drm/drm_¸tc.h
>

43 
	~<drm/drm_mode£t_hñ≥r_vèbÀs.h
>

44 
	~<drm/drm_mode£t_hñ≥r.h
>

46 
drm_hñ≥r_dißbÀ_unu£d_fun˘i⁄s
(
drm_devi˚
 *
dev
);

47 
drm_¸tc_hñ≥r_£t_c⁄fig
(
drm_mode_£t
 *
£t
,

48 
drm_mode£t_acquúe_˘x
 *
˘x
);

49 
boﬁ
 
drm_¸tc_hñ≥r_£t_mode
(
drm_¸tc
 *
¸tc
,

50 
drm_di•œy_mode
 *
mode
,

51 
x
, 
y
,

52 
drm_‰amebuf„r
 *
ﬁd_fb
);

53 
boﬁ
 
drm_hñ≥r_¸tc_ö_u£
(
drm_¸tc
 *
¸tc
);

54 
boﬁ
 
drm_hñ≥r_ícodî_ö_u£
(
drm_ícodî
 *
ícodî
);

56 
drm_hñ≥r_c⁄√˘‹_dpms
(
drm_c⁄√˘‹
 *
c⁄√˘‹
, 
mode
);

58 
drm_hñ≥r_ªsume_f‹˚_mode
(
drm_devi˚
 *
dev
);

60 
drm_hñ≥r_¸tc_mode_£t
(
drm_¸tc
 *
¸tc
, 
drm_di•œy_mode
 *
mode
,

61 
drm_di•œy_mode
 *
adju°ed_mode
, 
x
, 
y
,

62 
drm_‰amebuf„r
 *
ﬁd_fb
);

63 
drm_hñ≥r_¸tc_mode_£t_ba£
(
drm_¸tc
 *
¸tc
, 
x
, 
y
,

64 
drm_‰amebuf„r
 *
ﬁd_fb
);

67 
drm_hñ≥r_¥obe_sögÀ_c⁄√˘‹_modes
(
drm_c⁄√˘‹


68 *
c⁄√˘‹
, 
uöt32_t
 
maxX
,

69 
uöt32_t
 
maxY
);

70 
drm_hñ≥r_¥obe_dëe˘
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

71 
drm_mode£t_acquúe_˘x
 *
˘x
,

72 
boﬁ
 
f‹˚
);

73 
drm_kms_hñ≥r_pﬁl_öô
(
drm_devi˚
 *
dev
);

74 
drm_kms_hñ≥r_pﬁl_föi
(
drm_devi˚
 *
dev
);

75 
boﬁ
 
drm_hñ≥r_hpd_úq_evít
(
drm_devi˚
 *
dev
);

76 
drm_kms_hñ≥r_hŸ∂ug_evít
(
drm_devi˚
 *
dev
);

78 
drm_kms_hñ≥r_pﬁl_dißbÀ
(
drm_devi˚
 *
dev
);

79 
drm_kms_hñ≥r_pﬁl_íabÀ
(
drm_devi˚
 *
dev
);

80 
boﬁ
 
drm_kms_hñ≥r_is_pﬁl_w‹kî
();

	@src/common/linuxkpi/include/drm/drm_debugfs.h

32 #i‚de‡
_DRM_DEBUGFS_H_


33 
	#_DRM_DEBUGFS_H_


	)

41 
	sdrm_öfo_li°
 {

43 c⁄° *
	m«me
;

51 (*
	mshow
)(
	m£q_fûe
*, *);

53 
u32
 
	mdrivî_„©uªs
;

55 *
	md©a
;

70 
	sdrm_öfo_node
 {

72 
drm_mö‹
 *
	mmö‹
;

74 c⁄° 
drm_öfo_li°
 *
	möfo_ít
;

76 
li°_hód
 
	mli°
;

77 
díåy
 *
	mdít
;

80 #i‡
deföed
(
CONFIG_DEBUG_FS
)

81 
drm_debugfs_¸óã_fûes
(c⁄° 
drm_öfo_li°
 *
fûes
,

82 
cou¡
, 
díåy
 *
roŸ
,

83 
drm_mö‹
 *
mö‹
);

84 
drm_debugfs_ªmove_fûes
(c⁄° 
drm_öfo_li°
 *
fûes
,

85 
cou¡
, 
drm_mö‹
 *
mö‹
);

87 
ölöe
 
	$drm_debugfs_¸óã_fûes
(c⁄° 
drm_öfo_li°
 *
fûes
,

88 
cou¡
, 
díåy
 *
roŸ
,

89 
drm_mö‹
 *
mö‹
)

92 
	}
}

94 
ölöe
 
	$drm_debugfs_ªmove_fûes
(c⁄° 
drm_öfo_li°
 *
fûes
,

95 
cou¡
, 
drm_mö‹
 *
mö‹
)

98 
	}
}

	@src/common/linuxkpi/include/drm/drm_debugfs_crc.h

22 #i‚de‡
__DRM_DEBUGFS_CRC_H__


23 
	#__DRM_DEBUGFS_CRC_H__


	)

25 
	#DRM_MAX_CRC_NR
 10

	)

33 
	sdrm_¸tc_¸c_íåy
 {

34 
boﬁ
 
	mhas_‰ame_cou¡î
;

35 
uöt32_t
 
	m‰ame
;

36 
uöt32_t
 
	m¸cs
[
DRM_MAX_CRC_NR
];

39 
	#DRM_CRC_ENTRIES_NR
 128

	)

52 
	sdrm_¸tc_¸c
 {

53 
•ölock_t
 
	mlock
;

54 c⁄° *
	msour˚
;

55 
boﬁ
 
	m›íed
;

56 
drm_¸tc_¸c_íåy
 *
	míåõs
;

57 
	mhód
, 
	mèû
;

58 
size_t
 
	mvÆues_˙t
;

59 
waô_queue_hód_t
 
	mwq
;

62 #i‡
deföed
(
CONFIG_DEBUG_FS
)

63 
drm_¸tc_add_¸c_íåy
(
drm_¸tc
 *
¸tc
, 
boﬁ
 
has_‰ame
,

64 
uöt32_t
 
‰ame
, uöt32_à*
¸cs
);

66 
ölöe
 
	$drm_¸tc_add_¸c_íåy
(
drm_¸tc
 *
¸tc
, 
boﬁ
 
has_‰ame
,

67 
uöt32_t
 
‰ame
, uöt32_à*
¸cs
)

69  -
EINVAL
;

70 
	}
}

	@src/common/linuxkpi/include/drm/drm_device.h

1 #i‚de‡
_DRM_DEVICE_H_


2 
	#_DRM_DEVICE_H_


	)

4 
	~<löux/li°.h
>

5 
	~<löux/kªf.h
>

6 
	~<löux/muãx.h
>

7 
	~<löux/idr.h
>

9 
	~<drm/drm_hashèb.h
>

10 
	~<drm/drm_mode_c⁄fig.h
>

12 
	gdrm_drivî
;

13 
	gdrm_mö‹
;

14 
	gdrm_ma°î
;

15 
	gdrm_devi˚_dma
;

16 
	gdrm_vbœnk_¸tc
;

17 
	gdrm_sg_mem
;

18 
	gdrm_loˇl_m≠
;

19 
	gdrm_vma_off£t_m™agî
;

20 
	gdrm_fb_hñ≥r
;

22 
	göode
;

24 
	gpci_dev
;

25 
	gpci_c⁄åﬁÀr
;

31 
	sdrm_devi˚
 {

32 
li°_hód
 
	mÀgacy_dev_li°
;

33 
	mif_vîsi⁄
;

37 
kªf
 
	mªf
;

38 
devi˚
 *
	mdev
;

39 
drm_drivî
 *
	mdrivî
;

40 *
	mdev_¥iv©e
;

41 
drm_mö‹
 *
	mc⁄åﬁ
;

42 
drm_mö‹
 *
	m¥im¨y
;

43 
drm_mö‹
 *
	mªndî
;

44 
boﬁ
 
	mªgi°îed
;

47 
drm_ma°î
 *
	mma°î
;

49 
©omic_t
 
	mu≈lugged
;

50 #ifde‡
__löux__


51 
öode
 *
	m™⁄_öode
;

53 *
	munique
;

58 
muãx
 
	m°ru˘_muãx
;

59 
muãx
 
	mma°î_muãx
;

64 
	m›í_cou¡
;

65 
•ölock_t
 
	mbuf_lock
;

66 
	mbuf_u£
;

67 
©omic_t
 
	mbuf_Æloc
;

70 
muãx
 
	mfûñi°_muãx
;

71 
li°_hód
 
	mfûñi°
;

75 
li°_hód
 
	mm≠li°
;

76 
drm_›í_hash
 
	mm≠_hash
;

80 
li°_hód
 
	m˘xli°
;

81 
muãx
 
	m˘xli°_muãx
;

83 
idr
 
	m˘x_idr
;

85 
li°_hód
 
	mvmÆi°
;

91 
drm_devi˚_dma
 *
	mdma
;

97 
__vﬁ©ûe__
 
	mc⁄ãxt_Êag
;

98 
	mœ°_c⁄ãxt
;

108 
boﬁ
 
	múq_íabÀd
;

109 
	múq
;

124 
boﬁ
 
	mvbœnk_dißbÀ_immedüã
;

134 
drm_vbœnk_¸tc
 *
	mvbœnk
;

136 
•ölock_t
 
	mvbœnk_time_lock
;

137 
•ölock_t
 
	mvbl_lock
;

154 
u32
 
	mmax_vbœnk_cou¡
;

159 
li°_hód
 
	mvbœnk_evít_li°
;

160 
•ölock_t
 
	mevít_lock
;

164 
drm_agp_hód
 *
	magp
;

166 
pci_dev
 *
	mpdev
;

167 #ifde‡
__Æpha__


168 
pci_c⁄åﬁÀr
 *
	mho£
;

171 
drm_sg_mem
 *
	msg
;

172 
	mnum_¸tcs
;

175 
	mc⁄ãxt
;

176 
drm_hw_lock
 *
	mlock
;

177 } 
	msigd©a
;

179 
drm_loˇl_m≠
 *
	magp_buf„r_m≠
;

180 
	magp_buf„r_tokí
;

182 
drm_mode_c⁄fig
 
	mmode_c⁄fig
;

186 
muãx
 
	mobje˘_«me_lock
;

187 
idr
 
	mobje˘_«me_idr
;

188 
drm_vma_off£t_m™agî
 *
	mvma_off£t_m™agî
;

190 
	mswôch_powî_°©e
;

192 #i‚de‡
__löux__


193 
drm_sys˘l_öfo
 *
	msys˘l
;

194 
	msys˘l_node_idx
;

196 *
	mdrm_âm_bdev
;

198 *
	msys˘l_¥iv©e
;

199 
	mbusid_°r
[128];

200 
	mmode£âög
;

204 
	#DRM_PCI_RESOURCE_MAX
 7

	)

205 
	#MAX_ORDER
 11

	)

207 
	sdrm_pci_ªsour˚
 {

208 
ªsour˚
 *
	mªs
;

209 
	mrid
;

210 } 
	mdrm_pcú
[
DRM_PCI_RESOURCE_MAX
];

218 
drm_fb_hñ≥r
 *
	mfb_hñ≥r
;

	@src/common/linuxkpi/include/drm/drm_displayid.h

22 #i‚de‡
DRM_DISPLAYID_H


23 
	#DRM_DISPLAYID_H


	)

25 
	#DATA_BLOCK_PRODUCT_ID
 0x00

	)

26 
	#DATA_BLOCK_DISPLAY_PARAMETERS
 0x01

	)

27 
	#DATA_BLOCK_COLOR_CHARACTERISTICS
 0x02

	)

28 
	#DATA_BLOCK_TYPE_1_DETAILED_TIMING
 0x03

	)

29 
	#DATA_BLOCK_TYPE_2_DETAILED_TIMING
 0x04

	)

30 
	#DATA_BLOCK_TYPE_3_SHORT_TIMING
 0x05

	)

31 
	#DATA_BLOCK_TYPE_4_DMT_TIMING
 0x06

	)

32 
	#DATA_BLOCK_VESA_TIMING
 0x07

	)

33 
	#DATA_BLOCK_CEA_TIMING
 0x08

	)

34 
	#DATA_BLOCK_VIDEO_TIMING_RANGE
 0x09

	)

35 
	#DATA_BLOCK_PRODUCT_SERIAL_NUMBER
 0x0a

	)

36 
	#DATA_BLOCK_GP_ASCII_STRING
 0x0b

	)

37 
	#DATA_BLOCK_DISPLAY_DEVICE_DATA
 0x0c

	)

38 
	#DATA_BLOCK_INTERFACE_POWER_SEQUENCING
 0x0d

	)

39 
	#DATA_BLOCK_TRANSFER_CHARACTERISTICS
 0x0e

	)

40 
	#DATA_BLOCK_DISPLAY_INTERFACE
 0x0f

	)

41 
	#DATA_BLOCK_STEREO_DISPLAY_INTERFACE
 0x10

	)

42 
	#DATA_BLOCK_TILED_DISPLAY
 0x12

	)

44 
	#DATA_BLOCK_VENDOR_SPECIFIC
 0x7f

	)

46 
	#PRODUCT_TYPE_EXTENSION
 0

	)

47 
	#PRODUCT_TYPE_TEST
 1

	)

48 
	#PRODUCT_TYPE_PANEL
 2

	)

49 
	#PRODUCT_TYPE_MONITOR
 3

	)

50 
	#PRODUCT_TYPE_TV
 4

	)

51 
	#PRODUCT_TYPE_REPEATER
 5

	)

52 
	#PRODUCT_TYPE_DIRECT_DRIVE
 6

	)

54 
	sdi•œyid_hdr
 {

55 
u8
 
	mªv
;

56 
u8
 
	mbyãs
;

57 
u8
 
	m¥od_id
;

58 
u8
 
	mext_cou¡
;

59 } 
	g__∑cked
;

61 
	sdi•œyid_block
 {

62 
u8
 
	mèg
;

63 
u8
 
	mªv
;

64 
u8
 
	mnum_byãs
;

65 } 
	g__∑cked
;

67 
	sdi•œyid_tûed_block
 {

68 
di•œyid_block
 
	mba£
;

69 
u8
 
	mtûe_ˇp
;

70 
u8
 
	mt›o
[3];

71 
u8
 
	mtûe_size
[4];

72 
u8
 
	mtûe_pixñ_bezñ
[5];

73 
u8
 
	mt›ﬁogy_id
[8];

74 } 
	g__∑cked
;

76 
	sdi•œyid_dëaûed_timögs_1
 {

77 
u8
 
	mpixñ_˛ock
[3];

78 
u8
 
	mÊags
;

79 
u8
 
	mha˘ive
[2];

80 
u8
 
	mhbœnk
[2];

81 
u8
 
	mhsync
[2];

82 
u8
 
	mhsw
[2];

83 
u8
 
	mva˘ive
[2];

84 
u8
 
	mvbœnk
[2];

85 
u8
 
	mvsync
[2];

86 
u8
 
	mvsw
[2];

87 } 
	g__∑cked
;

89 
	sdi•œyid_dëaûed_timög_block
 {

90 
di•œyid_block
 
	mba£
;

91 
di•œyid_dëaûed_timögs_1
 
	mtimögs
[0];

	@src/common/linuxkpi/include/drm/drm_dp_dual_mode_helper.h

23 #i‚de‡
DRM_DP_DUAL_MODE_HELPER_H


24 
	#DRM_DP_DUAL_MODE_HELPER_H


	)

26 
	~<löux/ty≥s.h
>

32 
	#DP_DUAL_MODE_HDMI_ID
 0x00

	)

33 
	#DP_DUAL_MODE_HDMI_ID_LEN
 16

	)

38 
	#DP_DUAL_MODE_ADAPTOR_ID
 0x10

	)

39 
	#DP_DUAL_MODE_REV_MASK
 0x07

	)

40 
	#DP_DUAL_MODE_REV_TYPE2
 0x00

	)

41 
	#DP_DUAL_MODE_TYPE_MASK
 0xf0

	)

42 
	#DP_DUAL_MODE_TYPE_TYPE2
 0xa0

	)

44 
	#DP_DUAL_MODE_TYPE_HAS_DPCD
 0x08

	)

45 
	#DP_DUAL_MODE_IEEE_OUI
 0x11

	)

46 
	#DP_DUAL_IEEE_OUI_LEN
 3

	)

47 
	#DP_DUAL_DEVICE_ID
 0x14

	)

48 
	#DP_DUAL_DEVICE_ID_LEN
 6

	)

49 
	#DP_DUAL_MODE_HARDWARE_REV
 0x1a

	)

50 
	#DP_DUAL_MODE_FIRMWARE_MAJOR_REV
 0x1b

	)

51 
	#DP_DUAL_MODE_FIRMWARE_MINOR_REV
 0x1c

	)

52 
	#DP_DUAL_MODE_MAX_TMDS_CLOCK
 0x1d

	)

53 
	#DP_DUAL_MODE_I2C_SPEED_CAP
 0x1e

	)

54 
	#DP_DUAL_MODE_TMDS_OEN
 0x20

	)

55 
	#DP_DUAL_MODE_TMDS_DISABLE
 0x01

	)

56 
	#DP_DUAL_MODE_HDMI_PIN_CTRL
 0x21

	)

57 
	#DP_DUAL_MODE_CEC_ENABLE
 0x01

	)

58 
	#DP_DUAL_MODE_I2C_SPEED_CTRL
 0x22

	)

61 
	#DP_DUAL_MODE_LSPCON_MODE_CHANGE
 0x40

	)

62 
	#DP_DUAL_MODE_LSPCON_CURRENT_MODE
 0x41

	)

63 
	#DP_DUAL_MODE_LSPCON_MODE_PCON
 0x1

	)

65 
	gi2c_ad≠ãr
;

67 
ssize_t
 
drm_dp_duÆ_mode_ªad
(
i2c_ad≠ãr
 *
ad≠ãr
,

68 
u8
 
off£t
, *
buf„r
, 
size_t
 
size
);

69 
ssize_t
 
drm_dp_duÆ_mode_wrôe
(
i2c_ad≠ãr
 *
ad≠ãr
,

70 
u8
 
off£t
, c⁄° *
buf„r
, 
size_t
 
size
);

80 
	edrm_l•c⁄_mode
 {

81 
	mDRM_LSPCON_MODE_INVALID
,

82 
	mDRM_LSPCON_MODE_LS
,

83 
	mDRM_LSPCON_MODE_PCON
,

96 
	edrm_dp_duÆ_mode_ty≥
 {

97 
	mDRM_DP_DUAL_MODE_NONE
,

98 
	mDRM_DP_DUAL_MODE_UNKNOWN
,

99 
	mDRM_DP_DUAL_MODE_TYPE1_DVI
,

100 
	mDRM_DP_DUAL_MODE_TYPE1_HDMI
,

101 
	mDRM_DP_DUAL_MODE_TYPE2_DVI
,

102 
	mDRM_DP_DUAL_MODE_TYPE2_HDMI
,

103 
	mDRM_DP_DUAL_MODE_LSPCON
,

106 
drm_dp_duÆ_mode_ty≥
 
drm_dp_duÆ_mode_dëe˘
(
i2c_ad≠ãr
 *
ad≠ãr
);

107 
drm_dp_duÆ_mode_max_tmds_˛ock
(
drm_dp_duÆ_mode_ty≥
 
ty≥
,

108 
i2c_ad≠ãr
 *
ad≠ãr
);

109 
drm_dp_duÆ_mode_gë_tmds_ouçut
(
drm_dp_duÆ_mode_ty≥
 
ty≥
,

110 
i2c_ad≠ãr
 *
ad≠ãr
, 
boﬁ
 *
íabÀd
);

111 
drm_dp_duÆ_mode_£t_tmds_ouçut
(
drm_dp_duÆ_mode_ty≥
 
ty≥
,

112 
i2c_ad≠ãr
 *
ad≠ãr
, 
boﬁ
 
íabÀ
);

113 c⁄° *
drm_dp_gë_duÆ_mode_ty≥_«me
(
drm_dp_duÆ_mode_ty≥
 
ty≥
);

115 
drm_l•c⁄_gë_mode
(
i2c_ad≠ãr
 *
ad≠ãr
,

116 
drm_l•c⁄_mode
 *
cuºít_mode
);

117 
drm_l•c⁄_£t_mode
(
i2c_ad≠ãr
 *
ad≠ãr
,

118 
drm_l•c⁄_mode
 
ªqd_mode
);

	@src/common/linuxkpi/include/drm/drm_dp_helper.h

23 #i‚de‡
_DRM_DP_HELPER_H_


24 
	#_DRM_DP_HELPER_H_


	)

26 
	~<löux/ty≥s.h
>

27 
	~<löux/i2c.h
>

28 
	~<löux/dñay.h
>

45 
	#DP_AUX_MAX_PAYLOAD_BYTES
 16

	)

47 
	#DP_AUX_I2C_WRITE
 0x0

	)

48 
	#DP_AUX_I2C_READ
 0x1

	)

49 
	#DP_AUX_I2C_WRITE_STATUS_UPDATE
 0x2

	)

50 
	#DP_AUX_I2C_MOT
 0x4

	)

51 
	#DP_AUX_NATIVE_WRITE
 0x8

	)

52 
	#DP_AUX_NATIVE_READ
 0x9

	)

54 
	#DP_AUX_NATIVE_REPLY_ACK
 (0x0 << 0)

	)

55 
	#DP_AUX_NATIVE_REPLY_NACK
 (0x1 << 0)

	)

56 
	#DP_AUX_NATIVE_REPLY_DEFER
 (0x2 << 0)

	)

57 
	#DP_AUX_NATIVE_REPLY_MASK
 (0x3 << 0)

	)

59 
	#DP_AUX_I2C_REPLY_ACK
 (0x0 << 2)

	)

60 
	#DP_AUX_I2C_REPLY_NACK
 (0x1 << 2)

	)

61 
	#DP_AUX_I2C_REPLY_DEFER
 (0x2 << 2)

	)

62 
	#DP_AUX_I2C_REPLY_MASK
 (0x3 << 2)

	)

66 
	#DP_DPCD_REV
 0x000

	)

68 
	#DP_MAX_LINK_RATE
 0x001

	)

70 
	#DP_MAX_LANE_COUNT
 0x002

	)

71 
	#DP_MAX_LANE_COUNT_MASK
 0x1f

	)

72 
	#DP_TPS3_SUPPORTED
 (1 << 6Ë

	)

73 
	#DP_ENHANCED_FRAME_CAP
 (1 << 7)

	)

75 
	#DP_MAX_DOWNSPREAD
 0x003

	)

76 
	#DP_MAX_DOWNSPREAD_0_5
 (1 << 0)

	)

77 
	#DP_NO_AUX_HANDSHAKE_LINK_TRAINING
 (1 << 6)

	)

79 
	#DP_NORP
 0x004

	)

81 
	#DP_DOWNSTREAMPORT_PRESENT
 0x005

	)

82 
	#DP_DWN_STRM_PORT_PRESENT
 (1 << 0)

	)

83 
	#DP_DWN_STRM_PORT_TYPE_MASK
 0x06

	)

84 
	#DP_DWN_STRM_PORT_TYPE_DP
 (0 << 1)

	)

85 
	#DP_DWN_STRM_PORT_TYPE_ANALOG
 (1 << 1)

	)

86 
	#DP_DWN_STRM_PORT_TYPE_TMDS
 (2 << 1)

	)

87 
	#DP_DWN_STRM_PORT_TYPE_OTHER
 (3 << 1)

	)

88 
	#DP_FORMAT_CONVERSION
 (1 << 3)

	)

89 
	#DP_DETAILED_CAP_INFO_AVAILABLE
 (1 << 4Ë

	)

91 
	#DP_MAIN_LINK_CHANNEL_CODING
 0x006

	)

93 
	#DP_DOWN_STREAM_PORT_COUNT
 0x007

	)

94 
	#DP_PORT_COUNT_MASK
 0x0f

	)

95 
	#DP_MSA_TIMING_PAR_IGNORED
 (1 << 6Ë

	)

96 
	#DP_OUI_SUPPORT
 (1 << 7)

	)

98 
	#DP_RECEIVE_PORT_0_CAP_0
 0x008

	)

99 
	#DP_LOCAL_EDID_PRESENT
 (1 << 1)

	)

100 
	#DP_ASSOCIATED_TO_PRECEDING_PORT
 (1 << 2)

	)

102 
	#DP_RECEIVE_PORT_0_BUFFER_SIZE
 0x009

	)

104 
	#DP_RECEIVE_PORT_1_CAP_0
 0x00a

	)

105 
	#DP_RECEIVE_PORT_1_BUFFER_SIZE
 0x00b

	)

107 
	#DP_I2C_SPEED_CAP
 0x00¯

	)

108 
	#DP_I2C_SPEED_1K
 0x01

	)

109 
	#DP_I2C_SPEED_5K
 0x02

	)

110 
	#DP_I2C_SPEED_10K
 0x04

	)

111 
	#DP_I2C_SPEED_100K
 0x08

	)

112 
	#DP_I2C_SPEED_400K
 0x10

	)

113 
	#DP_I2C_SPEED_1M
 0x20

	)

115 
	#DP_EDP_CONFIGURATION_CAP
 0x00d

	)

116 
	#DP_ALTERNATE_SCRAMBLER_RESET_CAP
 (1 << 0)

	)

117 
	#DP_FRAMING_CHANGE_CAP
 (1 << 1)

	)

118 
	#DP_DPCD_DISPLAY_CONTROL_CAPABLE
 (1 << 3Ë

	)

120 
	#DP_TRAINING_AUX_RD_INTERVAL
 0x00ê

	)

122 
	#DP_ADAPTER_CAP
 0x00‡

	)

123 
	#DP_FORCE_LOAD_SENSE_CAP
 (1 << 0)

	)

124 
	#DP_ALTERNATE_I2C_PATTERN_CAP
 (1 << 1)

	)

126 
	#DP_SUPPORTED_LINK_RATES
 0x010

	)

127 
	#DP_MAX_SUPPORTED_RATES
 8

	)

130 
	#DP_FAUX_CAP
 0x020

	)

131 
	#DP_FAUX_CAP_1
 (1 << 0)

	)

133 
	#DP_MSTM_CAP
 0x021

	)

134 
	#DP_MST_CAP
 (1 << 0)

	)

136 
	#DP_NUMBER_OF_AUDIO_ENDPOINTS
 0x022

	)

139 
	#DP_AV_GRANULARITY
 0x023

	)

140 
	#DP_AG_FACTOR_MASK
 (0x‡<< 0)

	)

141 
	#DP_AG_FACTOR_3MS
 (0 << 0)

	)

142 
	#DP_AG_FACTOR_2MS
 (1 << 0)

	)

143 
	#DP_AG_FACTOR_1MS
 (2 << 0)

	)

144 
	#DP_AG_FACTOR_500US
 (3 << 0)

	)

145 
	#DP_AG_FACTOR_200US
 (4 << 0)

	)

146 
	#DP_AG_FACTOR_100US
 (5 << 0)

	)

147 
	#DP_AG_FACTOR_10US
 (6 << 0)

	)

148 
	#DP_AG_FACTOR_1US
 (7 << 0)

	)

149 
	#DP_VG_FACTOR_MASK
 (0x‡<< 4)

	)

150 
	#DP_VG_FACTOR_3MS
 (0 << 4)

	)

151 
	#DP_VG_FACTOR_2MS
 (1 << 4)

	)

152 
	#DP_VG_FACTOR_1MS
 (2 << 4)

	)

153 
	#DP_VG_FACTOR_500US
 (3 << 4)

	)

154 
	#DP_VG_FACTOR_200US
 (4 << 4)

	)

155 
	#DP_VG_FACTOR_100US
 (5 << 4)

	)

157 
	#DP_AUD_DEC_LAT0
 0x024

	)

158 
	#DP_AUD_DEC_LAT1
 0x025

	)

160 
	#DP_AUD_PP_LAT0
 0x026

	)

161 
	#DP_AUD_PP_LAT1
 0x027

	)

163 
	#DP_VID_INTER_LAT
 0x028

	)

165 
	#DP_VID_PROG_LAT
 0x029

	)

167 
	#DP_REP_LAT
 0x02a

	)

169 
	#DP_AUD_DEL_INS0
 0x02b

	)

170 
	#DP_AUD_DEL_INS1
 0x02c

	)

171 
	#DP_AUD_DEL_INS2
 0x02d

	)

174 
	#DP_RECEIVER_ALPM_CAP
 0x02ê

	)

175 
	#DP_ALPM_CAP
 (1 << 0)

	)

177 
	#DP_SINK_DEVICE_AUX_FRAME_SYNC_CAP
 0x02‡

	)

178 
	#DP_AUX_FRAME_SYNC_CAP
 (1 << 0)

	)

180 
	#DP_GUID
 0x030

	)

182 
	#DP_DSC_SUPPORT
 0x060

	)

183 
	#DP_DSC_DECOMPRESSION_IS_SUPPORTED
 (1 << 0)

	)

185 
	#DP_DSC_REV
 0x061

	)

186 
	#DP_DSC_MAJOR_MASK
 (0x‡<< 0)

	)

187 
	#DP_DSC_MINOR_MASK
 (0x‡<< 4)

	)

188 
	#DP_DSC_MAJOR_SHIFT
 0

	)

189 
	#DP_DSC_MINOR_SHIFT
 4

	)

191 
	#DP_DSC_RC_BUF_BLK_SIZE
 0x062

	)

192 
	#DP_DSC_RC_BUF_BLK_SIZE_1
 0x0

	)

193 
	#DP_DSC_RC_BUF_BLK_SIZE_4
 0x1

	)

194 
	#DP_DSC_RC_BUF_BLK_SIZE_16
 0x2

	)

195 
	#DP_DSC_RC_BUF_BLK_SIZE_64
 0x3

	)

197 
	#DP_DSC_RC_BUF_SIZE
 0x063

	)

199 
	#DP_DSC_SLICE_CAP_1
 0x064

	)

200 
	#DP_DSC_1_PER_DP_DSC_SINK
 (1 << 0)

	)

201 
	#DP_DSC_2_PER_DP_DSC_SINK
 (1 << 1)

	)

202 
	#DP_DSC_4_PER_DP_DSC_SINK
 (1 << 3)

	)

203 
	#DP_DSC_6_PER_DP_DSC_SINK
 (1 << 4)

	)

204 
	#DP_DSC_8_PER_DP_DSC_SINK
 (1 << 5)

	)

205 
	#DP_DSC_10_PER_DP_DSC_SINK
 (1 << 6)

	)

206 
	#DP_DSC_12_PER_DP_DSC_SINK
 (1 << 7)

	)

208 
	#DP_DSC_LINE_BUF_BIT_DEPTH
 0x065

	)

209 
	#DP_DSC_LINE_BUF_BIT_DEPTH_MASK
 (0x‡<< 0)

	)

210 
	#DP_DSC_LINE_BUF_BIT_DEPTH_9
 0x0

	)

211 
	#DP_DSC_LINE_BUF_BIT_DEPTH_10
 0x1

	)

212 
	#DP_DSC_LINE_BUF_BIT_DEPTH_11
 0x2

	)

213 
	#DP_DSC_LINE_BUF_BIT_DEPTH_12
 0x3

	)

214 
	#DP_DSC_LINE_BUF_BIT_DEPTH_13
 0x4

	)

215 
	#DP_DSC_LINE_BUF_BIT_DEPTH_14
 0x5

	)

216 
	#DP_DSC_LINE_BUF_BIT_DEPTH_15
 0x6

	)

217 
	#DP_DSC_LINE_BUF_BIT_DEPTH_16
 0x7

	)

218 
	#DP_DSC_LINE_BUF_BIT_DEPTH_8
 0x8

	)

220 
	#DP_DSC_BLK_PREDICTION_SUPPORT
 0x066

	)

221 
	#DP_DSC_BLK_PREDICTION_IS_SUPPORTED
 (1 << 0)

	)

223 
	#DP_DSC_MAX_BITS_PER_PIXEL_LOW
 0x067

	)

225 
	#DP_DSC_MAX_BITS_PER_PIXEL_HI
 0x068

	)

227 
	#DP_DSC_DEC_COLOR_FORMAT_CAP
 0x069

	)

228 
	#DP_DSC_RGB
 (1 << 0)

	)

229 
	#DP_DSC_YCbCr444
 (1 << 1)

	)

230 
	#DP_DSC_YCbCr422_Sim∂e
 (1 << 2)

	)

231 
	#DP_DSC_YCbCr422_N©ive
 (1 << 3)

	)

232 
	#DP_DSC_YCbCr420_N©ive
 (1 << 4)

	)

234 
	#DP_DSC_DEC_COLOR_DEPTH_CAP
 0x06A

	)

235 
	#DP_DSC_8_BPC
 (1 << 1)

	)

236 
	#DP_DSC_10_BPC
 (1 << 2)

	)

237 
	#DP_DSC_12_BPC
 (1 << 3)

	)

239 
	#DP_DSC_PEAK_THROUGHPUT
 0x06B

	)

240 
	#DP_DSC_THROUGHPUT_MODE_0_MASK
 (0x‡<< 0)

	)

241 
	#DP_DSC_THROUGHPUT_MODE_0_SHIFT
 0

	)

242 
	#DP_DSC_THROUGHPUT_MODE_0_340
 (1 << 0)

	)

243 
	#DP_DSC_THROUGHPUT_MODE_0_400
 (2 << 0)

	)

244 
	#DP_DSC_THROUGHPUT_MODE_0_450
 (3 << 0)

	)

245 
	#DP_DSC_THROUGHPUT_MODE_0_500
 (4 << 0)

	)

246 
	#DP_DSC_THROUGHPUT_MODE_0_550
 (5 << 0)

	)

247 
	#DP_DSC_THROUGHPUT_MODE_0_600
 (6 << 0)

	)

248 
	#DP_DSC_THROUGHPUT_MODE_0_650
 (7 << 0)

	)

249 
	#DP_DSC_THROUGHPUT_MODE_0_700
 (8 << 0)

	)

250 
	#DP_DSC_THROUGHPUT_MODE_0_750
 (9 << 0)

	)

251 
	#DP_DSC_THROUGHPUT_MODE_0_800
 (10 << 0)

	)

252 
	#DP_DSC_THROUGHPUT_MODE_0_850
 (11 << 0)

	)

253 
	#DP_DSC_THROUGHPUT_MODE_0_900
 (12 << 0)

	)

254 
	#DP_DSC_THROUGHPUT_MODE_0_950
 (13 << 0)

	)

255 
	#DP_DSC_THROUGHPUT_MODE_0_1000
 (14 << 0)

	)

256 
	#DP_DSC_THROUGHPUT_MODE_1_MASK
 (0x‡<< 4)

	)

257 
	#DP_DSC_THROUGHPUT_MODE_1_SHIFT
 4

	)

258 
	#DP_DSC_THROUGHPUT_MODE_1_340
 (1 << 4)

	)

259 
	#DP_DSC_THROUGHPUT_MODE_1_400
 (2 << 4)

	)

260 
	#DP_DSC_THROUGHPUT_MODE_1_450
 (3 << 4)

	)

261 
	#DP_DSC_THROUGHPUT_MODE_1_500
 (4 << 4)

	)

262 
	#DP_DSC_THROUGHPUT_MODE_1_550
 (5 << 4)

	)

263 
	#DP_DSC_THROUGHPUT_MODE_1_600
 (6 << 4)

	)

264 
	#DP_DSC_THROUGHPUT_MODE_1_650
 (7 << 4)

	)

265 
	#DP_DSC_THROUGHPUT_MODE_1_700
 (8 << 4)

	)

266 
	#DP_DSC_THROUGHPUT_MODE_1_750
 (9 << 4)

	)

267 
	#DP_DSC_THROUGHPUT_MODE_1_800
 (10 << 4)

	)

268 
	#DP_DSC_THROUGHPUT_MODE_1_850
 (11 << 4)

	)

269 
	#DP_DSC_THROUGHPUT_MODE_1_900
 (12 << 4)

	)

270 
	#DP_DSC_THROUGHPUT_MODE_1_950
 (13 << 4)

	)

271 
	#DP_DSC_THROUGHPUT_MODE_1_1000
 (14 << 4)

	)

273 
	#DP_DSC_MAX_SLICE_WIDTH
 0x06C

	)

275 
	#DP_DSC_SLICE_CAP_2
 0x06D

	)

276 
	#DP_DSC_16_PER_DP_DSC_SINK
 (1 << 0)

	)

277 
	#DP_DSC_20_PER_DP_DSC_SINK
 (1 << 1)

	)

278 
	#DP_DSC_24_PER_DP_DSC_SINK
 (1 << 2)

	)

280 
	#DP_DSC_BITS_PER_PIXEL_INC
 0x06F

	)

281 
	#DP_DSC_BITS_PER_PIXEL_1_16
 0x0

	)

282 
	#DP_DSC_BITS_PER_PIXEL_1_8
 0x1

	)

283 
	#DP_DSC_BITS_PER_PIXEL_1_4
 0x2

	)

284 
	#DP_DSC_BITS_PER_PIXEL_1_2
 0x3

	)

285 
	#DP_DSC_BITS_PER_PIXEL_1
 0x4

	)

287 
	#DP_PSR_SUPPORT
 0x070

	)

288 
	#DP_PSR_IS_SUPPORTED
 1

	)

289 
	#DP_PSR2_IS_SUPPORTED
 2

	)

291 
	#DP_PSR_CAPS
 0x071

	)

292 
	#DP_PSR_NO_TRAIN_ON_EXIT
 1

	)

293 
	#DP_PSR_SETUP_TIME_330
 (0 << 1)

	)

294 
	#DP_PSR_SETUP_TIME_275
 (1 << 1)

	)

295 
	#DP_PSR_SETUP_TIME_220
 (2 << 1)

	)

296 
	#DP_PSR_SETUP_TIME_165
 (3 << 1)

	)

297 
	#DP_PSR_SETUP_TIME_110
 (4 << 1)

	)

298 
	#DP_PSR_SETUP_TIME_55
 (5 << 1)

	)

299 
	#DP_PSR_SETUP_TIME_0
 (6 << 1)

	)

300 
	#DP_PSR_SETUP_TIME_MASK
 (7 << 1)

	)

301 
	#DP_PSR_SETUP_TIME_SHIFT
 1

	)

302 
	#DP_PSR2_SU_Y_COORDINATE_REQUIRED
 (1 << 4Ë

	)

303 
	#DP_PSR2_SU_GRANULARITY_REQUIRED
 (1 << 5Ë

	)

313 
	#DP_DOWNSTREAM_PORT_0
 0x80

	)

314 
	#DP_DS_PORT_TYPE_MASK
 (7 << 0)

	)

315 
	#DP_DS_PORT_TYPE_DP
 0

	)

316 
	#DP_DS_PORT_TYPE_VGA
 1

	)

317 
	#DP_DS_PORT_TYPE_DVI
 2

	)

318 
	#DP_DS_PORT_TYPE_HDMI
 3

	)

319 
	#DP_DS_PORT_TYPE_NON_EDID
 4

	)

320 
	#DP_DS_PORT_TYPE_DP_DUALMODE
 5

	)

321 
	#DP_DS_PORT_TYPE_WIRELESS
 6

	)

322 
	#DP_DS_PORT_HPD
 (1 << 3)

	)

325 
	#DP_DS_MAX_BPC_MASK
 (3 << 0)

	)

326 
	#DP_DS_8BPC
 0

	)

327 
	#DP_DS_10BPC
 1

	)

328 
	#DP_DS_12BPC
 2

	)

329 
	#DP_DS_16BPC
 3

	)

332 
	#DP_LINK_BW_SET
 0x100

	)

333 
	#DP_LINK_RATE_TABLE
 0x00

	)

334 
	#DP_LINK_BW_1_62
 0x06

	)

335 
	#DP_LINK_BW_2_7
 0x0a

	)

336 
	#DP_LINK_BW_5_4
 0x14

	)

338 
	#DP_LANE_COUNT_SET
 0x101

	)

339 
	#DP_LANE_COUNT_MASK
 0x0f

	)

340 
	#DP_LANE_COUNT_ENHANCED_FRAME_EN
 (1 << 7)

	)

342 
	#DP_TRAINING_PATTERN_SET
 0x102

	)

343 
	#DP_TRAINING_PATTERN_DISABLE
 0

	)

344 
	#DP_TRAINING_PATTERN_1
 1

	)

345 
	#DP_TRAINING_PATTERN_2
 2

	)

346 
	#DP_TRAINING_PATTERN_3
 3

	)

347 
	#DP_TRAINING_PATTERN_MASK
 0x3

	)

350 
	#DP_LINK_QUAL_PATTERN_11_DISABLE
 (0 << 2)

	)

351 
	#DP_LINK_QUAL_PATTERN_11_D10_2
 (1 << 2)

	)

352 
	#DP_LINK_QUAL_PATTERN_11_ERROR_RATE
 (2 << 2)

	)

353 
	#DP_LINK_QUAL_PATTERN_11_PRBS7
 (3 << 2)

	)

354 
	#DP_LINK_QUAL_PATTERN_11_MASK
 (3 << 2)

	)

356 
	#DP_RECOVERED_CLOCK_OUT_EN
 (1 << 4)

	)

357 
	#DP_LINK_SCRAMBLING_DISABLE
 (1 << 5)

	)

359 
	#DP_SYMBOL_ERROR_COUNT_BOTH
 (0 << 6)

	)

360 
	#DP_SYMBOL_ERROR_COUNT_DISPARITY
 (1 << 6)

	)

361 
	#DP_SYMBOL_ERROR_COUNT_SYMBOL
 (2 << 6)

	)

362 
	#DP_SYMBOL_ERROR_COUNT_MASK
 (3 << 6)

	)

364 
	#DP_TRAINING_LANE0_SET
 0x103

	)

365 
	#DP_TRAINING_LANE1_SET
 0x104

	)

366 
	#DP_TRAINING_LANE2_SET
 0x105

	)

367 
	#DP_TRAINING_LANE3_SET
 0x106

	)

369 
	#DP_TRAIN_VOLTAGE_SWING_MASK
 0x3

	)

370 
	#DP_TRAIN_VOLTAGE_SWING_SHIFT
 0

	)

371 
	#DP_TRAIN_MAX_SWING_REACHED
 (1 << 2)

	)

372 
	#DP_TRAIN_VOLTAGE_SWING_LEVEL_0
 (0 << 0)

	)

373 
	#DP_TRAIN_VOLTAGE_SWING_LEVEL_1
 (1 << 0)

	)

374 
	#DP_TRAIN_VOLTAGE_SWING_LEVEL_2
 (2 << 0)

	)

375 
	#DP_TRAIN_VOLTAGE_SWING_LEVEL_3
 (3 << 0)

	)

377 
	#DP_TRAIN_PRE_EMPHASIS_MASK
 (3 << 3)

	)

378 
	#DP_TRAIN_PRE_EMPH_LEVEL_0
 (0 << 3)

	)

379 
	#DP_TRAIN_PRE_EMPH_LEVEL_1
 (1 << 3)

	)

380 
	#DP_TRAIN_PRE_EMPH_LEVEL_2
 (2 << 3)

	)

381 
	#DP_TRAIN_PRE_EMPH_LEVEL_3
 (3 << 3)

	)

383 
	#DP_TRAIN_PRE_EMPHASIS_SHIFT
 3

	)

384 
	#DP_TRAIN_MAX_PRE_EMPHASIS_REACHED
 (1 << 5)

	)

386 
	#DP_DOWNSPREAD_CTRL
 0x107

	)

387 
	#DP_SPREAD_AMP_0_5
 (1 << 4)

	)

388 
	#DP_MSA_TIMING_PAR_IGNORE_EN
 (1 << 7Ë

	)

390 
	#DP_MAIN_LINK_CHANNEL_CODING_SET
 0x108

	)

391 
	#DP_SET_ANSI_8B10B
 (1 << 0)

	)

393 
	#DP_I2C_SPEED_CONTROL_STATUS
 0x109

	)

396 
	#DP_EDP_CONFIGURATION_SET
 0x10®

	)

397 
	#DP_ALTERNATE_SCRAMBLER_RESET_ENABLE
 (1 << 0)

	)

398 
	#DP_FRAMING_CHANGE_ENABLE
 (1 << 1)

	)

399 
	#DP_PANEL_SELF_TEST_ENABLE
 (1 << 7)

	)

401 
	#DP_LINK_QUAL_LANE0_SET
 0x10b

	)

402 
	#DP_LINK_QUAL_LANE1_SET
 0x10c

	)

403 
	#DP_LINK_QUAL_LANE2_SET
 0x10d

	)

404 
	#DP_LINK_QUAL_LANE3_SET
 0x10e

	)

405 
	#DP_LINK_QUAL_PATTERN_DISABLE
 0

	)

406 
	#DP_LINK_QUAL_PATTERN_D10_2
 1

	)

407 
	#DP_LINK_QUAL_PATTERN_ERROR_RATE
 2

	)

408 
	#DP_LINK_QUAL_PATTERN_PRBS7
 3

	)

409 
	#DP_LINK_QUAL_PATTERN_80BIT_CUSTOM
 4

	)

410 
	#DP_LINK_QUAL_PATTERN_HBR2_EYE
 5

	)

411 
	#DP_LINK_QUAL_PATTERN_MASK
 7

	)

413 
	#DP_TRAINING_LANE0_1_SET2
 0x10f

	)

414 
	#DP_TRAINING_LANE2_3_SET2
 0x110

	)

415 
	#DP_LANE02_POST_CURSOR2_SET_MASK
 (3 << 0)

	)

416 
	#DP_LANE02_MAX_POST_CURSOR2_REACHED
 (1 << 2)

	)

417 
	#DP_LANE13_POST_CURSOR2_SET_MASK
 (3 << 4)

	)

418 
	#DP_LANE13_MAX_POST_CURSOR2_REACHED
 (1 << 6)

	)

420 
	#DP_MSTM_CTRL
 0x111

	)

421 
	#DP_MST_EN
 (1 << 0)

	)

422 
	#DP_UP_REQ_EN
 (1 << 1)

	)

423 
	#DP_UPSTREAM_IS_SRC
 (1 << 2)

	)

425 
	#DP_AUDIO_DELAY0
 0x112

	)

426 
	#DP_AUDIO_DELAY1
 0x113

	)

427 
	#DP_AUDIO_DELAY2
 0x114

	)

429 
	#DP_LINK_RATE_SET
 0x115

	)

430 
	#DP_LINK_RATE_SET_SHIFT
 0

	)

431 
	#DP_LINK_RATE_SET_MASK
 (7 << 0)

	)

433 
	#DP_RECEIVER_ALPM_CONFIG
 0x116

	)

434 
	#DP_ALPM_ENABLE
 (1 << 0)

	)

435 
	#DP_ALPM_LOCK_ERROR_IRQ_HPD_ENABLE
 (1 << 1)

	)

437 
	#DP_SINK_DEVICE_AUX_FRAME_SYNC_CONF
 0x117

	)

438 
	#DP_AUX_FRAME_SYNC_ENABLE
 (1 << 0)

	)

439 
	#DP_IRQ_HPD_ENABLE
 (1 << 1)

	)

441 
	#DP_UPSTREAM_DEVICE_DP_PWR_NEED
 0x118

	)

442 
	#DP_PWR_NOT_NEEDED
 (1 << 0)

	)

444 
	#DP_AUX_FRAME_SYNC_VALUE
 0x15¯

	)

445 
	#DP_AUX_FRAME_SYNC_VALID
 (1 << 0)

	)

447 
	#DP_DSC_ENABLE
 0x160

	)

449 
	#DP_PSR_EN_CFG
 0x170

	)

450 
	#DP_PSR_ENABLE
 (1 << 0)

	)

451 
	#DP_PSR_MAIN_LINK_ACTIVE
 (1 << 1)

	)

452 
	#DP_PSR_CRC_VERIFICATION
 (1 << 2)

	)

453 
	#DP_PSR_FRAME_CAPTURE
 (1 << 3)

	)

454 
	#DP_PSR_SELECTIVE_UPDATE
 (1 << 4)

	)

455 
	#DP_PSR_IRQ_HPD_WITH_CRC_ERRORS
 (1 << 5)

	)

457 
	#DP_ADAPTER_CTRL
 0x1a0

	)

458 
	#DP_ADAPTER_CTRL_FORCE_LOAD_SENSE
 (1 << 0)

	)

460 
	#DP_BRANCH_DEVICE_CTRL
 0x1a1

	)

461 
	#DP_BRANCH_DEVICE_IRQ_HPD
 (1 << 0)

	)

463 
	#DP_PAYLOAD_ALLOCATE_SET
 0x1c0

	)

464 
	#DP_PAYLOAD_ALLOCATE_START_TIME_SLOT
 0x1c1

	)

465 
	#DP_PAYLOAD_ALLOCATE_TIME_SLOT_COUNT
 0x1c2

	)

467 
	#DP_SINK_COUNT
 0x200

	)

469 
	#DP_GET_SINK_COUNT
(
x
Ë((((xË& 0x80Ë>> 1Ë| ((xË& 0x3f))

	)

470 
	#DP_SINK_CP_READY
 (1 << 6)

	)

472 
	#DP_DEVICE_SERVICE_IRQ_VECTOR
 0x201

	)

473 
	#DP_REMOTE_CONTROL_COMMAND_PENDING
 (1 << 0)

	)

474 
	#DP_AUTOMATED_TEST_REQUEST
 (1 << 1)

	)

475 
	#DP_CP_IRQ
 (1 << 2)

	)

476 
	#DP_MCCS_IRQ
 (1 << 3)

	)

477 
	#DP_DOWN_REP_MSG_RDY
 (1 << 4Ë

	)

478 
	#DP_UP_REQ_MSG_RDY
 (1 << 5Ë

	)

479 
	#DP_SINK_SPECIFIC_IRQ
 (1 << 6)

	)

481 
	#DP_LANE0_1_STATUS
 0x202

	)

482 
	#DP_LANE2_3_STATUS
 0x203

	)

483 
	#DP_LANE_CR_DONE
 (1 << 0)

	)

484 
	#DP_LANE_CHANNEL_EQ_DONE
 (1 << 1)

	)

485 
	#DP_LANE_SYMBOL_LOCKED
 (1 << 2)

	)

487 
	#DP_CHANNEL_EQ_BITS
 (
DP_LANE_CR_DONE
 | \

488 
DP_LANE_CHANNEL_EQ_DONE
 | \

489 
DP_LANE_SYMBOL_LOCKED
)

	)

491 
	#DP_LANE_ALIGN_STATUS_UPDATED
 0x204

	)

493 
	#DP_INTERLANE_ALIGN_DONE
 (1 << 0)

	)

494 
	#DP_DOWNSTREAM_PORT_STATUS_CHANGED
 (1 << 6)

	)

495 
	#DP_LINK_STATUS_UPDATED
 (1 << 7)

	)

497 
	#DP_SINK_STATUS
 0x205

	)

499 
	#DP_RECEIVE_PORT_0_STATUS
 (1 << 0)

	)

500 
	#DP_RECEIVE_PORT_1_STATUS
 (1 << 1)

	)

502 
	#DP_ADJUST_REQUEST_LANE0_1
 0x206

	)

503 
	#DP_ADJUST_REQUEST_LANE2_3
 0x207

	)

504 
	#DP_ADJUST_VOLTAGE_SWING_LANE0_MASK
 0x03

	)

505 
	#DP_ADJUST_VOLTAGE_SWING_LANE0_SHIFT
 0

	)

506 
	#DP_ADJUST_PRE_EMPHASIS_LANE0_MASK
 0x0c

	)

507 
	#DP_ADJUST_PRE_EMPHASIS_LANE0_SHIFT
 2

	)

508 
	#DP_ADJUST_VOLTAGE_SWING_LANE1_MASK
 0x30

	)

509 
	#DP_ADJUST_VOLTAGE_SWING_LANE1_SHIFT
 4

	)

510 
	#DP_ADJUST_PRE_EMPHASIS_LANE1_MASK
 0xc0

	)

511 
	#DP_ADJUST_PRE_EMPHASIS_LANE1_SHIFT
 6

	)

513 
	#DP_ADJUST_REQUEST_POST_CURSOR2
 0x20c

	)

515 
	#DP_TEST_REQUEST
 0x218

	)

516 
	#DP_TEST_LINK_TRAINING
 (1 << 0)

	)

517 
	#DP_TEST_LINK_VIDEO_PATTERN
 (1 << 1)

	)

518 
	#DP_TEST_LINK_EDID_READ
 (1 << 2)

	)

519 
	#DP_TEST_LINK_PHY_TEST_PATTERN
 (1 << 3Ë

	)

520 
	#DP_TEST_LINK_FAUX_PATTERN
 (1 << 4Ë

	)

522 
	#DP_TEST_LINK_RATE
 0x219

	)

523 
	#DP_LINK_RATE_162
 (0x6)

	)

524 
	#DP_LINK_RATE_27
 (0xa)

	)

526 
	#DP_TEST_LANE_COUNT
 0x220

	)

528 
	#DP_TEST_PATTERN
 0x221

	)

529 
	#DP_NO_TEST_PATTERN
 0x0

	)

530 
	#DP_COLOR_RAMP
 0x1

	)

531 
	#DP_BLACK_AND_WHITE_VERTICAL_LINES
 0x2

	)

532 
	#DP_COLOR_SQUARE
 0x3

	)

534 
	#DP_TEST_H_TOTAL_HI
 0x222

	)

535 
	#DP_TEST_H_TOTAL_LO
 0x223

	)

537 
	#DP_TEST_V_TOTAL_HI
 0x224

	)

538 
	#DP_TEST_V_TOTAL_LO
 0x225

	)

540 
	#DP_TEST_H_START_HI
 0x226

	)

541 
	#DP_TEST_H_START_LO
 0x227

	)

543 
	#DP_TEST_V_START_HI
 0x228

	)

544 
	#DP_TEST_V_START_LO
 0x229

	)

546 
	#DP_TEST_HSYNC_HI
 0x22A

	)

547 
	#DP_TEST_HSYNC_POLARITY
 (1 << 7)

	)

548 
	#DP_TEST_HSYNC_WIDTH_HI_MASK
 (127 << 0)

	)

549 
	#DP_TEST_HSYNC_WIDTH_LO
 0x22B

	)

551 
	#DP_TEST_VSYNC_HI
 0x22C

	)

552 
	#DP_TEST_VSYNC_POLARITY
 (1 << 7)

	)

553 
	#DP_TEST_VSYNC_WIDTH_HI_MASK
 (127 << 0)

	)

554 
	#DP_TEST_VSYNC_WIDTH_LO
 0x22D

	)

556 
	#DP_TEST_H_WIDTH_HI
 0x22E

	)

557 
	#DP_TEST_H_WIDTH_LO
 0x22F

	)

559 
	#DP_TEST_V_HEIGHT_HI
 0x230

	)

560 
	#DP_TEST_V_HEIGHT_LO
 0x231

	)

562 
	#DP_TEST_MISC0
 0x232

	)

563 
	#DP_TEST_SYNC_CLOCK
 (1 << 0)

	)

564 
	#DP_TEST_COLOR_FORMAT_MASK
 (3 << 1)

	)

565 
	#DP_TEST_COLOR_FORMAT_SHIFT
 1

	)

566 
	#DP_COLOR_FORMAT_RGB
 (0 << 1)

	)

567 
	#DP_COLOR_FORMAT_YCbCr422
 (1 << 1)

	)

568 
	#DP_COLOR_FORMAT_YCbCr444
 (2 << 1)

	)

569 
	#DP_TEST_DYNAMIC_RANGE_CEA
 (1 << 3)

	)

570 
	#DP_TEST_YCBCR_COEFFICIENTS
 (1 << 4)

	)

571 
	#DP_YCBCR_COEFFICIENTS_ITU601
 (0 << 4)

	)

572 
	#DP_YCBCR_COEFFICIENTS_ITU709
 (1 << 4)

	)

573 
	#DP_TEST_BIT_DEPTH_MASK
 (7 << 5)

	)

574 
	#DP_TEST_BIT_DEPTH_SHIFT
 5

	)

575 
	#DP_TEST_BIT_DEPTH_6
 (0 << 5)

	)

576 
	#DP_TEST_BIT_DEPTH_8
 (1 << 5)

	)

577 
	#DP_TEST_BIT_DEPTH_10
 (2 << 5)

	)

578 
	#DP_TEST_BIT_DEPTH_12
 (3 << 5)

	)

579 
	#DP_TEST_BIT_DEPTH_16
 (4 << 5)

	)

581 
	#DP_TEST_MISC1
 0x233

	)

582 
	#DP_TEST_REFRESH_DENOMINATOR
 (1 << 0)

	)

583 
	#DP_TEST_INTERLACED
 (1 << 1)

	)

585 
	#DP_TEST_REFRESH_RATE_NUMERATOR
 0x234

	)

587 
	#DP_TEST_MISC0
 0x232

	)

589 
	#DP_TEST_CRC_R_CR
 0x240

	)

590 
	#DP_TEST_CRC_G_Y
 0x242

	)

591 
	#DP_TEST_CRC_B_CB
 0x244

	)

593 
	#DP_TEST_SINK_MISC
 0x246

	)

594 
	#DP_TEST_CRC_SUPPORTED
 (1 << 5)

	)

595 
	#DP_TEST_COUNT_MASK
 0xf

	)

597 
	#DP_TEST_PHY_PATTERN
 0x248

	)

598 
	#DP_TEST_80BIT_CUSTOM_PATTERN_7_0
 0x250

	)

599 
	#DP_TEST_80BIT_CUSTOM_PATTERN_15_8
 0x251

	)

600 
	#DP_TEST_80BIT_CUSTOM_PATTERN_23_16
 0x252

	)

601 
	#DP_TEST_80BIT_CUSTOM_PATTERN_31_24
 0x253

	)

602 
	#DP_TEST_80BIT_CUSTOM_PATTERN_39_32
 0x254

	)

603 
	#DP_TEST_80BIT_CUSTOM_PATTERN_47_40
 0x255

	)

604 
	#DP_TEST_80BIT_CUSTOM_PATTERN_55_48
 0x256

	)

605 
	#DP_TEST_80BIT_CUSTOM_PATTERN_63_56
 0x257

	)

606 
	#DP_TEST_80BIT_CUSTOM_PATTERN_71_64
 0x258

	)

607 
	#DP_TEST_80BIT_CUSTOM_PATTERN_79_72
 0x259

	)

609 
	#DP_TEST_RESPONSE
 0x260

	)

610 
	#DP_TEST_ACK
 (1 << 0)

	)

611 
	#DP_TEST_NAK
 (1 << 1)

	)

612 
	#DP_TEST_EDID_CHECKSUM_WRITE
 (1 << 2)

	)

614 
	#DP_TEST_EDID_CHECKSUM
 0x261

	)

616 
	#DP_TEST_SINK
 0x270

	)

617 
	#DP_TEST_SINK_START
 (1 << 0)

	)

619 
	#DP_PAYLOAD_TABLE_UPDATE_STATUS
 0x2c0

	)

620 
	#DP_PAYLOAD_TABLE_UPDATED
 (1 << 0)

	)

621 
	#DP_PAYLOAD_ACT_HANDLED
 (1 << 1)

	)

623 
	#DP_VC_PAYLOAD_ID_SLOT_1
 0x2c1

	)

626 
	#DP_SOURCE_OUI
 0x300

	)

627 
	#DP_SINK_OUI
 0x400

	)

628 
	#DP_BRANCH_OUI
 0x500

	)

629 
	#DP_BRANCH_ID
 0x503

	)

630 
	#DP_BRANCH_REVISION_START
 0x509

	)

631 
	#DP_BRANCH_HW_REV
 0x509

	)

632 
	#DP_BRANCH_SW_REV
 0x50A

	)

634 
	#DP_SET_POWER
 0x600

	)

635 
	#DP_SET_POWER_D0
 0x1

	)

636 
	#DP_SET_POWER_D3
 0x2

	)

637 
	#DP_SET_POWER_MASK
 0x3

	)

638 
	#DP_SET_POWER_D3_AUX_ON
 0x5

	)

640 
	#DP_EDP_DPCD_REV
 0x700

	)

641 
	#DP_EDP_11
 0x00

	)

642 
	#DP_EDP_12
 0x01

	)

643 
	#DP_EDP_13
 0x02

	)

644 
	#DP_EDP_14
 0x03

	)

646 
	#DP_EDP_GENERAL_CAP_1
 0x701

	)

647 
	#DP_EDP_TCON_BACKLIGHT_ADJUSTMENT_CAP
 (1 << 0)

	)

648 
	#DP_EDP_BACKLIGHT_PIN_ENABLE_CAP
 (1 << 1)

	)

649 
	#DP_EDP_BACKLIGHT_AUX_ENABLE_CAP
 (1 << 2)

	)

650 
	#DP_EDP_PANEL_SELF_TEST_PIN_ENABLE_CAP
 (1 << 3)

	)

651 
	#DP_EDP_PANEL_SELF_TEST_AUX_ENABLE_CAP
 (1 << 4)

	)

652 
	#DP_EDP_FRC_ENABLE_CAP
 (1 << 5)

	)

653 
	#DP_EDP_COLOR_ENGINE_CAP
 (1 << 6)

	)

654 
	#DP_EDP_SET_POWER_CAP
 (1 << 7)

	)

656 
	#DP_EDP_BACKLIGHT_ADJUSTMENT_CAP
 0x702

	)

657 
	#DP_EDP_BACKLIGHT_BRIGHTNESS_PWM_PIN_CAP
 (1 << 0)

	)

658 
	#DP_EDP_BACKLIGHT_BRIGHTNESS_AUX_SET_CAP
 (1 << 1)

	)

659 
	#DP_EDP_BACKLIGHT_BRIGHTNESS_BYTE_COUNT
 (1 << 2)

	)

660 
	#DP_EDP_BACKLIGHT_AUX_PWM_PRODUCT_CAP
 (1 << 3)

	)

661 
	#DP_EDP_BACKLIGHT_FREQ_PWM_PIN_PASSTHRU_CAP
 (1 << 4)

	)

662 
	#DP_EDP_BACKLIGHT_FREQ_AUX_SET_CAP
 (1 << 5)

	)

663 
	#DP_EDP_DYNAMIC_BACKLIGHT_CAP
 (1 << 6)

	)

664 
	#DP_EDP_VBLANK_BACKLIGHT_UPDATE_CAP
 (1 << 7)

	)

666 
	#DP_EDP_GENERAL_CAP_2
 0x703

	)

667 
	#DP_EDP_OVERDRIVE_ENGINE_ENABLED
 (1 << 0)

	)

669 
	#DP_EDP_GENERAL_CAP_3
 0x704

	)

670 
	#DP_EDP_X_REGION_CAP_MASK
 (0x‡<< 0)

	)

671 
	#DP_EDP_X_REGION_CAP_SHIFT
 0

	)

672 
	#DP_EDP_Y_REGION_CAP_MASK
 (0x‡<< 4)

	)

673 
	#DP_EDP_Y_REGION_CAP_SHIFT
 4

	)

675 
	#DP_EDP_DISPLAY_CONTROL_REGISTER
 0x720

	)

676 
	#DP_EDP_BACKLIGHT_ENABLE
 (1 << 0)

	)

677 
	#DP_EDP_BLACK_VIDEO_ENABLE
 (1 << 1)

	)

678 
	#DP_EDP_FRC_ENABLE
 (1 << 2)

	)

679 
	#DP_EDP_COLOR_ENGINE_ENABLE
 (1 << 3)

	)

680 
	#DP_EDP_VBLANK_BACKLIGHT_UPDATE_ENABLE
 (1 << 7)

	)

682 
	#DP_EDP_BACKLIGHT_MODE_SET_REGISTER
 0x721

	)

683 
	#DP_EDP_BACKLIGHT_CONTROL_MODE_MASK
 (3 << 0)

	)

684 
	#DP_EDP_BACKLIGHT_CONTROL_MODE_PWM
 (0 << 0)

	)

685 
	#DP_EDP_BACKLIGHT_CONTROL_MODE_PRESET
 (1 << 0)

	)

686 
	#DP_EDP_BACKLIGHT_CONTROL_MODE_DPCD
 (2 << 0)

	)

687 
	#DP_EDP_BACKLIGHT_CONTROL_MODE_PRODUCT
 (3 << 0)

	)

688 
	#DP_EDP_BACKLIGHT_FREQ_PWM_PIN_PASSTHRU_ENABLE
 (1 << 2)

	)

689 
	#DP_EDP_BACKLIGHT_FREQ_AUX_SET_ENABLE
 (1 << 3)

	)

690 
	#DP_EDP_DYNAMIC_BACKLIGHT_ENABLE
 (1 << 4)

	)

691 
	#DP_EDP_REGIONAL_BACKLIGHT_ENABLE
 (1 << 5)

	)

692 
	#DP_EDP_UPDATE_REGION_BRIGHTNESS
 (1 << 6Ë

	)

694 
	#DP_EDP_BACKLIGHT_BRIGHTNESS_MSB
 0x722

	)

695 
	#DP_EDP_BACKLIGHT_BRIGHTNESS_LSB
 0x723

	)

697 
	#DP_EDP_PWMGEN_BIT_COUNT
 0x724

	)

698 
	#DP_EDP_PWMGEN_BIT_COUNT_CAP_MIN
 0x725

	)

699 
	#DP_EDP_PWMGEN_BIT_COUNT_CAP_MAX
 0x726

	)

700 
	#DP_EDP_PWMGEN_BIT_COUNT_MASK
 (0x1‡<< 0)

	)

702 
	#DP_EDP_BACKLIGHT_CONTROL_STATUS
 0x727

	)

704 
	#DP_EDP_BACKLIGHT_FREQ_SET
 0x728

	)

705 
	#DP_EDP_BACKLIGHT_FREQ_BASE_KHZ
 27000

	)

707 
	#DP_EDP_BACKLIGHT_FREQ_CAP_MIN_MSB
 0x72a

	)

708 
	#DP_EDP_BACKLIGHT_FREQ_CAP_MIN_MID
 0x72b

	)

709 
	#DP_EDP_BACKLIGHT_FREQ_CAP_MIN_LSB
 0x72c

	)

711 
	#DP_EDP_BACKLIGHT_FREQ_CAP_MAX_MSB
 0x72d

	)

712 
	#DP_EDP_BACKLIGHT_FREQ_CAP_MAX_MID
 0x72e

	)

713 
	#DP_EDP_BACKLIGHT_FREQ_CAP_MAX_LSB
 0x72f

	)

715 
	#DP_EDP_DBC_MINIMUM_BRIGHTNESS_SET
 0x732

	)

716 
	#DP_EDP_DBC_MAXIMUM_BRIGHTNESS_SET
 0x733

	)

718 
	#DP_EDP_REGIONAL_BACKLIGHT_BASE
 0x740

	)

719 
	#DP_EDP_REGIONAL_BACKLIGHT_0
 0x741

	)

721 
	#DP_SIDEBAND_MSG_DOWN_REQ_BASE
 0x1000

	)

722 
	#DP_SIDEBAND_MSG_UP_REP_BASE
 0x1200

	)

723 
	#DP_SIDEBAND_MSG_DOWN_REP_BASE
 0x1400

	)

724 
	#DP_SIDEBAND_MSG_UP_REQ_BASE
 0x1600

	)

726 
	#DP_SINK_COUNT_ESI
 0x2002

	)

728 
	#DP_SINK_COUNT_CP_READY
 (1 << 6)

	)

730 
	#DP_DEVICE_SERVICE_IRQ_VECTOR_ESI0
 0x2003

	)

732 
	#DP_DEVICE_SERVICE_IRQ_VECTOR_ESI1
 0x2004

	)

733 
	#DP_RX_GTC_MSTR_REQ_STATUS_CHANGE
 (1 << 0)

	)

734 
	#DP_LOCK_ACQUISITION_REQUEST
 (1 << 1)

	)

735 
	#DP_CEC_IRQ
 (1 << 2)

	)

737 
	#DP_LINK_SERVICE_IRQ_VECTOR_ESI0
 0x2005

	)

739 
	#DP_PSR_ERROR_STATUS
 0x2006

	)

740 
	#DP_PSR_LINK_CRC_ERROR
 (1 << 0)

	)

741 
	#DP_PSR_RFB_STORAGE_ERROR
 (1 << 1)

	)

742 
	#DP_PSR_VSC_SDP_UNCORRECTABLE_ERROR
 (1 << 2Ë

	)

744 
	#DP_PSR_ESI
 0x2007

	)

745 
	#DP_PSR_CAPS_CHANGE
 (1 << 0)

	)

747 
	#DP_PSR_STATUS
 0x2008

	)

748 
	#DP_PSR_SINK_INACTIVE
 0

	)

749 
	#DP_PSR_SINK_ACTIVE_SRC_SYNCED
 1

	)

750 
	#DP_PSR_SINK_ACTIVE_RFB
 2

	)

751 
	#DP_PSR_SINK_ACTIVE_SINK_SYNCED
 3

	)

752 
	#DP_PSR_SINK_ACTIVE_RESYNC
 4

	)

753 
	#DP_PSR_SINK_INTERNAL_ERROR
 7

	)

754 
	#DP_PSR_SINK_STATE_MASK
 0x07

	)

756 
	#DP_SYNCHRONIZATION_LATENCY_IN_SINK
 0x2009

	)

757 
	#DP_MAX_RESYNC_FRAME_COUNT_MASK
 (0x‡<< 0)

	)

758 
	#DP_MAX_RESYNC_FRAME_COUNT_SHIFT
 0

	)

759 
	#DP_LAST_ACTUAL_SYNCHRONIZATION_LATENCY_MASK
 (0x‡<< 4)

	)

760 
	#DP_LAST_ACTUAL_SYNCHRONIZATION_LATENCY_SHIFT
 4

	)

762 
	#DP_RECEIVER_ALPM_STATUS
 0x200b

	)

763 
	#DP_ALPM_LOCK_TIMEOUT_ERROR
 (1 << 0)

	)

765 
	#DP_DP13_DPCD_REV
 0x2200

	)

766 
	#DP_DP13_MAX_LINK_RATE
 0x2201

	)

768 
	#DP_DPRX_FEATURE_ENUMERATION_LIST
 0x2210

	)

769 
	#DP_GTC_CAP
 (1 << 0Ë

	)

770 
	#DP_SST_SPLIT_SDP_CAP
 (1 << 1Ë

	)

771 
	#DP_AV_SYNC_CAP
 (1 << 2Ë

	)

772 
	#DP_VSC_SDP_EXT_FOR_COLORIMETRY_SUPPORTED
 (1 << 3Ë

	)

773 
	#DP_VSC_EXT_VESA_SDP_SUPPORTED
 (1 << 4Ë

	)

774 
	#DP_VSC_EXT_VESA_SDP_CHAINING_SUPPORTED
 (1 << 5Ë

	)

775 
	#DP_VSC_EXT_CEA_SDP_SUPPORTED
 (1 << 6Ë

	)

776 
	#DP_VSC_EXT_CEA_SDP_CHAINING_SUPPORTED
 (1 << 7Ë

	)

779 
	#DP_CEC_TUNNELING_CAPABILITY
 0x3000

	)

780 
	#DP_CEC_TUNNELING_CAPABLE
 (1 << 0)

	)

781 
	#DP_CEC_SNOOPING_CAPABLE
 (1 << 1)

	)

782 
	#DP_CEC_MULTIPLE_LA_CAPABLE
 (1 << 2)

	)

784 
	#DP_CEC_TUNNELING_CONTROL
 0x3001

	)

785 
	#DP_CEC_TUNNELING_ENABLE
 (1 << 0)

	)

786 
	#DP_CEC_SNOOPING_ENABLE
 (1 << 1)

	)

788 
	#DP_CEC_RX_MESSAGE_INFO
 0x3002

	)

789 
	#DP_CEC_RX_MESSAGE_LEN_MASK
 (0x‡<< 0)

	)

790 
	#DP_CEC_RX_MESSAGE_LEN_SHIFT
 0

	)

791 
	#DP_CEC_RX_MESSAGE_HPD_STATE
 (1 << 4)

	)

792 
	#DP_CEC_RX_MESSAGE_HPD_LOST
 (1 << 5)

	)

793 
	#DP_CEC_RX_MESSAGE_ACKED
 (1 << 6)

	)

794 
	#DP_CEC_RX_MESSAGE_ENDED
 (1 << 7)

	)

796 
	#DP_CEC_TX_MESSAGE_INFO
 0x3003

	)

797 
	#DP_CEC_TX_MESSAGE_LEN_MASK
 (0x‡<< 0)

	)

798 
	#DP_CEC_TX_MESSAGE_LEN_SHIFT
 0

	)

799 
	#DP_CEC_TX_RETRY_COUNT_MASK
 (0x7 << 4)

	)

800 
	#DP_CEC_TX_RETRY_COUNT_SHIFT
 4

	)

801 
	#DP_CEC_TX_MESSAGE_SEND
 (1 << 7)

	)

803 
	#DP_CEC_TUNNELING_IRQ_FLAGS
 0x3004

	)

804 
	#DP_CEC_RX_MESSAGE_INFO_VALID
 (1 << 0)

	)

805 
	#DP_CEC_RX_MESSAGE_OVERFLOW
 (1 << 1)

	)

806 
	#DP_CEC_TX_MESSAGE_SENT
 (1 << 4)

	)

807 
	#DP_CEC_TX_LINE_ERROR
 (1 << 5)

	)

808 
	#DP_CEC_TX_ADDRESS_NACK_ERROR
 (1 << 6)

	)

809 
	#DP_CEC_TX_DATA_NACK_ERROR
 (1 << 7)

	)

811 
	#DP_CEC_LOGICAL_ADDRESS_MASK
 0x300E

	)

812 
	#DP_CEC_LOGICAL_ADDRESS_0
 (1 << 0)

	)

813 
	#DP_CEC_LOGICAL_ADDRESS_1
 (1 << 1)

	)

814 
	#DP_CEC_LOGICAL_ADDRESS_2
 (1 << 2)

	)

815 
	#DP_CEC_LOGICAL_ADDRESS_3
 (1 << 3)

	)

816 
	#DP_CEC_LOGICAL_ADDRESS_4
 (1 << 4)

	)

817 
	#DP_CEC_LOGICAL_ADDRESS_5
 (1 << 5)

	)

818 
	#DP_CEC_LOGICAL_ADDRESS_6
 (1 << 6)

	)

819 
	#DP_CEC_LOGICAL_ADDRESS_7
 (1 << 7)

	)

820 
	#DP_CEC_LOGICAL_ADDRESS_MASK_2
 0x300F

	)

821 
	#DP_CEC_LOGICAL_ADDRESS_8
 (1 << 0)

	)

822 
	#DP_CEC_LOGICAL_ADDRESS_9
 (1 << 1)

	)

823 
	#DP_CEC_LOGICAL_ADDRESS_10
 (1 << 2)

	)

824 
	#DP_CEC_LOGICAL_ADDRESS_11
 (1 << 3)

	)

825 
	#DP_CEC_LOGICAL_ADDRESS_12
 (1 << 4)

	)

826 
	#DP_CEC_LOGICAL_ADDRESS_13
 (1 << 5)

	)

827 
	#DP_CEC_LOGICAL_ADDRESS_14
 (1 << 6)

	)

828 
	#DP_CEC_LOGICAL_ADDRESS_15
 (1 << 7)

	)

830 
	#DP_CEC_RX_MESSAGE_BUFFER
 0x3010

	)

831 
	#DP_CEC_TX_MESSAGE_BUFFER
 0x3020

	)

832 
	#DP_CEC_MESSAGE_BUFFER_LENGTH
 0x10

	)

836 
	#DP_PEER_DEVICE_NONE
 0x0

	)

837 
	#DP_PEER_DEVICE_SOURCE_OR_SST
 0x1

	)

838 
	#DP_PEER_DEVICE_MST_BRANCHING
 0x2

	)

839 
	#DP_PEER_DEVICE_SST_SINK
 0x3

	)

840 
	#DP_PEER_DEVICE_DP_LEGACY_CONV
 0x4

	)

843 
	#DP_LINK_ADDRESS
 0x01

	)

844 
	#DP_CONNECTION_STATUS_NOTIFY
 0x02

	)

845 
	#DP_ENUM_PATH_RESOURCES
 0x10

	)

846 
	#DP_ALLOCATE_PAYLOAD
 0x11

	)

847 
	#DP_QUERY_PAYLOAD
 0x12

	)

848 
	#DP_RESOURCE_STATUS_NOTIFY
 0x13

	)

849 
	#DP_CLEAR_PAYLOAD_ID_TABLE
 0x14

	)

850 
	#DP_REMOTE_DPCD_READ
 0x20

	)

851 
	#DP_REMOTE_DPCD_WRITE
 0x21

	)

852 
	#DP_REMOTE_I2C_READ
 0x22

	)

853 
	#DP_REMOTE_I2C_WRITE
 0x23

	)

854 
	#DP_POWER_UP_PHY
 0x24

	)

855 
	#DP_POWER_DOWN_PHY
 0x25

	)

856 
	#DP_SINK_EVENT_NOTIFY
 0x30

	)

857 
	#DP_QUERY_STREAM_ENC_STATUS
 0x38

	)

860 
	#DP_NAK_WRITE_FAILURE
 0x01

	)

861 
	#DP_NAK_INVALID_READ
 0x02

	)

862 
	#DP_NAK_CRC_FAILURE
 0x03

	)

863 
	#DP_NAK_BAD_PARAM
 0x04

	)

864 
	#DP_NAK_DEFER
 0x05

	)

865 
	#DP_NAK_LINK_FAILURE
 0x06

	)

866 
	#DP_NAK_NO_RESOURCES
 0x07

	)

867 
	#DP_NAK_DPCD_FAIL
 0x08

	)

868 
	#DP_NAK_I2C_NAK
 0x09

	)

869 
	#DP_NAK_ALLOCATE_FAIL
 0x0a

	)

871 
	#MODE_I2C_START
 1

	)

872 
	#MODE_I2C_WRITE
 2

	)

873 
	#MODE_I2C_READ
 4

	)

874 
	#MODE_I2C_STOP
 8

	)

877 
	#DP_MST_PHYSICAL_PORT_0
 0

	)

878 
	#DP_MST_LOGICAL_PORT_0
 8

	)

880 
	#DP_LINK_STATUS_SIZE
 6

	)

881 
boﬁ
 
drm_dp_ch™√l_eq_ok
(c⁄° 
u8
 
lök_°©us
[
DP_LINK_STATUS_SIZE
],

882 
œ√_cou¡
);

883 
boﬁ
 
drm_dp_˛ock_ªcovîy_ok
(c⁄° 
u8
 
lök_°©us
[
DP_LINK_STATUS_SIZE
],

884 
œ√_cou¡
);

885 
u8
 
drm_dp_gë_adju°_ªque°_vﬁège
(c⁄° u8 
lök_°©us
[
DP_LINK_STATUS_SIZE
],

886 
œ√
);

887 
u8
 
drm_dp_gë_adju°_ªque°_¥e_emphasis
(c⁄° u8 
lök_°©us
[
DP_LINK_STATUS_SIZE
],

888 
œ√
);

890 
	#DP_BRANCH_OUI_HEADER_SIZE
 0xc

	)

891 
	#DP_RECEIVER_CAP_SIZE
 0xf

	)

892 
	#EDP_PSR_RECEIVER_CAP_SIZE
 2

	)

893 
	#EDP_DISPLAY_CTL_CAP_SIZE
 3

	)

895 
drm_dp_lök_åaö_˛ock_ªcovîy_dñay
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
]);

896 
drm_dp_lök_åaö_ch™√l_eq_dñay
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
]);

898 
u8
 
drm_dp_lök_øã_to_bw_code
(
lök_øã
);

899 
drm_dp_bw_code_to_lök_øã
(
u8
 
lök_bw
);

901 
	#DP_SDP_AUDIO_TIMESTAMP
 0x01

	)

902 
	#DP_SDP_AUDIO_STREAM
 0x02

	)

903 
	#DP_SDP_EXTENSION
 0x04

	)

904 
	#DP_SDP_AUDIO_COPYMANAGEMENT
 0x05

	)

905 
	#DP_SDP_ISRC
 0x06

	)

906 
	#DP_SDP_VSC
 0x07

	)

907 
	#DP_SDP_CAMERA_GENERIC
(
i
Ë(0x08 + (i)Ë

	)

908 
	#DP_SDP_PPS
 0x10

	)

909 
	#DP_SDP_VSC_EXT_VESA
 0x20

	)

910 
	#DP_SDP_VSC_EXT_CEA
 0x21

	)

913 
	sedp_sdp_hódî
 {

914 
u8
 
	mHB0
;

915 
u8
 
	mHB1
;

916 
u8
 
	mHB2
;

917 
u8
 
	mHB3
;

918 } 
	g__∑cked
;

920 
	#EDP_SDP_HEADER_REVISION_MASK
 0x1F

	)

921 
	#EDP_SDP_HEADER_VALID_PAYLOAD_BYTES
 0x1F

	)

923 
	sedp_vsc_p§
 {

924 
edp_sdp_hódî
 
	msdp_hódî
;

925 
u8
 
	mDB0
;

926 
u8
 
	mDB1
;

927 
u8
 
	mDB2
;

928 
u8
 
	mDB3
;

929 
u8
 
	mDB4
;

930 
u8
 
	mDB5
;

931 
u8
 
	mDB6
;

932 
u8
 
	mDB7
;

933 
u8
 
	mDB8_31
[24];

934 } 
	g__∑cked
;

936 
	#EDP_VSC_PSR_STATE_ACTIVE
 (1<<0)

	)

937 
	#EDP_VSC_PSR_UPDATE_RFB
 (1<<1)

	)

938 
	#EDP_VSC_PSR_CRC_VALUES_VALID
 (1<<2)

	)

940 
drm_dp_p§_£tup_time
(c⁄° 
u8
 
p§_ˇp
[
EDP_PSR_RECEIVER_CAP_SIZE
]);

942 
ölöe
 

943 
	$drm_dp_max_lök_øã
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
])

945  
	`drm_dp_bw_code_to_lök_øã
(
dpcd
[
DP_MAX_LINK_RATE
]);

946 
	}
}

948 
ölöe
 
u8


949 
	$drm_dp_max_œ√_cou¡
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
])

951  
dpcd
[
DP_MAX_LANE_COUNT
] & 
DP_MAX_LANE_COUNT_MASK
;

952 
	}
}

954 
ölöe
 
boﬁ


955 
	$drm_dp_íh™˚d_‰ame_ˇp
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
])

957  
dpcd
[
DP_DPCD_REV
] >= 0x11 &&

958 (
dpcd
[
DP_MAX_LANE_COUNT
] & 
DP_ENHANCED_FRAME_CAP
);

959 
	}
}

961 
ölöe
 
boﬁ


962 
	$drm_dp_çs3_suµ‹ãd
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
])

964  
dpcd
[
DP_DPCD_REV
] >= 0x12 &&

965 
dpcd
[
DP_MAX_LANE_COUNT
] & 
DP_TPS3_SUPPORTED
;

966 
	}
}

968 
ölöe
 
boﬁ


969 
	$drm_dp_is_bønch
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
])

971  
dpcd
[
DP_DOWNSTREAMPORT_PRESENT
] & 
DP_DWN_STRM_PORT_PRESENT
;

972 
	}
}

986 
	sdrm_dp_aux_msg
 {

987 
	maddªss
;

988 
u8
 
	mªque°
;

989 
u8
 
	mª∂y
;

990 *
	mbuf„r
;

991 
size_t
 
	msize
;

1034 
	sdrm_dp_aux
 {

1035 c⁄° *
	m«me
;

1036 
i2c_ad≠ãr
 
	mddc
;

1037 
devi˚
 *
	mdev
;

1038 
drm_¸tc
 *
	m¸tc
;

1039 
muãx
 
	mhw_muãx
;

1040 
w‹k_°ru˘
 
	m¸c_w‹k
;

1041 
u8
 
	m¸c_cou¡
;

1042 
ssize_t
 (*
å™s„r
)(
drm_dp_aux
 *
	maux
,

1043 
drm_dp_aux_msg
 *
	mmsg
);

1047 
	mi2c_«ck_cou¡
;

1051 
	mi2c_de„r_cou¡
;

1054 
ssize_t
 
drm_dp_dpcd_ªad
(
drm_dp_aux
 *
aux
, 
off£t
,

1055 *
buf„r
, 
size_t
 
size
);

1056 
ssize_t
 
drm_dp_dpcd_wrôe
(
drm_dp_aux
 *
aux
, 
off£t
,

1057 *
buf„r
, 
size_t
 
size
);

1068 
ölöe
 
ssize_t
 
	$drm_dp_dpcd_ªadb
(
drm_dp_aux
 *
aux
,

1069 
off£t
, 
u8
 *
vÆuï
)

1071  
	`drm_dp_dpcd_ªad
(
aux
, 
off£t
, 
vÆuï
, 1);

1072 
	}
}

1083 
ölöe
 
ssize_t
 
	$drm_dp_dpcd_wrôeb
(
drm_dp_aux
 *
aux
,

1084 
off£t
, 
u8
 
vÆue
)

1086  
	`drm_dp_dpcd_wrôe
(
aux
, 
off£t
, &
vÆue
, 1);

1087 
	}
}

1089 
drm_dp_dpcd_ªad_lök_°©us
(
drm_dp_aux
 *
aux
,

1090 
u8
 
°©us
[
DP_LINK_STATUS_SIZE
]);

1095 
	#DP_LINK_CAP_ENHANCED_FRAMING
 (1 << 0)

	)

1097 
	sdrm_dp_lök
 {

1098 
	mªvisi⁄
;

1099 
	møã
;

1100 
	mnum_œ√s
;

1101 
	mˇ∑bûôõs
;

1104 
drm_dp_lök_¥obe
(
drm_dp_aux
 *
aux
, 
drm_dp_lök
 *
lök
);

1105 
drm_dp_lök_powî_up
(
drm_dp_aux
 *
aux
, 
drm_dp_lök
 *
lök
);

1106 
drm_dp_lök_powî_down
(
drm_dp_aux
 *
aux
, 
drm_dp_lök
 *
lök
);

1107 
drm_dp_lök_c⁄figuª
(
drm_dp_aux
 *
aux
, 
drm_dp_lök
 *
lök
);

1108 
drm_dp_down°ªam_max_˛ock
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
],

1109 c⁄° 
u8
 
p‹t_ˇp
[4]);

1110 
drm_dp_down°ªam_max_bpc
(c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
],

1111 c⁄° 
u8
 
p‹t_ˇp
[4]);

1112 
drm_dp_down°ªam_id
(
drm_dp_aux
 *
aux
, 
id
[6]);

1113 
drm_dp_down°ªam_debug
(
£q_fûe
 *
m
, c⁄° 
u8
 
dpcd
[
DP_RECEIVER_CAP_SIZE
],

1114 c⁄° 
u8
 
p‹t_ˇp
[4], 
drm_dp_aux
 *
aux
);

1116 
drm_dp_aux_öô
(
drm_dp_aux
 *
aux
);

1117 
drm_dp_aux_ªgi°î
(
drm_dp_aux
 *
aux
);

1118 
drm_dp_aux_uƒegi°î
(
drm_dp_aux
 *
aux
);

1120 
drm_dp_°¨t_¸c
(
drm_dp_aux
 *
aux
, 
drm_¸tc
 *
¸tc
);

1121 
drm_dp_°›_¸c
(
drm_dp_aux
 *
aux
);

1123 
	sdrm_dp_dpcd_idít
 {

1124 
u8
 
	moui
[3];

1125 
u8
 
	mdevi˚_id
[6];

1126 
u8
 
	mhw_ªv
;

1127 
u8
 
	msw_maj‹_ªv
;

1128 
u8
 
	msw_mö‹_ªv
;

1129 } 
	g__∑cked
;

1136 
	sdrm_dp_desc
 {

1137 
drm_dp_dpcd_idít
 
	midít
;

1138 
u32
 
	mquúks
;

1141 
drm_dp_ªad_desc
(
drm_dp_aux
 *
aux
, 
drm_dp_desc
 *
desc
,

1142 
boﬁ
 
is_bønch
);

1151 
	edrm_dp_quúk
 {

1158 
	mDP_DPCD_QUIRK_LIMITED_M_N
,

1168 
ölöe
 
boﬁ


1169 
	$drm_dp_has_quúk
(c⁄° 
drm_dp_desc
 *
desc
, 
drm_dp_quúk
 
quúk
)

1171  
desc
->
quúks
 & 
	`BIT
(
quúk
);

1172 
	}
}

	@src/common/linuxkpi/include/drm/drm_dp_mst_helper.h

22 #i‚de‡
_DRM_DP_MST_HELPER_H_


23 
	#_DRM_DP_MST_HELPER_H_


	)

25 
	~<löux/ty≥s.h
>

26 
	~<drm/drm_dp_hñ≥r.h
>

27 
	~<drm/drm_©omic.h
>

29 
	gdrm_dp_m°_bønch
;

38 
	sdrm_dp_v˝i
 {

39 
	mv˝i
;

40 
	mpbn
;

41 
	mÆig√d_pbn
;

42 
	mnum_¶Ÿs
;

69 
	sdrm_dp_m°_p‹t
 {

70 
kªf
 
	mkªf
;

72 
u8
 
	mp‹t_num
;

73 
boﬁ
 
	möput
;

74 
boﬁ
 
	mmcs
;

75 
boﬁ
 
	mddps
;

76 
u8
 
	mpdt
;

77 
boﬁ
 
	mldps
;

78 
u8
 
	mdpcd_ªv
;

79 
u8
 
	mnum_sdp_°ªams
;

80 
u8
 
	mnum_sdp_°ªam_söks
;

81 
uöt16_t
 
	mavaûabÀ_pbn
;

82 
li°_hód
 
	m√xt
;

83 
drm_dp_m°_bønch
 *
	mm°b
;

84 
drm_dp_aux
 
	maux
;

85 
drm_dp_m°_bønch
 *
	m∑ª¡
;

87 
drm_dp_v˝i
 
	mv˝i
;

88 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
;

89 
drm_dp_m°_t›ﬁogy_mgr
 *
	mmgr
;

95 
edid
 *
	mˇched_edid
;

100 
boﬁ
 
	mhas_audio
;

123 
	sdrm_dp_m°_bønch
 {

124 
kªf
 
	mkªf
;

125 
u8
 
	mød
[8];

126 
u8
 
	ml˘
;

127 
	mnum_p‹ts
;

129 
	mmsg_¶Ÿs
;

130 
li°_hód
 
	mp‹ts
;

133 
drm_dp_m°_p‹t
 *
	mp‹t_∑ª¡
;

134 
drm_dp_m°_t›ﬁogy_mgr
 *
	mmgr
;

137 
drm_dp_sideb™d_msg_tx
 *
	mtx_¶Ÿs
[2];

138 
	mœ°_£qno
;

139 
boﬁ
 
	mlök_addªss_£¡
;

142 
u8
 
	mguid
[16];

147 
	sdrm_dp_sideb™d_msg_hdr
 {

148 
u8
 
	ml˘
;

149 
u8
 
	ml¸
;

150 
u8
 
	mød
[8];

151 
boﬁ
 
	mbrﬂdˇ°
;

152 
boﬁ
 
	m∑th_msg
;

153 
u8
 
	mmsg_Àn
;

154 
boﬁ
 
	msomt
;

155 
boﬁ
 
	meomt
;

156 
boﬁ
 
	m£qno
;

159 
	sdrm_dp_«k_ª∂y
 {

160 
u8
 
	mguid
[16];

161 
u8
 
	mªas⁄
;

162 
u8
 
	m«k_d©a
;

165 
	sdrm_dp_lök_addªss_ack_ª∂y
 {

166 
u8
 
	mguid
[16];

167 
u8
 
	m≈‹ts
;

168 
	sdrm_dp_lök_addr_ª∂y_p‹t
 {

169 
boﬁ
 
	möput_p‹t
;

170 
u8
 
	m≥î_devi˚_ty≥
;

171 
u8
 
	mp‹t_numbî
;

172 
boﬁ
 
	mmcs
;

173 
boﬁ
 
	mddps
;

174 
boﬁ
 
	mÀgacy_devi˚_∂ug_°©us
;

175 
u8
 
	mdpcd_ªvisi⁄
;

176 
u8
 
	m≥î_guid
[16];

177 
u8
 
	mnum_sdp_°ªams
;

178 
u8
 
	mnum_sdp_°ªam_söks
;

179 } 
	mp‹ts
[16];

182 
	sdrm_dp_ªmŸe_dpcd_ªad_ack_ª∂y
 {

183 
u8
 
	mp‹t_numbî
;

184 
u8
 
	mnum_byãs
;

185 
u8
 
	mbyãs
[255];

188 
	sdrm_dp_ªmŸe_dpcd_wrôe_ack_ª∂y
 {

189 
u8
 
	mp‹t_numbî
;

192 
	sdrm_dp_ªmŸe_dpcd_wrôe_«k_ª∂y
 {

193 
u8
 
	mp‹t_numbî
;

194 
u8
 
	mªas⁄
;

195 
u8
 
	mbyãs_wrôãn_bef‹e_Áûuª
;

198 
	sdrm_dp_ªmŸe_i2c_ªad_ack_ª∂y
 {

199 
u8
 
	mp‹t_numbî
;

200 
u8
 
	mnum_byãs
;

201 
u8
 
	mbyãs
[255];

204 
	sdrm_dp_ªmŸe_i2c_ªad_«k_ª∂y
 {

205 
u8
 
	mp‹t_numbî
;

206 
u8
 
	m«k_ªas⁄
;

207 
u8
 
	mi2c_«k_å™ß˘i⁄
;

210 
	sdrm_dp_ªmŸe_i2c_wrôe_ack_ª∂y
 {

211 
u8
 
	mp‹t_numbî
;

215 
	sdrm_dp_sideb™d_msg_rx
 {

216 
u8
 
	mchunk
[48];

217 
u8
 
	mmsg
[256];

218 
u8
 
	mcurchunk_Àn
;

219 
u8
 
	mcurchunk_idx
;

220 
u8
 
	mcurchunk_hdæí
;

221 
u8
 
	mcuæí
;

222 
boﬁ
 
	mhave_somt
;

223 
boﬁ
 
	mhave_eomt
;

224 
drm_dp_sideb™d_msg_hdr
 
	möôül_hdr
;

227 
	#DRM_DP_MAX_SDP_STREAMS
 16

	)

228 
	sdrm_dp_Æloˇã_∑ylﬂd
 {

229 
u8
 
	mp‹t_numbî
;

230 
u8
 
	mnumbî_sdp_°ªams
;

231 
u8
 
	mv˝i
;

232 
u16
 
	mpbn
;

233 
u8
 
	msdp_°ªam_sök
[
DRM_DP_MAX_SDP_STREAMS
];

236 
	sdrm_dp_Æloˇã_∑ylﬂd_ack_ª∂y
 {

237 
u8
 
	mp‹t_numbî
;

238 
u8
 
	mv˝i
;

239 
u16
 
	mÆloˇãd_pbn
;

242 
	sdrm_dp_c⁄√˘i⁄_°©us_nŸify
 {

243 
u8
 
	mguid
[16];

244 
u8
 
	mp‹t_numbî
;

245 
boﬁ
 
	mÀgacy_devi˚_∂ug_°©us
;

246 
boﬁ
 
	mdi•œyp‹t_devi˚_∂ug_°©us
;

247 
boﬁ
 
	mmesßge_ˇ∑bûôy_°©us
;

248 
boﬁ
 
	möput_p‹t
;

249 
u8
 
	m≥î_devi˚_ty≥
;

252 
	sdrm_dp_ªmŸe_dpcd_ªad
 {

253 
u8
 
	mp‹t_numbî
;

254 
u32
 
	mdpcd_addªss
;

255 
u8
 
	mnum_byãs
;

258 
	sdrm_dp_ªmŸe_dpcd_wrôe
 {

259 
u8
 
	mp‹t_numbî
;

260 
u32
 
	mdpcd_addªss
;

261 
u8
 
	mnum_byãs
;

262 
u8
 *
	mbyãs
;

265 
	#DP_REMOTE_I2C_READ_MAX_TRANSACTIONS
 4

	)

266 
	sdrm_dp_ªmŸe_i2c_ªad
 {

267 
u8
 
	mnum_å™ß˘i⁄s
;

268 
u8
 
	mp‹t_numbî
;

270 
u8
 
	mi2c_dev_id
;

271 
u8
 
	mnum_byãs
;

272 
u8
 *
	mbyãs
;

273 
u8
 
	mno_°›_bô
;

274 
u8
 
	mi2c_å™ß˘i⁄_dñay
;

275 } 
	må™ß˘i⁄s
[
DP_REMOTE_I2C_READ_MAX_TRANSACTIONS
];

276 
u8
 
	mªad_i2c_devi˚_id
;

277 
u8
 
	mnum_byãs_ªad
;

280 
	sdrm_dp_ªmŸe_i2c_wrôe
 {

281 
u8
 
	mp‹t_numbî
;

282 
u8
 
	mwrôe_i2c_devi˚_id
;

283 
u8
 
	mnum_byãs
;

284 
u8
 *
	mbyãs
;

288 
	sdrm_dp_p‹t_numbî_ªq
 {

289 
u8
 
	mp‹t_numbî
;

292 
	sdrm_dp_íum_∑th_ªsour˚s_ack_ª∂y
 {

293 
u8
 
	mp‹t_numbî
;

294 
u16
 
	mfuŒ_∑ylﬂd_bw_numbî
;

295 
u16
 
	mavaû_∑ylﬂd_bw_numbî
;

299 
	sdrm_dp_p‹t_numbî_ªp
 {

300 
u8
 
	mp‹t_numbî
;

303 
	sdrm_dp_quîy_∑ylﬂd
 {

304 
u8
 
	mp‹t_numbî
;

305 
u8
 
	mv˝i
;

308 
	sdrm_dp_ªsour˚_°©us_nŸify
 {

309 
u8
 
	mp‹t_numbî
;

310 
u8
 
	mguid
[16];

311 
u16
 
	mavaûabÀ_pbn
;

314 
	sdrm_dp_quîy_∑ylﬂd_ack_ª∂y
 {

315 
u8
 
	mp‹t_numbî
;

316 
u8
 
	mÆloˇãd_pbn
;

319 
	sdrm_dp_sideb™d_msg_ªq_body
 {

320 
u8
 
	mªq_ty≥
;

321 
	uack_ªq
 {

322 
drm_dp_c⁄√˘i⁄_°©us_nŸify
 
	mc⁄n_°©
;

323 
drm_dp_p‹t_numbî_ªq
 
	mp‹t_num
;

324 
drm_dp_ªsour˚_°©us_nŸify
 
	mªsour˚_°©
;

326 
drm_dp_quîy_∑ylﬂd
 
	mquîy_∑ylﬂd
;

327 
drm_dp_Æloˇã_∑ylﬂd
 
	mÆloˇã_∑ylﬂd
;

329 
drm_dp_ªmŸe_dpcd_ªad
 
	mdpcd_ªad
;

330 
drm_dp_ªmŸe_dpcd_wrôe
 
	mdpcd_wrôe
;

332 
drm_dp_ªmŸe_i2c_ªad
 
	mi2c_ªad
;

333 
drm_dp_ªmŸe_i2c_wrôe
 
	mi2c_wrôe
;

334 } 
	mu
;

337 
	sdrm_dp_sideb™d_msg_ª∂y_body
 {

338 
u8
 
	mª∂y_ty≥
;

339 
u8
 
	mªq_ty≥
;

340 
	uack_ª∂õs
 {

341 
drm_dp_«k_ª∂y
 
	m«k
;

342 
drm_dp_lök_addªss_ack_ª∂y
 
	mlök_addr
;

343 
drm_dp_p‹t_numbî_ªp
 
	mp‹t_numbî
;

345 
drm_dp_íum_∑th_ªsour˚s_ack_ª∂y
 
	m∑th_ªsour˚s
;

346 
drm_dp_Æloˇã_∑ylﬂd_ack_ª∂y
 
	mÆloˇã_∑ylﬂd
;

347 
drm_dp_quîy_∑ylﬂd_ack_ª∂y
 
	mquîy_∑ylﬂd
;

349 
drm_dp_ªmŸe_dpcd_ªad_ack_ª∂y
 
	mªmŸe_dpcd_ªad_ack
;

350 
drm_dp_ªmŸe_dpcd_wrôe_ack_ª∂y
 
	mªmŸe_dpcd_wrôe_ack
;

351 
drm_dp_ªmŸe_dpcd_wrôe_«k_ª∂y
 
	mªmŸe_dpcd_wrôe_«ck
;

353 
drm_dp_ªmŸe_i2c_ªad_ack_ª∂y
 
	mªmŸe_i2c_ªad_ack
;

354 
drm_dp_ªmŸe_i2c_ªad_«k_ª∂y
 
	mªmŸe_i2c_ªad_«ck
;

355 
drm_dp_ªmŸe_i2c_wrôe_ack_ª∂y
 
	mªmŸe_i2c_wrôe_ack
;

356 } 
	mu
;

360 
	#DRM_DP_SIDEBAND_TX_QUEUED
 0

	)

362 
	#DRM_DP_SIDEBAND_TX_START_SEND
 1

	)

364 
	#DRM_DP_SIDEBAND_TX_SENT
 2

	)

366 
	#DRM_DP_SIDEBAND_TX_RX
 3

	)

367 
	#DRM_DP_SIDEBAND_TX_TIMEOUT
 4

	)

369 
	sdrm_dp_sideb™d_msg_tx
 {

370 
u8
 
	mmsg
[256];

371 
u8
 
	mchunk
[48];

372 
u8
 
	mcur_off£t
;

373 
u8
 
	mcur_Àn
;

374 
drm_dp_m°_bønch
 *
	md°
;

375 
li°_hód
 
	m√xt
;

376 
	m£qno
;

377 
	m°©e
;

378 
boﬁ
 
	m∑th_msg
;

379 
drm_dp_sideb™d_msg_ª∂y_body
 
	mª∂y
;

383 
	gdrm_dp_m°_t›ﬁogy_mgr
;

384 
	sdrm_dp_m°_t›ﬁogy_cbs
 {

386 
	mdrm_c⁄√˘‹
 *(*
	madd_c⁄√˘‹
)(
drm_dp_m°_t›ﬁogy_mgr
 *
	mmgr
, 
drm_dp_m°_p‹t
 *
	mp‹t
, c⁄° *
	m∑th
);

387 (*
	mªgi°î_c⁄√˘‹
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

388 (*
	mde°roy_c⁄√˘‹
)(
drm_dp_m°_t›ﬁogy_mgr
 *
	mmgr
,

389 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

390 (*
	mhŸ∂ug
)(
drm_dp_m°_t›ﬁogy_mgr
 *
	mmgr
);

394 
	#DP_MAX_PAYLOAD
 ((Ë* 8)

	)

396 
	#DP_PAYLOAD_LOCAL
 1

	)

397 
	#DP_PAYLOAD_REMOTE
 2

	)

398 
	#DP_PAYLOAD_DELETE_LOCAL
 3

	)

400 
	sdrm_dp_∑ylﬂd
 {

401 
	m∑ylﬂd_°©e
;

402 
	m°¨t_¶Ÿ
;

403 
	mnum_¶Ÿs
;

404 
	mv˝i
;

407 
	#to_dp_m°_t›ﬁogy_°©e
(
x
Ë
	`c⁄èöî_of
(x, 
drm_dp_m°_t›ﬁogy_°©e
, 
ba£
)

	)

409 
	sdrm_dp_m°_t›ﬁogy_°©e
 {

410 
drm_¥iv©e_°©e
 
	mba£
;

411 
	mavaû_¶Ÿs
;

412 
drm_©omic_°©e
 *
	m°©e
;

413 
drm_dp_m°_t›ﬁogy_mgr
 *
	mmgr
;

416 
	#to_dp_m°_t›ﬁogy_mgr
(
x
Ë
	`c⁄èöî_of
(x, 
drm_dp_m°_t›ﬁogy_mgr
, 
ba£
)

	)

425 
	sdrm_dp_m°_t›ﬁogy_mgr
 {

429 
drm_¥iv©e_obj
 
	mba£
;

434 
drm_devi˚
 *
	mdev
;

438 c⁄° 
drm_dp_m°_t›ﬁogy_cbs
 *
	mcbs
;

443 
	mmax_dpcd_å™ß˘i⁄_byãs
;

448 
drm_dp_aux
 *
	maux
;

452 
	mmax_∑ylﬂds
;

457 
	mc⁄n_ba£_id
;

464 
drm_dp_sideb™d_msg_rx
 
	mdown_ªp_ªcv
;

470 
drm_dp_sideb™d_msg_rx
 
	mup_ªq_ªcv
;

475 
muãx
 
	mlock
;

481 
boﬁ
 
	mm°_°©e
;

485 
drm_dp_m°_bønch
 *
	mm°_¥im¨y
;

490 
u8
 
	mdpcd
[
DP_RECEIVER_CAP_SIZE
];

494 
u8
 
	msök_cou¡
;

498 
	mpbn_div
;

503 
drm_dp_m°_t›ﬁogy_°©e
 *
	m°©e
;

508 c⁄° 
drm_¥iv©e_°©e_funcs
 *
	mfuncs
;

514 
muãx
 
	mqlock
;

518 
li°_hód
 
	mtx_msg_downq
;

523 
muãx
 
	m∑ylﬂd_lock
;

528 
drm_dp_v˝i
 **
	m¥›o£d_v˝is
;

532 
drm_dp_∑ylﬂd
 *
	m∑ylﬂds
;

538 
	m∑ylﬂd_mask
;

542 
	mv˝i_mask
;

547 
waô_queue_hód_t
 
	mtx_waôq
;

551 
w‹k_°ru˘
 
	mw‹k
;

556 
w‹k_°ru˘
 
	mtx_w‹k
;

561 
li°_hód
 
	mde°roy_c⁄√˘‹_li°
;

565 
muãx
 
	mde°roy_c⁄√˘‹_lock
;

570 
w‹k_°ru˘
 
	mde°roy_c⁄√˘‹_w‹k
;

573 
drm_dp_m°_t›ﬁogy_mgr_öô
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

574 
drm_devi˚
 *
dev
, 
drm_dp_aux
 *
aux
,

575 
max_dpcd_å™ß˘i⁄_byãs
,

576 
max_∑ylﬂds
, 
c⁄n_ba£_id
);

578 
drm_dp_m°_t›ﬁogy_mgr_de°roy
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

581 
drm_dp_m°_t›ﬁogy_mgr_£t_m°
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
, 
boﬁ
 
m°_°©e
);

584 
drm_dp_m°_hpd_úq
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
, 
u8
 *
esi
, 
boﬁ
 *
h™dÀd
);

587 
drm_c⁄√˘‹_°©us
 
drm_dp_m°_dëe˘_p‹t
(
drm_c⁄√˘‹
 *
c⁄√˘‹
, 
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
, 
drm_dp_m°_p‹t
 *
p‹t
);

589 
boﬁ
 
drm_dp_m°_p‹t_has_audio
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

590 
drm_dp_m°_p‹t
 *
p‹t
);

591 
edid
 *
drm_dp_m°_gë_edid
(
drm_c⁄√˘‹
 *
c⁄√˘‹
, 
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
, 
drm_dp_m°_p‹t
 *
p‹t
);

594 
drm_dp_ˇlc_pbn_mode
(
˛ock
, 
bµ
);

597 
boﬁ
 
drm_dp_m°_Æloˇã_v˝i
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

598 
drm_dp_m°_p‹t
 *
p‹t
, 
pbn
, 
¶Ÿs
);

600 
drm_dp_m°_gë_v˝i_¶Ÿs
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
, 
drm_dp_m°_p‹t
 *
p‹t
);

603 
drm_dp_m°_ª£t_v˝i_¶Ÿs
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
, 
drm_dp_m°_p‹t
 *
p‹t
);

606 
drm_dp_m°_dóŒoˇã_v˝i
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

607 
drm_dp_m°_p‹t
 *
p‹t
);

610 
drm_dp_föd_v˝i_¶Ÿs
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

611 
pbn
);

614 
drm_dp_upd©e_∑ylﬂd_∑π1
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

617 
drm_dp_upd©e_∑ylﬂd_∑π2
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

619 
drm_dp_check_a˘_°©us
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

621 
drm_dp_m°_dump_t›ﬁogy
(
£q_fûe
 *
m
,

622 
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

624 
drm_dp_m°_t›ﬁogy_mgr_su•íd
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

625 
drm_dp_m°_t›ﬁogy_mgr_ªsume
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

626 
drm_dp_m°_t›ﬁogy_°©e
 *
drm_©omic_gë_m°_t›ﬁogy_°©e
(
drm_©omic_°©e
 *
°©e
,

627 
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
);

628 
drm_dp_©omic_föd_v˝i_¶Ÿs
(
drm_©omic_°©e
 *
°©e
,

629 
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

630 
drm_dp_m°_p‹t
 *
p‹t
, 
pbn
);

631 
drm_dp_©omic_ªÀa£_v˝i_¶Ÿs
(
drm_©omic_°©e
 *
°©e
,

632 
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

633 
¶Ÿs
);

634 
drm_dp_£nd_powî_updown_phy
(
drm_dp_m°_t›ﬁogy_mgr
 *
mgr
,

635 
drm_dp_m°_p‹t
 *
p‹t
, 
boﬁ
 
powî_up
);

	@src/common/linuxkpi/include/drm/drm_drv.h

27 #i‚de‡
_DRM_DRV_H_


28 
	#_DRM_DRV_H_


	)

30 
	~<löux/li°.h
>

31 
	~<löux/úqªtu∫.h
>

33 
	~<drm/drm_devi˚.h
>

35 
	gdrm_fûe
;

36 
	gdrm_gem_obje˘
;

37 
	gdrm_ma°î
;

38 
	gdrm_mö‹
;

39 
	gdma_buf_©èchmít
;

40 
	gdrm_di•œy_mode
;

41 
	gdrm_mode_¸óã_dumb
;

42 
	gdrm_¥öãr
;

45 
	#DRIVER_USE_AGP
 0x1

	)

46 
	#DRIVER_LEGACY
 0x2

	)

47 
	#DRIVER_PCI_DMA
 0x8

	)

48 
	#DRIVER_SG
 0x10

	)

49 
	#DRIVER_HAVE_DMA
 0x20

	)

50 
	#DRIVER_HAVE_IRQ
 0x40

	)

51 
	#DRIVER_IRQ_SHARED
 0x80

	)

52 
	#DRIVER_GEM
 0x1000

	)

53 
	#DRIVER_MODESET
 0x2000

	)

54 
	#DRIVER_PRIME
 0x4000

	)

55 
	#DRIVER_RENDER
 0x8000

	)

56 
	#DRIVER_ATOMIC
 0x10000

	)

57 
	#DRIVER_KMS_LEGACY_CONTEXT
 0x20000

	)

58 
	#DRIVER_SYNCOBJ
 0x40000

	)

59 
	#DRIVER_PREFER_XBGR_30BPP
 0x80000

	)

70 
	sdrm_drivî
 {

88 (*
	mlﬂd
Ë(
	mdrm_devi˚
 *, 
	mÊags
);

108 (*
	m›í
Ë(
	mdrm_devi˚
 *, 
	mdrm_fûe
 *);

122 (*
	mpo°˛o£
Ë(
	mdrm_devi˚
 *, 
	mdrm_fûe
 *);

150 (*
	mœ°˛o£
Ë(
	mdrm_devi˚
 *);

167 (*
	mu∆ﬂd
Ë(
	mdrm_devi˚
 *);

177 (*
	mªÀa£
Ë(
	mdrm_devi˚
 *);

200 
u32
 (*
gë_vbœnk_cou¡î
Ë(
drm_devi˚
 *
	mdev
, 
	mpùe
);

216 (*
	míabÀ_vbœnk
Ë(
drm_devi˚
 *
	mdev
, 
	mpùe
);

227 (*
	mdißbÀ_vbœnk
Ë(
drm_devi˚
 *
	mdev
, 
	mpùe
);

279 
boﬁ
 (*
gë_sˇnout_posôi⁄
Ë(
drm_devi˚
 *
	mdev
, 
	mpùe
,

280 
boﬁ
 
	mö_vbœnk_úq
, *
	mvpos
, *
	mhpos
,

281 
ktime_t
 *
	m°ime
, ktime_à*
	mëime
,

282 c⁄° 
drm_di•œy_mode
 *
	mmode
);

327 
boﬁ
 (*
gë_vbœnk_time°amp
Ë(
drm_devi˚
 *
	mdev
, 
	mpùe
,

328 *
	mmax_îr‹
,

329 
ktime_t
 *
	mvbœnk_time
,

330 
boﬁ
 
	mö_vbœnk_úq
);

338 
úqªtu∫_t
(*
úq_h™dÀr
Ë(
	múq
, *
	m¨g
);

348 (*
	múq_¥eö°Æl
Ë(
drm_devi˚
 *
	mdev
);

357 (*
	múq_po°ö°Æl
Ë(
drm_devi˚
 *
	mdev
);

366 (*
	múq_unö°Æl
Ë(
drm_devi˚
 *
	mdev
);

373 (*
	mma°î_¸óã
)(
drm_devi˚
 *
	mdev
, 
drm_ma°î
 *
	mma°î
);

380 (*
	mma°î_de°roy
)(
drm_devi˚
 *
	mdev
, 
drm_ma°î
 *
	mma°î
);

387 (*
	mma°î_£t
)(
drm_devi˚
 *
	mdev
, 
drm_fûe
 *
	mfûe_¥iv
,

388 
boﬁ
 
	m‰om_›í
);

394 (*
	mma°î_dr›
)(
drm_devi˚
 *
	mdev
, 
drm_fûe
 *
	mfûe_¥iv
);

401 (*
	mdebugfs_öô
)(
drm_mö‹
 *
	mmö‹
);

409 (*
	mgem_‰ì_obje˘
Ë(
drm_gem_obje˘
 *
	mobj
);

417 (*
	mgem_‰ì_obje˘_u∆ocked
Ë(
drm_gem_obje˘
 *
	mobj
);

424 (*
	mgem_›í_obje˘
Ë(
	mdrm_gem_obje˘
 *, 
	mdrm_fûe
 *);

431 (*
	mgem_˛o£_obje˘
Ë(
	mdrm_gem_obje˘
 *, 
	mdrm_fûe
 *);

444 (*
	mgem_¥öt_öfo
)(
drm_¥öãr
 *
	mp
, 
	mödít
,

445 c⁄° 
drm_gem_obje˘
 *
	mobj
);

453 
	mdrm_gem_obje˘
 *(*
	mgem_¸óã_obje˘
)(
drm_devi˚
 *
	mdev
,

454 
size_t
 
	msize
);

462 (*
	m¥ime_h™dÀ_to_fd
)(
drm_devi˚
 *
	mdev
, 
drm_fûe
 *
	mfûe_¥iv
,

463 
uöt32_t
 
	mh™dÀ
, uöt32_à
	mÊags
, *
	m¥ime_fd
);

469 (*
	m¥ime_fd_to_h™dÀ
)(
drm_devi˚
 *
	mdev
, 
drm_fûe
 *
	mfûe_¥iv
,

470 
	m¥ime_fd
, 
uöt32_t
 *
	mh™dÀ
);

476 
	mdma_buf
 * (*
	mgem_¥ime_exp‹t
)(
drm_devi˚
 *
	mdev
,

477 
drm_gem_obje˘
 *
	mobj
, 
	mÊags
);

483 
	mdrm_gem_obje˘
 * (*
	mgem_¥ime_imp‹t
)(
drm_devi˚
 *
	mdev
,

484 
dma_buf
 *
	mdma_buf
);

485 (*
	mgem_¥ime_pö
)(
drm_gem_obje˘
 *
	mobj
);

486 (*
	mgem_¥ime_u≈ö
)(
drm_gem_obje˘
 *
	mobj
);

487 
	mª£rv©i⁄_obje˘
 * (*
	mgem_¥ime_ªs_obj
)(

488 
drm_gem_obje˘
 *
	mobj
);

489 
	msg_èbÀ
 *(*
	mgem_¥ime_gë_sg_èbÀ
)(
drm_gem_obje˘
 *
	mobj
);

490 
	mdrm_gem_obje˘
 *(*
	mgem_¥ime_imp‹t_sg_èbÀ
)(

491 
drm_devi˚
 *
	mdev
,

492 
dma_buf_©èchmít
 *
	m©èch
,

493 
sg_èbÀ
 *
	msgt
);

494 *(*
	mgem_¥ime_vm≠
)(
drm_gem_obje˘
 *
	mobj
);

495 (*
	mgem_¥ime_vunm≠
)(
drm_gem_obje˘
 *
	mobj
, *
	mvaddr
);

496 (*
	mgem_¥ime_mm≠
)(
drm_gem_obje˘
 *
	mobj
,

497 
vm_¨ó_°ru˘
 *
	mvma
);

520 (*
	mdumb_¸óã
)(
drm_fûe
 *
	mfûe_¥iv
,

521 
drm_devi˚
 *
	mdev
,

522 
drm_mode_¸óã_dumb
 *
	m¨gs
);

536 (*
	mdumb_m≠_off£t
)(
drm_fûe
 *
	mfûe_¥iv
,

537 
drm_devi˚
 *
	mdev
, 
uöt32_t
 
	mh™dÀ
,

538 
uöt64_t
 *
	moff£t
);

552 (*
	mdumb_de°roy
)(
drm_fûe
 *
	mfûe_¥iv
,

553 
drm_devi˚
 *
	mdev
,

554 
uöt32_t
 
	mh™dÀ
);

559 c⁄° 
vm_›î©i⁄s_°ru˘
 *
	mgem_vm_›s
;

562 
	mmaj‹
;

564 
	mmö‹
;

566 
	m∑tchÀvñ
;

568 *
	m«me
;

570 *
	mdesc
;

572 *
	md©e
;

575 
u32
 
	mdrivî_„©uªs
;

585 c⁄° 
drm_io˘l_desc
 *
	mio˘ls
;

587 
	mnum_io˘ls
;

596 c⁄° 
fûe_›î©i⁄s
 *
	mf›s
;

602 
li°_hód
 
	mÀgacy_dev_li°
;

603 (*
	mfú°›í
Ë(
	mdrm_devi˚
 *);

604 (*
	m¥e˛o£
Ë(
	mdrm_devi˚
 *, 
drm_fûe
 *
	mfûe_¥iv
);

605 (*
	mdma_io˘l
Ë(
drm_devi˚
 *
	mdev
, *
	md©a
, 
drm_fûe
 *
	mfûe_¥iv
);

606 (*
	mdma_quõs˚¡
Ë(
	mdrm_devi˚
 *);

607 (*
	mc⁄ãxt_dt‹
Ë(
drm_devi˚
 *
	mdev
, 
	mc⁄ãxt
);

608 
	mdev_¥iv_size
;

611 
drm_debug
;

613 
drm_dev_öô
(
drm_devi˚
 *
dev
,

614 
drm_drivî
 *
drivî
,

615 
devi˚
 *
∑ª¡
);

616 
drm_dev_föi
(
drm_devi˚
 *
dev
);

618 
drm_devi˚
 *
drm_dev_Æloc
(
drm_drivî
 *
drivî
,

619 
devi˚
 *
∑ª¡
);

620 
drm_dev_ªgi°î
(
drm_devi˚
 *
dev
, 
Êags
);

621 
drm_dev_uƒegi°î
(
drm_devi˚
 *
dev
);

623 
drm_dev_gë
(
drm_devi˚
 *
dev
);

624 
drm_dev_put
(
drm_devi˚
 *
dev
);

625 
drm_dev_uƒef
(
drm_devi˚
 *
dev
);

626 
drm_put_dev
(
drm_devi˚
 *
dev
);

627 
drm_dev_u≈lug
(
drm_devi˚
 *
dev
);

638 
ölöe
 
	$drm_dev_is_u≈lugged
(
drm_devi˚
 *
dev
)

640 
ªt
 = 
	`©omic_ªad
(&
dev
->
u≈lugged
);

641 
	`smp_rmb
();

642  
ªt
;

643 
	}
}

646 
drm_dev_£t_unique
(
drm_devi˚
 *
dev
, c⁄° *
«me
);

	@src/common/linuxkpi/include/drm/drm_edid.h

23 #i‚de‡
__DRM_EDID_H__


24 
	#__DRM_EDID_H__


	)

26 
	~<löux/ty≥s.h
>

27 
	~<löux/hdmi.h
>

29 
	gdrm_devi˚
;

30 
	gi2c_ad≠ãr
;

32 
	#EDID_LENGTH
 128

	)

33 
	#DDC_ADDR
 0x50

	)

34 
	#DDC_ADDR2
 0x52

	)

36 
	#CEA_EXT
 0x02

	)

37 
	#VTB_EXT
 0x10

	)

38 
	#DI_EXT
 0x40

	)

39 
	#LS_EXT
 0x50

	)

40 
	#MI_EXT
 0x60

	)

41 
	#DISPLAYID_EXT
 0x70

	)

43 
	se°_timögs
 {

44 
u8
 
	mt1
;

45 
u8
 
	mt2
;

46 
u8
 
	mmfg_rsvd
;

47 } 
__©åibuã__
((
∑cked
));

50 
	#EDID_TIMING_ASPECT_SHIFT
 6

	)

51 
	#EDID_TIMING_ASPECT_MASK
 (0x3 << 
EDID_TIMING_ASPECT_SHIFT
)

	)

54 
	#EDID_TIMING_VFREQ_SHIFT
 0

	)

55 
	#EDID_TIMING_VFREQ_MASK
 (0x3‡<< 
EDID_TIMING_VFREQ_SHIFT
)

	)

57 
	s°d_timög
 {

58 
u8
 
	mhsize
;

59 
u8
 
	mv‰eq_a•e˘
;

60 } 
__©åibuã__
((
∑cked
));

62 
	#DRM_EDID_PT_HSYNC_POSITIVE
 (1 << 1)

	)

63 
	#DRM_EDID_PT_VSYNC_POSITIVE
 (1 << 2)

	)

64 
	#DRM_EDID_PT_SEPARATE_SYNC
 (3 << 3)

	)

65 
	#DRM_EDID_PT_STEREO
 (1 << 5)

	)

66 
	#DRM_EDID_PT_INTERLACED
 (1 << 7)

	)

69 
	sdëaûed_pixñ_timög
 {

70 
u8
 
	mha˘ive_lo
;

71 
u8
 
	mhbœnk_lo
;

72 
u8
 
	mha˘ive_hbœnk_hi
;

73 
u8
 
	mva˘ive_lo
;

74 
u8
 
	mvbœnk_lo
;

75 
u8
 
	mva˘ive_vbœnk_hi
;

76 
u8
 
	mhsync_off£t_lo
;

77 
u8
 
	mhsync_pul£_width_lo
;

78 
u8
 
	mvsync_off£t_pul£_width_lo
;

79 
u8
 
	mhsync_vsync_off£t_pul£_width_hi
;

80 
u8
 
	mwidth_mm_lo
;

81 
u8
 
	mheight_mm_lo
;

82 
u8
 
	mwidth_height_mm_hi
;

83 
u8
 
	mhb‹dî
;

84 
u8
 
	mvb‹dî
;

85 
u8
 
	mmisc
;

86 } 
__©åibuã__
((
∑cked
));

89 
	sdëaûed_d©a_°rög
 {

90 
u8
 
	m°r
[13];

91 } 
__©åibuã__
((
∑cked
));

93 
	sdëaûed_d©a_m⁄ô‹_ønge
 {

94 
u8
 
	mmö_v‰eq
;

95 
u8
 
	mmax_v‰eq
;

96 
u8
 
	mmö_h‰eq_khz
;

97 
u8
 
	mmax_h‰eq_khz
;

98 
u8
 
	mpixñ_˛ock_mhz
;

99 
u8
 
	mÊags
;

102 
u8
 
	mª£rved
;

103 
u8
 
	mh‰eq_°¨t_khz
;

104 
u8
 
	mc
;

105 
__À16
 
	mm
;

106 
u8
 
	mk
;

107 
u8
 
	mj
;

108 } 
__©åibuã__
((
∑cked
)Ë
	mgtf2
;

110 
u8
 
	mvîsi⁄
;

111 
u8
 
	md©a1
;

112 
u8
 
	md©a2
;

113 
u8
 
	msuµ‹ãd_a•e˘s
;

114 
u8
 
	mÊags
;

115 
u8
 
	msuµ‹ãd_sˇlögs
;

116 
u8
 
	m¥e„ºed_ª‰esh
;

117 } 
__©åibuã__
((
∑cked
)Ë
	mcvt
;

118 } 
	mf‹muœ
;

119 } 
__©åibuã__
((
∑cked
));

121 
	sdëaûed_d©a_wpödex
 {

122 
u8
 
	mwhôe_yx_lo
;

123 
u8
 
	mwhôe_x_hi
;

124 
u8
 
	mwhôe_y_hi
;

125 
u8
 
	mgamma
;

126 } 
__©åibuã__
((
∑cked
));

128 
	sdëaûed_d©a_cﬁ‹_poöt
 {

129 
u8
 
	mwödex1
;

130 
u8
 
	mwpödex1
[3];

131 
u8
 
	mwödex2
;

132 
u8
 
	mwpödex2
[3];

133 } 
__©åibuã__
((
∑cked
));

135 
	scvt_timög
 {

136 
u8
 
	mcode
[3];

137 } 
__©åibuã__
((
∑cked
));

139 
	sdëaûed_n⁄_pixñ
 {

140 
u8
 
	m∑d1
;

141 
u8
 
	mty≥
;

144 
u8
 
	m∑d2
;

146 
dëaûed_d©a_°rög
 
	m°r
;

147 
dëaûed_d©a_m⁄ô‹_ønge
 
	mønge
;

148 
dëaûed_d©a_wpödex
 
	mcﬁ‹
;

149 
°d_timög
 
	mtimögs
[6];

150 
cvt_timög
 
	mcvt
[4];

151 } 
	md©a
;

152 } 
__©åibuã__
((
∑cked
));

154 
	#EDID_DETAIL_EST_TIMINGS
 0xf7

	)

155 
	#EDID_DETAIL_CVT_3BYTE
 0xf8

	)

156 
	#EDID_DETAIL_COLOR_MGMT_DATA
 0xf9

	)

157 
	#EDID_DETAIL_STD_MODES
 0xÁ

	)

158 
	#EDID_DETAIL_MONITOR_CPDATA
 0xfb

	)

159 
	#EDID_DETAIL_MONITOR_NAME
 0xfc

	)

160 
	#EDID_DETAIL_MONITOR_RANGE
 0xfd

	)

161 
	#EDID_DETAIL_MONITOR_STRING
 0x„

	)

162 
	#EDID_DETAIL_MONITOR_SERIAL
 0xff

	)

164 
	sdëaûed_timög
 {

165 
__À16
 
	mpixñ_˛ock
;

167 
dëaûed_pixñ_timög
 
	mpixñ_d©a
;

168 
dëaûed_n⁄_pixñ
 
	mŸhî_d©a
;

169 } 
	md©a
;

170 } 
__©åibuã__
((
∑cked
));

172 
	#DRM_EDID_INPUT_SERRATION_VSYNC
 (1 << 0)

	)

173 
	#DRM_EDID_INPUT_SYNC_ON_GREEN
 (1 << 1)

	)

174 
	#DRM_EDID_INPUT_COMPOSITE_SYNC
 (1 << 2)

	)

175 
	#DRM_EDID_INPUT_SEPARATE_SYNCS
 (1 << 3)

	)

176 
	#DRM_EDID_INPUT_BLANK_TO_BLACK
 (1 << 4)

	)

177 
	#DRM_EDID_INPUT_VIDEO_LEVEL
 (3 << 5)

	)

178 
	#DRM_EDID_INPUT_DIGITAL
 (1 << 7)

	)

179 
	#DRM_EDID_DIGITAL_DEPTH_MASK
 (7 << 4)

	)

180 
	#DRM_EDID_DIGITAL_DEPTH_UNDEF
 (0 << 4)

	)

181 
	#DRM_EDID_DIGITAL_DEPTH_6
 (1 << 4)

	)

182 
	#DRM_EDID_DIGITAL_DEPTH_8
 (2 << 4)

	)

183 
	#DRM_EDID_DIGITAL_DEPTH_10
 (3 << 4)

	)

184 
	#DRM_EDID_DIGITAL_DEPTH_12
 (4 << 4)

	)

185 
	#DRM_EDID_DIGITAL_DEPTH_14
 (5 << 4)

	)

186 
	#DRM_EDID_DIGITAL_DEPTH_16
 (6 << 4)

	)

187 
	#DRM_EDID_DIGITAL_DEPTH_RSVD
 (7 << 4)

	)

188 
	#DRM_EDID_DIGITAL_TYPE_UNDEF
 (0)

	)

189 
	#DRM_EDID_DIGITAL_TYPE_DVI
 (1)

	)

190 
	#DRM_EDID_DIGITAL_TYPE_HDMI_A
 (2)

	)

191 
	#DRM_EDID_DIGITAL_TYPE_HDMI_B
 (3)

	)

192 
	#DRM_EDID_DIGITAL_TYPE_MDDI
 (4)

	)

193 
	#DRM_EDID_DIGITAL_TYPE_DP
 (5)

	)

195 
	#DRM_EDID_FEATURE_DEFAULT_GTF
 (1 << 0)

	)

196 
	#DRM_EDID_FEATURE_PREFERRED_TIMING
 (1 << 1)

	)

197 
	#DRM_EDID_FEATURE_STANDARD_COLOR
 (1 << 2)

	)

199 
	#DRM_EDID_FEATURE_DISPLAY_TYPE
 (3 << 3Ë

	)

201 
	#DRM_EDID_FEATURE_COLOR_MASK
 (3 << 3)

	)

202 
	#DRM_EDID_FEATURE_RGB
 (0 << 3)

	)

203 
	#DRM_EDID_FEATURE_RGB_YCRCB444
 (1 << 3)

	)

204 
	#DRM_EDID_FEATURE_RGB_YCRCB422
 (2 << 3)

	)

205 
	#DRM_EDID_FEATURE_RGB_YCRCB
 (3 << 3Ë

	)

207 
	#DRM_EDID_FEATURE_PM_ACTIVE_OFF
 (1 << 5)

	)

208 
	#DRM_EDID_FEATURE_PM_SUSPEND
 (1 << 6)

	)

209 
	#DRM_EDID_FEATURE_PM_STANDBY
 (1 << 7)

	)

211 
	#DRM_EDID_HDMI_DC_48
 (1 << 6)

	)

212 
	#DRM_EDID_HDMI_DC_36
 (1 << 5)

	)

213 
	#DRM_EDID_HDMI_DC_30
 (1 << 4)

	)

214 
	#DRM_EDID_HDMI_DC_Y444
 (1 << 3)

	)

217 
	#DRM_EDID_YCBCR420_DC_48
 (1 << 6)

	)

218 
	#DRM_EDID_YCBCR420_DC_36
 (1 << 5)

	)

219 
	#DRM_EDID_YCBCR420_DC_30
 (1 << 4)

	)

220 
	#DRM_EDID_YCBCR420_DC_MASK
 (
DRM_EDID_YCBCR420_DC_48
 | \

221 
DRM_EDID_YCBCR420_DC_36
 | \

222 
DRM_EDID_YCBCR420_DC_30
)

	)

225 
	#DRM_ELD_HEADER_BLOCK_SIZE
 4

	)

227 
	#DRM_ELD_VER
 0

	)

228 
	#DRM_ELD_VER_SHIFT
 3

	)

229 
	#DRM_ELD_VER_MASK
 (0x1‡<< 3)

	)

230 
	#DRM_ELD_VER_CEA861D
 (2 << 3Ë

	)

231 
	#DRM_ELD_VER_CANNED
 (0x1‡<< 3)

	)

233 
	#DRM_ELD_BASELINE_ELD_LEN
 2

	)

236 
	#DRM_ELD_CEA_EDID_VER_MNL
 4

	)

237 
	#DRM_ELD_CEA_EDID_VER_SHIFT
 5

	)

238 
	#DRM_ELD_CEA_EDID_VER_MASK
 (7 << 5)

	)

239 
	#DRM_ELD_CEA_EDID_VER_NONE
 (0 << 5)

	)

240 
	#DRM_ELD_CEA_EDID_VER_CEA861
 (1 << 5)

	)

241 
	#DRM_ELD_CEA_EDID_VER_CEA861A
 (2 << 5)

	)

242 
	#DRM_ELD_CEA_EDID_VER_CEA861BCD
 (3 << 5)

	)

243 
	#DRM_ELD_MNL_SHIFT
 0

	)

244 
	#DRM_ELD_MNL_MASK
 (0x1‡<< 0)

	)

246 
	#DRM_ELD_SAD_COUNT_CONN_TYPE
 5

	)

247 
	#DRM_ELD_SAD_COUNT_SHIFT
 4

	)

248 
	#DRM_ELD_SAD_COUNT_MASK
 (0x‡<< 4)

	)

249 
	#DRM_ELD_CONN_TYPE_SHIFT
 2

	)

250 
	#DRM_ELD_CONN_TYPE_MASK
 (3 << 2)

	)

251 
	#DRM_ELD_CONN_TYPE_HDMI
 (0 << 2)

	)

252 
	#DRM_ELD_CONN_TYPE_DP
 (1 << 2)

	)

253 
	#DRM_ELD_SUPPORTS_AI
 (1 << 1)

	)

254 
	#DRM_ELD_SUPPORTS_HDCP
 (1 << 0)

	)

256 
	#DRM_ELD_AUD_SYNCH_DELAY
 6

	)

257 
	#DRM_ELD_AUD_SYNCH_DELAY_MAX
 0xÁ

	)

259 
	#DRM_ELD_SPEAKER
 7

	)

260 
	#DRM_ELD_SPEAKER_MASK
 0x7f

	)

261 
	#DRM_ELD_SPEAKER_RLRC
 (1 << 6)

	)

262 
	#DRM_ELD_SPEAKER_FLRC
 (1 << 5)

	)

263 
	#DRM_ELD_SPEAKER_RC
 (1 << 4)

	)

264 
	#DRM_ELD_SPEAKER_RLR
 (1 << 3)

	)

265 
	#DRM_ELD_SPEAKER_FC
 (1 << 2)

	)

266 
	#DRM_ELD_SPEAKER_LFE
 (1 << 1)

	)

267 
	#DRM_ELD_SPEAKER_FLR
 (1 << 0)

	)

269 
	#DRM_ELD_PORT_ID
 8

	)

270 
	#DRM_ELD_PORT_ID_LEN
 8

	)

272 
	#DRM_ELD_MANUFACTURER_NAME0
 16

	)

273 
	#DRM_ELD_MANUFACTURER_NAME1
 17

	)

275 
	#DRM_ELD_PRODUCT_CODE0
 18

	)

276 
	#DRM_ELD_PRODUCT_CODE1
 19

	)

278 
	#DRM_ELD_MONITOR_NAME_STRING
 20

	)

280 
	#DRM_ELD_CEA_SAD
(
m∆
, 
ßd
Ë(20 + (m∆Ë+ 3 * (ßd))

	)

282 
	sedid
 {

283 
u8
 
	mhódî
[8];

285 
u8
 
	mmfg_id
[2];

286 
u8
 
	m¥od_code
[2];

287 
u32
 
	m£rül
;

288 
u8
 
	mmfg_wìk
;

289 
u8
 
	mmfg_yór
;

291 
u8
 
	mvîsi⁄
;

292 
u8
 
	mªvisi⁄
;

294 
u8
 
	möput
;

295 
u8
 
	mwidth_cm
;

296 
u8
 
	mheight_cm
;

297 
u8
 
	mgamma
;

298 
u8
 
	m„©uªs
;

300 
u8
 
	mªd_gªí_lo
;

301 
u8
 
	mbœck_whôe_lo
;

302 
u8
 
	mªd_x
;

303 
u8
 
	mªd_y
;

304 
u8
 
	mgªí_x
;

305 
u8
 
	mgªí_y
;

306 
u8
 
	mblue_x
;

307 
u8
 
	mblue_y
;

308 
u8
 
	mwhôe_x
;

309 
u8
 
	mwhôe_y
;

311 
e°_timögs
 
	me°ablished_timögs
;

313 
°d_timög
 
	m°™d¨d_timögs
[8];

315 
dëaûed_timög
 
	mdëaûed_timögs
[4];

317 
u8
 
	mexãnsi⁄s
;

319 
u8
 
	mchecksum
;

320 } 
__©åibuã__
((
∑cked
));

322 
	#EDID_PRODUCT_ID
(
e
Ë(”)->
¥od_code
[0] | (”)->¥od_code[1] << 8))

	)

325 
	s˚a_ßd
 {

326 
u8
 
	mf‹m©
;

327 
u8
 
	mch™√ls
;

328 
u8
 
	m‰eq
;

329 
u8
 
	mbyã2
;

332 
	gdrm_ícodî
;

333 
	gdrm_c⁄√˘‹
;

334 
	gdrm_di•œy_mode
;

336 
drm_edid_to_ßd
(
edid
 *edid, 
˚a_ßd
 **
ßds
);

337 
drm_edid_to_•ókî_Æloˇti⁄
(
edid
 *edid, 
u8
 **
ßdb
);

338 
drm_av_sync_dñay
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

339 c⁄° 
drm_di•œy_mode
 *
mode
);

341 #ifde‡
CONFIG_DRM_LOAD_EDID_FIRMWARE


342 
edid
 *
drm_lﬂd_edid_fúmw¨e
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

343 
__drm_£t_edid_fúmw¨e_∑th
(c⁄° *
∑th
);

344 
__drm_gë_edid_fúmw¨e_∑th
(*
buf
, 
size_t
 
bufsize
);

346 
ölöe
 
edid
 *

347 
	$drm_lﬂd_edid_fúmw¨e
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

349  
	`ERR_PTR
(-
ENOENT
);

350 
	}
}

354 
drm_hdmi_avi_öfo‰ame_‰om_di•œy_mode
(
hdmi_avi_öfo‰ame
 *
‰ame
,

355 c⁄° 
drm_di•œy_mode
 *
mode
,

356 
boﬁ
 
is_hdmi2_sök
);

358 
drm_hdmi_víd‹_öfo‰ame_‰om_di•œy_mode
(
hdmi_víd‹_öfo‰ame
 *
‰ame
,

359 
drm_c⁄√˘‹
 *
c⁄√˘‹
,

360 c⁄° 
drm_di•œy_mode
 *
mode
);

362 
drm_hdmi_avi_öfo‰ame_qu™t_ønge
(
hdmi_avi_öfo‰ame
 *
‰ame
,

363 c⁄° 
drm_di•œy_mode
 *
mode
,

364 
hdmi_qu™tiz©i⁄_ønge
 
rgb_qu™t_ønge
,

365 
boﬁ
 
rgb_qu™t_ønge_£À˘abÀ
,

366 
boﬁ
 
is_hdmi2_sök
);

372 
ölöe
 
	$drm_ñd_m∆
(c⁄° 
uöt8_t
 *
ñd
)

374  (
ñd
[
DRM_ELD_CEA_EDID_VER_MNL
] & 
DRM_ELD_MNL_MASK
Ë>> 
DRM_ELD_MNL_SHIFT
;

375 
	}
}

381 
ölöe
 c⁄° 
uöt8_t
 *
	$drm_ñd_ßd
(c⁄° 
uöt8_t
 *
ñd
)

383 
vî
, 
m∆
;

385 
vî
 = (
ñd
[
DRM_ELD_VER
] & 
DRM_ELD_VER_MASK
Ë>> 
DRM_ELD_VER_SHIFT
;

386 i‡(
vî
 != 2 && ver != 31)

387  
NULL
;

389 
m∆
 = 
	`drm_ñd_m∆
(
ñd
);

390 i‡(
m∆
 > 16)

391  
NULL
;

393  
ñd
 + 
	`DRM_ELD_CEA_SAD
(
m∆
, 0);

394 
	}
}

400 
ölöe
 
	$drm_ñd_ßd_cou¡
(c⁄° 
uöt8_t
 *
ñd
)

402  (
ñd
[
DRM_ELD_SAD_COUNT_CONN_TYPE
] & 
DRM_ELD_SAD_COUNT_MASK
) >>

403 
DRM_ELD_SAD_COUNT_SHIFT
;

404 
	}
}

413 
ölöe
 
	$drm_ñd_ˇlc_ba£löe_block_size
(c⁄° 
uöt8_t
 *
ñd
)

415  
DRM_ELD_MONITOR_NAME_STRING
 - 
DRM_ELD_HEADER_BLOCK_SIZE
 +

416 
	`drm_ñd_m∆
(
ñd
Ë+ 
	`drm_ñd_ßd_cou¡
(eld) * 3;

417 
	}
}

429 
ölöe
 
	$drm_ñd_size
(c⁄° 
uöt8_t
 *
ñd
)

431  
DRM_ELD_HEADER_BLOCK_SIZE
 + 
ñd
[
DRM_ELD_BASELINE_ELD_LEN
] * 4;

432 
	}
}

441 
ölöe
 
u8
 
	$drm_ñd_gë_•k_Æloc
(c⁄° 
uöt8_t
 *
ñd
)

443  
ñd
[
DRM_ELD_SPEAKER
] & 
DRM_ELD_SPEAKER_MASK
;

444 
	}
}

453 
ölöe
 
u8
 
	$drm_ñd_gë_c⁄n_ty≥
(c⁄° 
uöt8_t
 *
ñd
)

455  
ñd
[
DRM_ELD_SAD_COUNT_CONN_TYPE
] & 
DRM_ELD_CONN_TYPE_MASK
;

456 
	}
}

458 
boﬁ
 
drm_¥obe_ddc
(
i2c_ad≠ãr
 *
ad≠ãr
);

459 
edid
 *
drm_do_gë_edid
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

460 (*
gë_edid_block
)(*
d©a
, 
u8
 *
buf
, 
block
,

461 
size_t
 
Àn
),

462 *
d©a
);

463 
edid
 *
	`drm_gë_edid
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

464 
i2c_ad≠ãr
 *
ad≠ãr
);

465 
edid
 *
	`drm_gë_edid_swôchîoo
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

466 
i2c_ad≠ãr
 *
ad≠ãr
);

467 
edid
 *
	`drm_edid_du∂iˇã
(const edid *edid);

468 
	`drm_ª£t_di•œy_öfo
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

469 
u32
 
	`drm_add_di•œy_öfo
(
drm_c⁄√˘‹
 *
c⁄√˘‹
, c⁄° 
edid
 *edid);

470 
	`drm_add_edid_modes
(
drm_c⁄√˘‹
 *
c⁄√˘‹
, 
edid
 *edid);

472 
u8
 
	`drm_m©ch_˚a_mode
(c⁄° 
drm_di•œy_mode
 *
to_m©ch
);

473 
hdmi_pi˘uª_a•e˘
 
	`drm_gë_˚a_a•e˘_øtio
(c⁄° 
u8
 
video_code
);

474 
boﬁ
 
	`drm_dëe˘_hdmi_m⁄ô‹
(
edid
 *edid);

475 
boﬁ
 
	`drm_dëe˘_m⁄ô‹_audio
(
edid
 *edid);

476 
boﬁ
 
	`drm_rgb_qu™t_ønge_£À˘abÀ
(
edid
 *edid);

477 
hdmi_qu™tiz©i⁄_ønge


478 
	`drm_deÁu…_rgb_qu™t_ønge
(c⁄° 
drm_di•œy_mode
 *
mode
);

479 
	`drm_add_modes_n€did
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

480 
hdi•œy
, 
vdi•œy
);

481 
	`drm_£t_¥e„ºed_mode
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

482 
h¥ef
, 
v¥ef
);

484 
	`drm_edid_hódî_is_vÆid
(c⁄° 
u8
 *
øw_edid
);

485 
boﬁ
 
	`drm_edid_block_vÆid
(
u8
 *
øw_edid
, 
block
, boﬁ 
¥öt_bad_edid
,

486 
boﬁ
 *
edid_c‹ru±
);

487 
boﬁ
 
	`drm_edid_is_vÆid
(
edid
 *edid);

488 
	`drm_edid_gë_m⁄ô‹_«me
(
edid
 *edid, *
«me
,

489 
buÊí
);

490 
drm_di•œy_mode
 *
	`drm_mode_föd_dmt
(
drm_devi˚
 *
dev
,

491 
hsize
, 
vsize
, 
‰esh
,

492 
boﬁ
 
rb
);

	@src/common/linuxkpi/include/drm/drm_encoder.h

23 #i‚de‡
__DRM_ENCODER_H__


24 
	#__DRM_ENCODER_H__


	)

26 
	~<löux/li°.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<drm/drm_¸tc.h
>

29 
	~<drm/drm_mode.h
>

30 
	~<drm/drm_mode_obje˘.h
>

32 
	gdrm_ícodî
;

39 
	sdrm_ícodî_funcs
 {

47 (*
	mª£t
)(
drm_ícodî
 *
	mícodî
);

56 (*
	mde°roy
)(
drm_ícodî
 *
	mícodî
);

71 (*
	mœã_ªgi°î
)(
drm_ícodî
 *
	mícodî
);

82 (*
	móæy_uƒegi°î
)(
drm_ícodî
 *
	mícodî
);

98 
	sdrm_ícodî
 {

99 
drm_devi˚
 *
	mdev
;

100 
li°_hód
 
	mhód
;

102 
drm_mode_obje˘
 
	mba£
;

103 *
	m«me
;

130 
	mícodî_ty≥
;

136 
	mödex
;

149 
uöt32_t
 
	mpossibÀ_¸tcs
;

166 
uöt32_t
 
	mpossibÀ_˛⁄es
;

173 
drm_¸tc
 *
	m¸tc
;

174 
drm_bridge
 *
	mbridge
;

175 c⁄° 
drm_ícodî_funcs
 *
	mfuncs
;

176 c⁄° 
drm_ícodî_hñ≥r_funcs
 *
	mhñ≥r_¥iv©e
;

179 
	#obj_to_ícodî
(
x
Ë
	`c⁄èöî_of
(x, 
drm_ícodî
, 
ba£
)

	)

181 
	$__¥ötf
(5, 6)

182 
	`drm_ícodî_öô
(
drm_devi˚
 *
dev
,

183 
drm_ícodî
 *
ícodî
,

184 c⁄° 
drm_ícodî_funcs
 *
funcs
,

185 
ícodî_ty≥
, c⁄° *
«me
, ...);

194 
ölöe
 
	$drm_ícodî_ödex
(
drm_ícodî
 *
ícodî
)

196  
ícodî
->
ödex
;

197 
	}
}

206 
ölöe
 
boﬁ
 
	$drm_ícodî_¸tc_ok
(
drm_ícodî
 *
ícodî
,

207 
drm_¸tc
 *
¸tc
)

209  !!(
ícodî
->
possibÀ_¸tcs
 & 
	`drm_¸tc_mask
(
¸tc
));

210 
	}
}

221 
ölöe
 
drm_ícodî
 *
	$drm_ícodî_föd
(
drm_devi˚
 *
dev
,

222 
drm_fûe
 *
fûe_¥iv
,

223 
uöt32_t
 
id
)

225 
drm_mode_obje˘
 *
mo
;

227 
mo
 = 
	`drm_mode_obje˘_föd
(
dev
, 
fûe_¥iv
, 
id
, 
DRM_MODE_OBJECT_ENCODER
);

229  
mo
 ? 
	`obj_to_ícodî
(moË: 
NULL
;

230 
	}
}

232 
drm_ícodî_˛ónup
(
drm_ícodî
 *
ícodî
);

242 
	#drm_f‹_óch_ícodî_mask
(
ícodî
, 
dev
, 
ícodî_mask
) \

243 
	`li°_f‹_óch_íåy
((
ícodî
), &(
dev
)->
mode_c⁄fig
.
ícodî_li°
, 
hód
) \

244 
	`f‹_óch_if
 ((
ícodî_mask
Ë& (1 << 
	`drm_ícodî_ödex
(
ícodî
)))

	)

253 
	#drm_f‹_óch_ícodî
(
ícodî
, 
dev
) \

254 
	`li°_f‹_óch_íåy
(
ícodî
, &(
dev
)->
mode_c⁄fig
.
ícodî_li°
, 
hód
)

	)

	@src/common/linuxkpi/include/drm/drm_encoder_slave.h

27 #i‚de‡
__DRM_ENCODER_SLAVE_H__


28 
	#__DRM_ENCODER_SLAVE_H__


	)

30 
	~<drm/drmP.h
>

31 
	~<drm/drm_¸tc.h
>

32 
	~<drm/drm_ícodî.h
>

49 
	sdrm_ícodî_¶ave_funcs
 {

50 (*
	m£t_c⁄fig
)(
drm_ícodî
 *
	mícodî
,

51 *
	m∑øms
);

53 (*
	mde°roy
)(
drm_ícodî
 *
	mícodî
);

54 (*
	mdpms
)(
drm_ícodî
 *
	mícodî
, 
	mmode
);

55 (*
	mßve
)(
drm_ícodî
 *
	mícodî
);

56 (*
	mª°‹e
)(
drm_ícodî
 *
	mícodî
);

57 
boﬁ
 (*
mode_fixup
)(
drm_ícodî
 *
	mícodî
,

58 c⁄° 
drm_di•œy_mode
 *
	mmode
,

59 
drm_di•œy_mode
 *
	madju°ed_mode
);

60 (*
	mmode_vÆid
)(
drm_ícodî
 *
	mícodî
,

61 
drm_di•œy_mode
 *
	mmode
);

62 (*
	mmode_£t
)(
drm_ícodî
 *
	mícodî
,

63 
drm_di•œy_mode
 *
	mmode
,

64 
drm_di•œy_mode
 *
	madju°ed_mode
);

66 
drm_c⁄√˘‹_°©us
 (*
dëe˘
)(
drm_ícodî
 *
	mícodî
,

67 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

68 (*
	mgë_modes
)(
drm_ícodî
 *
	mícodî
,

69 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

70 (*
	m¸óã_ªsour˚s
)(
drm_ícodî
 *
	mícodî
,

71 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

72 (*
	m£t_¥›îty
)(
drm_ícodî
 *
	mícodî
,

73 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

74 
drm_¥›îty
 *
	m¥›îty
,

75 
uöt64_t
 
	mvÆ
);

96 
	sdrm_ícodî_¶ave
 {

97 
drm_ícodî
 
	mba£
;

99 c⁄° 
drm_ícodî_¶ave_funcs
 *
	m¶ave_funcs
;

100 *
	m¶ave_¥iv
;

101 *
	mbus_¥iv
;

103 
	#to_ícodî_¶ave
(
x
Ë
	`c⁄èöî_of
((x), 
drm_ícodî_¶ave
, 
ba£
)

	)

105 
drm_i2c_ícodî_öô
(
drm_devi˚
 *
dev
,

106 
drm_ícodî_¶ave
 *
ícodî
,

107 
i2c_ad≠ãr
 *
ad≠
,

108 c⁄° 
i2c_bﬂrd_öfo
 *
öfo
);

121 
	sdrm_i2c_ícodî_drivî
 {

122 
i2c_drivî
 
	mi2c_drivî
;

124 (*
	mícodî_öô
)(
i2c_˛õ¡
 *
	m˛õ¡
,

125 
drm_devi˚
 *
	mdev
,

126 
drm_ícodî_¶ave
 *
	mícodî
);

129 
	#to_drm_i2c_ícodî_drivî
(
x
Ë
	`c⁄èöî_of
((x), \

130 
drm_i2c_ícodî_drivî
, \

131 
i2c_drivî
)

	)

136 
ölöe
 
i2c_˛õ¡
 *
	$drm_i2c_ícodî_gë_˛õ¡
(
drm_ícodî
 *
ícodî
)

138  (
i2c_˛õ¡
 *)
	`to_ícodî_¶ave
(
ícodî
)->
bus_¥iv
;

139 
	}
}

146 
ölöe
 
	$drm_i2c_ícodî_ªgi°î
(
moduÀ
 *
ow√r
,

147 
drm_i2c_ícodî_drivî
 *
drivî
)

149  
	`i2c_ªgi°î_drivî
(
ow√r
, &
drivî
->
i2c_drivî
);

150 
	}
}

156 
ölöe
 
	$drm_i2c_ícodî_uƒegi°î
(
drm_i2c_ícodî_drivî
 *
drivî
)

158 
	`i2c_dñ_drivî
(&
drivî
->
i2c_drivî
);

159 
	}
}

161 
drm_i2c_ícodî_de°roy
(
drm_ícodî
 *
ícodî
);

168 
drm_i2c_ícodî_dpms
(
drm_ícodî
 *
ícodî
, 
mode
);

169 
boﬁ
 
drm_i2c_ícodî_mode_fixup
(
drm_ícodî
 *
ícodî
,

170 c⁄° 
drm_di•œy_mode
 *
mode
,

171 
drm_di•œy_mode
 *
adju°ed_mode
);

172 
drm_i2c_ícodî_¥ï¨e
(
drm_ícodî
 *
ícodî
);

173 
drm_i2c_ícodî_commô
(
drm_ícodî
 *
ícodî
);

174 
drm_i2c_ícodî_mode_£t
(
drm_ícodî
 *
ícodî
,

175 
drm_di•œy_mode
 *
mode
,

176 
drm_di•œy_mode
 *
adju°ed_mode
);

177 
drm_c⁄√˘‹_°©us
 
drm_i2c_ícodî_dëe˘
(
drm_ícodî
 *
ícodî
,

178 
drm_c⁄√˘‹
 *
c⁄√˘‹
);

179 
drm_i2c_ícodî_ßve
(
drm_ícodî
 *
ícodî
);

180 
drm_i2c_ícodî_ª°‹e
(
drm_ícodî
 *
ícodî
);

	@src/common/linuxkpi/include/drm/drm_fb_cma_helper.h

2 #i‚de‡
__DRM_FB_CMA_HELPER_H__


3 
	#__DRM_FB_CMA_HELPER_H__


	)

5 
	gdrm_fbdev_cma
;

6 
	gdrm_gem_cma_obje˘
;

8 
	gdrm_fb_hñ≥r_surÁ˚_size
;

9 
	gdrm_‰amebuf„r_funcs
;

10 
	gdrm_fb_hñ≥r_funcs
;

11 
	gdrm_‰amebuf„r
;

12 
	gdrm_fb_hñ≥r
;

13 
	gdrm_devi˚
;

14 
	gdrm_fûe
;

15 
	gdrm_mode_fb_cmd2
;

16 
	gdrm_∂™e
;

17 
	gdrm_∂™e_°©e
;

19 
drm_fb_cma_fbdev_öô_wôh_funcs
(
drm_devi˚
 *
dev
,

20 
¥e„ºed_bµ
, 
max_c⁄n_cou¡
,

21 c⁄° 
drm_‰amebuf„r_funcs
 *
funcs
);

22 
drm_fb_cma_fbdev_öô
(
drm_devi˚
 *
dev
, 
¥e„ºed_bµ
,

23 
max_c⁄n_cou¡
);

24 
drm_fb_cma_fbdev_föi
(
drm_devi˚
 *
dev
);

26 
drm_fbdev_cma
 *
drm_fbdev_cma_öô_wôh_funcs
(
drm_devi˚
 *
dev
,

27 
¥e„ºed_bµ
, 
max_c⁄n_cou¡
,

28 c⁄° 
drm_‰amebuf„r_funcs
 *
funcs
);

29 
drm_fbdev_cma
 *
drm_fbdev_cma_öô
(
drm_devi˚
 *
dev
,

30 
¥e„ºed_bµ
, 
max_c⁄n_cou¡
);

31 
drm_fbdev_cma_föi
(
drm_fbdev_cma
 *
fbdev_cma
);

33 
drm_fbdev_cma_ª°‹e_mode
(
drm_fbdev_cma
 *
fbdev_cma
);

34 
drm_fbdev_cma_hŸ∂ug_evít
(
drm_fbdev_cma
 *
fbdev_cma
);

35 
drm_fbdev_cma_£t_su•íd
(
drm_fbdev_cma
 *
fbdev_cma
, 
boﬁ
 
°©e
);

36 
drm_fbdev_cma_£t_su•íd_u∆ocked
(
drm_fbdev_cma
 *
fbdev_cma
,

37 
boﬁ
 
°©e
);

39 
drm_gem_cma_obje˘
 *
drm_fb_cma_gë_gem_obj
(
drm_‰amebuf„r
 *
fb
,

40 
∂™e
);

42 
dma_addr_t
 
drm_fb_cma_gë_gem_addr
(
drm_‰amebuf„r
 *
fb
,

43 
drm_∂™e_°©e
 *
°©e
,

44 
∂™e
);

	@src/common/linuxkpi/include/drm/drm_fb_helper.h

31 #i‚de‡
DRM_FB_HELPER_H


32 
	#DRM_FB_HELPER_H


	)

34 
	gdrm_fb_hñ≥r
;

36 
	~<löux/fb.h
>

38 
	#fb_öfo
 
löux_fb_öfo


	)

39 
	~<drm/drm_¸tc.h
>

40 
	~<drm/drm_devi˚.h
>

42 #ifde‡
__löux__


43 
	~<löux/kgdb.h
>

46 
	emode_£t_©omic
 {

47 
	mLEAVE_ATOMIC_MODE_SET
,

48 
	mENTER_ATOMIC_MODE_SET
,

51 
	sdrm_fb_off£t
 {

52 
	mx
, 
	my
;

55 
	sdrm_fb_hñ≥r_¸tc
 {

56 
drm_mode_£t
 
	mmode_£t
;

57 
drm_di•œy_mode
 *
	mdesúed_mode
;

58 
	mx
, 
	my
;

59 
	mrŸ©i⁄
;

81 
	sdrm_fb_hñ≥r_surÁ˚_size
 {

82 
u32
 
	mfb_width
;

83 
u32
 
	mfb_height
;

84 
u32
 
	msurÁ˚_width
;

85 
u32
 
	msurÁ˚_height
;

86 
u32
 
	msurÁ˚_bµ
;

87 
u32
 
	msurÁ˚_dïth
;

95 
	sdrm_fb_hñ≥r_funcs
 {

110 (*
	mfb_¥obe
)(
drm_fb_hñ≥r
 *
	mhñ≥r
,

111 
drm_fb_hñ≥r_surÁ˚_size
 *
	msizes
);

130 
boﬁ
 (*
öôül_c⁄fig
)(
drm_fb_hñ≥r
 *
	mfb_hñ≥r
,

131 
drm_fb_hñ≥r_¸tc
 **
	m¸tcs
,

132 
drm_di•œy_mode
 **
	mmodes
,

133 
drm_fb_off£t
 *
	moff£ts
,

134 
boﬁ
 *
	míabÀd
, 
	mwidth
, 
	mheight
);

137 
	sdrm_fb_hñ≥r_c⁄√˘‹
 {

138 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
;

163 
	sdrm_fb_hñ≥r
 {

164 
drm_‰amebuf„r
 *
	mfb
;

165 
drm_devi˚
 *
	mdev
;

166 
	m¸tc_cou¡
;

167 
drm_fb_hñ≥r_¸tc
 *
	m¸tc_öfo
;

168 
	mc⁄√˘‹_cou¡
;

169 
	mc⁄√˘‹_öfo_Æloc_cou¡
;

176 
	msw_rŸ©i⁄s
;

183 
drm_fb_hñ≥r_c⁄√˘‹
 **
	mc⁄√˘‹_öfo
;

184 c⁄° 
drm_fb_hñ≥r_funcs
 *
	mfuncs
;

185 
fb_öfo
 *
	mfbdev
;

186 
u32
 
	mp£udo_∑Àâe
[17];

187 
drm_˛ù_ª˘
 
	mdúty_˛ù
;

188 
•ölock_t
 
	mdúty_lock
;

189 
w‹k_°ru˘
 
	mdúty_w‹k
;

190 
w‹k_°ru˘
 
	mªsume_w‹k
;

202 
muãx
 
	mlock
;

209 
li°_hód
 
	mkî√l_fb_li°
;

218 
boﬁ
 
	mdñayed_hŸ∂ug
;

230 
boﬁ
 
	mde„ºed_£tup
;

241 
	m¥e„ºed_bµ
;

250 
	#DRM_FB_HELPER_DEFAULT_OPS
 \

251 .
fb_check_v¨
 = 
drm_fb_hñ≥r_check_v¨
, \

252 .
fb_£t_∑r
 = 
drm_fb_hñ≥r_£t_∑r
, \

253 .
fb_£tcm≠
 = 
drm_fb_hñ≥r_£tcm≠
, \

254 .
fb_bœnk
 = 
drm_fb_hñ≥r_bœnk
, \

255 .
fb_∑n_di•œy
 = 
drm_fb_hñ≥r_∑n_di•œy
, \

256 .
fb_debug_íãr
 = 
drm_fb_hñ≥r_debug_íãr
, \

257 .
fb_debug_Àave
 = 
drm_fb_hñ≥r_debug_Àave
, \

258 .
fb_io˘l
 = 
drm_fb_hñ≥r_io˘l


	)

260 #ifde‡
CONFIG_DRM_FBDEV_EMULATION


261 
drm_fb_hñ≥r_¥ï¨e
(
drm_devi˚
 *
dev
, 
drm_fb_hñ≥r
 *
hñ≥r
,

262 c⁄° 
drm_fb_hñ≥r_funcs
 *
funcs
);

263 
drm_fb_hñ≥r_öô
(
drm_devi˚
 *
dev
,

264 
drm_fb_hñ≥r
 *
hñ≥r
, 
max_c⁄n
);

265 
drm_fb_hñ≥r_föi
(
drm_fb_hñ≥r
 *
hñ≥r
);

266 
drm_fb_hñ≥r_bœnk
(
bœnk
, 
fb_öfo
 *
öfo
);

267 
drm_fb_hñ≥r_∑n_di•œy
(
fb_v¨_s¸ìnöfo
 *
v¨
,

268 
fb_öfo
 *
öfo
);

269 
drm_fb_hñ≥r_£t_∑r
(
fb_öfo
 *
öfo
);

270 
drm_fb_hñ≥r_check_v¨
(
fb_v¨_s¸ìnöfo
 *
v¨
,

271 
fb_öfo
 *
öfo
);

273 
drm_fb_hñ≥r_ª°‹e_fbdev_mode_u∆ocked
(
drm_fb_hñ≥r
 *
fb_hñ≥r
);

275 
fb_öfo
 *
drm_fb_hñ≥r_Æloc_fbi
(
drm_fb_hñ≥r
 *
fb_hñ≥r
);

276 
drm_fb_hñ≥r_uƒegi°î_fbi
(
drm_fb_hñ≥r
 *
fb_hñ≥r
);

277 
drm_fb_hñ≥r_fûl_v¨
(
fb_öfo
 *
öfo
, 
drm_fb_hñ≥r
 *
fb_hñ≥r
,

278 
uöt32_t
 
fb_width
, uöt32_à
fb_height
);

279 
drm_fb_hñ≥r_fûl_fix
(
fb_öfo
 *
öfo
, 
uöt32_t
 
pôch
,

280 
uöt32_t
 
dïth
);

282 
drm_fb_hñ≥r_u∆ök_fbi
(
drm_fb_hñ≥r
 *
fb_hñ≥r
);

284 
drm_fb_hñ≥r_de„ºed_io
(
fb_öfo
 *
öfo
,

285 
li°_hód
 *
∑gñi°
);

286 
drm_fb_hñ≥r_defio_öô
(
drm_fb_hñ≥r
 *
fb_hñ≥r
);

288 
ssize_t
 
drm_fb_hñ≥r_sys_ªad
(
fb_öfo
 *
öfo
, 
__u£r
 *
buf
,

289 
size_t
 
cou¡
, 
loff_t
 *
µos
);

290 
ssize_t
 
drm_fb_hñ≥r_sys_wrôe
(
fb_öfo
 *
öfo
, c⁄° 
__u£r
 *
buf
,

291 
size_t
 
cou¡
, 
loff_t
 *
µos
);

293 
drm_fb_hñ≥r_sys_fûÃe˘
(
fb_öfo
 *
öfo
,

294 c⁄° 
fb_fûÃe˘
 *
ª˘
);

295 
drm_fb_hñ≥r_sys_c›y¨ó
(
fb_öfo
 *
öfo
,

296 c⁄° 
fb_c›y¨ó
 *
¨ó
);

297 
drm_fb_hñ≥r_sys_imageblô
(
fb_öfo
 *
öfo
,

298 c⁄° 
fb_image
 *
image
);

300 
drm_fb_hñ≥r_cfb_fûÃe˘
(
fb_öfo
 *
öfo
,

301 c⁄° 
fb_fûÃe˘
 *
ª˘
);

302 
drm_fb_hñ≥r_cfb_c›y¨ó
(
fb_öfo
 *
öfo
,

303 c⁄° 
fb_c›y¨ó
 *
¨ó
);

304 
drm_fb_hñ≥r_cfb_imageblô
(
fb_öfo
 *
öfo
,

305 c⁄° 
fb_image
 *
image
);

307 
drm_fb_hñ≥r_£t_su•íd
(
drm_fb_hñ≥r
 *
fb_hñ≥r
, 
boﬁ
 
su•íd
);

308 
drm_fb_hñ≥r_£t_su•íd_u∆ocked
(
drm_fb_hñ≥r
 *
fb_hñ≥r
,

309 
boﬁ
 
su•íd
);

311 
drm_fb_hñ≥r_£tcm≠
(
fb_cm≠
 *
cm≠
, 
fb_öfo
 *
öfo
);

313 
drm_fb_hñ≥r_io˘l
(
fb_öfo
 *
öfo
, 
cmd
,

314 
¨g
);

316 
drm_fb_hñ≥r_hŸ∂ug_evít
(
drm_fb_hñ≥r
 *
fb_hñ≥r
);

317 
drm_fb_hñ≥r_öôül_c⁄fig
(
drm_fb_hñ≥r
 *
fb_hñ≥r
, 
bµ_£l
);

318 
drm_fb_hñ≥r_sögÀ_add_Æl_c⁄√˘‹s
(
drm_fb_hñ≥r
 *
fb_hñ≥r
);

319 
drm_fb_hñ≥r_debug_íãr
(
fb_öfo
 *
öfo
);

320 
drm_fb_hñ≥r_debug_Àave
(
fb_öfo
 *
öfo
);

321 
drm_di•œy_mode
 *

322 
drm_has_¥e„ºed_mode
(
drm_fb_hñ≥r_c⁄√˘‹
 *
fb_c⁄√˘‹
,

323 
width
, 
height
);

324 
drm_di•œy_mode
 *

325 
drm_pick_cmdlöe_mode
(
drm_fb_hñ≥r_c⁄√˘‹
 *
fb_hñ≥r_c⁄n
);

327 
drm_fb_hñ≥r_add_⁄e_c⁄√˘‹
(
drm_fb_hñ≥r
 *
fb_hñ≥r
, 
drm_c⁄√˘‹
 *
c⁄√˘‹
);

328 
drm_fb_hñ≥r_ªmove_⁄e_c⁄√˘‹
(
drm_fb_hñ≥r
 *
fb_hñ≥r
,

329 
drm_c⁄√˘‹
 *
c⁄√˘‹
);

331 
drm_fb_hñ≥r_fbdev_£tup
(
drm_devi˚
 *
dev
,

332 
drm_fb_hñ≥r
 *
fb_hñ≥r
,

333 c⁄° 
drm_fb_hñ≥r_funcs
 *
funcs
,

334 
¥e„ºed_bµ
,

335 
max_c⁄n_cou¡
);

336 
drm_fb_hñ≥r_fbdev_ã¨down
(
drm_devi˚
 *
dev
);

338 
drm_fb_hñ≥r_œ°˛o£
(
drm_devi˚
 *
dev
);

339 
drm_fb_hñ≥r_ouçut_pﬁl_ch™ged
(
drm_devi˚
 *
dev
);

341 
ölöe
 
	$drm_fb_hñ≥r_¥ï¨e
(
drm_devi˚
 *
dev
,

342 
drm_fb_hñ≥r
 *
hñ≥r
,

343 c⁄° 
drm_fb_hñ≥r_funcs
 *
funcs
)

345 
	}
}

347 
ölöe
 
	$drm_fb_hñ≥r_öô
(
drm_devi˚
 *
dev
,

348 
drm_fb_hñ≥r
 *
hñ≥r
,

349 
max_c⁄n
)

352 
hñ≥r
->
dev
 = dev;

353 
dev
->
fb_hñ≥r
 = 
hñ≥r
;

356 
	}
}

358 
ölöe
 
	$drm_fb_hñ≥r_föi
(
drm_fb_hñ≥r
 *
hñ≥r
)

360 i‡(
hñ≥r
 && hñ≥r->
dev
)

361 
hñ≥r
->
dev
->
fb_hñ≥r
 = 
NULL
;

362 
	}
}

364 
ölöe
 
	$drm_fb_hñ≥r_bœnk
(
bœnk
, 
fb_öfo
 *
öfo
)

367 
	}
}

369 
ölöe
 
	$drm_fb_hñ≥r_∑n_di•œy
(
fb_v¨_s¸ìnöfo
 *
v¨
,

370 
fb_öfo
 *
öfo
)

373 
	}
}

375 
ölöe
 
	$drm_fb_hñ≥r_£t_∑r
(
fb_öfo
 *
öfo
)

378 
	}
}

380 
ölöe
 
	$drm_fb_hñ≥r_check_v¨
(
fb_v¨_s¸ìnöfo
 *
v¨
,

381 
fb_öfo
 *
öfo
)

384 
	}
}

386 
ölöe
 

387 
	$drm_fb_hñ≥r_ª°‹e_fbdev_mode_u∆ocked
(
drm_fb_hñ≥r
 *
fb_hñ≥r
)

390 
	}
}

392 
ölöe
 
fb_öfo
 *

393 
	$drm_fb_hñ≥r_Æloc_fbi
(
drm_fb_hñ≥r
 *
fb_hñ≥r
)

395  
NULL
;

396 
	}
}

398 
ölöe
 
	$drm_fb_hñ≥r_uƒegi°î_fbi
(
drm_fb_hñ≥r
 *
fb_hñ≥r
)

400 
	}
}

402 
ölöe
 
	$drm_fb_hñ≥r_fûl_v¨
(
fb_öfo
 *
öfo
,

403 
drm_fb_hñ≥r
 *
fb_hñ≥r
,

404 
uöt32_t
 
fb_width
, uöt32_à
fb_height
)

406 
	}
}

408 
ölöe
 
	$drm_fb_hñ≥r_fûl_fix
(
fb_öfo
 *
öfo
, 
uöt32_t
 
pôch
,

409 
uöt32_t
 
dïth
)

411 
	}
}

413 
ölöe
 
	$drm_fb_hñ≥r_£tcm≠
(
fb_cm≠
 *
cm≠
,

414 
fb_öfo
 *
öfo
)

417 
	}
}

419 
ölöe
 
	$drm_fb_hñ≥r_io˘l
(
fb_öfo
 *
öfo
, 
cmd
,

420 
¨g
)

423 
	}
}

425 
ölöe
 
	$drm_fb_hñ≥r_u∆ök_fbi
(
drm_fb_hñ≥r
 *
fb_hñ≥r
)

427 
	}
}

429 
ölöe
 
	$drm_fb_hñ≥r_de„ºed_io
(
fb_öfo
 *
öfo
,

430 
li°_hód
 *
∑gñi°
)

432 
	}
}

434 
ölöe
 
	$drm_fb_hñ≥r_defio_öô
(
drm_fb_hñ≥r
 *
fb_hñ≥r
)

436  -
ENODEV
;

437 
	}
}

439 
ölöe
 
ssize_t
 
	$drm_fb_hñ≥r_sys_ªad
(
fb_öfo
 *
öfo
,

440 
__u£r
 *
buf
, 
size_t
 
cou¡
,

441 
loff_t
 *
µos
)

443  -
ENODEV
;

444 
	}
}

446 
ölöe
 
ssize_t
 
	$drm_fb_hñ≥r_sys_wrôe
(
fb_öfo
 *
öfo
,

447 c⁄° 
__u£r
 *
buf
,

448 
size_t
 
cou¡
, 
loff_t
 *
µos
)

450  -
ENODEV
;

451 
	}
}

453 
ölöe
 
	$drm_fb_hñ≥r_sys_fûÃe˘
(
fb_öfo
 *
öfo
,

454 c⁄° 
fb_fûÃe˘
 *
ª˘
)

456 
	}
}

458 
ölöe
 
	$drm_fb_hñ≥r_sys_c›y¨ó
(
fb_öfo
 *
öfo
,

459 c⁄° 
fb_c›y¨ó
 *
¨ó
)

461 
	}
}

463 
ölöe
 
	$drm_fb_hñ≥r_sys_imageblô
(
fb_öfo
 *
öfo
,

464 c⁄° 
fb_image
 *
image
)

466 
	}
}

468 
ölöe
 
	$drm_fb_hñ≥r_cfb_fûÃe˘
(
fb_öfo
 *
öfo
,

469 c⁄° 
fb_fûÃe˘
 *
ª˘
)

471 
	}
}

473 
ölöe
 
	$drm_fb_hñ≥r_cfb_c›y¨ó
(
fb_öfo
 *
öfo
,

474 c⁄° 
fb_c›y¨ó
 *
¨ó
)

476 
	}
}

478 
ölöe
 
	$drm_fb_hñ≥r_cfb_imageblô
(
fb_öfo
 *
öfo
,

479 c⁄° 
fb_image
 *
image
)

481 
	}
}

483 
ölöe
 
	$drm_fb_hñ≥r_£t_su•íd
(
drm_fb_hñ≥r
 *
fb_hñ≥r
,

484 
boﬁ
 
su•íd
)

486 
	}
}

488 
ölöe
 

489 
	$drm_fb_hñ≥r_£t_su•íd_u∆ocked
(
drm_fb_hñ≥r
 *
fb_hñ≥r
, 
boﬁ
 
su•íd
)

491 
	}
}

493 
ölöe
 
	$drm_fb_hñ≥r_hŸ∂ug_evít
(
drm_fb_hñ≥r
 *
fb_hñ≥r
)

496 
	}
}

498 
ölöe
 
	$drm_fb_hñ≥r_öôül_c⁄fig
(
drm_fb_hñ≥r
 *
fb_hñ≥r
,

499 
bµ_£l
)

502 
	}
}

504 
ölöe
 

505 
	$drm_fb_hñ≥r_sögÀ_add_Æl_c⁄√˘‹s
(
drm_fb_hñ≥r
 *
fb_hñ≥r
)

508 
	}
}

510 
ölöe
 
	$drm_fb_hñ≥r_debug_íãr
(
fb_öfo
 *
öfo
)

513 
	}
}

515 
ölöe
 
	$drm_fb_hñ≥r_debug_Àave
(
fb_öfo
 *
öfo
)

518 
	}
}

520 
ölöe
 
drm_di•œy_mode
 *

521 
	$drm_has_¥e„ºed_mode
(
drm_fb_hñ≥r_c⁄√˘‹
 *
fb_c⁄√˘‹
,

522 
width
, 
height
)

524  
NULL
;

525 
	}
}

527 
ölöe
 
drm_di•œy_mode
 *

528 
	$drm_pick_cmdlöe_mode
(
drm_fb_hñ≥r_c⁄√˘‹
 *
fb_hñ≥r_c⁄n
,

529 
width
, 
height
)

531  
NULL
;

532 
	}
}

534 
ölöe
 

535 
	$drm_fb_hñ≥r_add_⁄e_c⁄√˘‹
(
drm_fb_hñ≥r
 *
fb_hñ≥r
,

536 
drm_c⁄√˘‹
 *
c⁄√˘‹
)

539 
	}
}

541 
ölöe
 

542 
	$drm_fb_hñ≥r_ªmove_⁄e_c⁄√˘‹
(
drm_fb_hñ≥r
 *
fb_hñ≥r
,

543 
drm_c⁄√˘‹
 *
c⁄√˘‹
)

546 
	}
}

548 
ölöe
 

549 
	$drm_fb_hñ≥r_fbdev_£tup
(
drm_devi˚
 *
dev
,

550 
drm_fb_hñ≥r
 *
fb_hñ≥r
,

551 c⁄° 
drm_fb_hñ≥r_funcs
 *
funcs
,

552 
¥e„ºed_bµ
,

553 
max_c⁄n_cou¡
)

556 
dev
->
fb_hñ≥r
 = fb_helper;

559 
	}
}

561 
ölöe
 
	$drm_fb_hñ≥r_fbdev_ã¨down
(
drm_devi˚
 *
dev
)

563 
dev
->
fb_hñ≥r
 = 
NULL
;

564 
	}
}

566 
ölöe
 
	$drm_fb_hñ≥r_œ°˛o£
(
drm_devi˚
 *
dev
)

568 
	}
}

570 
ölöe
 
	$drm_fb_hñ≥r_ouçut_pﬁl_ch™ged
(
drm_devi˚
 *
dev
)

572 
	}
}

576 
ölöe
 

577 
	$drm_fb_hñ≥r_ªmove_c⁄Êi˘ög_‰amebuf„rs
(
≠îtuªs_°ru˘
 *
a
,

578 c⁄° *
«me
, 
boﬁ
 
¥im¨y
)

580 #i‡
	`IS_REACHABLE
(
CONFIG_FB
)

581  
	`ªmove_c⁄Êi˘ög_‰amebuf„rs
(
a
, 
«me
, 
¥im¨y
);

585 
	}
}

	@src/common/linuxkpi/include/drm/drm_file.h

30 #i‚de‡
_DRM_FILE_H_


31 
	#_DRM_FILE_H_


	)

33 
	~<löux/ty≥s.h
>

34 
	~<löux/com∂ëi⁄.h
>

36 
	~<u≠i/drm/drm.h
>

38 
	~<drm/drm_¥ime.h
>

40 
	gdma_„n˚
;

41 
	gdrm_fûe
;

42 
	gdrm_devi˚
;

43 
	gdevi˚
;

50 
	edrm_mö‹_ty≥
 {

51 
	mDRM_MINOR_PRIMARY
,

52 
	mDRM_MINOR_CONTROL
,

53 
	mDRM_MINOR_RENDER
,

65 
	sdrm_mö‹
 {

67 
	mödex
;

68 
	mty≥
;

69 
devi˚
 *
	mkdev
;

70 
drm_devi˚
 *
	mdev
;

71 #i‚de‡
__löux__


72 
devi˚_t
 
	mbsd_kdev
;

73 
cdev
 *
	mbsd_devi˚
;

74 
sigio
 *
	mbuf_sigio
;

76 
díåy
 *
	mdebugfs_roŸ
;

78 
li°_hód
 
	mdebugfs_li°
;

79 
muãx
 
	mdebugfs_lock
;

89 
	sdrm_≥ndög_evít
 {

97 
com∂ëi⁄
 *
	mcom∂ëi⁄
;

106 (*
	mcom∂ëi⁄_ªÀa£
)(
com∂ëi⁄
 *
	mcom∂ëi⁄
);

116 
drm_evít
 *
	mevít
;

124 
dma_„n˚
 *
	m„n˚
;

132 
drm_fûe
 *
	mfûe_¥iv
;

141 
li°_hód
 
	mlök
;

150 
li°_hód
 
	m≥ndög_lök
;

158 
	sdrm_fûe
 {

168 
	mauthítiˇãd
 :1;

175 
	m°îeo_Ælowed
 :1;

183 
	munivîßl_∂™es
:1;

186 
	m©omic
:1;

197 
	mis_ma°î
:1;

209 
drm_ma°î
 *
	mma°î
;

212 #ifde‡
__löux__


213 
pid
 *
	mpid
;

215 
pid_t
 
	mpid
;

216 
	mio˘l_cou¡
;

220 
drm_magic_t
 
	mmagic
;

228 
li°_hód
 
	mlhód
;

231 
drm_mö‹
 *
	mmö‹
;

239 
idr
 
	mobje˘_idr
;

242 
•ölock_t
 
	mèbÀ_lock
;

245 
idr
 
	msyncobj_idr
;

247 
•ölock_t
 
	msyncobj_èbÀ_lock
;

250 
fûe
 *
	mfûp
;

258 *
	mdrivî_¥iv
;

269 
li°_hód
 
	mfbs
;

272 
muãx
 
	mfbs_lock
;

282 
li°_hód
 
	mblobs
;

285 
waô_queue_hód_t
 
	mevít_waô
;

296 
li°_hód
 
	m≥ndög_evít_li°
;

306 
li°_hód
 
	mevít_li°
;

315 
	mevít_•a˚
;

318 
muãx
 
	mevít_ªad_lock
;

325 
drm_¥ime_fûe_¥iv©e
 
	m¥ime
;

328 
	mlock_cou¡
;

341 
ölöe
 
boﬁ
 
	$drm_is_¥im¨y_˛õ¡
(c⁄° 
drm_fûe
 *
fûe_¥iv
)

343  
fûe_¥iv
->
mö‹
->
ty≥
 =
DRM_MINOR_PRIMARY
;

344 
	}
}

355 
ölöe
 
boﬁ
 
	$drm_is_ªndî_˛õ¡
(c⁄° 
drm_fûe
 *
fûe_¥iv
)

357  
fûe_¥iv
->
mö‹
->
ty≥
 =
DRM_MINOR_RENDER
;

358 
	}
}

367 
ölöe
 
boﬁ
 
	$drm_is_c⁄åﬁ_˛õ¡
(c⁄° 
drm_fûe
 *
fûe_¥iv
)

369  
fûe_¥iv
->
mö‹
->
ty≥
 =
DRM_MINOR_CONTROL
;

370 
	}
}

372 
drm_›í
(
öode
 *öode, 
fûe
 *
fûp
);

373 
ssize_t
 
drm_ªad
(
fûe
 *
fûp
, 
__u£r
 *
buf„r
,

374 
size_t
 
cou¡
, 
loff_t
 *
off£t
);

375 
drm_ªÀa£
(
öode
 *öode, 
fûe
 *
fûp
);

376 
__pﬁl_t
 
drm_pﬁl
(
fûe
 *
fûp
, 
pﬁl_èbÀ_°ru˘
 *
waô
);

377 
drm_evít_ª£rve_öô_locked
(
drm_devi˚
 *
dev
,

378 
drm_fûe
 *
fûe_¥iv
,

379 
drm_≥ndög_evít
 *
p
,

380 
drm_evít
 *
e
);

381 
drm_evít_ª£rve_öô
(
drm_devi˚
 *
dev
,

382 
drm_fûe
 *
fûe_¥iv
,

383 
drm_≥ndög_evít
 *
p
,

384 
drm_evít
 *
e
);

385 
drm_evít_ˇn˚l_‰ì
(
drm_devi˚
 *
dev
,

386 
drm_≥ndög_evít
 *
p
);

387 
drm_£nd_evít_locked
(
drm_devi˚
 *
dev
, 
drm_≥ndög_evít
 *
e
);

388 
drm_£nd_evít
(
drm_devi˚
 *
dev
, 
drm_≥ndög_evít
 *
e
);

	@src/common/linuxkpi/include/drm/drm_fixed.h

25 #i‚de‡
DRM_FIXED_H


26 
	#DRM_FIXED_H


	)

28 
	~<löux/m©h64.h
>

30 
	udfixed
 {

31 
u32
 
	mfuŒ
;

32 } 
	tfixed20_12
;

35 
	#dfixed_c⁄°
(
A
Ë(
u32
)(((AË<< 12))

	)

36 
	#dfixed_c⁄°_hÆf
(
A
Ë(
u32
)(((AË<< 12Ë+ 2048)

	)

37 
	#dfixed_c⁄°_666
(
A
Ë(
u32
)(((AË<< 12Ë+ 2731)

	)

38 
	#dfixed_c⁄°_8
(
A
Ë(
u32
)(((AË<< 12Ë+ 3277)

	)

39 
	#dfixed_mul
(
A
, 
B
Ë((
u64
)((u64)(A).
fuŒ
 * (B).fuŒ + 2048Ë>> 12)

	)

40 
	#dfixed_öô
(
A
Ë{ .
fuŒ
 = 
	`dfixed_c⁄°
((A)Ë}

	)

41 
	#dfixed_öô_hÆf
(
A
Ë{ .
fuŒ
 = 
	`dfixed_c⁄°_hÆf
((A)Ë}

	)

42 
	#dfixed_åunc
(
A
Ë((A).
fuŒ
 >> 12)

	)

43 
	#dfixed_‰ac
(
A
Ë((A).
fuŒ
 & ((1 << 12Ë- 1))

	)

45 
ölöe
 
u32
 
	$dfixed_Êo‹
(
fixed20_12
 
A
)

47 
u32
 
n⁄_‰ac
 = 
	`dfixed_åunc
(
A
);

49  
	`dfixed_c⁄°
(
n⁄_‰ac
);

50 
	}
}

52 
ölöe
 
u32
 
	$dfixed_˚û
(
fixed20_12
 
A
)

54 
u32
 
n⁄_‰ac
 = 
	`dfixed_åunc
(
A
);

56 i‡(
A
.
fuŒ
 > 
	`dfixed_c⁄°
(
n⁄_‰ac
))

57  
	`dfixed_c⁄°
(
n⁄_‰ac
 + 1);

59  
	`dfixed_c⁄°
(
n⁄_‰ac
);

60 
	}
}

62 
ölöe
 
u32
 
	$dfixed_div
(
fixed20_12
 
A
, fixed20_12 
B
)

64 
u64
 
tmp
 = ((u64)
A
.
fuŒ
 << 13);

66 
	`do_div
(
tmp
, 
B
.
fuŒ
);

67 
tmp
 += 1;

68 
tmp
 /= 2;

69  
	`lowî_32_bôs
(
tmp
);

70 
	}
}

72 
	#DRM_FIXED_POINT
 32

	)

73 
	#DRM_FIXED_ONE
 (1ULL << 
DRM_FIXED_POINT
)

	)

74 
	#DRM_FIXED_DECIMAL_MASK
 (
DRM_FIXED_ONE
 - 1)

	)

75 
	#DRM_FIXED_DIGITS_MASK
 (~
DRM_FIXED_DECIMAL_MASK
)

	)

76 
	#DRM_FIXED_EPSILON
 1LL

	)

77 
	#DRM_FIXED_ALMOST_ONE
 (
DRM_FIXED_ONE
 - 
DRM_FIXED_EPSILON
)

	)

79 
ölöe
 
s64
 
	$drm_öt2fixp
(
a
)

81  ((
s64
)
a
Ë<< 
DRM_FIXED_POINT
;

82 
	}
}

84 
ölöe
 
	$drm_fixp2öt
(
s64
 
a
)

86  ((
s64
)
a
Ë>> 
DRM_FIXED_POINT
;

87 
	}
}

89 
ölöe
 
	$drm_fixp2öt_˚û
(
s64
 
a
)

91 i‡(
a
 > 0)

92  
	`drm_fixp2öt
(
a
 + 
DRM_FIXED_ALMOST_ONE
);

94  
	`drm_fixp2öt
(
a
 - 
DRM_FIXED_ALMOST_ONE
);

95 
	}
}

97 
ölöe
 
	$drm_fixp_msb£t
(
s64
 
a
)

99 
shi·
, 
sign
 = (
a
 >> 63) & 1;

101 
shi·
 = 62; shift > 0; --shift)

102 i‡(((
a
 >> 
shi·
Ë& 1Ë!
sign
)

103  
shi·
;

106 
	}
}

108 
ölöe
 
s64
 
	$drm_fixp_mul
(
s64
 
a
, s64 
b
)

110 
shi·
 = 
	`drm_fixp_msb£t
(
a
Ë+ drm_fixp_msb£t(
b
);

111 
s64
 
ªsu…
;

113 i‡(
shi·
 > 61) {

114 
shi·
 = shift - 61;

115 
a
 >>(
shi·
 >> 1) + (shift & 1);

116 
b
 >>
shi·
 >> 1;

118 
shi·
 = 0;

120 
ªsu…
 = 
a
 * 
b
;

122 i‡(
shi·
 > 
DRM_FIXED_POINT
)

123  
ªsu…
 << (
shi·
 - 
DRM_FIXED_POINT
);

125 i‡(
shi·
 < 
DRM_FIXED_POINT
)

126  
ªsu…
 >> (
DRM_FIXED_POINT
 - 
shi·
);

128  
ªsu…
;

129 
	}
}

131 
ölöe
 
s64
 
	$drm_fixp_div
(
s64
 
a
, s64 
b
)

133 
shi·
 = 62 - 
	`drm_fixp_msb£t
(
a
);

134 
s64
 
ªsu…
;

136 
a
 <<
shi·
;

138 i‡(
shi·
 < 
DRM_FIXED_POINT
)

139 
b
 >>(
DRM_FIXED_POINT
 - 
shi·
);

141 
ªsu…
 = 
	`div64_s64
(
a
, 
b
);

143 i‡(
shi·
 > 
DRM_FIXED_POINT
)

144  
ªsu…
 >> (
shi·
 - 
DRM_FIXED_POINT
);

146  
ªsu…
;

147 
	}
}

149 
ölöe
 
s64
 
	$drm_fixp_‰om_‰a˘i⁄
(
s64
 
a
, s64 
b
)

151 
s64
 
ªs
;

152 
boﬁ
 
a_√g
 = 
a
 < 0;

153 
boﬁ
 
b_√g
 = 
b
 < 0;

154 
u64
 
a_abs
 = 
a_√g
 ? -
a
 :á;

155 
u64
 
b_abs
 = 
b_√g
 ? -
b
 : b;

156 
u64
 
ªm
;

159 
u64
 
ªs_abs
 = 
	`div64_u64_ªm
(
a_abs
, 
b_abs
, &
ªm
);

163 
u32
 
i
 = 
DRM_FIXED_POINT
;

166 
ªm
 <<= 1;

167 
ªs_abs
 <<= 1;

168 i‡(
ªm
 >
b_abs
) {

169 
ªs_abs
 |= 1;

170 
ªm
 -
b_abs
;

172 } --
i
 != 0);

177 
u64
 
summ™d
 = (
ªm
 << 1Ë>
b_abs
;

179 
ªs_abs
 +
summ™d
;

182 
ªs
 = (
s64
Ë
ªs_abs
;

183 i‡(
a_√g
 ^ 
b_√g
)

184 
ªs
 = -res;

185  
ªs
;

186 
	}
}

188 
ölöe
 
s64
 
	$drm_fixp_exp
(
s64
 
x
)

190 
s64
 
tﬁî™˚
 = 
	`div64_s64
(
DRM_FIXED_ONE
, 1000000);

191 
s64
 
sum
 = 
DRM_FIXED_ONE
, 
ãrm
, 
y
 = 
x
;

192 
u64
 
cou¡
 = 1;

194 i‡(
x
 < 0)

195 
y
 = -1 * 
x
;

197 
ãrm
 = 
y
;

199 
ãrm
 >
tﬁî™˚
) {

200 
sum
 = sum + 
ãrm
;

201 
cou¡
 = count + 1;

202 
ãrm
 = 
	`drm_fixp_mul
—îm, 
	`div64_s64
(
y
, 
cou¡
));

205 i‡(
x
 < 0)

206 
sum
 = 
	`drm_fixp_div
(
DRM_FIXED_ONE
, sum);

208  
sum
;

209 
	}
}

	@src/common/linuxkpi/include/drm/drm_flip_work.h

24 #i‚de‡
DRM_FLIP_WORK_H


25 
	#DRM_FLIP_WORK_H


	)

27 
	~<löux/kfifo.h
>

28 
	~<löux/•ölock.h
>

29 
	~<löux/w‹kqueue.h
>

41 
	gdrm_Êù_w‹k
;

52 (*
	tdrm_Êù_func_t
)(
	tdrm_Êù_w‹k
 *
	tw‹k
, *
	tvÆ
);

59 
	sdrm_Êù_èsk
 {

60 
li°_hód
 
node
;

61 *
d©a
;

73 
	sdrm_Êù_w‹k
 {

74 c⁄° *
«me
;

75 
drm_Êù_func_t
 
func
;

76 
w‹k_°ru˘
 
w‹kî
;

77 
li°_hód
 
queued
;

78 
li°_hód
 
commôed
;

79 
•ölock_t
 
lock
;

82 
drm_Êù_èsk
 *
	`drm_Êù_w‹k_Æloˇã_èsk
(*
d©a
, 
gÂ_t
 
Êags
);

83 
	`drm_Êù_w‹k_queue_èsk
(
drm_Êù_w‹k
 *
w‹k
,

84 
drm_Êù_èsk
 *
èsk
);

85 
	`drm_Êù_w‹k_queue
(
drm_Êù_w‹k
 *
w‹k
, *
vÆ
);

86 
	`drm_Êù_w‹k_commô
(
drm_Êù_w‹k
 *
w‹k
,

87 
w‹kqueue_°ru˘
 *
wq
);

88 
	`drm_Êù_w‹k_öô
(
drm_Êù_w‹k
 *
w‹k
,

89 c⁄° *
«me
, 
drm_Êù_func_t
 
func
);

90 
	`drm_Êù_w‹k_˛ónup
(
drm_Êù_w‹k
 *
w‹k
);

	@src/common/linuxkpi/include/drm/drm_fourcc.h

22 #i‚de‡
__DRM_FOURCC_H__


23 
	#__DRM_FOURCC_H__


	)

25 
	~<löux/ty≥s.h
>

26 
	~<u≠i/drm/drm_fourcc.h
>

28 
	gdrm_devi˚
;

29 
	gdrm_mode_fb_cmd2
;

42 
	sdrm_f‹m©_öfo
 {

43 
u32
 
	mf‹m©
;

44 
u8
 
	mdïth
;

45 
u8
 
	mnum_∂™es
;

46 
u8
 
	m˝p
[3];

47 
u8
 
	mhsub
;

48 
u8
 
	mvsub
;

55 
	sdrm_f‹m©_«me_buf
 {

56 
	m°r
[32];

59 c⁄° 
drm_f‹m©_öfo
 *
__drm_f‹m©_öfo
(
u32
 
f‹m©
);

60 c⁄° 
drm_f‹m©_öfo
 *drm_f‹m©_öfo(
u32
 
f‹m©
);

61 c⁄° 
drm_f‹m©_öfo
 *

62 
drm_gë_f‹m©_öfo
(
drm_devi˚
 *
dev
,

63 c⁄° 
drm_mode_fb_cmd2
 *
mode_cmd
);

64 
uöt32_t
 
drm_mode_Àgacy_fb_f‹m©
(uöt32_à
bµ
, uöt32_à
dïth
);

65 
drm_f‹m©_num_∂™es
(
uöt32_t
 
f‹m©
);

66 
drm_f‹m©_∂™e_˝p
(
uöt32_t
 
f‹m©
, 
∂™e
);

67 
drm_f‹m©_h‹z_chroma_subßm∂ög
(
uöt32_t
 
f‹m©
);

68 
drm_f‹m©_vît_chroma_subßm∂ög
(
uöt32_t
 
f‹m©
);

69 
drm_f‹m©_∂™e_width
(
width
, 
uöt32_t
 
f‹m©
, 
∂™e
);

70 
drm_f‹m©_∂™e_height
(
height
, 
uöt32_t
 
f‹m©
, 
∂™e
);

71 c⁄° *
drm_gë_f‹m©_«me
(
uöt32_t
 
f‹m©
, 
drm_f‹m©_«me_buf
 *
buf
);

	@src/common/linuxkpi/include/drm/drm_framebuffer.h

23 #i‚de‡
__DRM_FRAMEBUFFER_H__


24 
	#__DRM_FRAMEBUFFER_H__


	)

26 
	~<löux/li°.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<drm/drm_mode_obje˘.h
>

30 
	gdrm_‰amebuf„r
;

31 
	gdrm_fûe
;

32 
	gdrm_devi˚
;

37 
	sdrm_‰amebuf„r_funcs
 {

48 (*
	mde°roy
)(
drm_‰amebuf„r
 *
	m‰amebuf„r
);

68 (*
	m¸óã_h™dÀ
)(
drm_‰amebuf„r
 *
	mfb
,

69 
drm_fûe
 *
	mfûe_¥iv
,

70 *
	mh™dÀ
);

89 (*
	mdúty
)(
drm_‰amebuf„r
 *
	m‰amebuf„r
,

90 
drm_fûe
 *
	mfûe_¥iv
, 
	mÊags
,

91 
	mcﬁ‹
, 
drm_˛ù_ª˘
 *
	m˛ùs
,

92 
	mnum_˛ùs
);

109 
	sdrm_‰amebuf„r
 {

113 
drm_devi˚
 *
	mdev
;

118 
li°_hód
 
	mhód
;

123 
drm_mode_obje˘
 
	mba£
;

128 
	mcomm
[
TASK_COMM_LEN
];

133 c⁄° 
drm_f‹m©_öfo
 *
	mf‹m©
;

137 c⁄° 
drm_‰amebuf„r_funcs
 *
	mfuncs
;

142 
	mpôches
[4];

160 
	moff£ts
[4];

167 
uöt64_t
 
	mmodifõr
;

172 
	mwidth
;

177 
	mheight
;

182 
	mÊags
;

188 
	mhŸ_x
;

194 
	mhŸ_y
;

198 
li°_hód
 
	mfûp_hód
;

205 
drm_gem_obje˘
 *
	mobj
[4];

208 
	#obj_to_fb
(
x
Ë
	`c⁄èöî_of
(x, 
drm_‰amebuf„r
, 
ba£
)

	)

210 
drm_‰amebuf„r_öô
(
drm_devi˚
 *
dev
,

211 
drm_‰amebuf„r
 *
fb
,

212 c⁄° 
drm_‰amebuf„r_funcs
 *
funcs
);

213 
drm_‰amebuf„r
 *
drm_‰amebuf„r_lookup
(
drm_devi˚
 *
dev
,

214 
drm_fûe
 *
fûe_¥iv
,

215 
uöt32_t
 
id
);

216 
drm_‰amebuf„r_ªmove
(
drm_‰amebuf„r
 *
fb
);

217 
drm_‰amebuf„r_˛ónup
(
drm_‰amebuf„r
 *
fb
);

218 
drm_‰amebuf„r_uƒegi°î_¥iv©e
(
drm_‰amebuf„r
 *
fb
);

226 
ölöe
 
	$drm_‰amebuf„r_gë
(
drm_‰amebuf„r
 *
fb
)

228 
	`drm_mode_obje˘_gë
(&
fb
->
ba£
);

229 
	}
}

238 
ölöe
 
	$drm_‰amebuf„r_put
(
drm_‰amebuf„r
 *
fb
)

240 
	`drm_mode_obje˘_put
(&
fb
->
ba£
);

241 
	}
}

250 
ölöe
 
	$drm_‰amebuf„r_ª„ªn˚
(
drm_‰amebuf„r
 *
fb
)

252 
	`drm_‰amebuf„r_gë
(
fb
);

253 
	}
}

262 
ölöe
 
	$drm_‰amebuf„r_uƒe„ªn˚
(
drm_‰amebuf„r
 *
fb
)

264 
	`drm_‰amebuf„r_put
(
fb
);

265 
	}
}

273 
ölöe
 
uöt32_t
 
	$drm_‰amebuf„r_ªad_ªfcou¡
(c⁄° 
drm_‰amebuf„r
 *
fb
)

275  
	`kªf_ªad
(&
fb
->
ba£
.
ªfcou¡
);

276 
	}
}

286 
ölöe
 
	$drm_‰amebuf„r_assign
(
drm_‰amebuf„r
 **
p
,

287 
drm_‰amebuf„r
 *
fb
)

289 i‡(
fb
)

290 
	`drm_‰amebuf„r_gë
(
fb
);

291 i‡(*
p
)

292 
	`drm_‰amebuf„r_put
(*
p
);

293 *
p
 = 
fb
;

294 
	}
}

304 
	#drm_f‹_óch_fb
(
fb
, 
dev
) \

305 
	`WARN_ON
(!
	`muãx_is_locked
(&(
dev
)->
mode_c⁄fig
.
fb_lock
)), \

306 
fb
 = 
	`li°_fú°_íåy
(&(
dev
)->
mode_c⁄fig
.
fb_li°
, \

307 
drm_‰amebuf„r
, 
hód
); \

308 &
fb
->
hód
 !(&(
dev
)->
mode_c⁄fig
.
fb_li°
); \

309 
fb
 = 
	`li°_√xt_íåy
(fb, 
hód
))

	)

311 
drm_‰amebuf„r_∂™e_width
(
width
,

312 c⁄° 
drm_‰amebuf„r
 *
fb
, 
∂™e
);

313 
drm_‰amebuf„r_∂™e_height
(
height
,

314 c⁄° 
drm_‰amebuf„r
 *
fb
, 
∂™e
);

	@src/common/linuxkpi/include/drm/drm_gem.h

1 #i‚de‡
__DRM_GEM_H__


2 
	#__DRM_GEM_H__


	)

37 
	~<löux/kªf.h
>

39 
	~<drm/drm_vma_m™agî.h
>

49 
	sdrm_gem_obje˘
 {

59 
kªf
 
	mªfcou¡
;

72 
	mh™dÀ_cou¡
;

77 
drm_devi˚
 *
	mdev
;

87 
fûe
 *
	mfûp
;

99 
drm_vma_off£t_node
 
	mvma_node
;

107 
size_t
 
	msize
;

116 
	m«me
;

126 
uöt32_t
 
	mªad_domaös
;

131 
uöt32_t
 
	mwrôe_domaö
;

144 
dma_buf
 *
	mdma_buf
;

163 
dma_buf_©èchmít
 *
	mimp‹t_©èch
;

179 
	#DEFINE_DRM_GEM_FOPS
(
«me
) \

180 c⁄° 
fûe_›î©i⁄s
 
«me
 = {\

181 .
ow√r
 = 
THIS_MODULE
,\

182 .
›í
 = 
drm_›í
,\

183 .
ªÀa£
 = 
drm_ªÀa£
,\

184 .
u∆ocked_io˘l
 = 
drm_io˘l
,\

185 .
com∑t_io˘l
 = 
drm_com∑t_io˘l
,\

186 .
pﬁl
 = 
drm_pﬁl
,\

187 .
ªad
 = 
drm_ªad
,\

188 .
Œ£ek
 = 
no›_Œ£ek
,\

189 .
mm≠
 = 
drm_gem_mm≠
,\

190 }

	)

192 
drm_gem_obje˘_ªÀa£
(
drm_gem_obje˘
 *
obj
);

193 
drm_gem_obje˘_‰ì
(
kªf
 *kref);

194 
drm_gem_obje˘_öô
(
drm_devi˚
 *
dev
,

195 
drm_gem_obje˘
 *
obj
, 
size_t
 
size
);

196 
drm_gem_¥iv©e_obje˘_öô
(
drm_devi˚
 *
dev
,

197 
drm_gem_obje˘
 *
obj
, 
size_t
 
size
);

198 
drm_gem_vm_›í
(
vm_¨ó_°ru˘
 *
vma
);

199 
drm_gem_vm_˛o£
(
vm_¨ó_°ru˘
 *
vma
);

200 
drm_gem_mm≠_obj
(
drm_gem_obje˘
 *
obj
, 
obj_size
,

201 
vm_¨ó_°ru˘
 *
vma
);

202 
drm_gem_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
);

211 
ölöe
 
	$drm_gem_obje˘_gë
(
drm_gem_obje˘
 *
obj
)

213 
	`kªf_gë
(&
obj
->
ªfcou¡
);

214 
	}
}

231 
ölöe
 

232 
	$__drm_gem_obje˘_put
(
drm_gem_obje˘
 *
obj
)

234 
	`kªf_put
(&
obj
->
ªfcou¡
, 
drm_gem_obje˘_‰ì
);

235 
	}
}

237 
drm_gem_obje˘_put_u∆ocked
(
drm_gem_obje˘
 *
obj
);

238 
drm_gem_obje˘_put
(
drm_gem_obje˘
 *
obj
);

247 
ölöe
 
	$drm_gem_obje˘_ª„ªn˚
(
drm_gem_obje˘
 *
obj
)

249 
	`drm_gem_obje˘_gë
(
obj
);

250 
	}
}

260 
ölöe
 
	$__drm_gem_obje˘_uƒe„ªn˚
(
drm_gem_obje˘
 *
obj
)

262 
	`__drm_gem_obje˘_put
(
obj
);

263 
	}
}

272 
ölöe
 

273 
	$drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(
drm_gem_obje˘
 *
obj
)

275 
	`drm_gem_obje˘_put_u∆ocked
(
obj
);

276 
	}
}

285 
ölöe
 
	$drm_gem_obje˘_uƒe„ªn˚
(
drm_gem_obje˘
 *
obj
)

287 
	`drm_gem_obje˘_put
(
obj
);

288 
	}
}

290 
drm_gem_h™dÀ_¸óã
(
drm_fûe
 *
fûe_¥iv
,

291 
drm_gem_obje˘
 *
obj
,

292 
u32
 *
h™dÀp
);

293 
drm_gem_h™dÀ_dñëe
(
drm_fûe
 *
fûp
, 
u32
 
h™dÀ
);

296 
drm_gem_‰ì_mm≠_off£t
(
drm_gem_obje˘
 *
obj
);

297 
drm_gem_¸óã_mm≠_off£t
(
drm_gem_obje˘
 *
obj
);

298 
drm_gem_¸óã_mm≠_off£t_size
(
drm_gem_obje˘
 *
obj
, 
size_t
 
size
);

300 
∑ge
 **
drm_gem_gë_∑ges
(
drm_gem_obje˘
 *
obj
);

301 
drm_gem_put_∑ges
(
drm_gem_obje˘
 *
obj
, 
∑ge
 **
∑ges
,

302 
boﬁ
 
dúty
, boﬁ 
ac˚s£d
);

304 
drm_gem_obje˘
 *
drm_gem_obje˘_lookup
(
drm_fûe
 *
fûp
, 
u32
 
h™dÀ
);

305 
drm_gem_dumb_m≠_off£t
(
drm_fûe
 *
fûe
, 
drm_devi˚
 *
dev
,

306 
u32
 
h™dÀ
, 
u64
 *
off£t
);

307 
drm_gem_dumb_de°roy
(
drm_fûe
 *
fûe
,

308 
drm_devi˚
 *
dev
,

309 
uöt32_t
 
h™dÀ
);

	@src/common/linuxkpi/include/drm/drm_gem_cma_helper.h

2 #i‚de‡
__DRM_GEM_CMA_HELPER_H__


3 
	#__DRM_GEM_CMA_HELPER_H__


	)

5 
	~<drm/drmP.h
>

6 
	~<drm/drm_gem.h
>

17 
	sdrm_gem_cma_obje˘
 {

18 
drm_gem_obje˘
 
	mba£
;

19 
dma_addr_t
 
	m∑ddr
;

20 
sg_èbÀ
 *
	msgt
;

23 *
	mvaddr
;

26 
	#to_drm_gem_cma_obj
(
gem_obj
) \

27 
	`c⁄èöî_of
(
gem_obj
, 
drm_gem_cma_obje˘
, 
ba£
)

	)

29 #i‚de‡
CONFIG_MMU


30 
	#DRM_GEM_CMA_UNMAPPED_AREA_FOPS
 \

31 .
gë_unm≠≥d_¨ó
 = 
drm_gem_cma_gë_unm≠≥d_¨ó
,

	)

33 
	#DRM_GEM_CMA_UNMAPPED_AREA_FOPS


	)

49 
	#DEFINE_DRM_GEM_CMA_FOPS
(
«me
) \

50 c⁄° 
fûe_›î©i⁄s
 
«me
 = {\

51 .
ow√r
 = 
THIS_MODULE
,\

52 .
›í
 = 
drm_›í
,\

53 .
ªÀa£
 = 
drm_ªÀa£
,\

54 .
u∆ocked_io˘l
 = 
drm_io˘l
,\

55 .
com∑t_io˘l
 = 
drm_com∑t_io˘l
,\

56 .
pﬁl
 = 
drm_pﬁl
,\

57 .
ªad
 = 
drm_ªad
,\

58 .
Œ£ek
 = 
no›_Œ£ek
,\

59 .
mm≠
 = 
drm_gem_cma_mm≠
,\

60 
DRM_GEM_CMA_UNMAPPED_AREA_FOPS
 \

61 }

	)

64 
drm_gem_cma_‰ì_obje˘
(
drm_gem_obje˘
 *
gem_obj
);

67 
drm_gem_cma_dumb_¸óã_öã∫Æ
(
drm_fûe
 *
fûe_¥iv
,

68 
drm_devi˚
 *
drm
,

69 
drm_mode_¸óã_dumb
 *
¨gs
);

72 
drm_gem_cma_dumb_¸óã
(
drm_fûe
 *
fûe_¥iv
,

73 
drm_devi˚
 *
drm
,

74 
drm_mode_¸óã_dumb
 *
¨gs
);

77 
drm_gem_cma_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
);

80 
drm_gem_cma_obje˘
 *
drm_gem_cma_¸óã
(
drm_devi˚
 *
drm
,

81 
size_t
 
size
);

83 c⁄° 
vm_›î©i⁄s_°ru˘
 
drm_gem_cma_vm_›s
;

85 #i‚de‡
CONFIG_MMU


86 
drm_gem_cma_gë_unm≠≥d_¨ó
(
fûe
 *
fûp
,

87 
addr
,

88 
Àn
,

89 
pgoff
,

90 
Êags
);

93 
drm_gem_cma_¥öt_öfo
(
drm_¥öãr
 *
p
, 
ödít
,

94 c⁄° 
drm_gem_obje˘
 *
obj
);

96 
sg_èbÀ
 *
drm_gem_cma_¥ime_gë_sg_èbÀ
(
drm_gem_obje˘
 *
obj
);

97 
drm_gem_obje˘
 *

98 
drm_gem_cma_¥ime_imp‹t_sg_èbÀ
(
drm_devi˚
 *
dev
,

99 
dma_buf_©èchmít
 *
©èch
,

100 
sg_èbÀ
 *
sgt
);

101 
drm_gem_cma_¥ime_mm≠
(
drm_gem_obje˘
 *
obj
,

102 
vm_¨ó_°ru˘
 *
vma
);

103 *
drm_gem_cma_¥ime_vm≠
(
drm_gem_obje˘
 *
obj
);

104 
drm_gem_cma_¥ime_vunm≠
(
drm_gem_obje˘
 *
obj
, *
vaddr
);

	@src/common/linuxkpi/include/drm/drm_gem_framebuffer_helper.h

1 #i‚de‡
__DRM_GEM_FB_HELPER_H__


2 
	#__DRM_GEM_FB_HELPER_H__


	)

4 
	gdrm_devi˚
;

5 
	gdrm_fb_hñ≥r_surÁ˚_size
;

6 
	gdrm_fûe
;

7 
	gdrm_‰amebuf„r
;

8 
	gdrm_‰amebuf„r_funcs
;

9 
	gdrm_gem_obje˘
;

10 
	gdrm_mode_fb_cmd2
;

11 
	gdrm_∂™e
;

12 
	gdrm_∂™e_°©e
;

14 
drm_gem_obje˘
 *
drm_gem_fb_gë_obj
(
drm_‰amebuf„r
 *
fb
,

15 
∂™e
);

16 
drm_gem_fb_de°roy
(
drm_‰amebuf„r
 *
fb
);

17 
drm_gem_fb_¸óã_h™dÀ
(
drm_‰amebuf„r
 *
fb
, 
drm_fûe
 *
fûe
,

18 *
h™dÀ
);

20 
drm_‰amebuf„r
 *

21 
drm_gem_fb_¸óã_wôh_funcs
(
drm_devi˚
 *
dev
, 
drm_fûe
 *
fûe
,

22 c⁄° 
drm_mode_fb_cmd2
 *
mode_cmd
,

23 c⁄° 
drm_‰amebuf„r_funcs
 *
funcs
);

24 
drm_‰amebuf„r
 *

25 
drm_gem_fb_¸óã
(
drm_devi˚
 *
dev
, 
drm_fûe
 *
fûe
,

26 c⁄° 
drm_mode_fb_cmd2
 *
mode_cmd
);

28 
drm_gem_fb_¥ï¨e_fb
(
drm_∂™e
 *
∂™e
,

29 
drm_∂™e_°©e
 *
°©e
);

31 
drm_‰amebuf„r
 *

32 
drm_gem_fbdev_fb_¸óã
(
drm_devi˚
 *
dev
,

33 
drm_fb_hñ≥r_surÁ˚_size
 *
sizes
,

34 
pôch_Æign
, 
drm_gem_obje˘
 *
obj
,

35 c⁄° 
drm_‰amebuf„r_funcs
 *
funcs
);

	@src/common/linuxkpi/include/drm/drm_global.h

31 #i‚de‡
_DRM_GLOBAL_H_


32 
	#_DRM_GLOBAL_H_


	)

33 
	edrm_globÆ_ty≥s
 {

34 
	mDRM_GLOBAL_TTM_MEM
 = 0,

35 
	mDRM_GLOBAL_TTM_BO
,

36 
	mDRM_GLOBAL_TTM_OBJECT
,

37 
	mDRM_GLOBAL_NUM


40 
	sdrm_globÆ_ª„ªn˚
 {

41 
drm_globÆ_ty≥s
 
	mglobÆ_ty≥
;

42 
size_t
 
	msize
;

43 *
	mobje˘
;

44 (*
	möô
Ë(
	mdrm_globÆ_ª„ªn˚
 *);

45 (*
	mªÀa£
Ë(
	mdrm_globÆ_ª„ªn˚
 *);

48 
drm_globÆ_öô
();

49 
drm_globÆ_ªÀa£
();

50 
drm_globÆ_ôem_ªf
(
drm_globÆ_ª„ªn˚
 *
ªf
);

51 
drm_globÆ_ôem_uƒef
(
drm_globÆ_ª„ªn˚
 *
ªf
);

	@src/common/linuxkpi/include/drm/drm_hashtab.h

35 #i‚de‡
DRM_HASHTAB_H


36 
	#DRM_HASHTAB_H


	)

38 
	~<löux/li°.h
>

40 
	#drm_hash_íåy
(
_±r
, 
_ty≥
, 
_membî
Ë
	`c⁄èöî_of
(_±r, _ty≥, _membî)

	)

42 
	sdrm_hash_ôem
 {

43 
hli°_node
 
	mhód
;

44 
	mkey
;

47 
	sdrm_›í_hash
 {

48 
hli°_hód
 *
	mèbÀ
;

49 
u8
 
	m‹dî
;

52 
drm_ht_¸óã
(
drm_›í_hash
 *
ht
, 
‹dî
);

53 
drm_ht_ö£π_ôem
(
drm_›í_hash
 *
ht
, 
drm_hash_ôem
 *
ôem
);

54 
drm_ht_ju°_ö£π_∂ó£
(
drm_›í_hash
 *
ht
, 
drm_hash_ôem
 *
ôem
,

55 
£ed
, 
bôs
, 
shi·
,

56 
add
);

57 
drm_ht_föd_ôem
(
drm_›í_hash
 *
ht
, 
key
, 
drm_hash_ôem
 **
ôem
);

59 
drm_ht_vîbo£_li°
(
drm_›í_hash
 *
ht
, 
key
);

60 
drm_ht_ªmove_key
(
drm_›í_hash
 *
ht
, 
key
);

61 
drm_ht_ªmove_ôem
(
drm_›í_hash
 *
ht
, 
drm_hash_ôem
 *
ôem
);

62 
drm_ht_ªmove
(
drm_›í_hash
 *
ht
);

73 
	#drm_ht_ö£π_ôem_rcu
 
drm_ht_ö£π_ôem


	)

74 
	#drm_ht_ju°_ö£π_∂ó£_rcu
 
drm_ht_ju°_ö£π_∂ó£


	)

75 
	#drm_ht_ªmove_key_rcu
 
drm_ht_ªmove_key


	)

76 
	#drm_ht_ªmove_ôem_rcu
 
drm_ht_ªmove_ôem


	)

77 
	#drm_ht_föd_ôem_rcu
 
drm_ht_föd_ôem


	)

	@src/common/linuxkpi/include/drm/drm_ioctl.h

32 #i‚de‡
_DRM_IOCTL_H_


33 
	#_DRM_IOCTL_H_


	)

35 
	~<löux/ty≥s.h
>

36 
	~<löux/bô›s.h
>

38 #ifde‡
__löux__


39 
	~<asm/io˘l.h
>

42 
	gdrm_devi˚
;

43 
	gdrm_fûe
;

44 
	gfûe
;

56 
	tdrm_io˘l_t
(
	tdrm_devi˚
 *
	tdev
, *
	td©a
,

57 
	tdrm_fûe
 *
	tfûe_¥iv
);

69 
	tdrm_io˘l_com∑t_t
(
	tfûe
 *
	tfûp
, 
	tcmd
,

70 
	t¨g
);

71 #ifde‡
__löux__


72 
	#DRM_IOCTL_NR
(
n
Ë
	`_IOC_NR
“)

	)

74 
	#DRM_IOCTL_NR
(
n
Ë(“Ë& 0xff)

	)

76 
	#DRM_MAJOR
 226

	)

84 
	edrm_io˘l_Êags
 {

92 
	mDRM_AUTH
 = 
BIT
(0),

104 
	mDRM_MASTER
 = 
BIT
(1),

115 
	mDRM_ROOT_ONLY
 = 
BIT
(2),

122 
	mDRM_CONTROL_ALLOW
 = 
BIT
(3),

130 
	mDRM_UNLOCKED
 = 
BIT
(4),

140 
	mDRM_RENDER_ALLOW
 = 
BIT
(5),

153 
	sdrm_io˘l_desc
 {

154 
	mcmd
;

155 
drm_io˘l_Êags
 
	mÊags
;

156 
drm_io˘l_t
 *
	mfunc
;

157 c⁄° *
	m«me
;

170 
	#DRM_IOCTL_DEF_DRV
(
io˘l
, 
_func
, 
_Êags
) \

171 [
	`DRM_IOCTL_NR
(
DRM_IOCTL_
##
io˘l
Ë- 
DRM_COMMAND_BASE
] = { \

172 .
cmd
 = 
DRM_IOCTL_
##
io˘l
, \

173 .
func
 = 
_func
, \

174 .
Êags
 = 
_Êags
, \

175 .
«me
 = #ioctl \

176 }

	)

178 
drm_io˘l_≥rmô
(
u32
 
Êags
, 
drm_fûe
 *
fûe_¥iv
);

179 
drm_io˘l
(
fûe
 *
fûp
, 
cmd
, 
¨g
);

180 
drm_io˘l_kî√l
(
fûe
 *, 
drm_io˘l_t
, *, 
u32
);

181 #ifde‡
CONFIG_COMPAT


182 
drm_com∑t_io˘l
(
fûe
 *
fûp
, 
cmd
, 
¨g
);

185 
	#drm_com∑t_io˘l
 
NULL


	)

187 
boﬁ
 
drm_io˘l_Êags
(
ƒ
, *
Êags
);

189 
drm_no›
(
drm_devi˚
 *
dev
, *
d©a
,

190 
drm_fûe
 *
fûe_¥iv
);

191 
drm_övÆid_›
(
drm_devi˚
 *
dev
, *
d©a
,

192 
drm_fûe
 *
fûe_¥iv
);

194 #i‚de‡
__löux__


195 
drm_io˘l_kî√l
(
fûe
 *fûe, 
drm_io˘l_t
 *
func
, *
kd©a
,

196 
u32
 
Êags
);

	@src/common/linuxkpi/include/drm/drm_irq.h

24 #i‚de‡
_DRM_IRQ_H_


25 
	#_DRM_IRQ_H_


	)

27 
	gdrm_devi˚
;

29 
drm_úq_ö°Æl
(
drm_devi˚
 *
dev
, 
úq
);

30 
drm_úq_unö°Æl
(
drm_devi˚
 *
dev
);

	@src/common/linuxkpi/include/drm/drm_lease.h

15 #i‚de‡
_DRM_LEASE_H_


16 
	#_DRM_LEASE_H_


	)

18 
	gdrm_fûe
;

19 
	gdrm_devi˚
;

20 
	gdrm_ma°î
;

22 
drm_ma°î
 *
drm_Àa£_ow√r
(drm_ma°î *
ma°î
);

24 
drm_Àa£_de°roy
(
drm_ma°î
 *
Às£e
);

26 
boﬁ
 
drm_Àa£_hñd
(
drm_fûe
 *
fûe_¥iv
, 
id
);

28 
boﬁ
 
_drm_Àa£_hñd
(
drm_fûe
 *
fûe_¥iv
, 
id
);

30 
drm_Àa£_ªvoke
(
drm_ma°î
 *
ma°î
);

32 
uöt32_t
 
drm_Àa£_fûãr_¸tcs
(
drm_fûe
 *
fûe_¥iv
, uöt32_à
¸tcs
);

34 
drm_mode_¸óã_Àa£_io˘l
(
drm_devi˚
 *
dev
,

35 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

37 
drm_mode_li°_Às£es_io˘l
(
drm_devi˚
 *
dev
,

38 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

40 
drm_mode_gë_Àa£_io˘l
(
drm_devi˚
 *
dev
,

41 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

43 
drm_mode_ªvoke_Àa£_io˘l
(
drm_devi˚
 *
dev
,

44 *
d©a
, 
drm_fûe
 *
fûe_¥iv
);

	@src/common/linuxkpi/include/drm/drm_legacy.h

1 #i‚de‡
__DRM_DRM_LEGACY_H__


2 
	#__DRM_DRM_LEGACY_H__


	)

4 
	~<drm/drm_auth.h
>

50 
	sdrm_buf
 {

51 
	midx
;

52 
	mtŸÆ
;

53 
	m‹dî
;

54 
	mu£d
;

55 
	moff£t
;

56 *
	maddªss
;

57 
	mbus_addªss
;

58 
drm_buf
 *
	m√xt
;

59 
__vﬁ©ûe__
 
	mwaôög
;

60 
__vﬁ©ûe__
 
	m≥ndög
;

61 
drm_fûe
 *
	mfûe_¥iv
;

62 
	mc⁄ãxt
;

63 
	mwhûe_locked
;

65 
	mDRM_LIST_NONE
 = 0,

66 
	mDRM_LIST_FREE
 = 1,

67 
	mDRM_LIST_WAIT
 = 2,

68 
	mDRM_LIST_PEND
 = 3,

69 
	mDRM_LIST_PRIO
 = 4,

70 
	mDRM_LIST_RECLAIM
 = 5

71 } 
	mli°
;

73 
	mdev_¥iv_size
;

74 *
	mdev_¥iv©e
;

77 
	sdrm_dma_h™dÀ
 {

78 
dma_addr_t
 
	mbußddr
;

79 *
	mvaddr
;

80 
size_t
 
	msize
;

81 #i‚de‡
__löux__


82 
bus_dma_èg_t
 
	mèg
;

83 
bus_dmam≠_t
 
	mm≠
;

85 } 
	tdrm_dma_h™dÀ_t
;

90 
	sdrm_buf_íåy
 {

91 
	mbuf_size
;

92 
	mbuf_cou¡
;

93 
drm_buf
 *
	mbuÊi°
;

94 
	m£g_cou¡
;

95 
	m∑ge_‹dî
;

96 
drm_dma_h™dÀ
 **
	m£gli°
;

98 
	mlow_m¨k
;

99 
	mhigh_m¨k
;

105 
	sdrm_devi˚_dma
 {

107 
drm_buf_íåy
 
	mbufs
[
DRM_MAX_ORDER
 + 1];

108 
	mbuf_cou¡
;

109 
drm_buf
 **
	mbuÊi°
;

110 
	m£g_cou¡
;

111 
	m∑ge_cou¡
;

112 *
	m∑gñi°
;

113 
	mbyã_cou¡
;

115 
	m_DRM_DMA_USE_AGP
 = 0x01,

116 
	m_DRM_DMA_USE_SG
 = 0x02,

117 
	m_DRM_DMA_USE_FB
 = 0x04,

118 
	m_DRM_DMA_USE_PCI_RO
 = 0x08

119 } 
	mÊags
;

126 
	sdrm_sg_mem
 {

127 
	mh™dÀ
;

128 *
	mvútuÆ
;

129 
vm_pödex_t
 
	m∑ges
;

130 
∑ge
 **
	m∑gñi°
;

131 
dma_addr_t
 *
	mbußddr
;

137 
	sdrm_loˇl_m≠
 {

138 
ªsour˚_size_t
 
	moff£t
;

139 
	msize
;

140 
drm_m≠_ty≥
 
	mty≥
;

141 
drm_m≠_Êags
 
	mÊags
;

142 *
	mh™dÀ
;

144 
	mmår
;

147 
drm_loˇl_m≠
 
	tdrm_loˇl_m≠_t
;

152 
	sdrm_m≠_li°
 {

153 
li°_hód
 
	mhód
;

154 
drm_hash_ôem
 
	mhash
;

155 
drm_loˇl_m≠
 *
	mm≠
;

156 
uöt64_t
 
	mu£r_tokí
;

157 
drm_ma°î
 *
	mma°î
;

160 
drm_Àgacy_addm≠
(
drm_devi˚
 *
d
, 
ªsour˚_size_t
 
off£t
,

161 
size
, 
drm_m≠_ty≥
 
ty≥
,

162 
drm_m≠_Êags
 
Êags
, 
drm_loˇl_m≠
 **
m≠_p
);

163 
drm_Àgacy_rmm≠
(
drm_devi˚
 *
d
, 
drm_loˇl_m≠
 *
m≠
);

164 
drm_Àgacy_rmm≠_locked
(
drm_devi˚
 *
d
, 
drm_loˇl_m≠
 *
m≠
);

165 
drm_Àgacy_ma°î_rmm≠s
(
drm_devi˚
 *
dev
,

166 
drm_ma°î
 *
ma°î
);

167 
drm_loˇl_m≠
 *
drm_Àgacy_gëßªa
(
drm_devi˚
 *
dev
);

168 
drm_Àgacy_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
);

170 
drm_Àgacy_addbufs_agp
(
drm_devi˚
 *
d
, 
drm_buf_desc
 *
ªq
);

171 
drm_Àgacy_addbufs_pci
(
drm_devi˚
 *
d
, 
drm_buf_desc
 *
ªq
);

179 
	#LOCK_TEST_WITH_RETURN
–
dev
, 
_fûe_¥iv
 ) \

181 i‡(!
	`_DRM_LOCK_IS_HELD
(
_fûe_¥iv
->
ma°î
->
lock
.
hw_lock
->lock) || \

182 
_fûe_¥iv
->
ma°î
->
lock
.
fûe_¥iv
 != _file_priv) { \

183 
	`DRM_ERROR
( "%s called withoutÜock held, held %d owner %p %p\n",\

184 
__func__
, 
	`_DRM_LOCK_IS_HELD
(
_fûe_¥iv
->
ma°î
->
lock
.
hw_lock
->lock),\

185 
_fûe_¥iv
->
ma°î
->
lock
.
fûe_¥iv
, _file_priv); \

186  -
EINVAL
; \

188 } 0)

	)

190 
drm_Àgacy_idÀlock_èke
(
drm_lock_d©a
 *
lock
);

191 
drm_Àgacy_idÀlock_ªÀa£
(
drm_lock_d©a
 *
lock
);

194 
__drm_Àgacy_pci_‰ì
(
drm_devi˚
 *
dev
, 
drm_dma_h™dÀ_t
 * 
dmah
);

197 
drm_Àgacy_i‹em≠
(
drm_loˇl_m≠
 *
m≠
, 
drm_devi˚
 *
dev
);

198 
drm_Àgacy_i‹em≠_wc
(
drm_loˇl_m≠
 *
m≠
, 
drm_devi˚
 *
dev
);

199 
drm_Àgacy_i‹em≠‰ì
(
drm_loˇl_m≠
 *
m≠
, 
drm_devi˚
 *
dev
);

201 
__ölöe__
 
drm_loˇl_m≠
 *
	$drm_Àgacy_födm≠
(
drm_devi˚
 *
dev
,

202 
tokí
)

204 
drm_m≠_li°
 *
_íåy
;

205 
	`li°_f‹_óch_íåy
(
_íåy
, &
dev
->
m≠li°
, 
hód
)

206 i‡(
_íåy
->
u£r_tokí
 =
tokí
)

207  
_íåy
->
m≠
;

208  
NULL
;

209 
	}
}

	@src/common/linuxkpi/include/drm/drm_mipi_dsi.h

12 #i‚de‡
__DRM_MIPI_DSI_H__


13 
	#__DRM_MIPI_DSI_H__


	)

15 
	~<löux/devi˚.h
>

17 
	gmùi_dsi_ho°
;

18 
	gmùi_dsi_devi˚
;

21 
	#MIPI_DSI_MSG_REQ_ACK
 
	`BIT
(0)

	)

23 
	#MIPI_DSI_MSG_USE_LPM
 
	`BIT
(1)

	)

35 
	smùi_dsi_msg
 {

36 
u8
 
	mch™√l
;

37 
u8
 
	mty≥
;

38 
u16
 
	mÊags
;

40 
size_t
 
	mtx_Àn
;

41 c⁄° *
	mtx_buf
;

43 
size_t
 
	mrx_Àn
;

44 *
	mrx_buf
;

47 
boﬁ
 
mùi_dsi_∑ckë_f‹m©_is_sh‹t
(
u8
 
ty≥
);

48 
boﬁ
 
mùi_dsi_∑ckë_f‹m©_is_l⁄g
(
u8
 
ty≥
);

58 
	smùi_dsi_∑ckë
 {

59 
size_t
 
	msize
;

60 
u8
 
	mhódî
[4];

61 
size_t
 
	m∑ylﬂd_Àngth
;

62 c⁄° 
u8
 *
	m∑ylﬂd
;

65 
mùi_dsi_¸óã_∑ckë
(
mùi_dsi_∑ckë
 *
∑ckë
,

66 c⁄° 
mùi_dsi_msg
 *
msg
);

86 
	smùi_dsi_ho°_›s
 {

87 (*
	m©èch
)(
mùi_dsi_ho°
 *
	mho°
,

88 
mùi_dsi_devi˚
 *
	mdsi
);

89 (*
	mdëach
)(
mùi_dsi_ho°
 *
	mho°
,

90 
mùi_dsi_devi˚
 *
	mdsi
);

91 
ssize_t
 (*
å™s„r
)(
mùi_dsi_ho°
 *
	mho°
,

92 c⁄° 
mùi_dsi_msg
 *
	mmsg
);

101 
	smùi_dsi_ho°
 {

102 
devi˚
 *
	mdev
;

103 c⁄° 
mùi_dsi_ho°_›s
 *
	m›s
;

104 
li°_hód
 
	mli°
;

107 
mùi_dsi_ho°_ªgi°î
(
mùi_dsi_ho°
 *
ho°
);

108 
mùi_dsi_ho°_uƒegi°î
(
mùi_dsi_ho°
 *
ho°
);

109 #ifde‡
__löux__


110 
mùi_dsi_ho°
 *
of_föd_mùi_dsi_ho°_by_node
(
devi˚_node
 *
node
);

116 
	#MIPI_DSI_MODE_VIDEO
 
	`BIT
(0)

	)

118 
	#MIPI_DSI_MODE_VIDEO_BURST
 
	`BIT
(1)

	)

120 
	#MIPI_DSI_MODE_VIDEO_SYNC_PULSE
 
	`BIT
(2)

	)

122 
	#MIPI_DSI_MODE_VIDEO_AUTO_VERT
 
	`BIT
(3)

	)

124 
	#MIPI_DSI_MODE_VIDEO_HSE
 
	`BIT
(4)

	)

126 
	#MIPI_DSI_MODE_VIDEO_HFP
 
	`BIT
(5)

	)

128 
	#MIPI_DSI_MODE_VIDEO_HBP
 
	`BIT
(6)

	)

130 
	#MIPI_DSI_MODE_VIDEO_HSA
 
	`BIT
(7)

	)

132 
	#MIPI_DSI_MODE_VSYNC_FLUSH
 
	`BIT
(8)

	)

134 
	#MIPI_DSI_MODE_EOT_PACKET
 
	`BIT
(9)

	)

136 
	#MIPI_DSI_CLOCK_NON_CONTINUOUS
 
	`BIT
(10)

	)

138 
	#MIPI_DSI_MODE_LPM
 
	`BIT
(11)

	)

140 
	emùi_dsi_pixñ_f‹m©
 {

141 
	mMIPI_DSI_FMT_RGB888
,

142 
	mMIPI_DSI_FMT_RGB666
,

143 
	mMIPI_DSI_FMT_RGB666_PACKED
,

144 
	mMIPI_DSI_FMT_RGB565
,

147 
	#DSI_DEV_NAME_SIZE
 20

	)

158 
	smùi_dsi_devi˚_öfo
 {

159 
	mty≥
[
DSI_DEV_NAME_SIZE
];

160 
u32
 
	mch™√l
;

161 
devi˚_node
 *
	mnode
;

174 
	smùi_dsi_devi˚
 {

175 
mùi_dsi_ho°
 *
	mho°
;

176 
devi˚
 
	mdev
;

178 
	m«me
[
DSI_DEV_NAME_SIZE
];

179 
	mch™√l
;

180 
	mœ√s
;

181 
mùi_dsi_pixñ_f‹m©
 
	mf‹m©
;

182 
	mmode_Êags
;

185 
	#MIPI_DSI_MODULE_PREFIX
 "mùi-dsi:"

	)

187 
ölöe
 
mùi_dsi_devi˚
 *
	$to_mùi_dsi_devi˚
(
devi˚
 *
dev
)

189  
	`c⁄èöî_of
(
dev
, 
mùi_dsi_devi˚
, dev);

190 
	}
}

200 
ölöe
 
	$mùi_dsi_pixñ_f‹m©_to_bµ
(
mùi_dsi_pixñ_f‹m©
 
fmt
)

202 
fmt
) {

203 
MIPI_DSI_FMT_RGB888
:

204 
MIPI_DSI_FMT_RGB666
:

207 
MIPI_DSI_FMT_RGB666_PACKED
:

210 
MIPI_DSI_FMT_RGB565
:

214  -
EINVAL
;

215 
	}
}

217 
mùi_dsi_devi˚
 *

218 
mùi_dsi_devi˚_ªgi°î_fuŒ
(
mùi_dsi_ho°
 *
ho°
,

219 c⁄° 
mùi_dsi_devi˚_öfo
 *
öfo
);

220 
mùi_dsi_devi˚_uƒegi°î
(
mùi_dsi_devi˚
 *
dsi
);

221 
mùi_dsi_devi˚
 *
of_föd_mùi_dsi_devi˚_by_node
(
devi˚_node
 *
≈
);

222 
mùi_dsi_©èch
(
mùi_dsi_devi˚
 *
dsi
);

223 
mùi_dsi_dëach
(
mùi_dsi_devi˚
 *
dsi
);

224 
mùi_dsi_shutdown_≥rùhîÆ
(
mùi_dsi_devi˚
 *
dsi
);

225 
mùi_dsi_tu∫_⁄_≥rùhîÆ
(
mùi_dsi_devi˚
 *
dsi
);

226 
mùi_dsi_£t_maximum_ªtu∫_∑ckë_size
(
mùi_dsi_devi˚
 *
dsi
,

227 
u16
 
vÆue
);

229 
ssize_t
 
mùi_dsi_gíîic_wrôe
(
mùi_dsi_devi˚
 *
dsi
, c⁄° *
∑ylﬂd
,

230 
size_t
 
size
);

231 
ssize_t
 
mùi_dsi_gíîic_ªad
(
mùi_dsi_devi˚
 *
dsi
, c⁄° *
∑øms
,

232 
size_t
 
num_∑øms
, *
d©a
, size_à
size
);

241 
	emùi_dsi_dcs_ã¨_mode
 {

242 
	mMIPI_DSI_DCS_TEAR_MODE_VBLANK
,

243 
	mMIPI_DSI_DCS_TEAR_MODE_VHBLANK
,

246 
	#MIPI_DSI_DCS_POWER_MODE_DISPLAY
 (1 << 2)

	)

247 
	#MIPI_DSI_DCS_POWER_MODE_NORMAL
 (1 << 3)

	)

248 
	#MIPI_DSI_DCS_POWER_MODE_SLEEP
 (1 << 4)

	)

249 
	#MIPI_DSI_DCS_POWER_MODE_PARTIAL
 (1 << 5)

	)

250 
	#MIPI_DSI_DCS_POWER_MODE_IDLE
 (1 << 6)

	)

252 
ssize_t
 
mùi_dsi_dcs_wrôe_buf„r
(
mùi_dsi_devi˚
 *
dsi
,

253 c⁄° *
d©a
, 
size_t
 
Àn
);

254 
ssize_t
 
mùi_dsi_dcs_wrôe
(
mùi_dsi_devi˚
 *
dsi
, 
u8
 
cmd
,

255 c⁄° *
d©a
, 
size_t
 
Àn
);

256 
ssize_t
 
mùi_dsi_dcs_ªad
(
mùi_dsi_devi˚
 *
dsi
, 
u8
 
cmd
, *
d©a
,

257 
size_t
 
Àn
);

258 
mùi_dsi_dcs_n›
(
mùi_dsi_devi˚
 *
dsi
);

259 
mùi_dsi_dcs_so·_ª£t
(
mùi_dsi_devi˚
 *
dsi
);

260 
mùi_dsi_dcs_gë_powî_mode
(
mùi_dsi_devi˚
 *
dsi
, 
u8
 *
mode
);

261 
mùi_dsi_dcs_gë_pixñ_f‹m©
(
mùi_dsi_devi˚
 *
dsi
, 
u8
 *
f‹m©
);

262 
mùi_dsi_dcs_íãr_¶ìp_mode
(
mùi_dsi_devi˚
 *
dsi
);

263 
mùi_dsi_dcs_exô_¶ìp_mode
(
mùi_dsi_devi˚
 *
dsi
);

264 
mùi_dsi_dcs_£t_di•œy_off
(
mùi_dsi_devi˚
 *
dsi
);

265 
mùi_dsi_dcs_£t_di•œy_⁄
(
mùi_dsi_devi˚
 *
dsi
);

266 
mùi_dsi_dcs_£t_cﬁumn_addªss
(
mùi_dsi_devi˚
 *
dsi
, 
u16
 
°¨t
,

267 
u16
 
íd
);

268 
mùi_dsi_dcs_£t_∑ge_addªss
(
mùi_dsi_devi˚
 *
dsi
, 
u16
 
°¨t
,

269 
u16
 
íd
);

270 
mùi_dsi_dcs_£t_ã¨_off
(
mùi_dsi_devi˚
 *
dsi
);

271 
mùi_dsi_dcs_£t_ã¨_⁄
(
mùi_dsi_devi˚
 *
dsi
,

272 
mùi_dsi_dcs_ã¨_mode
 
mode
);

273 
mùi_dsi_dcs_£t_pixñ_f‹m©
(
mùi_dsi_devi˚
 *
dsi
, 
u8
 
f‹m©
);

274 
mùi_dsi_dcs_£t_ã¨_sˇ∆öe
(
mùi_dsi_devi˚
 *
dsi
, 
u16
 
sˇ∆öe
);

275 
mùi_dsi_dcs_£t_di•œy_brighäess
(
mùi_dsi_devi˚
 *
dsi
,

276 
u16
 
brighäess
);

277 
mùi_dsi_dcs_gë_di•œy_brighäess
(
mùi_dsi_devi˚
 *
dsi
,

278 
u16
 *
brighäess
);

287 
	smùi_dsi_drivî
 {

288 
devi˚_drivî
 
	mdrivî
;

289 (*
	m¥obe
)(
mùi_dsi_devi˚
 *
	mdsi
);

290 (*
	mªmove
)(
mùi_dsi_devi˚
 *
	mdsi
);

291 (*
	mshutdown
)(
mùi_dsi_devi˚
 *
	mdsi
);

294 
ölöe
 
mùi_dsi_drivî
 *

295 
	$to_mùi_dsi_drivî
(
devi˚_drivî
 *
drivî
)

297  
	`c⁄èöî_of
(
drivî
, 
mùi_dsi_drivî
, driver);

298 
	}
}

300 
ölöe
 *
	$mùi_dsi_gë_drvd©a
(c⁄° 
mùi_dsi_devi˚
 *
dsi
)

302  
	`dev_gë_drvd©a
(&
dsi
->
dev
);

303 
	}
}

305 
ölöe
 
	$mùi_dsi_£t_drvd©a
(
mùi_dsi_devi˚
 *
dsi
, *
d©a
)

307 
	`dev_£t_drvd©a
(&
dsi
->
dev
, 
d©a
);

308 
	}
}

310 
mùi_dsi_drivî_ªgi°î_fuŒ
(
mùi_dsi_drivî
 *
drivî
,

311 
moduÀ
 *
ow√r
);

312 
mùi_dsi_drivî_uƒegi°î
(
mùi_dsi_drivî
 *
drivî
);

314 
	#mùi_dsi_drivî_ªgi°î
(
drivî
) \

315 
	`mùi_dsi_drivî_ªgi°î_fuŒ
(
drivî
, 
THIS_MODULE
)

	)

317 
	#moduÀ_mùi_dsi_drivî
(
__mùi_dsi_drivî
) \

318 
	`moduÀ_drivî
(
__mùi_dsi_drivî
, 
mùi_dsi_drivî_ªgi°î
, \

319 
mùi_dsi_drivî_uƒegi°î
)

	)

	@src/common/linuxkpi/include/drm/drm_mm.h

34 #i‚de‡
_DRM_MM_H_


35 
	#_DRM_MM_H_


	)

40 
	~<löux/bug.h
>

41 
	~<löux/rbåì.h
>

42 
	~<löux/kî√l.h
>

43 
	~<löux/mm_ty≥s.h
>

44 
	~<löux/li°.h
>

45 
	~<löux/•ölock.h
>

46 #ifde‡
CONFIG_DRM_DEBUG_MM


47 
	~<löux/°ackdïŸ.h
>

49 
	~<drm/drm_¥öt.h
>

51 #ifde‡
CONFIG_DRM_DEBUG_MM


52 
	#DRM_MM_BUG_ON
(
ex¥
Ë
	`BUG_ON
”x¥)

	)

54 
	#DRM_MM_BUG_ON
(
ex¥
Ë
	`BUILD_BUG_ON_INVALID
”x¥)

	)

68 
	edrm_mm_ö£π_mode
 {

77 
	mDRM_MM_INSERT_BEST
 = 0,

87 
	mDRM_MM_INSERT_LOW
,

99 
	mDRM_MM_INSERT_HIGH
,

111 
	mDRM_MM_INSERT_EVICT
,

123 
	sdrm_mm_node
 {

125 
	mcﬁ‹
;

127 
u64
 
	m°¨t
;

129 
u64
 
	msize
;

131 
drm_mm
 *
	mmm
;

132 
li°_hód
 
	mnode_li°
;

133 
li°_hód
 
	mhﬁe_°ack
;

134 
rb_node
 
	mrb
;

135 
rb_node
 
	mrb_hﬁe_size
;

136 
rb_node
 
	mrb_hﬁe_addr
;

137 
u64
 
	m__subåì_œ°
;

138 
u64
 
	mhﬁe_size
;

139 
boﬁ
 
	mÆloˇãd
 : 1;

140 
boﬁ
 
	msˇ¬ed_block
 : 1;

141 #ifde‡
CONFIG_DRM_DEBUG_MM


142 
dïŸ_°ack_h™dÀ_t
 
	m°ack
;

154 
	sdrm_mm
 {

164 (*
	mcﬁ‹_adju°
)(c⁄° 
drm_mm_node
 *
	mnode
,

165 
	mcﬁ‹
,

166 
u64
 *
	m°¨t
, u64 *
	míd
);

170 
li°_hód
 
	mhﬁe_°ack
;

173 
drm_mm_node
 
	mhód_node
;

175 
rb_roŸ_ˇched
 
	möãrvÆ_åì
;

176 
rb_roŸ
 
	mhﬁes_size
;

177 
rb_roŸ
 
	mhﬁes_addr
;

179 
	msˇn_a˘ive
;

191 
	sdrm_mm_sˇn
 {

193 
drm_mm
 *
	mmm
;

195 
u64
 
	msize
;

196 
u64
 
	mÆignmít
;

197 
u64
 
	mªmaödî_mask
;

199 
u64
 
	mønge_°¨t
;

200 
u64
 
	mønge_íd
;

202 
u64
 
	mhô_°¨t
;

203 
u64
 
	mhô_íd
;

205 
	mcﬁ‹
;

206 
drm_mm_ö£π_mode
 
	mmode
;

222 
ölöe
 
boﬁ
 
	$drm_mm_node_Æloˇãd
(c⁄° 
drm_mm_node
 *
node
)

224  
node
->
Æloˇãd
;

225 
	}
}

240 
ölöe
 
boﬁ
 
	$drm_mm_öôülized
(c⁄° 
drm_mm
 *
mm
)

242  
mm
->
hﬁe_°ack
.
√xt
;

243 
	}
}

257 
ölöe
 
boﬁ
 
	$drm_mm_hﬁe_fﬁlows
(c⁄° 
drm_mm_node
 *
node
)

259  
node
->
hﬁe_size
;

260 
	}
}

262 
ölöe
 
u64
 
	$__drm_mm_hﬁe_node_°¨t
(c⁄° 
drm_mm_node
 *
hﬁe_node
)

264  
hﬁe_node
->
°¨t
 + hﬁe_node->
size
;

265 
	}
}

278 
ölöe
 
u64
 
	$drm_mm_hﬁe_node_°¨t
(c⁄° 
drm_mm_node
 *
hﬁe_node
)

280 
	`DRM_MM_BUG_ON
(!
	`drm_mm_hﬁe_fﬁlows
(
hﬁe_node
));

281  
	`__drm_mm_hﬁe_node_°¨t
(
hﬁe_node
);

282 
	}
}

284 
ölöe
 
u64
 
	$__drm_mm_hﬁe_node_íd
(c⁄° 
drm_mm_node
 *
hﬁe_node
)

286  
	`li°_√xt_íåy
(
hﬁe_node
, 
node_li°
)->
°¨t
;

287 
	}
}

300 
ölöe
 
u64
 
	$drm_mm_hﬁe_node_íd
(c⁄° 
drm_mm_node
 *
hﬁe_node
)

302  
	`__drm_mm_hﬁe_node_íd
(
hﬁe_node
);

303 
	}
}

317 
	#drm_mm_nodes
(
mm
Ë(&(mm)->
hód_node
.
node_li°
)

	)

327 
	#drm_mm_f‹_óch_node
(
íåy
, 
mm
) \

328 
	`li°_f‹_óch_íåy
(
íåy
, 
	`drm_mm_nodes
(
mm
), 
node_li°
)

	)

339 
	#drm_mm_f‹_óch_node_ß„
(
íåy
, 
√xt
, 
mm
) \

340 
	`li°_f‹_óch_íåy_ß„
(
íåy
, 
√xt
, 
	`drm_mm_nodes
(
mm
), 
node_li°
)

	)

358 
	#drm_mm_f‹_óch_hﬁe
(
pos
, 
mm
, 
hﬁe_°¨t
, 
hﬁe_íd
) \

359 
pos
 = 
	`li°_fú°_íåy
(&(
mm
)->
hﬁe_°ack
, \

360 
	`ty≥of
(*
pos
), 
hﬁe_°ack
); \

361 &
pos
->
hﬁe_°ack
 !&(
mm
)->hole_stack ? \

362 
hﬁe_°¨t
 = 
	`drm_mm_hﬁe_node_°¨t
(
pos
), \

363 
hﬁe_íd
 = 
hﬁe_°¨t
 + 
pos
->
hﬁe_size
, \

365 
pos
 = 
	`li°_√xt_íåy
’os, 
hﬁe_°ack
))

	)

370 
drm_mm_ª£rve_node
(
drm_mm
 *
mm
, 
drm_mm_node
 *
node
);

371 
drm_mm_ö£π_node_ö_ønge
(
drm_mm
 *
mm
,

372 
drm_mm_node
 *
node
,

373 
u64
 
size
,

374 
u64
 
Æignmít
,

375 
cﬁ‹
,

376 
u64
 
°¨t
,

377 
u64
 
íd
,

378 
drm_mm_ö£π_mode
 
mode
);

397 
ölöe
 

398 
	$drm_mm_ö£π_node_gíîic
(
drm_mm
 *
mm
, 
drm_mm_node
 *
node
,

399 
u64
 
size
, u64 
Æignmít
,

400 
cﬁ‹
,

401 
drm_mm_ö£π_mode
 
mode
)

403  
	`drm_mm_ö£π_node_ö_ønge
(
mm
, 
node
,

404 
size
, 
Æignmít
, 
cﬁ‹
,

405 0, 
U64_MAX
, 
mode
);

406 
	}
}

422 
ölöe
 
	$drm_mm_ö£π_node
(
drm_mm
 *
mm
,

423 
drm_mm_node
 *
node
,

424 
u64
 
size
)

426  
	`drm_mm_ö£π_node_gíîic
(
mm
, 
node
, 
size
, 0, 0, 0);

427 
	}
}

429 
drm_mm_ªmove_node
(
drm_mm_node
 *
node
);

430 
drm_mm_ª∂a˚_node
(
drm_mm_node
 *
ﬁd
, drm_mm_nodê*
√w
);

431 
drm_mm_öô
(
drm_mm
 *
mm
, 
u64
 
°¨t
, u64 
size
);

432 
drm_mm_èkedown
(
drm_mm
 *
mm
);

442 
ölöe
 
boﬁ
 
	$drm_mm_˛ón
(c⁄° 
drm_mm
 *
mm
)

444  
	`li°_em±y
(
	`drm_mm_nodes
(
mm
));

445 
	}
}

447 
drm_mm_node
 *

448 
__drm_mm_öãrvÆ_fú°
(c⁄° 
drm_mm
 *
mm
, 
u64
 
°¨t
, u64 
œ°
);

467 
	#drm_mm_f‹_óch_node_ö_ønge
(
node__
, 
mm__
, 
°¨t__
, 
íd__
) \

468 
node__
 = 
	`__drm_mm_öãrvÆ_fú°
((
mm__
), (
°¨t__
), (
íd__
)-1); \

469 
node__
->
°¨t
 < (
íd__
); \

470 
node__
 = 
	`li°_√xt_íåy
“ode__, 
node_li°
))

	)

472 
drm_mm_sˇn_öô_wôh_ønge
(
drm_mm_sˇn
 *
sˇn
,

473 
drm_mm
 *
mm
,

474 
u64
 
size
, u64 
Æignmít
, 
cﬁ‹
,

475 
u64
 
°¨t
, u64 
íd
,

476 
drm_mm_ö£π_mode
 
mode
);

497 
ölöe
 
	$drm_mm_sˇn_öô
(
drm_mm_sˇn
 *
sˇn
,

498 
drm_mm
 *
mm
,

499 
u64
 
size
,

500 
u64
 
Æignmít
,

501 
cﬁ‹
,

502 
drm_mm_ö£π_mode
 
mode
)

504 
	`drm_mm_sˇn_öô_wôh_ønge
(
sˇn
, 
mm
,

505 
size
, 
Æignmít
, 
cﬁ‹
,

506 0, 
U64_MAX
, 
mode
);

507 
	}
}

509 
boﬁ
 
drm_mm_sˇn_add_block
(
drm_mm_sˇn
 *
sˇn
,

510 
drm_mm_node
 *
node
);

511 
boﬁ
 
drm_mm_sˇn_ªmove_block
(
drm_mm_sˇn
 *
sˇn
,

512 
drm_mm_node
 *
node
);

513 
drm_mm_node
 *
drm_mm_sˇn_cﬁ‹_evi˘
(
drm_mm_sˇn
 *
sˇn
);

515 
drm_mm_¥öt
(c⁄° 
drm_mm
 *
mm
, 
drm_¥öãr
 *
p
);

	@src/common/linuxkpi/include/drm/drm_mode_config.h

23 #i‚de‡
__DRM_MODE_CONFIG_H__


24 
	#__DRM_MODE_CONFIG_H__


	)

26 
	~<löux/muãx.h
>

27 
	~<löux/ty≥s.h
>

28 
	~<löux/idr.h
>

29 
	~<löux/w‹kqueue.h
>

30 
	~<löux/Œi°.h
>

32 
	~<drm/drm_mode£t_lock.h
>

34 
	gdrm_fûe
;

35 
	gdrm_devi˚
;

36 
	gdrm_©omic_°©e
;

37 
	gdrm_mode_fb_cmd2
;

38 
	gdrm_f‹m©_öfo
;

46 
	sdrm_mode_c⁄fig_funcs
 {

70 
	mdrm_‰amebuf„r
 *(*
	mfb_¸óã
)(
drm_devi˚
 *
	mdev
,

71 
drm_fûe
 *
	mfûe_¥iv
,

72 c⁄° 
drm_mode_fb_cmd2
 *
	mmode_cmd
);

85 c⁄° 
	mdrm_f‹m©_öfo
 *(*
	mgë_f‹m©_öfo
)(c⁄° 
drm_mode_fb_cmd2
 *
	mmode_cmd
);

102 (*
	mouçut_pﬁl_ch™ged
)(
drm_devi˚
 *
	mdev
);

178 (*
	m©omic_check
)(
drm_devi˚
 *
	mdev
,

179 
drm_©omic_°©e
 *
	m°©e
);

260 (*
	m©omic_commô
)(
drm_devi˚
 *
	mdev
,

261 
drm_©omic_°©e
 *
	m°©e
,

262 
boﬁ
 
	mn⁄block
);

279 
	mdrm_©omic_°©e
 *(*
	m©omic_°©e_Æloc
)(
drm_devi˚
 *
	mdev
);

300 (*
	m©omic_°©e_˛ór
)(
drm_©omic_°©e
 *
	m°©e
);

315 (*
	m©omic_°©e_‰ì
)(
drm_©omic_°©e
 *
	m°©e
);

340 
	sdrm_mode_c⁄fig
 {

351 
muãx
 
	mmuãx
;

361 
drm_mode£t_lock
 
	mc⁄√˘i⁄_muãx
;

371 
drm_mode£t_acquúe_˘x
 *
	macquúe_˘x
;

379 
muãx
 
	midr_muãx
;

387 
idr
 
	m¸tc_idr
;

395 
idr
 
	mtûe_idr
;

398 
muãx
 
	mfb_lock
;

400 
	mnum_fb
;

402 
li°_hód
 
	mfb_li°
;

408 
•ölock_t
 
	mc⁄√˘‹_li°_lock
;

413 
	mnum_c⁄√˘‹
;

417 
ida
 
	mc⁄√˘‹_ida
;

425 
li°_hód
 
	mc⁄√˘‹_li°
;

435 
Œi°_hód
 
	mc⁄√˘‹_‰ì_li°
;

439 
w‹k_°ru˘
 
	mc⁄√˘‹_‰ì_w‹k
;

447 
	mnum_ícodî
;

455 
li°_hód
 
	mícodî_li°
;

464 
	mnum_tŸÆ_∂™e
;

471 
li°_hód
 
	m∂™e_li°
;

479 
	mnum_¸tc
;

486 
li°_hód
 
	m¸tc_li°
;

495 
li°_hód
 
	m¥›îty_li°
;

497 
	mmö_width
, 
	mmö_height
;

498 
	mmax_width
, 
	mmax_height
;

499 c⁄° 
drm_mode_c⁄fig_funcs
 *
	mfuncs
;

500 
ªsour˚_size_t
 
	mfb_ba£
;

503 
boﬁ
 
	mpﬁl_íabÀd
;

504 
boﬁ
 
	mpﬁl_ru¬ög
;

505 
boﬁ
 
	mdñayed_evít
;

506 
dñayed_w‹k
 
	mouçut_pﬁl_w‹k
;

514 
muãx
 
	mblob_lock
;

522 
li°_hód
 
	m¥›îty_blob_li°
;

530 
drm_¥›îty
 *
	medid_¥›îty
;

535 
drm_¥›îty
 *
	mdpms_¥›îty
;

540 
drm_¥›îty
 *
	m∑th_¥›îty
;

546 
drm_¥›îty
 *
	mtûe_¥›îty
;

551 
drm_¥›îty
 *
	mlök_°©us_¥›îty
;

556 
drm_¥›îty
 *
	m∂™e_ty≥_¥›îty
;

561 
drm_¥›îty
 *
	m¥›_§c_x
;

566 
drm_¥›îty
 *
	m¥›_§c_y
;

571 
drm_¥›îty
 *
	m¥›_§c_w
;

576 
drm_¥›îty
 *
	m¥›_§c_h
;

581 
drm_¥›îty
 *
	m¥›_¸tc_x
;

586 
drm_¥›îty
 *
	m¥›_¸tc_y
;

591 
drm_¥›îty
 *
	m¥›_¸tc_w
;

596 
drm_¥›îty
 *
	m¥›_¸tc_h
;

601 
drm_¥›îty
 *
	m¥›_fb_id
;

606 
drm_¥›îty
 *
	m¥›_ö_„n˚_fd
;

612 
drm_¥›îty
 *
	m¥›_out_„n˚_±r
;

617 
drm_¥›îty
 *
	m¥›_¸tc_id
;

623 
drm_¥›îty
 *
	m¥›_a˘ive
;

629 
drm_¥›îty
 *
	m¥›_mode_id
;

635 
drm_¥›îty
 *
	mdvi_i_subc⁄√˘‹_¥›îty
;

640 
drm_¥›îty
 *
	mdvi_i_£À˘_subc⁄√˘‹_¥›îty
;

646 
drm_¥›îty
 *
	mtv_subc⁄√˘‹_¥›îty
;

651 
drm_¥›îty
 *
	mtv_£À˘_subc⁄√˘‹_¥›îty
;

656 
drm_¥›îty
 *
	mtv_mode_¥›îty
;

661 
drm_¥›îty
 *
	mtv_À·_m¨gö_¥›îty
;

666 
drm_¥›îty
 *
	mtv_right_m¨gö_¥›îty
;

671 
drm_¥›îty
 *
	mtv_t›_m¨gö_¥›îty
;

676 
drm_¥›îty
 *
	mtv_bŸtom_m¨gö_¥›îty
;

681 
drm_¥›îty
 *
	mtv_brighäess_¥›îty
;

686 
drm_¥›îty
 *
	mtv_c⁄åa°_¥›îty
;

691 
drm_¥›îty
 *
	mtv_Êickî_ªdu˘i⁄_¥›îty
;

696 
drm_¥›îty
 *
	mtv_ovîsˇn_¥›îty
;

701 
drm_¥›îty
 *
	mtv_ßtuøti⁄_¥›îty
;

705 
drm_¥›îty
 *
	mtv_hue_¥›îty
;

711 
drm_¥›îty
 *
	msˇlög_mode_¥›îty
;

716 
drm_¥›îty
 *
	ma•e˘_øtio_¥›îty
;

721 
drm_¥›îty
 *
	mdegamma_lut_¥›îty
;

726 
drm_¥›îty
 *
	mdegamma_lut_size_¥›îty
;

732 
drm_¥›îty
 *
	m˘m_¥›îty
;

738 
drm_¥›îty
 *
	mgamma_lut_¥›îty
;

743 
drm_¥›îty
 *
	mgamma_lut_size_¥›îty
;

749 
drm_¥›îty
 *
	msugge°ed_x_¥›îty
;

754 
drm_¥›îty
 *
	msugge°ed_y_¥›îty
;

761 
drm_¥›îty
 *
	mn⁄_deskt›_¥›îty
;

768 
drm_¥›îty
 *
	m∑√l_‹õ¡©i⁄_¥›îty
;

771 
uöt32_t
 
	m¥e„ºed_dïth
, 
	m¥e„r_shadow
;

777 
boﬁ
 
	masync_∑ge_Êù
;

784 
boﬁ
 
	mÆlow_fb_modifõrs
;

790 
drm_¥›îty
 *
	mmodifõrs_¥›îty
;

793 
uöt32_t
 
	mcurs‹_width
, 
	mcurs‹_height
;

802 
drm_©omic_°©e
 *
	msu•íd_°©e
;

804 c⁄° 
drm_mode_c⁄fig_hñ≥r_funcs
 *
	mhñ≥r_¥iv©e
;

807 
drm_mode_c⁄fig_öô
(
drm_devi˚
 *
dev
);

808 
drm_mode_c⁄fig_ª£t
(
drm_devi˚
 *
dev
);

809 
drm_mode_c⁄fig_˛ónup
(
drm_devi˚
 *
dev
);

	@src/common/linuxkpi/include/drm/drm_mode_object.h

23 #i‚de‡
__DRM_MODESET_H__


24 
	#__DRM_MODESET_H__


	)

26 
	~<löux/kªf.h
>

27 
	~<drm/drm_Àa£.h
>

28 
	gdrm_obje˘_¥›îtõs
;

29 
	gdrm_¥›îty
;

30 
	gdrm_devi˚
;

31 
	gdrm_fûe
;

55 
	sdrm_mode_obje˘
 {

56 
uöt32_t
 
	mid
;

57 
uöt32_t
 
	mty≥
;

58 
drm_obje˘_¥›îtõs
 *
	m¥›îtõs
;

59 
kªf
 
	mªfcou¡
;

60 (*
	m‰ì_cb
)(
kªf
 *
	mkªf
);

63 
	#DRM_OBJECT_MAX_PROPERTY
 24

	)

67 
	sdrm_obje˘_¥›îtõs
 {

73 
	mcou¡
;

82 
drm_¥›îty
 *
	m¥›îtõs
[
DRM_OBJECT_MAX_PROPERTY
];

102 
uöt64_t
 
	mvÆues
[
DRM_OBJECT_MAX_PROPERTY
];

106 
	#DRM_ENUM_NAME_FN
(
‚«me
, 
li°
) \

107 c⁄° *
	`‚«me
(
vÆ
) \

109 
i
; \

110 
i
 = 0; i < 
	`ARRAY_SIZE
(
li°
); i++) { \

111 i‡(
li°
[
i
].
ty≥
 =
vÆ
) \

112  
li°
[
i
].
«me
; \

115 }

	)

117 
drm_mode_obje˘
 *
drm_mode_obje˘_föd
(
drm_devi˚
 *
dev
,

118 
drm_fûe
 *
fûe_¥iv
,

119 
uöt32_t
 
id
, uöt32_à
ty≥
);

120 
drm_mode_obje˘_gë
(
drm_mode_obje˘
 *
obj
);

121 
drm_mode_obje˘_put
(
drm_mode_obje˘
 *
obj
);

130 
ölöe
 
	$drm_mode_obje˘_ª„ªn˚
(
drm_mode_obje˘
 *
obj
)

132 
	`drm_mode_obje˘_gë
(
obj
);

133 
	}
}

142 
ölöe
 
	$drm_mode_obje˘_uƒe„ªn˚
(
drm_mode_obje˘
 *
obj
)

144 
	`drm_mode_obje˘_put
(
obj
);

145 
	}
}

147 
drm_obje˘_¥›îty_£t_vÆue
(
drm_mode_obje˘
 *
obj
,

148 
drm_¥›îty
 *
¥›îty
,

149 
uöt64_t
 
vÆ
);

150 
drm_obje˘_¥›îty_gë_vÆue
(
drm_mode_obje˘
 *
obj
,

151 
drm_¥›îty
 *
¥›îty
,

152 
uöt64_t
 *
vÆue
);

154 
drm_obje˘_©èch_¥›îty
(
drm_mode_obje˘
 *
obj
,

155 
drm_¥›îty
 *
¥›îty
,

156 
uöt64_t
 
öô_vÆ
);

158 
boﬁ
 
drm_mode_obje˘_Àa£_ªquúed
(
uöt32_t
 
ty≥
);

	@src/common/linuxkpi/include/drm/drm_modes.h

27 #i‚de‡
__DRM_MODES_H__


28 
	#__DRM_MODES_H__


	)

30 
	~<löux/hdmi.h
>

32 
	~<drm/drm_mode_obje˘.h
>

33 
	~<drm/drm_c⁄√˘‹.h
>

35 
	gvideomode
;

91 
	edrm_mode_°©us
 {

92 
	mMODE_OK
 = 0,

93 
	mMODE_HSYNC
,

94 
	mMODE_VSYNC
,

95 
	mMODE_H_ILLEGAL
,

96 
	mMODE_V_ILLEGAL
,

97 
	mMODE_BAD_WIDTH
,

98 
	mMODE_NOMODE
,

99 
	mMODE_NO_INTERLACE
,

100 
	mMODE_NO_DBLESCAN
,

101 
	mMODE_NO_VSCAN
,

102 
	mMODE_MEM
,

103 
	mMODE_VIRTUAL_X
,

104 
	mMODE_VIRTUAL_Y
,

105 
	mMODE_MEM_VIRT
,

106 
	mMODE_NOCLOCK
,

107 
	mMODE_CLOCK_HIGH
,

108 
	mMODE_CLOCK_LOW
,

109 
	mMODE_CLOCK_RANGE
,

110 
	mMODE_BAD_HVALUE
,

111 
	mMODE_BAD_VVALUE
,

112 
	mMODE_BAD_VSCAN
,

113 
	mMODE_HSYNC_NARROW
,

114 
	mMODE_HSYNC_WIDE
,

115 
	mMODE_HBLANK_NARROW
,

116 
	mMODE_HBLANK_WIDE
,

117 
	mMODE_VSYNC_NARROW
,

118 
	mMODE_VSYNC_WIDE
,

119 
	mMODE_VBLANK_NARROW
,

120 
	mMODE_VBLANK_WIDE
,

121 
	mMODE_PANEL
,

122 
	mMODE_INTERLACE_WIDTH
,

123 
	mMODE_ONE_WIDTH
,

124 
	mMODE_ONE_HEIGHT
,

125 
	mMODE_ONE_SIZE
,

126 
	mMODE_NO_REDUCED
,

127 
	mMODE_NO_STEREO
,

128 
	mMODE_NO_420
,

129 
	mMODE_STALE
 = -3,

130 
	mMODE_BAD
 = -2,

131 
	mMODE_ERROR
 = -1

134 
	#DRM_MODE_TYPE_CLOCK_CRTC_C
 (
DRM_MODE_TYPE_CLOCK_C
 | \

135 
DRM_MODE_TYPE_CRTC_C
)

	)

137 
	#DRM_MODE
(
nm
, 
t
, 
c
, 
hd
, 
hss
, 
h£
, 
ht
, 
hsk
, 
vd
, 
vss
, 
v£
, 
vt
, 
vs
, 
f
) \

138 .
«me
 = 
nm
, .
°©us
 = 0, .
ty≥
 = (
t
), .
˛ock
 = (
c
), \

139 .
hdi•œy
 = (
hd
), .
hsync_°¨t
 = (
hss
), .
hsync_íd
 = (
h£
), \

140 .
htŸÆ
 = (
ht
), .
hskew
 = (
hsk
), .
vdi•œy
 = (
vd
), \

141 .
vsync_°¨t
 = (
vss
), .
vsync_íd
 = (
v£
), .
vtŸÆ
 = (
vt
), \

142 .
vsˇn
 = (
vs
), .
Êags
 = (
f
), \

143 .
ba£
.
ty≥
 = 
DRM_MODE_OBJECT_MODE


	)

145 
	#CRTC_INTERLACE_HALVE_V
 (1 << 0Ë

	)

146 
	#CRTC_STEREO_DOUBLE
 (1 << 1Ë

	)

147 
	#CRTC_NO_DBLSCAN
 (1 << 2Ë

	)

148 
	#CRTC_NO_VSCAN
 (1 << 3Ë

	)

149 
	#CRTC_STEREO_DOUBLE_ONLY
 (
CRTC_STEREO_DOUBLE
 | 
CRTC_NO_DBLSCAN
 | 
CRTC_NO_VSCAN
)

	)

151 
	#DRM_MODE_FLAG_3D_MAX
 
DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF


	)

205 
	sdrm_di•œy_mode
 {

211 
li°_hód
 
	mhód
;

225 
drm_mode_obje˘
 
	mba£
;

232 
	m«me
[
DRM_DISPLAY_MODE_LEN
];

240 
drm_mode_°©us
 
	m°©us
;

269 
	mty≥
;

276 
	m˛ock
;

277 
	mhdi•œy
;

278 
	mhsync_°¨t
;

279 
	mhsync_íd
;

280 
	mhtŸÆ
;

281 
	mhskew
;

282 
	mvdi•œy
;

283 
	mvsync_°¨t
;

284 
	mvsync_íd
;

285 
	mvtŸÆ
;

286 
	mvsˇn
;

321 
	mÊags
;

329 
	mwidth_mm
;

337 
	mheight_mm
;

354 
	m¸tc_˛ock
;

355 
	m¸tc_hdi•œy
;

356 
	m¸tc_hbœnk_°¨t
;

357 
	m¸tc_hbœnk_íd
;

358 
	m¸tc_hsync_°¨t
;

359 
	m¸tc_hsync_íd
;

360 
	m¸tc_htŸÆ
;

361 
	m¸tc_hskew
;

362 
	m¸tc_vdi•œy
;

363 
	m¸tc_vbœnk_°¨t
;

364 
	m¸tc_vbœnk_íd
;

365 
	m¸tc_vsync_°¨t
;

366 
	m¸tc_vsync_íd
;

367 
	m¸tc_vtŸÆ
;

377 *
	m¥iv©e
;

384 
	m¥iv©e_Êags
;

394 
	mvª‰esh
;

404 
	mhsync
;

411 
hdmi_pi˘uª_a•e˘
 
	mpi˘uª_a•e˘_øtio
;

417 
	#DRM_MODE_FMT
 "%d:\"%s\" %d %d %d %d %d %d %d %d %d %d 0x%x 0x%x"

	)

423 
	#DRM_MODE_ARG
(
m
) \

424 (
m
)->
ba£
.
id
, (m)->
«me
, (m)->
vª‰esh
, (m)->
˛ock
, \

425 (
m
)->
hdi•œy
, (m)->
hsync_°¨t
, (m)->
hsync_íd
, (m)->
htŸÆ
, \

426 (
m
)->
vdi•œy
, (m)->
vsync_°¨t
, (m)->
vsync_íd
, (m)->
vtŸÆ
, \

427 (
m
)->
ty≥
, (m)->
Êags


	)

429 
	#obj_to_mode
(
x
Ë
	`c⁄èöî_of
(x, 
drm_di•œy_mode
, 
ba£
)

	)

439 
ölöe
 
boﬁ
 
	$drm_mode_is_°îeo
(c⁄° 
drm_di•œy_mode
 *
mode
)

441  
mode
->
Êags
 & 
DRM_MODE_FLAG_3D_MASK
;

442 
	}
}

444 
	gdrm_c⁄√˘‹
;

445 
	gdrm_cmdlöe_mode
;

447 
drm_di•œy_mode
 *
drm_mode_¸óã
(
drm_devi˚
 *
dev
);

448 
drm_mode_de°roy
(
drm_devi˚
 *
dev
, 
drm_di•œy_mode
 *
mode
);

449 
drm_mode_c⁄vît_to_umode
(
drm_mode_modeöfo
 *
out
,

450 c⁄° 
drm_di•œy_mode
 *
ö
);

451 
drm_mode_c⁄vît_umode
(
drm_di•œy_mode
 *
out
,

452 c⁄° 
drm_mode_modeöfo
 *
ö
);

453 
drm_mode_¥obed_add
(
drm_c⁄√˘‹
 *
c⁄√˘‹
, 
drm_di•œy_mode
 *
mode
);

454 
drm_mode_debug_¥ötmodñöe
(c⁄° 
drm_di•œy_mode
 *
mode
);

455 
boﬁ
 
drm_mode_is_420_⁄ly
(c⁄° 
drm_di•œy_öfo
 *
di•œy
,

456 c⁄° 
drm_di•œy_mode
 *
mode
);

457 
boﬁ
 
drm_mode_is_420_Æso
(c⁄° 
drm_di•œy_öfo
 *
di•œy
,

458 c⁄° 
drm_di•œy_mode
 *
mode
);

459 
boﬁ
 
drm_mode_is_420
(c⁄° 
drm_di•œy_öfo
 *
di•œy
,

460 c⁄° 
drm_di•œy_mode
 *
mode
);

462 
drm_di•œy_mode
 *
drm_cvt_mode
(
drm_devi˚
 *
dev
,

463 
hdi•œy
, 
vdi•œy
, 
vª‰esh
,

464 
boﬁ
 
ªdu˚d
, boﬁ 
öãæa˚d
,

465 
boﬁ
 
m¨gös
);

466 
drm_di•œy_mode
 *
drm_gtf_mode
(
drm_devi˚
 *
dev
,

467 
hdi•œy
, 
vdi•œy
, 
vª‰esh
,

468 
boﬁ
 
öãæa˚d
, 
m¨gös
);

469 
drm_di•œy_mode
 *
drm_gtf_mode_com∂ex
(
drm_devi˚
 *
dev
,

470 
hdi•œy
, 
vdi•œy
,

471 
vª‰esh
, 
boﬁ
 
öãæa˚d
,

472 
m¨gös
,

473 
GTF_M
, 
GTF_2C
,

474 
GTF_K
, 
GTF_2J
);

475 
drm_di•œy_mode_‰om_videomode
(c⁄° 
videomode
 *
vm
,

476 
drm_di•œy_mode
 *
dmode
);

477 
drm_di•œy_mode_to_videomode
(c⁄° 
drm_di•œy_mode
 *
dmode
,

478 
videomode
 *
vm
);

479 
drm_bus_Êags_‰om_videomode
(c⁄° 
videomode
 *
vm
, 
u32
 *
bus_Êags
);

480 #ifde‡
__löux__


481 
of_gë_drm_di•œy_mode
(
devi˚_node
 *
≈
,

482 
drm_di•œy_mode
 *
dmode
, 
u32
 *
bus_Êags
,

483 
ödex
);

486 
drm_mode_£t_«me
(
drm_di•œy_mode
 *
mode
);

487 
drm_mode_hsync
(c⁄° 
drm_di•œy_mode
 *
mode
);

488 
drm_mode_vª‰esh
(c⁄° 
drm_di•œy_mode
 *
mode
);

489 
drm_mode_gë_hv_timög
(c⁄° 
drm_di•œy_mode
 *
mode
,

490 *
hdi•œy
, *
vdi•œy
);

492 
drm_mode_£t_¸tcöfo
(
drm_di•œy_mode
 *
p
,

493 
adju°_Êags
);

494 
drm_mode_c›y
(
drm_di•œy_mode
 *
d°
,

495 c⁄° 
drm_di•œy_mode
 *
§c
);

496 
drm_di•œy_mode
 *
drm_mode_du∂iˇã
(
drm_devi˚
 *
dev
,

497 c⁄° 
drm_di•œy_mode
 *
mode
);

498 
boﬁ
 
drm_mode_equÆ
(c⁄° 
drm_di•œy_mode
 *
mode1
,

499 c⁄° 
drm_di•œy_mode
 *
mode2
);

500 
boﬁ
 
drm_mode_equÆ_no_˛ocks
(c⁄° 
drm_di•œy_mode
 *
mode1
,

501 c⁄° 
drm_di•œy_mode
 *
mode2
);

502 
boﬁ
 
drm_mode_equÆ_no_˛ocks_no_°îeo
(c⁄° 
drm_di•œy_mode
 *
mode1
,

503 c⁄° 
drm_di•œy_mode
 *
mode2
);

506 
drm_mode_°©us
 
drm_mode_vÆid©e_basic
(c⁄° 
drm_di•œy_mode
 *
mode
);

507 
drm_mode_°©us
 
drm_mode_vÆid©e_size
(c⁄° 
drm_di•œy_mode
 *
mode
,

508 
maxX
, 
maxY
);

509 
drm_mode_°©us


510 
drm_mode_vÆid©e_ycb¸420
(c⁄° 
drm_di•œy_mode
 *
mode
,

511 
drm_c⁄√˘‹
 *
c⁄√˘‹
);

512 
drm_mode_¥u√_övÆid
(
drm_devi˚
 *
dev
,

513 
li°_hód
 *
mode_li°
, 
boﬁ
 
vîbo£
);

514 
drm_mode_s‹t
(
li°_hód
 *
mode_li°
);

515 
drm_mode_c⁄√˘‹_li°_upd©e
(
drm_c⁄√˘‹
 *
c⁄√˘‹
);

518 
boﬁ


519 
drm_mode_∑r£_comm™d_löe_f‹_c⁄√˘‹
(c⁄° *
mode_›ti⁄
,

520 
drm_c⁄√˘‹
 *
c⁄√˘‹
,

521 
drm_cmdlöe_mode
 *
mode
);

522 
drm_di•œy_mode
 *

523 
drm_mode_¸óã_‰om_cmdlöe_mode
(
drm_devi˚
 *
dev
,

524 
drm_cmdlöe_mode
 *
cmd
);

	@src/common/linuxkpi/include/drm/drm_modeset_helper.h

23 #i‚de‡
__DRM_KMS_HELPER_H__


24 
	#__DRM_KMS_HELPER_H__


	)

26 
	~<drm/drmP.h
>

28 
drm_hñ≥r_move_∑√l_c⁄√˘‹s_to_hód
(
drm_devi˚
 *);

30 
drm_hñ≥r_mode_fûl_fb_°ru˘
(
drm_devi˚
 *
dev
,

31 
drm_‰amebuf„r
 *
fb
,

32 c⁄° 
drm_mode_fb_cmd2
 *
mode_cmd
);

34 
drm_¸tc_öô
(
drm_devi˚
 *
dev
, 
drm_¸tc
 *
¸tc
,

35 c⁄° 
drm_¸tc_funcs
 *
funcs
);

37 
drm_mode_c⁄fig_hñ≥r_su•íd
(
drm_devi˚
 *
dev
);

38 
drm_mode_c⁄fig_hñ≥r_ªsume
(
drm_devi˚
 *
dev
);

	@src/common/linuxkpi/include/drm/drm_modeset_helper_vtables.h

29 #i‚de‡
__DRM_MODESET_HELPER_VTABLES_H__


30 
	#__DRM_MODESET_HELPER_VTABLES_H__


	)

32 
	~<drm/drm_¸tc.h
>

33 
	~<drm/drm_ícodî.h
>

51 
	gmode_£t_©omic
;

59 
	sdrm_¸tc_hñ≥r_funcs
 {

76 (*
	mdpms
)(
drm_¸tc
 *
	m¸tc
, 
	mmode
);

91 (*
	m¥ï¨e
)(
drm_¸tc
 *
	m¸tc
);

106 (*
	mcommô
)(
drm_¸tc
 *
	m¸tc
);

139 
drm_mode_°©us
 (*
mode_vÆid
)(
drm_¸tc
 *
	m¸tc
,

140 c⁄° 
drm_di•œy_mode
 *
	mmode
);

185 
boﬁ
 (*
mode_fixup
)(
drm_¸tc
 *
	m¸tc
,

186 c⁄° 
drm_di•œy_mode
 *
	mmode
,

187 
drm_di•œy_mode
 *
	madju°ed_mode
);

204 (*
	mmode_£t
)(
drm_¸tc
 *
	m¸tc
, 
drm_di•œy_mode
 *
	mmode
,

205 
drm_di•œy_mode
 *
	madju°ed_mode
, 
	mx
, 
	my
,

206 
drm_‰amebuf„r
 *
	mﬁd_fb
);

229 (*
	mmode_£t_nofb
)(
drm_¸tc
 *
	m¸tc
);

248 (*
	mmode_£t_ba£
)(
drm_¸tc
 *
	m¸tc
, 
	mx
, 
	my
,

249 
drm_‰amebuf„r
 *
	mﬁd_fb
);

265 (*
	mmode_£t_ba£_©omic
)(
drm_¸tc
 *
	m¸tc
,

266 
drm_‰amebuf„r
 *
	mfb
, 
	mx
, 
	my
,

267 
	mmode_£t_©omic
);

300 (*
	mdißbÀ
)(
drm_¸tc
 *
	m¸tc
);

353 (*
	m©omic_check
)(
drm_¸tc
 *
	m¸tc
,

354 
drm_¸tc_°©e
 *
	m°©e
);

374 (*
	m©omic_begö
)(
drm_¸tc
 *
	m¸tc
,

375 
drm_¸tc_°©e
 *
	mﬁd_¸tc_°©e
);

398 (*
	m©omic_Êush
)(
drm_¸tc
 *
	m¸tc
,

399 
drm_¸tc_°©e
 *
	mﬁd_¸tc_°©e
);

422 (*
	m©omic_íabÀ
)(
drm_¸tc
 *
	m¸tc
,

423 
drm_¸tc_°©e
 *
	mﬁd_¸tc_°©e
);

445 (*
	m©omic_dißbÀ
)(
drm_¸tc
 *
	m¸tc
,

446 
drm_¸tc_°©e
 *
	mﬁd_¸tc_°©e
);

454 
ölöe
 
	$drm_¸tc_hñ≥r_add
(
drm_¸tc
 *
¸tc
,

455 c⁄° 
drm_¸tc_hñ≥r_funcs
 *
funcs
)

457 
¸tc
->
hñ≥r_¥iv©e
 = 
funcs
;

458 
	}
}

466 
	sdrm_ícodî_hñ≥r_funcs
 {

483 (*
	mdpms
)(
drm_ícodî
 *
	mícodî
, 
	mmode
);

516 
drm_mode_°©us
 (*
mode_vÆid
)(
drm_ícodî
 *
	m¸tc
,

517 c⁄° 
drm_di•œy_mode
 *
	mmode
);

559 
boﬁ
 (*
mode_fixup
)(
drm_ícodî
 *
	mícodî
,

560 c⁄° 
drm_di•œy_mode
 *
	mmode
,

561 
drm_di•œy_mode
 *
	madju°ed_mode
);

576 (*
	m¥ï¨e
)(
drm_ícodî
 *
	mícodî
);

591 (*
	mcommô
)(
drm_ícodî
 *
	mícodî
);

615 (*
	mmode_£t
)(
drm_ícodî
 *
	mícodî
,

616 
drm_di•œy_mode
 *
	mmode
,

617 
drm_di•œy_mode
 *
	madju°ed_mode
);

638 (*
	m©omic_mode_£t
)(
drm_ícodî
 *
	mícodî
,

639 
drm_¸tc_°©e
 *
	m¸tc_°©e
,

640 
drm_c⁄√˘‹_°©e
 *
	mc⁄n_°©e
);

656 
	mdrm_¸tc
 *(*
	mgë_¸tc
)(
drm_ícodî
 *
	mícodî
);

673 
drm_c⁄√˘‹_°©us
 (*
dëe˘
)(
drm_ícodî
 *
	mícodî
,

674 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

704 (*
	mdißbÀ
)(
drm_ícodî
 *
	mícodî
);

722 (*
	míabÀ
)(
drm_ícodî
 *
	mícodî
);

760 (*
	m©omic_check
)(
drm_ícodî
 *
	mícodî
,

761 
drm_¸tc_°©e
 *
	m¸tc_°©e
,

762 
drm_c⁄√˘‹_°©e
 *
	mc⁄n_°©e
);

770 
ölöe
 
	$drm_ícodî_hñ≥r_add
(
drm_ícodî
 *
ícodî
,

771 c⁄° 
drm_ícodî_hñ≥r_funcs
 *
funcs
)

773 
ícodî
->
hñ≥r_¥iv©e
 = 
funcs
;

774 
	}
}

782 
	sdrm_c⁄√˘‹_hñ≥r_funcs
 {

819 (*
	mgë_modes
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

845 (*
	mdëe˘_˘x
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

846 
drm_mode£t_acquúe_˘x
 *
	m˘x
,

847 
boﬁ
 
	mf‹˚
);

883 
drm_mode_°©us
 (*
mode_vÆid
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

884 
drm_di•œy_mode
 *
	mmode
);

914 
	mdrm_ícodî
 *(*
	mbe°_ícodî
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
);

941 
	mdrm_ícodî
 *(*
	m©omic_be°_ícodî
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

942 
drm_c⁄√˘‹_°©e
 *
	mc⁄√˘‹_°©e
);

975 (*
	m©omic_check
)(
drm_c⁄√˘‹
 *
	mc⁄√˘‹
,

976 
drm_c⁄√˘‹_°©e
 *
	m°©e
);

984 
ölöe
 
	$drm_c⁄√˘‹_hñ≥r_add
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

985 c⁄° 
drm_c⁄√˘‹_hñ≥r_funcs
 *
funcs
)

987 
c⁄√˘‹
->
hñ≥r_¥iv©e
 = 
funcs
;

988 
	}
}

996 
	sdrm_∂™e_hñ≥r_funcs
 {

1025 (*
	m¥ï¨e_fb
)(
drm_∂™e
 *
	m∂™e
,

1026 
drm_∂™e_°©e
 *
	m√w_°©e
);

1036 (*
	m˛ónup_fb
)(
drm_∂™e
 *
	m∂™e
,

1037 
drm_∂™e_°©e
 *
	mﬁd_°©e
);

1075 (*
	m©omic_check
)(
drm_∂™e
 *
	m∂™e
,

1076 
drm_∂™e_°©e
 *
	m°©e
);

1093 (*
	m©omic_upd©e
)(
drm_∂™e
 *
	m∂™e
,

1094 
drm_∂™e_°©e
 *
	mﬁd_°©e
);

1117 (*
	m©omic_dißbÀ
)(
drm_∂™e
 *
	m∂™e
,

1118 
drm_∂™e_°©e
 *
	mﬁd_°©e
);

1136 (*
	m©omic_async_check
)(
drm_∂™e
 *
	m∂™e
,

1137 
drm_∂™e_°©e
 *
	m°©e
);

1167 (*
	m©omic_async_upd©e
)(
drm_∂™e
 *
	m∂™e
,

1168 
drm_∂™e_°©e
 *
	m√w_°©e
);

1176 
ölöe
 
	$drm_∂™e_hñ≥r_add
(
drm_∂™e
 *
∂™e
,

1177 c⁄° 
drm_∂™e_hñ≥r_funcs
 *
funcs
)

1179 
∂™e
->
hñ≥r_¥iv©e
 = 
funcs
;

1180 
	}
}

1187 
	sdrm_mode_c⁄fig_hñ≥r_funcs
 {

1223 (*
	m©omic_commô_èû
)(
drm_©omic_°©e
 *
	m°©e
);

	@src/common/linuxkpi/include/drm/drm_modeset_lock.h

24 #i‚de‡
DRM_MODESET_LOCK_H_


25 
	#DRM_MODESET_LOCK_H_


	)

27 
	~<löux/ww_muãx.h
>

29 
	gdrm_mode£t_lock
;

43 
	sdrm_mode£t_acquúe_˘x
 {

45 
ww_acquúe_˘x
 
	mww_˘x
;

52 
drm_mode£t_lock
 *
	mc⁄ãnded
;

57 
li°_hód
 
	mlocked
;

62 
boﬁ
 
	måylock_⁄ly
;

65 
boﬁ
 
	möãºu±ibÀ
;

76 
	sdrm_mode£t_lock
 {

80 
ww_muãx
 
	mmuãx
;

86 
li°_hód
 
	mhód
;

89 
	#DRM_MODESET_ACQUIRE_INTERRUPTIBLE
 
	`BIT
(0)

	)

91 
drm_mode£t_acquúe_öô
(
drm_mode£t_acquúe_˘x
 *
˘x
,

92 
uöt32_t
 
Êags
);

93 
drm_mode£t_acquúe_föi
(
drm_mode£t_acquúe_˘x
 *
˘x
);

94 
drm_mode£t_dr›_locks
(
drm_mode£t_acquúe_˘x
 *
˘x
);

95 
drm_mode£t_backoff
(
drm_mode£t_acquúe_˘x
 *
˘x
);

97 
drm_mode£t_lock_öô
(
drm_mode£t_lock
 *
lock
);

103 
ölöe
 
	$drm_mode£t_lock_föi
(
drm_mode£t_lock
 *
lock
)

105 
	`WARN_ON
(!
	`li°_em±y
(&
lock
->
hód
));

106 
	}
}

112 
ölöe
 
boﬁ
 
	$drm_mode£t_is_locked
(
drm_mode£t_lock
 *
lock
)

114  
	`ww_muãx_is_locked
(&
lock
->
muãx
);

115 
	}
}

117 
drm_mode£t_lock
(drm_mode£t_lock *
lock
,

118 
drm_mode£t_acquúe_˘x
 *
˘x
);

119 
__mu°_check
 
drm_mode£t_lock_sögÀ_öãºu±ibÀ
(
drm_mode£t_lock
 *
lock
);

120 
drm_mode£t_u∆ock
(
drm_mode£t_lock
 *
lock
);

122 
	gdrm_devi˚
;

123 
	gdrm_¸tc
;

124 
	gdrm_∂™e
;

126 
drm_mode£t_lock_Æl
(
drm_devi˚
 *
dev
);

127 
drm_mode£t_u∆ock_Æl
(
drm_devi˚
 *
dev
);

128 
drm_w¨n_⁄_mode£t_nŸ_Æl_locked
(
drm_devi˚
 *
dev
);

130 
drm_mode£t_lock_Æl_˘x
(
drm_devi˚
 *
dev
,

131 
drm_mode£t_acquúe_˘x
 *
˘x
);

	@src/common/linuxkpi/include/drm/drm_of.h

2 #i‚de‡
__DRM_OF_H__


3 
	#__DRM_OF_H__


	)

5 
	~<löux/of_gøph.h
>

6 #i‡
IS_ENABLED
(
CONFIG_OF
Ë&& IS_ENABLED(
CONFIG_DRM_PANEL_BRIDGE
)

7 
	~<drm/drm_bridge.h
>

10 
	gcomp⁄ít_ma°î_›s
;

11 
	gcomp⁄ít_m©ch
;

12 
	gdevi˚
;

13 
	gdrm_devi˚
;

14 
	gdrm_ícodî
;

15 
	gdrm_∑√l
;

16 
	gdrm_bridge
;

17 
	gdevi˚_node
;

19 #ifde‡
CONFIG_OF


20 
uöt32_t
 
drm_of_föd_possibÀ_¸tcs
(
drm_devi˚
 *
dev
,

21 
devi˚_node
 *
p‹t
);

22 
drm_of_comp⁄ít_m©ch_add
(
devi˚
 *
ma°î
,

23 
comp⁄ít_m©ch
 **
m©ch±r
,

24 (*
com∑ª
)(
devi˚
 *, *),

25 
devi˚_node
 *
node
);

26 
	`drm_of_comp⁄ít_¥obe
(
devi˚
 *
dev
,

27 (*
com∑ª_of
)(
devi˚
 *, *),

28 c⁄° 
comp⁄ít_ma°î_›s
 *
m_›s
);

29 
	`drm_of_ícodî_a˘ive_ídpoöt
(
devi˚_node
 *
node
,

30 
drm_ícodî
 *
ícodî
,

31 
of_ídpoöt
 *
ídpoöt
);

32 
	`drm_of_föd_∑√l_‹_bridge
(c⁄° 
devi˚_node
 *
≈
,

33 
p‹t
, 
ídpoöt
,

34 
drm_∑√l
 **
∑√l
,

35 
drm_bridge
 **
bridge
);

37 
ölöe
 
uöt32_t
 
	$drm_of_föd_possibÀ_¸tcs
(
drm_devi˚
 *
dev
,

38 
devi˚_node
 *
p‹t
)

41 
	}
}

43 
ölöe
 

44 
drm_of_comp⁄ít_m©ch_add
(
devi˚
 *
ma°î
,

45 
comp⁄ít_m©ch
 **
m©ch±r
,

46 (*
com∑ª
)(
devi˚
 *, *),

47 
devi˚_node
 *
node
)

49 
	}
}

51 
ölöe
 

52 
drm_of_comp⁄ít_¥obe
(
devi˚
 *
dev
,

53 (*
com∑ª_of
)(
devi˚
 *, *),

54 c⁄° 
comp⁄ít_ma°î_›s
 *
m_›s
)

56  -
EINVAL
;

57 
	}
}

59 
ölöe
 
	$drm_of_ícodî_a˘ive_ídpoöt
(
devi˚_node
 *
node
,

60 
drm_ícodî
 *
ícodî
,

61 
of_ídpoöt
 *
ídpoöt
)

63  -
EINVAL
;

64 
	}
}

65 
ölöe
 
	$drm_of_föd_∑√l_‹_bridge
(c⁄° 
devi˚_node
 *
≈
,

66 
p‹t
, 
ídpoöt
,

67 
drm_∑√l
 **
∑√l
,

68 
drm_bridge
 **
bridge
)

70  -
EINVAL
;

71 
	}
}

82 
ölöe
 
	$drm_of_∑√l_bridge_ªmove
(c⁄° 
devi˚_node
 *
≈
,

83 
p‹t
, 
ídpoöt
)

85 #i‡
	`IS_ENABLED
(
CONFIG_OF
Ë&& IS_ENABLED(
CONFIG_DRM_PANEL_BRIDGE
)

86 
drm_bridge
 *
bridge
;

87 
devi˚_node
 *
ªmŸe
;

89 
ªmŸe
 = 
	`of_gøph_gë_ªmŸe_node
(
≈
, 
p‹t
, 
ídpoöt
);

90 i‡(!
ªmŸe
)

91  -
ENODEV
;

93 
bridge
 = 
	`of_drm_föd_bridge
(
ªmŸe
);

94 
	`drm_∑√l_bridge_ªmove
(
bridge
);

98  -
EINVAL
;

100 
	}
}

102 
ölöe
 
	$drm_of_ícodî_a˘ive_ídpoöt_id
(
devi˚_node
 *
node
,

103 
drm_ícodî
 *
ícodî
)

105 
of_ídpoöt
 
ídpoöt
;

106 
ªt
 = 
	`drm_of_ícodî_a˘ive_ídpoöt
(
node
, 
ícodî
,

107 &
ídpoöt
);

109  
ªt
 ?: 
ídpoöt
.
id
;

110 
	}
}

112 
ölöe
 
	$drm_of_ícodî_a˘ive_p‹t_id
(
devi˚_node
 *
node
,

113 
drm_ícodî
 *
ícodî
)

115 
of_ídpoöt
 
ídpoöt
;

116 
ªt
 = 
	`drm_of_ícodî_a˘ive_ídpoöt
(
node
, 
ícodî
,

117 &
ídpoöt
);

119  
ªt
 ?: 
ídpoöt
.
p‹t
;

120 
	}
}

	@src/common/linuxkpi/include/drm/drm_panel.h

24 #i‚de‡
__DRM_PANEL_H__


25 
	#__DRM_PANEL_H__


	)

27 
	~<löux/î∫o.h
>

28 
	~<löux/li°.h
>

30 
	gdevi˚_node
;

31 
	gdrm_c⁄√˘‹
;

32 
	gdrm_devi˚
;

33 
	gdrm_∑√l
;

34 
	gdi•œy_timög
;

70 
	sdrm_∑√l_funcs
 {

71 (*
	mdißbÀ
)(
drm_∑√l
 *
	m∑√l
);

72 (*
	mu≈ª∑ª
)(
drm_∑√l
 *
	m∑√l
);

73 (*
	m¥ï¨e
)(
drm_∑√l
 *
	m∑√l
);

74 (*
	míabÀ
)(
drm_∑√l
 *
	m∑√l
);

75 (*
	mgë_modes
)(
drm_∑√l
 *
	m∑√l
);

76 (*
	mgë_timögs
)(
drm_∑√l
 *
	m∑√l
, 
	mnum_timögs
,

77 
di•œy_timög
 *
	mtimögs
);

88 
	sdrm_∑√l
 {

89 
drm_devi˚
 *
	mdrm
;

90 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
;

91 
devi˚
 *
	mdev
;

93 c⁄° 
drm_∑√l_funcs
 *
	mfuncs
;

95 
li°_hód
 
	mli°
;

109 
ölöe
 
	$drm_∑√l_u≈ª∑ª
(
drm_∑√l
 *
∑√l
)

111 i‡(
∑√l
 &&Ö™ñ->
funcs
 &&Ö™ñ->funcs->
u≈ª∑ª
)

112  
∑√l
->
funcs
->
	`u≈ª∑ª
(panel);

114  
∑√l
 ? -
ENOSYS
 : -
EINVAL
;

115 
	}
}

127 
ölöe
 
	$drm_∑√l_dißbÀ
(
drm_∑√l
 *
∑√l
)

129 i‡(
∑√l
 &&Ö™ñ->
funcs
 &&Ö™ñ->funcs->
dißbÀ
)

130  
∑√l
->
funcs
->
	`dißbÀ
(panel);

132  
∑√l
 ? -
ENOSYS
 : -
EINVAL
;

133 
	}
}

145 
ölöe
 
	$drm_∑√l_¥ï¨e
(
drm_∑√l
 *
∑√l
)

147 i‡(
∑√l
 &&Ö™ñ->
funcs
 &&Ö™ñ->funcs->
¥ï¨e
)

148  
∑√l
->
funcs
->
	`¥ï¨e
(panel);

150  
∑√l
 ? -
ENOSYS
 : -
EINVAL
;

151 
	}
}

163 
ölöe
 
	$drm_∑√l_íabÀ
(
drm_∑√l
 *
∑√l
)

165 i‡(
∑√l
 &&Ö™ñ->
funcs
 &&Ö™ñ->funcs->
íabÀ
)

166  
∑√l
->
funcs
->
	`íabÀ
(panel);

168  
∑√l
 ? -
ENOSYS
 : -
EINVAL
;

169 
	}
}

181 
ölöe
 
	$drm_∑√l_gë_modes
(
drm_∑√l
 *
∑√l
)

183 i‡(
∑√l
 &&Ö™ñ->
funcs
 &&Ö™ñ->funcs->
gë_modes
)

184  
∑√l
->
funcs
->
	`gë_modes
(panel);

186  
∑√l
 ? -
ENOSYS
 : -
EINVAL
;

187 
	}
}

189 
drm_∑√l_öô
(
drm_∑√l
 *
∑√l
);

191 
drm_∑√l_add
(
drm_∑√l
 *
∑√l
);

192 
drm_∑√l_ªmove
(
drm_∑√l
 *
∑√l
);

194 
drm_∑√l_©èch
(
drm_∑√l
 *
∑√l
, 
drm_c⁄√˘‹
 *
c⁄√˘‹
);

195 
drm_∑√l_dëach
(
drm_∑√l
 *
∑√l
);

197 #i‡
deföed
(
CONFIG_OF
Ë&& deföed(
CONFIG_DRM_PANEL
)

198 
drm_∑√l
 *
of_drm_föd_∑√l
(c⁄° 
devi˚_node
 *
≈
);

200 
ölöe
 
drm_∑√l
 *
	$of_drm_föd_∑√l
(c⁄° 
devi˚_node
 *
≈
)

202  
NULL
;

203 
	}
}

	@src/common/linuxkpi/include/drm/drm_pci.h

32 #i‚de‡
_DRM_PCI_H_


33 
	#_DRM_PCI_H_


	)

35 
	~<löux/pci.h
>

37 #i‚de‡
__löux__


38 
	~<löux/∂©f‹m_devi˚.h
>

41 
	gdrm_dma_h™dÀ
;

42 
	gdrm_devi˚
;

43 
	gdrm_drivî
;

44 
	gdrm_ma°î
;

46 
drm_dma_h™dÀ
 *
drm_pci_Æloc
(
drm_devi˚
 *
dev
, 
size_t
 
size
,

47 
size_t
 
Æign
);

48 
drm_pci_‰ì
(
drm_devi˚
 *
dev
, 
drm_dma_h™dÀ
 * 
dmah
);

50 
drm_Àgacy_pci_öô
(
drm_drivî
 *
drivî
, 
pci_drivî
 *
pdrivî
);

51 
drm_Àgacy_pci_exô
(
drm_drivî
 *
drivî
, 
pci_drivî
 *
pdrivî
);

52 #ifde‡
CONFIG_PCI


53 
drm_gë_pci_dev
(
pci_dev
 *
pdev
,

54 c⁄° 
pci_devi˚_id
 *
ít
,

55 
drm_drivî
 *
drivî
);

57 
ölöe
 
	$drm_gë_pci_dev
(
pci_dev
 *
pdev
,

58 c⁄° 
pci_devi˚_id
 *
ít
,

59 
drm_drivî
 *
drivî
)

61  -
ENOSYS
;

62 
	}
}

65 
	#DRM_PCIE_SPEED_25
 1

	)

66 
	#DRM_PCIE_SPEED_50
 2

	)

67 
	#DRM_PCIE_SPEED_80
 4

	)

69 
drm_pcõ_gë_•ìd_ˇp_mask
(
drm_devi˚
 *
dev
, 
u32
 *
•ìd_mask
);

70 
drm_pcõ_gë_max_lök_width
(
drm_devi˚
 *
dev
, 
u32
 *
mlw
);

73 
drm_∂©f‹m_öô
(
drm_drivî
 *
drivî
, 
∂©f‹m_devi˚
 *platform_device);

	@src/common/linuxkpi/include/drm/drm_pciids.h

2 
	#øde⁄_PCI_IDS
 \

3 {0x1002, 0x1304, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

4 {0x1002, 0x1305, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

5 {0x1002, 0x1306, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

6 {0x1002, 0x1307, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

7 {0x1002, 0x1309, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

8 {0x1002, 0x130A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

9 {0x1002, 0x130B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

10 {0x1002, 0x130C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

11 {0x1002, 0x130D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

12 {0x1002, 0x130E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

13 {0x1002, 0x130F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

14 {0x1002, 0x1310, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

15 {0x1002, 0x1311, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

16 {0x1002, 0x1312, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

17 {0x1002, 0x1313, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

18 {0x1002, 0x1315, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

19 {0x1002, 0x1316, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

20 {0x1002, 0x1317, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

21 {0x1002, 0x1318, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

22 {0x1002, 0x131B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

23 {0x1002, 0x131C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

24 {0x1002, 0x131D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KAVERI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

25 {0x1002, 0x3150, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
}, \

26 {0x1002, 0x3151, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

27 {0x1002, 0x3152, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

28 {0x1002, 0x3154, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

29 {0x1002, 0x3155, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

30 {0x1002, 0x3E50, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_NEW_MEMMAP
}, \

31 {0x1002, 0x3E54, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_NEW_MEMMAP
}, \

32 {0x1002, 0x4136, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS100
|
RADEON_IS_IGP
}, \

33 {0x1002, 0x4137, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS200
|
RADEON_IS_IGP
}, \

34 {0x1002, 0x4144, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

35 {0x1002, 0x4145, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

36 {0x1002, 0x4146, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

37 {0x1002, 0x4147, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

38 {0x1002, 0x4148, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

39 {0x1002, 0x4149, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

40 {0x1002, 0x414A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

41 {0x1002, 0x414B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

42 {0x1002, 0x4150, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
}, \

43 {0x1002, 0x4151, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
}, \

44 {0x1002, 0x4152, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
}, \

45 {0x1002, 0x4153, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
}, \

46 {0x1002, 0x4154, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
}, \

47 {0x1002, 0x4155, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
}, \

48 {0x1002, 0x4156, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
}, \

49 {0x1002, 0x4237, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS200
|
RADEON_IS_IGP
}, \

50 {0x1002, 0x4242, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R200
}, \

51 {0x1002, 0x4336, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS100
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
}, \

52 {0x1002, 0x4337, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS200
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
}, \

53 {0x1002, 0x4437, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS200
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
}, \

54 {0x1002, 0x4966, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV250
}, \

55 {0x1002, 0x4967, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV250
}, \

56 {0x1002, 0x4A48, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

57 {0x1002, 0x4A49, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

58 {0x1002, 0x4A4A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

59 {0x1002, 0x4A4B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

60 {0x1002, 0x4A4C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

61 {0x1002, 0x4A4D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

62 {0x1002, 0x4A4E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

63 {0x1002, 0x4A4F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

64 {0x1002, 0x4A50, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

65 {0x1002, 0x4A54, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

66 {0x1002, 0x4B48, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

67 {0x1002, 0x4B49, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

68 {0x1002, 0x4B4A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

69 {0x1002, 0x4B4B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

70 {0x1002, 0x4B4C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R420
|
RADEON_NEW_MEMMAP
}, \

71 {0x1002, 0x4C57, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV200
|
RADEON_IS_MOBILITY
}, \

72 {0x1002, 0x4C58, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV200
|
RADEON_IS_MOBILITY
}, \

73 {0x1002, 0x4C59, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV100
|
RADEON_IS_MOBILITY
}, \

74 {0x1002, 0x4C5A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV100
|
RADEON_IS_MOBILITY
}, \

75 {0x1002, 0x4C64, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV250
|
RADEON_IS_MOBILITY
}, \

76 {0x1002, 0x4C66, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV250
|
RADEON_IS_MOBILITY
}, \

77 {0x1002, 0x4C67, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV250
|
RADEON_IS_MOBILITY
}, \

78 {0x1002, 0x4E44, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

79 {0x1002, 0x4E45, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

80 {0x1002, 0x4E46, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

81 {0x1002, 0x4E47, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R300
}, \

82 {0x1002, 0x4E48, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

83 {0x1002, 0x4E49, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

84 {0x1002, 0x4E4A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

85 {0x1002, 0x4E4B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R350
}, \

86 {0x1002, 0x4E50, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
|
RADEON_IS_MOBILITY
}, \

87 {0x1002, 0x4E51, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
|
RADEON_IS_MOBILITY
}, \

88 {0x1002, 0x4E52, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
|
RADEON_IS_MOBILITY
}, \

89 {0x1002, 0x4E53, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
|
RADEON_IS_MOBILITY
}, \

90 {0x1002, 0x4E54, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
|
RADEON_IS_MOBILITY
}, \

91 {0x1002, 0x4E56, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV350
|
RADEON_IS_MOBILITY
}, \

92 {0x1002, 0x5144, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R100
|
RADEON_SINGLE_CRTC
}, \

93 {0x1002, 0x5145, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R100
|
RADEON_SINGLE_CRTC
}, \

94 {0x1002, 0x5146, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R100
|
RADEON_SINGLE_CRTC
}, \

95 {0x1002, 0x5147, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R100
|
RADEON_SINGLE_CRTC
}, \

96 {0x1002, 0x5148, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R200
}, \

97 {0x1002, 0x514C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R200
}, \

98 {0x1002, 0x514D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R200
}, \

99 {0x1002, 0x5157, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV200
}, \

100 {0x1002, 0x5158, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV200
}, \

101 {0x1002, 0x5159, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV100
}, \

102 {0x1002, 0x515A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV100
}, \

103 {0x1002, 0x515E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV100
|
RADEON_SINGLE_CRTC
}, \

104 {0x1002, 0x5460, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
}, \

105 {0x1002, 0x5462, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
}, \

106 {0x1002, 0x5464, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_IS_MOBILITY
}, \

107 {0x1002, 0x5548, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

108 {0x1002, 0x5549, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

109 {0x1002, 0x554A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

110 {0x1002, 0x554B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

111 {0x1002, 0x554C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

112 {0x1002, 0x554D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

113 {0x1002, 0x554E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

114 {0x1002, 0x554F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

115 {0x1002, 0x5550, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

116 {0x1002, 0x5551, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

117 {0x1002, 0x5552, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

118 {0x1002, 0x5554, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

119 {0x1002, 0x564A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

120 {0x1002, 0x564B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

121 {0x1002, 0x564F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

122 {0x1002, 0x5652, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

123 {0x1002, 0x5653, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

124 {0x1002, 0x5657, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_NEW_MEMMAP
}, \

125 {0x1002, 0x5834, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS300
|
RADEON_IS_IGP
}, \

126 {0x1002, 0x5835, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS300
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
}, \

127 {0x1002, 0x5954, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS480
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
|
RADEON_IS_IGPGART
}, \

128 {0x1002, 0x5955, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS480
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
|
RADEON_IS_IGPGART
}, \

129 {0x1002, 0x5974, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS480
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
|
RADEON_IS_IGPGART
}, \

130 {0x1002, 0x5975, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS480
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
|
RADEON_IS_IGPGART
}, \

131 {0x1002, 0x5960, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV280
}, \

132 {0x1002, 0x5961, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV280
}, \

133 {0x1002, 0x5962, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV280
}, \

134 {0x1002, 0x5964, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV280
}, \

135 {0x1002, 0x5965, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV280
}, \

136 {0x1002, 0x5969, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV100
|
RADEON_SINGLE_CRTC
}, \

137 {0x1002, 0x5a41, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS400
|
RADEON_IS_IGP
|
RADEON_IS_IGPGART
}, \

138 {0x1002, 0x5a42, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS400
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
|
RADEON_IS_IGPGART
}, \

139 {0x1002, 0x5a61, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS400
|
RADEON_IS_IGP
|
RADEON_IS_IGPGART
}, \

140 {0x1002, 0x5a62, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS400
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
|
RADEON_IS_IGPGART
}, \

141 {0x1002, 0x5b60, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_NEW_MEMMAP
}, \

142 {0x1002, 0x5b62, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_NEW_MEMMAP
}, \

143 {0x1002, 0x5b63, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_NEW_MEMMAP
}, \

144 {0x1002, 0x5b64, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_NEW_MEMMAP
}, \

145 {0x1002, 0x5b65, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV380
|
RADEON_NEW_MEMMAP
}, \

146 {0x1002, 0x5c61, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV280
|
RADEON_IS_MOBILITY
}, \

147 {0x1002, 0x5c63, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV280
|
RADEON_IS_MOBILITY
}, \

148 {0x1002, 0x5d48, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

149 {0x1002, 0x5d49, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

150 {0x1002, 0x5d4a, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

151 {0x1002, 0x5d4c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

152 {0x1002, 0x5d4d, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

153 {0x1002, 0x5d4e, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

154 {0x1002, 0x5d4f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

155 {0x1002, 0x5d50, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

156 {0x1002, 0x5d52, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

157 {0x1002, 0x5d57, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R423
|
RADEON_NEW_MEMMAP
}, \

158 {0x1002, 0x5e48, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_NEW_MEMMAP
}, \

159 {0x1002, 0x5e4a, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_NEW_MEMMAP
}, \

160 {0x1002, 0x5e4b, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_NEW_MEMMAP
}, \

161 {0x1002, 0x5e4c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_NEW_MEMMAP
}, \

162 {0x1002, 0x5e4d, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_NEW_MEMMAP
}, \

163 {0x1002, 0x5e4f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV410
|
RADEON_NEW_MEMMAP
}, \

164 {0x1002, 0x6600, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

165 {0x1002, 0x6601, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

166 {0x1002, 0x6602, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

167 {0x1002, 0x6603, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

168 {0x1002, 0x6604, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

169 {0x1002, 0x6605, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

170 {0x1002, 0x6606, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

171 {0x1002, 0x6607, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

172 {0x1002, 0x6608, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_NEW_MEMMAP
}, \

173 {0x1002, 0x6610, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_NEW_MEMMAP
}, \

174 {0x1002, 0x6611, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_NEW_MEMMAP
}, \

175 {0x1002, 0x6613, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_NEW_MEMMAP
}, \

176 {0x1002, 0x6617, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

177 {0x1002, 0x6620, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

178 {0x1002, 0x6621, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

179 {0x1002, 0x6623, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

180 {0x1002, 0x6631, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_OLAND
|
RADEON_NEW_MEMMAP
}, \

181 {0x1002, 0x6640, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

182 {0x1002, 0x6641, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

183 {0x1002, 0x6646, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

184 {0x1002, 0x6647, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

185 {0x1002, 0x6649, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_NEW_MEMMAP
}, \

186 {0x1002, 0x6650, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_NEW_MEMMAP
}, \

187 {0x1002, 0x6651, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_NEW_MEMMAP
}, \

188 {0x1002, 0x6658, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_NEW_MEMMAP
}, \

189 {0x1002, 0x665c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_NEW_MEMMAP
}, \

190 {0x1002, 0x665d, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_NEW_MEMMAP
}, \

191 {0x1002, 0x665f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BONAIRE
|
RADEON_NEW_MEMMAP
}, \

192 {0x1002, 0x6660, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAINAN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

193 {0x1002, 0x6663, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAINAN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

194 {0x1002, 0x6664, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAINAN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

195 {0x1002, 0x6665, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAINAN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

196 {0x1002, 0x6667, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAINAN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

197 {0x1002, 0x666F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAINAN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

198 {0x1002, 0x6700, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

199 {0x1002, 0x6701, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

200 {0x1002, 0x6702, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

201 {0x1002, 0x6703, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

202 {0x1002, 0x6704, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

203 {0x1002, 0x6705, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

204 {0x1002, 0x6706, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

205 {0x1002, 0x6707, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

206 {0x1002, 0x6708, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

207 {0x1002, 0x6709, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

208 {0x1002, 0x6718, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

209 {0x1002, 0x6719, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

210 {0x1002, 0x671c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

211 {0x1002, 0x671d, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

212 {0x1002, 0x671f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAYMAN
|
RADEON_NEW_MEMMAP
}, \

213 {0x1002, 0x6720, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

214 {0x1002, 0x6721, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

215 {0x1002, 0x6722, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

216 {0x1002, 0x6723, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

217 {0x1002, 0x6724, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

218 {0x1002, 0x6725, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

219 {0x1002, 0x6726, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

220 {0x1002, 0x6727, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

221 {0x1002, 0x6728, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

222 {0x1002, 0x6729, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

223 {0x1002, 0x6738, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

224 {0x1002, 0x6739, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

225 {0x1002, 0x673e, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_BARTS
|
RADEON_NEW_MEMMAP
}, \

226 {0x1002, 0x6740, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

227 {0x1002, 0x6741, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

228 {0x1002, 0x6742, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

229 {0x1002, 0x6743, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

230 {0x1002, 0x6744, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

231 {0x1002, 0x6745, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

232 {0x1002, 0x6746, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

233 {0x1002, 0x6747, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

234 {0x1002, 0x6748, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

235 {0x1002, 0x6749, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

236 {0x1002, 0x674A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

237 {0x1002, 0x6750, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

238 {0x1002, 0x6751, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

239 {0x1002, 0x6758, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

240 {0x1002, 0x6759, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

241 {0x1002, 0x675B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

242 {0x1002, 0x675D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

243 {0x1002, 0x675F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

244 {0x1002, 0x6760, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

245 {0x1002, 0x6761, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

246 {0x1002, 0x6762, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

247 {0x1002, 0x6763, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

248 {0x1002, 0x6764, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

249 {0x1002, 0x6765, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

250 {0x1002, 0x6766, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

251 {0x1002, 0x6767, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

252 {0x1002, 0x6768, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

253 {0x1002, 0x6770, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

254 {0x1002, 0x6771, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

255 {0x1002, 0x6772, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

256 {0x1002, 0x6778, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

257 {0x1002, 0x6779, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

258 {0x1002, 0x677B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CAICOS
|
RADEON_NEW_MEMMAP
}, \

259 {0x1002, 0x6780, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

260 {0x1002, 0x6784, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

261 {0x1002, 0x6788, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

262 {0x1002, 0x678A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

263 {0x1002, 0x6790, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

264 {0x1002, 0x6791, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

265 {0x1002, 0x6792, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

266 {0x1002, 0x6798, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

267 {0x1002, 0x6799, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

268 {0x1002, 0x679A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

269 {0x1002, 0x679B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

270 {0x1002, 0x679E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

271 {0x1002, 0x679F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TAHITI
|
RADEON_NEW_MEMMAP
}, \

272 {0x1002, 0x67A0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

273 {0x1002, 0x67A1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

274 {0x1002, 0x67A2, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

275 {0x1002, 0x67A8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

276 {0x1002, 0x67A9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

277 {0x1002, 0x67AA, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

278 {0x1002, 0x67B0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

279 {0x1002, 0x67B1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

280 {0x1002, 0x67B8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

281 {0x1002, 0x67B9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

282 {0x1002, 0x67BA, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

283 {0x1002, 0x67BE, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HAWAII
|
RADEON_NEW_MEMMAP
}, \

284 {0x1002, 0x6800, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

285 {0x1002, 0x6801, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

286 {0x1002, 0x6802, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

287 {0x1002, 0x6806, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

288 {0x1002, 0x6808, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

289 {0x1002, 0x6809, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

290 {0x1002, 0x6810, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

291 {0x1002, 0x6811, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

292 {0x1002, 0x6816, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

293 {0x1002, 0x6817, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

294 {0x1002, 0x6818, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

295 {0x1002, 0x6819, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

296 {0x1002, 0x6820, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

297 {0x1002, 0x6821, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

298 {0x1002, 0x6822, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

299 {0x1002, 0x6823, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

300 {0x1002, 0x6824, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

301 {0x1002, 0x6825, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

302 {0x1002, 0x6826, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

303 {0x1002, 0x6827, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

304 {0x1002, 0x6828, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

305 {0x1002, 0x6829, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

306 {0x1002, 0x682A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

307 {0x1002, 0x682B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

308 {0x1002, 0x682C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

309 {0x1002, 0x682D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

310 {0x1002, 0x682F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

311 {0x1002, 0x6830, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

312 {0x1002, 0x6831, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

313 {0x1002, 0x6835, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

314 {0x1002, 0x6837, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

315 {0x1002, 0x6838, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

316 {0x1002, 0x6839, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

317 {0x1002, 0x683B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

318 {0x1002, 0x683D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

319 {0x1002, 0x683F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_VERDE
|
RADEON_NEW_MEMMAP
}, \

320 {0x1002, 0x6840, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

321 {0x1002, 0x6841, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

322 {0x1002, 0x6842, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

323 {0x1002, 0x6843, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

324 {0x1002, 0x6849, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

325 {0x1002, 0x684C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PITCAIRN
|
RADEON_NEW_MEMMAP
}, \

326 {0x1002, 0x6850, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

327 {0x1002, 0x6858, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

328 {0x1002, 0x6859, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_TURKS
|
RADEON_NEW_MEMMAP
}, \

329 {0x1002, 0x6880, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

330 {0x1002, 0x6888, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

331 {0x1002, 0x6889, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

332 {0x1002, 0x688A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

333 {0x1002, 0x688C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

334 {0x1002, 0x688D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

335 {0x1002, 0x6898, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

336 {0x1002, 0x6899, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

337 {0x1002, 0x689b, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

338 {0x1002, 0x689c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HEMLOCK
|
RADEON_NEW_MEMMAP
}, \

339 {0x1002, 0x689d, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_HEMLOCK
|
RADEON_NEW_MEMMAP
}, \

340 {0x1002, 0x689e, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CYPRESS
|
RADEON_NEW_MEMMAP
}, \

341 {0x1002, 0x68a0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

342 {0x1002, 0x68a1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

343 {0x1002, 0x68a8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_NEW_MEMMAP
}, \

344 {0x1002, 0x68a9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_NEW_MEMMAP
}, \

345 {0x1002, 0x68b0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

346 {0x1002, 0x68b8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_NEW_MEMMAP
}, \

347 {0x1002, 0x68b9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_NEW_MEMMAP
}, \

348 {0x1002, 0x68ba, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_NEW_MEMMAP
}, \

349 {0x1002, 0x68be, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_NEW_MEMMAP
}, \

350 {0x1002, 0x68bf, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_JUNIPER
|
RADEON_NEW_MEMMAP
}, \

351 {0x1002, 0x68c0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

352 {0x1002, 0x68c1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

353 {0x1002, 0x68c7, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

354 {0x1002, 0x68c8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_NEW_MEMMAP
}, \

355 {0x1002, 0x68c9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_NEW_MEMMAP
}, \

356 {0x1002, 0x68d8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_NEW_MEMMAP
}, \

357 {0x1002, 0x68d9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_NEW_MEMMAP
}, \

358 {0x1002, 0x68da, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_NEW_MEMMAP
}, \

359 {0x1002, 0x68de, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_REDWOOD
|
RADEON_NEW_MEMMAP
}, \

360 {0x1002, 0x68e0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

361 {0x1002, 0x68e1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

362 {0x1002, 0x68e4, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

363 {0x1002, 0x68e5, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

364 {0x1002, 0x68e8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

365 {0x1002, 0x68e9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

366 {0x1002, 0x68f1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

367 {0x1002, 0x68f2, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

368 {0x1002, 0x68f8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

369 {0x1002, 0x68f9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

370 {0x1002, 0x68Á, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

371 {0x1002, 0x68„, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_CEDAR
|
RADEON_NEW_MEMMAP
}, \

372 {0x1002, 0x7100, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

373 {0x1002, 0x7101, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

374 {0x1002, 0x7102, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

375 {0x1002, 0x7103, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

376 {0x1002, 0x7104, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

377 {0x1002, 0x7105, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

378 {0x1002, 0x7106, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

379 {0x1002, 0x7108, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

380 {0x1002, 0x7109, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

381 {0x1002, 0x710A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

382 {0x1002, 0x710B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

383 {0x1002, 0x710C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

384 {0x1002, 0x710E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

385 {0x1002, 0x710F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R520
|
RADEON_NEW_MEMMAP
}, \

386 {0x1002, 0x7140, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

387 {0x1002, 0x7141, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

388 {0x1002, 0x7142, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

389 {0x1002, 0x7143, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

390 {0x1002, 0x7144, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

391 {0x1002, 0x7145, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

392 {0x1002, 0x7146, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

393 {0x1002, 0x7147, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

394 {0x1002, 0x7149, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

395 {0x1002, 0x714A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

396 {0x1002, 0x714B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

397 {0x1002, 0x714C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

398 {0x1002, 0x714D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

399 {0x1002, 0x714E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

400 {0x1002, 0x714F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

401 {0x1002, 0x7151, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

402 {0x1002, 0x7152, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

403 {0x1002, 0x7153, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

404 {0x1002, 0x715E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

405 {0x1002, 0x715F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

406 {0x1002, 0x7180, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

407 {0x1002, 0x7181, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

408 {0x1002, 0x7183, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

409 {0x1002, 0x7186, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

410 {0x1002, 0x7187, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

411 {0x1002, 0x7188, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

412 {0x1002, 0x718A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

413 {0x1002, 0x718B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

414 {0x1002, 0x718C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

415 {0x1002, 0x718D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

416 {0x1002, 0x718F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

417 {0x1002, 0x7193, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

418 {0x1002, 0x7196, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

419 {0x1002, 0x719B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

420 {0x1002, 0x719F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

421 {0x1002, 0x71C0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

422 {0x1002, 0x71C1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

423 {0x1002, 0x71C2, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

424 {0x1002, 0x71C3, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

425 {0x1002, 0x71C4, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

426 {0x1002, 0x71C5, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

427 {0x1002, 0x71C6, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

428 {0x1002, 0x71C7, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

429 {0x1002, 0x71CD, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

430 {0x1002, 0x71CE, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

431 {0x1002, 0x71D2, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

432 {0x1002, 0x71D4, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

433 {0x1002, 0x71D5, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

434 {0x1002, 0x71D6, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

435 {0x1002, 0x71DA, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_NEW_MEMMAP
}, \

436 {0x1002, 0x71DE, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV530
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

437 {0x1002, 0x7200, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_NEW_MEMMAP
}, \

438 {0x1002, 0x7210, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

439 {0x1002, 0x7211, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV515
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

440 {0x1002, 0x7240, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

441 {0x1002, 0x7243, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

442 {0x1002, 0x7244, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

443 {0x1002, 0x7245, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

444 {0x1002, 0x7246, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

445 {0x1002, 0x7247, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

446 {0x1002, 0x7248, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

447 {0x1002, 0x7249, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

448 {0x1002, 0x724A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

449 {0x1002, 0x724B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

450 {0x1002, 0x724C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

451 {0x1002, 0x724D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

452 {0x1002, 0x724E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

453 {0x1002, 0x724F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_NEW_MEMMAP
}, \

454 {0x1002, 0x7280, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV570
|
RADEON_NEW_MEMMAP
}, \

455 {0x1002, 0x7281, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV560
|
RADEON_NEW_MEMMAP
}, \

456 {0x1002, 0x7283, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV560
|
RADEON_NEW_MEMMAP
}, \

457 {0x1002, 0x7284, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R580
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

458 {0x1002, 0x7287, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV560
|
RADEON_NEW_MEMMAP
}, \

459 {0x1002, 0x7288, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV570
|
RADEON_NEW_MEMMAP
}, \

460 {0x1002, 0x7289, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV570
|
RADEON_NEW_MEMMAP
}, \

461 {0x1002, 0x728B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV570
|
RADEON_NEW_MEMMAP
}, \

462 {0x1002, 0x728C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV570
|
RADEON_NEW_MEMMAP
}, \

463 {0x1002, 0x7290, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV560
|
RADEON_NEW_MEMMAP
}, \

464 {0x1002, 0x7291, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV560
|
RADEON_NEW_MEMMAP
}, \

465 {0x1002, 0x7293, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV560
|
RADEON_NEW_MEMMAP
}, \

466 {0x1002, 0x7297, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV560
|
RADEON_NEW_MEMMAP
}, \

467 {0x1002, 0x7834, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS300
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
}, \

468 {0x1002, 0x7835, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS300
|
RADEON_IS_IGP
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

469 {0x1002, 0x791e, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS690
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGPGART
}, \

470 {0x1002, 0x791f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS690
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGPGART
}, \

471 {0x1002, 0x793f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS600
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
}, \

472 {0x1002, 0x7941, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS600
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
}, \

473 {0x1002, 0x7942, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS600
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
}, \

474 {0x1002, 0x796c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS740
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGPGART
}, \

475 {0x1002, 0x796d, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS740
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGPGART
}, \

476 {0x1002, 0x796e, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS740
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGPGART
}, \

477 {0x1002, 0x796f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS740
|
RADEON_IS_IGP
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGPGART
}, \

478 {0x1002, 0x9400, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

479 {0x1002, 0x9401, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

480 {0x1002, 0x9402, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

481 {0x1002, 0x9403, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

482 {0x1002, 0x9405, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

483 {0x1002, 0x940A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

484 {0x1002, 0x940B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

485 {0x1002, 0x940F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_R600
|
RADEON_NEW_MEMMAP
}, \

486 {0x1002, 0x94A0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

487 {0x1002, 0x94A1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

488 {0x1002, 0x94A3, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

489 {0x1002, 0x94B1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_NEW_MEMMAP
}, \

490 {0x1002, 0x94B3, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_NEW_MEMMAP
}, \

491 {0x1002, 0x94B4, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_NEW_MEMMAP
}, \

492 {0x1002, 0x94B5, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_NEW_MEMMAP
}, \

493 {0x1002, 0x94B9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV740
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

494 {0x1002, 0x9440, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

495 {0x1002, 0x9441, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

496 {0x1002, 0x9442, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

497 {0x1002, 0x9443, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

498 {0x1002, 0x9444, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

499 {0x1002, 0x9446, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

500 {0x1002, 0x944A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

501 {0x1002, 0x944B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

502 {0x1002, 0x944C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

503 {0x1002, 0x944E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

504 {0x1002, 0x9450, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

505 {0x1002, 0x9452, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

506 {0x1002, 0x9456, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

507 {0x1002, 0x945A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

508 {0x1002, 0x945B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

509 {0x1002, 0x945E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

510 {0x1002, 0x9460, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

511 {0x1002, 0x9462, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_NEW_MEMMAP
}, \

512 {0x1002, 0x946A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

513 {0x1002, 0x946B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

514 {0x1002, 0x947A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

515 {0x1002, 0x947B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV770
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

516 {0x1002, 0x9480, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

517 {0x1002, 0x9487, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

518 {0x1002, 0x9488, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

519 {0x1002, 0x9489, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

520 {0x1002, 0x948A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

521 {0x1002, 0x948F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

522 {0x1002, 0x9490, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

523 {0x1002, 0x9491, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

524 {0x1002, 0x9495, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

525 {0x1002, 0x9498, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

526 {0x1002, 0x949C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

527 {0x1002, 0x949E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

528 {0x1002, 0x949F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV730
|
RADEON_NEW_MEMMAP
}, \

529 {0x1002, 0x94C0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

530 {0x1002, 0x94C1, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

531 {0x1002, 0x94C3, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

532 {0x1002, 0x94C4, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

533 {0x1002, 0x94C5, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

534 {0x1002, 0x94C6, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

535 {0x1002, 0x94C7, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

536 {0x1002, 0x94C8, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

537 {0x1002, 0x94C9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

538 {0x1002, 0x94CB, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

539 {0x1002, 0x94CC, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

540 {0x1002, 0x94CD, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV610
|
RADEON_NEW_MEMMAP
}, \

541 {0x1002, 0x9500, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

542 {0x1002, 0x9501, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

543 {0x1002, 0x9504, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

544 {0x1002, 0x9505, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

545 {0x1002, 0x9506, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

546 {0x1002, 0x9507, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

547 {0x1002, 0x9508, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

548 {0x1002, 0x9509, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

549 {0x1002, 0x950F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

550 {0x1002, 0x9511, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

551 {0x1002, 0x9515, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

552 {0x1002, 0x9517, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

553 {0x1002, 0x9519, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV670
|
RADEON_NEW_MEMMAP
}, \

554 {0x1002, 0x9540, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_NEW_MEMMAP
}, \

555 {0x1002, 0x9541, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_NEW_MEMMAP
}, \

556 {0x1002, 0x9542, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_NEW_MEMMAP
}, \

557 {0x1002, 0x954E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_NEW_MEMMAP
}, \

558 {0x1002, 0x954F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_NEW_MEMMAP
}, \

559 {0x1002, 0x9552, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

560 {0x1002, 0x9553, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

561 {0x1002, 0x9555, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

562 {0x1002, 0x9557, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

563 {0x1002, 0x955f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV710
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

564 {0x1002, 0x9580, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

565 {0x1002, 0x9581, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

566 {0x1002, 0x9583, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

567 {0x1002, 0x9586, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

568 {0x1002, 0x9587, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

569 {0x1002, 0x9588, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

570 {0x1002, 0x9589, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

571 {0x1002, 0x958A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

572 {0x1002, 0x958B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

573 {0x1002, 0x958C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

574 {0x1002, 0x958D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

575 {0x1002, 0x958E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_NEW_MEMMAP
}, \

576 {0x1002, 0x958F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV630
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

577 {0x1002, 0x9590, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_NEW_MEMMAP
}, \

578 {0x1002, 0x9591, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

579 {0x1002, 0x9593, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

580 {0x1002, 0x9595, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

581 {0x1002, 0x9596, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_NEW_MEMMAP
}, \

582 {0x1002, 0x9597, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_NEW_MEMMAP
}, \

583 {0x1002, 0x9598, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_NEW_MEMMAP
}, \

584 {0x1002, 0x9599, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_NEW_MEMMAP
}, \

585 {0x1002, 0x959B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV635
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

586 {0x1002, 0x95C0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

587 {0x1002, 0x95C2, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

588 {0x1002, 0x95C4, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
}, \

589 {0x1002, 0x95C5, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

590 {0x1002, 0x95C6, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

591 {0x1002, 0x95C7, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

592 {0x1002, 0x95C9, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

593 {0x1002, 0x95CC, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

594 {0x1002, 0x95CD, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

595 {0x1002, 0x95CE, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

596 {0x1002, 0x95CF, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RV620
|
RADEON_NEW_MEMMAP
}, \

597 {0x1002, 0x9610, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS780
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

598 {0x1002, 0x9611, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS780
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

599 {0x1002, 0x9612, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS780
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

600 {0x1002, 0x9613, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS780
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

601 {0x1002, 0x9614, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS780
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

602 {0x1002, 0x9615, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS780
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

603 {0x1002, 0x9616, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS780
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

604 {0x1002, 0x9640, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

605 {0x1002, 0x9641, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

606 {0x1002, 0x9642, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO2
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

607 {0x1002, 0x9643, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO2
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

608 {0x1002, 0x9644, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO2
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

609 {0x1002, 0x9645, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO2
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

610 {0x1002, 0x9647, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
},\

611 {0x1002, 0x9648, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
},\

612 {0x1002, 0x9649, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO2
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
},\

613 {0x1002, 0x964a, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

614 {0x1002, 0x964b, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

615 {0x1002, 0x964c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

616 {0x1002, 0x964e, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
},\

617 {0x1002, 0x964f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_SUMO
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
},\

618 {0x1002, 0x9710, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS880
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

619 {0x1002, 0x9711, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS880
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

620 {0x1002, 0x9712, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS880
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

621 {0x1002, 0x9713, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS880
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

622 {0x1002, 0x9714, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS880
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

623 {0x1002, 0x9715, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_RS880
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

624 {0x1002, 0x9802, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

625 {0x1002, 0x9803, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

626 {0x1002, 0x9804, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

627 {0x1002, 0x9805, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

628 {0x1002, 0x9806, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

629 {0x1002, 0x9807, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

630 {0x1002, 0x9808, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

631 {0x1002, 0x9809, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

632 {0x1002, 0x980A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_PALM
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

633 {0x1002, 0x9830, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

634 {0x1002, 0x9831, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

635 {0x1002, 0x9832, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

636 {0x1002, 0x9833, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

637 {0x1002, 0x9834, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

638 {0x1002, 0x9835, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

639 {0x1002, 0x9836, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

640 {0x1002, 0x9837, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

641 {0x1002, 0x9838, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

642 {0x1002, 0x9839, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

643 {0x1002, 0x983a, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

644 {0x1002, 0x983b, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

645 {0x1002, 0x983c, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

646 {0x1002, 0x983d, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

647 {0x1002, 0x983e, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

648 {0x1002, 0x983f, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_KABINI
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

649 {0x1002, 0x9850, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

650 {0x1002, 0x9851, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

651 {0x1002, 0x9852, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

652 {0x1002, 0x9853, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

653 {0x1002, 0x9854, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

654 {0x1002, 0x9855, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

655 {0x1002, 0x9856, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

656 {0x1002, 0x9857, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

657 {0x1002, 0x9858, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

658 {0x1002, 0x9859, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

659 {0x1002, 0x985A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

660 {0x1002, 0x985B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

661 {0x1002, 0x985C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

662 {0x1002, 0x985D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

663 {0x1002, 0x985E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

664 {0x1002, 0x985F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_MULLINS
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

665 {0x1002, 0x9900, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

666 {0x1002, 0x9901, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

667 {0x1002, 0x9903, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

668 {0x1002, 0x9904, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

669 {0x1002, 0x9905, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

670 {0x1002, 0x9906, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

671 {0x1002, 0x9907, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

672 {0x1002, 0x9908, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

673 {0x1002, 0x9909, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

674 {0x1002, 0x990A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

675 {0x1002, 0x990B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

676 {0x1002, 0x990C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

677 {0x1002, 0x990D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

678 {0x1002, 0x990E, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

679 {0x1002, 0x990F, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

680 {0x1002, 0x9910, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

681 {0x1002, 0x9913, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

682 {0x1002, 0x9917, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

683 {0x1002, 0x9918, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

684 {0x1002, 0x9919, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

685 {0x1002, 0x9990, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

686 {0x1002, 0x9991, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

687 {0x1002, 0x9992, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

688 {0x1002, 0x9993, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

689 {0x1002, 0x9994, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

690 {0x1002, 0x9995, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

691 {0x1002, 0x9996, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

692 {0x1002, 0x9997, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

693 {0x1002, 0x9998, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

694 {0x1002, 0x9999, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

695 {0x1002, 0x999A, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

696 {0x1002, 0x999B, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

697 {0x1002, 0x999C, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

698 {0x1002, 0x999D, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

699 {0x1002, 0x99A0, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

700 {0x1002, 0x99A2, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_IS_MOBILITY
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

701 {0x1002, 0x99A4, 
PCI_ANY_ID
, PCI_ANY_ID, 0, 0, 
CHIP_ARUBA
|
RADEON_NEW_MEMMAP
|
RADEON_IS_IGP
}, \

702 {0, 0, 0}

	)

704 
	#ffb_PCI_IDS
 \

705 {0, 0, 0, 
NULL
}

	)

707 
	#gamma_PCI_IDS
 \

709 {0, 0, 0, 
NULL
}

	)

711 
	#i810_PCI_IDS
 \

716 {0, 0, 0, 
NULL
}

	)

718 
	#i830_PCI_IDS
 \

723 {0, 0, 0, 
NULL
}

	)

725 
	#imagöe_PCI_IDS
 \

726 {0x105D, 0x2309, 
IMAGINE_128
, "Imagine 128"}, \

727 {0x105D, 0x2339, 
IMAGINE_128_2
, "Imagine 128-II"}, \

728 {0x105D, 0x493D, 
IMAGINE_T2R
, "TicketÅo Ride"}, \

729 {0x105D, 0x5348, 
IMAGINE_REV4
, "Revolution IV"}, \

730 {0, 0, 0, 
NULL
}

	)

732 
	#mach64_PCI_IDS
 \

753 {0, 0, 0, 
NULL
}

	)

755 
	#mga_PCI_IDS
 \

756 {0x102B, 0x0520, 
MGA_CARD_TYPE_G200
, "Matrox G200 (PCI)"}, \

757 {0x102B, 0x0521, 
MGA_CARD_TYPE_G200
, "Matrox G200 (AGP)"}, \

758 {0x102B, 0x0525, 
MGA_CARD_TYPE_G400
, "Matrox G400/G450 (AGP)"}, \

759 {0x102B, 0x2527, 
MGA_CARD_TYPE_G550
, "Matrox G550 (AGP)"}, \

760 {0, 0, 0, 
NULL
}

	)

762 
	#nv_PCI_IDS
 \

763 {0x10DE, 0x0020, 
NV04
, "NVidia RIVA TNT"}, \

764 {0x10DE, 0x0028, 
NV04
, "NVidia RIVA TNT2"}, \

765 {0x10DE, 0x0029, 
NV04
, "NVidia RIVA TNT2 Ultra"}, \

766 {0x10DE, 0x002A, 
NV04
, "NVidia Unknown TNT2"}, \

767 {0x10DE, 0x002C, 
NV04
, "NVidia Vanta"}, \

768 {0x10DE, 0x002D, 
NV04
, "NVidia RIVA TNT2 Model 64"}, \

769 {0x10DE, 0x0040, 
NV40
, "NVidia GeForce 6800 Ultra"}, \

770 {0x10DE, 0x0041, 
NV40
, "NVidia GeForce 6800"}, \

771 {0x10DE, 0x0042, 
NV40
, "NVidia GeForce 6800 LE"}, \

772 {0x10DE, 0x0043, 
NV40
, "NVidia 0x0043"}, \

773 {0x10DE, 0x0045, 
NV40
, "NVidia GeForce 6800 GT"}, \

774 {0x10DE, 0x0046, 
NV40
, "NVidia GeForce 6800 GT"}, \

775 {0x10DE, 0x0049, 
NV40
, "NVidia 0x0049"}, \

776 {0x10DE, 0x004E, 
NV40
, "NVidia Quadro FX 4000"}, \

777 {0x10DE, 0x0090, 
NV40
, "NVidia 0x0090"}, \

778 {0x10DE, 0x0091, 
NV40
, "NVidia GeForce 7800 GTX"}, \

779 {0x10DE, 0x0092, 
NV40
, "NVidia 0x0092"}, \

780 {0x10DE, 0x0093, 
NV40
, "NVidia 0x0093"}, \

781 {0x10DE, 0x0094, 
NV40
, "NVidia 0x0094"}, \

782 {0x10DE, 0x0098, 
NV40
, "NVidia 0x0098"}, \

783 {0x10DE, 0x0099, 
NV40
, "NVidia GeForce Go 7800 GTX"}, \

784 {0x10DE, 0x009C, 
NV40
, "NVidia 0x009C"}, \

785 {0x10DE, 0x009D, 
NV40
, "NVidia Quadro FX 4500"}, \

786 {0x10DE, 0x009E, 
NV40
, "NVidia 0x009E"}, \

787 {0x10DE, 0x00A0, 
NV04
, "NVidia Aladdin TNT2"}, \

788 {0x10DE, 0x00C0, 
NV40
, "NVidia 0x00C0"}, \

789 {0x10DE, 0x00C1, 
NV40
, "NVidia GeForce 6800"}, \

790 {0x10DE, 0x00C2, 
NV40
, "NVidia GeForce 6800 LE"}, \

791 {0x10DE, 0x00C8, 
NV40
, "NVidia GeForce Go 6800"}, \

792 {0x10DE, 0x00C9, 
NV40
, "NVidia GeForce Go 6800 Ultra"}, \

793 {0x10DE, 0x00CC, 
NV40
, "NVidia Quadro FX Go1400"}, \

794 {0x10DE, 0x00CD, 
NV40
, "NVidia Quadro FX 3450/4000 SDI"}, \

795 {0x10DE, 0x00CE, 
NV40
, "NVidia Quadro FX 1400"}, \

796 {0x10DE, 0x00F0, 
NV40
, "Nvidia GeForce 6600 GT"}, \

797 {0x10DE, 0x00F1, 
NV40
, "Nvidia GeForce 6600 GT"}, \

798 {0x10DE, 0x0100, 
NV10
, "NVidia GeForce 256"}, \

799 {0x10DE, 0x0101, 
NV10
, "NVidia GeForce DDR"}, \

800 {0x10DE, 0x0103, 
NV10
, "NVidia Quadro"}, \

801 {0x10DE, 0x0110, 
NV10
, "NVidia GeForce2 MX/MX 400"}, \

802 {0x10DE, 0x0111, 
NV10
, "NVidia GeForce2 MX 100/200"}, \

803 {0x10DE, 0x0112, 
NV10
, "NVidia GeForce2 Go"}, \

804 {0x10DE, 0x0113, 
NV10
, "NVidia Quadro2 MXR/EX/Go"}, \

805 {0x10DE, 0x0140, 
NV40
, "NVidia GeForce 6600 GT"}, \

806 {0x10DE, 0x0141, 
NV40
, "NVidia GeForce 6600"}, \

807 {0x10DE, 0x0142, 
NV40
, "NVidia GeForce 6600 LE"}, \

808 {0x10DE, 0x0143, 
NV40
, "NVidia 0x0143"}, \

809 {0x10DE, 0x0144, 
NV40
, "NVidia GeForce Go 6600"}, \

810 {0x10DE, 0x0145, 
NV40
, "NVidia GeForce 6610 XL"}, \

811 {0x10DE, 0x0146, 
NV40
, "NVidia GeForce Go 6600 TE/6200 TE"}, \

812 {0x10DE, 0x0147, 
NV40
, "NVidia GeForce 6700 XL"}, \

813 {0x10DE, 0x0148, 
NV40
, "NVidia GeForce Go 6600"}, \

814 {0x10DE, 0x0149, 
NV40
, "NVidia GeForce Go 6600 GT"}, \

815 {0x10DE, 0x014B, 
NV40
, "NVidia 0x014B"}, \

816 {0x10DE, 0x014C, 
NV40
, "NVidia 0x014C"}, \

817 {0x10DE, 0x014D, 
NV40
, "NVidia 0x014D"}, \

818 {0x10DE, 0x014E, 
NV40
, "NVidia Quadro FX 540"}, \

819 {0x10DE, 0x014F, 
NV40
, "NVidia GeForce 6200"}, \

820 {0x10DE, 0x0150, 
NV10
, "NVidia GeForce2 GTS"}, \

821 {0x10DE, 0x0151, 
NV10
, "NVidia GeForce2 Ti"}, \

822 {0x10DE, 0x0152, 
NV10
, "NVidia GeForce2 Ultra"}, \

823 {0x10DE, 0x0153, 
NV10
, "NVidia Quadro2 Pro"}, \

824 {0x10DE, 0x0160, 
NV40
, "NVidia 0x0160"}, \

825 {0x10DE, 0x0161, 
NV40
, "NVidia GeForce 6200 TurboCache(TM)"}, \

826 {0x10DE, 0x0162, 
NV40
, "NVidia GeForce 6200SE TurboCache(TM)"}, \

827 {0x10DE, 0x0163, 
NV40
, "NVidia 0x0163"}, \

828 {0x10DE, 0x0164, 
NV40
, "NVidia GeForce Go 6200"}, \

829 {0x10DE, 0x0165, 
NV40
, "NVidia Quadro NVS 285"}, \

830 {0x10DE, 0x0166, 
NV40
, "NVidia GeForce Go 6400"}, \

831 {0x10DE, 0x0167, 
NV40
, "NVidia GeForce Go 6200"}, \

832 {0x10DE, 0x0168, 
NV40
, "NVidia GeForce Go 6400"}, \

833 {0x10DE, 0x0169, 
NV40
, "NVidia 0x0169"}, \

834 {0x10DE, 0x016B, 
NV40
, "NVidia 0x016B"}, \

835 {0x10DE, 0x016C, 
NV40
, "NVidia 0x016C"}, \

836 {0x10DE, 0x016D, 
NV40
, "NVidia 0x016D"}, \

837 {0x10DE, 0x016E, 
NV40
, "NVidia 0x016E"}, \

838 {0x10DE, 0x0170, 
NV10
, "NVidia GeForce4 MX 460"}, \

839 {0x10DE, 0x0171, 
NV10
, "NVidia GeForce4 MX 440"}, \

840 {0x10DE, 0x0172, 
NV10
, "NVidia GeForce4 MX 420"}, \

841 {0x10DE, 0x0173, 
NV10
, "NVidia GeForce4 MX 440-SE"}, \

842 {0x10DE, 0x0174, 
NV10
, "NVidia GeForce4 440 Go"}, \

843 {0x10DE, 0x0175, 
NV10
, "NVidia GeForce4 420 Go"}, \

844 {0x10DE, 0x0176, 
NV10
, "NVidia GeForce4 420 Go 32M"}, \

845 {0x10DE, 0x0177, 
NV10
, "NVidia GeForce4 460 Go"}, \

846 {0x10DE, 0x0178, 
NV10
, "NVidia Quadro4 550 XGL"}, \

847 {0x10DE, 0x0179, 
NV10
, "NVidia GeForce4"}, \

848 {0x10DE, 0x017A, 
NV10
, "NVidia Quadro4 NVS"}, \

849 {0x10DE, 0x017C, 
NV10
, "NVidia Quadro4 500 GoGL"}, \

850 {0x10DE, 0x017D, 
NV10
, "NVidia GeForce4 410 Go 16M"}, \

851 {0x10DE, 0x0181, 
NV10
, "NVidia GeForce4 MX 440 with AGP8X"}, \

852 {0x10DE, 0x0182, 
NV10
, "NVidia GeForce4 MX 440SE with AGP8X"}, \

853 {0x10DE, 0x0183, 
NV10
, "NVidia GeForce4 MX 420 with AGP8X"}, \

854 {0x10DE, 0x0185, 
NV10
, "NVidia GeForce4 MX 4000"}, \

855 {0x10DE, 0x0186, 
NV10
, "NVidia GeForce4 448 Go"}, \

856 {0x10DE, 0x0187, 
NV10
, "NVidia GeForce4 488 Go"}, \

857 {0x10DE, 0x0188, 
NV10
, "NVidia Quadro4 580 XGL"}, \

858 {0x10DE, 0x0189, 
NV10
, "NVidia GeForce4 MX with AGP8X (Mac)"}, \

859 {0x10DE, 0x018A, 
NV10
, "NVidia Quadro4 280 NVS"}, \

860 {0x10DE, 0x018B, 
NV10
, "NVidia Quadro4 380 XGL"}, \

861 {0x10DE, 0x018C, 
NV10
, "NVidia Quadro NVS 50 PCI"}, \

862 {0x10DE, 0x018D, 
NV10
, "NVidia GeForce4 448 Go"}, \

863 {0x10DE, 0x01A0, 
NV10
, "NVidia GeForce2 Integrated GPU"}, \

864 {0x10DE, 0x01F0, 
NV10
, "NVidia GeForce4 MX Integrated GPU"}, \

865 {0x10DE, 0x0200, 
NV20
, "NVidia GeForce3"}, \

866 {0x10DE, 0x0201, 
NV20
, "NVidia GeForce3 Ti 200"}, \

867 {0x10DE, 0x0202, 
NV20
, "NVidia GeForce3 Ti 500"}, \

868 {0x10DE, 0x0203, 
NV20
, "NVidia Quadro DCC"}, \

869 {0x10DE, 0x0210, 
NV40
, "NVidia 0x0210"}, \

870 {0x10DE, 0x0211, 
NV40
, "NVidia GeForce 6800"}, \

871 {0x10DE, 0x0212, 
NV40
, "NVidia GeForce 6800 LE"}, \

872 {0x10DE, 0x0215, 
NV40
, "NVidia GeForce 6800 GT"}, \

873 {0x10DE, 0x0220, 
NV40
, "NVidia 0x0220"}, \

874 {0x10DE, 0x0221, 
NV40
, "NVidia GeForce 6200"}, \

875 {0x10DE, 0x0222, 
NV40
, "NVidia 0x0222"}, \

876 {0x10DE, 0x0228, 
NV40
, "NVidia 0x0228"}, \

877 {0x10DE, 0x0250, 
NV20
, "NVidia GeForce4 Ti 4600"}, \

878 {0x10DE, 0x0251, 
NV20
, "NVidia GeForce4 Ti 4400"}, \

879 {0x10DE, 0x0252, 
NV20
, "NVidia 0x0252"}, \

880 {0x10DE, 0x0253, 
NV20
, "NVidia GeForce4 Ti 4200"}, \

881 {0x10DE, 0x0258, 
NV20
, "NVidia Quadro4 900 XGL"}, \

882 {0x10DE, 0x0259, 
NV20
, "NVidia Quadro4 750 XGL"}, \

883 {0x10DE, 0x025B, 
NV20
, "NVidia Quadro4 700 XGL"}, \

884 {0x10DE, 0x0280, 
NV20
, "NVidia GeForce4 Ti 4800"}, \

885 {0x10DE, 0x0281, 
NV20
, "NVidia GeForce4 Ti 4200 with AGP8X"}, \

886 {0x10DE, 0x0282, 
NV20
, "NVidia GeForce4 Ti 4800 SE"}, \

887 {0x10DE, 0x0286, 
NV20
, "NVidia GeForce4 4200 Go"}, \

888 {0x10DE, 0x0288, 
NV20
, "NVidia Quadro4 980 XGL"}, \

889 {0x10DE, 0x0289, 
NV20
, "NVidia Quadro4 780 XGL"}, \

890 {0x10DE, 0x028C, 
NV20
, "NVidia Quadro4 700 GoGL"}, \

891 {0x10DE, 0x0301, 
NV30
, "NVidia GeForce FX 5800 Ultra"}, \

892 {0x10DE, 0x0302, 
NV30
, "NVidia GeForce FX 5800"}, \

893 {0x10DE, 0x0308, 
NV30
, "NVidia Quadro FX 2000"}, \

894 {0x10DE, 0x0309, 
NV30
, "NVidia Quadro FX 1000"}, \

895 {0x10DE, 0x0311, 
NV30
, "NVidia GeForce FX 5600 Ultra"}, \

896 {0x10DE, 0x0312, 
NV30
, "NVidia GeForce FX 5600"}, \

897 {0x10DE, 0x0313, 
NV30
, "NVidia 0x0313"}, \

898 {0x10DE, 0x0314, 
NV30
, "NVidia GeForce FX 5600SE"}, \

899 {0x10DE, 0x0316, 
NV30
, "NVidia 0x0316"}, \

900 {0x10DE, 0x0317, 
NV30
, "NVidia 0x0317"}, \

901 {0x10DE, 0x031A, 
NV30
, "NVidia GeForce FX Go5600"}, \

902 {0x10DE, 0x031B, 
NV30
, "NVidia GeForce FX Go5650"}, \

903 {0x10DE, 0x031C, 
NV30
, "NVidia Quadro FX Go700"}, \

904 {0x10DE, 0x031D, 
NV30
, "NVidia 0x031D"}, \

905 {0x10DE, 0x031E, 
NV30
, "NVidia 0x031E"}, \

906 {0x10DE, 0x031F, 
NV30
, "NVidia 0x031F"}, \

907 {0x10DE, 0x0320, 
NV30
, "NVidia GeForce FX 5200"}, \

908 {0x10DE, 0x0321, 
NV30
, "NVidia GeForce FX 5200 Ultra"}, \

909 {0x10DE, 0x0322, 
NV30
, "NVidia GeForce FX 5200"}, \

910 {0x10DE, 0x0323, 
NV30
, "NVidia GeForce FX 5200SE"}, \

911 {0x10DE, 0x0324, 
NV30
, "NVidia GeForce FX Go5200"}, \

912 {0x10DE, 0x0325, 
NV30
, "NVidia GeForce FX Go5250"}, \

913 {0x10DE, 0x0326, 
NV30
, "NVidia GeForce FX 5500"}, \

914 {0x10DE, 0x0327, 
NV30
, "NVidia GeForce FX 5100"}, \

915 {0x10DE, 0x0328, 
NV30
, "NVidia GeForce FX Go5200 32M/64M"}, \

916 {0x10DE, 0x0329, 
NV30
, "NVidia GeForce FX 5200 (Mac)"}, \

917 {0x10DE, 0x032A, 
NV30
, "NVidia Quadro NVS 280 PCI"}, \

918 {0x10DE, 0x032B, 
NV30
, "NVidia Quadro FX 500/600 PCI"}, \

919 {0x10DE, 0x032C, 
NV30
, "NVidia GeForce FX Go53xx Series"}, \

920 {0x10DE, 0x032D, 
NV30
, "NVidia GeForce FX Go5100"}, \

921 {0x10DE, 0x032F, 
NV30
, "NVidia 0x032F"}, \

922 {0x10DE, 0x0330, 
NV30
, "NVidia GeForce FX 5900 Ultra"}, \

923 {0x10DE, 0x0331, 
NV30
, "NVidia GeForce FX 5900"}, \

924 {0x10DE, 0x0332, 
NV30
, "NVidia GeForce FX 5900XT"}, \

925 {0x10DE, 0x0333, 
NV30
, "NVidia GeForce FX 5950 Ultra"}, \

926 {0x10DE, 0x0334, 
NV30
, "NVidia GeForce FX 5900ZT"}, \

927 {0x10DE, 0x0338, 
NV30
, "NVidia Quadro FX 3000"}, \

928 {0x10DE, 0x033F, 
NV30
, "NVidia Quadro FX 700"}, \

929 {0x10DE, 0x0341, 
NV30
, "NVidia GeForce FX 5700 Ultra"}, \

930 {0x10DE, 0x0342, 
NV30
, "NVidia GeForce FX 5700"}, \

931 {0x10DE, 0x0343, 
NV30
, "NVidia GeForce FX 5700LE"}, \

932 {0x10DE, 0x0344, 
NV30
, "NVidia GeForce FX 5700VE"}, \

933 {0x10DE, 0x0345, 
NV30
, "NVidia 0x0345"}, \

934 {0x10DE, 0x0347, 
NV30
, "NVidia GeForce FX Go5700"}, \

935 {0x10DE, 0x0348, 
NV30
, "NVidia GeForce FX Go5700"}, \

936 {0x10DE, 0x0349, 
NV30
, "NVidia 0x0349"}, \

937 {0x10DE, 0x034B, 
NV30
, "NVidia 0x034B"}, \

938 {0x10DE, 0x034C, 
NV30
, "NVidia Quadro FX Go1000"}, \

939 {0x10DE, 0x034E, 
NV30
, "NVidia Quadro FX 1100"}, \

940 {0x10DE, 0x034F, 
NV30
, "NVidia 0x034F"}, \

941 {0, 0, 0, 
NULL
}

	)

943 
	#r128_PCI_IDS
 \

981 {0, 0, 0, 
NULL
}

	)

983 
	#ßvage_PCI_IDS
 \

984 {0x5333, 0x8A20, 
S3_SAVAGE3D
, "Savage 3D"}, \

985 {0x5333, 0x8A21, 
S3_SAVAGE3D
, "Savage 3D/MV"}, \

986 {0x5333, 0x8A22, 
S3_SAVAGE4
, "Savage4"}, \

987 {0x5333, 0x8A23, 
S3_SAVAGE4
, "Savage4"}, \

988 {0x5333, 0x8A25, 
S3_PROSAVAGE
, "ProSavage PM133"}, \

989 {0x5333, 0x8A26, 
S3_PROSAVAGE
, "ProSavage KM133"}, \

990 {0x5333, 0x8C10, 
S3_SAVAGE_MX
, "Savage/MX-MV"}, \

991 {0x5333, 0x8C11, 
S3_SAVAGE_MX
, "Savage/MX"}, \

992 {0x5333, 0x8C12, 
S3_SAVAGE_MX
, "Savage/IX-MV"}, \

993 {0x5333, 0x8C13, 
S3_SAVAGE_MX
, "Savage/IX"}, \

994 {0x5333, 0x8C22, 
S3_SUPERSAVAGE
, "SuperSavage MX/128"}, \

995 {0x5333, 0x8C24, 
S3_SUPERSAVAGE
, "SuperSavage MX/64"}, \

996 {0x5333, 0x8C26, 
S3_SUPERSAVAGE
, "SuperSavage MX/64C"}, \

997 {0x5333, 0x8C2A, 
S3_SUPERSAVAGE
, "SuperSavage IX/128 SDR"}, \

998 {0x5333, 0x8C2B, 
S3_SUPERSAVAGE
, "SuperSavage IX/128 DDR"}, \

999 {0x5333, 0x8C2C, 
S3_SUPERSAVAGE
, "SuperSavage IX/64 SDR"}, \

1000 {0x5333, 0x8C2D, 
S3_SUPERSAVAGE
, "SuperSavage IX/64 DDR"}, \

1001 {0x5333, 0x8C2E, 
S3_SUPERSAVAGE
, "SuperSavage IX/C SDR"}, \

1002 {0x5333, 0x8C2F, 
S3_SUPERSAVAGE
, "SuperSavage IX/C DDR"}, \

1003 {0x5333, 0x8D01, 
S3_TWISTER
, "ProSavage Twister PN133"}, \

1004 {0x5333, 0x8D02, 
S3_TWISTER
, "ProSavage Twister KN133"}, \

1005 {0x5333, 0x8D03, 
S3_PROSAVAGEDDR
, "ProSavage DDR"}, \

1006 {0x5333, 0x8D04, 
S3_PROSAVAGEDDR
, "ProSavage DDR-K"}, \

1007 {0, 0, 0, 
NULL
}

	)

1009 
	#sis_PCI_IDS
 \

1010 {0x18CA, 0x0040, 
SIS_CHIP_315
, "Volari V3XT/V5/V8"}, \

1011 {0x18CA, 0x0042, 
SIS_CHIP_315
, "Volari Unknown"}, \

1015 {0x1039, 0x6330, 
SIS_CHIP_315
, "SiS 661"}, \

1017 {0, 0, 0, 
NULL
}

	)

1019 
	#tdfx_PCI_IDS
 \

1026 {0, 0, 0, 
NULL
}

	)

1028 
	#vüdrv_PCI_IDS
 \

1031 {0x1106, 0x3118, 
VIA_PRO_GROUP_A
, "VIA CN400 / PM8X0"}, \

1033 {0x1106, 0x3157, 
VIA_PRO_GROUP_A
, "VIA CX700"}, \

1034 {0x1106, 0x3230, 
VIA_DX9_0
, "VIA K8M890"}, \

1037 {0x1106, 0x3371, 
VIA_DX9_0
, "VIA P4M900 / VN896"}, \

1039 {0, 0, 0, 
NULL
}

	)

1041 
	#xgi_PCI_IDS
 \

1044 {0, 0, 0, 
NULL
}

	)

	@src/common/linuxkpi/include/drm/drm_plane.h

23 #i‚de‡
__DRM_PLANE_H__


24 
	#__DRM_PLANE_H__


	)

26 
	~<löux/li°.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<drm/drm_mode_obje˘.h
>

30 
	gdrm_¸tc
;

31 
	gdrm_¥öãr
;

32 
	gdrm_mode£t_acquúe_˘x
;

59 
	sdrm_∂™e_°©e
 {

60 
drm_∂™e
 *
	m∂™e
;

68 
drm_¸tc
 *
	m¸tc
;

76 
drm_‰amebuf„r
 *
	mfb
;

84 
dma_„n˚
 *
	m„n˚
;

93 
öt32_t
 
	m¸tc_x
;

100 
öt32_t
 
	m¸tc_y
;

102 
uöt32_t
 
	m¸tc_w
, 
	m¸tc_h
;

105 
uöt32_t
 
	m§c_x
, 
	m§c_y
;

106 
uöt32_t
 
	m§c_h
, 
	m§c_w
;

109 
	mrŸ©i⁄
;

112 
	mzpos
;

113 
	mn‹mÆized_zpos
;

116 
drm_ª˘
 
	m§c
, 
	md°
;

124 
boﬁ
 
	mvisibÀ
;

132 
drm_¸tc_commô
 *
	mcommô
;

134 
drm_©omic_°©e
 *
	m°©e
;

137 
ölöe
 
drm_ª˘


138 
	$drm_∂™e_°©e_§c
(c⁄° 
drm_∂™e_°©e
 *
°©e
)

140 
drm_ª˘
 
§c
 = {

141 .
x1
 = 
°©e
->
§c_x
,

142 .
y1
 = 
°©e
->
§c_y
,

143 .
x2
 = 
°©e
->
§c_x
 + sèã->
§c_w
,

144 .
y2
 = 
°©e
->
§c_y
 + sèã->
§c_h
,

146  
§c
;

147 
	}
}

149 
ölöe
 
drm_ª˘


150 
	$drm_∂™e_°©e_de°
(c⁄° 
drm_∂™e_°©e
 *
°©e
)

152 
drm_ª˘
 
de°
 = {

153 .
x1
 = 
°©e
->
¸tc_x
,

154 .
y1
 = 
°©e
->
¸tc_y
,

155 .
x2
 = 
°©e
->
¸tc_x
 + sèã->
¸tc_w
,

156 .
y2
 = 
°©e
->
¸tc_y
 + sèã->
¸tc_h
,

158  
de°
;

159 
	}
}

164 
	sdrm_∂™e_funcs
 {

191 (*
	mupd©e_∂™e
)(
drm_∂™e
 *
	m∂™e
,

192 
drm_¸tc
 *
	m¸tc
, 
drm_‰amebuf„r
 *
	mfb
,

193 
	m¸tc_x
, 
	m¸tc_y
,

194 
	m¸tc_w
, 
	m¸tc_h
,

195 
uöt32_t
 
	m§c_x
, uöt32_à
	m§c_y
,

196 
uöt32_t
 
	m§c_w
, uöt32_à
	m§c_h
,

197 
drm_mode£t_acquúe_˘x
 *
	m˘x
);

214 (*
	mdißbÀ_∂™e
)(
drm_∂™e
 *
	m∂™e
,

215 
drm_mode£t_acquúe_˘x
 *
	m˘x
);

224 (*
	mde°roy
)(
drm_∂™e
 *
	m∂™e
);

236 (*
	mª£t
)(
drm_∂™e
 *
	m∂™e
);

252 (*
	m£t_¥›îty
)(
drm_∂™e
 *
	m∂™e
,

253 
drm_¥›îty
 *
	m¥›îty
, 
uöt64_t
 
	mvÆ
);

284 
	mdrm_∂™e_°©e
 *(*
	m©omic_du∂iˇã_°©e
)(
drm_∂™e
 *
	m∂™e
);

292 (*
	m©omic_de°roy_°©e
)(
drm_∂™e
 *
	m∂™e
,

293 
drm_∂™e_°©e
 *
	m°©e
);

337 (*
	m©omic_£t_¥›îty
)(
drm_∂™e
 *
	m∂™e
,

338 
drm_∂™e_°©e
 *
	m°©e
,

339 
drm_¥›îty
 *
	m¥›îty
,

340 
uöt64_t
 
	mvÆ
);

360 (*
	m©omic_gë_¥›îty
)(
drm_∂™e
 *
	m∂™e
,

361 c⁄° 
drm_∂™e_°©e
 *
	m°©e
,

362 
drm_¥›îty
 *
	m¥›îty
,

363 
uöt64_t
 *
	mvÆ
);

377 (*
	mœã_ªgi°î
)(
drm_∂™e
 *
	m∂™e
);

388 (*
	móæy_uƒegi°î
)(
drm_∂™e
 *
	m∂™e
);

399 (*
	m©omic_¥öt_°©e
)(
drm_¥öãr
 *
	mp
,

400 c⁄° 
drm_∂™e_°©e
 *
	m°©e
);

415 
boﬁ
 (*
f‹m©_mod_suµ‹ãd
)(
drm_∂™e
 *
	m∂™e
, 
uöt32_t
 
	mf‹m©
,

416 
uöt64_t
 
	mmodifõr
);

437 
	edrm_∂™e_ty≥
 {

444 
	mDRM_PLANE_TYPE_OVERLAY
,

454 
	mDRM_PLANE_TYPE_PRIMARY
,

463 
	mDRM_PLANE_TYPE_CURSOR
,

488 
	sdrm_∂™e
 {

489 
drm_devi˚
 *
	mdev
;

490 
li°_hód
 
	mhód
;

492 *
	m«me
;

503 
drm_mode£t_lock
 
	mmuãx
;

505 
drm_mode_obje˘
 
	mba£
;

507 
uöt32_t
 
	mpossibÀ_¸tcs
;

508 
uöt32_t
 *
	mf‹m©_ty≥s
;

509 
	mf‹m©_cou¡
;

510 
boﬁ
 
	mf‹m©_deÁu…
;

512 
uöt64_t
 *
	mmodifõrs
;

513 
	mmodifõr_cou¡
;

519 
drm_¸tc
 *
	m¸tc
;

526 
drm_‰amebuf„r
 *
	mfb
;

528 
drm_‰amebuf„r
 *
	mﬁd_fb
;

530 c⁄° 
drm_∂™e_funcs
 *
	mfuncs
;

532 
drm_obje˘_¥›îtõs
 
	m¥›îtõs
;

534 
drm_∂™e_ty≥
 
	mty≥
;

540 
	mödex
;

542 c⁄° 
drm_∂™e_hñ≥r_funcs
 *
	mhñ≥r_¥iv©e
;

557 
drm_∂™e_°©e
 *
	m°©e
;

559 
drm_¥›îty
 *
	mzpos_¥›îty
;

560 
drm_¥›îty
 *
	mrŸ©i⁄_¥›îty
;

563 
	#obj_to_∂™e
(
x
Ë
	`c⁄èöî_of
(x, 
drm_∂™e
, 
ba£
)

	)

565 
	$__¥ötf
(9, 10)

566 
	`drm_univîßl_∂™e_öô
(
drm_devi˚
 *
dev
,

567 
drm_∂™e
 *
∂™e
,

568 
uöt32_t
 
possibÀ_¸tcs
,

569 c⁄° 
drm_∂™e_funcs
 *
funcs
,

570 c⁄° 
uöt32_t
 *
f‹m©s
,

571 
f‹m©_cou¡
,

572 c⁄° 
uöt64_t
 *
f‹m©_modifõrs
,

573 
drm_∂™e_ty≥
 
ty≥
,

574 c⁄° *
«me
, ...);

575 
	`drm_∂™e_öô
(
drm_devi˚
 *
dev
,

576 
drm_∂™e
 *
∂™e
,

577 
uöt32_t
 
possibÀ_¸tcs
,

578 c⁄° 
drm_∂™e_funcs
 *
funcs
,

579 c⁄° 
uöt32_t
 *
f‹m©s
, 
f‹m©_cou¡
,

580 
boﬁ
 
is_¥im¨y
);

581 
	`drm_∂™e_˛ónup
(
drm_∂™e
 *
∂™e
);

590 
ölöe
 
	$drm_∂™e_ödex
(
drm_∂™e
 *
∂™e
)

592  
∂™e
->
ödex
;

593 
	}
}

594 
drm_∂™e
 * 
drm_∂™e_‰om_ödex
(
drm_devi˚
 *
dev
, 
idx
);

595 
drm_∂™e_f‹˚_dißbÀ
(
drm_∂™e
 *
∂™e
);

597 
drm_mode_∂™e_£t_obj_¥›
(
drm_∂™e
 *
∂™e
,

598 
drm_¥›îty
 *
¥›îty
,

599 
uöt64_t
 
vÆue
);

610 
ölöe
 
drm_∂™e
 *
	$drm_∂™e_föd
(
drm_devi˚
 *
dev
,

611 
drm_fûe
 *
fûe_¥iv
,

612 
uöt32_t
 
id
)

614 
drm_mode_obje˘
 *
mo
;

615 
mo
 = 
	`drm_mode_obje˘_föd
(
dev
, 
fûe_¥iv
, 
id
, 
DRM_MODE_OBJECT_PLANE
);

616  
mo
 ? 
	`obj_to_∂™e
(moË: 
NULL
;

617 
	}
}

627 
	#drm_f‹_óch_∂™e_mask
(
∂™e
, 
dev
, 
∂™e_mask
) \

628 
	`li°_f‹_óch_íåy
((
∂™e
), &(
dev
)->
mode_c⁄fig
.
∂™e_li°
, 
hód
) \

629 
	`f‹_óch_if
 ((
∂™e_mask
Ë& (1 << 
	`drm_∂™e_ödex
(
∂™e
)))

	)

640 
	#drm_f‹_óch_Àgacy_∂™e
(
∂™e
, 
dev
) \

641 
	`li°_f‹_óch_íåy
(
∂™e
, &(
dev
)->
mode_c⁄fig
.
∂™e_li°
, 
hód
) \

642 
	`f‹_óch_if
 (
∂™e
->
ty≥
 =
DRM_PLANE_TYPE_OVERLAY
)

	)

651 
	#drm_f‹_óch_∂™e
(
∂™e
, 
dev
) \

652 
	`li°_f‹_óch_íåy
(
∂™e
, &(
dev
)->
mode_c⁄fig
.
∂™e_li°
, 
hód
)

	)

	@src/common/linuxkpi/include/drm/drm_plane_helper.h

24 #i‚de‡
DRM_PLANE_HELPER_H


25 
	#DRM_PLANE_HELPER_H


	)

27 
	~<drm/drm_ª˘.h
>

28 
	~<drm/drm_¸tc.h
>

29 
	~<drm/drm_mode£t_hñ≥r_vèbÀs.h
>

30 
	~<drm/drm_mode£t_hñ≥r.h
>

39 
	#DRM_PLANE_HELPER_NO_SCALING
 (1<<16)

	)

41 
drm_∂™e_hñ≥r_check_upd©e
(
drm_∂™e
 *
∂™e
,

42 
drm_¸tc
 *
¸tc
,

43 
drm_‰amebuf„r
 *
fb
,

44 
drm_ª˘
 *
§c
,

45 
drm_ª˘
 *
de°
,

46 c⁄° 
drm_ª˘
 *
˛ù
,

47 
rŸ©i⁄
,

48 
mö_sˇÀ
,

49 
max_sˇÀ
,

50 
boﬁ
 
ˇn_posôi⁄
,

51 
boﬁ
 
ˇn_upd©e_dißbÀd
,

52 
boﬁ
 *
visibÀ
);

53 
drm_¥im¨y_hñ≥r_upd©e
(
drm_∂™e
 *
∂™e
,

54 
drm_¸tc
 *
¸tc
,

55 
drm_‰amebuf„r
 *
fb
,

56 
¸tc_x
, 
¸tc_y
,

57 
¸tc_w
, 
¸tc_h
,

58 
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

59 
uöt32_t
 
§c_w
, uöt32_à
§c_h
,

60 
drm_mode£t_acquúe_˘x
 *
˘x
);

61 
drm_¥im¨y_hñ≥r_dißbÀ
(
drm_∂™e
 *
∂™e
,

62 
drm_mode£t_acquúe_˘x
 *
˘x
);

63 
drm_¥im¨y_hñ≥r_de°roy
(
drm_∂™e
 *
∂™e
);

64 c⁄° 
drm_∂™e_funcs
 
drm_¥im¨y_hñ≥r_funcs
;

66 
drm_∂™e_hñ≥r_upd©e
(
drm_∂™e
 *
∂™e
, 
drm_¸tc
 *
¸tc
,

67 
drm_‰amebuf„r
 *
fb
,

68 
¸tc_x
, 
¸tc_y
,

69 
¸tc_w
, 
¸tc_h
,

70 
uöt32_t
 
§c_x
, uöt32_à
§c_y
,

71 
uöt32_t
 
§c_w
, uöt32_à
§c_h
);

72 
drm_∂™e_hñ≥r_dißbÀ
(
drm_∂™e
 *
∂™e
);

75 
drm_∂™e_hñ≥r_commô
(
drm_∂™e
 *
∂™e
,

76 
drm_∂™e_°©e
 *
∂™e_°©e
,

77 
drm_‰amebuf„r
 *
ﬁd_fb
);

	@src/common/linuxkpi/include/drm/drm_prime.h

32 #i‚de‡
__DRM_PRIME_H__


33 
	#__DRM_PRIME_H__


	)

35 
	~<löux/muãx.h
>

36 
	~<löux/rbåì.h
>

37 
	~<löux/sˇâîli°.h
>

46 
	sdrm_¥ime_fûe_¥iv©e
 {

48 
muãx
 
	mlock
;

49 
rb_roŸ
 
	mdmabufs
;

50 
rb_roŸ
 
	mh™dÀs
;

53 
	gdevi˚
;

55 
	gdma_buf_exp‹t_öfo
;

56 
	gdma_buf
;

58 
	gdrm_devi˚
;

59 
	gdrm_gem_obje˘
;

60 
	gdrm_fûe
;

62 
	gdevi˚
;

64 
dma_buf
 *
drm_gem_¥ime_exp‹t
(
drm_devi˚
 *
dev
,

65 
drm_gem_obje˘
 *
obj
,

66 
Êags
);

67 
drm_gem_¥ime_h™dÀ_to_fd
(
drm_devi˚
 *
dev
,

68 
drm_fûe
 *
fûe_¥iv
, 
uöt32_t
 
h™dÀ
, uöt32_à
Êags
,

69 *
¥ime_fd
);

70 
drm_gem_obje˘
 *
drm_gem_¥ime_imp‹t
(
drm_devi˚
 *
dev
,

71 
dma_buf
 *dma_buf);

73 
drm_gem_obje˘
 *
drm_gem_¥ime_imp‹t_dev
(
drm_devi˚
 *
dev
,

74 
dma_buf
 *dma_buf,

75 
devi˚
 *
©èch_dev
);

77 
drm_gem_¥ime_fd_to_h™dÀ
(
drm_devi˚
 *
dev
,

78 
drm_fûe
 *
fûe_¥iv
, 
¥ime_fd
, 
uöt32_t
 *
h™dÀ
);

79 
dma_buf
 *
drm_gem_dmabuf_exp‹t
(
drm_devi˚
 *
dev
,

80 
dma_buf_exp‹t_öfo
 *
exp_öfo
);

81 
drm_gem_dmabuf_ªÀa£
(
dma_buf
 *dma_buf);

83 
drm_¥ime_sg_to_∑ge_addr_¨øys
(
sg_èbÀ
 *
sgt
, 
∑ge
 **
∑ges
,

84 
dma_addr_t
 *
addrs
, 
max_∑ges
);

85 
sg_èbÀ
 *
drm_¥ime_∑ges_to_sg
(
∑ge
 **
∑ges
, 
ƒ_∑ges
);

86 
drm_¥ime_gem_de°roy
(
drm_gem_obje˘
 *
obj
, 
sg_èbÀ
 *
sg
);

	@src/common/linuxkpi/include/drm/drm_print.h

26 #i‚de‡
DRM_PRINT_H_


27 
	#DRM_PRINT_H_


	)

29 
	~<löux/compûî.h
>

30 
	~<löux/¥ötk.h
>

31 
	~<löux/£q_fûe.h
>

32 
	~<löux/devi˚.h
>

69 
	sdrm_¥öãr
 {

71 (*
	m¥öt‚
)(
drm_¥öãr
 *
	mp
, 
va_f‹m©
 *
	mvaf
);

72 *
	m¨g
;

73 c⁄° *
	m¥efix
;

76 
__drm_¥öt‚_£q_fûe
(
drm_¥öãr
 *
p
, 
va_f‹m©
 *
vaf
);

77 
__drm_¥öt‚_öfo
(
drm_¥öãr
 *
p
, 
va_f‹m©
 *
vaf
);

78 
__drm_¥öt‚_debug
(
drm_¥öãr
 *
p
, 
va_f‹m©
 *
vaf
);

80 
	$__¥ötf
(2, 3)

81 
	`drm_¥ötf
(
drm_¥öãr
 *
p
, c⁄° *
f
, ...);

83 
	$__¥ötf
(2, 0)

90 
ölöe
 

91 
	$drm_v¥ötf
(
drm_¥öãr
 *
p
, c⁄° *
fmt
, 
va_li°
 *
va
)

93 
va_f‹m©
 
vaf
 = { .
fmt
 = fmt, .
va
 = va };

95 
p
->
	`¥öt‚
’, &
vaf
);

96 
	}
}

104 
	#drm_¥ötf_ödít
(
¥öãr
, 
ödít
, 
fmt
, ...) \

105 
	`drm_¥ötf
((
¥öãr
), "%.*s" 
fmt
, (
ödít
), "\t\t\t\t\tX", ##
__VA_ARGS__
)

	)

114 
ölöe
 
drm_¥öãr
 
	$drm_£q_fûe_¥öãr
(
£q_fûe
 *
f
)

116 
drm_¥öãr
 
p
 = {

117 .
¥öt‚
 = 
__drm_¥öt‚_£q_fûe
,

118 .
¨g
 = 
f
,

120  
p
;

121 
	}
}

130 
ölöe
 
drm_¥öãr
 
	$drm_öfo_¥öãr
(
devi˚
 *
dev
)

132 
drm_¥öãr
 
p
 = {

133 .
¥öt‚
 = 
__drm_¥öt‚_öfo
,

134 .
¨g
 = 
dev
,

136  
p
;

137 
	}
}

146 
ölöe
 
drm_¥öãr
 
	$drm_debug_¥öãr
(c⁄° *
¥efix
)

148 
drm_¥öãr
 
p
 = {

149 .
¥öt‚
 = 
__drm_¥öt‚_debug
,

150 .
¥efix
 =Örefix

152  
p
;

153 
	}
}

189 
	#DRM_UT_NONE
 0x00

	)

190 
	#DRM_UT_CORE
 0x01

	)

191 
	#DRM_UT_DRIVER
 0x02

	)

192 
	#DRM_UT_KMS
 0x04

	)

193 
	#DRM_UT_PRIME
 0x08

	)

194 
	#DRM_UT_ATOMIC
 0x10

	)

195 
	#DRM_UT_VBL
 0x20

	)

196 
	#DRM_UT_STATE
 0x40

	)

197 
	#DRM_UT_LEASE
 0x80

	)

199 
	$__¥ötf
(6, 7)

200 
	`drm_dev_¥ötk
(c⁄° 
devi˚
 *
dev
, c⁄° *
Àvñ
,

201 
ˇãg‹y
, c⁄° *
fun˘i⁄_«me
,

202 c⁄° *
¥efix
, c⁄° *
f‹m©
, ...);

203 #i‚de‡
__löux__


204 
	$__¥ötf
(4, 5)

205 
	`drm_¥ötk
(c⁄° *
Àvñ
, 
ˇãg‹y
,

206 c⁄° *
fun˘i⁄_«me
, c⁄° *
f‹m©
, ...);

208 
	$__¥ötf
(3, 4)

209 
	`drm_¥ötk
(c⁄° *
Àvñ
, 
ˇãg‹y
,

210 c⁄° *
f‹m©
, ...);

214 
	#_DRM_PRINTK
(
⁄˚
, 
Àvñ
, 
fmt
, ...) \

216 
¥ötk
##
	`⁄˚
(
KERN_
##
Àvñ
 "[" 
DRM_NAME
 "] " 
fmt
, \

217 ##
__VA_ARGS__
); \

218 
	}
} 0)

	)

220 
	#DRM_INFO
(
fmt
, ...) \

221 
	`_DRM_PRINTK
(, 
INFO
, 
fmt
, ##
__VA_ARGS__
)

	)

222 
	#DRM_NOTE
(
fmt
, ...) \

223 
	`_DRM_PRINTK
(, 
NOTICE
, 
fmt
, ##
__VA_ARGS__
)

	)

224 
	#DRM_WARN
(
fmt
, ...) \

225 
	`_DRM_PRINTK
(, 
WARNING
, 
fmt
, ##
__VA_ARGS__
)

	)

227 
	#DRM_INFO_ONCE
(
fmt
, ...) \

228 
	`_DRM_PRINTK
(
_⁄˚
, 
INFO
, 
fmt
, ##
__VA_ARGS__
)

	)

229 
	#DRM_NOTE_ONCE
(
fmt
, ...) \

230 
	`_DRM_PRINTK
(
_⁄˚
, 
NOTICE
, 
fmt
, ##
__VA_ARGS__
)

	)

231 
	#DRM_WARN_ONCE
(
fmt
, ...) \

232 
	`_DRM_PRINTK
(
_⁄˚
, 
WARNING
, 
fmt
, ##
__VA_ARGS__
)

	)

240 
	#DRM_DEV_ERROR
(
dev
, 
fmt
, ...) \

241 
	`drm_dev_¥ötk
(
dev
, 
KERN_ERR
, 
DRM_UT_NONE
, 
__func__
, " *ERROR*",\

242 
fmt
, ##
__VA_ARGS__
)

	)

243 #ifde‡
__löux__


244 
	#DRM_ERROR
(
fmt
, ...) \

245 
	`drm_¥ötk
(
KERN_ERR
, 
DRM_UT_NONE
, 
fmt
, ##
__VA_ARGS__
)

	)

247 
	#DRM_ERROR
(
fmt
, ...) \

248 
	`drm_¥ötk
(
KERN_ERR
, 
DRM_UT_NONE
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

256 
	#DRM_DEV_ERROR_RATELIMITED
(
dev
, 
fmt
, ...) \

258 
	`DEFINE_RATELIMIT_STATE
(
_rs
, \

259 
DEFAULT_RATELIMIT_INTERVAL
, \

260 
DEFAULT_RATELIMIT_BURST
); \

262 i‡(
	`__øãlimô
(&
_rs
)) \

263 
	`DRM_DEV_ERROR
(
dev
, 
fmt
, ##
__VA_ARGS__
); \

264 })

	)

265 
	#DRM_ERROR_RATELIMITED
(
fmt
, ...) \

266 
	`DRM_DEV_ERROR_RATELIMITED
(
NULL
, 
fmt
, ##
__VA_ARGS__
)

	)

268 
	#DRM_DEV_INFO
(
dev
, 
fmt
, ...) \

269 
	`drm_dev_¥ötk
(
dev
, 
KERN_INFO
, 
DRM_UT_NONE
, 
__func__
, "", 
fmt
, \

270 ##
__VA_ARGS__
)

	)

272 
	#DRM_DEV_INFO_ONCE
(
dev
, 
fmt
, ...) \

274 
boﬁ
 
__¥öt_⁄˚
 
__ªad_mo°ly
; \

275 i‡(!
__¥öt_⁄˚
) { \

276 
__¥öt_⁄˚
 = 
åue
; \

277 
	`DRM_DEV_INFO
(
dev
, 
fmt
, ##
__VA_ARGS__
); \

279 })

	)

287 
	#DRM_DEV_DEBUG
(
dev
, 
fmt
, 
¨gs
...) \

288 
	`drm_dev_¥ötk
(
dev
, 
KERN_DEBUG
, 
DRM_UT_CORE
, 
__func__
, "", 
fmt
, \

289 ##
¨gs
)

	)

290 
	#DRM_DEBUG
(
fmt
, ...) \

291 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_CORE
, 
fmt
, ##
__VA_ARGS__
)

	)

293 
	#DRM_DEV_DEBUG_DRIVER
(
dev
, 
fmt
, 
¨gs
...) \

294 
	`drm_dev_¥ötk
(
dev
, 
KERN_DEBUG
, 
DRM_UT_DRIVER
, 
__func__
, "", \

295 
fmt
, ##
¨gs
)

	)

296 
	#DRM_DEBUG_DRIVER
(
fmt
, ...) \

297 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_DRIVER
, 
fmt
, ##
__VA_ARGS__
)

	)

299 
	#DRM_DEV_DEBUG_KMS
(
dev
, 
fmt
, 
¨gs
...) \

300 
	`drm_dev_¥ötk
(
dev
, 
KERN_DEBUG
, 
DRM_UT_KMS
, 
__func__
, "", 
fmt
, \

301 ##
¨gs
)

	)

302 
	#DRM_DEBUG_KMS
(
fmt
, ...) \

303 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_KMS
, 
fmt
, ##
__VA_ARGS__
)

	)

305 
	#DRM_DEV_DEBUG_PRIME
(
dev
, 
fmt
, 
¨gs
...) \

306 
	`drm_dev_¥ötk
(
dev
, 
KERN_DEBUG
, 
DRM_UT_PRIME
, 
__func__
, "", \

307 
fmt
, ##
¨gs
)

	)

308 
	#DRM_DEBUG_PRIME
(
fmt
, ...) \

309 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_PRIME
, 
fmt
, ##
__VA_ARGS__
)

	)

311 
	#DRM_DEV_DEBUG_ATOMIC
(
dev
, 
fmt
, 
¨gs
...) \

312 
	`drm_dev_¥ötk
(
dev
, 
KERN_DEBUG
, 
DRM_UT_ATOMIC
, 
__func__
, "", \

313 
fmt
, ##
¨gs
)

	)

314 
	#DRM_DEBUG_ATOMIC
(
fmt
, ...) \

315 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_ATOMIC
, 
fmt
, ##
__VA_ARGS__
)

	)

317 
	#DRM_DEV_DEBUG_VBL
(
dev
, 
fmt
, 
¨gs
...) \

318 
	`drm_dev_¥ötk
(
dev
, 
KERN_DEBUG
, 
DRM_UT_VBL
, 
__func__
, "", 
fmt
, \

319 ##
¨gs
)

	)

320 
	#DRM_DEBUG_VBL
(
fmt
, ...) \

321 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_VBL
, 
fmt
, ##
__VA_ARGS__
)

	)

323 
	#DRM_DEBUG_LEASE
(
fmt
, ...) \

324 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_LEASE
, 
fmt
, ##
__VA_ARGS__
)

	)

326 
	#_DRM_DEV_DEFINE_DEBUG_RATELIMITED
(
dev
, 
Àvñ
, 
fmt
, 
¨gs
...) \

328 
	`DEFINE_RATELIMIT_STATE
(
_rs
, \

329 
DEFAULT_RATELIMIT_INTERVAL
, \

330 
DEFAULT_RATELIMIT_BURST
); \

331 i‡(
	`__øãlimô
(&
_rs
)) \

332 
	`drm_dev_¥ötk
(
dev
, 
KERN_DEBUG
, 
DRM_UT_
 ## 
Àvñ
, \

333 
__func__
, "", 
fmt
, ##
¨gs
); \

334 })

	)

336 #i‚de‡
__löux__


337 #unde‡
DRM_DEBUG


338 
	#DRM_DEBUG
(
fmt
, ...) \

339 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_CORE
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

341 #unde‡
DRM_DEBUG_DRIVER


342 
	#DRM_DEBUG_DRIVER
(
fmt
, ...) \

343 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_DRIVER
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

345 #unde‡
DRM_DEBUG_KMS


346 
	#DRM_DEBUG_KMS
(
fmt
, ...) \

347 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_KMS
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

349 #unde‡
DRM_DEBUG_PRIME


350 
	#DRM_DEBUG_PRIME
(
fmt
, ...) \

351 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_PRIME
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

353 #unde‡
DRM_DEBUG_ATOMIC


354 
	#DRM_DEBUG_ATOMIC
(
fmt
, ...) \

355 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_ATOMIC
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

357 #unde‡
DRM_DEBUG_VBL


358 
	#DRM_DEBUG_VBL
(
fmt
, ...) \

359 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_VBL
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

361 #unde‡
DRM_DEBUG_LEASE


362 
	#DRM_DEBUG_LEASE
(
fmt
, ...) \

363 
	`drm_¥ötk
(
KERN_DEBUG
, 
DRM_UT_LEASE
, 
__func__
, 
fmt
, ##
__VA_ARGS__
)

	)

372 
	#DRM_DEV_DEBUG_RATELIMITED
(
dev
, 
fmt
, 
¨gs
...) \

373 
	`DEV__DRM_DEFINE_DEBUG_RATELIMITED
(
dev
, 
CORE
, 
fmt
, ##
¨gs
)

	)

374 
	#DRM_DEBUG_RATELIMITED
(
fmt
, 
¨gs
...) \

375 
	`DRM_DEV_DEBUG_RATELIMITED
(
NULL
, 
fmt
, ##
¨gs
)

	)

376 
	#DRM_DEV_DEBUG_DRIVER_RATELIMITED
(
dev
, 
fmt
, 
¨gs
...) \

377 
	`_DRM_DEV_DEFINE_DEBUG_RATELIMITED
(
dev
, 
DRIVER
, 
fmt
, ##
¨gs
)

	)

378 
	#DRM_DEBUG_DRIVER_RATELIMITED
(
fmt
, 
¨gs
...) \

379 
	`DRM_DEV_DEBUG_DRIVER_RATELIMITED
(
NULL
, 
fmt
, ##
¨gs
)

	)

380 
	#DRM_DEV_DEBUG_KMS_RATELIMITED
(
dev
, 
fmt
, 
¨gs
...) \

381 
	`_DRM_DEV_DEFINE_DEBUG_RATELIMITED
(
dev
, 
KMS
, 
fmt
, ##
¨gs
)

	)

382 
	#DRM_DEBUG_KMS_RATELIMITED
(
fmt
, 
¨gs
...) \

383 
	`DRM_DEV_DEBUG_KMS_RATELIMITED
(
NULL
, 
fmt
, ##
¨gs
)

	)

384 
	#DRM_DEV_DEBUG_PRIME_RATELIMITED
(
dev
, 
fmt
, 
¨gs
...) \

385 
	`_DRM_DEV_DEFINE_DEBUG_RATELIMITED
(
dev
, 
PRIME
, 
fmt
, ##
¨gs
)

	)

386 
	#DRM_DEBUG_PRIME_RATELIMITED
(
fmt
, 
¨gs
...) \

387 
	`DRM_DEV_DEBUG_PRIME_RATELIMITED
(
NULL
, 
fmt
, ##
¨gs
)

	)

	@src/common/linuxkpi/include/drm/drm_property.h

23 #i‚de‡
__DRM_PROPERTY_H__


24 
	#__DRM_PROPERTY_H__


	)

26 
	~<löux/li°.h
>

27 
	~<löux/˘y≥.h
>

28 
	~<drm/drm_mode_obje˘.h
>

39 
	sdrm_¥›îty_íum
 {

40 
uöt64_t
 
	mvÆue
;

41 
li°_hód
 
	mhód
;

42 
	m«me
[
DRM_PROP_NAME_LEN
];

71 
	sdrm_¥›îty
 {

75 
li°_hód
 
	mhód
;

80 
drm_mode_obje˘
 
	mba£
;

156 
uöt32_t
 
	mÊags
;

161 
	m«me
[
DRM_PROP_NAME_LEN
];

166 
uöt32_t
 
	mnum_vÆues
;

174 
uöt64_t
 *
	mvÆues
;

179 
drm_devi˚
 *
	mdev
;

187 
li°_hód
 
	míum_li°
;

206 
	sdrm_¥›îty_blob
 {

207 
drm_mode_obje˘
 
	mba£
;

208 
drm_devi˚
 *
	mdev
;

209 
li°_hód
 
	mhód_globÆ
;

210 
li°_hód
 
	mhód_fûe
;

211 
size_t
 
	mÀngth
;

212 
	md©a
[];

215 
	sdrm_¥›_íum_li°
 {

216 
	mty≥
;

217 c⁄° *
	m«me
;

220 
	#obj_to_¥›îty
(
x
Ë
	`c⁄èöî_of
(x, 
drm_¥›îty
, 
ba£
)

	)

221 
	#obj_to_blob
(
x
Ë
	`c⁄èöî_of
(x, 
drm_¥›îty_blob
, 
ba£
)

	)

231 
ölöe
 
boﬁ
 
	$drm_¥›îty_ty≥_is
(
drm_¥›îty
 *
¥›îty
,

232 
uöt32_t
 
ty≥
)

235 i‡(
¥›îty
->
Êags
 & 
DRM_MODE_PROP_EXTENDED_TYPE
)

236  (
¥›îty
->
Êags
 & 
DRM_MODE_PROP_EXTENDED_TYPE
Ë=
ty≥
;

237  
¥›îty
->
Êags
 & 
ty≥
;

238 
	}
}

240 
drm_¥›îty
 *
drm_¥›îty_¸óã
(
drm_devi˚
 *
dev
, 
Êags
,

241 c⁄° *
«me
, 
num_vÆues
);

242 
drm_¥›îty
 *
drm_¥›îty_¸óã_íum
(
drm_devi˚
 *
dev
, 
Êags
,

243 c⁄° *
«me
,

244 c⁄° 
drm_¥›_íum_li°
 *
¥›s
,

245 
num_vÆues
);

246 
drm_¥›îty
 *
drm_¥›îty_¸óã_bômask
(
drm_devi˚
 *
dev
,

247 
Êags
, c⁄° *
«me
,

248 c⁄° 
drm_¥›_íum_li°
 *
¥›s
,

249 
num_¥›s
,

250 
uöt64_t
 
suµ‹ãd_bôs
);

251 
drm_¥›îty
 *
drm_¥›îty_¸óã_ønge
(
drm_devi˚
 *
dev
, 
Êags
,

252 c⁄° *
«me
,

253 
uöt64_t
 
mö
, uöt64_à
max
);

254 
drm_¥›îty
 *
drm_¥›îty_¸óã_sig√d_ønge
(
drm_devi˚
 *
dev
,

255 
Êags
, c⁄° *
«me
,

256 
öt64_t
 
mö
, i¡64_à
max
);

257 
drm_¥›îty
 *
drm_¥›îty_¸óã_obje˘
(
drm_devi˚
 *
dev
,

258 
Êags
, c⁄° *
«me
, 
uöt32_t
 
ty≥
);

259 
drm_¥›îty
 *
drm_¥›îty_¸óã_boﬁ
(
drm_devi˚
 *
dev
, 
Êags
,

260 c⁄° *
«me
);

261 
drm_¥›îty_add_íum
(
drm_¥›îty
 *
¥›îty
, 
ödex
,

262 
uöt64_t
 
vÆue
, c⁄° *
«me
);

263 
drm_¥›îty_de°roy
(
drm_devi˚
 *
dev
, 
drm_¥›îty
 *
¥›îty
);

265 
drm_¥›îty_blob
 *
drm_¥›îty_¸óã_blob
(
drm_devi˚
 *
dev
,

266 
size_t
 
Àngth
,

267 c⁄° *
d©a
);

268 
drm_¥›îty_blob
 *
drm_¥›îty_lookup_blob
(
drm_devi˚
 *
dev
,

269 
uöt32_t
 
id
);

270 
drm_¥›îty_ª∂a˚_globÆ_blob
(
drm_devi˚
 *
dev
,

271 
drm_¥›îty_blob
 **
ª∂a˚
,

272 
size_t
 
Àngth
,

273 c⁄° *
d©a
,

274 
drm_mode_obje˘
 *
obj_hﬁds_id
,

275 
drm_¥›îty
 *
¥›_hﬁds_id
);

276 
boﬁ
 
drm_¥›îty_ª∂a˚_blob
(
drm_¥›îty_blob
 **
blob
,

277 
drm_¥›îty_blob
 *
√w_blob
);

278 
drm_¥›îty_blob
 *
drm_¥›îty_blob_gë
(drm_¥›îty_blob *
blob
);

279 
drm_¥›îty_blob_put
(
drm_¥›îty_blob
 *
blob
);

288 
ölöe
 
drm_¥›îty_blob
 *

289 
	$drm_¥›îty_ª„ªn˚_blob
(
drm_¥›îty_blob
 *
blob
)

291  
	`drm_¥›îty_blob_gë
(
blob
);

292 
	}
}

301 
ölöe
 

302 
	$drm_¥›îty_uƒe„ªn˚_blob
(
drm_¥›îty_blob
 *
blob
)

304 
	`drm_¥›îty_blob_put
(
blob
);

305 
	}
}

315 
ölöe
 
drm_¥›îty
 *
	$drm_¥›îty_föd
(
drm_devi˚
 *
dev
,

316 
drm_fûe
 *
fûe_¥iv
,

317 
uöt32_t
 
id
)

319 
drm_mode_obje˘
 *
mo
;

320 
mo
 = 
	`drm_mode_obje˘_föd
(
dev
, 
fûe_¥iv
, 
id
, 
DRM_MODE_OBJECT_PROPERTY
);

321  
mo
 ? 
	`obj_to_¥›îty
(moË: 
NULL
;

322 
	}
}

	@src/common/linuxkpi/include/drm/drm_rect.h

24 #i‚de‡
DRM_RECT_H


25 
	#DRM_RECT_H


	)

41 
	sdrm_ª˘
 {

42 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

48 
	#DRM_RECT_FMT
 "%dx%d%+d%+d"

	)

53 
	#DRM_RECT_ARG
(
r
Ë
	`drm_ª˘_width
‘), 
	`drm_ª˘_height
‘), (r)->
x1
, (r)->
y1


	)

58 
	#DRM_RECT_FP_FMT
 "%d.%06ux%d.%06u%+d.%06u%+d.%06u"

	)

66 
	#DRM_RECT_FP_ARG
(
r
) \

67 
	`drm_ª˘_width
(
r
) >> 16, ((drm_rect_width(r) & 0xffff) * 15625) >> 10, \

68 
	`drm_ª˘_height
(
r
) >> 16, ((drm_rect_height(r) & 0xffff) * 15625) >> 10, \

69 (
r
)->
x1
 >> 16, (((r)->x1 & 0xffff) * 15625) >> 10, \

70 (
r
)->
y1
 >> 16, ((‘)->y1 & 0xffffË* 15625Ë>> 10

	)

84 
ölöe
 
	$drm_ª˘_adju°_size
(
drm_ª˘
 *
r
, 
dw
, 
dh
)

86 
r
->
x1
 -
dw
 >> 1;

87 
r
->
y1
 -
dh
 >> 1;

88 
r
->
x2
 +(
dw
 + 1) >> 1;

89 
r
->
y2
 +(
dh
 + 1) >> 1;

90 
	}
}

101 
ölöe
 
	$drm_ª˘_å™¶©e
(
drm_ª˘
 *
r
, 
dx
, 
dy
)

103 
r
->
x1
 +
dx
;

104 
r
->
y1
 +
dy
;

105 
r
->
x2
 +
dx
;

106 
r
->
y2
 +
dy
;

107 
	}
}

117 
ölöe
 
	$drm_ª˘_downsˇÀ
(
drm_ª˘
 *
r
, 
h‹z
, 
vît
)

119 
r
->
x1
 /
h‹z
;

120 
r
->
y1
 /
vît
;

121 
r
->
x2
 /
h‹z
;

122 
r
->
y2
 /
vît
;

123 
	}
}

132 
ölöe
 
	$drm_ª˘_width
(c⁄° 
drm_ª˘
 *
r
)

134  
r
->
x2
 -Ñ->
x1
;

135 
	}
}

144 
ölöe
 
	$drm_ª˘_height
(c⁄° 
drm_ª˘
 *
r
)

146  
r
->
y2
 -Ñ->
y1
;

147 
	}
}

156 
ölöe
 
boﬁ
 
	$drm_ª˘_visibÀ
(c⁄° 
drm_ª˘
 *
r
)

158  
	`drm_ª˘_width
(
r
Ë> 0 && 
	`drm_ª˘_height
(r) > 0;

159 
	}
}

169 
ölöe
 
boﬁ
 
	$drm_ª˘_equÆs
(c⁄° 
drm_ª˘
 *
r1
,

170 c⁄° 
drm_ª˘
 *
r2
)

172  
r1
->
x1
 =
r2
->x1 &&Ñ1->
x2
 ==Ñ2->x2 &&

173 
r1
->
y1
 =
r2
->y1 &&Ñ1->
y2
 ==Ñ2->y2;

174 
	}
}

176 
boﬁ
 
drm_ª˘_öãr£˘
(
drm_ª˘
 *
r
, c⁄° drm_ª˘ *
˛ù
);

177 
boﬁ
 
drm_ª˘_˛ù_sˇÀd
(
drm_ª˘
 *
§c
, drm_ª˘ *
d°
,

178 c⁄° 
drm_ª˘
 *
˛ù
,

179 
hsˇÀ
, 
vsˇÀ
);

180 
drm_ª˘_ˇlc_hsˇÀ
(c⁄° 
drm_ª˘
 *
§c
,

181 c⁄° 
drm_ª˘
 *
d°
,

182 
mö_hsˇÀ
, 
max_hsˇÀ
);

183 
drm_ª˘_ˇlc_vsˇÀ
(c⁄° 
drm_ª˘
 *
§c
,

184 c⁄° 
drm_ª˘
 *
d°
,

185 
mö_vsˇÀ
, 
max_vsˇÀ
);

186 
drm_ª˘_ˇlc_hsˇÀ_ªœxed
(
drm_ª˘
 *
§c
,

187 
drm_ª˘
 *
d°
,

188 
mö_hsˇÀ
, 
max_hsˇÀ
);

189 
drm_ª˘_ˇlc_vsˇÀ_ªœxed
(
drm_ª˘
 *
§c
,

190 
drm_ª˘
 *
d°
,

191 
mö_vsˇÀ
, 
max_vsˇÀ
);

192 
drm_ª˘_debug_¥öt
(c⁄° *
¥efix
,

193 c⁄° 
drm_ª˘
 *
r
, 
boﬁ
 
fixed_poöt
);

194 
drm_ª˘_rŸ©e
(
drm_ª˘
 *
r
,

195 
width
, 
height
,

196 
rŸ©i⁄
);

197 
drm_ª˘_rŸ©e_öv
(
drm_ª˘
 *
r
,

198 
width
, 
height
,

199 
rŸ©i⁄
);

	@src/common/linuxkpi/include/drm/drm_scdc_helper.h

24 #i‚de‡
DRM_SCDC_HELPER_H


25 
	#DRM_SCDC_HELPER_H


	)

27 
	~<löux/i2c.h
>

28 
	~<löux/ty≥s.h
>

30 
	#SCDC_SINK_VERSION
 0x01

	)

32 
	#SCDC_SOURCE_VERSION
 0x02

	)

34 
	#SCDC_UPDATE_0
 0x10

	)

35 
	#SCDC_READ_REQUEST_TEST
 (1 << 2)

	)

36 
	#SCDC_CED_UPDATE
 (1 << 1)

	)

37 
	#SCDC_STATUS_UPDATE
 (1 << 0)

	)

39 
	#SCDC_UPDATE_1
 0x11

	)

41 
	#SCDC_TMDS_CONFIG
 0x20

	)

42 
	#SCDC_TMDS_BIT_CLOCK_RATIO_BY_40
 (1 << 1)

	)

43 
	#SCDC_TMDS_BIT_CLOCK_RATIO_BY_10
 (0 << 1)

	)

44 
	#SCDC_SCRAMBLING_ENABLE
 (1 << 0)

	)

46 
	#SCDC_SCRAMBLER_STATUS
 0x21

	)

47 
	#SCDC_SCRAMBLING_STATUS
 (1 << 0)

	)

49 
	#SCDC_CONFIG_0
 0x30

	)

50 
	#SCDC_READ_REQUEST_ENABLE
 (1 << 0)

	)

52 
	#SCDC_STATUS_FLAGS_0
 0x40

	)

53 
	#SCDC_CH2_LOCK
 (1 < 3)

	)

54 
	#SCDC_CH1_LOCK
 (1 < 2)

	)

55 
	#SCDC_CH0_LOCK
 (1 < 1)

	)

56 
	#SCDC_CH_LOCK_MASK
 (
SCDC_CH2_LOCK
 | 
SCDC_CH1_LOCK
 | 
SCDC_CH0_LOCK
)

	)

57 
	#SCDC_CLOCK_DETECT
 (1 << 0)

	)

59 
	#SCDC_STATUS_FLAGS_1
 0x41

	)

61 
	#SCDC_ERR_DET_0_L
 0x50

	)

62 
	#SCDC_ERR_DET_0_H
 0x51

	)

63 
	#SCDC_ERR_DET_1_L
 0x52

	)

64 
	#SCDC_ERR_DET_1_H
 0x53

	)

65 
	#SCDC_ERR_DET_2_L
 0x54

	)

66 
	#SCDC_ERR_DET_2_H
 0x55

	)

67 
	#SCDC_CHANNEL_VALID
 (1 << 7)

	)

69 
	#SCDC_ERR_DET_CHECKSUM
 0x56

	)

71 
	#SCDC_TEST_CONFIG_0
 0xc0

	)

72 
	#SCDC_TEST_READ_REQUEST
 (1 << 7)

	)

73 
	#SCDC_TEST_READ_REQUEST_DELAY
(
x
Ë((xË& 0x7f)

	)

75 
	#SCDC_MANUFACTURER_IEEE_OUI
 0xd0

	)

76 
	#SCDC_MANUFACTURER_IEEE_OUI_SIZE
 3

	)

78 
	#SCDC_DEVICE_ID
 0xd3

	)

79 
	#SCDC_DEVICE_ID_SIZE
 8

	)

81 
	#SCDC_DEVICE_HARDWARE_REVISION
 0xdb

	)

82 
	#SCDC_GET_DEVICE_HARDWARE_REVISION_MAJOR
(
x
Ë(((xË>> 4Ë& 0xf)

	)

83 
	#SCDC_GET_DEVICE_HARDWARE_REVISION_MINOR
(
x
Ë(((xË>> 0Ë& 0xf)

	)

85 
	#SCDC_DEVICE_SOFTWARE_MAJOR_REVISION
 0xdc

	)

86 
	#SCDC_DEVICE_SOFTWARE_MINOR_REVISION
 0xdd

	)

88 
	#SCDC_MANUFACTURER_SPECIFIC
 0xde

	)

89 
	#SCDC_MANUFACTURER_SPECIFIC_SIZE
 34

	)

91 
ssize_t
 
drm_scdc_ªad
(
i2c_ad≠ãr
 *
ad≠ãr
, 
u8
 
off£t
, *
buf„r
,

92 
size_t
 
size
);

93 
ssize_t
 
drm_scdc_wrôe
(
i2c_ad≠ãr
 *
ad≠ãr
, 
u8
 
off£t
,

94 c⁄° *
buf„r
, 
size_t
 
size
);

108 
ölöe
 
	$drm_scdc_ªadb
(
i2c_ad≠ãr
 *
ad≠ãr
, 
u8
 
off£t
,

109 
u8
 *
vÆue
)

111  
	`drm_scdc_ªad
(
ad≠ãr
, 
off£t
, 
vÆue
, (*value));

112 
	}
}

126 
ölöe
 
	$drm_scdc_wrôeb
(
i2c_ad≠ãr
 *
ad≠ãr
, 
u8
 
off£t
,

127 
u8
 
vÆue
)

129  
	`drm_scdc_wrôe
(
ad≠ãr
, 
off£t
, &
vÆue
, (value));

130 
	}
}

132 
boﬁ
 
drm_scdc_gë_s¸amblög_°©us
(
i2c_ad≠ãr
 *
ad≠ãr
);

134 
boﬁ
 
drm_scdc_£t_s¸amblög
(
i2c_ad≠ãr
 *
ad≠ãr
, boﬁ 
íabÀ
);

135 
boﬁ
 
drm_scdc_£t_high_tmds_˛ock_øtio
(
i2c_ad≠ãr
 *
ad≠ãr
, boﬁ 
£t
);

	@src/common/linuxkpi/include/drm/drm_simple_kms_helper.h

10 #i‚de‡
__LINUX_DRM_SIMPLE_KMS_HELPER_H


11 
	#__LINUX_DRM_SIMPLE_KMS_HELPER_H


	)

13 
	~<drm/drm_¸tc.h
>

14 
	~<drm/drm_ícodî.h
>

15 
	~<drm/drm_∂™e.h
>

17 
	gdrm_sim∂e_di•œy_pùe
;

23 
	sdrm_sim∂e_di•œy_pùe_funcs
 {

31 (*
	míabÀ
)(
drm_sim∂e_di•œy_pùe
 *
	mpùe
,

32 
drm_¸tc_°©e
 *
	m¸tc_°©e
);

40 (*
	mdißbÀ
)(
drm_sim∂e_di•œy_pùe
 *
	mpùe
);

59 (*
	mcheck
)(
drm_sim∂e_di•œy_pùe
 *
	mpùe
,

60 
drm_∂™e_°©e
 *
	m∂™e_°©e
,

61 
drm_¸tc_°©e
 *
	m¸tc_°©e
);

74 (*
	mupd©e
)(
drm_sim∂e_di•œy_pùe
 *
	mpùe
,

75 
drm_∂™e_°©e
 *
	mﬁd_∂™e_°©e
);

84 (*
	m¥ï¨e_fb
)(
drm_sim∂e_di•œy_pùe
 *
	mpùe
,

85 
drm_∂™e_°©e
 *
	m∂™e_°©e
);

94 (*
	m˛ónup_fb
)(
drm_sim∂e_di•œy_pùe
 *
	mpùe
,

95 
drm_∂™e_°©e
 *
	m∂™e_°©e
);

109 
	sdrm_sim∂e_di•œy_pùe
 {

110 
drm_¸tc
 
	m¸tc
;

111 
drm_∂™e
 
	m∂™e
;

112 
drm_ícodî
 
	mícodî
;

113 
drm_c⁄√˘‹
 *
	mc⁄√˘‹
;

115 c⁄° 
drm_sim∂e_di•œy_pùe_funcs
 *
	mfuncs
;

118 
drm_sim∂e_di•œy_pùe_©èch_bridge
(
drm_sim∂e_di•œy_pùe
 *
pùe
,

119 
drm_bridge
 *
bridge
);

121 
drm_sim∂e_di•œy_pùe_öô
(
drm_devi˚
 *
dev
,

122 
drm_sim∂e_di•œy_pùe
 *
pùe
,

123 c⁄° 
drm_sim∂e_di•œy_pùe_funcs
 *
funcs
,

124 c⁄° 
uöt32_t
 *
f‹m©s
, 
f‹m©_cou¡
,

125 c⁄° 
uöt64_t
 *
f‹m©_modifõrs
,

126 
drm_c⁄√˘‹
 *
c⁄√˘‹
);

	@src/common/linuxkpi/include/drm/drm_syncobj.h

26 #i‚de‡
__DRM_SYNCOBJ_H__


27 
	#__DRM_SYNCOBJ_H__


	)

29 
	~"löux/dma-„n˚.h
"

31 
	gdrm_syncobj_cb
;

38 
	sdrm_syncobj
 {

42 
kªf
 
	mªfcou¡
;

50 
dma_„n˚
 
__rcu
 *
	m„n˚
;

54 
li°_hód
 
	mcb_li°
;

58 
•ölock_t
 
	mlock
;

62 
fûe
 *
	mfûe
;

65 (*
	tdrm_syncobj_func_t
)(
	tdrm_syncobj
 *
	tsyncobj
,

66 
	tdrm_syncobj_cb
 *
	tcb
);

79 
	sdrm_syncobj_cb
 {

80 
li°_hód
 
node
;

81 
drm_syncobj_func_t
 
func
;

84 
	`drm_syncobj_‰ì
(
kªf
 *kref);

93 
ölöe
 

94 
	$drm_syncobj_gë
(
drm_syncobj
 *
obj
)

96 
	`kªf_gë
(&
obj
->
ªfcou¡
);

97 
	}
}

103 
ölöe
 

104 
	$drm_syncobj_put
(
drm_syncobj
 *
obj
)

106 
	`kªf_put
(&
obj
->
ªfcou¡
, 
drm_syncobj_‰ì
);

107 
	}
}

120 
ölöe
 
dma_„n˚
 *

121 
	$drm_syncobj_„n˚_gë
(
drm_syncobj
 *
syncobj
)

123 
dma_„n˚
 *
„n˚
;

125 
	`rcu_ªad_lock
();

126 
„n˚
 = 
	`dma_„n˚_gë_rcu_ß„
(&
syncobj
->fence);

127 
	`rcu_ªad_u∆ock
();

129  
„n˚
;

130 
	}
}

132 
drm_syncobj
 *
drm_syncobj_föd
(
drm_fûe
 *
fûe_¥iv©e
,

133 
u32
 
h™dÀ
);

134 
drm_syncobj_add_ˇŒback
(
drm_syncobj
 *
syncobj
,

135 
drm_syncobj_cb
 *
cb
,

136 
drm_syncobj_func_t
 
func
);

137 
drm_syncobj_ªmove_ˇŒback
(
drm_syncobj
 *
syncobj
,

138 
drm_syncobj_cb
 *
cb
);

139 
drm_syncobj_ª∂a˚_„n˚
(
drm_syncobj
 *
syncobj
,

140 
dma_„n˚
 *
„n˚
);

141 
drm_syncobj_föd_„n˚
(
drm_fûe
 *
fûe_¥iv©e
,

142 
u32
 
h™dÀ
,

143 
dma_„n˚
 **
„n˚
);

144 
drm_syncobj_‰ì
(
kªf
 *kref);

145 
drm_syncobj_¸óã
(
drm_syncobj
 **
out_syncobj
, 
uöt32_t
 
Êags
,

146 
dma_„n˚
 *
„n˚
);

147 
drm_syncobj_gë_h™dÀ
(
drm_fûe
 *
fûe_¥iv©e
,

148 
drm_syncobj
 *
syncobj
, 
u32
 *
h™dÀ
);

149 
drm_syncobj_gë_fd
(
drm_syncobj
 *
syncobj
, *
p_fd
);

	@src/common/linuxkpi/include/drm/drm_sysfs.h

2 #i‚de‡
_DRM_SYSFS_H_


3 
	#_DRM_SYSFS_H_


	)

5 
	gdrm_devi˚
;

6 
	gdevi˚
;

8 
drm_˛ass_devi˚_ªgi°î
(
devi˚
 *
dev
);

9 
drm_˛ass_devi˚_uƒegi°î
(
devi˚
 *
dev
);

11 
drm_sysfs_hŸ∂ug_evít
(
drm_devi˚
 *
dev
);

	@src/common/linuxkpi/include/drm/drm_utils.h

10 #i‚de‡
__DRM_UTILS_H__


11 
	#__DRM_UTILS_H__


	)

13 
drm_gë_∑√l_‹õ¡©i⁄_quúk
(
width
, 
height
);

	@src/common/linuxkpi/include/drm/drm_vblank.h

24 #i‚de‡
_DRM_VBLANK_H_


25 
	#_DRM_VBLANK_H_


	)

27 
	~<löux/£qlock.h
>

28 
	~<löux/idr.h
>

29 
	~<löux/pﬁl.h
>

31 
	~<drm/drm_fûe.h
>

32 
	~<drm/drm_modes.h
>

33 
	~<u≠i/drm/drm.h
>

35 
	gdrm_devi˚
;

36 
	gdrm_¸tc
;

41 
	sdrm_≥ndög_vbœnk_evít
 {

45 
drm_≥ndög_evít
 
	mba£
;

49 
	mpùe
;

53 
u64
 
	m£quí˚
;

58 
drm_evít
 
	mba£
;

59 
drm_evít_vbœnk
 
	mvbl
;

60 
drm_evít_¸tc_£quí˚
 
	m£q
;

61 } 
	mevít
;

74 
	sdrm_vbœnk_¸tc
 {

78 
drm_devi˚
 *
	mdev
;

82 
waô_queue_hód_t
 
	mqueue
;

89 
timî_li°
 
	mdißbÀ_timî
;

94 
£qlock_t
 
	m£qlock
;

99 
u64
 
	mcou¡
;

103 
ktime_t
 
	mtime
;

110 
©omic_t
 
	mªfcou¡
;

114 
u32
 
	mœ°
;

123 
	mömode£t
;

128 
	mpùe
;

134 
	m‰amedur_ns
;

140 
	mlöedur_ns
;

151 
drm_di•œy_mode
 
	mhwmode
;

159 
boﬁ
 
	míabÀd
;

162 
drm_vbœnk_öô
(
drm_devi˚
 *
dev
, 
num_¸tcs
);

163 
u64
 
drm_¸tc_vbœnk_cou¡
(
drm_¸tc
 *
¸tc
);

164 
u64
 
drm_¸tc_vbœnk_cou¡_™d_time
(
drm_¸tc
 *
¸tc
,

165 
ktime_t
 *
vbœnktime
);

166 
drm_¸tc_£nd_vbœnk_evít
(
drm_¸tc
 *
¸tc
,

167 
drm_≥ndög_vbœnk_evít
 *
e
);

168 
drm_¸tc_¨m_vbœnk_evít
(
drm_¸tc
 *
¸tc
,

169 
drm_≥ndög_vbœnk_evít
 *
e
);

170 
drm_vbœnk_£t_evít
(
drm_≥ndög_vbœnk_evít
 *
e
,

171 
u64
 *
£q
,

172 
ktime_t
 *
now
);

173 
boﬁ
 
drm_h™dÀ_vbœnk
(
drm_devi˚
 *
dev
, 
pùe
);

174 
boﬁ
 
drm_¸tc_h™dÀ_vbœnk
(
drm_¸tc
 *
¸tc
);

175 
drm_¸tc_vbœnk_gë
(
drm_¸tc
 *
¸tc
);

176 
drm_¸tc_vbœnk_put
(
drm_¸tc
 *
¸tc
);

177 
drm_waô_⁄e_vbœnk
(
drm_devi˚
 *
dev
, 
pùe
);

178 
drm_¸tc_waô_⁄e_vbœnk
(
drm_¸tc
 *
¸tc
);

179 
drm_¸tc_vbœnk_off
(
drm_¸tc
 *
¸tc
);

180 
drm_¸tc_vbœnk_ª£t
(
drm_¸tc
 *
¸tc
);

181 
drm_¸tc_vbœnk_⁄
(
drm_¸tc
 *
¸tc
);

182 
u64
 
drm_¸tc_accuøã_vbœnk_cou¡
(
drm_¸tc
 *
¸tc
);

184 
boﬁ
 
drm_ˇlc_vb…ime°amp_‰om_sˇnouços
(
drm_devi˚
 *
dev
,

185 
pùe
, *
max_îr‹
,

186 
ktime_t
 *
vbœnk_time
,

187 
boﬁ
 
ö_vbœnk_úq
);

188 
drm_ˇlc_time°ampög_c⁄°™ts
(
drm_¸tc
 *
¸tc
,

189 c⁄° 
drm_di•œy_mode
 *
mode
);

190 
waô_queue_hód_t
 *
drm_¸tc_vbœnk_waôqueue
(
drm_¸tc
 *
¸tc
);

	@src/common/linuxkpi/include/drm/drm_vma_manager.h

1 #i‚de‡
__DRM_VMA_MANAGER_H__


2 
	#__DRM_VMA_MANAGER_H__


	)

26 
	~<drm/drm_mm.h
>

27 
	~<löux/mm.h
>

28 
	~<löux/rbåì.h
>

29 
	~<löux/•ölock.h
>

30 
	~<löux/ty≥s.h
>

32 
	gdrm_fûe
;

34 
	sdrm_vma_off£t_fûe
 {

35 
rb_node
 
	mvm_rb
;

36 
drm_fûe
 *
	mvm_èg
;

37 
	mvm_cou¡
;

40 
	sdrm_vma_off£t_node
 {

41 
rwlock_t
 
	mvm_lock
;

42 
drm_mm_node
 
	mvm_node
;

43 
rb_roŸ
 
	mvm_fûes
;

46 
	sdrm_vma_off£t_m™agî
 {

47 
rwlock_t
 
	mvm_lock
;

48 
drm_mm
 
	mvm_addr_•a˚_mm
;

51 
drm_vma_off£t_m™agî_öô
(
drm_vma_off£t_m™agî
 *
mgr
,

52 
∑ge_off£t
, 
size
);

53 
drm_vma_off£t_m™agî_de°roy
(
drm_vma_off£t_m™agî
 *
mgr
);

55 
drm_vma_off£t_node
 *
drm_vma_off£t_lookup_locked
(
drm_vma_off£t_m™agî
 *
mgr
,

56 
°¨t
,

57 
∑ges
);

58 
drm_vma_off£t_add
(
drm_vma_off£t_m™agî
 *
mgr
,

59 
drm_vma_off£t_node
 *
node
, 
∑ges
);

60 
drm_vma_off£t_ªmove
(
drm_vma_off£t_m™agî
 *
mgr
,

61 
drm_vma_off£t_node
 *
node
);

63 
drm_vma_node_Ælow
(
drm_vma_off£t_node
 *
node
, 
drm_fûe
 *
èg
);

64 
drm_vma_node_ªvoke
(
drm_vma_off£t_node
 *
node
,

65 
drm_fûe
 *
èg
);

66 
boﬁ
 
drm_vma_node_is_Ælowed
(
drm_vma_off£t_node
 *
node
,

67 
drm_fûe
 *
èg
);

81 
ölöe
 
drm_vma_off£t_node
 *

82 
	$drm_vma_off£t_exa˘_lookup_locked
(
drm_vma_off£t_m™agî
 *
mgr
,

83 
°¨t
,

84 
∑ges
)

86 
drm_vma_off£t_node
 *
node
;

88 
node
 = 
	`drm_vma_off£t_lookup_locked
(
mgr
, 
°¨t
, 
∑ges
);

89  (
node
 &&Çode->
vm_node
.
°¨t
 =°¨tË?Çodê: 
NULL
;

90 
	}
}

108 
ölöe
 
	$drm_vma_off£t_lock_lookup
(
drm_vma_off£t_m™agî
 *
mgr
)

110 
	`ªad_lock
(&
mgr
->
vm_lock
);

111 
	}
}

119 
ölöe
 
	$drm_vma_off£t_u∆ock_lookup
(
drm_vma_off£t_m™agî
 *
mgr
)

121 
	`ªad_u∆ock
(&
mgr
->
vm_lock
);

122 
	}
}

134 
ölöe
 
	$drm_vma_node_ª£t
(
drm_vma_off£t_node
 *
node
)

136 
	`mem£t
(
node
, 0, (*node));

137 
node
->
vm_fûes
 = 
RB_ROOT
;

138 
	`rwlock_öô
(&
node
->
vm_lock
);

139 
	}
}

155 
ölöe
 
	$drm_vma_node_°¨t
(c⁄° 
drm_vma_off£t_node
 *
node
)

157  
node
->
vm_node
.
°¨t
;

158 
	}
}

172 
ölöe
 
	$drm_vma_node_size
(
drm_vma_off£t_node
 *
node
)

174  
node
->
vm_node
.
size
;

175 
	}
}

189 
ölöe
 
__u64
 
	$drm_vma_node_off£t_addr
(
drm_vma_off£t_node
 *
node
)

191  ((
__u64
)
node
->
vm_node
.
°¨t
Ë<< 
PAGE_SHIFT
;

192 
	}
}

194 #ifde‡
__löux__


207 
ölöe
 
	$drm_vma_node_unm≠
(
drm_vma_off£t_node
 *
node
,

208 
addªss_•a˚
 *
fûe_m≠pög
)

210 i‡(
	`drm_mm_node_Æloˇãd
(&
node
->
vm_node
))

211 
	`unm≠_m≠pög_ønge
(
fûe_m≠pög
,

212 
	`drm_vma_node_off£t_addr
(
node
),

213 
	`drm_vma_node_size
(
node
Ë<< 
PAGE_SHIFT
, 1);

214 
	}
}

229 
ölöe
 
	$drm_vma_node_vîify_ac˚ss
(
drm_vma_off£t_node
 *
node
,

230 
drm_fûe
 *
èg
)

232  
	`drm_vma_node_is_Ælowed
(
node
, 
èg
Ë? 0 : -
EACCES
;

233 
	}
}

	@src/common/linuxkpi/include/drm/gma_drm.h

22 #i‚de‡
_GMA_DRM_H_


23 
	#_GMA_DRM_H_


	)

	@src/common/linuxkpi/include/drm/gpu_scheduler.h

24 #i‚de‡
_DRM_GPU_SCHEDULER_H_


25 
	#_DRM_GPU_SCHEDULER_H_


	)

27 
	~<drm/•sc_queue.h
>

28 
	~<löux/dma-„n˚.h
>

30 
	gdrm_gpu_scheduÀr
;

31 
	gdrm_sched_rq
;

33 
	edrm_sched_¥i‹ôy
 {

34 
	mDRM_SCHED_PRIORITY_MIN
,

35 
	mDRM_SCHED_PRIORITY_LOW
 = 
DRM_SCHED_PRIORITY_MIN
,

36 
	mDRM_SCHED_PRIORITY_NORMAL
,

37 
	mDRM_SCHED_PRIORITY_HIGH_SW
,

38 
	mDRM_SCHED_PRIORITY_HIGH_HW
,

39 
	mDRM_SCHED_PRIORITY_KERNEL
,

40 
	mDRM_SCHED_PRIORITY_MAX
,

41 
	mDRM_SCHED_PRIORITY_INVALID
 = -1,

42 
	mDRM_SCHED_PRIORITY_UNSET
 = -2

51 
	sdrm_sched_ítôy
 {

52 
li°_hód
 
	mli°
;

53 
drm_sched_rq
 *
	mrq
;

54 
•ölock_t
 
	mrq_lock
;

55 
drm_gpu_scheduÀr
 *
	msched
;

57 
•ölock_t
 
	mqueue_lock
;

58 
•sc_queue
 
	mjob_queue
;

60 
©omic_t
 
	m„n˚_£q
;

61 
uöt64_t
 
	m„n˚_c⁄ãxt
;

63 
dma_„n˚
 *
	mdïídícy
;

64 
dma_„n˚_cb
 
	mcb
;

65 
©omic_t
 *
	mguûty
;

73 
	sdrm_sched_rq
 {

74 
•ölock_t
 
	mlock
;

75 
li°_hód
 
	mítôõs
;

76 
drm_sched_ítôy
 *
	mcuºít_ítôy
;

79 
	sdrm_sched_„n˚
 {

80 
dma_„n˚
 
	mscheduÀd
;

81 
dma_„n˚
 
	mföished
;

82 
dma_„n˚_cb
 
	mcb
;

83 
dma_„n˚
 *
	m∑ª¡
;

84 
drm_gpu_scheduÀr
 *
	msched
;

85 
•ölock_t
 
	mlock
;

86 *
	mow√r
;

89 
drm_sched_„n˚
 *
to_drm_sched_„n˚
(
dma_„n˚
 *
f
);

91 
	sdrm_sched_job
 {

92 
•sc_node
 
	mqueue_node
;

93 
drm_gpu_scheduÀr
 *
	msched
;

94 
drm_sched_„n˚
 *
	ms_„n˚
;

95 
dma_„n˚_cb
 
	mföish_cb
;

96 
w‹k_°ru˘
 
	mföish_w‹k
;

97 
li°_hód
 
	mnode
;

98 
dñayed_w‹k
 
	mw‹k_tdr
;

99 
uöt64_t
 
	mid
;

100 
©omic_t
 
	mk¨ma
;

101 
drm_sched_¥i‹ôy
 
	ms_¥i‹ôy
;

104 
ölöe
 
boﬁ
 
	$drm_sched_övÆid©e_job
(
drm_sched_job
 *
s_job
,

105 
thªshﬁd
)

107  (
s_job
 && 
	`©omic_öc_ªtu∫
(&s_job->
k¨ma
Ë> 
thªshﬁd
);

108 
	}
}

114 
	sdrm_sched_backíd_›s
 {

115 
	mdma_„n˚
 *(*
	mdïídícy
)(
drm_sched_job
 *
	msched_job
,

116 
drm_sched_ítôy
 *
	ms_ítôy
);

117 
	mdma_„n˚
 *(*
	mrun_job
)(
drm_sched_job
 *
	msched_job
);

118 (*
	mtimedout_job
)(
drm_sched_job
 *
	msched_job
);

119 (*
	m‰ì_job
)(
drm_sched_job
 *
	msched_job
);

125 
	sdrm_gpu_scheduÀr
 {

126 c⁄° 
drm_sched_backíd_›s
 *
	m›s
;

127 
uöt32_t
 
	mhw_submissi⁄_limô
;

128 
	mtimeout
;

129 c⁄° *
	m«me
;

130 
drm_sched_rq
 
	msched_rq
[
DRM_SCHED_PRIORITY_MAX
];

131 
waô_queue_hód_t
 
	mwake_up_w‹kî
;

132 
waô_queue_hód_t
 
	mjob_scheduÀd
;

133 
©omic_t
 
	mhw_rq_cou¡
;

134 
©omic64_t
 
	mjob_id_cou¡
;

135 
èsk_°ru˘
 *
	mthªad
;

136 
li°_hód
 
	mrög_múr‹_li°
;

137 
•ölock_t
 
	mjob_li°_lock
;

138 
	mh™g_limô
;

141 
drm_sched_öô
(
drm_gpu_scheduÀr
 *
sched
,

142 c⁄° 
drm_sched_backíd_›s
 *
›s
,

143 
uöt32_t
 
hw_submissi⁄
, 
h™g_limô
, 
timeout
,

144 c⁄° *
«me
);

145 
drm_sched_föi
(
drm_gpu_scheduÀr
 *
sched
);

147 
drm_sched_ítôy_öô
(
drm_gpu_scheduÀr
 *
sched
,

148 
drm_sched_ítôy
 *
ítôy
,

149 
drm_sched_rq
 *
rq
,

150 
uöt32_t
 
jobs
, 
©omic_t
 *
guûty
);

151 
drm_sched_ítôy_föi
(
drm_gpu_scheduÀr
 *
sched
,

152 
drm_sched_ítôy
 *
ítôy
);

153 
drm_sched_ítôy_push_job
(
drm_sched_job
 *
sched_job
,

154 
drm_sched_ítôy
 *
ítôy
);

155 
drm_sched_ítôy_£t_rq
(
drm_sched_ítôy
 *
ítôy
,

156 
drm_sched_rq
 *
rq
);

158 
drm_sched_„n˚
 *
drm_sched_„n˚_¸óã
(

159 
drm_sched_ítôy
 *
s_ítôy
, *
ow√r
);

160 
drm_sched_„n˚_scheduÀd
(
drm_sched_„n˚
 *
„n˚
);

161 
drm_sched_„n˚_föished
(
drm_sched_„n˚
 *
„n˚
);

162 
drm_sched_job_öô
(
drm_sched_job
 *
job
,

163 
drm_gpu_scheduÀr
 *
sched
,

164 
drm_sched_ítôy
 *
ítôy
,

165 *
ow√r
);

166 
drm_sched_hw_job_ª£t
(
drm_gpu_scheduÀr
 *
sched
,

167 
drm_sched_job
 *
job
);

168 
drm_sched_job_ªcovîy
(
drm_gpu_scheduÀr
 *
sched
);

169 
boﬁ
 
drm_sched_dïídícy_›timized
(
dma_„n˚
* 
„n˚
,

170 
drm_sched_ítôy
 *
ítôy
);

171 
drm_sched_job_kickout
(
drm_sched_job
 *
s_job
);

	@src/common/linuxkpi/include/drm/gpu_scheduler_trace.h

24 #i‡!
deföed
(
_GPU_SCHED_TRACE_H
Ë|| deföed(
TRACE_HEADER_MULTI_READ
)

25 
	#_GPU_SCHED_TRACE_H_


	)

27 
	~<drm/drmP.h
>

30 
ölöe
 

31 
	$åa˚_drm_sched_job
(*
sched_job
, *
ítôy
){

32 
	`CTR2
(
KTR_DRM
, "drm_sched_job %p,É¡ôy %p", 
sched_job
, 
ítôy
);

33 
	}
}

35 
ölöe
 

36 
	$åa˚_drm_sched_¥o˚ss_job
(*
s_„n˚
){

37 
	`CTR1
(
KTR_DRM
, "drm_¥o˚ss_sched_job %p", 
s_„n˚
);

38 
	}
}

40 #ifde‡
__löux__


41 #unde‡
TRACE_SYSTEM


42 
	#TRACE_SYSTEM
 
gpu_scheduÀr


	)

43 
	#TRACE_INCLUDE_FILE
 
gpu_scheduÀr_åa˚


	)

45 
TRACE_EVENT
(
drm_sched_job
,

46 
TP_PROTO
(
drm_sched_job
 *
sched_job
, 
drm_sched_ítôy
 *
ítôy
),

47 
TP_ARGS
(
sched_job
, 
ítôy
),

48 
TP_STRUCT__íåy
(

49 
	$__fõld
(
drm_sched_ítôy
 *, 
ítôy
)

50 
	$__fõld
(
dma_„n˚
 *, 
„n˚
)

51 
	$__fõld
(c⁄° *, 
«me
)

52 
	$__fõld
(
uöt64_t
, 
id
)

53 
	$__fõld
(
u32
, 
job_cou¡
)

54 
	`__fõld
(, 
hw_job_cou¡
)

57 
	`TP_Á°_assign
(

58 
__íåy
->
ítôy
 =Éntity;

59 
__íåy
->
id
 = 
sched_job
->id;

60 
__íåy
->
„n˚
 = &
sched_job
->
s_„n˚
->
föished
;

61 
__íåy
->
«me
 = 
sched_job
->
sched
->name;

62 
__íåy
->
job_cou¡
 = 
	`•sc_queue_cou¡
(&
ítôy
->
job_queue
);

63 
__íåy
->
hw_job_cou¡
 = 
	`©omic_ªad
(

64 &
sched_job
->
sched
->
hw_rq_cou¡
);

66 
	`TP_¥ötk
("entity=%p, id=%llu, fence=%p,Ñing=%s, job count:%u, hw job count:%d",

67 
__íåy
->
ítôy
, __íåy->
id
,

68 
__íåy
->
„n˚
, __íåy->
«me
,

69 
__íåy
->
job_cou¡
, __íåy->
hw_job_cou¡
)

72 
	`TRACE_EVENT
(
drm_sched_¥o˚ss_job
,

73 
	`TP_PROTO
(
drm_sched_„n˚
 *
„n˚
),

74 
	`TP_ARGS
(
„n˚
),

75 
	`TP_STRUCT__íåy
(

76 
	`__fõld
(
dma_„n˚
 *, 
„n˚
)

79 
	`TP_Á°_assign
(

80 
__íåy
->
„n˚
 = &„n˚->
föished
;

82 
	`TP_¥ötk
("„n˚=%∞sig«Àd", 
__íåy
->
„n˚
)

	@src/common/linuxkpi/include/drm/i915_component.h

24 #i‚de‡
_I915_COMPONENT_H_


25 
	#_I915_COMPONENT_H_


	)

31 
	#MAX_PORTS
 5

	)

33 
	gdevi˚
;

38 
	si915_audio_comp⁄ít_›s
 {

42 
moduÀ
 *
	mow√r
;

48 (*
	mgë_powî
)(
	mdevi˚
 *);

54 (*
	mput_powî
)(
	mdevi˚
 *);

58 (*
	mcodec_wake_ovîride
)(
	mdevi˚
 *, 
boﬁ
 
	míabÀ
);

62 (*
	mgë_cd˛k_‰eq
)(
	mdevi˚
 *);

69 (*
	msync_audio_øã
)(
	mdevi˚
 *, 
	mp‹t
, 
	mpùe
, 
	møã
);

82 (*
	mgë_ñd
)(
	mdevi˚
 *, 
	mp‹t
, 
	mpùe
, 
boﬁ
 *
	míabÀd
,

83 *
	mbuf
, 
	mmax_byãs
);

89 
	si915_audio_comp⁄ít_audio_›s
 {

93 *
	maudio_±r
;

102 (*
	mpö_ñd_nŸify
)(*
	maudio_±r
, 
	mp‹t
, 
	mpùe
);

108 
	si915_audio_comp⁄ít
 {

112 
devi˚
 *
	mdev
;

116 
	maud_ßm∂e_øã
[
MAX_PORTS
];

120 c⁄° 
i915_audio_comp⁄ít_›s
 *
	m›s
;

124 c⁄° 
i915_audio_comp⁄ít_audio_›s
 *
	maudio_›s
;

	@src/common/linuxkpi/include/drm/i915_drm.h

26 #i‚de‡
_I915_DRM_H_


27 
	#_I915_DRM_H_


	)

29 
	~<drm/i915_pciids.h
>

30 
	~<u≠i/drm/i915_drm.h
>

33 
i915_ªad_mch_vÆ
();

34 
boﬁ
 
i915_gpu_øi£
();

35 
boﬁ
 
i915_gpu_lowî
();

36 
boﬁ
 
i915_gpu_busy
();

37 
boﬁ
 
i915_gpu_turbo_dißbÀ
();

40 
löux_ªsour˚
 
öãl_gøphics_°ﬁí_ªs
;

48 
	#INTEL_GMCH_CTRL
 0x52

	)

49 
	#INTEL_GMCH_VGA_DISABLE
 (1 << 1)

	)

50 
	#SNB_GMCH_CTRL
 0x50

	)

51 
	#SNB_GMCH_GGMS_SHIFT
 8

	)

52 
	#SNB_GMCH_GGMS_MASK
 0x3

	)

53 
	#SNB_GMCH_GMS_SHIFT
 3

	)

54 
	#SNB_GMCH_GMS_MASK
 0x1f

	)

55 
	#BDW_GMCH_GGMS_SHIFT
 6

	)

56 
	#BDW_GMCH_GGMS_MASK
 0x3

	)

57 
	#BDW_GMCH_GMS_SHIFT
 8

	)

58 
	#BDW_GMCH_GMS_MASK
 0xff

	)

60 
	#I830_GMCH_CTRL
 0x52

	)

62 
	#I830_GMCH_GMS_MASK
 0x70

	)

63 
	#I830_GMCH_GMS_LOCAL
 0x10

	)

64 
	#I830_GMCH_GMS_STOLEN_512
 0x20

	)

65 
	#I830_GMCH_GMS_STOLEN_1024
 0x30

	)

66 
	#I830_GMCH_GMS_STOLEN_8192
 0x40

	)

68 
	#I855_GMCH_GMS_MASK
 0xF0

	)

69 
	#I855_GMCH_GMS_STOLEN_0M
 0x0

	)

70 
	#I855_GMCH_GMS_STOLEN_1M
 (0x1 << 4)

	)

71 
	#I855_GMCH_GMS_STOLEN_4M
 (0x2 << 4)

	)

72 
	#I855_GMCH_GMS_STOLEN_8M
 (0x3 << 4)

	)

73 
	#I855_GMCH_GMS_STOLEN_16M
 (0x4 << 4)

	)

74 
	#I855_GMCH_GMS_STOLEN_32M
 (0x5 << 4)

	)

75 
	#I915_GMCH_GMS_STOLEN_48M
 (0x6 << 4)

	)

76 
	#I915_GMCH_GMS_STOLEN_64M
 (0x7 << 4)

	)

77 
	#G33_GMCH_GMS_STOLEN_128M
 (0x8 << 4)

	)

78 
	#G33_GMCH_GMS_STOLEN_256M
 (0x9 << 4)

	)

79 
	#INTEL_GMCH_GMS_STOLEN_96M
 (0x®<< 4)

	)

80 
	#INTEL_GMCH_GMS_STOLEN_160M
 (0xb << 4)

	)

81 
	#INTEL_GMCH_GMS_STOLEN_224M
 (0x¯<< 4)

	)

82 
	#INTEL_GMCH_GMS_STOLEN_352M
 (0xd << 4)

	)

84 
	#I830_DRB3
 0x63

	)

85 
	#I85X_DRB3
 0x43

	)

86 
	#I865_TOUD
 0xc4

	)

88 
	#I830_ESMRAMC
 0x91

	)

89 
	#I845_ESMRAMC
 0x9e

	)

90 
	#I85X_ESMRAMC
 0x61

	)

91 
	#TSEG_ENABLE
 (1 << 0)

	)

92 
	#I830_TSEG_SIZE_512K
 (0 << 1)

	)

93 
	#I830_TSEG_SIZE_1M
 (1 << 1)

	)

94 
	#I845_TSEG_SIZE_MASK
 (3 << 1)

	)

95 
	#I845_TSEG_SIZE_512K
 (2 << 1)

	)

96 
	#I845_TSEG_SIZE_1M
 (3 << 1)

	)

98 
	#INTEL_BSM
 0x5c

	)

99 
	#INTEL_BSM_MASK
 (-(1u << 20))

	)

	@src/common/linuxkpi/include/drm/i915_pciids.h

25 #i‚de‡
_I915_PCIIDS_H


26 
	#_I915_PCIIDS_H


	)

38 
	#INTEL_VGA_DEVICE
(
id
, 
öfo
) { \

39 0x8086, 
id
, \

42 (Ë
öfo
 }

	)

44 
	#INTEL_QUANTA_VGA_DEVICE
(
öfo
) { \

48 (Ë
öfo
 }

	)

50 
	#INTEL_I810_IDS
(
öfo
) \

51 
	`INTEL_VGA_DEVICE
(0x7121, 
öfo
), \

52 
	`INTEL_VGA_DEVICE
(0x7123, 
öfo
), \

53 
	`INTEL_VGA_DEVICE
(0x7125, 
öfo
Ë

	)

55 
	#INTEL_I815_IDS
(
öfo
) \

56 
	`INTEL_VGA_DEVICE
(0x1132, 
öfo
Ë

	)

58 
	#INTEL_I830_IDS
(
öfo
) \

59 
	`INTEL_VGA_DEVICE
(0x3577, 
öfo
)

	)

61 
	#INTEL_I845G_IDS
(
öfo
) \

62 
	`INTEL_VGA_DEVICE
(0x2562, 
öfo
)

	)

64 
	#INTEL_I85X_IDS
(
öfo
) \

65 
	`INTEL_VGA_DEVICE
(0x3582, 
öfo
), \

66 
	`INTEL_VGA_DEVICE
(0x358e, 
öfo
)

	)

68 
	#INTEL_I865G_IDS
(
öfo
) \

69 
	`INTEL_VGA_DEVICE
(0x2572, 
öfo
Ë

	)

71 
	#INTEL_I915G_IDS
(
öfo
) \

72 
	`INTEL_VGA_DEVICE
(0x2582, 
öfo
), \

73 
	`INTEL_VGA_DEVICE
(0x258a, 
öfo
Ë

	)

75 
	#INTEL_I915GM_IDS
(
öfo
) \

76 
	`INTEL_VGA_DEVICE
(0x2592, 
öfo
Ë

	)

78 
	#INTEL_I945G_IDS
(
öfo
) \

79 
	`INTEL_VGA_DEVICE
(0x2772, 
öfo
Ë

	)

81 
	#INTEL_I945GM_IDS
(
öfo
) \

82 
	`INTEL_VGA_DEVICE
(0x27a2, 
öfo
), \

83 
	`INTEL_VGA_DEVICE
(0x27´, 
öfo
Ë

	)

85 
	#INTEL_I965G_IDS
(
öfo
) \

86 
	`INTEL_VGA_DEVICE
(0x2972, 
öfo
), \

87 
	`INTEL_VGA_DEVICE
(0x2982, 
öfo
), \

88 
	`INTEL_VGA_DEVICE
(0x2992, 
öfo
), \

89 
	`INTEL_VGA_DEVICE
(0x29a2, 
öfo
Ë

	)

91 
	#INTEL_G33_IDS
(
öfo
) \

92 
	`INTEL_VGA_DEVICE
(0x29b2, 
öfo
), \

93 
	`INTEL_VGA_DEVICE
(0x29c2, 
öfo
), \

94 
	`INTEL_VGA_DEVICE
(0x29d2, 
öfo
Ë

	)

96 
	#INTEL_I965GM_IDS
(
öfo
) \

97 
	`INTEL_VGA_DEVICE
(0x2a02, 
öfo
), \

98 
	`INTEL_VGA_DEVICE
(0x2a12, 
öfo
Ë

	)

100 
	#INTEL_GM45_IDS
(
öfo
) \

101 
	`INTEL_VGA_DEVICE
(0x2a42, 
öfo
Ë

	)

103 
	#INTEL_G45_IDS
(
öfo
) \

104 
	`INTEL_VGA_DEVICE
(0x2e02, 
öfo
), \

105 
	`INTEL_VGA_DEVICE
(0x2e12, 
öfo
), \

106 
	`INTEL_VGA_DEVICE
(0x2e22, 
öfo
), \

107 
	`INTEL_VGA_DEVICE
(0x2e32, 
öfo
), \

108 
	`INTEL_VGA_DEVICE
(0x2e42, 
öfo
), \

109 
	`INTEL_VGA_DEVICE
(0x2e92, 
öfo
Ë

	)

111 
	#INTEL_PINEVIEW_IDS
(
öfo
) \

112 
	`INTEL_VGA_DEVICE
(0xa001, 
öfo
), \

113 
	`INTEL_VGA_DEVICE
(0xa011, 
öfo
)

	)

115 
	#INTEL_IRONLAKE_D_IDS
(
öfo
) \

116 
	`INTEL_VGA_DEVICE
(0x0042, 
öfo
)

	)

118 
	#INTEL_IRONLAKE_M_IDS
(
öfo
) \

119 
	`INTEL_VGA_DEVICE
(0x0046, 
öfo
)

	)

121 
	#INTEL_SNB_D_GT1_IDS
(
öfo
) \

122 
	`INTEL_VGA_DEVICE
(0x0102, 
öfo
), \

123 
	`INTEL_VGA_DEVICE
(0x010A, 
öfo
)

	)

125 
	#INTEL_SNB_D_GT2_IDS
(
öfo
) \

126 
	`INTEL_VGA_DEVICE
(0x0112, 
öfo
), \

127 
	`INTEL_VGA_DEVICE
(0x0122, 
öfo
)

	)

129 
	#INTEL_SNB_D_IDS
(
öfo
) \

130 
	`INTEL_SNB_D_GT1_IDS
(
öfo
), \

131 
	`INTEL_SNB_D_GT2_IDS
(
öfo
)

	)

133 
	#INTEL_SNB_M_GT1_IDS
(
öfo
) \

134 
	`INTEL_VGA_DEVICE
(0x0106, 
öfo
)

	)

136 
	#INTEL_SNB_M_GT2_IDS
(
öfo
) \

137 
	`INTEL_VGA_DEVICE
(0x0116, 
öfo
), \

138 
	`INTEL_VGA_DEVICE
(0x0126, 
öfo
)

	)

140 
	#INTEL_SNB_M_IDS
(
öfo
) \

141 
	`INTEL_SNB_M_GT1_IDS
(
öfo
), \

142 
	`INTEL_SNB_M_GT2_IDS
(
öfo
)

	)

144 
	#INTEL_IVB_M_GT1_IDS
(
öfo
) \

145 
	`INTEL_VGA_DEVICE
(0x0156, 
öfo
Ë

	)

147 
	#INTEL_IVB_M_GT2_IDS
(
öfo
) \

148 
	`INTEL_VGA_DEVICE
(0x0166, 
öfo
Ë

	)

150 
	#INTEL_IVB_M_IDS
(
öfo
) \

151 
	`INTEL_IVB_M_GT1_IDS
(
öfo
), \

152 
	`INTEL_IVB_M_GT2_IDS
(
öfo
)

	)

154 
	#INTEL_IVB_D_GT1_IDS
(
öfo
) \

155 
	`INTEL_VGA_DEVICE
(0x0152, 
öfo
), \

156 
	`INTEL_VGA_DEVICE
(0x015a, 
öfo
Ë

	)

158 
	#INTEL_IVB_D_GT2_IDS
(
öfo
) \

159 
	`INTEL_VGA_DEVICE
(0x0162, 
öfo
), \

160 
	`INTEL_VGA_DEVICE
(0x016a, 
öfo
Ë

	)

162 
	#INTEL_IVB_D_IDS
(
öfo
) \

163 
	`INTEL_IVB_D_GT1_IDS
(
öfo
), \

164 
	`INTEL_IVB_D_GT2_IDS
(
öfo
)

	)

166 
	#INTEL_IVB_Q_IDS
(
öfo
) \

167 
	`INTEL_QUANTA_VGA_DEVICE
(
öfo
Ë

	)

169 
	#INTEL_HSW_GT1_IDS
(
öfo
) \

170 
	`INTEL_VGA_DEVICE
(0x0402, 
öfo
), \

171 
	`INTEL_VGA_DEVICE
(0x040a, 
öfo
), \

172 
	`INTEL_VGA_DEVICE
(0x040B, 
öfo
), \

173 
	`INTEL_VGA_DEVICE
(0x040E, 
öfo
), \

174 
	`INTEL_VGA_DEVICE
(0x0C02, 
öfo
), \

175 
	`INTEL_VGA_DEVICE
(0x0C0A, 
öfo
), \

176 
	`INTEL_VGA_DEVICE
(0x0C0B, 
öfo
), \

177 
	`INTEL_VGA_DEVICE
(0x0C0E, 
öfo
), \

178 
	`INTEL_VGA_DEVICE
(0x0A02, 
öfo
), \

179 
	`INTEL_VGA_DEVICE
(0x0A0A, 
öfo
), \

180 
	`INTEL_VGA_DEVICE
(0x0A0B, 
öfo
), \

181 
	`INTEL_VGA_DEVICE
(0x0D02, 
öfo
), \

182 
	`INTEL_VGA_DEVICE
(0x0D0A, 
öfo
), \

183 
	`INTEL_VGA_DEVICE
(0x0D0B, 
öfo
), \

184 
	`INTEL_VGA_DEVICE
(0x0D0E, 
öfo
), \

185 
	`INTEL_VGA_DEVICE
(0x0406, 
öfo
), \

186 
	`INTEL_VGA_DEVICE
(0x0C06, 
öfo
), \

187 
	`INTEL_VGA_DEVICE
(0x0A06, 
öfo
), \

188 
	`INTEL_VGA_DEVICE
(0x0A0E, 
öfo
), \

189 
	`INTEL_VGA_DEVICE
(0x0D06, 
öfo
Ë

	)

191 
	#INTEL_HSW_GT2_IDS
(
öfo
) \

192 
	`INTEL_VGA_DEVICE
(0x0412, 
öfo
), \

193 
	`INTEL_VGA_DEVICE
(0x041a, 
öfo
), \

194 
	`INTEL_VGA_DEVICE
(0x041B, 
öfo
), \

195 
	`INTEL_VGA_DEVICE
(0x041E, 
öfo
), \

196 
	`INTEL_VGA_DEVICE
(0x0C12, 
öfo
), \

197 
	`INTEL_VGA_DEVICE
(0x0C1A, 
öfo
), \

198 
	`INTEL_VGA_DEVICE
(0x0C1B, 
öfo
), \

199 
	`INTEL_VGA_DEVICE
(0x0C1E, 
öfo
), \

200 
	`INTEL_VGA_DEVICE
(0x0A12, 
öfo
), \

201 
	`INTEL_VGA_DEVICE
(0x0A1A, 
öfo
), \

202 
	`INTEL_VGA_DEVICE
(0x0A1B, 
öfo
), \

203 
	`INTEL_VGA_DEVICE
(0x0D12, 
öfo
), \

204 
	`INTEL_VGA_DEVICE
(0x0D1A, 
öfo
), \

205 
	`INTEL_VGA_DEVICE
(0x0D1B, 
öfo
), \

206 
	`INTEL_VGA_DEVICE
(0x0D1E, 
öfo
), \

207 
	`INTEL_VGA_DEVICE
(0x0416, 
öfo
), \

208 
	`INTEL_VGA_DEVICE
(0x0426, 
öfo
), \

209 
	`INTEL_VGA_DEVICE
(0x0C16, 
öfo
), \

210 
	`INTEL_VGA_DEVICE
(0x0A16, 
öfo
), \

211 
	`INTEL_VGA_DEVICE
(0x0A1E, 
öfo
), \

212 
	`INTEL_VGA_DEVICE
(0x0D16, 
öfo
Ë

	)

214 
	#INTEL_HSW_GT3_IDS
(
öfo
) \

215 
	`INTEL_VGA_DEVICE
(0x0422, 
öfo
), \

216 
	`INTEL_VGA_DEVICE
(0x042a, 
öfo
), \

217 
	`INTEL_VGA_DEVICE
(0x042B, 
öfo
), \

218 
	`INTEL_VGA_DEVICE
(0x042E, 
öfo
), \

219 
	`INTEL_VGA_DEVICE
(0x0C22, 
öfo
), \

220 
	`INTEL_VGA_DEVICE
(0x0C2A, 
öfo
), \

221 
	`INTEL_VGA_DEVICE
(0x0C2B, 
öfo
), \

222 
	`INTEL_VGA_DEVICE
(0x0C2E, 
öfo
), \

223 
	`INTEL_VGA_DEVICE
(0x0A22, 
öfo
), \

224 
	`INTEL_VGA_DEVICE
(0x0A2A, 
öfo
), \

225 
	`INTEL_VGA_DEVICE
(0x0A2B, 
öfo
), \

226 
	`INTEL_VGA_DEVICE
(0x0D22, 
öfo
), \

227 
	`INTEL_VGA_DEVICE
(0x0D2A, 
öfo
), \

228 
	`INTEL_VGA_DEVICE
(0x0D2B, 
öfo
), \

229 
	`INTEL_VGA_DEVICE
(0x0D2E, 
öfo
), \

230 
	`INTEL_VGA_DEVICE
(0x0C26, 
öfo
), \

231 
	`INTEL_VGA_DEVICE
(0x0A26, 
öfo
), \

232 
	`INTEL_VGA_DEVICE
(0x0A2E, 
öfo
), \

233 
	`INTEL_VGA_DEVICE
(0x0D26, 
öfo
Ë

	)

235 
	#INTEL_HSW_IDS
(
öfo
) \

236 
	`INTEL_HSW_GT1_IDS
(
öfo
), \

237 
	`INTEL_HSW_GT2_IDS
(
öfo
), \

238 
	`INTEL_HSW_GT3_IDS
(
öfo
)

	)

240 
	#INTEL_VLV_IDS
(
öfo
) \

241 
	`INTEL_VGA_DEVICE
(0x0f30, 
öfo
), \

242 
	`INTEL_VGA_DEVICE
(0x0f31, 
öfo
), \

243 
	`INTEL_VGA_DEVICE
(0x0f32, 
öfo
), \

244 
	`INTEL_VGA_DEVICE
(0x0f33, 
öfo
), \

245 
	`INTEL_VGA_DEVICE
(0x0157, 
öfo
), \

246 
	`INTEL_VGA_DEVICE
(0x0155, 
öfo
)

	)

248 
	#INTEL_BDW_GT1_IDS
(
öfo
) \

249 
	`INTEL_VGA_DEVICE
(0x1602, 
öfo
), \

250 
	`INTEL_VGA_DEVICE
(0x1606, 
öfo
), \

251 
	`INTEL_VGA_DEVICE
(0x160B, 
öfo
), \

252 
	`INTEL_VGA_DEVICE
(0x160E, 
öfo
), \

253 
	`INTEL_VGA_DEVICE
(0x160A, 
öfo
), \

254 
	`INTEL_VGA_DEVICE
(0x160D, 
öfo
Ë

	)

256 
	#INTEL_BDW_GT2_IDS
(
öfo
) \

257 
	`INTEL_VGA_DEVICE
(0x1612, 
öfo
), \

258 
	`INTEL_VGA_DEVICE
(0x1616, 
öfo
), \

259 
	`INTEL_VGA_DEVICE
(0x161B, 
öfo
), \

260 
	`INTEL_VGA_DEVICE
(0x161E, 
öfo
), \

261 
	`INTEL_VGA_DEVICE
(0x161A, 
öfo
), \

262 
	`INTEL_VGA_DEVICE
(0x161D, 
öfo
Ë

	)

264 
	#INTEL_BDW_GT3_IDS
(
öfo
) \

265 
	`INTEL_VGA_DEVICE
(0x1622, 
öfo
), \

266 
	`INTEL_VGA_DEVICE
(0x1626, 
öfo
), \

267 
	`INTEL_VGA_DEVICE
(0x162B, 
öfo
), \

268 
	`INTEL_VGA_DEVICE
(0x162E, 
öfo
), \

269 
	`INTEL_VGA_DEVICE
(0x162A, 
öfo
), \

270 
	`INTEL_VGA_DEVICE
(0x162D, 
öfo
Ë

	)

272 
	#INTEL_BDW_RSVD_IDS
(
öfo
) \

273 
	`INTEL_VGA_DEVICE
(0x1632, 
öfo
), \

274 
	`INTEL_VGA_DEVICE
(0x1636, 
öfo
), \

275 
	`INTEL_VGA_DEVICE
(0x163B, 
öfo
), \

276 
	`INTEL_VGA_DEVICE
(0x163E, 
öfo
), \

277 
	`INTEL_VGA_DEVICE
(0x163A, 
öfo
), \

278 
	`INTEL_VGA_DEVICE
(0x163D, 
öfo
Ë

	)

280 
	#INTEL_BDW_IDS
(
öfo
) \

281 
	`INTEL_BDW_GT1_IDS
(
öfo
), \

282 
	`INTEL_BDW_GT2_IDS
(
öfo
), \

283 
	`INTEL_BDW_GT3_IDS
(
öfo
), \

284 
	`INTEL_BDW_RSVD_IDS
(
öfo
)

	)

286 
	#INTEL_CHV_IDS
(
öfo
) \

287 
	`INTEL_VGA_DEVICE
(0x22b0, 
öfo
), \

288 
	`INTEL_VGA_DEVICE
(0x22b1, 
öfo
), \

289 
	`INTEL_VGA_DEVICE
(0x22b2, 
öfo
), \

290 
	`INTEL_VGA_DEVICE
(0x22b3, 
öfo
)

	)

292 
	#INTEL_SKL_GT1_IDS
(
öfo
) \

293 
	`INTEL_VGA_DEVICE
(0x1906, 
öfo
), \

294 
	`INTEL_VGA_DEVICE
(0x190E, 
öfo
), \

295 
	`INTEL_VGA_DEVICE
(0x1902, 
öfo
), \

296 
	`INTEL_VGA_DEVICE
(0x190B, 
öfo
), \

297 
	`INTEL_VGA_DEVICE
(0x190A, 
öfo
Ë

	)

299 
	#INTEL_SKL_GT2_IDS
(
öfo
) \

300 
	`INTEL_VGA_DEVICE
(0x1916, 
öfo
), \

301 
	`INTEL_VGA_DEVICE
(0x1921, 
öfo
), \

302 
	`INTEL_VGA_DEVICE
(0x191E, 
öfo
), \

303 
	`INTEL_VGA_DEVICE
(0x1912, 
öfo
), \

304 
	`INTEL_VGA_DEVICE
(0x191B, 
öfo
), \

305 
	`INTEL_VGA_DEVICE
(0x191A, 
öfo
), \

306 
	`INTEL_VGA_DEVICE
(0x191D, 
öfo
Ë

	)

308 
	#INTEL_SKL_GT3_IDS
(
öfo
) \

309 
	`INTEL_VGA_DEVICE
(0x1923, 
öfo
), \

310 
	`INTEL_VGA_DEVICE
(0x1926, 
öfo
), \

311 
	`INTEL_VGA_DEVICE
(0x1927, 
öfo
), \

312 
	`INTEL_VGA_DEVICE
(0x192B, 
öfo
), \

313 
	`INTEL_VGA_DEVICE
(0x192D, 
öfo
Ë

	)

315 
	#INTEL_SKL_GT4_IDS
(
öfo
) \

316 
	`INTEL_VGA_DEVICE
(0x1932, 
öfo
), \

317 
	`INTEL_VGA_DEVICE
(0x193B, 
öfo
), \

318 
	`INTEL_VGA_DEVICE
(0x193D, 
öfo
), \

319 
	`INTEL_VGA_DEVICE
(0x192A, 
öfo
), \

320 
	`INTEL_VGA_DEVICE
(0x193A, 
öfo
Ë

	)

322 
	#INTEL_SKL_IDS
(
öfo
) \

323 
	`INTEL_SKL_GT1_IDS
(
öfo
), \

324 
	`INTEL_SKL_GT2_IDS
(
öfo
), \

325 
	`INTEL_SKL_GT3_IDS
(
öfo
), \

326 
	`INTEL_SKL_GT4_IDS
(
öfo
)

	)

328 
	#INTEL_BXT_IDS
(
öfo
) \

329 
	`INTEL_VGA_DEVICE
(0x0A84, 
öfo
), \

330 
	`INTEL_VGA_DEVICE
(0x1A84, 
öfo
), \

331 
	`INTEL_VGA_DEVICE
(0x1A85, 
öfo
), \

332 
	`INTEL_VGA_DEVICE
(0x5A84, 
öfo
), \

333 
	`INTEL_VGA_DEVICE
(0x5A85, 
öfo
Ë

	)

335 
	#INTEL_GLK_IDS
(
öfo
) \

336 
	`INTEL_VGA_DEVICE
(0x3184, 
öfo
), \

337 
	`INTEL_VGA_DEVICE
(0x3185, 
öfo
)

	)

339 
	#INTEL_KBL_GT1_IDS
(
öfo
) \

340 
	`INTEL_VGA_DEVICE
(0x5913, 
öfo
), \

341 
	`INTEL_VGA_DEVICE
(0x5915, 
öfo
), \

342 
	`INTEL_VGA_DEVICE
(0x5906, 
öfo
), \

343 
	`INTEL_VGA_DEVICE
(0x590E, 
öfo
), \

344 
	`INTEL_VGA_DEVICE
(0x5902, 
öfo
), \

345 
	`INTEL_VGA_DEVICE
(0x5908, 
öfo
), \

346 
	`INTEL_VGA_DEVICE
(0x590B, 
öfo
), \

347 
	`INTEL_VGA_DEVICE
(0x590A, 
öfo
Ë

	)

349 
	#INTEL_KBL_GT2_IDS
(
öfo
) \

350 
	`INTEL_VGA_DEVICE
(0x5916, 
öfo
), \

351 
	`INTEL_VGA_DEVICE
(0x5917, 
öfo
), \

352 
	`INTEL_VGA_DEVICE
(0x5921, 
öfo
), \

353 
	`INTEL_VGA_DEVICE
(0x591E, 
öfo
), \

354 
	`INTEL_VGA_DEVICE
(0x5912, 
öfo
), \

355 
	`INTEL_VGA_DEVICE
(0x591B, 
öfo
), \

356 
	`INTEL_VGA_DEVICE
(0x591A, 
öfo
), \

357 
	`INTEL_VGA_DEVICE
(0x591D, 
öfo
Ë

	)

359 
	#INTEL_KBL_GT3_IDS
(
öfo
) \

360 
	`INTEL_VGA_DEVICE
(0x5923, 
öfo
), \

361 
	`INTEL_VGA_DEVICE
(0x5926, 
öfo
), \

362 
	`INTEL_VGA_DEVICE
(0x5927, 
öfo
Ë

	)

364 
	#INTEL_KBL_GT4_IDS
(
öfo
) \

365 
	`INTEL_VGA_DEVICE
(0x593B, 
öfo
Ë

	)

367 
	#INTEL_KBL_IDS
(
öfo
) \

368 
	`INTEL_KBL_GT1_IDS
(
öfo
), \

369 
	`INTEL_KBL_GT2_IDS
(
öfo
), \

370 
	`INTEL_KBL_GT3_IDS
(
öfo
), \

371 
	`INTEL_KBL_GT4_IDS
(
öfo
)

	)

374 
	#INTEL_CFL_S_GT1_IDS
(
öfo
) \

375 
	`INTEL_VGA_DEVICE
(0x3E90, 
öfo
), \

376 
	`INTEL_VGA_DEVICE
(0x3E93, 
öfo
), \

377 
	`INTEL_VGA_DEVICE
(0x3E99, 
öfo
Ë

	)

379 
	#INTEL_CFL_S_GT2_IDS
(
öfo
) \

380 
	`INTEL_VGA_DEVICE
(0x3E91, 
öfo
), \

381 
	`INTEL_VGA_DEVICE
(0x3E92, 
öfo
), \

382 
	`INTEL_VGA_DEVICE
(0x3E96, 
öfo
), \

383 
	`INTEL_VGA_DEVICE
(0x3E9A, 
öfo
Ë

	)

386 
	#INTEL_CFL_H_GT2_IDS
(
öfo
) \

387 
	`INTEL_VGA_DEVICE
(0x3E9B, 
öfo
), \

388 
	`INTEL_VGA_DEVICE
(0x3E94, 
öfo
Ë

	)

391 
	#INTEL_CFL_U_GT1_IDS
(
öfo
) \

392 
	`INTEL_VGA_DEVICE
(0x3EA1, 
öfo
), \

393 
	`INTEL_VGA_DEVICE
(0x3EA4, 
öfo
)

	)

396 
	#INTEL_CFL_U_GT2_IDS
(
öfo
) \

397 
	`INTEL_VGA_DEVICE
(0x3EA0, 
öfo
), \

398 
	`INTEL_VGA_DEVICE
(0x3EA3, 
öfo
), \

399 
	`INTEL_VGA_DEVICE
(0x3EA9, 
öfo
)

	)

402 
	#INTEL_CFL_U_GT3_IDS
(
öfo
) \

403 
	`INTEL_VGA_DEVICE
(0x3EA2, 
öfo
), \

404 
	`INTEL_VGA_DEVICE
(0x3EA5, 
öfo
), \

405 
	`INTEL_VGA_DEVICE
(0x3EA6, 
öfo
), \

406 
	`INTEL_VGA_DEVICE
(0x3EA7, 
öfo
), \

407 
	`INTEL_VGA_DEVICE
(0x3EA8, 
öfo
Ë

	)

409 
	#INTEL_CFL_IDS
(
öfo
) \

410 
	`INTEL_CFL_S_GT1_IDS
(
öfo
), \

411 
	`INTEL_CFL_S_GT2_IDS
(
öfo
), \

412 
	`INTEL_CFL_H_GT2_IDS
(
öfo
), \

413 
	`INTEL_CFL_U_GT1_IDS
(
öfo
), \

414 
	`INTEL_CFL_U_GT2_IDS
(
öfo
), \

415 
	`INTEL_CFL_U_GT3_IDS
(
öfo
)

	)

418 
	#INTEL_CNL_U_GT2_IDS
(
öfo
) \

419 
	`INTEL_VGA_DEVICE
(0x5A52, 
öfo
), \

420 
	`INTEL_VGA_DEVICE
(0x5A5A, 
öfo
), \

421 
	`INTEL_VGA_DEVICE
(0x5A42, 
öfo
), \

422 
	`INTEL_VGA_DEVICE
(0x5A4A, 
öfo
)

	)

425 
	#INTEL_CNL_Y_GT2_IDS
(
öfo
) \

426 
	`INTEL_VGA_DEVICE
(0x5A51, 
öfo
), \

427 
	`INTEL_VGA_DEVICE
(0x5A59, 
öfo
), \

428 
	`INTEL_VGA_DEVICE
(0x5A41, 
öfo
), \

429 
	`INTEL_VGA_DEVICE
(0x5A49, 
öfo
), \

430 
	`INTEL_VGA_DEVICE
(0x5A71, 
öfo
), \

431 
	`INTEL_VGA_DEVICE
(0x5A79, 
öfo
)

	)

433 
	#INTEL_CNL_IDS
(
öfo
) \

434 
	`INTEL_CNL_U_GT2_IDS
(
öfo
), \

435 
	`INTEL_CNL_Y_GT2_IDS
(
öfo
)

	)

	@src/common/linuxkpi/include/drm/intel-gtt.h

4 #i‚de‡
_DRM_INTEL_GTT_H


5 
	#_DRM_INTEL_GTT_H


	)

7 
	gagp_bridge_d©a
;

9 #i‚de‡
__löux__


10 
	göãl_gâ
;

11 
öãl_gâ
 *
öãl_gâ_gë
();

13 
öãl_gâ_gë
(
u64
 *
gâ_tŸÆ
,

14 
phys_addr_t
 *
m≠∑bÀ_ba£
,

15 
ªsour˚_size_t
 *
m≠∑bÀ_íd
);

18 
öãl_gmch_¥obe
(
pci_dev
 *
bridge_pdev
, pci_dev *
gpu_pdev
,

19 
agp_bridge_d©a
 *
bridge
);

20 
öãl_gmch_ªmove
();

22 
boﬁ
 
öãl_íabÀ_gâ
();

24 #i‚de‡
__löux__


25 
öãl_gâ_chù£t_Êush
();

27 
öãl_gâ_chù£t_Êush
();

29 
öãl_gâ_ö£π_∑ge
(
dma_addr_t
 
addr
,

30 
pg
,

31 
Êags
);

32 
löux_öãl_gâ_ö£π_sg_íåõs
(
sg_èbÀ
 *
°
,

33 
pg_°¨t
, 
Êags
);

34 
öãl_gâ_˛ór_ønge
(
fú°_íåy
, 
num_íåõs
);

37 
	#AGP_DCACHE_MEMORY
 1

	)

38 
	#AGP_PHYS_MEMORY
 2

	)

41 
	#AGP_USER_CACHED_MEMORY_GFDT
 (1 << 3)

	)

43 #ifde‡
CONFIG_INTEL_IOMMU


44 
öãl_iommu_gfx_m≠≥d
;

	@src/common/linuxkpi/include/drm/intel_lpe_audio.h

24 #i‚de‡
_INTEL_LPE_AUDIO_H_


25 
	#_INTEL_LPE_AUDIO_H_


	)

27 
	~<löux/ty≥s.h
>

30 
	g∂©f‹m_devi˚
;

32 
	#HDMI_MAX_ELD_BYTES
 128

	)

34 
	söãl_hdmi_Õe_audio_p‹t_pd©a
 {

35 
u8
 
	mñd
[
HDMI_MAX_ELD_BYTES
];

36 
	mp‹t
;

37 
	mpùe
;

38 
	mls_˛ock
;

39 
boﬁ
 
	mdp_ouçut
;

42 
	söãl_hdmi_Õe_audio_pd©a
 {

43 
öãl_hdmi_Õe_audio_p‹t_pd©a
 
	mp‹t
[3];

44 
	mnum_p‹ts
;

45 
	mnum_pùes
;

47 (*
	mnŸify_audio_Õe
)(
∂©f‹m_devi˚
 *
	mpdev
, 
	mp‹t
);

48 
•ölock_t
 
	mÕe_audio_¶ock
;

	@src/common/linuxkpi/include/drm/spsc_queue.h

24 #i‚de‡
DRM_SCHEDULER_SPSC_QUEUE_H_


25 
	#DRM_SCHEDULER_SPSC_QUEUE_H_


	)

27 
	~<löux/©omic.h
>

28 
	~<löux/¥ìm±.h
>

32 
	s•sc_node
 {

35 
•sc_node
 *
	m√xt
;

38 
	s•sc_queue
 {

40 
•sc_node
 *
	mhód
;

43 
©omic_l⁄g_t
 
	mèû
;

45 
©omic_t
 
	mjob_cou¡
;

48 
ölöe
 
	$•sc_queue_öô
(
•sc_queue
 *
queue
)

50 
queue
->
hód
 = 
NULL
;

51 
	`©omic_l⁄g_£t
(&
queue
->
èû
, ()&queue->
hód
);

52 
	`©omic_£t
(&
queue
->
job_cou¡
, 0);

53 
	}
}

55 
ölöe
 
•sc_node
 *
	$•sc_queue_≥ek
(
•sc_queue
 *
queue
)

57  
queue
->
hód
;

58 
	}
}

60 
ölöe
 
	$•sc_queue_cou¡
(
•sc_queue
 *
queue
)

62  
	`©omic_ªad
(&
queue
->
job_cou¡
);

63 
	}
}

65 
ölöe
 
boﬁ
 
	$•sc_queue_push
(
•sc_queue
 *
queue
, 
•sc_node
 *
node
)

67 
•sc_node
 **
èû
;

69 
node
->
√xt
 = 
NULL
;

71 
	`¥ìm±_dißbÀ
();

73 
èû
 = (
•sc_node
 **)
	`©omic_l⁄g_xchg
(&
queue
->èû, ()&
node
->
√xt
);

74 
	`WRITE_ONCE
(*
èû
, 
node
);

75 
	`©omic_öc
(&
queue
->
job_cou¡
);

81 
	`smp_wmb
();

83 
	`¥ìm±_íabÀ
();

85  
èû
 =&
queue
->
hód
;

86 
	}
}

89 
ölöe
 
•sc_node
 *
	$•sc_queue_p›
(
•sc_queue
 *
queue
)

91 
•sc_node
 *
√xt
, *
node
;

94 
	`smp_rmb
();

96 
node
 = 
	`READ_ONCE
(
queue
->
hód
);

98 i‡(!
node
)

99  
NULL
;

101 
√xt
 = 
	`READ_ONCE
(
node
->next);

102 
	`WRITE_ONCE
(
queue
->
hód
, 
√xt
);

104 i‡(
	`u∆ikñy
(!
√xt
)) {

107 i‡(
	`©omic_l⁄g_cmpxchg
(&
queue
->
èû
,

108 ()&
node
->
√xt
, (Ë&
queue
->
hód
) != ()&node->next) {

111 
	`smp_rmb
();

112 } 
	`u∆ikñy
(!(
queue
->
hód
 = 
	`READ_ONCE
(
node
->
√xt
))));

116 
	`©omic_dec
(&
queue
->
job_cou¡
);

117  
node
;

118 
	}
}

	@src/common/linuxkpi/include/drm/tinydrm/ili9341.h

12 #i‚de‡
__LINUX_ILI9341_H


13 
	#__LINUX_ILI9341_H


	)

15 
	#ILI9341_FRMCTR1
 0xb1

	)

16 
	#ILI9341_FRMCTR2
 0xb2

	)

17 
	#ILI9341_FRMCTR3
 0xb3

	)

18 
	#ILI9341_INVTR
 0xb4

	)

19 
	#ILI9341_PRCTR
 0xb5

	)

20 
	#ILI9341_DISCTRL
 0xb6

	)

21 
	#ILI9341_ETMOD
 0xb7

	)

23 
	#ILI9341_PWCTRL1
 0xc0

	)

24 
	#ILI9341_PWCTRL2
 0xc1

	)

25 
	#ILI9341_VMCTRL1
 0xc5

	)

26 
	#ILI9341_VMCTRL2
 0xc7

	)

27 
	#ILI9341_PWCTRLA
 0xcb

	)

28 
	#ILI9341_PWCTRLB
 0xcf

	)

30 
	#ILI9341_RDID1
 0xda

	)

31 
	#ILI9341_RDID2
 0xdb

	)

32 
	#ILI9341_RDID3
 0xdc

	)

33 
	#ILI9341_RDID4
 0xd3

	)

35 
	#ILI9341_PGAMCTRL
 0xe0

	)

36 
	#ILI9341_NGAMCTRL
 0xe1

	)

37 
	#ILI9341_DGAMCTRL1
 0xe2

	)

38 
	#ILI9341_DGAMCTRL2
 0xe3

	)

39 
	#ILI9341_DTCTRLA
 0xe8

	)

40 
	#ILI9341_DTCTRLB
 0xó

	)

41 
	#ILI9341_PWRSEQ
 0xed

	)

43 
	#ILI9341_EN3GAM
 0xf2

	)

44 
	#ILI9341_IFCTRL
 0xf6

	)

45 
	#ILI9341_PUMPCTRL
 0xf7

	)

47 
	#ILI9341_MADCTL_MH
 
	`BIT
(2)

	)

48 
	#ILI9341_MADCTL_BGR
 
	`BIT
(3)

	)

49 
	#ILI9341_MADCTL_ML
 
	`BIT
(4)

	)

50 
	#ILI9341_MADCTL_MV
 
	`BIT
(5)

	)

51 
	#ILI9341_MADCTL_MX
 
	`BIT
(6)

	)

52 
	#ILI9341_MADCTL_MY
 
	`BIT
(7)

	)

	@src/common/linuxkpi/include/drm/tinydrm/mipi-dbi.h

12 #i‚de‡
__LINUX_MIPI_DBI_H


13 
	#__LINUX_MIPI_DBI_H


	)

15 
	~<drm/töydrm/töydrm.h
>

17 
	g•i_devi˚
;

18 
	ggpio_desc
;

19 
	gªguœt‹
;

40 
	smùi_dbi
 {

41 
töydrm_devi˚
 
	mtöydrm
;

42 
•i_devi˚
 *
	m•i
;

43 
boﬁ
 
	míabÀd
;

44 
muãx
 
	mcmdlock
;

45 (*
	mcomm™d
)(
mùi_dbi
 *
	mmùi
, 
u8
 
	mcmd
, u8 *
	m∑øm
, 
size_t
 
	mnum
);

46 c⁄° 
u8
 *
	mªad_comm™ds
;

47 
gpio_desc
 *
	mdc
;

48 
u16
 *
	mtx_buf
;

49 *
	mtx_buf9
;

50 
size_t
 
	mtx_buf9_Àn
;

51 
boﬁ
 
	msw≠_byãs
;

52 
gpio_desc
 *
	mª£t
;

53 
	mrŸ©i⁄
;

54 
backlight_devi˚
 *
	mbacklight
;

55 
ªguœt‹
 *
	mªguœt‹
;

58 
ölöe
 
mùi_dbi
 *

59 
	$mùi_dbi_‰om_töydrm
(
töydrm_devi˚
 *
tdev
)

61  
	`c⁄èöî_of
(
tdev
, 
mùi_dbi
, 
töydrm
);

62 
	}
}

64 
mùi_dbi_•i_öô
(
•i_devi˚
 *
•i
, 
mùi_dbi
 *
mùi
,

65 
gpio_desc
 *
dc
);

66 
mùi_dbi_öô
(
devi˚
 *
dev
, 
mùi_dbi
 *
mùi
,

67 c⁄° 
drm_sim∂e_di•œy_pùe_funcs
 *
pùe_funcs
,

68 
drm_drivî
 *
drivî
,

69 c⁄° 
drm_di•œy_mode
 *
mode
, 
rŸ©i⁄
);

70 
mùi_dbi_pùe_íabÀ
(
drm_sim∂e_di•œy_pùe
 *
pùe
,

71 
drm_¸tc_°©e
 *
¸tc_°©e
);

72 
mùi_dbi_pùe_dißbÀ
(
drm_sim∂e_di•œy_pùe
 *
pùe
);

73 
mùi_dbi_hw_ª£t
(
mùi_dbi
 *
mùi
);

74 
boﬁ
 
mùi_dbi_di•œy_is_⁄
(
mùi_dbi
 *
mùi
);

75 
u32
 
mùi_dbi_•i_cmd_max_•ìd
(
•i_devi˚
 *
•i
, 
size_t
 
Àn
);

77 
mùi_dbi_comm™d_ªad
(
mùi_dbi
 *
mùi
, 
u8
 
cmd
, u8 *
vÆ
);

78 
mùi_dbi_comm™d_buf
(
mùi_dbi
 *
mùi
, 
u8
 
cmd
, u8 *
d©a
, 
size_t
 
Àn
);

79 
mùi_dbi_buf_c›y
(*
d°
, 
drm_‰amebuf„r
 *
fb
,

80 
drm_˛ù_ª˘
 *
˛ù
, 
boﬁ
 
sw≠
);

93 
	#mùi_dbi_comm™d
(
mùi
, 
cmd
, 
£q
...) \

95 
u8
 
d
[] = { 
£q
 }; \

96 
	`mùi_dbi_comm™d_buf
(
mùi
, 
cmd
, 
d
, 
	`ARRAY_SIZE
(d)); \

97 })

	)

99 #ifde‡
CONFIG_DEBUG_FS


100 
mùi_dbi_debugfs_öô
(
drm_mö‹
 *
mö‹
);

102 
	#mùi_dbi_debugfs_öô
 
NULL


	)

	@src/common/linuxkpi/include/drm/tinydrm/tinydrm-helpers.h

10 #i‚de‡
__LINUX_TINYDRM_HELPERS_H


11 
	#__LINUX_TINYDRM_HELPERS_H


	)

13 
	gbacklight_devi˚
;

14 
	gtöydrm_devi˚
;

15 
	gdrm_˛ù_ª˘
;

16 
	g•i_å™s„r
;

17 
	g•i_mesßge
;

18 
	g•i_devi˚
;

19 
	gdevi˚
;

27 
ölöe
 
boﬁ
 
	$töydrm_machöe_lôée_ídün
()

29 #i‡
	`deföed
(
__LITTLE_ENDIAN
)

30  
åue
;

32  
Ál£
;

34 
	}
}

36 
boﬁ
 
töydrm_mîge_˛ùs
(
drm_˛ù_ª˘
 *
d°
,

37 
drm_˛ù_ª˘
 *
§c
, 
num_˛ùs
,

38 
Êags
, 
u32
 
max_width
, u32 
max_height
);

39 
töydrm_mem˝y
(*
d°
, *
vaddr
, 
drm_‰amebuf„r
 *
fb
,

40 
drm_˛ù_ª˘
 *
˛ù
);

41 
töydrm_swab16
(
u16
 *
d°
, *
vaddr
, 
drm_‰amebuf„r
 *
fb
,

42 
drm_˛ù_ª˘
 *
˛ù
);

43 
töydrm_xrgb8888_to_rgb565
(
u16
 *
d°
, *
vaddr
,

44 
drm_‰amebuf„r
 *
fb
,

45 
drm_˛ù_ª˘
 *
˛ù
, 
boﬁ
 
sw≠
);

46 
töydrm_xrgb8888_to_gøy8
(
u8
 *
d°
, *
vaddr
, 
drm_‰amebuf„r
 *
fb
,

47 
drm_˛ù_ª˘
 *
˛ù
);

49 
backlight_devi˚
 *
töydrm_of_föd_backlight
(
devi˚
 *
dev
);

50 
töydrm_íabÀ_backlight
(
backlight_devi˚
 *
backlight
);

51 
töydrm_dißbÀ_backlight
(
backlight_devi˚
 *
backlight
);

53 
size_t
 
töydrm_•i_max_å™s„r_size
(
•i_devi˚
 *
•i
, size_à
max_Àn
);

54 
boﬁ
 
töydrm_•i_bpw_suµ‹ãd
(
•i_devi˚
 *
•i
, 
u8
 
bpw
);

55 
töydrm_•i_å™s„r
(
•i_devi˚
 *
•i
, 
u32
 
•ìd_hz
,

56 
•i_å™s„r
 *
hódî
, 
u8
 
bpw
, c⁄° *
buf
,

57 
size_t
 
Àn
);

58 
_töydrm_dbg_•i_mesßge
(
•i_devi˚
 *
•i
, 
•i_mesßge
 *
m
);

60 #ifde‡
DEBUG


70 
ölöe
 
	$töydrm_dbg_•i_mesßge
(
•i_devi˚
 *
•i
,

71 
•i_mesßge
 *
m
)

73 i‡(
drm_debug
 & 
DRM_UT_DRIVER
)

74 
	`_töydrm_dbg_•i_mesßge
(
•i
, 
m
);

75 
	}
}

77 
ölöe
 
	$töydrm_dbg_•i_mesßge
(
•i_devi˚
 *
•i
,

78 
•i_mesßge
 *
m
)

80 
	}
}

	@src/common/linuxkpi/include/drm/tinydrm/tinydrm.h

10 #i‚de‡
__LINUX_TINYDRM_H


11 
	#__LINUX_TINYDRM_H


	)

13 
	~<drm/drm_gem_cma_hñ≥r.h
>

14 
	~<drm/drm_fb_cma_hñ≥r.h
>

15 
	~<drm/drm_sim∂e_kms_hñ≥r.h
>

24 
	stöydrm_devi˚
 {

25 
drm_devi˚
 *
	mdrm
;

26 
drm_sim∂e_di•œy_pùe
 
	mpùe
;

27 
muãx
 
	mdúty_lock
;

28 c⁄° 
drm_‰amebuf„r_funcs
 *
	mfb_funcs
;

31 
ölöe
 
töydrm_devi˚
 *

32 
	$pùe_to_töydrm
(
drm_sim∂e_di•œy_pùe
 *
pùe
)

34  
	`c⁄èöî_of
(
pùe
, 
töydrm_devi˚
,Öipe);

35 
	}
}

43 
	#TINYDRM_GEM_DRIVER_OPS
 \

44 .
gem_‰ì_obje˘
 = 
töydrm_gem_cma_‰ì_obje˘
, \

45 .
gem_¥öt_öfo
 = 
drm_gem_cma_¥öt_öfo
, \

46 .
gem_vm_›s
 = &
drm_gem_cma_vm_›s
, \

47 .
¥ime_h™dÀ_to_fd
 = 
drm_gem_¥ime_h™dÀ_to_fd
, \

48 .
¥ime_fd_to_h™dÀ
 = 
drm_gem_¥ime_fd_to_h™dÀ
, \

49 .
gem_¥ime_imp‹t
 = 
drm_gem_¥ime_imp‹t
, \

50 .
gem_¥ime_exp‹t
 = 
drm_gem_¥ime_exp‹t
, \

51 .
gem_¥ime_gë_sg_èbÀ
 = 
drm_gem_cma_¥ime_gë_sg_èbÀ
, \

52 .
gem_¥ime_imp‹t_sg_èbÀ
 = 
töydrm_gem_cma_¥ime_imp‹t_sg_èbÀ
, \

53 .
gem_¥ime_vm≠
 = 
drm_gem_cma_¥ime_vm≠
, \

54 .
gem_¥ime_vunm≠
 = 
drm_gem_cma_¥ime_vunm≠
, \

55 .
gem_¥ime_mm≠
 = 
drm_gem_cma_¥ime_mm≠
, \

56 .
dumb_¸óã
 = 
drm_gem_cma_dumb_¸óã


	)

67 
	#TINYDRM_MODE
(
hd
, 
vd
, 
hd_mm
, 
vd_mm
) \

68 .
hdi•œy
 = (
hd
), \

69 .
hsync_°¨t
 = (
hd
), \

70 .
hsync_íd
 = (
hd
), \

71 .
htŸÆ
 = (
hd
), \

72 .
vdi•œy
 = (
vd
), \

73 .
vsync_°¨t
 = (
vd
), \

74 .
vsync_íd
 = (
vd
), \

75 .
vtŸÆ
 = (
vd
), \

76 .
width_mm
 = (
hd_mm
), \

77 .
height_mm
 = (
vd_mm
), \

78 .
ty≥
 = 
DRM_MODE_TYPE_DRIVER
, \

79 .
˛ock
 = 1

	)

81 
töydrm_gem_cma_‰ì_obje˘
(
drm_gem_obje˘
 *
gem_obj
);

82 
drm_gem_obje˘
 *

83 
töydrm_gem_cma_¥ime_imp‹t_sg_èbÀ
(
drm_devi˚
 *
drm
,

84 
dma_buf_©èchmít
 *
©èch
,

85 
sg_èbÀ
 *
sgt
);

86 
devm_töydrm_öô
(
devi˚
 *
∑ª¡
, 
töydrm_devi˚
 *
tdev
,

87 c⁄° 
drm_‰amebuf„r_funcs
 *
fb_funcs
,

88 
drm_drivî
 *
drivî
);

89 
devm_töydrm_ªgi°î
(
töydrm_devi˚
 *
tdev
);

90 
töydrm_shutdown
(
töydrm_devi˚
 *
tdev
);

92 
töydrm_di•œy_pùe_upd©e
(
drm_sim∂e_di•œy_pùe
 *
pùe
,

93 
drm_∂™e_°©e
 *
ﬁd_°©e
);

94 
töydrm_di•œy_pùe_¥ï¨e_fb
(
drm_sim∂e_di•œy_pùe
 *
pùe
,

95 
drm_∂™e_°©e
 *
∂™e_°©e
);

97 
töydrm_di•œy_pùe_öô
(
töydrm_devi˚
 *
tdev
,

98 c⁄° 
drm_sim∂e_di•œy_pùe_funcs
 *
funcs
,

99 
c⁄√˘‹_ty≥
,

100 c⁄° 
uöt32_t
 *
f‹m©s
,

101 
f‹m©_cou¡
,

102 c⁄° 
drm_di•œy_mode
 *
mode
,

103 
rŸ©i⁄
);

	@src/common/linuxkpi/include/drm/ttm/ttm_bo_api.h

32 #i‚de‡
_TTM_BO_API_H_


33 
	#_TTM_BO_API_H_


	)

35 
	~<drm/drm_hashèb.h
>

36 
	~<drm/drm_vma_m™agî.h
>

37 
	~<löux/kªf.h
>

38 
	~<löux/li°.h
>

39 
	~<löux/waô.h
>

40 
	~<löux/muãx.h
>

41 
	~<löux/mm.h
>

42 
	~<löux/bôm≠.h
>

43 
	~<löux/ª£rv©i⁄.h
>

45 
	gâm_bo_devi˚
;

47 
	gdrm_mm_node
;

49 
	gâm_∂a˚mít
;

51 
	gâm_∂a˚
;

66 
	sâm_bus_∂a˚mít
 {

67 *
	maddr
;

68 
phys_addr_t
 
	mba£
;

69 
	msize
;

70 
	moff£t
;

71 
boﬁ
 
	mis_iomem
;

72 
boﬁ
 
	mio_ª£rved_vm
;

73 
uöt64_t
 
	mio_ª£rved_cou¡
;

91 
	sâm_mem_ªg
 {

92 *
	mmm_node
;

93 
	m°¨t
;

94 
	msize
;

95 
	mnum_∑ges
;

96 
uöt32_t
 
	m∑ge_Æignmít
;

97 
uöt32_t
 
	mmem_ty≥
;

98 
uöt32_t
 
	m∂a˚mít
;

99 
âm_bus_∂a˚mít
 
	mbus
;

116 
	eâm_bo_ty≥
 {

117 
	mâm_bo_ty≥_devi˚
,

118 
	mâm_bo_ty≥_kî√l
,

119 
	mâm_bo_ty≥_sg


122 
	gâm_â
;

168 
	sâm_buf„r_obje˘
 {

173 
âm_bo_globÆ
 *
	mglob
;

174 
âm_bo_devi˚
 *
	mbdev
;

175 
âm_bo_ty≥
 
	mty≥
;

176 (*
	mde°roy
Ë(
	mâm_buf„r_obje˘
 *);

177 
	mnum_∑ges
;

178 
size_t
 
	macc_size
;

184 
kªf
 
	mkªf
;

185 
kªf
 
	mli°_kªf
;

191 
âm_mem_ªg
 
	mmem
;

192 
fûe
 *
	m≥rsi°ít_sw≠_°‹age
;

193 
âm_â
 *
	mâm
;

194 
boﬁ
 
	mevi˘ed
;

200 
©omic_t
 
	m˝u_wrôîs
;

206 
li°_hód
 
	mÃu
;

207 
li°_hód
 
	mdde°roy
;

208 
li°_hód
 
	msw≠
;

209 
li°_hód
 
	mio_ª£rve_Ãu
;

215 
dma_„n˚
 *
	mmovög
;

217 
drm_vma_off£t_node
 
	mvma_node
;

219 
	m¥i‹ôy
;

227 
uöt64_t
 
	moff£t
;

229 
sg_èbÀ
 *
	msg
;

231 
ª£rv©i⁄_obje˘
 *
	mªsv
;

232 
ª£rv©i⁄_obje˘
 
	mâm_ªsv
;

233 
muãx
 
	mwu_muãx
;

249 
	#TTM_BO_MAP_IOMEM_MASK
 0x80

	)

250 
	sâm_bo_km≠_obj
 {

251 *
	mvútuÆ
;

252 
∑ge
 *
	m∑ge
;

254 
	mâm_bo_m≠_iom≠
 = 1 | 
TTM_BO_MAP_IOMEM_MASK
,

255 
	mâm_bo_m≠_vm≠
 = 2,

256 
	mâm_bo_m≠_km≠
 = 3,

257 
	mâm_bo_m≠_¥em≠≥d
 = 4 | 
TTM_BO_MAP_IOMEM_MASK
,

258 } 
	mbo_km≠_ty≥
;

259 
âm_buf„r_obje˘
 *
	mbo
;

273 
	sâm_›î©i⁄_˘x
 {

274 
boﬁ
 
	möãºu±ibÀ
;

275 
boﬁ
 
	mno_waô_gpu
;

276 
boﬁ
 
	mÆlow_ª£rved_evi˘i⁄
;

277 
ª£rv©i⁄_obje˘
 *
	mªsv
;

278 
uöt64_t
 
	mbyãs_moved
;

289 
ölöe
 
âm_buf„r_obje˘
 *

290 
	$âm_bo_ª„ªn˚
(
âm_buf„r_obje˘
 *
bo
)

292 
	`kªf_gë
(&
bo
->
kªf
);

293  
bo
;

294 
	}
}

310 
âm_bo_waô
(
âm_buf„r_obje˘
 *
bo
, 
boﬁ
 
öãºu±ibÀ
, boﬁ 
no_waô
);

321 
boﬁ
 
âm_bo_mem_com∑t
(
âm_∂a˚mít
 *
∂a˚mít
, 
âm_mem_ªg
 *
mem
,

322 
uöt32_t
 *
√w_Êags
);

339 
âm_bo_vÆid©e
(
âm_buf„r_obje˘
 *
bo
,

340 
âm_∂a˚mít
 *
∂a˚mít
,

341 
âm_›î©i⁄_˘x
 *
˘x
);

350 
âm_bo_uƒef
(
âm_buf„r_obje˘
 **
bo
);

362 
âm_bo_add_to_Ãu
(
âm_buf„r_obje˘
 *
bo
);

374 
âm_bo_dñ_‰om_Ãu
(
âm_buf„r_obje˘
 *
bo
);

385 
âm_bo_move_to_Ãu_èû
(
âm_buf„r_obje˘
 *
bo
);

394 
âm_bo_lock_dñayed_w‹kqueue
(
âm_bo_devi˚
 *
bdev
);

401 
âm_bo_u∆ock_dñayed_w‹kqueue
(
âm_bo_devi˚
 *
bdev
, 
ªsched
);

411 
boﬁ
 
âm_bo_evi˘i⁄_vÆuabÀ
(
âm_buf„r_obje˘
 *
bo
,

412 c⁄° 
âm_∂a˚
 *
∂a˚
);

428 
âm_bo_sync˝u_wrôe_gøb
(
âm_buf„r_obje˘
 *
bo
, 
boﬁ
 
no_waô
);

437 
âm_bo_sync˝u_wrôe_ªÀa£
(
âm_buf„r_obje˘
 *
bo
);

448 
size_t
 
âm_bo_acc_size
(
âm_bo_devi˚
 *
bdev
,

449 
bo_size
,

450 
°ru˘_size
);

451 
size_t
 
âm_bo_dma_acc_size
(
âm_bo_devi˚
 *
bdev
,

452 
bo_size
,

453 
°ru˘_size
);

495 
âm_bo_öô_ª£rved
(
âm_bo_devi˚
 *
bdev
,

496 
âm_buf„r_obje˘
 *
bo
,

497 
size
,

498 
âm_bo_ty≥
 
ty≥
,

499 
âm_∂a˚mít
 *
∂a˚mít
,

500 
uöt32_t
 
∑ge_Æignmít
,

501 
âm_›î©i⁄_˘x
 *
˘x
,

502 
fûe
 *
≥rsi°ít_sw≠_°‹age
,

503 
size_t
 
acc_size
,

504 
sg_èbÀ
 *
sg
,

505 
ª£rv©i⁄_obje˘
 *
ªsv
,

506 (*
de°roy
Ë(
âm_buf„r_obje˘
 *));

546 
	`âm_bo_öô
(
âm_bo_devi˚
 *
bdev
, 
âm_buf„r_obje˘
 *
bo
,

547 
size
, 
âm_bo_ty≥
 
ty≥
,

548 
âm_∂a˚mít
 *
∂a˚mít
,

549 
uöt32_t
 
∑ge_Æignmít
, 
boﬁ
 
öãºubtibÀ
,

550 
fûe
 *
≥rsi°ít_sw≠_°‹age
, 
size_t
 
acc_size
,

551 
sg_èbÀ
 *
sg
, 
ª£rv©i⁄_obje˘
 *
ªsv
,

552 (*
de°roy
Ë(
âm_buf„r_obje˘
 *));

578 
	`âm_bo_¸óã
(
âm_bo_devi˚
 *
bdev
, 
size
,

579 
âm_bo_ty≥
 
ty≥
, 
âm_∂a˚mít
 *
∂a˚mít
,

580 
uöt32_t
 
∑ge_Æignmít
, 
boﬁ
 
öãºu±ibÀ
,

581 
fûe
 *
≥rsi°ít_sw≠_°‹age
,

582 
âm_buf„r_obje˘
 **
p_bo
);

599 
	`âm_bo_öô_mm
(
âm_bo_devi˚
 *
bdev
, 
ty≥
,

600 
p_size
);

628 
	`âm_bo_˛ón_mm
(
âm_bo_devi˚
 *
bdev
, 
mem_ty≥
);

648 
	`âm_bo_evi˘_mm
(
âm_bo_devi˚
 *
bdev
, 
mem_ty≥
);

661 
ölöe
 *
	$âm_km≠_obj_vútuÆ
(
âm_bo_km≠_obj
 *
m≠
,

662 
boﬁ
 *
is_iomem
)

664 *
is_iomem
 = !!(
m≠
->
bo_km≠_ty≥
 & 
TTM_BO_MAP_IOMEM_MASK
);

665  
m≠
->
vútuÆ
;

666 
	}
}

684 
âm_bo_km≠
(
âm_buf„r_obje˘
 *
bo
, 
°¨t_∑ge
,

685 
num_∑ges
, 
âm_bo_km≠_obj
 *
m≠
);

694 
âm_bo_kunm≠
(
âm_bo_km≠_obj
 *
m≠
);

706 
âm_fbdev_mm≠
(
vm_¨ó_°ru˘
 *
vma
, 
âm_buf„r_obje˘
 *
bo
);

718 
âm_bo_mm≠
(
fûe
 *
fûp
, 
vm_¨ó_°ru˘
 *
vma
,

719 
âm_bo_devi˚
 *
bdev
);

741 
ssize_t
 
âm_bo_io
(
âm_bo_devi˚
 *
bdev
, 
fûe
 *
fûp
,

742 c⁄° 
__u£r
 *
wbuf
, __u£∏*
rbuf
,

743 
size_t
 
cou¡
, 
loff_t
 *
f_pos
, 
boﬁ
 
wrôe
);

745 
âm_bo_sw≠out
(
âm_bo_globÆ
 *
glob
,

746 
âm_›î©i⁄_˘x
 *
˘x
);

747 
âm_bo_sw≠out_Æl
(
âm_bo_devi˚
 *
bdev
);

748 
âm_bo_waô_uƒe£rved
(
âm_buf„r_obje˘
 *
bo
);

	@src/common/linuxkpi/include/drm/ttm/ttm_bo_driver.h

32 #i‚de‡
_TTM_BO_DRIVER_H_


33 
	#_TTM_BO_DRIVER_H_


	)

36 #i‚de‡
__löux__


37 
	~<drm/drmP.h
>

39 
	~<drm/drm_mm.h
>

40 
	~<drm/drm_globÆ.h
>

41 
	~<drm/drm_vma_m™agî.h
>

42 
	~<löux/w‹kqueue.h
>

43 
	~<löux/fs.h
>

44 
	~<löux/•ölock.h
>

45 
	~<löux/ª£rv©i⁄.h
>

47 #i‚de‡
__löux__


48 
	~<sys/rwlock.h
>

49 
	~<sys/åì.h
>

51 
	~"âm_bo_≠i.h
"

52 
	~"âm_mem‹y.h
"

53 
	~"âm_moduÀ.h
"

54 
	~"âm_∂a˚mít.h
"

56 
	#TTM_MAX_BO_PRIORITY
 4U

	)

58 
	sâm_backíd_func
 {

70 (*
	mböd
Ë(
âm_â
 *
	mâm
, 
âm_mem_ªg
 *
	mbo_mem
);

80 (*
	munböd
Ë(
âm_â
 *
	mâm
);

90 (*
	mde°roy
Ë(
âm_â
 *
	mâm
);

93 
	#TTM_PAGE_FLAG_WRITE
 (1 << 3)

	)

94 
	#TTM_PAGE_FLAG_SWAPPED
 (1 << 4)

	)

95 
	#TTM_PAGE_FLAG_PERSISTENT_SWAP
 (1 << 5)

	)

96 
	#TTM_PAGE_FLAG_ZERO_ALLOC
 (1 << 6)

	)

97 
	#TTM_PAGE_FLAG_DMA32
 (1 << 7)

	)

98 
	#TTM_PAGE_FLAG_SG
 (1 << 8)

	)

100 
	eâm_ˇchög_°©e
 {

101 
	mâ_unˇched
,

102 
	mâ_wc
,

103 
	mâ_ˇched


127 
	sâm_â
 {

128 
âm_bo_devi˚
 *
	mbdev
;

129 
âm_backíd_func
 *
	mfunc
;

130 
∑ge
 *
	mdummy_ªad_∑ge
;

131 
∑ge
 **
	m∑ges
;

132 
uöt32_t
 
	m∑ge_Êags
;

133 
	mnum_∑ges
;

134 
sg_èbÀ
 *
	msg
;

135 
âm_bo_globÆ
 *
	mglob
;

136 
fûe
 *
	msw≠_°‹age
;

137 
âm_ˇchög_°©e
 
	mˇchög_°©e
;

139 
	mâ_bound
,

140 
	mâ_unbound
,

141 
	mâ_u≈›uœãd
,

142 } 
	m°©e
;

156 
	sâm_dma_â
 {

157 
âm_â
 
	mâm
;

158 
dma_addr_t
 *
	mdma_addªss
;

159 
li°_hód
 
	m∑ges_li°
;

162 
	#TTM_MEMTYPE_FLAG_FIXED
 (1 << 0Ë

	)

163 
	#TTM_MEMTYPE_FLAG_MAPPABLE
 (1 << 1Ë

	)

164 
	#TTM_MEMTYPE_FLAG_CMA
 (1 << 3Ë

	)

166 
	gâm_mem_ty≥_m™agî
;

168 
	sâm_mem_ty≥_m™agî_func
 {

180 (*
	möô
)(
âm_mem_ty≥_m™agî
 *
	mm™
, 
	mp_size
);

190 (*
	mèkedown
)(
âm_mem_ty≥_m™agî
 *
	mm™
);

220 (*
	mgë_node
)(
âm_mem_ty≥_m™agî
 *
	mm™
,

221 
âm_buf„r_obje˘
 *
	mbo
,

222 c⁄° 
âm_∂a˚
 *
	m∂a˚
,

223 
âm_mem_ªg
 *
	mmem
);

235 (*
	mput_node
)(
âm_mem_ty≥_m™agî
 *
	mm™
,

236 
âm_mem_ªg
 *
	mmem
);

248 (*
	mdebug
)(
âm_mem_ty≥_m™agî
 *
	mm™
,

249 
drm_¥öãr
 *
	m¥öãr
);

284 
	sâm_mem_ty≥_m™agî
 {

285 
âm_bo_devi˚
 *
	mbdev
;

291 
boﬁ
 
	mhas_ty≥
;

292 
boﬁ
 
	mu£_ty≥
;

293 
uöt32_t
 
	mÊags
;

294 
uöt64_t
 
	mgpu_off£t
;

295 
uöt64_t
 
	msize
;

296 
uöt32_t
 
	mavaûabÀ_ˇchög
;

297 
uöt32_t
 
	mdeÁu…_ˇchög
;

298 c⁄° 
âm_mem_ty≥_m™agî_func
 *
	mfunc
;

299 *
	m¥iv
;

300 
muãx
 
	mio_ª£rve_muãx
;

301 
boﬁ
 
	mu£_io_ª£rve_Ãu
;

302 
boﬁ
 
	mio_ª£rve_Á°∑th
;

303 
•ölock_t
 
	mmove_lock
;

309 
li°_hód
 
	mio_ª£rve_Ãu
;

315 
li°_hód
 
	mÃu
[
TTM_MAX_BO_PRIORITY
];

320 
dma_„n˚
 *
	mmove
;

337 
	sâm_bo_drivî
 {

351 
	mâm_â
 *(*
	mâm_â_¸óã
)(
âm_bo_devi˚
 *
	mbdev
,

352 
	msize
,

353 
uöt32_t
 
	m∑ge_Êags
,

354 
∑ge
 *
	mdummy_ªad_∑ge
);

365 (*
	mâm_â_p›uœã
)(
âm_â
 *
	mâm
,

366 
âm_›î©i⁄_˘x
 *
	m˘x
);

375 (*
	mâm_â_u≈›uœã
)(
âm_â
 *
	mâm
);

389 (*
	mövÆid©e_ˇches
)(
âm_bo_devi˚
 *
	mbdev
, 
uöt32_t
 
	mÊags
);

390 (*
	möô_mem_ty≥
)(
âm_bo_devi˚
 *
	mbdev
, 
uöt32_t
 
	mty≥
,

391 
âm_mem_ty≥_m™agî
 *
	mm™
);

402 
boﬁ
 (*
evi˘i⁄_vÆuabÀ
)(
âm_buf„r_obje˘
 *
	mbo
,

403 c⁄° 
âm_∂a˚
 *
	m∂a˚
);

414 (*
	mevi˘_Êags
)(
âm_buf„r_obje˘
 *
	mbo
,

415 
âm_∂a˚mít
 *
	m∂a˚mít
);

428 (*
	mmove
)(
âm_buf„r_obje˘
 *
	mbo
, 
boﬁ
 
	mevi˘
,

429 
âm_›î©i⁄_˘x
 *
	m˘x
,

430 
âm_mem_ªg
 *
	m√w_mem
);

445 (*
	mvîify_ac˚ss
)(
âm_buf„r_obje˘
 *
	mbo
,

446 
fûe
 *
	mfûp
);

455 (*
	mmove_nŸify
)(
âm_buf„r_obje˘
 *
	mbo
,

456 
boﬁ
 
	mevi˘
,

457 
âm_mem_ªg
 *
	m√w_mem
);

460 (*
	mÁu…_ª£rve_nŸify
)(
âm_buf„r_obje˘
 *
	mbo
);

465 (*
	msw≠_nŸify
)(
âm_buf„r_obje˘
 *
	mbo
);

473 (*
	mio_mem_ª£rve
)(
âm_bo_devi˚
 *
	mbdev
,

474 
âm_mem_ªg
 *
	mmem
);

475 (*
	mio_mem_‰ì
)(
âm_bo_devi˚
 *
	mbdev
,

476 
âm_mem_ªg
 *
	mmem
);

484 (*
	mio_mem_p‚
)(
âm_buf„r_obje˘
 *
	mbo
,

485 
	m∑ge_off£t
);

501 (*
	mac˚ss_mem‹y
)(
âm_buf„r_obje˘
 *
	mbo
, 
	moff£t
,

502 *
	mbuf
, 
	mÀn
, 
	mwrôe
);

509 
	sâm_bo_globÆ_ªf
 {

510 
drm_globÆ_ª„ªn˚
 
	mªf
;

511 
âm_mem_globÆ
 *
	mmem_glob
;

528 
	sâm_bo_globÆ
 {

534 
kobje˘
 
	mkobj
;

535 
âm_mem_globÆ
 *
	mmem_glob
;

536 
∑ge
 *
	mdummy_ªad_∑ge
;

537 
muãx
 
	mdevi˚_li°_muãx
;

538 
•ölock_t
 
	mÃu_lock
;

543 
li°_hód
 
	mdevi˚_li°
;

548 
li°_hód
 
	msw≠_Ãu
[
TTM_MAX_BO_PRIORITY
];

553 
©omic_t
 
	mbo_cou¡
;

557 
	#TTM_NUM_MEM_TYPES
 8

	)

573 
	sâm_bo_devi˚
 {

578 
li°_hód
 
	mdevi˚_li°
;

579 
âm_bo_globÆ
 *
	mglob
;

580 
âm_bo_drivî
 *
	mdrivî
;

581 
âm_mem_ty≥_m™agî
 
	mm™
[
TTM_NUM_MEM_TYPES
];

582 #i‚de‡
__löux__


583 
rwlock_t
 
	mvm_lock
;

584 
•ölock_t
 
	m„n˚_lock
;

589 
drm_vma_off£t_m™agî
 
	mvma_m™agî
;

594 
li°_hód
 
	mdde°roy
;

596 #ifde‡
__löux__


601 
addªss_•a˚
 *
	mdev_m≠pög
;

608 
dñayed_w‹k
 
	mwq
;

610 
boﬁ
 
	m√ed_dma32
;

623 
ölöe
 
uöt32_t


624 
	$âm_Êag_masked
(
uöt32_t
 *
ﬁd
, uöt32_à
√w
, uöt32_à
mask
)

626 *
ﬁd
 ^(*ﬁd ^ 
√w
Ë& 
mask
;

627  *
ﬁd
;

628 
	}
}

644 
âm_â_öô
(
âm_â
 *
âm
, 
âm_bo_devi˚
 *
bdev
,

645 
size
, 
uöt32_t
 
∑ge_Êags
,

646 
∑ge
 *
dummy_ªad_∑ge
);

647 
âm_dma_â_öô
(
âm_dma_â
 *
âm_dma
, 
âm_bo_devi˚
 *
bdev
,

648 
size
, 
uöt32_t
 
∑ge_Êags
,

649 
∑ge
 *
dummy_ªad_∑ge
);

658 
âm_â_föi
(
âm_â
 *
âm
);

659 
âm_dma_â_föi
(
âm_dma_â
 *
âm_dma
);

669 
âm_â_böd
(
âm_â
 *
âm
, 
âm_mem_ªg
 *
bo_mem
,

670 
âm_›î©i⁄_˘x
 *
˘x
);

679 
âm_â_de°roy
(
âm_â
 *
âm
);

688 
âm_â_unböd
(
âm_â
 *
âm
);

697 
âm_â_sw≠ö
(
âm_â
 *
âm
);

712 
âm_â_£t_∂a˚mít_ˇchög
(
âm_â
 *
âm
, 
uöt32_t
 
∂a˚mít
);

713 
âm_â_sw≠out
(
âm_â
 *
âm
, 
fûe
 *
≥rsi°ít_sw≠_°‹age
);

722 
âm_â_u≈›uœã
(
âm_â
 *
âm
);

737 
boﬁ
 
âm_mem_ªg_is_pci
(
âm_bo_devi˚
 *
bdev
, 
âm_mem_ªg
 *
mem
);

758 
âm_bo_mem_•a˚
(
âm_buf„r_obje˘
 *
bo
,

759 
âm_∂a˚mít
 *
∂a˚mít
,

760 
âm_mem_ªg
 *
mem
,

761 
âm_›î©i⁄_˘x
 *
˘x
);

763 
âm_bo_mem_put
(
âm_buf„r_obje˘
 *
bo
, 
âm_mem_ªg
 *
mem
);

764 
âm_bo_mem_put_locked
(
âm_buf„r_obje˘
 *
bo
,

765 
âm_mem_ªg
 *
mem
);

767 
âm_bo_globÆ_ªÀa£
(
drm_globÆ_ª„ªn˚
 *
ªf
);

768 
âm_bo_globÆ_öô
(
drm_globÆ_ª„ªn˚
 *
ªf
);

770 
âm_bo_devi˚_ªÀa£
(
âm_bo_devi˚
 *
bdev
);

787 
âm_bo_devi˚_öô
(
âm_bo_devi˚
 *
bdev
,

788 
âm_bo_globÆ
 *
glob
,

789 
âm_bo_drivî
 *
drivî
,

790 #i‚de‡
__löux__


791 *
dummy
,

793 
addªss_•a˚
 *
m≠pög
,

795 
uöt64_t
 
fûe_∑ge_off£t
, 
boﬁ
 
√ed_dma32
);

802 
âm_bo_unm≠_vútuÆ
(
âm_buf„r_obje˘
 *
bo
);

811 
âm_bo_unm≠_vútuÆ_locked
(
âm_buf„r_obje˘
 *
bo
);

813 
âm_mem_io_ª£rve_vm
(
âm_buf„r_obje˘
 *
bo
);

814 
âm_mem_io_‰ì_vm
(
âm_buf„r_obje˘
 *
bo
);

815 
âm_mem_io_lock
(
âm_mem_ty≥_m™agî
 *
m™
, 
boﬁ
 
öãºu±ibÀ
);

816 
âm_mem_io_u∆ock
(
âm_mem_ty≥_m™agî
 *
m™
);

818 
âm_bo_dñ_sub_‰om_Ãu
(
âm_buf„r_obje˘
 *
bo
);

819 
âm_bo_add_to_Ãu
(
âm_buf„r_obje˘
 *
bo
);

842 
ölöe
 
	$__âm_bo_ª£rve
(
âm_buf„r_obje˘
 *
bo
,

843 
boﬁ
 
öãºu±ibÀ
, boﬁ 
no_waô
,

844 
ww_acquúe_˘x
 *
tickë
)

846 
ªt
 = 0;

848 i‡(
no_waô
) {

849 
boﬁ
 
suc˚ss
;

850 i‡(
	`WARN_ON
(
tickë
))

851  -
EBUSY
;

853 
suc˚ss
 = 
	`ª£rv©i⁄_obje˘_åylock
(
bo
->
ªsv
);

854  
suc˚ss
 ? 0 : -
EBUSY
;

857 i‡(
öãºu±ibÀ
)

858 
ªt
 = 
	`ª£rv©i⁄_obje˘_lock_öãºu±ibÀ
(
bo
->
ªsv
, 
tickë
);

860 
ªt
 = 
	`ª£rv©i⁄_obje˘_lock
(
bo
->
ªsv
, 
tickë
);

861 i‡(
ªt
 =-
EINTR
)

862  -
ERESTARTSYS
;

863  
ªt
;

864 
	}
}

910 
ölöe
 
	$âm_bo_ª£rve
(
âm_buf„r_obje˘
 *
bo
,

911 
boﬁ
 
öãºu±ibÀ
, boﬁ 
no_waô
,

912 
ww_acquúe_˘x
 *
tickë
)

914 
ªt
;

916 
	`WARN_ON
(!
	`kªf_ªad
(&
bo
->
kªf
));

918 
ªt
 = 
	`__âm_bo_ª£rve
(
bo
, 
öãºu±ibÀ
, 
no_waô
, 
tickë
);

919 i‡(
	`likñy
(
ªt
 == 0))

920 
	`âm_bo_dñ_sub_‰om_Ãu
(
bo
);

922  
ªt
;

923 
	}
}

935 
ölöe
 
	$âm_bo_ª£rve_¶ow∑th
(
âm_buf„r_obje˘
 *
bo
,

936 
boﬁ
 
öãºu±ibÀ
,

937 
ww_acquúe_˘x
 *
tickë
)

939 
ªt
 = 0;

941 
	`WARN_ON
(!
	`kªf_ªad
(&
bo
->
kªf
));

943 i‡(
öãºu±ibÀ
)

944 
ªt
 = 
	`ww_muãx_lock_¶ow_öãºu±ibÀ
(&
bo
->
ªsv
->
lock
,

945 
tickë
);

947 
	`ww_muãx_lock_¶ow
(&
bo
->
ªsv
->
lock
, 
tickë
);

949 i‡(
	`likñy
(
ªt
 == 0))

950 
	`âm_bo_dñ_sub_‰om_Ãu
(
bo
);

951 i‡(
ªt
 =-
EINTR
)

952 
ªt
 = -
ERESTARTSYS
;

954  
ªt
;

955 
	}
}

964 
ölöe
 
	$âm_bo_uƒe£rve
(
âm_buf„r_obje˘
 *
bo
)

966 i‡(!(
bo
->
mem
.
∂a˚mít
 & 
TTM_PL_FLAG_NO_EVICT
)) {

967 
	`•ö_lock
(&
bo
->
glob
->
Ãu_lock
);

968 
	`âm_bo_add_to_Ãu
(
bo
);

969 
	`•ö_u∆ock
(&
bo
->
glob
->
Ãu_lock
);

971 
	`ª£rv©i⁄_obje˘_u∆ock
(
bo
->
ªsv
);

972 
	}
}

978 
âm_mem_io_ª£rve
(
âm_bo_devi˚
 *
bdev
,

979 
âm_mem_ªg
 *
mem
);

980 
âm_mem_io_‰ì
(
âm_bo_devi˚
 *
bdev
,

981 
âm_mem_ªg
 *
mem
);

1000 
âm_bo_move_âm
(
âm_buf„r_obje˘
 *
bo
,

1001 
âm_›î©i⁄_˘x
 *
˘x
,

1002 
âm_mem_ªg
 *
√w_mem
);

1022 
âm_bo_move_mem˝y
(
âm_buf„r_obje˘
 *
bo
,

1023 
âm_›î©i⁄_˘x
 *
˘x
,

1024 
âm_mem_ªg
 *
√w_mem
);

1033 
âm_bo_‰ì_ﬁd_node
(
âm_buf„r_obje˘
 *
bo
);

1050 
âm_bo_move_ac˚l_˛ónup
(
âm_buf„r_obje˘
 *
bo
,

1051 
dma_„n˚
 *
„n˚
, 
boﬁ
 
evi˘
,

1052 
âm_mem_ªg
 *
√w_mem
);

1065 
âm_bo_pùñöe_move
(
âm_buf„r_obje˘
 *
bo
,

1066 
dma_„n˚
 *
„n˚
, 
boﬁ
 
evi˘
,

1067 
âm_mem_ªg
 *
√w_mem
);

1078 
pg¥Ÿ_t
 
âm_io_¥Ÿ
(
uöt32_t
 
ˇchög_Êags
,Ög¥Ÿ_à
tmp
);

1080 c⁄° 
âm_mem_ty≥_m™agî_func
 
âm_bo_m™agî_func
;

1082 #i‡
__OS_HAS_AGP


1083 
	#TTM_HAS_AGP


	)

1099 
âm_â
 *
âm_agp_â_¸óã
(
âm_bo_devi˚
 *
bdev
,

1100 #ifde‡
__löux__


1101 
agp_bridge_d©a
 *
bridge
,

1103 
devi˚_t
 
bridge
,

1105 
size
, 
uöt32_t
 
∑ge_Êags
,

1106 
∑ge
 *
dummy_ªad_∑ge
);

1107 
âm_agp_â_p›uœã
(
âm_â
 *
âm
, 
âm_›î©i⁄_˘x
 *
˘x
);

1108 
âm_agp_â_u≈›uœã
(
âm_â
 *
âm
);

	@src/common/linuxkpi/include/drm/ttm/ttm_debug.h

30 #ifde‡
__löux__


32 
âm_åa˚_dma_m≠
(
devi˚
 *
dev
, 
âm_dma_â
 *
â
);

33 
âm_åa˚_dma_unm≠
(
devi˚
 *
dev
, 
âm_dma_â
 *
â
);

37 
	~<drm/drmP.h
>

38 
	~"âm_bo_drivî.h
"

40 
ölöe
 

41 
	$âm_åa˚_dma_m≠
(
devi˚
 *
dev
, 
âm_dma_â
 *
â
){

42 
	`CTR2
(
KTR_DRM
, "âm_dma_m≠ dev %p,Åtm_dma_â %p", 
dev
, 
â
);

43 
	}
}

45 
ölöe
 

46 
	$âm_åa˚_dma_unm≠
(
devi˚
 *
dev
, 
âm_dma_â
 *
â
){

47 
	`CTR2
(
KTR_DRM
, "âm_dma_unm≠ dev %p,Åtm_dma_â %p", 
dev
, 
â
);

48 
	}
}

	@src/common/linuxkpi/include/drm/ttm/ttm_execbuf_util.h

31 #i‚de‡
_TTM_EXECBUF_UTIL_H_


32 
	#_TTM_EXECBUF_UTIL_H_


	)

34 
	~<löux/li°.h
>

36 
	~"âm_bo_≠i.h
"

46 
	sâm_vÆid©e_buf„r
 {

47 
li°_hód
 
	mhód
;

48 
âm_buf„r_obje˘
 *
	mbo
;

49 
boﬁ
 
	msh¨ed
;

62 
âm_eu_backoff_ª£rv©i⁄
(
ww_acquúe_˘x
 *
tickë
,

63 
li°_hód
 *
li°
);

99 
âm_eu_ª£rve_buf„rs
(
ww_acquúe_˘x
 *
tickë
,

100 
li°_hód
 *
li°
, 
boﬁ
 
öå
,

101 
li°_hód
 *
dups
);

116 
âm_eu_„n˚_buf„r_obje˘s
(
ww_acquúe_˘x
 *
tickë
,

117 
li°_hód
 *
li°
,

118 
dma_„n˚
 *
„n˚
);

	@src/common/linuxkpi/include/drm/ttm/ttm_lock.h

50 #i‚de‡
_TTM_LOCK_H_


51 
	#_TTM_LOCK_H_


	)

53 
	~<löux/waô.h
>

54 
	~<löux/©omic.h
>

56 
	~"âm_obje˘.h
"

71 
	sâm_lock
 {

72 
âm_ba£_obje˘
 
	mba£
;

73 
waô_queue_hód_t
 
	mqueue
;

74 
•ölock_t
 
	mlock
;

75 
öt32_t
 
	mrw
;

76 
uöt32_t
 
	mÊags
;

77 
boﬁ
 
	mkûl_èkîs
;

78 
	msig«l
;

79 
âm_obje˘_fûe
 *
	mvt_hﬁdî
;

89 
âm_lock_öô
(
âm_lock
 *
lock
);

98 
âm_ªad_u∆ock
(
âm_lock
 *
lock
);

110 
âm_ªad_lock
(
âm_lock
 *
lock
, 
boﬁ
 
öãºu±ibÀ
);

127 
âm_ªad_åylock
(
âm_lock
 *
lock
, 
boﬁ
 
öãºu±ibÀ
);

136 
âm_wrôe_u∆ock
(
âm_lock
 *
lock
);

148 
âm_wrôe_lock
(
âm_lock
 *
lock
, 
boﬁ
 
öãºu±ibÀ
);

157 
âm_lock_downgøde
(
âm_lock
 *
lock
);

166 
âm_su•íd_lock
(
âm_lock
 *
lock
);

175 
âm_su•íd_u∆ock
(
âm_lock
 *
lock
);

189 
âm_vt_lock
(
âm_lock
 *
lock
, 
boﬁ
 
öãºu±ibÀ
,

190 
âm_obje˘_fûe
 *
tfûe
);

201 
âm_vt_u∆ock
(
âm_lock
 *
lock
);

210 
âm_wrôe_u∆ock
(
âm_lock
 *
lock
);

222 
âm_wrôe_lock
(
âm_lock
 *
lock
, 
boﬁ
 
öãºu±ibÀ
);

241 
ölöe
 
	$âm_lock_£t_kûl
(
âm_lock
 *
lock
, 
boﬁ
 
vÆ
,

242 
sig«l
)

244 
lock
->
kûl_èkîs
 = 
vÆ
;

245 i‡(
vÆ
)

246 
lock
->
sig«l
 = signal;

247 
	}
}

	@src/common/linuxkpi/include/drm/ttm/ttm_memory.h

29 #i‚de‡
TTM_MEMORY_H


30 
	#TTM_MEMORY_H


	)

32 
	~<löux/w‹kqueue.h
>

33 
	~<löux/•ölock.h
>

34 
	~<löux/bug.h
>

35 
	~<löux/waô.h
>

36 
	~<löux/î∫o.h
>

37 
	~<löux/kobje˘.h
>

38 
	~<löux/mm.h
>

39 
	~"âm_bo_≠i.h
"

63 
	#TTM_MEM_MAX_ZONES
 2

	)

64 
	gâm_mem_z⁄e
;

65 
	sâm_mem_globÆ
 {

66 
kobje˘
 
	mkobj
;

67 
âm_bo_globÆ
 *
	mbo_glob
;

68 
w‹kqueue_°ru˘
 *
	msw≠_queue
;

69 
w‹k_°ru˘
 
	mw‹k
;

70 
•ölock_t
 
	mlock
;

71 
âm_mem_z⁄e
 *
	mz⁄es
[
TTM_MEM_MAX_ZONES
];

72 
	mnum_z⁄es
;

73 
âm_mem_z⁄e
 *
	mz⁄e_kî√l
;

74 #ifde‡
CONFIG_HIGHMEM


75 
âm_mem_z⁄e
 *
	mz⁄e_highmem
;

77 
âm_mem_z⁄e
 *
	mz⁄e_dma32
;

81 
âm_mem_globÆ_öô
(
âm_mem_globÆ
 *
glob
);

82 
âm_mem_globÆ_ªÀa£
(
âm_mem_globÆ
 *
glob
);

83 
âm_mem_globÆ_Æloc
(
âm_mem_globÆ
 *
glob
, 
uöt64_t
 
mem‹y
,

84 
âm_›î©i⁄_˘x
 *
˘x
);

85 
âm_mem_globÆ_‰ì
(
âm_mem_globÆ
 *
glob
,

86 
uöt64_t
 
amou¡
);

87 
âm_mem_globÆ_Æloc_∑ge
(
âm_mem_globÆ
 *
glob
,

88 
∑ge
 *∑ge, 
uöt64_t
 
size
,

89 
âm_›î©i⁄_˘x
 *
˘x
);

90 
âm_mem_globÆ_‰ì_∑ge
(
âm_mem_globÆ
 *
glob
,

91 
∑ge
 *∑ge, 
uöt64_t
 
size
);

92 
size_t
 
âm_round_pŸ
(size_à
size
);

93 
uöt64_t
 
âm_gë_kî√l_z⁄e_mem‹y_size
(
âm_mem_globÆ
 *
glob
);

	@src/common/linuxkpi/include/drm/ttm/ttm_module.h

31 #i‚de‡
_TTM_MODULE_H_


32 
	#_TTM_MODULE_H_


	)

34 
	~<löux/kî√l.h
>

35 
	gkobje˘
;

37 
	#TTM_PFX
 "[TTM] "

	)

38 
kobje˘
 *
âm_gë_kobj
();

	@src/common/linuxkpi/include/drm/ttm/ttm_object.h

38 #i‚de‡
_TTM_OBJECT_H_


39 
	#_TTM_OBJECT_H_


	)

41 
	~<löux/li°.h
>

42 
	~<drm/drm_hashèb.h
>

43 
	~<löux/kªf.h
>

44 
	~<löux/rcupd©e.h
>

45 
	~<löux/dma-buf.h
>

47 
	~"âm_mem‹y.h
"

64 
	eâm_ªf_ty≥
 {

65 
	mTTM_REF_USAGE
,

66 
	mTTM_REF_SYNCCPU_READ
,

67 
	mTTM_REF_SYNCCPU_WRITE
,

68 
	mTTM_REF_NUM


79 
	eâm_obje˘_ty≥
 {

80 
	mâm_„n˚_ty≥
,

81 
	mâm_buf„r_ty≥
,

82 
	mâm_lock_ty≥
,

83 
	mâm_¥ime_ty≥
,

84 
	mâm_drivî_ty≥0
 = 256,

85 
	mâm_drivî_ty≥1
,

86 
	mâm_drivî_ty≥2
,

87 
	mâm_drivî_ty≥3
,

88 
	mâm_drivî_ty≥4
,

89 
	mâm_drivî_ty≥5


92 
	gâm_obje˘_fûe
;

93 
	gâm_obje˘_devi˚
;

127 
	sâm_ba£_obje˘
 {

128 
rcu_hód
 
	mrhód
;

129 
drm_hash_ôem
 
	mhash
;

130 
âm_obje˘_ty≥
 
	mobje˘_ty≥
;

131 
boﬁ
 
	msh¨óbÀ
;

132 
âm_obje˘_fûe
 *
	mtfûe
;

133 
kªf
 
	mªfcou¡
;

134 (*
	mªfcou¡_ªÀa£
Ë(
âm_ba£_obje˘
 **
	mba£
);

135 (*
	mªf_obj_ªÀa£
Ë(
âm_ba£_obje˘
 *
	mba£
,

136 
âm_ªf_ty≥
 
	mªf_ty≥
);

154 
	sâm_¥ime_obje˘
 {

155 
âm_ba£_obje˘
 
	mba£
;

156 
muãx
 
	mmuãx
;

157 
size_t
 
	msize
;

158 
âm_obje˘_ty≥
 
	mªÆ_ty≥
;

159 
dma_buf
 *
	mdma_buf
;

160 (*
	mªfcou¡_ªÀa£
Ë(
	mâm_ba£_obje˘
 **);

177 
âm_ba£_obje˘_öô
(
âm_obje˘_fûe
 *
tfûe
,

178 
âm_ba£_obje˘
 *
ba£
,

179 
boﬁ
 
sh¨óbÀ
,

180 
âm_obje˘_ty≥
 
ty≥
,

181 (*
ªfcou¡_ªÀa£
Ë(
âm_ba£_obje˘


183 (*
ªf_obj_ªÀa£
Ë(
âm_ba£_obje˘


185 
âm_ªf_ty≥


186 
ªf_ty≥
));

197 
âm_ba£_obje˘
 *
	`âm_ba£_obje˘_lookup
(
âm_obje˘_fûe


198 *
tfûe
, 
uöt32_t
 
key
);

211 
âm_ba£_obje˘
 *

212 
	`âm_ba£_obje˘_lookup_f‹_ªf
(
âm_obje˘_devi˚
 *
tdev
, 
uöt32_t
 
key
);

223 
	`âm_ba£_obje˘_uƒef
(
âm_ba£_obje˘
 **
p_ba£
);

248 
	`âm_ªf_obje˘_add
(
âm_obje˘_fûe
 *
tfûe
,

249 
âm_ba£_obje˘
 *
ba£
,

250 
âm_ªf_ty≥
 
ªf_ty≥
, 
boﬁ
 *
exi°ed
,

251 
boﬁ
 
ªquúe_exi°ed
);

253 
boﬁ
 
	`âm_ªf_obje˘_exi°s
(
âm_obje˘_fûe
 *
tfûe
,

254 
âm_ba£_obje˘
 *
ba£
);

267 
	`âm_ªf_obje˘_ba£_uƒef
(
âm_obje˘_fûe
 *
tfûe
,

268 
key
,

269 
âm_ªf_ty≥
 
ªf_ty≥
);

280 
âm_obje˘_fûe
 *
	`âm_obje˘_fûe_öô
(
âm_obje˘_devi˚


281 *
tdev
,

282 
hash_‹dî
);

295 
	`âm_obje˘_fûe_ªÀa£
(
âm_obje˘_fûe
 **
p_tfûe
);

308 
âm_obje˘_devi˚
 *

309 
	`âm_obje˘_devi˚_öô
(
âm_mem_globÆ
 *
mem_glob
,

310 
hash_‹dî
,

311 c⁄° 
dma_buf_›s
 *
›s
);

324 
	`âm_obje˘_devi˚_ªÀa£
(
âm_obje˘_devi˚
 **
p_tdev
);

326 
	#âm_ba£_obje˘_k‰ì
(
__obje˘
, 
__ba£
)\

327 
	`k‰ì_rcu
(
__obje˘
, 
__ba£
.
rhód
)

	)

329 
	`âm_¥ime_obje˘_öô
(
âm_obje˘_fûe
 *
tfûe
,

330 
size_t
 
size
,

331 
âm_¥ime_obje˘
 *
¥ime
,

332 
boﬁ
 
sh¨óbÀ
,

333 
âm_obje˘_ty≥
 
ty≥
,

334 (*
ªfcou¡_ªÀa£
)

335 (
âm_ba£_obje˘
 **),

336 (*
ªf_obj_ªÀa£
)

337 (
âm_ba£_obje˘
 *,

338 
âm_ªf_ty≥
 
ªf_ty≥
));

340 
ölöe
 
âm_obje˘_ty≥


341 
	$âm_ba£_obje˘_ty≥
(
âm_ba£_obje˘
 *
ba£
)

343  (
ba£
->
obje˘_ty≥
 =
âm_¥ime_ty≥
) ?

344 
	`c⁄èöî_of
(
ba£
, 
âm_¥ime_obje˘
, ba£)->
ªÆ_ty≥
 :

345 
ba£
->
obje˘_ty≥
;

346 
	}
}

347 
âm_¥ime_fd_to_h™dÀ
(
âm_obje˘_fûe
 *
tfûe
,

348 
fd
, 
u32
 *
h™dÀ
);

349 
âm_¥ime_h™dÀ_to_fd
(
âm_obje˘_fûe
 *
tfûe
,

350 
uöt32_t
 
h™dÀ
, uöt32_à
Êags
,

351 *
¥ime_fd
);

353 
	#âm_¥ime_obje˘_k‰ì
(
__obj
, 
__¥ime
) \

354 
	`k‰ì_rcu
(
__obj
, 
__¥ime
.
ba£
.
rhód
)

	)

	@src/common/linuxkpi/include/drm/ttm/ttm_page_alloc.h

27 #i‚de‡
TTM_PAGE_ALLOC


28 
	#TTM_PAGE_ALLOC


	)

30 
	~<drm/âm/âm_bo_drivî.h
>

31 
	~<drm/âm/âm_mem‹y.h
>

33 
	gdevi˚
;

38 
âm_∑ge_Æloc_öô
(
âm_mem_globÆ
 *
glob
, 
max_∑ges
);

42 
âm_∑ge_Æloc_föi
();

51 
âm_poﬁ_p›uœã
(
âm_â
 *
âm
, 
âm_›î©i⁄_˘x
 *
˘x
);

60 
âm_poﬁ_u≈›uœã
(
âm_â
 *
âm
);

65 
âm_p›uœã_™d_m≠_∑ges
(
devi˚
 *
dev
, 
âm_dma_â
 *
â
,

66 
âm_›î©i⁄_˘x
 *
˘x
);

71 
âm_unm≠_™d_u≈›uœã_∑ges
(
devi˚
 *
dev
, 
âm_dma_â
 *
â
);

76 
âm_∑ge_Æloc_debugfs
(
£q_fûe
 *
m
, *
d©a
);

78 #i‡
deföed
(
CONFIG_SWIOTLB
Ë|| deföed(
CONFIG_INTEL_IOMMU
)

82 
âm_dma_∑ge_Æloc_öô
(
âm_mem_globÆ
 *
glob
, 
max_∑ges
);

87 
âm_dma_∑ge_Æloc_föi
();

92 
âm_dma_∑ge_Æloc_debugfs
(
£q_fûe
 *
m
, *
d©a
);

94 
âm_dma_p›uœã
(
âm_dma_â
 *
âm_dma
, 
devi˚
 *
dev
,

95 
âm_›î©i⁄_˘x
 *
˘x
);

96 
âm_dma_u≈›uœã
(
âm_dma_â
 *
âm_dma
, 
devi˚
 *
dev
);

99 
ölöe
 
	$âm_dma_∑ge_Æloc_öô
(
âm_mem_globÆ
 *
glob
,

100 
max_∑ges
)

102  -
ENODEV
;

103 
	}
}

105 
ölöe
 
	$âm_dma_∑ge_Æloc_föi
(Ë{ ; 
	}
}

107 
ölöe
 
	$âm_dma_∑ge_Æloc_debugfs
(
£q_fûe
 *
m
, *
d©a
)

110 
	}
}

111 
ölöe
 
	$âm_dma_p›uœã
(
âm_dma_â
 *
âm_dma
,

112 
devi˚
 *
dev
,

113 
âm_›î©i⁄_˘x
 *
˘x
)

115  -
ENOMEM
;

116 
	}
}

117 
ölöe
 
	$âm_dma_u≈›uœã
(
âm_dma_â
 *
âm_dma
,

118 
devi˚
 *
dev
)

120 
	}
}

	@src/common/linuxkpi/include/drm/ttm/ttm_placement.h

31 #i‚de‡
_TTM_PLACEMENT_H_


32 
	#_TTM_PLACEMENT_H_


	)

34 
	~<löux/ty≥s.h
>

40 
	#TTM_PL_SYSTEM
 0

	)

41 
	#TTM_PL_TT
 1

	)

42 
	#TTM_PL_VRAM
 2

	)

43 
	#TTM_PL_PRIV
 3

	)

45 
	#TTM_PL_FLAG_SYSTEM
 (1 << 
TTM_PL_SYSTEM
)

	)

46 
	#TTM_PL_FLAG_TT
 (1 << 
TTM_PL_TT
)

	)

47 
	#TTM_PL_FLAG_VRAM
 (1 << 
TTM_PL_VRAM
)

	)

48 
	#TTM_PL_FLAG_PRIV
 (1 << 
TTM_PL_PRIV
)

	)

49 
	#TTM_PL_MASK_MEM
 0x0000FFFF

	)

63 
	#TTM_PL_FLAG_CACHED
 (1 << 16)

	)

64 
	#TTM_PL_FLAG_UNCACHED
 (1 << 17)

	)

65 
	#TTM_PL_FLAG_WC
 (1 << 18)

	)

66 
	#TTM_PL_FLAG_CONTIGUOUS
 (1 << 19)

	)

67 
	#TTM_PL_FLAG_NO_EVICT
 (1 << 21)

	)

68 
	#TTM_PL_FLAG_TOPDOWN
 (1 << 22)

	)

70 
	#TTM_PL_MASK_CACHING
 (
TTM_PL_FLAG_CACHED
 | \

71 
TTM_PL_FLAG_UNCACHED
 | \

72 
TTM_PL_FLAG_WC
)

	)

74 
	#TTM_PL_MASK_MEMTYPE
 (
TTM_PL_MASK_MEM
 | 
TTM_PL_MASK_CACHING
)

	)

85 
	sâm_∂a˚
 {

86 
	mÂ‚
;

87 
	mÕ‚
;

88 
uöt32_t
 
	mÊags
;

101 
	sâm_∂a˚mít
 {

102 
	mnum_∂a˚mít
;

103 c⁄° 
âm_∂a˚
 *
	m∂a˚mít
;

104 
	mnum_busy_∂a˚mít
;

105 c⁄° 
âm_∂a˚
 *
	mbusy_∂a˚mít
;

	@src/common/linuxkpi/include/uapi/drm/amdgpu_drm.h

32 #i‚de‡
__AMDGPU_DRM_H__


33 
	#__AMDGPU_DRM_H__


	)

35 
	~"drm.h
"

37 #i‡
deföed
(
__˝lu•lus
)

41 
	#DRM_AMDGPU_GEM_CREATE
 0x00

	)

42 
	#DRM_AMDGPU_GEM_MMAP
 0x01

	)

43 
	#DRM_AMDGPU_CTX
 0x02

	)

44 
	#DRM_AMDGPU_BO_LIST
 0x03

	)

45 
	#DRM_AMDGPU_CS
 0x04

	)

46 
	#DRM_AMDGPU_INFO
 0x05

	)

47 
	#DRM_AMDGPU_GEM_METADATA
 0x06

	)

48 
	#DRM_AMDGPU_GEM_WAIT_IDLE
 0x07

	)

49 
	#DRM_AMDGPU_GEM_VA
 0x08

	)

50 
	#DRM_AMDGPU_WAIT_CS
 0x09

	)

51 
	#DRM_AMDGPU_GEM_OP
 0x10

	)

52 
	#DRM_AMDGPU_GEM_USERPTR
 0x11

	)

53 
	#DRM_AMDGPU_WAIT_FENCES
 0x12

	)

54 
	#DRM_AMDGPU_VM
 0x13

	)

55 
	#DRM_AMDGPU_FENCE_TO_HANDLE
 0x14

	)

56 
	#DRM_AMDGPU_SCHED
 0x15

	)

58 
	#DRM_IOCTL_AMDGPU_GEM_CREATE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_GEM_CREATE
, 
drm_amdgpu_gem_¸óã
)

	)

59 
	#DRM_IOCTL_AMDGPU_GEM_MMAP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_GEM_MMAP
, 
drm_amdgpu_gem_mm≠
)

	)

60 
	#DRM_IOCTL_AMDGPU_CTX
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_CTX
, 
drm_amdgpu_˘x
)

	)

61 
	#DRM_IOCTL_AMDGPU_BO_LIST
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_BO_LIST
, 
drm_amdgpu_bo_li°
)

	)

62 
	#DRM_IOCTL_AMDGPU_CS
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_CS
, 
drm_amdgpu_cs
)

	)

63 
	#DRM_IOCTL_AMDGPU_INFO
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_INFO
, 
drm_amdgpu_öfo
)

	)

64 
	#DRM_IOCTL_AMDGPU_GEM_METADATA
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_GEM_METADATA
, 
drm_amdgpu_gem_mëad©a
)

	)

65 
	#DRM_IOCTL_AMDGPU_GEM_WAIT_IDLE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_GEM_WAIT_IDLE
, 
drm_amdgpu_gem_waô_idÀ
)

	)

66 
	#DRM_IOCTL_AMDGPU_GEM_VA
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_GEM_VA
, 
drm_amdgpu_gem_va
)

	)

67 
	#DRM_IOCTL_AMDGPU_WAIT_CS
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_WAIT_CS
, 
drm_amdgpu_waô_cs
)

	)

68 
	#DRM_IOCTL_AMDGPU_GEM_OP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_GEM_OP
, 
drm_amdgpu_gem_›
)

	)

69 
	#DRM_IOCTL_AMDGPU_GEM_USERPTR
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_GEM_USERPTR
, 
drm_amdgpu_gem_u£Ωå
)

	)

70 
	#DRM_IOCTL_AMDGPU_WAIT_FENCES
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_WAIT_FENCES
, 
drm_amdgpu_waô_„n˚s
)

	)

71 
	#DRM_IOCTL_AMDGPU_VM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_VM
, 
drm_amdgpu_vm
)

	)

72 
	#DRM_IOCTL_AMDGPU_FENCE_TO_HANDLE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_FENCE_TO_HANDLE
, 
drm_amdgpu_„n˚_to_h™dÀ
)

	)

73 
	#DRM_IOCTL_AMDGPU_SCHED
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_AMDGPU_SCHED
, 
drm_amdgpu_sched
)

	)

75 
	#AMDGPU_GEM_DOMAIN_CPU
 0x1

	)

76 
	#AMDGPU_GEM_DOMAIN_GTT
 0x2

	)

77 
	#AMDGPU_GEM_DOMAIN_VRAM
 0x4

	)

78 
	#AMDGPU_GEM_DOMAIN_GDS
 0x8

	)

79 
	#AMDGPU_GEM_DOMAIN_GWS
 0x10

	)

80 
	#AMDGPU_GEM_DOMAIN_OA
 0x20

	)

83 
	#AMDGPU_GEM_CREATE_CPU_ACCESS_REQUIRED
 (1 << 0)

	)

85 
	#AMDGPU_GEM_CREATE_NO_CPU_ACCESS
 (1 << 1)

	)

87 
	#AMDGPU_GEM_CREATE_CPU_GTT_USWC
 (1 << 2)

	)

89 
	#AMDGPU_GEM_CREATE_VRAM_CLEARED
 (1 << 3)

	)

91 
	#AMDGPU_GEM_CREATE_SHADOW
 (1 << 4)

	)

93 
	#AMDGPU_GEM_CREATE_VRAM_CONTIGUOUS
 (1 << 5)

	)

95 
	#AMDGPU_GEM_CREATE_VM_ALWAYS_VALID
 (1 << 6)

	)

97 
	#AMDGPU_GEM_CREATE_EXPLICIT_SYNC
 (1 << 7)

	)

99 
	sdrm_amdgpu_gem_¸óã_ö
 {

101 
__u64
 
bo_size
;

103 
__u64
 
Æignmít
;

105 
__u64
 
domaös
;

107 
__u64
 
domaö_Êags
;

110 
	sdrm_amdgpu_gem_¸óã_out
 {

112 
__u32
 
h™dÀ
;

113 
__u32
 
_∑d
;

116 
	udrm_amdgpu_gem_¸óã
 {

117 
drm_amdgpu_gem_¸óã_ö
 
ö
;

118 
drm_amdgpu_gem_¸óã_out
 
out
;

122 
	#AMDGPU_BO_LIST_OP_CREATE
 0

	)

124 
	#AMDGPU_BO_LIST_OP_DESTROY
 1

	)

126 
	#AMDGPU_BO_LIST_OP_UPDATE
 2

	)

128 
	sdrm_amdgpu_bo_li°_ö
 {

130 
__u32
 
›î©i⁄
;

132 
__u32
 
li°_h™dÀ
;

134 
__u32
 
bo_numbî
;

136 
__u32
 
bo_öfo_size
;

138 
__u64
 
bo_öfo_±r
;

141 
	sdrm_amdgpu_bo_li°_íåy
 {

143 
__u32
 
bo_h™dÀ
;

145 
__u32
 
bo_¥i‹ôy
;

148 
	sdrm_amdgpu_bo_li°_out
 {

150 
__u32
 
li°_h™dÀ
;

151 
__u32
 
_∑d
;

154 
	udrm_amdgpu_bo_li°
 {

155 
drm_amdgpu_bo_li°_ö
 
ö
;

156 
drm_amdgpu_bo_li°_out
 
out
;

160 
	#AMDGPU_CTX_OP_ALLOC_CTX
 1

	)

161 
	#AMDGPU_CTX_OP_FREE_CTX
 2

	)

162 
	#AMDGPU_CTX_OP_QUERY_STATE
 3

	)

163 
	#AMDGPU_CTX_OP_QUERY_STATE2
 4

	)

166 
	#AMDGPU_CTX_NO_RESET
 0

	)

168 
	#AMDGPU_CTX_GUILTY_RESET
 1

	)

170 
	#AMDGPU_CTX_INNOCENT_RESET
 2

	)

172 
	#AMDGPU_CTX_UNKNOWN_RESET
 3

	)

175 
	#AMDGPU_CTX_QUERY2_FLAGS_RESET
 (1<<0)

	)

177 
	#AMDGPU_CTX_QUERY2_FLAGS_VRAMLOST
 (1<<1)

	)

179 
	#AMDGPU_CTX_QUERY2_FLAGS_GUILTY
 (1<<2)

	)

182 
	#AMDGPU_CTX_PRIORITY_UNSET
 -2048

	)

183 
	#AMDGPU_CTX_PRIORITY_VERY_LOW
 -1023

	)

184 
	#AMDGPU_CTX_PRIORITY_LOW
 -512

	)

185 
	#AMDGPU_CTX_PRIORITY_NORMAL
 0

	)

187 
	#AMDGPU_CTX_PRIORITY_HIGH
 512

	)

188 
	#AMDGPU_CTX_PRIORITY_VERY_HIGH
 1023

	)

190 
	sdrm_amdgpu_˘x_ö
 {

192 
__u32
 
›
;

194 
__u32
 
Êags
;

195 
__u32
 
˘x_id
;

196 
__s32
 
¥i‹ôy
;

199 
	udrm_amdgpu_˘x_out
 {

201 
__u32
 
˘x_id
;

202 
__u32
 
_∑d
;

203 } 
Æloc
;

207 
__u64
 
Êags
;

209 
__u32
 
h™gs
;

211 
__u32
 
ª£t_°©us
;

212 } 
°©e
;

215 
	udrm_amdgpu_˘x
 {

216 
drm_amdgpu_˘x_ö
 
ö
;

217 
drm_amdgpu_˘x_out
 
out
;

221 
	#AMDGPU_VM_OP_RESERVE_VMID
 1

	)

222 
	#AMDGPU_VM_OP_UNRESERVE_VMID
 2

	)

224 
	sdrm_amdgpu_vm_ö
 {

226 
__u32
 
›
;

227 
__u32
 
Êags
;

230 
	sdrm_amdgpu_vm_out
 {

232 
__u64
 
Êags
;

235 
	udrm_amdgpu_vm
 {

236 
drm_amdgpu_vm_ö
 
ö
;

237 
drm_amdgpu_vm_out
 
out
;

241 
	#AMDGPU_SCHED_OP_PROCESS_PRIORITY_OVERRIDE
 1

	)

243 
	sdrm_amdgpu_sched_ö
 {

245 
__u32
 
›
;

246 
__u32
 
fd
;

247 
__s32
 
¥i‹ôy
;

248 
__u32
 
Êags
;

251 
	udrm_amdgpu_sched
 {

252 
drm_amdgpu_sched_ö
 
ö
;

260 
	#AMDGPU_GEM_USERPTR_READONLY
 (1 << 0)

	)

261 
	#AMDGPU_GEM_USERPTR_ANONONLY
 (1 << 1)

	)

262 
	#AMDGPU_GEM_USERPTR_VALIDATE
 (1 << 2)

	)

263 
	#AMDGPU_GEM_USERPTR_REGISTER
 (1 << 3)

	)

265 
	sdrm_amdgpu_gem_u£Ωå
 {

266 
__u64
 
addr
;

267 
__u64
 
size
;

269 
__u32
 
Êags
;

271 
__u32
 
h™dÀ
;

276 
	#AMDGPU_TILING_ARRAY_MODE_SHIFT
 0

	)

277 
	#AMDGPU_TILING_ARRAY_MODE_MASK
 0xf

	)

278 
	#AMDGPU_TILING_PIPE_CONFIG_SHIFT
 4

	)

279 
	#AMDGPU_TILING_PIPE_CONFIG_MASK
 0x1f

	)

280 
	#AMDGPU_TILING_TILE_SPLIT_SHIFT
 9

	)

281 
	#AMDGPU_TILING_TILE_SPLIT_MASK
 0x7

	)

282 
	#AMDGPU_TILING_MICRO_TILE_MODE_SHIFT
 12

	)

283 
	#AMDGPU_TILING_MICRO_TILE_MODE_MASK
 0x7

	)

284 
	#AMDGPU_TILING_BANK_WIDTH_SHIFT
 15

	)

285 
	#AMDGPU_TILING_BANK_WIDTH_MASK
 0x3

	)

286 
	#AMDGPU_TILING_BANK_HEIGHT_SHIFT
 17

	)

287 
	#AMDGPU_TILING_BANK_HEIGHT_MASK
 0x3

	)

288 
	#AMDGPU_TILING_MACRO_TILE_ASPECT_SHIFT
 19

	)

289 
	#AMDGPU_TILING_MACRO_TILE_ASPECT_MASK
 0x3

	)

290 
	#AMDGPU_TILING_NUM_BANKS_SHIFT
 21

	)

291 
	#AMDGPU_TILING_NUM_BANKS_MASK
 0x3

	)

294 
	#AMDGPU_TILING_SWIZZLE_MODE_SHIFT
 0

	)

295 
	#AMDGPU_TILING_SWIZZLE_MODE_MASK
 0x1f

	)

298 
	#AMDGPU_TILING_SET
(
fõld
, 
vÆue
) \

299 (((
__u64
)(
vÆue
Ë& 
AMDGPU_TILING_
##
fõld
##
_MASK
Ë<< AMDGPU_TILING_##fõld##
_SHIFT
)

	)

300 
	#AMDGPU_TILING_GET
(
vÆue
, 
fõld
) \

301 (((
__u64
)(
vÆue
Ë>> 
AMDGPU_TILING_
##
fõld
##
_SHIFT
Ë& AMDGPU_TILING_##fõld##
_MASK
)

	)

303 
	#AMDGPU_GEM_METADATA_OP_SET_METADATA
 1

	)

304 
	#AMDGPU_GEM_METADATA_OP_GET_METADATA
 2

	)

307 
	sdrm_amdgpu_gem_mëad©a
 {

309 
__u32
 
h™dÀ
;

311 
__u32
 
›
;

314 
__u64
 
Êags
;

316 
__u64
 
tûög_öfo
;

317 
__u32
 
d©a_size_byãs
;

318 
__u32
 
d©a
[64];

319 } 
d©a
;

322 
	sdrm_amdgpu_gem_mm≠_ö
 {

324 
__u32
 
h™dÀ
;

325 
__u32
 
_∑d
;

328 
	sdrm_amdgpu_gem_mm≠_out
 {

330 
__u64
 
addr_±r
;

333 
	udrm_amdgpu_gem_mm≠
 {

334 
drm_amdgpu_gem_mm≠_ö
 
ö
;

335 
drm_amdgpu_gem_mm≠_out
 
out
;

338 
	sdrm_amdgpu_gem_waô_idÀ_ö
 {

340 
__u32
 
h™dÀ
;

342 
__u32
 
Êags
;

344 
__u64
 
timeout
;

347 
	sdrm_amdgpu_gem_waô_idÀ_out
 {

349 
__u32
 
°©us
;

351 
__u32
 
domaö
;

354 
	udrm_amdgpu_gem_waô_idÀ
 {

355 
drm_amdgpu_gem_waô_idÀ_ö
 
ö
;

356 
drm_amdgpu_gem_waô_idÀ_out
 
out
;

359 
	sdrm_amdgpu_waô_cs_ö
 {

364 
__u64
 
h™dÀ
;

366 
__u64
 
timeout
;

367 
__u32
 
ù_ty≥
;

368 
__u32
 
ù_ö°™˚
;

369 
__u32
 
rög
;

370 
__u32
 
˘x_id
;

373 
	sdrm_amdgpu_waô_cs_out
 {

375 
__u64
 
°©us
;

378 
	udrm_amdgpu_waô_cs
 {

379 
drm_amdgpu_waô_cs_ö
 
ö
;

380 
drm_amdgpu_waô_cs_out
 
out
;

383 
	sdrm_amdgpu_„n˚
 {

384 
__u32
 
˘x_id
;

385 
__u32
 
ù_ty≥
;

386 
__u32
 
ù_ö°™˚
;

387 
__u32
 
rög
;

388 
__u64
 
£q_no
;

391 
	sdrm_amdgpu_waô_„n˚s_ö
 {

393 
__u64
 
„n˚s
;

394 
__u32
 
„n˚_cou¡
;

395 
__u32
 
waô_Æl
;

396 
__u64
 
timeout_ns
;

399 
	sdrm_amdgpu_waô_„n˚s_out
 {

400 
__u32
 
°©us
;

401 
__u32
 
fú°_sig«Àd
;

404 
	udrm_amdgpu_waô_„n˚s
 {

405 
drm_amdgpu_waô_„n˚s_ö
 
ö
;

406 
drm_amdgpu_waô_„n˚s_out
 
out
;

409 
	#AMDGPU_GEM_OP_GET_GEM_CREATE_INFO
 0

	)

410 
	#AMDGPU_GEM_OP_SET_PLACEMENT
 1

	)

413 
	sdrm_amdgpu_gem_›
 {

415 
__u32
 
h™dÀ
;

417 
__u32
 
›
;

419 
__u64
 
vÆue
;

422 
	#AMDGPU_VA_OP_MAP
 1

	)

423 
	#AMDGPU_VA_OP_UNMAP
 2

	)

424 
	#AMDGPU_VA_OP_CLEAR
 3

	)

425 
	#AMDGPU_VA_OP_REPLACE
 4

	)

428 
	#AMDGPU_VM_DELAY_UPDATE
 (1 << 0)

	)

432 
	#AMDGPU_VM_PAGE_READABLE
 (1 << 1)

	)

434 
	#AMDGPU_VM_PAGE_WRITEABLE
 (1 << 2)

	)

436 
	#AMDGPU_VM_PAGE_EXECUTABLE
 (1 << 3)

	)

438 
	#AMDGPU_VM_PAGE_PRT
 (1 << 4)

	)

440 
	#AMDGPU_VM_MTYPE_MASK
 (0x‡<< 5)

	)

442 
	#AMDGPU_VM_MTYPE_DEFAULT
 (0 << 5)

	)

444 
	#AMDGPU_VM_MTYPE_NC
 (1 << 5)

	)

446 
	#AMDGPU_VM_MTYPE_WC
 (2 << 5)

	)

448 
	#AMDGPU_VM_MTYPE_CC
 (3 << 5)

	)

450 
	#AMDGPU_VM_MTYPE_UC
 (4 << 5)

	)

452 
	sdrm_amdgpu_gem_va
 {

454 
__u32
 
h™dÀ
;

455 
__u32
 
_∑d
;

457 
__u32
 
›î©i⁄
;

459 
__u32
 
Êags
;

461 
__u64
 
va_addªss
;

463 
__u64
 
off£t_ö_bo
;

465 
__u64
 
m≠_size
;

468 
	#AMDGPU_HW_IP_GFX
 0

	)

469 
	#AMDGPU_HW_IP_COMPUTE
 1

	)

470 
	#AMDGPU_HW_IP_DMA
 2

	)

471 
	#AMDGPU_HW_IP_UVD
 3

	)

472 
	#AMDGPU_HW_IP_VCE
 4

	)

473 
	#AMDGPU_HW_IP_UVD_ENC
 5

	)

474 
	#AMDGPU_HW_IP_VCN_DEC
 6

	)

475 
	#AMDGPU_HW_IP_VCN_ENC
 7

	)

476 
	#AMDGPU_HW_IP_NUM
 8

	)

478 
	#AMDGPU_HW_IP_INSTANCE_MAX_COUNT
 1

	)

480 
	#AMDGPU_CHUNK_ID_IB
 0x01

	)

481 
	#AMDGPU_CHUNK_ID_FENCE
 0x02

	)

482 
	#AMDGPU_CHUNK_ID_DEPENDENCIES
 0x03

	)

483 
	#AMDGPU_CHUNK_ID_SYNCOBJ_IN
 0x04

	)

484 
	#AMDGPU_CHUNK_ID_SYNCOBJ_OUT
 0x05

	)

486 
	sdrm_amdgpu_cs_chunk
 {

487 
__u32
 
chunk_id
;

488 
__u32
 
Àngth_dw
;

489 
__u64
 
chunk_d©a
;

492 
	sdrm_amdgpu_cs_ö
 {

494 
__u32
 
˘x_id
;

496 
__u32
 
bo_li°_h™dÀ
;

497 
__u32
 
num_chunks
;

498 
__u32
 
_∑d
;

500 
__u64
 
chunks
;

503 
	sdrm_amdgpu_cs_out
 {

504 
__u64
 
h™dÀ
;

507 
	udrm_amdgpu_cs
 {

508 
drm_amdgpu_cs_ö
 
ö
;

509 
drm_amdgpu_cs_out
 
out
;

515 
	#AMDGPU_IB_FLAG_CE
 (1<<0)

	)

518 
	#AMDGPU_IB_FLAG_PREAMBLE
 (1<<1)

	)

521 
	#AMDGPU_IB_FLAG_PREEMPT
 (1<<2)

	)

523 
	sdrm_amdgpu_cs_chunk_ib
 {

524 
__u32
 
_∑d
;

526 
__u32
 
Êags
;

528 
__u64
 
va_°¨t
;

530 
__u32
 
ib_byãs
;

532 
__u32
 
ù_ty≥
;

534 
__u32
 
ù_ö°™˚
;

536 
__u32
 
rög
;

539 
	sdrm_amdgpu_cs_chunk_dï
 {

540 
__u32
 
ù_ty≥
;

541 
__u32
 
ù_ö°™˚
;

542 
__u32
 
rög
;

543 
__u32
 
˘x_id
;

544 
__u64
 
h™dÀ
;

547 
	sdrm_amdgpu_cs_chunk_„n˚
 {

548 
__u32
 
h™dÀ
;

549 
__u32
 
off£t
;

552 
	sdrm_amdgpu_cs_chunk_£m
 {

553 
__u32
 
h™dÀ
;

556 
	#AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ
 0

	)

557 
	#AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ_FD
 1

	)

558 
	#AMDGPU_FENCE_TO_HANDLE_GET_SYNC_FILE_FD
 2

	)

560 
	udrm_amdgpu_„n˚_to_h™dÀ
 {

562 
drm_amdgpu_„n˚
 
„n˚
;

563 
__u32
 
wh©
;

564 
__u32
 
∑d
;

565 } 
ö
;

567 
__u32
 
h™dÀ
;

568 } 
out
;

571 
	sdrm_amdgpu_cs_chunk_d©a
 {

573 
drm_amdgpu_cs_chunk_ib
 
ib_d©a
;

574 
drm_amdgpu_cs_chunk_„n˚
 
„n˚_d©a
;

582 
	#AMDGPU_IDS_FLAGS_FUSION
 0x1

	)

583 
	#AMDGPU_IDS_FLAGS_PREEMPTION
 0x2

	)

586 
	#AMDGPU_INFO_ACCEL_WORKING
 0x00

	)

588 
	#AMDGPU_INFO_CRTC_FROM_ID
 0x01

	)

590 
	#AMDGPU_INFO_HW_IP_INFO
 0x02

	)

592 
	#AMDGPU_INFO_HW_IP_COUNT
 0x03

	)

594 
	#AMDGPU_INFO_TIMESTAMP
 0x05

	)

596 
	#AMDGPU_INFO_FW_VERSION
 0x0e

	)

598 
	#AMDGPU_INFO_FW_VCE
 0x1

	)

600 
	#AMDGPU_INFO_FW_UVD
 0x2

	)

602 
	#AMDGPU_INFO_FW_GMC
 0x03

	)

604 
	#AMDGPU_INFO_FW_GFX_ME
 0x04

	)

606 
	#AMDGPU_INFO_FW_GFX_PFP
 0x05

	)

608 
	#AMDGPU_INFO_FW_GFX_CE
 0x06

	)

610 
	#AMDGPU_INFO_FW_GFX_RLC
 0x07

	)

612 
	#AMDGPU_INFO_FW_GFX_MEC
 0x08

	)

614 
	#AMDGPU_INFO_FW_SMC
 0x0a

	)

616 
	#AMDGPU_INFO_FW_SDMA
 0x0b

	)

618 
	#AMDGPU_INFO_FW_SOS
 0x0c

	)

620 
	#AMDGPU_INFO_FW_ASD
 0x0d

	)

622 
	#AMDGPU_INFO_NUM_BYTES_MOVED
 0x0f

	)

624 
	#AMDGPU_INFO_VRAM_USAGE
 0x10

	)

626 
	#AMDGPU_INFO_GTT_USAGE
 0x11

	)

628 
	#AMDGPU_INFO_GDS_CONFIG
 0x13

	)

630 
	#AMDGPU_INFO_VRAM_GTT
 0x14

	)

632 
	#AMDGPU_INFO_READ_MMR_REG
 0x15

	)

634 
	#AMDGPU_INFO_DEV_INFO
 0x16

	)

636 
	#AMDGPU_INFO_VIS_VRAM_USAGE
 0x17

	)

638 
	#AMDGPU_INFO_NUM_EVICTIONS
 0x18

	)

640 
	#AMDGPU_INFO_MEMORY
 0x19

	)

642 
	#AMDGPU_INFO_VCE_CLOCK_TABLE
 0x1A

	)

644 
	#AMDGPU_INFO_VBIOS
 0x1B

	)

646 
	#AMDGPU_INFO_VBIOS_SIZE
 0x1

	)

648 
	#AMDGPU_INFO_VBIOS_IMAGE
 0x2

	)

650 
	#AMDGPU_INFO_NUM_HANDLES
 0x1C

	)

652 
	#AMDGPU_INFO_SENSOR
 0x1D

	)

654 
	#AMDGPU_INFO_SENSOR_GFX_SCLK
 0x1

	)

656 
	#AMDGPU_INFO_SENSOR_GFX_MCLK
 0x2

	)

658 
	#AMDGPU_INFO_SENSOR_GPU_TEMP
 0x3

	)

660 
	#AMDGPU_INFO_SENSOR_GPU_LOAD
 0x4

	)

662 
	#AMDGPU_INFO_SENSOR_GPU_AVG_POWER
 0x5

	)

664 
	#AMDGPU_INFO_SENSOR_VDDNB
 0x6

	)

666 
	#AMDGPU_INFO_SENSOR_VDDGFX
 0x7

	)

668 
	#AMDGPU_INFO_NUM_VRAM_CPU_PAGE_FAULTS
 0x1E

	)

669 
	#AMDGPU_INFO_VRAM_LOST_COUNTER
 0x1F

	)

671 
	#AMDGPU_INFO_MMR_SE_INDEX_SHIFT
 0

	)

672 
	#AMDGPU_INFO_MMR_SE_INDEX_MASK
 0xff

	)

673 
	#AMDGPU_INFO_MMR_SH_INDEX_SHIFT
 8

	)

674 
	#AMDGPU_INFO_MMR_SH_INDEX_MASK
 0xff

	)

676 
	sdrm_amdgpu_quîy_fw
 {

678 
__u32
 
fw_ty≥
;

683 
__u32
 
ù_ö°™˚
;

688 
__u32
 
ödex
;

689 
__u32
 
_∑d
;

693 
	sdrm_amdgpu_öfo
 {

695 
__u64
 
ªtu∫_poöãr
;

698 
__u32
 
ªtu∫_size
;

700 
__u32
 
quîy
;

704 
__u32
 
id
;

705 
__u32
 
_∑d
;

706 } 
mode_¸tc
;

710 
__u32
 
ty≥
;

715 
__u32
 
ù_ö°™˚
;

716 } 
quîy_hw_ù
;

719 
__u32
 
dw‹d_off£t
;

721 
__u32
 
cou¡
;

722 
__u32
 
ö°™˚
;

724 
__u32
 
Êags
;

725 } 
ªad_mmr_ªg
;

727 
drm_amdgpu_quîy_fw
 
quîy_fw
;

730 
__u32
 
ty≥
;

731 
__u32
 
off£t
;

732 } 
vbios_öfo
;

735 
__u32
 
ty≥
;

736 } 
£ns‹_öfo
;

740 
	sdrm_amdgpu_öfo_gds
 {

742 
__u32
 
gds_gfx_∑πôi⁄_size
;

744 
__u32
 
compuã_∑πôi⁄_size
;

746 
__u32
 
gds_tŸÆ_size
;

748 
__u32
 
gws_≥r_gfx_∑πôi⁄
;

750 
__u32
 
gws_≥r_compuã_∑πôi⁄
;

752 
__u32
 
ﬂ_≥r_gfx_∑πôi⁄
;

754 
__u32
 
ﬂ_≥r_compuã_∑πôi⁄
;

755 
__u32
 
_∑d
;

758 
	sdrm_amdgpu_öfo_vøm_gâ
 {

759 
__u64
 
vøm_size
;

760 
__u64
 
vøm_˝u_ac˚ssibÀ_size
;

761 
__u64
 
gâ_size
;

764 
	sdrm_amdgpu_hóp_öfo
 {

766 
__u64
 
tŸÆ_hóp_size
;

769 
__u64
 
ußbÀ_hóp_size
;

777 
__u64
 
hóp_ußge
;

783 
__u64
 
max_Æloˇti⁄
;

786 
	sdrm_amdgpu_mem‹y_öfo
 {

787 
drm_amdgpu_hóp_öfo
 
vøm
;

788 
drm_amdgpu_hóp_öfo
 
˝u_ac˚ssibÀ_vøm
;

789 
drm_amdgpu_hóp_öfo
 
gâ
;

792 
	sdrm_amdgpu_öfo_fúmw¨e
 {

793 
__u32
 
vî
;

794 
__u32
 
„©uª
;

797 
	#AMDGPU_VRAM_TYPE_UNKNOWN
 0

	)

798 
	#AMDGPU_VRAM_TYPE_GDDR1
 1

	)

799 
	#AMDGPU_VRAM_TYPE_DDR2
 2

	)

800 
	#AMDGPU_VRAM_TYPE_GDDR3
 3

	)

801 
	#AMDGPU_VRAM_TYPE_GDDR4
 4

	)

802 
	#AMDGPU_VRAM_TYPE_GDDR5
 5

	)

803 
	#AMDGPU_VRAM_TYPE_HBM
 6

	)

804 
	#AMDGPU_VRAM_TYPE_DDR3
 7

	)

806 
	sdrm_amdgpu_öfo_devi˚
 {

808 
__u32
 
devi˚_id
;

810 
__u32
 
chù_ªv
;

811 
__u32
 
exã∫Æ_ªv
;

813 
__u32
 
pci_ªv
;

814 
__u32
 
Ámûy
;

815 
__u32
 
num_shadî_ígöes
;

816 
__u32
 
num_shadî_¨øys_≥r_ígöe
;

818 
__u32
 
gpu_cou¡î_‰eq
;

819 
__u64
 
max_ígöe_˛ock
;

820 
__u64
 
max_mem‹y_˛ock
;

822 
__u32
 
cu_a˘ive_numbî
;

824 
__u32
 
cu_ao_mask
;

825 
__u32
 
cu_bôm≠
[4][4];

827 
__u32
 
íabÀd_rb_pùes_mask
;

828 
__u32
 
num_rb_pùes
;

829 
__u32
 
num_hw_gfx_c⁄ãxts
;

830 
__u32
 
_∑d
;

831 
__u64
 
ids_Êags
;

833 
__u64
 
vútuÆ_addªss_off£t
;

835 
__u64
 
vútuÆ_addªss_max
;

837 
__u32
 
vútuÆ_addªss_Æignmít
;

839 
__u32
 
±e_‰agmít_size
;

840 
__u32
 
g¨t_∑ge_size
;

842 
__u32
 
˚_øm_size
;

844 
__u32
 
vøm_ty≥
;

846 
__u32
 
vøm_bô_width
;

848 
__u32
 
v˚_h¨ve°_c⁄fig
;

850 
__u32
 
gc_doubÀ_offchù_lds_buf
;

852 
__u64
 
¥im_buf_gpu_addr
;

854 
__u64
 
pos_buf_gpu_addr
;

856 
__u64
 
˙é_sb_buf_gpu_addr
;

858 
__u64
 
∑øm_buf_gpu_addr
;

859 
__u32
 
¥im_buf_size
;

860 
__u32
 
pos_buf_size
;

861 
__u32
 
˙é_sb_buf_size
;

862 
__u32
 
∑øm_buf_size
;

864 
__u32
 
wave_‰⁄t_size
;

866 
__u32
 
num_shadî_visibÀ_vg¥s
;

868 
__u32
 
num_cu_≥r_sh
;

870 
__u32
 
num_tcc_blocks
;

872 
__u32
 
gs_vgt_èbÀ_dïth
;

874 
__u32
 
gs_¥im_buf„r_dïth
;

876 
__u32
 
max_gs_waves_≥r_vgt
;

877 
__u32
 
_∑d1
;

879 
__u32
 
cu_ao_bôm≠
[4][4];

881 
__u64
 
high_va_off£t
;

883 
__u64
 
high_va_max
;

886 
	sdrm_amdgpu_öfo_hw_ù
 {

888 
__u32
 
hw_ù_vîsi⁄_maj‹
;

889 
__u32
 
hw_ù_vîsi⁄_mö‹
;

891 
__u64
 
ˇ∑bûôõs_Êags
;

893 
__u32
 
ib_°¨t_Æignmít
;

895 
__u32
 
ib_size_Æignmít
;

897 
__u32
 
avaûabÀ_rögs
;

898 
__u32
 
_∑d
;

901 
	sdrm_amdgpu_öfo_num_h™dÀs
 {

903 
__u32
 
uvd_max_h™dÀs
;

905 
__u32
 
uvd_u£d_h™dÀs
;

908 
	#AMDGPU_VCE_CLOCK_TABLE_ENTRIES
 6

	)

910 
	sdrm_amdgpu_öfo_v˚_˛ock_èbÀ_íåy
 {

912 
__u32
 
s˛k
;

914 
__u32
 
m˛k
;

916 
__u32
 
e˛k
;

917 
__u32
 
∑d
;

920 
	sdrm_amdgpu_öfo_v˚_˛ock_èbÀ
 {

921 
drm_amdgpu_öfo_v˚_˛ock_èbÀ_íåy
 
íåõs
[
AMDGPU_VCE_CLOCK_TABLE_ENTRIES
];

922 
__u32
 
num_vÆid_íåõs
;

923 
__u32
 
∑d
;

929 
	#AMDGPU_FAMILY_UNKNOWN
 0

	)

930 
	#AMDGPU_FAMILY_SI
 110

	)

931 
	#AMDGPU_FAMILY_CI
 120

	)

932 
	#AMDGPU_FAMILY_KV
 125

	)

933 
	#AMDGPU_FAMILY_VI
 130

	)

934 
	#AMDGPU_FAMILY_CZ
 135

	)

935 
	#AMDGPU_FAMILY_AI
 141

	)

936 
	#AMDGPU_FAMILY_RV
 142

	)

938 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/armada_drm.h

10 #i‚de‡
DRM_ARMADA_IOCTL_H


11 
	#DRM_ARMADA_IOCTL_H


	)

13 
	~"drm.h
"

15 #i‡
deföed
(
__˝lu•lus
)

19 
	#DRM_ARMADA_GEM_CREATE
 0x00

	)

20 
	#DRM_ARMADA_GEM_MMAP
 0x02

	)

21 
	#DRM_ARMADA_GEM_PWRITE
 0x03

	)

23 
	#ARMADA_IOCTL
(
dú
, 
«me
, 
°r
) \

24 
DRM_
##
	`dú
(
DRM_COMMAND_BASE
 + 
DRM_ARMADA_
##
«me
, 
drm_¨mada_
##
°r
)

	)

26 
	sdrm_¨mada_gem_¸óã
 {

27 
__u32
 
h™dÀ
;

28 
__u32
 
size
;

30 
	#DRM_IOCTL_ARMADA_GEM_CREATE
 \

31 
	`ARMADA_IOCTL
(
IOWR
, 
GEM_CREATE
, 
gem_¸óã
)

	)

33 
	sdrm_¨mada_gem_mm≠
 {

34 
__u32
 
h™dÀ
;

35 
__u32
 
∑d
;

36 
__u64
 
off£t
;

37 
__u64
 
size
;

38 
__u64
 
addr
;

40 
	#DRM_IOCTL_ARMADA_GEM_MMAP
 \

41 
	`ARMADA_IOCTL
(
IOWR
, 
GEM_MMAP
, 
gem_mm≠
)

	)

43 
	sdrm_¨mada_gem_pwrôe
 {

44 
__u64
 
±r
;

45 
__u32
 
h™dÀ
;

46 
__u32
 
off£t
;

47 
__u32
 
size
;

49 
	#DRM_IOCTL_ARMADA_GEM_PWRITE
 \

50 
	`ARMADA_IOCTL
(
IOW
, 
GEM_PWRITE
, 
gem_pwrôe
)

	)

52 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/drm.h

36 #i‚de‡
_DRM_H_


37 
	#_DRM_H_


	)

39 #i‡
deföed
(
__KERNEL__
)

41 
	~<löux/ty≥s.h
>

42 
	~<asm/io˘l.h
>

43 
	tdrm_h™dÀ_t
;

45 #ñi‡
deföed
(
__löux__
)

47 
	~<löux/ty≥s.h
>

48 
	~<asm/io˘l.h
>

49 
	tdrm_h™dÀ_t
;

53 
	~<sys/ioccom.h
>

54 
	~<sys/ty≥s.h
>

56 
öt8_t
 
	t__s8
;

57 
uöt8_t
 
	t__u8
;

58 
öt16_t
 
	t__s16
;

59 
uöt16_t
 
	t__u16
;

60 
öt32_t
 
	t__s32
;

61 
uöt32_t
 
	t__u32
;

62 
öt64_t
 
	t__s64
;

63 
uöt64_t
 
	t__u64
;

64 
size_t
 
	t__kî√l_size_t
;

66 
	tdrm_h™dÀ_t
;

67 
	~<drm/drm_os_‰ìbsd.h
>

70 #i‡
deföed
(
__˝lu•lus
)

74 
	#DRM_NAME
 "drm"

	)

75 
	#DRM_MIN_ORDER
 5

	)

76 
	#DRM_MAX_ORDER
 22

	)

77 
	#DRM_RAM_PERCENT
 10

	)

79 
	#_DRM_LOCK_HELD
 0x80000000U

	)

80 
	#_DRM_LOCK_CONT
 0x40000000U

	)

81 
	#_DRM_LOCK_IS_HELD
(
lock
Ë(÷ockË& 
_DRM_LOCK_HELD
)

	)

82 
	#_DRM_LOCK_IS_CONT
(
lock
Ë(÷ockË& 
_DRM_LOCK_CONT
)

	)

83 
	#_DRM_LOCKING_CONTEXT
(
lock
Ë(÷ockË& ~(
_DRM_LOCK_HELD
|
_DRM_LOCK_CONT
))

	)

85 
	tdrm_c⁄ãxt_t
;

86 
	tdrm_døwabÀ_t
;

87 
	tdrm_magic_t
;

98 
	sdrm_˛ù_ª˘
 {

99 
x1
;

100 
y1
;

101 
x2
;

102 
y2
;

108 
	sdrm_døwabÀ_öfo
 {

109 
num_ª˘s
;

110 
drm_˛ù_ª˘
 *
ª˘s
;

116 
	sdrm_ãx_ªgi⁄
 {

117 
√xt
;

118 
¥ev
;

119 
ö_u£
;

120 
∑ddög
;

121 
age
;

131 
	sdrm_hw_lock
 {

132 
__vﬁ©ûe__
 
lock
;

133 
∑ddög
[60];

141 
	sdrm_vîsi⁄
 {

142 
vîsi⁄_maj‹
;

143 
vîsi⁄_mö‹
;

144 
vîsi⁄_∑tchÀvñ
;

145 
__kî√l_size_t
 
«me_Àn
;

146 
__u£r
 *
«me
;

147 
__kî√l_size_t
 
d©e_Àn
;

148 
__u£r
 *
d©e
;

149 
__kî√l_size_t
 
desc_Àn
;

150 
__u£r
 *
desc
;

158 
	sdrm_unique
 {

159 
__kî√l_size_t
 
unique_Àn
;

160 
__u£r
 *
unique
;

163 
	sdrm_li°
 {

164 
cou¡
;

165 
drm_vîsi⁄
 
__u£r
 *
vîsi⁄
;

168 
	sdrm_block
 {

169 
unu£d
;

177 
	sdrm_c⁄åﬁ
 {

179 
DRM_ADD_COMMAND
,

180 
DRM_RM_COMMAND
,

181 
DRM_INST_HANDLER
,

182 
DRM_UNINST_HANDLER


183 } 
func
;

184 
úq
;

190 
	edrm_m≠_ty≥
 {

191 
_DRM_FRAME_BUFFER
 = 0,

192 
_DRM_REGISTERS
 = 1,

193 
_DRM_SHM
 = 2,

194 
_DRM_AGP
 = 3,

195 
_DRM_SCATTER_GATHER
 = 4,

196 
_DRM_CONSISTENT
 = 5

202 
	edrm_m≠_Êags
 {

203 
_DRM_RESTRICTED
 = 0x01,

204 
_DRM_READ_ONLY
 = 0x02,

205 
_DRM_LOCKED
 = 0x04,

206 
_DRM_KERNEL
 = 0x08,

207 
_DRM_WRITE_COMBINING
 = 0x10,

208 
_DRM_CONTAINS_LOCK
 = 0x20,

209 
_DRM_REMOVABLE
 = 0x40,

210 
_DRM_DRIVER
 = 0x80

213 
	sdrm_˘x_¥iv_m≠
 {

214 
˘x_id
;

215 *
h™dÀ
;

224 
	sdrm_m≠
 {

225 
off£t
;

226 
size
;

227 
drm_m≠_ty≥
 
ty≥
;

228 
drm_m≠_Êags
 
Êags
;

229 *
h™dÀ
;

231 
mår
;

238 
	sdrm_˛õ¡
 {

239 
idx
;

240 
auth
;

241 
pid
;

242 
uid
;

243 
magic
;

244 
iocs
;

247 
	edrm_°©_ty≥
 {

248 
_DRM_STAT_LOCK
,

249 
_DRM_STAT_OPENS
,

250 
_DRM_STAT_CLOSES
,

251 
_DRM_STAT_IOCTLS
,

252 
_DRM_STAT_LOCKS
,

253 
_DRM_STAT_UNLOCKS
,

254 
_DRM_STAT_VALUE
,

255 
_DRM_STAT_BYTE
,

256 
_DRM_STAT_COUNT
,

258 
_DRM_STAT_IRQ
,

259 
_DRM_STAT_PRIMARY
,

260 
_DRM_STAT_SECONDARY
,

261 
_DRM_STAT_DMA
,

262 
_DRM_STAT_SPECIAL
,

263 
_DRM_STAT_MISSED


270 
	sdrm_°©s
 {

271 
cou¡
;

273 
vÆue
;

274 
drm_°©_ty≥
 
ty≥
;

275 } 
d©a
[15];

281 
	edrm_lock_Êags
 {

282 
_DRM_LOCK_READY
 = 0x01,

283 
_DRM_LOCK_QUIESCENT
 = 0x02,

284 
_DRM_LOCK_FLUSH
 = 0x04,

285 
_DRM_LOCK_FLUSH_ALL
 = 0x08,

289 
_DRM_HALT_ALL_QUEUES
 = 0x10,

290 
_DRM_HALT_CUR_QUEUES
 = 0x20

298 
	sdrm_lock
 {

299 
c⁄ãxt
;

300 
drm_lock_Êags
 
Êags
;

311 
	edrm_dma_Êags
 {

313 
_DRM_DMA_BLOCK
 = 0x01,

323 
_DRM_DMA_WHILE_LOCKED
 = 0x02,

324 
_DRM_DMA_PRIORITY
 = 0x04,

327 
_DRM_DMA_WAIT
 = 0x10,

328 
_DRM_DMA_SMALLER_OK
 = 0x20,

329 
_DRM_DMA_LARGER_OK
 = 0x40

337 
	sdrm_buf_desc
 {

338 
cou¡
;

339 
size
;

340 
low_m¨k
;

341 
high_m¨k
;

343 
_DRM_PAGE_ALIGN
 = 0x01,

344 
_DRM_AGP_BUFFER
 = 0x02,

345 
_DRM_SG_BUFFER
 = 0x04,

346 
_DRM_FB_BUFFER
 = 0x08,

347 
_DRM_PCI_BUFFER_RO
 = 0x10

348 } 
Êags
;

349 
agp_°¨t
;

358 
	sdrm_buf_öfo
 {

359 
cou¡
;

360 
drm_buf_desc
 
__u£r
 *
li°
;

366 
	sdrm_buf_‰ì
 {

367 
cou¡
;

368 
__u£r
 *
li°
;

376 
	sdrm_buf_pub
 {

377 
idx
;

378 
tŸÆ
;

379 
u£d
;

380 
__u£r
 *
addªss
;

386 
	sdrm_buf_m≠
 {

387 
cou¡
;

388 #ifde‡
__˝lu•lus


389 
__u£r
 *
vút
;

391 
__u£r
 *
vútuÆ
;

393 
drm_buf_pub
 
__u£r
 *
li°
;

403 
	sdrm_dma
 {

404 
c⁄ãxt
;

405 
£nd_cou¡
;

406 
__u£r
 *
£nd_ödi˚s
;

407 
__u£r
 *
£nd_sizes
;

408 
drm_dma_Êags
 
Êags
;

409 
ªque°_cou¡
;

410 
ªque°_size
;

411 
__u£r
 *
ªque°_ödi˚s
;

412 
__u£r
 *
ªque°_sizes
;

413 
gø¡ed_cou¡
;

416 
	edrm_˘x_Êags
 {

417 
_DRM_CONTEXT_PRESERVED
 = 0x01,

418 
_DRM_CONTEXT_2DONLY
 = 0x02

426 
	sdrm_˘x
 {

427 
drm_c⁄ãxt_t
 
h™dÀ
;

428 
drm_˘x_Êags
 
Êags
;

434 
	sdrm_˘x_ªs
 {

435 
cou¡
;

436 
drm_˘x
 
__u£r
 *
c⁄ãxts
;

442 
	sdrm_døw
 {

443 
drm_døwabÀ_t
 
h™dÀ
;

450 
DRM_DRAWABLE_CLIPRECTS


451 } 
	tdrm_døwabÀ_öfo_ty≥_t
;

453 
	sdrm_upd©e_døw
 {

454 
drm_døwabÀ_t
 
h™dÀ
;

455 
ty≥
;

456 
num
;

457 
d©a
;

463 
	sdrm_auth
 {

464 
drm_magic_t
 
magic
;

472 
	sdrm_úq_busid
 {

473 
úq
;

474 
bu¢um
;

475 
devnum
;

476 
fun˙um
;

479 
	edrm_vbœnk_£q_ty≥
 {

480 
_DRM_VBLANK_ABSOLUTE
 = 0x0,

481 
_DRM_VBLANK_RELATIVE
 = 0x1,

483 
_DRM_VBLANK_HIGH_CRTC_MASK
 = 0x0000003e,

484 
_DRM_VBLANK_EVENT
 = 0x4000000,

485 
_DRM_VBLANK_FLIP
 = 0x8000000,

486 
_DRM_VBLANK_NEXTONMISS
 = 0x10000000,

487 
_DRM_VBLANK_SECONDARY
 = 0x20000000,

488 
_DRM_VBLANK_SIGNAL
 = 0x40000000

490 
	#_DRM_VBLANK_HIGH_CRTC_SHIFT
 1

	)

492 
	#_DRM_VBLANK_TYPES_MASK
 (
_DRM_VBLANK_ABSOLUTE
 | 
_DRM_VBLANK_RELATIVE
)

	)

493 
	#_DRM_VBLANK_FLAGS_MASK
 (
_DRM_VBLANK_EVENT
 | 
_DRM_VBLANK_SIGNAL
 | \

494 
_DRM_VBLANK_SECONDARY
 | 
_DRM_VBLANK_NEXTONMISS
)

	)

496 
	sdrm_waô_vbœnk_ªque°
 {

497 
drm_vbœnk_£q_ty≥
 
ty≥
;

498 
£quí˚
;

499 
sig«l
;

502 
	sdrm_waô_vbœnk_ª∂y
 {

503 
drm_vbœnk_£q_ty≥
 
ty≥
;

504 
£quí˚
;

505 
tvÆ_£c
;

506 
tvÆ_u£c
;

514 
	udrm_waô_vbœnk
 {

515 
drm_waô_vbœnk_ªque°
 
ªque°
;

516 
drm_waô_vbœnk_ª∂y
 
ª∂y
;

519 
	#_DRM_PRE_MODESET
 1

	)

520 
	#_DRM_POST_MODESET
 2

	)

527 
	sdrm_mode£t_˘l
 {

528 
__u32
 
¸tc
;

529 
__u32
 
cmd
;

537 
	sdrm_agp_mode
 {

538 
mode
;

546 
	sdrm_agp_buf„r
 {

547 
size
;

548 
h™dÀ
;

549 
ty≥
;

550 
physiˇl
;

558 
	sdrm_agp_bödög
 {

559 
h™dÀ
;

560 
off£t
;

570 
	sdrm_agp_öfo
 {

571 
agp_vîsi⁄_maj‹
;

572 
agp_vîsi⁄_mö‹
;

573 
mode
;

574 
≠îtuª_ba£
;

575 
≠îtuª_size
;

576 
mem‹y_Ælowed
;

577 
mem‹y_u£d
;

580 
id_víd‹
;

581 
id_devi˚
;

587 
	sdrm_sˇâî_g©hî
 {

588 
size
;

589 
h™dÀ
;

595 
	sdrm_£t_vîsi⁄
 {

596 
drm_di_maj‹
;

597 
drm_di_mö‹
;

598 
drm_dd_maj‹
;

599 
drm_dd_mö‹
;

603 
	sdrm_gem_˛o£
 {

605 
__u32
 
h™dÀ
;

606 
__u32
 
∑d
;

610 
	sdrm_gem_Êök
 {

612 
__u32
 
h™dÀ
;

615 
__u32
 
«me
;

619 
	sdrm_gem_›í
 {

621 
__u32
 
«me
;

624 
__u32
 
h™dÀ
;

627 
__u64
 
size
;

630 
	#DRM_CAP_DUMB_BUFFER
 0x1

	)

631 
	#DRM_CAP_VBLANK_HIGH_CRTC
 0x2

	)

632 
	#DRM_CAP_DUMB_PREFERRED_DEPTH
 0x3

	)

633 
	#DRM_CAP_DUMB_PREFER_SHADOW
 0x4

	)

634 
	#DRM_CAP_PRIME
 0x5

	)

635 
	#DRM_PRIME_CAP_IMPORT
 0x1

	)

636 
	#DRM_PRIME_CAP_EXPORT
 0x2

	)

637 
	#DRM_CAP_TIMESTAMP_MONOTONIC
 0x6

	)

638 
	#DRM_CAP_ASYNC_PAGE_FLIP
 0x7

	)

648 
	#DRM_CAP_CURSOR_WIDTH
 0x8

	)

649 
	#DRM_CAP_CURSOR_HEIGHT
 0x9

	)

650 
	#DRM_CAP_ADDFB2_MODIFIERS
 0x10

	)

651 
	#DRM_CAP_PAGE_FLIP_TARGET
 0x11

	)

652 
	#DRM_CAP_CRTC_IN_VBLANK_EVENT
 0x12

	)

653 
	#DRM_CAP_SYNCOBJ
 0x13

	)

656 
	sdrm_gë_ˇp
 {

657 
__u64
 
ˇ∑bûôy
;

658 
__u64
 
vÆue
;

668 
	#DRM_CLIENT_CAP_STEREO_3D
 1

	)

676 
	#DRM_CLIENT_CAP_UNIVERSAL_PLANES
 2

	)

683 
	#DRM_CLIENT_CAP_ATOMIC
 3

	)

686 
	sdrm_£t_˛õ¡_ˇp
 {

687 
__u64
 
ˇ∑bûôy
;

688 
__u64
 
vÆue
;

691 
	#DRM_RDWR
 
O_RDWR


	)

692 
	#DRM_CLOEXEC
 
O_CLOEXEC


	)

693 
	sdrm_¥ime_h™dÀ
 {

694 
__u32
 
h™dÀ
;

697 
__u32
 
Êags
;

700 
__s32
 
fd
;

703 
	sdrm_syncobj_¸óã
 {

704 
__u32
 
h™dÀ
;

705 
	#DRM_SYNCOBJ_CREATE_SIGNALED
 (1 << 0)

	)

706 
__u32
 
Êags
;

709 
	sdrm_syncobj_de°roy
 {

710 
__u32
 
h™dÀ
;

711 
__u32
 
∑d
;

714 
	#DRM_SYNCOBJ_FD_TO_HANDLE_FLAGS_IMPORT_SYNC_FILE
 (1 << 0)

	)

715 
	#DRM_SYNCOBJ_HANDLE_TO_FD_FLAGS_EXPORT_SYNC_FILE
 (1 << 0)

	)

716 
	sdrm_syncobj_h™dÀ
 {

717 
__u32
 
h™dÀ
;

718 
__u32
 
Êags
;

720 
__s32
 
fd
;

721 
__u32
 
∑d
;

724 
	#DRM_SYNCOBJ_WAIT_FLAGS_WAIT_ALL
 (1 << 0)

	)

725 
	#DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT
 (1 << 1)

	)

726 
	sdrm_syncobj_waô
 {

727 
__u64
 
h™dÀs
;

729 
__s64
 
timeout_n£c
;

730 
__u32
 
cou¡_h™dÀs
;

731 
__u32
 
Êags
;

732 
__u32
 
fú°_sig«Àd
;

733 
__u32
 
∑d
;

736 
	sdrm_syncobj_¨øy
 {

737 
__u64
 
h™dÀs
;

738 
__u32
 
cou¡_h™dÀs
;

739 
__u32
 
∑d
;

743 
	sdrm_¸tc_gë_£quí˚
 {

744 
__u32
 
¸tc_id
;

745 
__u32
 
a˘ive
;

746 
__u64
 
£quí˚
;

747 
__s64
 
£quí˚_ns
;

754 
	#DRM_CRTC_SEQUENCE_RELATIVE
 0x00000001

	)

755 
	#DRM_CRTC_SEQUENCE_NEXT_ON_MISS
 0x00000002

	)

757 
	sdrm_¸tc_queue_£quí˚
 {

758 
__u32
 
¸tc_id
;

759 
__u32
 
Êags
;

760 
__u64
 
£quí˚
;

761 
__u64
 
u£r_d©a
;

764 #i‡
deföed
(
__˝lu•lus
)

768 
	~"drm_mode.h
"

770 #i‡
deföed
(
__˝lu•lus
)

774 
	#DRM_IOCTL_BASE
 'd'

	)

775 
	#DRM_IO
(
ƒ
Ë
	`_IO
(
DRM_IOCTL_BASE
,ƒ)

	)

776 
	#DRM_IOR
(
ƒ
,
ty≥
Ë
	`_IOR
(
DRM_IOCTL_BASE
,ƒ,ty≥)

	)

777 
	#DRM_IOW
(
ƒ
,
ty≥
Ë
	`_IOW
(
DRM_IOCTL_BASE
,ƒ,ty≥)

	)

778 
	#DRM_IOWR
(
ƒ
,
ty≥
Ë
	`_IOWR
(
DRM_IOCTL_BASE
,ƒ,ty≥)

	)

780 
	#DRM_IOCTL_VERSION
 
	`DRM_IOWR
(0x00, 
drm_vîsi⁄
)

	)

781 
	#DRM_IOCTL_GET_UNIQUE
 
	`DRM_IOWR
(0x01, 
drm_unique
)

	)

782 
	#DRM_IOCTL_GET_MAGIC
 
	`DRM_IOR
–0x02, 
drm_auth
)

	)

783 
	#DRM_IOCTL_IRQ_BUSID
 
	`DRM_IOWR
(0x03, 
drm_úq_busid
)

	)

784 
	#DRM_IOCTL_GET_MAP
 
	`DRM_IOWR
(0x04, 
drm_m≠
)

	)

785 
	#DRM_IOCTL_GET_CLIENT
 
	`DRM_IOWR
(0x05, 
drm_˛õ¡
)

	)

786 
	#DRM_IOCTL_GET_STATS
 
	`DRM_IOR
–0x06, 
drm_°©s
)

	)

787 
	#DRM_IOCTL_SET_VERSION
 
	`DRM_IOWR
(0x07, 
drm_£t_vîsi⁄
)

	)

788 
	#DRM_IOCTL_MODESET_CTL
 
	`DRM_IOW
(0x08, 
drm_mode£t_˘l
)

	)

789 
	#DRM_IOCTL_GEM_CLOSE
 
	`DRM_IOW
 (0x09, 
drm_gem_˛o£
)

	)

790 
	#DRM_IOCTL_GEM_FLINK
 
	`DRM_IOWR
(0x0a, 
drm_gem_Êök
)

	)

791 
	#DRM_IOCTL_GEM_OPEN
 
	`DRM_IOWR
(0x0b, 
drm_gem_›í
)

	)

792 
	#DRM_IOCTL_GET_CAP
 
	`DRM_IOWR
(0x0c, 
drm_gë_ˇp
)

	)

793 
	#DRM_IOCTL_SET_CLIENT_CAP
 
	`DRM_IOW
–0x0d, 
drm_£t_˛õ¡_ˇp
)

	)

795 
	#DRM_IOCTL_SET_UNIQUE
 
	`DRM_IOW
–0x10, 
drm_unique
)

	)

796 
	#DRM_IOCTL_AUTH_MAGIC
 
	`DRM_IOW
–0x11, 
drm_auth
)

	)

797 
	#DRM_IOCTL_BLOCK
 
	`DRM_IOWR
(0x12, 
drm_block
)

	)

798 
	#DRM_IOCTL_UNBLOCK
 
	`DRM_IOWR
(0x13, 
drm_block
)

	)

799 
	#DRM_IOCTL_CONTROL
 
	`DRM_IOW
–0x14, 
drm_c⁄åﬁ
)

	)

800 
	#DRM_IOCTL_ADD_MAP
 
	`DRM_IOWR
(0x15, 
drm_m≠
)

	)

801 
	#DRM_IOCTL_ADD_BUFS
 
	`DRM_IOWR
(0x16, 
drm_buf_desc
)

	)

802 
	#DRM_IOCTL_MARK_BUFS
 
	`DRM_IOW
–0x17, 
drm_buf_desc
)

	)

803 
	#DRM_IOCTL_INFO_BUFS
 
	`DRM_IOWR
(0x18, 
drm_buf_öfo
)

	)

804 
	#DRM_IOCTL_MAP_BUFS
 
	`DRM_IOWR
(0x19, 
drm_buf_m≠
)

	)

805 
	#DRM_IOCTL_FREE_BUFS
 
	`DRM_IOW
–0x1a, 
drm_buf_‰ì
)

	)

807 
	#DRM_IOCTL_RM_MAP
 
	`DRM_IOW
–0x1b, 
drm_m≠
)

	)

809 
	#DRM_IOCTL_SET_SAREA_CTX
 
	`DRM_IOW
–0x1c, 
drm_˘x_¥iv_m≠
)

	)

810 
	#DRM_IOCTL_GET_SAREA_CTX
 
	`DRM_IOWR
(0x1d, 
drm_˘x_¥iv_m≠
)

	)

812 
	#DRM_IOCTL_SET_MASTER
 
	`DRM_IO
(0x1e)

	)

813 
	#DRM_IOCTL_DROP_MASTER
 
	`DRM_IO
(0x1f)

	)

815 
	#DRM_IOCTL_ADD_CTX
 
	`DRM_IOWR
(0x20, 
drm_˘x
)

	)

816 
	#DRM_IOCTL_RM_CTX
 
	`DRM_IOWR
(0x21, 
drm_˘x
)

	)

817 
	#DRM_IOCTL_MOD_CTX
 
	`DRM_IOW
–0x22, 
drm_˘x
)

	)

818 
	#DRM_IOCTL_GET_CTX
 
	`DRM_IOWR
(0x23, 
drm_˘x
)

	)

819 
	#DRM_IOCTL_SWITCH_CTX
 
	`DRM_IOW
–0x24, 
drm_˘x
)

	)

820 
	#DRM_IOCTL_NEW_CTX
 
	`DRM_IOW
–0x25, 
drm_˘x
)

	)

821 
	#DRM_IOCTL_RES_CTX
 
	`DRM_IOWR
(0x26, 
drm_˘x_ªs
)

	)

822 
	#DRM_IOCTL_ADD_DRAW
 
	`DRM_IOWR
(0x27, 
drm_døw
)

	)

823 
	#DRM_IOCTL_RM_DRAW
 
	`DRM_IOWR
(0x28, 
drm_døw
)

	)

824 
	#DRM_IOCTL_DMA
 
	`DRM_IOWR
(0x29, 
drm_dma
)

	)

825 
	#DRM_IOCTL_LOCK
 
	`DRM_IOW
–0x2a, 
drm_lock
)

	)

826 
	#DRM_IOCTL_UNLOCK
 
	`DRM_IOW
–0x2b, 
drm_lock
)

	)

827 
	#DRM_IOCTL_FINISH
 
	`DRM_IOW
–0x2c, 
drm_lock
)

	)

829 
	#DRM_IOCTL_PRIME_HANDLE_TO_FD
 
	`DRM_IOWR
(0x2d, 
drm_¥ime_h™dÀ
)

	)

830 
	#DRM_IOCTL_PRIME_FD_TO_HANDLE
 
	`DRM_IOWR
(0x2e, 
drm_¥ime_h™dÀ
)

	)

832 
	#DRM_IOCTL_AGP_ACQUIRE
 
	`DRM_IO
–0x30)

	)

833 
	#DRM_IOCTL_AGP_RELEASE
 
	`DRM_IO
–0x31)

	)

834 
	#DRM_IOCTL_AGP_ENABLE
 
	`DRM_IOW
–0x32, 
drm_agp_mode
)

	)

835 
	#DRM_IOCTL_AGP_INFO
 
	`DRM_IOR
–0x33, 
drm_agp_öfo
)

	)

836 
	#DRM_IOCTL_AGP_ALLOC
 
	`DRM_IOWR
(0x34, 
drm_agp_buf„r
)

	)

837 
	#DRM_IOCTL_AGP_FREE
 
	`DRM_IOW
–0x35, 
drm_agp_buf„r
)

	)

838 
	#DRM_IOCTL_AGP_BIND
 
	`DRM_IOW
–0x36, 
drm_agp_bödög
)

	)

839 
	#DRM_IOCTL_AGP_UNBIND
 
	`DRM_IOW
–0x37, 
drm_agp_bödög
)

	)

841 
	#DRM_IOCTL_SG_ALLOC
 
	`DRM_IOWR
(0x38, 
drm_sˇâî_g©hî
)

	)

842 
	#DRM_IOCTL_SG_FREE
 
	`DRM_IOW
–0x39, 
drm_sˇâî_g©hî
)

	)

844 
	#DRM_IOCTL_WAIT_VBLANK
 
	`DRM_IOWR
(0x3a, 
drm_waô_vbœnk
)

	)

846 
	#DRM_IOCTL_CRTC_GET_SEQUENCE
 
	`DRM_IOWR
(0x3b, 
drm_¸tc_gë_£quí˚
)

	)

847 
	#DRM_IOCTL_CRTC_QUEUE_SEQUENCE
 
	`DRM_IOWR
(0x3c, 
drm_¸tc_queue_£quí˚
)

	)

849 
	#DRM_IOCTL_UPDATE_DRAW
 
	`DRM_IOW
(0x3f, 
drm_upd©e_døw
)

	)

851 
	#DRM_IOCTL_MODE_GETRESOURCES
 
	`DRM_IOWR
(0xA0, 
drm_mode_ˇrd_ªs
)

	)

852 
	#DRM_IOCTL_MODE_GETCRTC
 
	`DRM_IOWR
(0xA1, 
drm_mode_¸tc
)

	)

853 
	#DRM_IOCTL_MODE_SETCRTC
 
	`DRM_IOWR
(0xA2, 
drm_mode_¸tc
)

	)

854 
	#DRM_IOCTL_MODE_CURSOR
 
	`DRM_IOWR
(0xA3, 
drm_mode_curs‹
)

	)

855 
	#DRM_IOCTL_MODE_GETGAMMA
 
	`DRM_IOWR
(0xA4, 
drm_mode_¸tc_lut
)

	)

856 
	#DRM_IOCTL_MODE_SETGAMMA
 
	`DRM_IOWR
(0xA5, 
drm_mode_¸tc_lut
)

	)

857 
	#DRM_IOCTL_MODE_GETENCODER
 
	`DRM_IOWR
(0xA6, 
drm_mode_gë_ícodî
)

	)

858 
	#DRM_IOCTL_MODE_GETCONNECTOR
 
	`DRM_IOWR
(0xA7, 
drm_mode_gë_c⁄√˘‹
)

	)

859 
	#DRM_IOCTL_MODE_ATTACHMODE
 
	`DRM_IOWR
(0xA8, 
drm_mode_mode_cmd
Ë

	)

860 
	#DRM_IOCTL_MODE_DETACHMODE
 
	`DRM_IOWR
(0xA9, 
drm_mode_mode_cmd
Ë

	)

862 
	#DRM_IOCTL_MODE_GETPROPERTY
 
	`DRM_IOWR
(0xAA, 
drm_mode_gë_¥›îty
)

	)

863 
	#DRM_IOCTL_MODE_SETPROPERTY
 
	`DRM_IOWR
(0xAB, 
drm_mode_c⁄√˘‹_£t_¥›îty
)

	)

864 
	#DRM_IOCTL_MODE_GETPROPBLOB
 
	`DRM_IOWR
(0xAC, 
drm_mode_gë_blob
)

	)

865 
	#DRM_IOCTL_MODE_GETFB
 
	`DRM_IOWR
(0xAD, 
drm_mode_fb_cmd
)

	)

866 
	#DRM_IOCTL_MODE_ADDFB
 
	`DRM_IOWR
(0xAE, 
drm_mode_fb_cmd
)

	)

867 
	#DRM_IOCTL_MODE_RMFB
 
	`DRM_IOWR
(0xAF, )

	)

868 
	#DRM_IOCTL_MODE_PAGE_FLIP
 
	`DRM_IOWR
(0xB0, 
drm_mode_¸tc_∑ge_Êù
)

	)

869 
	#DRM_IOCTL_MODE_DIRTYFB
 
	`DRM_IOWR
(0xB1, 
drm_mode_fb_dúty_cmd
)

	)

871 
	#DRM_IOCTL_MODE_CREATE_DUMB
 
	`DRM_IOWR
(0xB2, 
drm_mode_¸óã_dumb
)

	)

872 
	#DRM_IOCTL_MODE_MAP_DUMB
 
	`DRM_IOWR
(0xB3, 
drm_mode_m≠_dumb
)

	)

873 
	#DRM_IOCTL_MODE_DESTROY_DUMB
 
	`DRM_IOWR
(0xB4, 
drm_mode_de°roy_dumb
)

	)

874 
	#DRM_IOCTL_MODE_GETPLANERESOURCES
 
	`DRM_IOWR
(0xB5, 
drm_mode_gë_∂™e_ªs
)

	)

875 
	#DRM_IOCTL_MODE_GETPLANE
 
	`DRM_IOWR
(0xB6, 
drm_mode_gë_∂™e
)

	)

876 
	#DRM_IOCTL_MODE_SETPLANE
 
	`DRM_IOWR
(0xB7, 
drm_mode_£t_∂™e
)

	)

877 
	#DRM_IOCTL_MODE_ADDFB2
 
	`DRM_IOWR
(0xB8, 
drm_mode_fb_cmd2
)

	)

878 
	#DRM_IOCTL_MODE_OBJ_GETPROPERTIES
 
	`DRM_IOWR
(0xB9, 
drm_mode_obj_gë_¥›îtõs
)

	)

879 
	#DRM_IOCTL_MODE_OBJ_SETPROPERTY
 
	`DRM_IOWR
(0xBA, 
drm_mode_obj_£t_¥›îty
)

	)

880 
	#DRM_IOCTL_MODE_CURSOR2
 
	`DRM_IOWR
(0xBB, 
drm_mode_curs‹2
)

	)

881 
	#DRM_IOCTL_MODE_ATOMIC
 
	`DRM_IOWR
(0xBC, 
drm_mode_©omic
)

	)

882 
	#DRM_IOCTL_MODE_CREATEPROPBLOB
 
	`DRM_IOWR
(0xBD, 
drm_mode_¸óã_blob
)

	)

883 
	#DRM_IOCTL_MODE_DESTROYPROPBLOB
 
	`DRM_IOWR
(0xBE, 
drm_mode_de°roy_blob
)

	)

885 
	#DRM_IOCTL_SYNCOBJ_CREATE
 
	`DRM_IOWR
(0xBF, 
drm_syncobj_¸óã
)

	)

886 
	#DRM_IOCTL_SYNCOBJ_DESTROY
 
	`DRM_IOWR
(0xC0, 
drm_syncobj_de°roy
)

	)

887 
	#DRM_IOCTL_SYNCOBJ_HANDLE_TO_FD
 
	`DRM_IOWR
(0xC1, 
drm_syncobj_h™dÀ
)

	)

888 
	#DRM_IOCTL_SYNCOBJ_FD_TO_HANDLE
 
	`DRM_IOWR
(0xC2, 
drm_syncobj_h™dÀ
)

	)

889 
	#DRM_IOCTL_SYNCOBJ_WAIT
 
	`DRM_IOWR
(0xC3, 
drm_syncobj_waô
)

	)

890 
	#DRM_IOCTL_SYNCOBJ_RESET
 
	`DRM_IOWR
(0xC4, 
drm_syncobj_¨øy
)

	)

891 
	#DRM_IOCTL_SYNCOBJ_SIGNAL
 
	`DRM_IOWR
(0xC5, 
drm_syncobj_¨øy
)

	)

893 
	#DRM_IOCTL_MODE_CREATE_LEASE
 
	`DRM_IOWR
(0xC6, 
drm_mode_¸óã_Àa£
)

	)

894 
	#DRM_IOCTL_MODE_LIST_LESSEES
 
	`DRM_IOWR
(0xC7, 
drm_mode_li°_Às£es
)

	)

895 
	#DRM_IOCTL_MODE_GET_LEASE
 
	`DRM_IOWR
(0xC8, 
drm_mode_gë_Àa£
)

	)

896 
	#DRM_IOCTL_MODE_REVOKE_LEASE
 
	`DRM_IOWR
(0xC9, 
drm_mode_ªvoke_Àa£
)

	)

906 
	#DRM_COMMAND_BASE
 0x40

	)

907 
	#DRM_COMMAND_END
 0xA0

	)

921 
	sdrm_evít
 {

922 
__u32
 
ty≥
;

923 
__u32
 
Àngth
;

926 
	#DRM_EVENT_VBLANK
 0x01

	)

927 
	#DRM_EVENT_FLIP_COMPLETE
 0x02

	)

928 
	#DRM_EVENT_CRTC_SEQUENCE
 0x03

	)

930 
	sdrm_evít_vbœnk
 {

931 
drm_evít
 
ba£
;

932 
__u64
 
u£r_d©a
;

933 
__u32
 
tv_£c
;

934 
__u32
 
tv_u£c
;

935 
__u32
 
£quí˚
;

936 
__u32
 
¸tc_id
;

942 
	sdrm_evít_¸tc_£quí˚
 {

943 
drm_evít
 
ba£
;

944 
__u64
 
u£r_d©a
;

945 
__s64
 
time_ns
;

946 
__u64
 
£quí˚
;

950 #i‚de‡
__KERNEL__


951 
drm_˛ù_ª˘
 
	tdrm_˛ù_ª˘_t
;

952 
drm_døwabÀ_öfo
 
	tdrm_døwabÀ_öfo_t
;

953 
drm_ãx_ªgi⁄
 
	tdrm_ãx_ªgi⁄_t
;

954 
drm_hw_lock
 
	tdrm_hw_lock_t
;

955 
drm_vîsi⁄
 
	tdrm_vîsi⁄_t
;

956 
drm_unique
 
	tdrm_unique_t
;

957 
drm_li°
 
	tdrm_li°_t
;

958 
drm_block
 
	tdrm_block_t
;

959 
drm_c⁄åﬁ
 
	tdrm_c⁄åﬁ_t
;

960 
drm_m≠_ty≥
 
	tdrm_m≠_ty≥_t
;

961 
drm_m≠_Êags
 
	tdrm_m≠_Êags_t
;

962 
drm_˘x_¥iv_m≠
 
	tdrm_˘x_¥iv_m≠_t
;

963 
drm_m≠
 
	tdrm_m≠_t
;

964 
drm_˛õ¡
 
	tdrm_˛õ¡_t
;

965 
drm_°©_ty≥
 
	tdrm_°©_ty≥_t
;

966 
drm_°©s
 
	tdrm_°©s_t
;

967 
drm_lock_Êags
 
	tdrm_lock_Êags_t
;

968 
drm_lock
 
	tdrm_lock_t
;

969 
drm_dma_Êags
 
	tdrm_dma_Êags_t
;

970 
drm_buf_desc
 
	tdrm_buf_desc_t
;

971 
drm_buf_öfo
 
	tdrm_buf_öfo_t
;

972 
drm_buf_‰ì
 
	tdrm_buf_‰ì_t
;

973 
drm_buf_pub
 
	tdrm_buf_pub_t
;

974 
drm_buf_m≠
 
	tdrm_buf_m≠_t
;

975 
drm_dma
 
	tdrm_dma_t
;

976 
drm_waô_vbœnk
 
	tdrm_waô_vbœnk_t
;

977 
drm_agp_mode
 
	tdrm_agp_mode_t
;

978 
drm_˘x_Êags
 
	tdrm_˘x_Êags_t
;

979 
drm_˘x
 
	tdrm_˘x_t
;

980 
drm_˘x_ªs
 
	tdrm_˘x_ªs_t
;

981 
drm_døw
 
	tdrm_døw_t
;

982 
drm_upd©e_døw
 
	tdrm_upd©e_døw_t
;

983 
drm_auth
 
	tdrm_auth_t
;

984 
drm_úq_busid
 
	tdrm_úq_busid_t
;

985 
drm_vbœnk_£q_ty≥
 
	tdrm_vbœnk_£q_ty≥_t
;

987 
drm_agp_buf„r
 
	tdrm_agp_buf„r_t
;

988 
drm_agp_bödög
 
	tdrm_agp_bödög_t
;

989 
drm_agp_öfo
 
	tdrm_agp_öfo_t
;

990 
drm_sˇâî_g©hî
 
	tdrm_sˇâî_g©hî_t
;

991 
drm_£t_vîsi⁄
 
	tdrm_£t_vîsi⁄_t
;

994 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/drm_fourcc.h

24 #i‚de‡
DRM_FOURCC_H


25 
	#DRM_FOURCC_H


	)

27 
	~"drm.h
"

29 #i‡
deföed
(
__˝lu•lus
)

33 
	#fourcc_code
(
a
, 
b
, 
c
, 
d
Ë((
__u32
)(a) | ((__u32)(b) << 8) | \

34 ((
__u32
)(
c
Ë<< 16Ë| ((__u32)(
d
Ë<< 24))

	)

36 
	#DRM_FORMAT_BIG_ENDIAN
 (1<<31Ë

	)

39 
	#DRM_FORMAT_C8
 
	`fourcc_code
('C', '8', ' ', ' 'Ë

	)

42 
	#DRM_FORMAT_R8
 
	`fourcc_code
('R', '8', ' ', ' 'Ë

	)

45 
	#DRM_FORMAT_R16
 
	`fourcc_code
('R', '1', '6', ' 'Ë

	)

48 
	#DRM_FORMAT_RG88
 
	`fourcc_code
('R', 'G', '8', '8'Ë

	)

49 
	#DRM_FORMAT_GR88
 
	`fourcc_code
('G', 'R', '8', '8'Ë

	)

52 
	#DRM_FORMAT_RG1616
 
	`fourcc_code
('R', 'G', '3', '2'Ë

	)

53 
	#DRM_FORMAT_GR1616
 
	`fourcc_code
('G', 'R', '3', '2'Ë

	)

56 
	#DRM_FORMAT_RGB332
 
	`fourcc_code
('R', 'G', 'B', '8'Ë

	)

57 
	#DRM_FORMAT_BGR233
 
	`fourcc_code
('B', 'G', 'R', '8'Ë

	)

60 
	#DRM_FORMAT_XRGB4444
 
	`fourcc_code
('X', 'R', '1', '2'Ë

	)

61 
	#DRM_FORMAT_XBGR4444
 
	`fourcc_code
('X', 'B', '1', '2'Ë

	)

62 
	#DRM_FORMAT_RGBX4444
 
	`fourcc_code
('R', 'X', '1', '2'Ë

	)

63 
	#DRM_FORMAT_BGRX4444
 
	`fourcc_code
('B', 'X', '1', '2'Ë

	)

65 
	#DRM_FORMAT_ARGB4444
 
	`fourcc_code
('A', 'R', '1', '2'Ë

	)

66 
	#DRM_FORMAT_ABGR4444
 
	`fourcc_code
('A', 'B', '1', '2'Ë

	)

67 
	#DRM_FORMAT_RGBA4444
 
	`fourcc_code
('R', 'A', '1', '2'Ë

	)

68 
	#DRM_FORMAT_BGRA4444
 
	`fourcc_code
('B', 'A', '1', '2'Ë

	)

70 
	#DRM_FORMAT_XRGB1555
 
	`fourcc_code
('X', 'R', '1', '5'Ë

	)

71 
	#DRM_FORMAT_XBGR1555
 
	`fourcc_code
('X', 'B', '1', '5'Ë

	)

72 
	#DRM_FORMAT_RGBX5551
 
	`fourcc_code
('R', 'X', '1', '5'Ë

	)

73 
	#DRM_FORMAT_BGRX5551
 
	`fourcc_code
('B', 'X', '1', '5'Ë

	)

75 
	#DRM_FORMAT_ARGB1555
 
	`fourcc_code
('A', 'R', '1', '5'Ë

	)

76 
	#DRM_FORMAT_ABGR1555
 
	`fourcc_code
('A', 'B', '1', '5'Ë

	)

77 
	#DRM_FORMAT_RGBA5551
 
	`fourcc_code
('R', 'A', '1', '5'Ë

	)

78 
	#DRM_FORMAT_BGRA5551
 
	`fourcc_code
('B', 'A', '1', '5'Ë

	)

80 
	#DRM_FORMAT_RGB565
 
	`fourcc_code
('R', 'G', '1', '6'Ë

	)

81 
	#DRM_FORMAT_BGR565
 
	`fourcc_code
('B', 'G', '1', '6'Ë

	)

84 
	#DRM_FORMAT_RGB888
 
	`fourcc_code
('R', 'G', '2', '4'Ë

	)

85 
	#DRM_FORMAT_BGR888
 
	`fourcc_code
('B', 'G', '2', '4'Ë

	)

88 
	#DRM_FORMAT_XRGB8888
 
	`fourcc_code
('X', 'R', '2', '4'Ë

	)

89 
	#DRM_FORMAT_XBGR8888
 
	`fourcc_code
('X', 'B', '2', '4'Ë

	)

90 
	#DRM_FORMAT_RGBX8888
 
	`fourcc_code
('R', 'X', '2', '4'Ë

	)

91 
	#DRM_FORMAT_BGRX8888
 
	`fourcc_code
('B', 'X', '2', '4'Ë

	)

93 
	#DRM_FORMAT_ARGB8888
 
	`fourcc_code
('A', 'R', '2', '4'Ë

	)

94 
	#DRM_FORMAT_ABGR8888
 
	`fourcc_code
('A', 'B', '2', '4'Ë

	)

95 
	#DRM_FORMAT_RGBA8888
 
	`fourcc_code
('R', 'A', '2', '4'Ë

	)

96 
	#DRM_FORMAT_BGRA8888
 
	`fourcc_code
('B', 'A', '2', '4'Ë

	)

98 
	#DRM_FORMAT_XRGB2101010
 
	`fourcc_code
('X', 'R', '3', '0'Ë

	)

99 
	#DRM_FORMAT_XBGR2101010
 
	`fourcc_code
('X', 'B', '3', '0'Ë

	)

100 
	#DRM_FORMAT_RGBX1010102
 
	`fourcc_code
('R', 'X', '3', '0'Ë

	)

101 
	#DRM_FORMAT_BGRX1010102
 
	`fourcc_code
('B', 'X', '3', '0'Ë

	)

103 
	#DRM_FORMAT_ARGB2101010
 
	`fourcc_code
('A', 'R', '3', '0'Ë

	)

104 
	#DRM_FORMAT_ABGR2101010
 
	`fourcc_code
('A', 'B', '3', '0'Ë

	)

105 
	#DRM_FORMAT_RGBA1010102
 
	`fourcc_code
('R', 'A', '3', '0'Ë

	)

106 
	#DRM_FORMAT_BGRA1010102
 
	`fourcc_code
('B', 'A', '3', '0'Ë

	)

109 
	#DRM_FORMAT_YUYV
 
	`fourcc_code
('Y', 'U', 'Y', 'V'Ë

	)

110 
	#DRM_FORMAT_YVYU
 
	`fourcc_code
('Y', 'V', 'Y', 'U'Ë

	)

111 
	#DRM_FORMAT_UYVY
 
	`fourcc_code
('U', 'Y', 'V', 'Y'Ë

	)

112 
	#DRM_FORMAT_VYUY
 
	`fourcc_code
('V', 'Y', 'U', 'Y'Ë

	)

114 
	#DRM_FORMAT_AYUV
 
	`fourcc_code
('A', 'Y', 'U', 'V'Ë

	)

121 
	#DRM_FORMAT_XRGB8888_A8
 
	`fourcc_code
('X', 'R', 'A', '8')

	)

122 
	#DRM_FORMAT_XBGR8888_A8
 
	`fourcc_code
('X', 'B', 'A', '8')

	)

123 
	#DRM_FORMAT_RGBX8888_A8
 
	`fourcc_code
('R', 'X', 'A', '8')

	)

124 
	#DRM_FORMAT_BGRX8888_A8
 
	`fourcc_code
('B', 'X', 'A', '8')

	)

125 
	#DRM_FORMAT_RGB888_A8
 
	`fourcc_code
('R', '8', 'A', '8')

	)

126 
	#DRM_FORMAT_BGR888_A8
 
	`fourcc_code
('B', '8', 'A', '8')

	)

127 
	#DRM_FORMAT_RGB565_A8
 
	`fourcc_code
('R', '5', 'A', '8')

	)

128 
	#DRM_FORMAT_BGR565_A8
 
	`fourcc_code
('B', '5', 'A', '8')

	)

137 
	#DRM_FORMAT_NV12
 
	`fourcc_code
('N', 'V', '1', '2'Ë

	)

138 
	#DRM_FORMAT_NV21
 
	`fourcc_code
('N', 'V', '2', '1'Ë

	)

139 
	#DRM_FORMAT_NV16
 
	`fourcc_code
('N', 'V', '1', '6'Ë

	)

140 
	#DRM_FORMAT_NV61
 
	`fourcc_code
('N', 'V', '6', '1'Ë

	)

141 
	#DRM_FORMAT_NV24
 
	`fourcc_code
('N', 'V', '2', '4'Ë

	)

142 
	#DRM_FORMAT_NV42
 
	`fourcc_code
('N', 'V', '4', '2'Ë

	)

153 
	#DRM_FORMAT_YUV410
 
	`fourcc_code
('Y', 'U', 'V', '9'Ë

	)

154 
	#DRM_FORMAT_YVU410
 
	`fourcc_code
('Y', 'V', 'U', '9'Ë

	)

155 
	#DRM_FORMAT_YUV411
 
	`fourcc_code
('Y', 'U', '1', '1'Ë

	)

156 
	#DRM_FORMAT_YVU411
 
	`fourcc_code
('Y', 'V', '1', '1'Ë

	)

157 
	#DRM_FORMAT_YUV420
 
	`fourcc_code
('Y', 'U', '1', '2'Ë

	)

158 
	#DRM_FORMAT_YVU420
 
	`fourcc_code
('Y', 'V', '1', '2'Ë

	)

159 
	#DRM_FORMAT_YUV422
 
	`fourcc_code
('Y', 'U', '1', '6'Ë

	)

160 
	#DRM_FORMAT_YVU422
 
	`fourcc_code
('Y', 'V', '1', '6'Ë

	)

161 
	#DRM_FORMAT_YUV444
 
	`fourcc_code
('Y', 'U', '2', '4'Ë

	)

162 
	#DRM_FORMAT_YVU444
 
	`fourcc_code
('Y', 'V', '2', '4'Ë

	)

177 
	#DRM_FORMAT_MOD_NONE
 0

	)

178 
	#DRM_FORMAT_MOD_VENDOR_NONE
 0

	)

179 
	#DRM_FORMAT_MOD_VENDOR_INTEL
 0x01

	)

180 
	#DRM_FORMAT_MOD_VENDOR_AMD
 0x02

	)

181 
	#DRM_FORMAT_MOD_VENDOR_NVIDIA
 0x03

	)

182 
	#DRM_FORMAT_MOD_VENDOR_SAMSUNG
 0x04

	)

183 
	#DRM_FORMAT_MOD_VENDOR_QCOM
 0x05

	)

184 
	#DRM_FORMAT_MOD_VENDOR_VIVANTE
 0x06

	)

185 
	#DRM_FORMAT_MOD_VENDOR_BROADCOM
 0x07

	)

188 
	#DRM_FORMAT_RESERVED
 ((1ULL << 56Ë- 1)

	)

190 
	#fourcc_mod_code
(
víd‹
, 
vÆ
) \

191 ((((
__u64
)
DRM_FORMAT_MOD_VENDOR_
## 
víd‹
Ë<< 56Ë| ((
vÆ
Ë& 0x00ffffffffffffffULL))

	)

208 
	#DRM_FORMAT_MOD_INVALID
 
	`fourcc_mod_code
(
NONE
, 
DRM_FORMAT_RESERVED
)

	)

218 
	#DRM_FORMAT_MOD_LINEAR
 
	`fourcc_mod_code
(
NONE
, 0)

	)

234 
	#I915_FORMAT_MOD_X_TILED
 
	`fourcc_mod_code
(
INTEL
, 1)

	)

249 
	#I915_FORMAT_MOD_Y_TILED
 
	`fourcc_mod_code
(
INTEL
, 2)

	)

264 
	#I915_FORMAT_MOD_Yf_TILED
 
	`fourcc_mod_code
(
INTEL
, 3)

	)

283 
	#I915_FORMAT_MOD_Y_TILED_CCS
 
	`fourcc_mod_code
(
INTEL
, 4)

	)

284 
	#I915_FORMAT_MOD_Yf_TILED_CCS
 
	`fourcc_mod_code
(
INTEL
, 5)

	)

299 
	#DRM_FORMAT_MOD_SAMSUNG_64_32_TILE
 
	`fourcc_mod_code
(
SAMSUNG
, 1)

	)

309 
	#DRM_FORMAT_MOD_VIVANTE_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 1)

	)

321 
	#DRM_FORMAT_MOD_VIVANTE_SUPER_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 2)

	)

330 
	#DRM_FORMAT_MOD_VIVANTE_SPLIT_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 3)

	)

339 
	#DRM_FORMAT_MOD_VIVANTE_SPLIT_SUPER_TILED
 
	`fourcc_mod_code
(
VIVANTE
, 4)

	)

348 
	#DRM_FORMAT_MOD_NVIDIA_TEGRA_TILED
 
	`fourcc_mod_code
(
NVIDIA
, 1)

	)

371 
	#DRM_FORMAT_MOD_NVIDIA_16BX2_BLOCK
(
v
) \

372 
	`fourcc_mod_code
(
NVIDIA
, 0x10 | ((
v
Ë& 0xf))

	)

374 
	#DRM_FORMAT_MOD_NVIDIA_16BX2_BLOCK_ONE_GOB
 \

375 
	`fourcc_mod_code
(
NVIDIA
, 0x10)

	)

376 
	#DRM_FORMAT_MOD_NVIDIA_16BX2_BLOCK_TWO_GOB
 \

377 
	`fourcc_mod_code
(
NVIDIA
, 0x11)

	)

378 
	#DRM_FORMAT_MOD_NVIDIA_16BX2_BLOCK_FOUR_GOB
 \

379 
	`fourcc_mod_code
(
NVIDIA
, 0x12)

	)

380 
	#DRM_FORMAT_MOD_NVIDIA_16BX2_BLOCK_EIGHT_GOB
 \

381 
	`fourcc_mod_code
(
NVIDIA
, 0x13)

	)

382 
	#DRM_FORMAT_MOD_NVIDIA_16BX2_BLOCK_SIXTEEN_GOB
 \

383 
	`fourcc_mod_code
(
NVIDIA
, 0x14)

	)

384 
	#DRM_FORMAT_MOD_NVIDIA_16BX2_BLOCK_THIRTYTWO_GOB
 \

385 
	`fourcc_mod_code
(
NVIDIA
, 0x15)

	)

406 
	#DRM_FORMAT_MOD_BROADCOM_VC4_T_TILED
 
	`fourcc_mod_code
(
BROADCOM
, 1)

	)

408 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/drm_mode.h

27 #i‚de‡
_DRM_MODE_H


28 
	#_DRM_MODE_H


	)

30 
	~"drm.h
"

32 #i‡
deföed
(
__˝lu•lus
)

36 
	#DRM_DISPLAY_INFO_LEN
 32

	)

37 
	#DRM_CONNECTOR_NAME_LEN
 32

	)

38 
	#DRM_DISPLAY_MODE_LEN
 32

	)

39 
	#DRM_PROP_NAME_LEN
 32

	)

41 
	#DRM_MODE_TYPE_BUILTIN
 (1<<0)

	)

42 
	#DRM_MODE_TYPE_CLOCK_C
 ((1<<1Ë| 
DRM_MODE_TYPE_BUILTIN
)

	)

43 
	#DRM_MODE_TYPE_CRTC_C
 ((1<<2Ë| 
DRM_MODE_TYPE_BUILTIN
)

	)

44 
	#DRM_MODE_TYPE_PREFERRED
 (1<<3)

	)

45 
	#DRM_MODE_TYPE_DEFAULT
 (1<<4)

	)

46 
	#DRM_MODE_TYPE_USERDEF
 (1<<5)

	)

47 
	#DRM_MODE_TYPE_DRIVER
 (1<<6)

	)

59 
	#DRM_MODE_FLAG_PHSYNC
 (1<<0)

	)

60 
	#DRM_MODE_FLAG_NHSYNC
 (1<<1)

	)

61 
	#DRM_MODE_FLAG_PVSYNC
 (1<<2)

	)

62 
	#DRM_MODE_FLAG_NVSYNC
 (1<<3)

	)

63 
	#DRM_MODE_FLAG_INTERLACE
 (1<<4)

	)

64 
	#DRM_MODE_FLAG_DBLSCAN
 (1<<5)

	)

65 
	#DRM_MODE_FLAG_CSYNC
 (1<<6)

	)

66 
	#DRM_MODE_FLAG_PCSYNC
 (1<<7)

	)

67 
	#DRM_MODE_FLAG_NCSYNC
 (1<<8)

	)

68 
	#DRM_MODE_FLAG_HSKEW
 (1<<9Ë

	)

69 
	#DRM_MODE_FLAG_BCAST
 (1<<10)

	)

70 
	#DRM_MODE_FLAG_PIXMUX
 (1<<11)

	)

71 
	#DRM_MODE_FLAG_DBLCLK
 (1<<12)

	)

72 
	#DRM_MODE_FLAG_CLKDIV2
 (1<<13)

	)

77 
	#DRM_MODE_FLAG_3D_MASK
 (0x1f<<14)

	)

78 
	#DRM_MODE_FLAG_3D_NONE
 (0<<14)

	)

79 
	#DRM_MODE_FLAG_3D_FRAME_PACKING
 (1<<14)

	)

80 
	#DRM_MODE_FLAG_3D_FIELD_ALTERNATIVE
 (2<<14)

	)

81 
	#DRM_MODE_FLAG_3D_LINE_ALTERNATIVE
 (3<<14)

	)

82 
	#DRM_MODE_FLAG_3D_SIDE_BY_SIDE_FULL
 (4<<14)

	)

83 
	#DRM_MODE_FLAG_3D_L_DEPTH
 (5<<14)

	)

84 
	#DRM_MODE_FLAG_3D_L_DEPTH_GFX_GFX_DEPTH
 (6<<14)

	)

85 
	#DRM_MODE_FLAG_3D_TOP_AND_BOTTOM
 (7<<14)

	)

86 
	#DRM_MODE_FLAG_3D_SIDE_BY_SIDE_HALF
 (8<<14)

	)

89 
	#DRM_MODE_PICTURE_ASPECT_NONE
 0

	)

90 
	#DRM_MODE_PICTURE_ASPECT_4_3
 1

	)

91 
	#DRM_MODE_PICTURE_ASPECT_16_9
 2

	)

94 
	#DRM_MODE_FLAG_PIC_AR_MASK
 (0x0F<<19)

	)

95 
	#DRM_MODE_FLAG_PIC_AR_NONE
 \

96 (
DRM_MODE_PICTURE_ASPECT_NONE
<<19)

	)

97 
	#DRM_MODE_FLAG_PIC_AR_4_3
 \

98 (
DRM_MODE_PICTURE_ASPECT_4_3
<<19)

	)

99 
	#DRM_MODE_FLAG_PIC_AR_16_9
 \

100 (
DRM_MODE_PICTURE_ASPECT_16_9
<<19)

	)

104 
	#DRM_MODE_DPMS_ON
 0

	)

105 
	#DRM_MODE_DPMS_STANDBY
 1

	)

106 
	#DRM_MODE_DPMS_SUSPEND
 2

	)

107 
	#DRM_MODE_DPMS_OFF
 3

	)

110 
	#DRM_MODE_SCALE_NONE
 0

	)

112 
	#DRM_MODE_SCALE_FULLSCREEN
 1

	)

113 
	#DRM_MODE_SCALE_CENTER
 2

	)

114 
	#DRM_MODE_SCALE_ASPECT
 3

	)

117 
	#DRM_MODE_DITHERING_OFF
 0

	)

118 
	#DRM_MODE_DITHERING_ON
 1

	)

119 
	#DRM_MODE_DITHERING_AUTO
 2

	)

122 
	#DRM_MODE_DIRTY_OFF
 0

	)

123 
	#DRM_MODE_DIRTY_ON
 1

	)

124 
	#DRM_MODE_DIRTY_ANNOTATE
 2

	)

127 
	#DRM_MODE_LINK_STATUS_GOOD
 0

	)

128 
	#DRM_MODE_LINK_STATUS_BAD
 1

	)

139 
	#DRM_MODE_ROTATE_0
 (1<<0)

	)

140 
	#DRM_MODE_ROTATE_90
 (1<<1)

	)

141 
	#DRM_MODE_ROTATE_180
 (1<<2)

	)

142 
	#DRM_MODE_ROTATE_270
 (1<<3)

	)

149 
	#DRM_MODE_ROTATE_MASK
 (\

150 
DRM_MODE_ROTATE_0
 | \

151 
DRM_MODE_ROTATE_90
 | \

152 
DRM_MODE_ROTATE_180
 | \

153 
DRM_MODE_ROTATE_270
)

	)

164 
	#DRM_MODE_REFLECT_X
 (1<<4)

	)

165 
	#DRM_MODE_REFLECT_Y
 (1<<5)

	)

172 
	#DRM_MODE_REFLECT_MASK
 (\

173 
DRM_MODE_REFLECT_X
 | \

174 
DRM_MODE_REFLECT_Y
)

	)

177 
	sdrm_mode_modeöfo
 {

178 
__u32
 
˛ock
;

179 
__u16
 
hdi•œy
;

180 
__u16
 
hsync_°¨t
;

181 
__u16
 
hsync_íd
;

182 
__u16
 
htŸÆ
;

183 
__u16
 
hskew
;

184 
__u16
 
vdi•œy
;

185 
__u16
 
vsync_°¨t
;

186 
__u16
 
vsync_íd
;

187 
__u16
 
vtŸÆ
;

188 
__u16
 
vsˇn
;

190 
__u32
 
vª‰esh
;

192 
__u32
 
Êags
;

193 
__u32
 
ty≥
;

194 
«me
[
DRM_DISPLAY_MODE_LEN
];

197 
	sdrm_mode_ˇrd_ªs
 {

198 
__u64
 
fb_id_±r
;

199 
__u64
 
¸tc_id_±r
;

200 
__u64
 
c⁄√˘‹_id_±r
;

201 
__u64
 
ícodî_id_±r
;

202 
__u32
 
cou¡_fbs
;

203 
__u32
 
cou¡_¸tcs
;

204 
__u32
 
cou¡_c⁄√˘‹s
;

205 
__u32
 
cou¡_ícodîs
;

206 
__u32
 
mö_width
;

207 
__u32
 
max_width
;

208 
__u32
 
mö_height
;

209 
__u32
 
max_height
;

212 
	sdrm_mode_¸tc
 {

213 
__u64
 
£t_c⁄√˘‹s_±r
;

214 
__u32
 
cou¡_c⁄√˘‹s
;

216 
__u32
 
¸tc_id
;

217 
__u32
 
fb_id
;

219 
__u32
 
x
;

220 
__u32
 
y
;

222 
__u32
 
gamma_size
;

223 
__u32
 
mode_vÆid
;

224 
drm_mode_modeöfo
 
mode
;

227 
	#DRM_MODE_PRESENT_TOP_FIELD
 (1<<0)

	)

228 
	#DRM_MODE_PRESENT_BOTTOM_FIELD
 (1<<1)

	)

231 
	sdrm_mode_£t_∂™e
 {

232 
__u32
 
∂™e_id
;

233 
__u32
 
¸tc_id
;

234 
__u32
 
fb_id
;

235 
__u32
 
Êags
;

238 
__s32
 
¸tc_x
;

239 
__s32
 
¸tc_y
;

240 
__u32
 
¸tc_w
;

241 
__u32
 
¸tc_h
;

244 
__u32
 
§c_x
;

245 
__u32
 
§c_y
;

246 
__u32
 
§c_h
;

247 
__u32
 
§c_w
;

250 
	sdrm_mode_gë_∂™e
 {

251 
__u32
 
∂™e_id
;

253 
__u32
 
¸tc_id
;

254 
__u32
 
fb_id
;

256 
__u32
 
possibÀ_¸tcs
;

257 
__u32
 
gamma_size
;

259 
__u32
 
cou¡_f‹m©_ty≥s
;

260 
__u64
 
f‹m©_ty≥_±r
;

263 
	sdrm_mode_gë_∂™e_ªs
 {

264 
__u64
 
∂™e_id_±r
;

265 
__u32
 
cou¡_∂™es
;

268 
	#DRM_MODE_ENCODER_NONE
 0

	)

269 
	#DRM_MODE_ENCODER_DAC
 1

	)

270 
	#DRM_MODE_ENCODER_TMDS
 2

	)

271 
	#DRM_MODE_ENCODER_LVDS
 3

	)

272 
	#DRM_MODE_ENCODER_TVDAC
 4

	)

273 
	#DRM_MODE_ENCODER_VIRTUAL
 5

	)

274 
	#DRM_MODE_ENCODER_DSI
 6

	)

275 
	#DRM_MODE_ENCODER_DPMST
 7

	)

276 
	#DRM_MODE_ENCODER_DPI
 8

	)

278 
	sdrm_mode_gë_ícodî
 {

279 
__u32
 
ícodî_id
;

280 
__u32
 
ícodî_ty≥
;

282 
__u32
 
¸tc_id
;

284 
__u32
 
possibÀ_¸tcs
;

285 
__u32
 
possibÀ_˛⁄es
;

290 
	edrm_mode_subc⁄√˘‹
 {

291 
DRM_MODE_SUBCONNECTOR_Autom©ic
 = 0,

292 
DRM_MODE_SUBCONNECTOR_Unknown
 = 0,

293 
DRM_MODE_SUBCONNECTOR_DVID
 = 3,

294 
DRM_MODE_SUBCONNECTOR_DVIA
 = 4,

295 
DRM_MODE_SUBCONNECTOR_Composôe
 = 5,

296 
DRM_MODE_SUBCONNECTOR_SVIDEO
 = 6,

297 
DRM_MODE_SUBCONNECTOR_Comp⁄ít
 = 8,

298 
DRM_MODE_SUBCONNECTOR_SCART
 = 9,

301 
	#DRM_MODE_CONNECTOR_Unknown
 0

	)

302 
	#DRM_MODE_CONNECTOR_VGA
 1

	)

303 
	#DRM_MODE_CONNECTOR_DVII
 2

	)

304 
	#DRM_MODE_CONNECTOR_DVID
 3

	)

305 
	#DRM_MODE_CONNECTOR_DVIA
 4

	)

306 
	#DRM_MODE_CONNECTOR_Composôe
 5

	)

307 
	#DRM_MODE_CONNECTOR_SVIDEO
 6

	)

308 
	#DRM_MODE_CONNECTOR_LVDS
 7

	)

309 
	#DRM_MODE_CONNECTOR_Comp⁄ít
 8

	)

310 
	#DRM_MODE_CONNECTOR_9PöDIN
 9

	)

311 
	#DRM_MODE_CONNECTOR_Di•œyP‹t
 10

	)

312 
	#DRM_MODE_CONNECTOR_HDMIA
 11

	)

313 
	#DRM_MODE_CONNECTOR_HDMIB
 12

	)

314 
	#DRM_MODE_CONNECTOR_TV
 13

	)

315 
	#DRM_MODE_CONNECTOR_eDP
 14

	)

316 
	#DRM_MODE_CONNECTOR_VIRTUAL
 15

	)

317 
	#DRM_MODE_CONNECTOR_DSI
 16

	)

318 
	#DRM_MODE_CONNECTOR_DPI
 17

	)

320 
	sdrm_mode_gë_c⁄√˘‹
 {

322 
__u64
 
ícodîs_±r
;

323 
__u64
 
modes_±r
;

324 
__u64
 
¥›s_±r
;

325 
__u64
 
¥›_vÆues_±r
;

327 
__u32
 
cou¡_modes
;

328 
__u32
 
cou¡_¥›s
;

329 
__u32
 
cou¡_ícodîs
;

331 
__u32
 
ícodî_id
;

332 
__u32
 
c⁄√˘‹_id
;

333 
__u32
 
c⁄√˘‹_ty≥
;

334 
__u32
 
c⁄√˘‹_ty≥_id
;

336 
__u32
 
c⁄√˘i⁄
;

337 
__u32
 
mm_width
;

338 
__u32
 
mm_height
;

339 
__u32
 
subpixñ
;

341 
__u32
 
∑d
;

344 
	#DRM_MODE_PROP_PENDING
 (1<<0)

	)

345 
	#DRM_MODE_PROP_RANGE
 (1<<1)

	)

346 
	#DRM_MODE_PROP_IMMUTABLE
 (1<<2)

	)

347 
	#DRM_MODE_PROP_ENUM
 (1<<3Ë

	)

348 
	#DRM_MODE_PROP_BLOB
 (1<<4)

	)

349 
	#DRM_MODE_PROP_BITMASK
 (1<<5Ë

	)

352 
	#DRM_MODE_PROP_LEGACY_TYPE
 ( \

353 
DRM_MODE_PROP_RANGE
 | \

354 
DRM_MODE_PROP_ENUM
 | \

355 
DRM_MODE_PROP_BLOB
 | \

356 
DRM_MODE_PROP_BITMASK
)

	)

361 
	#DRM_MODE_PROP_EXTENDED_TYPE
 0x0000ffc0

	)

362 
	#DRM_MODE_PROP_TYPE
(
n
Ë(“Ë<< 6)

	)

363 
	#DRM_MODE_PROP_OBJECT
 
	`DRM_MODE_PROP_TYPE
(1)

	)

364 
	#DRM_MODE_PROP_SIGNED_RANGE
 
	`DRM_MODE_PROP_TYPE
(2)

	)

371 
	#DRM_MODE_PROP_ATOMIC
 0x80000000

	)

373 
	sdrm_mode_¥›îty_íum
 {

374 
__u64
 
vÆue
;

375 
«me
[
DRM_PROP_NAME_LEN
];

378 
	sdrm_mode_gë_¥›îty
 {

379 
__u64
 
vÆues_±r
;

380 
__u64
 
íum_blob_±r
;

382 
__u32
 
¥›_id
;

383 
__u32
 
Êags
;

384 
«me
[
DRM_PROP_NAME_LEN
];

386 
__u32
 
cou¡_vÆues
;

389 
__u32
 
cou¡_íum_blobs
;

392 
	sdrm_mode_c⁄√˘‹_£t_¥›îty
 {

393 
__u64
 
vÆue
;

394 
__u32
 
¥›_id
;

395 
__u32
 
c⁄√˘‹_id
;

398 
	#DRM_MODE_OBJECT_CRTC
 0xcccccccc

	)

399 
	#DRM_MODE_OBJECT_CONNECTOR
 0xc0c0c0c0

	)

400 
	#DRM_MODE_OBJECT_ENCODER
 0xe0e0e0e0

	)

401 
	#DRM_MODE_OBJECT_MODE
 0xdededede

	)

402 
	#DRM_MODE_OBJECT_PROPERTY
 0xb0b0b0b0

	)

403 
	#DRM_MODE_OBJECT_FB
 0xfbfbfbfb

	)

404 
	#DRM_MODE_OBJECT_BLOB
 0xbbbbbbbb

	)

405 
	#DRM_MODE_OBJECT_PLANE
 0xìììì

	)

406 
	#DRM_MODE_OBJECT_ANY
 0

	)

408 
	sdrm_mode_obj_gë_¥›îtõs
 {

409 
__u64
 
¥›s_±r
;

410 
__u64
 
¥›_vÆues_±r
;

411 
__u32
 
cou¡_¥›s
;

412 
__u32
 
obj_id
;

413 
__u32
 
obj_ty≥
;

416 
	sdrm_mode_obj_£t_¥›îty
 {

417 
__u64
 
vÆue
;

418 
__u32
 
¥›_id
;

419 
__u32
 
obj_id
;

420 
__u32
 
obj_ty≥
;

423 
	sdrm_mode_gë_blob
 {

424 
__u32
 
blob_id
;

425 
__u32
 
Àngth
;

426 
__u64
 
d©a
;

429 
	sdrm_mode_fb_cmd
 {

430 
__u32
 
fb_id
;

431 
__u32
 
width
;

432 
__u32
 
height
;

433 
__u32
 
pôch
;

434 
__u32
 
bµ
;

435 
__u32
 
dïth
;

437 
__u32
 
h™dÀ
;

440 
	#DRM_MODE_FB_INTERLACED
 (1<<0Ë

	)

441 
	#DRM_MODE_FB_MODIFIERS
 (1<<1Ë

	)

443 
	sdrm_mode_fb_cmd2
 {

444 
__u32
 
fb_id
;

445 
__u32
 
width
;

446 
__u32
 
height
;

447 
__u32
 
pixñ_f‹m©
;

448 
__u32
 
Êags
;

474 
__u32
 
h™dÀs
[4];

475 
__u32
 
pôches
[4];

476 
__u32
 
off£ts
[4];

477 
__u64
 
modifõr
[4];

480 
	#DRM_MODE_FB_DIRTY_ANNOTATE_COPY
 0x01

	)

481 
	#DRM_MODE_FB_DIRTY_ANNOTATE_FILL
 0x02

	)

482 
	#DRM_MODE_FB_DIRTY_FLAGS
 0x03

	)

484 
	#DRM_MODE_FB_DIRTY_MAX_CLIPS
 256

	)

513 
	sdrm_mode_fb_dúty_cmd
 {

514 
__u32
 
fb_id
;

515 
__u32
 
Êags
;

516 
__u32
 
cﬁ‹
;

517 
__u32
 
num_˛ùs
;

518 
__u64
 
˛ùs_±r
;

521 
	sdrm_mode_mode_cmd
 {

522 
__u32
 
c⁄√˘‹_id
;

523 
drm_mode_modeöfo
 
mode
;

526 
	#DRM_MODE_CURSOR_BO
 0x01

	)

527 
	#DRM_MODE_CURSOR_MOVE
 0x02

	)

528 
	#DRM_MODE_CURSOR_FLAGS
 0x03

	)

544 
	sdrm_mode_curs‹
 {

545 
__u32
 
Êags
;

546 
__u32
 
¸tc_id
;

547 
__s32
 
x
;

548 
__s32
 
y
;

549 
__u32
 
width
;

550 
__u32
 
height
;

552 
__u32
 
h™dÀ
;

555 
	sdrm_mode_curs‹2
 {

556 
__u32
 
Êags
;

557 
__u32
 
¸tc_id
;

558 
__s32
 
x
;

559 
__s32
 
y
;

560 
__u32
 
width
;

561 
__u32
 
height
;

563 
__u32
 
h™dÀ
;

564 
__s32
 
hŸ_x
;

565 
__s32
 
hŸ_y
;

568 
	sdrm_mode_¸tc_lut
 {

569 
__u32
 
¸tc_id
;

570 
__u32
 
gamma_size
;

573 
__u64
 
ªd
;

574 
__u64
 
gªí
;

575 
__u64
 
blue
;

578 
	sdrm_cﬁ‹_˘m
 {

580 
__s64
 
m©rix
[9];

583 
	sdrm_cﬁ‹_lut
 {

587 
__u16
 
ªd
;

588 
__u16
 
gªí
;

589 
__u16
 
blue
;

590 
__u16
 
ª£rved
;

593 
	#DRM_MODE_PAGE_FLIP_EVENT
 0x01

	)

594 
	#DRM_MODE_PAGE_FLIP_ASYNC
 0x02

	)

595 
	#DRM_MODE_PAGE_FLIP_TARGET_ABSOLUTE
 0x4

	)

596 
	#DRM_MODE_PAGE_FLIP_TARGET_RELATIVE
 0x8

	)

597 
	#DRM_MODE_PAGE_FLIP_TARGET
 (
DRM_MODE_PAGE_FLIP_TARGET_ABSOLUTE
 | \

598 
DRM_MODE_PAGE_FLIP_TARGET_RELATIVE
)

	)

599 
	#DRM_MODE_PAGE_FLIP_FLAGS
 (
DRM_MODE_PAGE_FLIP_EVENT
 | \

600 
DRM_MODE_PAGE_FLIP_ASYNC
 | \

601 
DRM_MODE_PAGE_FLIP_TARGET
)

	)

627 
	sdrm_mode_¸tc_∑ge_Êù
 {

628 
__u32
 
¸tc_id
;

629 
__u32
 
fb_id
;

630 
__u32
 
Êags
;

631 
__u32
 
ª£rved
;

632 
__u64
 
u£r_d©a
;

655 
	sdrm_mode_¸tc_∑ge_Êù_èrgë
 {

656 
__u32
 
¸tc_id
;

657 
__u32
 
fb_id
;

658 
__u32
 
Êags
;

659 
__u32
 
£quí˚
;

660 
__u64
 
u£r_d©a
;

664 
	sdrm_mode_¸óã_dumb
 {

665 
__u32
 
height
;

666 
__u32
 
width
;

667 
__u32
 
bµ
;

668 
__u32
 
Êags
;

670 
__u32
 
h™dÀ
;

671 
__u32
 
pôch
;

672 
__u64
 
size
;

676 
	sdrm_mode_m≠_dumb
 {

678 
__u32
 
h™dÀ
;

679 
__u32
 
∑d
;

685 
__u64
 
off£t
;

688 
	sdrm_mode_de°roy_dumb
 {

689 
__u32
 
h™dÀ
;

693 
	#DRM_MODE_ATOMIC_TEST_ONLY
 0x0100

	)

694 
	#DRM_MODE_ATOMIC_NONBLOCK
 0x0200

	)

695 
	#DRM_MODE_ATOMIC_ALLOW_MODESET
 0x0400

	)

697 
	#DRM_MODE_ATOMIC_FLAGS
 (\

698 
DRM_MODE_PAGE_FLIP_EVENT
 |\

699 
DRM_MODE_PAGE_FLIP_ASYNC
 |\

700 
DRM_MODE_ATOMIC_TEST_ONLY
 |\

701 
DRM_MODE_ATOMIC_NONBLOCK
 |\

702 
DRM_MODE_ATOMIC_ALLOW_MODESET
)

	)

704 
	sdrm_mode_©omic
 {

705 
__u32
 
Êags
;

706 
__u32
 
cou¡_objs
;

707 
__u64
 
objs_±r
;

708 
__u64
 
cou¡_¥›s_±r
;

709 
__u64
 
¥›s_±r
;

710 
__u64
 
¥›_vÆues_±r
;

711 
__u64
 
ª£rved
;

712 
__u64
 
u£r_d©a
;

715 
	sdrm_f‹m©_modifõr_blob
 {

716 
	#FORMAT_BLOB_CURRENT
 1

	)

718 
__u32
 
vîsi⁄
;

721 
__u32
 
Êags
;

724 
__u32
 
cou¡_f‹m©s
;

727 
__u32
 
f‹m©s_off£t
;

730 
__u32
 
cou¡_modifõrs
;

733 
__u32
 
modifõrs_off£t
;

739 
	sdrm_f‹m©_modifõr
 {

757 
__u64
 
f‹m©s
;

758 
__u32
 
off£t
;

759 
__u32
 
∑d
;

762 
__u64
 
modifõr
;

769 
	sdrm_mode_¸óã_blob
 {

771 
__u64
 
d©a
;

773 
__u32
 
Àngth
;

775 
__u32
 
blob_id
;

781 
	sdrm_mode_de°roy_blob
 {

782 
__u32
 
blob_id
;

788 
	sdrm_mode_¸óã_Àa£
 {

790 
__u64
 
obje˘_ids
;

792 
__u32
 
obje˘_cou¡
;

794 
__u32
 
Êags
;

797 
__u32
 
Às£e_id
;

799 
__u32
 
fd
;

805 
	sdrm_mode_li°_Às£es
 {

813 
__u32
 
cou¡_Às£es
;

814 
__u32
 
∑d
;

819 
__u64
 
Às£es_±r
;

825 
	sdrm_mode_gë_Àa£
 {

833 
__u32
 
cou¡_obje˘s
;

834 
__u32
 
∑d
;

839 
__u64
 
obje˘s_±r
;

845 
	sdrm_mode_ªvoke_Àa£
 {

848 
__u32
 
Às£e_id
;

851 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/drm_sarea.h

32 #i‚de‡
_DRM_SAREA_H_


33 
	#_DRM_SAREA_H_


	)

35 
	~"drm.h
"

37 #i‡
deföed
(
__˝lu•lus
)

42 #i‡
deföed
(
__Æpha__
)

43 
	#SAREA_MAX
 0x2000U

	)

44 #ñi‡
deföed
(
__mùs__
)

45 
	#SAREA_MAX
 0x4000U

	)

46 #ñi‡
deföed
(
__ü64__
)

47 
	#SAREA_MAX
 0x10000U

	)

50 
	#SAREA_MAX
 0x2000U

	)

54 
	#SAREA_MAX_DRAWABLES
 256

	)

56 
	#SAREA_DRAWABLE_CLAIMED_ENTRY
 0x80000000

	)

59 
	sdrm_ßªa_døwabÀ
 {

60 
°amp
;

61 
Êags
;

65 
	sdrm_ßªa_‰ame
 {

66 
x
;

67 
y
;

68 
width
;

69 
height
;

70 
fuŒs¸ìn
;

74 
	sdrm_ßªa
 {

76 
drm_hw_lock
 
lock
;

78 
drm_hw_lock
 
døwabÀ_lock
;

79 
drm_ßªa_døwabÀ
 
døwabÀTabÀ
[
SAREA_MAX_DRAWABLES
];

80 
drm_ßªa_‰ame
 
‰ame
;

81 
drm_c⁄ãxt_t
 
dummy_c⁄ãxt
;

84 #i‚de‡
__KERNEL__


85 
drm_ßªa_døwabÀ
 
	tdrm_ßªa_døwabÀ_t
;

86 
drm_ßªa_‰ame
 
	tdrm_ßªa_‰ame_t
;

87 
drm_ßªa
 
	tdrm_ßªa_t
;

90 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/etnaviv_drm.h

18 #i‚de‡
__ETNAVIV_DRM_H__


19 
	#__ETNAVIV_DRM_H__


	)

21 
	~"drm.h
"

23 #i‡
deföed
(
__˝lu•lus
)

44 
	sdrm_ë«viv_time•ec
 {

45 
__s64
 
tv_£c
;

46 
__s64
 
tv_n£c
;

49 
	#ETNAVIV_PARAM_GPU_MODEL
 0x01

	)

50 
	#ETNAVIV_PARAM_GPU_REVISION
 0x02

	)

51 
	#ETNAVIV_PARAM_GPU_FEATURES_0
 0x03

	)

52 
	#ETNAVIV_PARAM_GPU_FEATURES_1
 0x04

	)

53 
	#ETNAVIV_PARAM_GPU_FEATURES_2
 0x05

	)

54 
	#ETNAVIV_PARAM_GPU_FEATURES_3
 0x06

	)

55 
	#ETNAVIV_PARAM_GPU_FEATURES_4
 0x07

	)

56 
	#ETNAVIV_PARAM_GPU_FEATURES_5
 0x08

	)

57 
	#ETNAVIV_PARAM_GPU_FEATURES_6
 0x09

	)

59 
	#ETNAVIV_PARAM_GPU_STREAM_COUNT
 0x10

	)

60 
	#ETNAVIV_PARAM_GPU_REGISTER_MAX
 0x11

	)

61 
	#ETNAVIV_PARAM_GPU_THREAD_COUNT
 0x12

	)

62 
	#ETNAVIV_PARAM_GPU_VERTEX_CACHE_SIZE
 0x13

	)

63 
	#ETNAVIV_PARAM_GPU_SHADER_CORE_COUNT
 0x14

	)

64 
	#ETNAVIV_PARAM_GPU_PIXEL_PIPES
 0x15

	)

65 
	#ETNAVIV_PARAM_GPU_VERTEX_OUTPUT_BUFFER_SIZE
 0x16

	)

66 
	#ETNAVIV_PARAM_GPU_BUFFER_SIZE
 0x17

	)

67 
	#ETNAVIV_PARAM_GPU_INSTRUCTION_COUNT
 0x18

	)

68 
	#ETNAVIV_PARAM_GPU_NUM_CONSTANTS
 0x19

	)

69 
	#ETNAVIV_PARAM_GPU_NUM_VARYINGS
 0x1a

	)

71 
	#ETNA_MAX_PIPES
 4

	)

73 
	sdrm_ë«viv_∑øm
 {

74 
__u32
 
pùe
;

75 
__u32
 
∑øm
;

76 
__u64
 
vÆue
;

83 
	#ETNA_BO_CACHE_MASK
 0x000f0000

	)

85 
	#ETNA_BO_CACHED
 0x00010000

	)

86 
	#ETNA_BO_WC
 0x00020000

	)

87 
	#ETNA_BO_UNCACHED
 0x00040000

	)

89 
	#ETNA_BO_FORCE_MMU
 0x00100000

	)

91 
	sdrm_ë«viv_gem_√w
 {

92 
__u64
 
size
;

93 
__u32
 
Êags
;

94 
__u32
 
h™dÀ
;

97 
	sdrm_ë«viv_gem_öfo
 {

98 
__u32
 
h™dÀ
;

99 
__u32
 
∑d
;

100 
__u64
 
off£t
;

103 
	#ETNA_PREP_READ
 0x01

	)

104 
	#ETNA_PREP_WRITE
 0x02

	)

105 
	#ETNA_PREP_NOSYNC
 0x04

	)

107 
	sdrm_ë«viv_gem_˝u_¥ï
 {

108 
__u32
 
h™dÀ
;

109 
__u32
 
›
;

110 
drm_ë«viv_time•ec
 
timeout
;

113 
	sdrm_ë«viv_gem_˝u_föi
 {

114 
__u32
 
h™dÀ
;

115 
__u32
 
Êags
;

128 
	sdrm_ë«viv_gem_submô_ªloc
 {

129 
__u32
 
submô_off£t
;

130 
__u32
 
ªloc_idx
;

131 
__u64
 
ªloc_off£t
;

132 
__u32
 
Êags
;

146 
	#ETNA_SUBMIT_BO_READ
 0x0001

	)

147 
	#ETNA_SUBMIT_BO_WRITE
 0x0002

	)

148 
	sdrm_ë«viv_gem_submô_bo
 {

149 
__u32
 
Êags
;

150 
__u32
 
h™dÀ
;

151 
__u64
 
¥esumed
;

155 
	#ETNA_PM_PROCESS_PRE
 0x0001

	)

156 
	#ETNA_PM_PROCESS_POST
 0x0002

	)

157 
	sdrm_ë«viv_gem_submô_pmr
 {

158 
__u32
 
Êags
;

159 
__u8
 
domaö
;

160 
__u8
 
∑d
;

161 
__u16
 
sig«l
;

162 
__u32
 
£quí˚
;

163 
__u32
 
ªad_off£t
;

164 
__u32
 
ªad_idx
;

171 
	#ETNA_SUBMIT_NO_IMPLICIT
 0x0001

	)

172 
	#ETNA_SUBMIT_FENCE_FD_IN
 0x0002

	)

173 
	#ETNA_SUBMIT_FENCE_FD_OUT
 0x0004

	)

174 
	#ETNA_SUBMIT_FLAGS
 (
ETNA_SUBMIT_NO_IMPLICIT
 | \

175 
ETNA_SUBMIT_FENCE_FD_IN
 | \

176 
ETNA_SUBMIT_FENCE_FD_OUT
)

	)

177 
	#ETNA_PIPE_3D
 0x00

	)

178 
	#ETNA_PIPE_2D
 0x01

	)

179 
	#ETNA_PIPE_VG
 0x02

	)

180 
	sdrm_ë«viv_gem_submô
 {

181 
__u32
 
„n˚
;

182 
__u32
 
pùe
;

183 
__u32
 
exec_°©e
;

184 
__u32
 
ƒ_bos
;

185 
__u32
 
ƒ_ªlocs
;

186 
__u32
 
°ªam_size
;

187 
__u64
 
bos
;

188 
__u64
 
ªlocs
;

189 
__u64
 
°ªam
;

190 
__u32
 
Êags
;

191 
__s32
 
„n˚_fd
;

192 
__u64
 
pmrs
;

193 
__u32
 
ƒ_pmrs
;

194 
__u32
 
∑d
;

204 
	#ETNA_WAIT_NONBLOCK
 0x01

	)

205 
	sdrm_ë«viv_waô_„n˚
 {

206 
__u32
 
pùe
;

207 
__u32
 
„n˚
;

208 
__u32
 
Êags
;

209 
__u32
 
∑d
;

210 
drm_ë«viv_time•ec
 
timeout
;

213 
	#ETNA_USERPTR_READ
 0x01

	)

214 
	#ETNA_USERPTR_WRITE
 0x02

	)

215 
	sdrm_ë«viv_gem_u£Ωå
 {

216 
__u64
 
u£r_±r
;

217 
__u64
 
u£r_size
;

218 
__u32
 
Êags
;

219 
__u32
 
h™dÀ
;

222 
	sdrm_ë«viv_gem_waô
 {

223 
__u32
 
pùe
;

224 
__u32
 
h™dÀ
;

225 
__u32
 
Êags
;

226 
__u32
 
∑d
;

227 
drm_ë«viv_time•ec
 
timeout
;

234 
	sdrm_ë«viv_pm_domaö
 {

235 
__u32
 
pùe
;

236 
__u8
 
ôî
;

237 
__u8
 
id
;

238 
__u16
 
ƒ_sig«ls
;

239 
«me
[64];

242 
	sdrm_ë«viv_pm_sig«l
 {

243 
__u32
 
pùe
;

244 
__u8
 
domaö
;

245 
__u8
 
∑d
;

246 
__u16
 
ôî
;

247 
__u16
 
id
;

248 
«me
[64];

251 
	#DRM_ETNAVIV_GET_PARAM
 0x00

	)

255 
	#DRM_ETNAVIV_GEM_NEW
 0x02

	)

256 
	#DRM_ETNAVIV_GEM_INFO
 0x03

	)

257 
	#DRM_ETNAVIV_GEM_CPU_PREP
 0x04

	)

258 
	#DRM_ETNAVIV_GEM_CPU_FINI
 0x05

	)

259 
	#DRM_ETNAVIV_GEM_SUBMIT
 0x06

	)

260 
	#DRM_ETNAVIV_WAIT_FENCE
 0x07

	)

261 
	#DRM_ETNAVIV_GEM_USERPTR
 0x08

	)

262 
	#DRM_ETNAVIV_GEM_WAIT
 0x09

	)

263 
	#DRM_ETNAVIV_PM_QUERY_DOM
 0x0a

	)

264 
	#DRM_ETNAVIV_PM_QUERY_SIG
 0x0b

	)

265 
	#DRM_ETNAVIV_NUM_IOCTLS
 0x0c

	)

267 
	#DRM_IOCTL_ETNAVIV_GET_PARAM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GET_PARAM
, 
drm_ë«viv_∑øm
)

	)

268 
	#DRM_IOCTL_ETNAVIV_GEM_NEW
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GEM_NEW
, 
drm_ë«viv_gem_√w
)

	)

269 
	#DRM_IOCTL_ETNAVIV_GEM_INFO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GEM_INFO
, 
drm_ë«viv_gem_öfo
)

	)

270 
	#DRM_IOCTL_ETNAVIV_GEM_CPU_PREP
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GEM_CPU_PREP
, 
drm_ë«viv_gem_˝u_¥ï
)

	)

271 
	#DRM_IOCTL_ETNAVIV_GEM_CPU_FINI
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GEM_CPU_FINI
, 
drm_ë«viv_gem_˝u_föi
)

	)

272 
	#DRM_IOCTL_ETNAVIV_GEM_SUBMIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GEM_SUBMIT
, 
drm_ë«viv_gem_submô
)

	)

273 
	#DRM_IOCTL_ETNAVIV_WAIT_FENCE
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_WAIT_FENCE
, 
drm_ë«viv_waô_„n˚
)

	)

274 
	#DRM_IOCTL_ETNAVIV_GEM_USERPTR
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GEM_USERPTR
, 
drm_ë«viv_gem_u£Ωå
)

	)

275 
	#DRM_IOCTL_ETNAVIV_GEM_WAIT
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_GEM_WAIT
, 
drm_ë«viv_gem_waô
)

	)

276 
	#DRM_IOCTL_ETNAVIV_PM_QUERY_DOM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_PM_QUERY_DOM
, 
drm_ë«viv_pm_domaö
)

	)

277 
	#DRM_IOCTL_ETNAVIV_PM_QUERY_SIG
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_ETNAVIV_PM_QUERY_SIG
, 
drm_ë«viv_pm_sig«l
)

	)

279 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/exynos_drm.h

16 #i‚de‡
_UAPI_EXYNOS_DRM_H_


17 
	#_UAPI_EXYNOS_DRM_H_


	)

19 
	~"drm.h
"

21 #i‡
deföed
(
__˝lu•lus
)

34 
	sdrm_exynos_gem_¸óã
 {

35 
__u64
 
size
;

36 
__u32
 
Êags
;

37 
__u32
 
h™dÀ
;

47 
	sdrm_exynos_gem_m≠
 {

48 
__u32
 
h™dÀ
;

49 
__u32
 
ª£rved
;

50 
__u64
 
off£t
;

62 
	sdrm_exynos_gem_öfo
 {

63 
__u32
 
h™dÀ
;

64 
__u32
 
Êags
;

65 
__u64
 
size
;

76 
	sdrm_exynos_vidi_c⁄√˘i⁄
 {

77 
__u32
 
c⁄√˘i⁄
;

78 
__u32
 
exãnsi⁄s
;

79 
__u64
 
edid
;

83 
	ee_drm_exynos_gem_mem_ty≥
 {

85 
EXYNOS_BO_CONTIG
 = 0 << 0,

87 
EXYNOS_BO_NONCONTIG
 = 1 << 0,

89 
EXYNOS_BO_NONCACHABLE
 = 0 << 1,

91 
EXYNOS_BO_CACHABLE
 = 1 << 1,

93 
EXYNOS_BO_WC
 = 1 << 2,

94 
EXYNOS_BO_MASK
 = 
EXYNOS_BO_NONCONTIG
 | 
EXYNOS_BO_CACHABLE
 |

95 
EXYNOS_BO_WC


98 
	sdrm_exynos_g2d_gë_vî
 {

99 
__u32
 
maj‹
;

100 
__u32
 
mö‹
;

103 
	sdrm_exynos_g2d_cmd
 {

104 
__u32
 
off£t
;

105 
__u32
 
d©a
;

108 
	edrm_exynos_g2d_buf_ty≥
 {

109 
G2D_BUF_USERPTR
 = 1 << 31,

112 
	edrm_exynos_g2d_evít_ty≥
 {

113 
G2D_EVENT_NOT
,

114 
G2D_EVENT_NONSTOP
,

115 
G2D_EVENT_STOP
,

118 
	sdrm_exynos_g2d_u£Ωå
 {

119 
u£Ωå
;

120 
size
;

123 
	sdrm_exynos_g2d_£t_cmdli°
 {

124 
__u64
 
cmd
;

125 
__u64
 
cmd_buf
;

126 
__u32
 
cmd_ƒ
;

127 
__u32
 
cmd_buf_ƒ
;

130 
__u64
 
evít_ty≥
;

131 
__u64
 
u£r_d©a
;

134 
	sdrm_exynos_g2d_exec
 {

135 
__u64
 
async
;

138 
	#DRM_EXYNOS_GEM_CREATE
 0x00

	)

139 
	#DRM_EXYNOS_GEM_MAP
 0x01

	)

141 
	#DRM_EXYNOS_GEM_GET
 0x04

	)

142 
	#DRM_EXYNOS_VIDI_CONNECTION
 0x07

	)

145 
	#DRM_EXYNOS_G2D_GET_VER
 0x20

	)

146 
	#DRM_EXYNOS_G2D_SET_CMDLIST
 0x21

	)

147 
	#DRM_EXYNOS_G2D_EXEC
 0x22

	)

151 
	#DRM_IOCTL_EXYNOS_GEM_CREATE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + \

152 
DRM_EXYNOS_GEM_CREATE
, 
drm_exynos_gem_¸óã
)

	)

153 
	#DRM_IOCTL_EXYNOS_GEM_MAP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + \

154 
DRM_EXYNOS_GEM_MAP
, 
drm_exynos_gem_m≠
)

	)

155 
	#DRM_IOCTL_EXYNOS_GEM_GET
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + \

156 
DRM_EXYNOS_GEM_GET
, 
drm_exynos_gem_öfo
)

	)

158 
	#DRM_IOCTL_EXYNOS_VIDI_CONNECTION
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + \

159 
DRM_EXYNOS_VIDI_CONNECTION
, 
drm_exynos_vidi_c⁄√˘i⁄
)

	)

161 
	#DRM_IOCTL_EXYNOS_G2D_GET_VER
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + \

162 
DRM_EXYNOS_G2D_GET_VER
, 
drm_exynos_g2d_gë_vî
)

	)

163 
	#DRM_IOCTL_EXYNOS_G2D_SET_CMDLIST
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + \

164 
DRM_EXYNOS_G2D_SET_CMDLIST
, 
drm_exynos_g2d_£t_cmdli°
)

	)

165 
	#DRM_IOCTL_EXYNOS_G2D_EXEC
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + \

166 
DRM_EXYNOS_G2D_EXEC
, 
drm_exynos_g2d_exec
)

	)

169 
	#DRM_EXYNOS_G2D_EVENT
 0x80000000

	)

171 
	sdrm_exynos_g2d_evít
 {

172 
drm_evít
 
ba£
;

173 
__u64
 
u£r_d©a
;

174 
__u32
 
tv_£c
;

175 
__u32
 
tv_u£c
;

176 
__u32
 
cmdli°_no
;

177 
__u32
 
ª£rved
;

180 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/i810_drm.h

2 #i‚de‡
_I810_DRM_H_


3 
	#_I810_DRM_H_


	)

5 
	~"drm.h
"

7 #i‡
deföed
(
__˝lu•lus
)

15 #i‚de‡
_I810_DEFINES_


16 
	#_I810_DEFINES_


	)

18 
	#I810_DMA_BUF_ORDER
 12

	)

19 
	#I810_DMA_BUF_SZ
 (1<<
I810_DMA_BUF_ORDER
)

	)

20 
	#I810_DMA_BUF_NR
 256

	)

21 
	#I810_NR_SAREA_CLIPRECTS
 8

	)

25 
	#I810_NR_TEX_REGIONS
 64

	)

26 
	#I810_LOG_MIN_TEX_REGION_SIZE
 16

	)

29 
	#I810_UPLOAD_TEX0IMAGE
 0x1

	)

30 
	#I810_UPLOAD_TEX1IMAGE
 0x2

	)

31 
	#I810_UPLOAD_CTX
 0x4

	)

32 
	#I810_UPLOAD_BUFFERS
 0x8

	)

33 
	#I810_UPLOAD_TEX0
 0x10

	)

34 
	#I810_UPLOAD_TEX1
 0x20

	)

35 
	#I810_UPLOAD_CLIPRECTS
 0x40

	)

50 
	#I810_DESTREG_DI0
 0

	)

51 
	#I810_DESTREG_DI1
 1

	)

52 
	#I810_DESTREG_DV0
 2

	)

53 
	#I810_DESTREG_DV1
 3

	)

54 
	#I810_DESTREG_DR0
 4

	)

55 
	#I810_DESTREG_DR1
 5

	)

56 
	#I810_DESTREG_DR2
 6

	)

57 
	#I810_DESTREG_DR3
 7

	)

58 
	#I810_DESTREG_DR4
 8

	)

59 
	#I810_DEST_SETUP_SIZE
 10

	)

63 
	#I810_CTXREG_CF0
 0

	)

64 
	#I810_CTXREG_CF1
 1

	)

65 
	#I810_CTXREG_ST0
 2

	)

66 
	#I810_CTXREG_ST1
 3

	)

67 
	#I810_CTXREG_VF
 4

	)

68 
	#I810_CTXREG_MT
 5

	)

69 
	#I810_CTXREG_MC0
 6

	)

70 
	#I810_CTXREG_MC1
 7

	)

71 
	#I810_CTXREG_MC2
 8

	)

72 
	#I810_CTXREG_MA0
 9

	)

73 
	#I810_CTXREG_MA1
 10

	)

74 
	#I810_CTXREG_MA2
 11

	)

75 
	#I810_CTXREG_SDM
 12

	)

76 
	#I810_CTXREG_FOG
 13

	)

77 
	#I810_CTXREG_B1
 14

	)

78 
	#I810_CTXREG_B2
 15

	)

79 
	#I810_CTXREG_LCS
 16

	)

80 
	#I810_CTXREG_PV
 17

	)

81 
	#I810_CTXREG_ZA
 18

	)

82 
	#I810_CTXREG_AA
 19

	)

83 
	#I810_CTX_SETUP_SIZE
 20

	)

87 
	#I810_TEXREG_MI0
 0

	)

88 
	#I810_TEXREG_MI1
 1

	)

89 
	#I810_TEXREG_MI2
 2

	)

90 
	#I810_TEXREG_MI3
 3

	)

91 
	#I810_TEXREG_MF
 4

	)

92 
	#I810_TEXREG_MLC
 5

	)

93 
	#I810_TEXREG_MLL
 6

	)

94 
	#I810_TEXREG_MCS
 7

	)

95 
	#I810_TEX_SETUP_SIZE
 8

	)

99 
	#I810_FRONT
 0x1

	)

100 
	#I810_BACK
 0x2

	)

101 
	#I810_DEPTH
 0x4

	)

103 
	e_drm_i810_öô_func
 {

104 
I810_INIT_DMA
 = 0x01,

105 
I810_CLEANUP_DMA
 = 0x02,

106 
I810_INIT_DMA_1_4
 = 0x03

107 } 
	tdrm_i810_öô_func_t
;

110 
	s_drm_i810_öô
 {

111 
drm_i810_öô_func_t
 
func
;

112 
mmio_off£t
;

113 
buf„rs_off£t
;

114 
ßªa_¥iv_off£t
;

115 
rög_°¨t
;

116 
rög_íd
;

117 
rög_size
;

118 
‰⁄t_off£t
;

119 
back_off£t
;

120 
dïth_off£t
;

121 
ovîœy_off£t
;

122 
ovîœy_physiˇl
;

123 
w
;

124 
h
;

125 
pôch
;

126 
pôch_bôs
;

127 } 
	tdrm_i810_öô_t
;

130 
	s_drm_i810_¥e12_öô
 {

131 
drm_i810_öô_func_t
 
func
;

132 
mmio_off£t
;

133 
buf„rs_off£t
;

134 
ßªa_¥iv_off£t
;

135 
rög_°¨t
;

136 
rög_íd
;

137 
rög_size
;

138 
‰⁄t_off£t
;

139 
back_off£t
;

140 
dïth_off£t
;

141 
w
;

142 
h
;

143 
pôch
;

144 
pôch_bôs
;

145 } 
	tdrm_i810_¥e12_öô_t
;

150 
	s_drm_i810_ãx_ªgi⁄
 {

151 
√xt
, 
¥ev
;

152 
ö_u£
;

153 
age
;

154 } 
	tdrm_i810_ãx_ªgi⁄_t
;

156 
	s_drm_i810_ßªa
 {

157 
C⁄ãxtSèã
[
I810_CTX_SETUP_SIZE
];

158 
Buf„rSèã
[
I810_DEST_SETUP_SIZE
];

159 
TexSèã
[2][
I810_TEX_SETUP_SIZE
];

160 
dúty
;

162 
nbox
;

163 
drm_˛ù_ª˘
 
boxes
[
I810_NR_SAREA_CLIPRECTS
];

181 
drm_i810_ãx_ªgi⁄_t
 
ãxLi°
[
I810_NR_TEX_REGIONS
 + 1];

183 
ãxAge
;

184 
œ°_íqueue
;

185 
œ°_di•©ch
;

186 
œ°_quõs˚¡
;

187 
˘xOw√r
;

189 
vîãx_¥im
;

191 
pf_íabÀd
;

192 
pf_a˘ive
;

193 
pf_cuºít_∑ge
;

194 } 
	tdrm_i810_ßªa_t
;

203 
	#DRM_I810_INIT
 0x00

	)

204 
	#DRM_I810_VERTEX
 0x01

	)

205 
	#DRM_I810_CLEAR
 0x02

	)

206 
	#DRM_I810_FLUSH
 0x03

	)

207 
	#DRM_I810_GETAGE
 0x04

	)

208 
	#DRM_I810_GETBUF
 0x05

	)

209 
	#DRM_I810_SWAP
 0x06

	)

210 
	#DRM_I810_COPY
 0x07

	)

211 
	#DRM_I810_DOCOPY
 0x08

	)

212 
	#DRM_I810_OV0INFO
 0x09

	)

213 
	#DRM_I810_FSTATUS
 0x0a

	)

214 
	#DRM_I810_OV0FLIP
 0x0b

	)

215 
	#DRM_I810_MC
 0x0c

	)

216 
	#DRM_I810_RSTATUS
 0x0d

	)

217 
	#DRM_I810_FLIP
 0x0e

	)

219 
	#DRM_IOCTL_I810_INIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I810_INIT
, 
drm_i810_öô_t
)

	)

220 
	#DRM_IOCTL_I810_VERTEX
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I810_VERTEX
, 
drm_i810_vîãx_t
)

	)

221 
	#DRM_IOCTL_I810_CLEAR
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I810_CLEAR
, 
drm_i810_˛ór_t
)

	)

222 
	#DRM_IOCTL_I810_FLUSH
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_I810_FLUSH
)

	)

223 
	#DRM_IOCTL_I810_GETAGE
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_I810_GETAGE
)

	)

224 
	#DRM_IOCTL_I810_GETBUF
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I810_GETBUF
, 
drm_i810_dma_t
)

	)

225 
	#DRM_IOCTL_I810_SWAP
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_I810_SWAP
)

	)

226 
	#DRM_IOCTL_I810_COPY
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I810_COPY
, 
drm_i810_c›y_t
)

	)

227 
	#DRM_IOCTL_I810_DOCOPY
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_I810_DOCOPY
)

	)

228 
	#DRM_IOCTL_I810_OV0INFO
 
	`DRM_IOR
–
DRM_COMMAND_BASE
 + 
DRM_I810_OV0INFO
, 
drm_i810_ovîœy_t
)

	)

229 
	#DRM_IOCTL_I810_FSTATUS
 
	`DRM_IO
 ( 
DRM_COMMAND_BASE
 + 
DRM_I810_FSTATUS
)

	)

230 
	#DRM_IOCTL_I810_OV0FLIP
 
	`DRM_IO
 ( 
DRM_COMMAND_BASE
 + 
DRM_I810_OV0FLIP
)

	)

231 
	#DRM_IOCTL_I810_MC
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I810_MC
, 
drm_i810_mc_t
)

	)

232 
	#DRM_IOCTL_I810_RSTATUS
 
	`DRM_IO
 ( 
DRM_COMMAND_BASE
 + 
DRM_I810_RSTATUS
)

	)

233 
	#DRM_IOCTL_I810_FLIP
 
	`DRM_IO
 ( 
DRM_COMMAND_BASE
 + 
DRM_I810_FLIP
)

	)

235 
	s_drm_i810_˛ór
 {

236 
˛ór_cﬁ‹
;

237 
˛ór_dïth
;

238 
Êags
;

239 } 
	tdrm_i810_˛ór_t
;

246 
	s_drm_i810_vîãx
 {

247 
idx
;

248 
u£d
;

249 
disˇrd
;

250 } 
	tdrm_i810_vîãx_t
;

252 
	s_drm_i810_c›y_t
 {

253 
idx
;

254 
u£d
;

255 *
addªss
;

256 } 
	tdrm_i810_c›y_t
;

258 
	#PR_TRIANGLES
 (0x0<<18)

	)

259 
	#PR_TRISTRIP_0
 (0x1<<18)

	)

260 
	#PR_TRISTRIP_1
 (0x2<<18)

	)

261 
	#PR_TRIFAN
 (0x3<<18)

	)

262 
	#PR_POLYGON
 (0x4<<18)

	)

263 
	#PR_LINES
 (0x5<<18)

	)

264 
	#PR_LINESTRIP
 (0x6<<18)

	)

265 
	#PR_RECTS
 (0x7<<18)

	)

266 
	#PR_MASK
 (0x7<<18)

	)

268 
	sdrm_i810_dma
 {

269 *
vútuÆ
;

270 
ªque°_idx
;

271 
ªque°_size
;

272 
gø¡ed
;

273 } 
	tdrm_i810_dma_t
;

275 
	s_drm_i810_ovîœy_t
 {

276 
off£t
;

277 
physiˇl
;

278 } 
	tdrm_i810_ovîœy_t
;

280 
	s_drm_i810_mc
 {

281 
idx
;

282 
u£d
;

283 
num_blocks
;

284 *
Àngth
;

285 
œ°_ªndî
;

286 } 
	tdrm_i810_mc_t
;

288 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/i915_drm.h

27 #i‚de‡
_UAPI_I915_DRM_H_


28 
	#_UAPI_I915_DRM_H_


	)

30 
	~"drm.h
"

32 #i‡
deföed
(
__˝lu•lus
)

61 
	#I915_L3_PARITY_UEVENT
 "L3_PARITY_ERROR"

	)

62 
	#I915_ERROR_UEVENT
 "ERROR"

	)

63 
	#I915_RESET_UEVENT
 "RESET"

	)

69 
	ei915_mocs_èbÀ_ödex
 {

74 
I915_MOCS_UNCACHED
,

80 
I915_MOCS_PTE
,

86 
I915_MOCS_CACHED
,

96 
	edrm_i915_gem_ígöe_˛ass
 {

97 
I915_ENGINE_CLASS_RENDER
 = 0,

98 
I915_ENGINE_CLASS_COPY
 = 1,

99 
I915_ENGINE_CLASS_VIDEO
 = 2,

100 
I915_ENGINE_CLASS_VIDEO_ENHANCE
 = 3,

102 
I915_ENGINE_CLASS_INVALID
 = -1

110 
	edrm_i915_pmu_ígöe_ßm∂e
 {

111 
I915_SAMPLE_BUSY
 = 0,

112 
I915_SAMPLE_WAIT
 = 1,

113 
I915_SAMPLE_SEMA
 = 2

116 
	#I915_PMU_SAMPLE_BITS
 (4)

	)

117 
	#I915_PMU_SAMPLE_MASK
 (0xf)

	)

118 
	#I915_PMU_SAMPLE_INSTANCE_BITS
 (8)

	)

119 
	#I915_PMU_CLASS_SHIFT
 \

120 (
I915_PMU_SAMPLE_BITS
 + 
I915_PMU_SAMPLE_INSTANCE_BITS
)

	)

122 
	#__I915_PMU_ENGINE
(
˛ass
, 
ö°™˚
, 
ßm∂e
) \

123 ((
˛ass
Ë<< 
I915_PMU_CLASS_SHIFT
 | \

124 (
ö°™˚
Ë<< 
I915_PMU_SAMPLE_BITS
 | \

125 (
ßm∂e
))

	)

127 
	#I915_PMU_ENGINE_BUSY
(
˛ass
, 
ö°™˚
) \

128 
	`__I915_PMU_ENGINE
(
˛ass
, 
ö°™˚
, 
I915_SAMPLE_BUSY
)

	)

130 
	#I915_PMU_ENGINE_WAIT
(
˛ass
, 
ö°™˚
) \

131 
	`__I915_PMU_ENGINE
(
˛ass
, 
ö°™˚
, 
I915_SAMPLE_WAIT
)

	)

133 
	#I915_PMU_ENGINE_SEMA
(
˛ass
, 
ö°™˚
) \

134 
	`__I915_PMU_ENGINE
(
˛ass
, 
ö°™˚
, 
I915_SAMPLE_SEMA
)

	)

136 
	#__I915_PMU_OTHER
(
x
Ë(
	`__I915_PMU_ENGINE
(0xff, 0xff, 0xfË+ 1 + (x))

	)

138 
	#I915_PMU_ACTUAL_FREQUENCY
 
	`__I915_PMU_OTHER
(0)

	)

139 
	#I915_PMU_REQUESTED_FREQUENCY
 
	`__I915_PMU_OTHER
(1)

	)

140 
	#I915_PMU_INTERRUPTS
 
	`__I915_PMU_OTHER
(2)

	)

141 
	#I915_PMU_RC6_RESIDENCY
 
	`__I915_PMU_OTHER
(3)

	)

143 
	#I915_PMU_LAST
 
I915_PMU_RC6_RESIDENCY


	)

147 
	#I915_NR_TEX_REGIONS
 255

	)

149 
	#I915_LOG_MIN_TEX_REGION_SIZE
 14

	)

151 
	s_drm_i915_öô
 {

153 
I915_INIT_DMA
 = 0x01,

154 
I915_CLEANUP_DMA
 = 0x02,

155 
I915_RESUME_DMA
 = 0x03

156 } 
func
;

157 
mmio_off£t
;

158 
ßªa_¥iv_off£t
;

159 
rög_°¨t
;

160 
rög_íd
;

161 
rög_size
;

162 
‰⁄t_off£t
;

163 
back_off£t
;

164 
dïth_off£t
;

165 
w
;

166 
h
;

167 
pôch
;

168 
pôch_bôs
;

169 
back_pôch
;

170 
dïth_pôch
;

171 
˝p
;

172 
chù£t
;

173 } 
	tdrm_i915_öô_t
;

175 
	s_drm_i915_ßªa
 {

176 
drm_ãx_ªgi⁄
 
ãxLi°
[
I915_NR_TEX_REGIONS
 + 1];

177 
œ°_u∂ﬂd
;

178 
œ°_íqueue
;

179 
œ°_di•©ch
;

180 
˘xOw√r
;

181 
ãxAge
;

182 
pf_íabÀd
;

183 
pf_a˘ive
;

184 
pf_cuºít_∑ge
;

185 
≥rf_boxes
;

186 
width
, 
height
;

188 
drm_h™dÀ_t
 
‰⁄t_h™dÀ
;

189 
‰⁄t_off£t
;

190 
‰⁄t_size
;

192 
drm_h™dÀ_t
 
back_h™dÀ
;

193 
back_off£t
;

194 
back_size
;

196 
drm_h™dÀ_t
 
dïth_h™dÀ
;

197 
dïth_off£t
;

198 
dïth_size
;

200 
drm_h™dÀ_t
 
ãx_h™dÀ
;

201 
ãx_off£t
;

202 
ãx_size
;

203 
log_ãx_gønuœrôy
;

204 
pôch
;

205 
rŸ©i⁄
;

206 
rŸ©ed_off£t
;

207 
rŸ©ed_size
;

208 
rŸ©ed_pôch
;

209 
vútuÆX
, 
vútuÆY
;

211 
‰⁄t_tûed
;

212 
back_tûed
;

213 
dïth_tûed
;

214 
rŸ©ed_tûed
;

215 
rŸ©ed2_tûed
;

217 
pùeA_x
;

218 
pùeA_y
;

219 
pùeA_w
;

220 
pùeA_h
;

221 
pùeB_x
;

222 
pùeB_y
;

223 
pùeB_w
;

224 
pùeB_h
;

227 
drm_h™dÀ_t
 
unu£d_h™dÀ
;

228 
__u32
 
unu£d1
, 
unu£d2
, 
unu£d3
;

233 
__u32
 
‰⁄t_bo_h™dÀ
;

234 
__u32
 
back_bo_h™dÀ
;

235 
__u32
 
unu£d_bo_h™dÀ
;

236 
__u32
 
dïth_bo_h™dÀ
;

238 } 
	tdrm_i915_ßªa_t
;

241 
	#∂™eA_x
 
pùeA_x


	)

242 
	#∂™eA_y
 
pùeA_y


	)

243 
	#∂™eA_w
 
pùeA_w


	)

244 
	#∂™eA_h
 
pùeA_h


	)

245 
	#∂™eB_x
 
pùeB_x


	)

246 
	#∂™eB_y
 
pùeB_y


	)

247 
	#∂™eB_w
 
pùeB_w


	)

248 
	#∂™eB_h
 
pùeB_h


	)

252 
	#I915_BOX_RING_EMPTY
 0x1

	)

253 
	#I915_BOX_FLIP
 0x2

	)

254 
	#I915_BOX_WAIT
 0x4

	)

255 
	#I915_BOX_TEXTURE_LOAD
 0x8

	)

256 
	#I915_BOX_LOST_CONTEXT
 0x10

	)

265 
	#DRM_I915_INIT
 0x00

	)

266 
	#DRM_I915_FLUSH
 0x01

	)

267 
	#DRM_I915_FLIP
 0x02

	)

268 
	#DRM_I915_BATCHBUFFER
 0x03

	)

269 
	#DRM_I915_IRQ_EMIT
 0x04

	)

270 
	#DRM_I915_IRQ_WAIT
 0x05

	)

271 
	#DRM_I915_GETPARAM
 0x06

	)

272 
	#DRM_I915_SETPARAM
 0x07

	)

273 
	#DRM_I915_ALLOC
 0x08

	)

274 
	#DRM_I915_FREE
 0x09

	)

275 
	#DRM_I915_INIT_HEAP
 0x0a

	)

276 
	#DRM_I915_CMDBUFFER
 0x0b

	)

277 
	#DRM_I915_DESTROY_HEAP
 0x0c

	)

278 
	#DRM_I915_SET_VBLANK_PIPE
 0x0d

	)

279 
	#DRM_I915_GET_VBLANK_PIPE
 0x0e

	)

280 
	#DRM_I915_VBLANK_SWAP
 0x0f

	)

281 
	#DRM_I915_HWS_ADDR
 0x11

	)

282 
	#DRM_I915_GEM_INIT
 0x13

	)

283 
	#DRM_I915_GEM_EXECBUFFER
 0x14

	)

284 
	#DRM_I915_GEM_PIN
 0x15

	)

285 
	#DRM_I915_GEM_UNPIN
 0x16

	)

286 
	#DRM_I915_GEM_BUSY
 0x17

	)

287 
	#DRM_I915_GEM_THROTTLE
 0x18

	)

288 
	#DRM_I915_GEM_ENTERVT
 0x19

	)

289 
	#DRM_I915_GEM_LEAVEVT
 0x1a

	)

290 
	#DRM_I915_GEM_CREATE
 0x1b

	)

291 
	#DRM_I915_GEM_PREAD
 0x1c

	)

292 
	#DRM_I915_GEM_PWRITE
 0x1d

	)

293 
	#DRM_I915_GEM_MMAP
 0x1e

	)

294 
	#DRM_I915_GEM_SET_DOMAIN
 0x1f

	)

295 
	#DRM_I915_GEM_SW_FINISH
 0x20

	)

296 
	#DRM_I915_GEM_SET_TILING
 0x21

	)

297 
	#DRM_I915_GEM_GET_TILING
 0x22

	)

298 
	#DRM_I915_GEM_GET_APERTURE
 0x23

	)

299 
	#DRM_I915_GEM_MMAP_GTT
 0x24

	)

300 
	#DRM_I915_GET_PIPE_FROM_CRTC_ID
 0x25

	)

301 
	#DRM_I915_GEM_MADVISE
 0x26

	)

302 
	#DRM_I915_OVERLAY_PUT_IMAGE
 0x27

	)

303 
	#DRM_I915_OVERLAY_ATTRS
 0x28

	)

304 
	#DRM_I915_GEM_EXECBUFFER2
 0x29

	)

305 
	#DRM_I915_GEM_EXECBUFFER2_WR
 
DRM_I915_GEM_EXECBUFFER2


	)

306 
	#DRM_I915_GET_SPRITE_COLORKEY
 0x2a

	)

307 
	#DRM_I915_SET_SPRITE_COLORKEY
 0x2b

	)

308 
	#DRM_I915_GEM_WAIT
 0x2c

	)

309 
	#DRM_I915_GEM_CONTEXT_CREATE
 0x2d

	)

310 
	#DRM_I915_GEM_CONTEXT_DESTROY
 0x2e

	)

311 
	#DRM_I915_GEM_SET_CACHING
 0x2f

	)

312 
	#DRM_I915_GEM_GET_CACHING
 0x30

	)

313 
	#DRM_I915_REG_READ
 0x31

	)

314 
	#DRM_I915_GET_RESET_STATS
 0x32

	)

315 
	#DRM_I915_GEM_USERPTR
 0x33

	)

316 
	#DRM_I915_GEM_CONTEXT_GETPARAM
 0x34

	)

317 
	#DRM_I915_GEM_CONTEXT_SETPARAM
 0x35

	)

318 
	#DRM_I915_PERF_OPEN
 0x36

	)

319 
	#DRM_I915_PERF_ADD_CONFIG
 0x37

	)

320 
	#DRM_I915_PERF_REMOVE_CONFIG
 0x38

	)

322 
	#DRM_IOCTL_I915_INIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_INIT
, 
drm_i915_öô_t
)

	)

323 
	#DRM_IOCTL_I915_FLUSH
 
	`DRM_IO
 ( 
DRM_COMMAND_BASE
 + 
DRM_I915_FLUSH
)

	)

324 
	#DRM_IOCTL_I915_FLIP
 
	`DRM_IO
 ( 
DRM_COMMAND_BASE
 + 
DRM_I915_FLIP
)

	)

325 
	#DRM_IOCTL_I915_BATCHBUFFER
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_BATCHBUFFER
, 
drm_i915_b©chbuf„r_t
)

	)

326 
	#DRM_IOCTL_I915_IRQ_EMIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_IRQ_EMIT
, 
drm_i915_úq_emô_t
)

	)

327 
	#DRM_IOCTL_I915_IRQ_WAIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_IRQ_WAIT
, 
drm_i915_úq_waô_t
)

	)

328 
	#DRM_IOCTL_I915_GETPARAM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GETPARAM
, 
drm_i915_gë∑øm_t
)

	)

329 
	#DRM_IOCTL_I915_SETPARAM
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_SETPARAM
, 
drm_i915_£ç¨am_t
)

	)

330 
	#DRM_IOCTL_I915_ALLOC
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_ALLOC
, 
drm_i915_mem_Æloc_t
)

	)

331 
	#DRM_IOCTL_I915_FREE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_FREE
, 
drm_i915_mem_‰ì_t
)

	)

332 
	#DRM_IOCTL_I915_INIT_HEAP
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_INIT_HEAP
, 
drm_i915_mem_öô_hóp_t
)

	)

333 
	#DRM_IOCTL_I915_CMDBUFFER
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_CMDBUFFER
, 
drm_i915_cmdbuf„r_t
)

	)

334 
	#DRM_IOCTL_I915_DESTROY_HEAP
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_DESTROY_HEAP
, 
drm_i915_mem_de°roy_hóp_t
)

	)

335 
	#DRM_IOCTL_I915_SET_VBLANK_PIPE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_I915_SET_VBLANK_PIPE
, 
drm_i915_vbœnk_pùe_t
)

	)

336 
	#DRM_IOCTL_I915_GET_VBLANK_PIPE
 
	`DRM_IOR
–
DRM_COMMAND_BASE
 + 
DRM_I915_GET_VBLANK_PIPE
, 
drm_i915_vbœnk_pùe_t
)

	)

337 
	#DRM_IOCTL_I915_VBLANK_SWAP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_VBLANK_SWAP
, 
drm_i915_vbœnk_sw≠_t
)

	)

338 
	#DRM_IOCTL_I915_HWS_ADDR
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_HWS_ADDR
, 
drm_i915_gem_öô
)

	)

339 
	#DRM_IOCTL_I915_GEM_INIT
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_INIT
, 
drm_i915_gem_öô
)

	)

340 
	#DRM_IOCTL_I915_GEM_EXECBUFFER
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_EXECBUFFER
, 
drm_i915_gem_execbuf„r
)

	)

341 
	#DRM_IOCTL_I915_GEM_EXECBUFFER2
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_EXECBUFFER2
, 
drm_i915_gem_execbuf„r2
)

	)

342 
	#DRM_IOCTL_I915_GEM_EXECBUFFER2_WR
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_EXECBUFFER2_WR
, 
drm_i915_gem_execbuf„r2
)

	)

343 
	#DRM_IOCTL_I915_GEM_PIN
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_PIN
, 
drm_i915_gem_pö
)

	)

344 
	#DRM_IOCTL_I915_GEM_UNPIN
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_UNPIN
, 
drm_i915_gem_u≈ö
)

	)

345 
	#DRM_IOCTL_I915_GEM_BUSY
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_BUSY
, 
drm_i915_gem_busy
)

	)

346 
	#DRM_IOCTL_I915_GEM_SET_CACHING
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_SET_CACHING
, 
drm_i915_gem_ˇchög
)

	)

347 
	#DRM_IOCTL_I915_GEM_GET_CACHING
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_GET_CACHING
, 
drm_i915_gem_ˇchög
)

	)

348 
	#DRM_IOCTL_I915_GEM_THROTTLE
 
	`DRM_IO
 ( 
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_THROTTLE
)

	)

349 
	#DRM_IOCTL_I915_GEM_ENTERVT
 
	`DRM_IO
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_ENTERVT
)

	)

350 
	#DRM_IOCTL_I915_GEM_LEAVEVT
 
	`DRM_IO
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_LEAVEVT
)

	)

351 
	#DRM_IOCTL_I915_GEM_CREATE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_CREATE
, 
drm_i915_gem_¸óã
)

	)

352 
	#DRM_IOCTL_I915_GEM_PREAD
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_PREAD
, 
drm_i915_gem_¥ód
)

	)

353 
	#DRM_IOCTL_I915_GEM_PWRITE
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_PWRITE
, 
drm_i915_gem_pwrôe
)

	)

354 
	#DRM_IOCTL_I915_GEM_MMAP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_MMAP
, 
drm_i915_gem_mm≠
)

	)

355 
	#DRM_IOCTL_I915_GEM_MMAP_GTT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_MMAP_GTT
, 
drm_i915_gem_mm≠_gâ
)

	)

356 
	#DRM_IOCTL_I915_GEM_SET_DOMAIN
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_SET_DOMAIN
, 
drm_i915_gem_£t_domaö
)

	)

357 
	#DRM_IOCTL_I915_GEM_SW_FINISH
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_SW_FINISH
, 
drm_i915_gem_sw_föish
)

	)

358 
	#DRM_IOCTL_I915_GEM_SET_TILING
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_SET_TILING
, 
drm_i915_gem_£t_tûög
)

	)

359 
	#DRM_IOCTL_I915_GEM_GET_TILING
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_GET_TILING
, 
drm_i915_gem_gë_tûög
)

	)

360 
	#DRM_IOCTL_I915_GEM_GET_APERTURE
 
	`DRM_IOR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_GET_APERTURE
, 
drm_i915_gem_gë_≠îtuª
)

	)

361 
	#DRM_IOCTL_I915_GET_PIPE_FROM_CRTC_ID
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GET_PIPE_FROM_CRTC_ID
, 
drm_i915_gë_pùe_‰om_¸tc_id
)

	)

362 
	#DRM_IOCTL_I915_GEM_MADVISE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_MADVISE
, 
drm_i915_gem_madvi£
)

	)

363 
	#DRM_IOCTL_I915_OVERLAY_PUT_IMAGE
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_OVERLAY_PUT_IMAGE
, 
drm_öãl_ovîœy_put_image
)

	)

364 
	#DRM_IOCTL_I915_OVERLAY_ATTRS
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_OVERLAY_ATTRS
, 
drm_öãl_ovîœy_©ås
)

	)

365 
	#DRM_IOCTL_I915_SET_SPRITE_COLORKEY
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_SET_SPRITE_COLORKEY
, 
drm_öãl_•rôe_cﬁ‹key
)

	)

366 
	#DRM_IOCTL_I915_GET_SPRITE_COLORKEY
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GET_SPRITE_COLORKEY
, 
drm_öãl_•rôe_cﬁ‹key
)

	)

367 
	#DRM_IOCTL_I915_GEM_WAIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_WAIT
, 
drm_i915_gem_waô
)

	)

368 
	#DRM_IOCTL_I915_GEM_CONTEXT_CREATE
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_CONTEXT_CREATE
, 
drm_i915_gem_c⁄ãxt_¸óã
)

	)

369 
	#DRM_IOCTL_I915_GEM_CONTEXT_DESTROY
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_CONTEXT_DESTROY
, 
drm_i915_gem_c⁄ãxt_de°roy
)

	)

370 
	#DRM_IOCTL_I915_REG_READ
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_REG_READ
, 
drm_i915_ªg_ªad
)

	)

371 
	#DRM_IOCTL_I915_GET_RESET_STATS
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GET_RESET_STATS
, 
drm_i915_ª£t_°©s
)

	)

372 
	#DRM_IOCTL_I915_GEM_USERPTR
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_USERPTR
, 
drm_i915_gem_u£Ωå
)

	)

373 
	#DRM_IOCTL_I915_GEM_CONTEXT_GETPARAM
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_CONTEXT_GETPARAM
, 
drm_i915_gem_c⁄ãxt_∑øm
)

	)

374 
	#DRM_IOCTL_I915_GEM_CONTEXT_SETPARAM
 
	`DRM_IOWR
 (
DRM_COMMAND_BASE
 + 
DRM_I915_GEM_CONTEXT_SETPARAM
, 
drm_i915_gem_c⁄ãxt_∑øm
)

	)

375 
	#DRM_IOCTL_I915_PERF_OPEN
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_PERF_OPEN
, 
drm_i915_≥rf_›í_∑øm
)

	)

376 
	#DRM_IOCTL_I915_PERF_ADD_CONFIG
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_PERF_ADD_CONFIG
, 
drm_i915_≥rf_ﬂ_c⁄fig
)

	)

377 
	#DRM_IOCTL_I915_PERF_REMOVE_CONFIG
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_I915_PERF_REMOVE_CONFIG
, 
__u64
)

	)

382 
	sdrm_i915_b©chbuf„r
 {

383 
°¨t
;

384 
u£d
;

385 
DR1
;

386 
DR4
;

387 
num_˛ùª˘s
;

388 
drm_˛ù_ª˘
 
__u£r
 *
˛ùª˘s
;

389 } 
	tdrm_i915_b©chbuf„r_t
;

394 
	s_drm_i915_cmdbuf„r
 {

395 
__u£r
 *
buf
;

396 
sz
;

397 
DR1
;

398 
DR4
;

399 
num_˛ùª˘s
;

400 
drm_˛ù_ª˘
 
__u£r
 *
˛ùª˘s
;

401 } 
	tdrm_i915_cmdbuf„r_t
;

405 
	sdrm_i915_úq_emô
 {

406 
__u£r
 *
úq_£q
;

407 } 
	tdrm_i915_úq_emô_t
;

409 
	sdrm_i915_úq_waô
 {

410 
úq_£q
;

411 } 
	tdrm_i915_úq_waô_t
;

415 
	#I915_PARAM_IRQ_ACTIVE
 1

	)

416 
	#I915_PARAM_ALLOW_BATCHBUFFER
 2

	)

417 
	#I915_PARAM_LAST_DISPATCH
 3

	)

418 
	#I915_PARAM_CHIPSET_ID
 4

	)

419 
	#I915_PARAM_HAS_GEM
 5

	)

420 
	#I915_PARAM_NUM_FENCES_AVAIL
 6

	)

421 
	#I915_PARAM_HAS_OVERLAY
 7

	)

422 
	#I915_PARAM_HAS_PAGEFLIPPING
 8

	)

423 
	#I915_PARAM_HAS_EXECBUF2
 9

	)

424 
	#I915_PARAM_HAS_BSD
 10

	)

425 
	#I915_PARAM_HAS_BLT
 11

	)

426 
	#I915_PARAM_HAS_RELAXED_FENCING
 12

	)

427 
	#I915_PARAM_HAS_COHERENT_RINGS
 13

	)

428 
	#I915_PARAM_HAS_EXEC_CONSTANTS
 14

	)

429 
	#I915_PARAM_HAS_RELAXED_DELTA
 15

	)

430 
	#I915_PARAM_HAS_GEN7_SOL_RESET
 16

	)

431 
	#I915_PARAM_HAS_LLC
 17

	)

432 
	#I915_PARAM_HAS_ALIASING_PPGTT
 18

	)

433 
	#I915_PARAM_HAS_WAIT_TIMEOUT
 19

	)

434 
	#I915_PARAM_HAS_SEMAPHORES
 20

	)

435 
	#I915_PARAM_HAS_PRIME_VMAP_FLUSH
 21

	)

436 
	#I915_PARAM_HAS_VEBOX
 22

	)

437 
	#I915_PARAM_HAS_SECURE_BATCHES
 23

	)

438 
	#I915_PARAM_HAS_PINNED_BATCHES
 24

	)

439 
	#I915_PARAM_HAS_EXEC_NO_RELOC
 25

	)

440 
	#I915_PARAM_HAS_EXEC_HANDLE_LUT
 26

	)

441 
	#I915_PARAM_HAS_WT
 27

	)

442 
	#I915_PARAM_CMD_PARSER_VERSION
 28

	)

443 
	#I915_PARAM_HAS_COHERENT_PHYS_GTT
 29

	)

444 
	#I915_PARAM_MMAP_VERSION
 30

	)

445 
	#I915_PARAM_HAS_BSD2
 31

	)

446 
	#I915_PARAM_REVISION
 32

	)

447 
	#I915_PARAM_SUBSLICE_TOTAL
 33

	)

448 
	#I915_PARAM_EU_TOTAL
 34

	)

449 
	#I915_PARAM_HAS_GPU_RESET
 35

	)

450 
	#I915_PARAM_HAS_RESOURCE_STREAMER
 36

	)

451 
	#I915_PARAM_HAS_EXEC_SOFTPIN
 37

	)

452 
	#I915_PARAM_HAS_POOLED_EU
 38

	)

453 
	#I915_PARAM_MIN_EU_IN_POOL
 39

	)

454 
	#I915_PARAM_MMAP_GTT_VERSION
 40

	)

465 
	#I915_PARAM_HAS_SCHEDULER
 41

	)

466 
	#I915_SCHEDULER_CAP_ENABLED
 (1u»<< 0)

	)

467 
	#I915_SCHEDULER_CAP_PRIORITY
 (1u»<< 1)

	)

468 
	#I915_SCHEDULER_CAP_PREEMPTION
 (1u»<< 2)

	)

470 
	#I915_PARAM_HUC_STATUS
 42

	)

476 
	#I915_PARAM_HAS_EXEC_ASYNC
 43

	)

483 
	#I915_PARAM_HAS_EXEC_FENCE
 44

	)

489 
	#I915_PARAM_HAS_EXEC_CAPTURE
 45

	)

491 
	#I915_PARAM_SLICE_MASK
 46

	)

496 
	#I915_PARAM_SUBSLICE_MASK
 47

	)

502 
	#I915_PARAM_HAS_EXEC_BATCH_FIRST
 48

	)

507 
	#I915_PARAM_HAS_EXEC_FENCE_ARRAY
 49

	)

522 
	#I915_PARAM_HAS_CONTEXT_ISOLATION
 50

	)

528 
	#I915_PARAM_CS_TIMESTAMP_FREQUENCY
 51

	)

530 
	sdrm_i915_gë∑øm
 {

531 
__s32
 
∑øm
;

536 
__u£r
 *
vÆue
;

537 } 
	tdrm_i915_gë∑øm_t
;

541 
	#I915_SETPARAM_USE_MI_BATCHBUFFER_START
 1

	)

542 
	#I915_SETPARAM_TEX_LRU_LOG_GRANULARITY
 2

	)

543 
	#I915_SETPARAM_ALLOW_BATCHBUFFER
 3

	)

544 
	#I915_SETPARAM_NUM_USED_FENCES
 4

	)

546 
	sdrm_i915_£ç¨am
 {

547 
∑øm
;

548 
vÆue
;

549 } 
	tdrm_i915_£ç¨am_t
;

553 
	#I915_MEM_REGION_AGP
 1

	)

555 
	sdrm_i915_mem_Æloc
 {

556 
ªgi⁄
;

557 
Æignmít
;

558 
size
;

559 
__u£r
 *
ªgi⁄_off£t
;

560 } 
	tdrm_i915_mem_Æloc_t
;

562 
	sdrm_i915_mem_‰ì
 {

563 
ªgi⁄
;

564 
ªgi⁄_off£t
;

565 } 
	tdrm_i915_mem_‰ì_t
;

567 
	sdrm_i915_mem_öô_hóp
 {

568 
ªgi⁄
;

569 
size
;

570 
°¨t
;

571 } 
	tdrm_i915_mem_öô_hóp_t
;

576 
	sdrm_i915_mem_de°roy_hóp
 {

577 
ªgi⁄
;

578 } 
	tdrm_i915_mem_de°roy_hóp_t
;

582 
	#DRM_I915_VBLANK_PIPE_A
 1

	)

583 
	#DRM_I915_VBLANK_PIPE_B
 2

	)

585 
	sdrm_i915_vbœnk_pùe
 {

586 
pùe
;

587 } 
	tdrm_i915_vbœnk_pùe_t
;

591 
	sdrm_i915_vbœnk_sw≠
 {

592 
drm_døwabÀ_t
 
døwabÀ
;

593 
drm_vbœnk_£q_ty≥
 
£qty≥
;

594 
£quí˚
;

595 } 
	tdrm_i915_vbœnk_sw≠_t
;

597 
	sdrm_i915_hws_addr
 {

598 
__u64
 
addr
;

599 } 
	tdrm_i915_hws_addr_t
;

601 
	sdrm_i915_gem_öô
 {

606 
__u64
 
gâ_°¨t
;

611 
__u64
 
gâ_íd
;

614 
	sdrm_i915_gem_¸óã
 {

620 
__u64
 
size
;

626 
__u32
 
h™dÀ
;

627 
__u32
 
∑d
;

630 
	sdrm_i915_gem_¥ód
 {

632 
__u32
 
h™dÀ
;

633 
__u32
 
∑d
;

635 
__u64
 
off£t
;

637 
__u64
 
size
;

643 
__u64
 
d©a_±r
;

646 
	sdrm_i915_gem_pwrôe
 {

648 
__u32
 
h™dÀ
;

649 
__u32
 
∑d
;

651 
__u64
 
off£t
;

653 
__u64
 
size
;

659 
__u64
 
d©a_±r
;

662 
	sdrm_i915_gem_mm≠
 {

664 
__u32
 
h™dÀ
;

665 
__u32
 
∑d
;

667 
__u64
 
off£t
;

673 
__u64
 
size
;

679 
__u64
 
addr_±r
;

686 
__u64
 
Êags
;

687 
	#I915_MMAP_WC
 0x1

	)

690 
	sdrm_i915_gem_mm≠_gâ
 {

692 
__u32
 
h™dÀ
;

693 
__u32
 
∑d
;

699 
__u64
 
off£t
;

702 
	sdrm_i915_gem_£t_domaö
 {

704 
__u32
 
h™dÀ
;

707 
__u32
 
ªad_domaös
;

710 
__u32
 
wrôe_domaö
;

713 
	sdrm_i915_gem_sw_föish
 {

715 
__u32
 
h™dÀ
;

718 
	sdrm_i915_gem_ªloˇti⁄_íåy
 {

727 
__u32
 
èrgë_h™dÀ
;

733 
__u32
 
dñè
;

736 
__u64
 
off£t
;

746 
__u64
 
¥esumed_off£t
;

751 
__u32
 
ªad_domaös
;

760 
__u32
 
wrôe_domaö
;

771 
	#I915_GEM_DOMAIN_CPU
 0x00000001

	)

773 
	#I915_GEM_DOMAIN_RENDER
 0x00000002

	)

775 
	#I915_GEM_DOMAIN_SAMPLER
 0x00000004

	)

777 
	#I915_GEM_DOMAIN_COMMAND
 0x00000008

	)

779 
	#I915_GEM_DOMAIN_INSTRUCTION
 0x00000010

	)

781 
	#I915_GEM_DOMAIN_VERTEX
 0x00000020

	)

783 
	#I915_GEM_DOMAIN_GTT
 0x00000040

	)

785 
	#I915_GEM_DOMAIN_WC
 0x00000080

	)

788 
	sdrm_i915_gem_exec_obje˘
 {

793 
__u32
 
h™dÀ
;

796 
__u32
 
ªloˇti⁄_cou¡
;

801 
__u64
 
ªlocs_±r
;

804 
__u64
 
Æignmít
;

810 
__u64
 
off£t
;

813 
	sdrm_i915_gem_execbuf„r
 {

824 
__u64
 
buf„rs_±r
;

825 
__u32
 
buf„r_cou¡
;

828 
__u32
 
b©ch_°¨t_off£t
;

830 
__u32
 
b©ch_Àn
;

831 
__u32
 
DR1
;

832 
__u32
 
DR4
;

833 
__u32
 
num_˛ùª˘s
;

835 
__u64
 
˛ùª˘s_±r
;

838 
	sdrm_i915_gem_exec_obje˘2
 {

843 
__u32
 
h™dÀ
;

846 
__u32
 
ªloˇti⁄_cou¡
;

851 
__u64
 
ªlocs_±r
;

854 
__u64
 
Æignmít
;

864 
__u64
 
off£t
;

866 
	#EXEC_OBJECT_NEEDS_FENCE
 (1<<0)

	)

867 
	#EXEC_OBJECT_NEEDS_GTT
 (1<<1)

	)

868 
	#EXEC_OBJECT_WRITE
 (1<<2)

	)

869 
	#EXEC_OBJECT_SUPPORTS_48B_ADDRESS
 (1<<3)

	)

870 
	#EXEC_OBJECT_PINNED
 (1<<4)

	)

871 
	#EXEC_OBJECT_PAD_TO_SIZE
 (1<<5)

	)

892 
	#EXEC_OBJECT_ASYNC
 (1<<6)

	)

899 
	#EXEC_OBJECT_CAPTURE
 (1<<7)

	)

901 
	#__EXEC_OBJECT_UNKNOWN_FLAGS
 -(
EXEC_OBJECT_CAPTURE
<<1)

	)

902 
__u64
 
Êags
;

905 
__u64
 
rsvd1
;

906 
__u64
 
∑d_to_size
;

908 
__u64
 
rsvd2
;

911 
	sdrm_i915_gem_exec_„n˚
 {

915 
__u32
 
h™dÀ
;

917 
	#I915_EXEC_FENCE_WAIT
 (1<<0)

	)

918 
	#I915_EXEC_FENCE_SIGNAL
 (1<<1)

	)

919 
	#__I915_EXEC_FENCE_UNKNOWN_FLAGS
 (-(
I915_EXEC_FENCE_SIGNAL
 << 1))

	)

920 
__u32
 
Êags
;

923 
	sdrm_i915_gem_execbuf„r2
 {

927 
__u64
 
buf„rs_±r
;

928 
__u32
 
buf„r_cou¡
;

931 
__u32
 
b©ch_°¨t_off£t
;

933 
__u32
 
b©ch_Àn
;

934 
__u32
 
DR1
;

935 
__u32
 
DR4
;

936 
__u32
 
num_˛ùª˘s
;

942 
__u64
 
˛ùª˘s_±r
;

943 
	#I915_EXEC_RING_MASK
 (7<<0)

	)

944 
	#I915_EXEC_DEFAULT
 (0<<0)

	)

945 
	#I915_EXEC_RENDER
 (1<<0)

	)

946 
	#I915_EXEC_BSD
 (2<<0)

	)

947 
	#I915_EXEC_BLT
 (3<<0)

	)

948 
	#I915_EXEC_VEBOX
 (4<<0)

	)

956 
	#I915_EXEC_CONSTANTS_MASK
 (3<<6)

	)

957 
	#I915_EXEC_CONSTANTS_REL_GENERAL
 (0<<6Ë

	)

958 
	#I915_EXEC_CONSTANTS_ABSOLUTE
 (1<<6)

	)

959 
	#I915_EXEC_CONSTANTS_REL_SURFACE
 (2<<6Ë

	)

960 
__u64
 
Êags
;

961 
__u64
 
rsvd1
;

962 
__u64
 
rsvd2
;

966 
	#I915_EXEC_GEN7_SOL_RESET
 (1<<8)

	)

971 
	#I915_EXEC_SECURE
 (1<<9)

	)

980 
	#I915_EXEC_IS_PINNED
 (1<<10)

	)

987 
	#I915_EXEC_NO_RELOC
 (1<<11)

	)

992 
	#I915_EXEC_HANDLE_LUT
 (1<<12)

	)

995 
	#I915_EXEC_BSD_SHIFT
 (13)

	)

996 
	#I915_EXEC_BSD_MASK
 (3 << 
I915_EXEC_BSD_SHIFT
)

	)

998 
	#I915_EXEC_BSD_DEFAULT
 (0 << 
I915_EXEC_BSD_SHIFT
)

	)

999 
	#I915_EXEC_BSD_RING1
 (1 << 
I915_EXEC_BSD_SHIFT
)

	)

1000 
	#I915_EXEC_BSD_RING2
 (2 << 
I915_EXEC_BSD_SHIFT
)

	)

1005 
	#I915_EXEC_RESOURCE_STREAMER
 (1<<15)

	)

1013 
	#I915_EXEC_FENCE_IN
 (1<<16)

	)

1030 
	#I915_EXEC_FENCE_OUT
 (1<<17)

	)

1041 
	#I915_EXEC_BATCH_FIRST
 (1<<18)

	)

1047 
	#I915_EXEC_FENCE_ARRAY
 (1<<19)

	)

1049 
	#__I915_EXEC_UNKNOWN_FLAGS
 (-(
I915_EXEC_FENCE_ARRAY
<<1))

	)

1051 
	#I915_EXEC_CONTEXT_ID_MASK
 (0xffffffff)

	)

1052 
	#i915_execbuf„r2_£t_c⁄ãxt_id
(
eb2
, 
c⁄ãxt
) \

1053 (
eb2
).
rsvd1
 = 
c⁄ãxt
 & 
I915_EXEC_CONTEXT_ID_MASK


	)

1054 
	#i915_execbuf„r2_gë_c⁄ãxt_id
(
eb2
) \

1055 ((
eb2
).
rsvd1
 & 
I915_EXEC_CONTEXT_ID_MASK
)

	)

1057 
	sdrm_i915_gem_pö
 {

1059 
__u32
 
h™dÀ
;

1060 
__u32
 
∑d
;

1063 
__u64
 
Æignmít
;

1066 
__u64
 
off£t
;

1069 
	sdrm_i915_gem_u≈ö
 {

1071 
__u32
 
h™dÀ
;

1072 
__u32
 
∑d
;

1075 
	sdrm_i915_gem_busy
 {

1077 
__u32
 
h™dÀ
;

1123 
__u32
 
busy
;

1132 
	#I915_CACHING_NONE
 0

	)

1140 
	#I915_CACHING_CACHED
 1

	)

1151 
	#I915_CACHING_DISPLAY
 2

	)

1153 
	sdrm_i915_gem_ˇchög
 {

1156 
__u32
 
h™dÀ
;

1164 
__u32
 
ˇchög
;

1167 
	#I915_TILING_NONE
 0

	)

1168 
	#I915_TILING_X
 1

	)

1169 
	#I915_TILING_Y
 2

	)

1170 
	#I915_TILING_LAST
 
I915_TILING_Y


	)

1172 
	#I915_BIT_6_SWIZZLE_NONE
 0

	)

1173 
	#I915_BIT_6_SWIZZLE_9
 1

	)

1174 
	#I915_BIT_6_SWIZZLE_9_10
 2

	)

1175 
	#I915_BIT_6_SWIZZLE_9_11
 3

	)

1176 
	#I915_BIT_6_SWIZZLE_9_10_11
 4

	)

1178 
	#I915_BIT_6_SWIZZLE_UNKNOWN
 5

	)

1180 
	#I915_BIT_6_SWIZZLE_9_17
 6

	)

1181 
	#I915_BIT_6_SWIZZLE_9_10_17
 7

	)

1183 
	sdrm_i915_gem_£t_tûög
 {

1185 
__u32
 
h™dÀ
;

1199 
__u32
 
tûög_mode
;

1205 
__u32
 
°ride
;

1211 
__u32
 
swizzÀ_mode
;

1214 
	sdrm_i915_gem_gë_tûög
 {

1216 
__u32
 
h™dÀ
;

1222 
__u32
 
tûög_mode
;

1228 
__u32
 
swizzÀ_mode
;

1234 
__u32
 
phys_swizzÀ_mode
;

1237 
	sdrm_i915_gem_gë_≠îtuª
 {

1239 
__u64
 
≠î_size
;

1245 
__u64
 
≠î_avaûabÀ_size
;

1248 
	sdrm_i915_gë_pùe_‰om_¸tc_id
 {

1250 
__u32
 
¸tc_id
;

1253 
__u32
 
pùe
;

1256 
	#I915_MADV_WILLNEED
 0

	)

1257 
	#I915_MADV_DONTNEED
 1

	)

1258 
	#__I915_MADV_PURGED
 2

	)

1260 
	sdrm_i915_gem_madvi£
 {

1262 
__u32
 
h™dÀ
;

1267 
__u32
 
madv
;

1270 
__u32
 
ªèöed
;

1274 
	#I915_OVERLAY_TYPE_MASK
 0xff

	)

1275 
	#I915_OVERLAY_YUV_PLANAR
 0x01

	)

1276 
	#I915_OVERLAY_YUV_PACKED
 0x02

	)

1277 
	#I915_OVERLAY_RGB
 0x03

	)

1279 
	#I915_OVERLAY_DEPTH_MASK
 0xff00

	)

1280 
	#I915_OVERLAY_RGB24
 0x1000

	)

1281 
	#I915_OVERLAY_RGB16
 0x2000

	)

1282 
	#I915_OVERLAY_RGB15
 0x3000

	)

1283 
	#I915_OVERLAY_YUV422
 0x0100

	)

1284 
	#I915_OVERLAY_YUV411
 0x0200

	)

1285 
	#I915_OVERLAY_YUV420
 0x0300

	)

1286 
	#I915_OVERLAY_YUV410
 0x0400

	)

1288 
	#I915_OVERLAY_SWAP_MASK
 0xff0000

	)

1289 
	#I915_OVERLAY_NO_SWAP
 0x000000

	)

1290 
	#I915_OVERLAY_UV_SWAP
 0x010000

	)

1291 
	#I915_OVERLAY_Y_SWAP
 0x020000

	)

1292 
	#I915_OVERLAY_Y_AND_UV_SWAP
 0x030000

	)

1294 
	#I915_OVERLAY_FLAGS_MASK
 0xff000000

	)

1295 
	#I915_OVERLAY_ENABLE
 0x01000000

	)

1297 
	sdrm_öãl_ovîœy_put_image
 {

1299 
__u32
 
Êags
;

1301 
__u32
 
bo_h™dÀ
;

1303 
__u16
 
°ride_Y
;

1304 
__u16
 
°ride_UV
;

1305 
__u32
 
off£t_Y
;

1306 
__u32
 
off£t_U
;

1307 
__u32
 
off£t_V
;

1309 
__u16
 
§c_width
;

1310 
__u16
 
§c_height
;

1312 
__u16
 
§c_sˇn_width
;

1313 
__u16
 
§c_sˇn_height
;

1315 
__u32
 
¸tc_id
;

1316 
__u16
 
d°_x
;

1317 
__u16
 
d°_y
;

1318 
__u16
 
d°_width
;

1319 
__u16
 
d°_height
;

1323 
	#I915_OVERLAY_UPDATE_ATTRS
 (1<<0)

	)

1324 
	#I915_OVERLAY_UPDATE_GAMMA
 (1<<1)

	)

1325 
	#I915_OVERLAY_DISABLE_DEST_COLORKEY
 (1<<2)

	)

1326 
	sdrm_öãl_ovîœy_©ås
 {

1327 
__u32
 
Êags
;

1328 
__u32
 
cﬁ‹_key
;

1329 
__s32
 
brighäess
;

1330 
__u32
 
c⁄åa°
;

1331 
__u32
 
ßtuøti⁄
;

1332 
__u32
 
gamma0
;

1333 
__u32
 
gamma1
;

1334 
__u32
 
gamma2
;

1335 
__u32
 
gamma3
;

1336 
__u32
 
gamma4
;

1337 
__u32
 
gamma5
;

1361 
	#I915_SET_COLORKEY_NONE
 (1<<0Ë

	)

1362 
	#I915_SET_COLORKEY_DESTINATION
 (1<<1)

	)

1363 
	#I915_SET_COLORKEY_SOURCE
 (1<<2)

	)

1364 
	sdrm_öãl_•rôe_cﬁ‹key
 {

1365 
__u32
 
∂™e_id
;

1366 
__u32
 
mö_vÆue
;

1367 
__u32
 
ch™√l_mask
;

1368 
__u32
 
max_vÆue
;

1369 
__u32
 
Êags
;

1372 
	sdrm_i915_gem_waô
 {

1374 
__u32
 
bo_h™dÀ
;

1375 
__u32
 
Êags
;

1377 
__s64
 
timeout_ns
;

1380 
	sdrm_i915_gem_c⁄ãxt_¸óã
 {

1382 
__u32
 
˘x_id
;

1383 
__u32
 
∑d
;

1386 
	sdrm_i915_gem_c⁄ãxt_de°roy
 {

1387 
__u32
 
˘x_id
;

1388 
__u32
 
∑d
;

1391 
	sdrm_i915_ªg_ªad
 {

1398 
__u64
 
off£t
;

1399 
	#I915_REG_READ_8B_WA
 (1u»<< 0)

	)

1401 
__u64
 
vÆ
;

1412 
	sdrm_i915_ª£t_°©s
 {

1413 
__u32
 
˘x_id
;

1414 
__u32
 
Êags
;

1417 
__u32
 
ª£t_cou¡
;

1420 
__u32
 
b©ch_a˘ive
;

1423 
__u32
 
b©ch_≥ndög
;

1425 
__u32
 
∑d
;

1428 
	sdrm_i915_gem_u£Ωå
 {

1429 
__u64
 
u£r_±r
;

1430 
__u64
 
u£r_size
;

1431 
__u32
 
Êags
;

1432 
	#I915_USERPTR_READ_ONLY
 0x1

	)

1433 
	#I915_USERPTR_UNSYNCHRONIZED
 0x80000000

	)

1439 
__u32
 
h™dÀ
;

1442 
	sdrm_i915_gem_c⁄ãxt_∑øm
 {

1443 
__u32
 
˘x_id
;

1444 
__u32
 
size
;

1445 
__u64
 
∑øm
;

1446 
	#I915_CONTEXT_PARAM_BAN_PERIOD
 0x1

	)

1447 
	#I915_CONTEXT_PARAM_NO_ZEROMAP
 0x2

	)

1448 
	#I915_CONTEXT_PARAM_GTT_SIZE
 0x3

	)

1449 
	#I915_CONTEXT_PARAM_NO_ERROR_CAPTURE
 0x4

	)

1450 
	#I915_CONTEXT_PARAM_BANNABLE
 0x5

	)

1451 
	#I915_CONTEXT_PARAM_PRIORITY
 0x6

	)

1452 
	#I915_CONTEXT_MAX_USER_PRIORITY
 1023

	)

1453 
	#I915_CONTEXT_DEFAULT_PRIORITY
 0

	)

1454 
	#I915_CONTEXT_MIN_USER_PRIORITY
 -1023

	)

1455 
__u64
 
vÆue
;

1458 
	edrm_i915_ﬂ_f‹m©
 {

1459 
I915_OA_FORMAT_A13
 = 1,

1460 
I915_OA_FORMAT_A29
,

1461 
I915_OA_FORMAT_A13_B8_C8
,

1462 
I915_OA_FORMAT_B4_C8
,

1463 
I915_OA_FORMAT_A45_B8_C8
,

1464 
I915_OA_FORMAT_B4_C8_A16
,

1465 
I915_OA_FORMAT_C4_B8
,

1468 
I915_OA_FORMAT_A12
,

1469 
I915_OA_FORMAT_A12_B8_C8
,

1470 
I915_OA_FORMAT_A32u40_A4u32_B8_C8
,

1472 
I915_OA_FORMAT_MAX


1475 
	edrm_i915_≥rf_¥›îty_id
 {

1481 
DRM_I915_PERF_PROP_CTX_HANDLE
 = 1,

1487 
DRM_I915_PERF_PROP_SAMPLE_OA
,

1493 
DRM_I915_PERF_PROP_OA_METRICS_SET
,

1498 
DRM_I915_PERF_PROP_OA_FORMAT
,

1507 
DRM_I915_PERF_PROP_OA_EXPONENT
,

1509 
DRM_I915_PERF_PROP_MAX


1512 
	sdrm_i915_≥rf_›í_∑øm
 {

1513 
__u32
 
Êags
;

1514 
	#I915_PERF_FLAG_FD_CLOEXEC
 (1<<0)

	)

1515 
	#I915_PERF_FLAG_FD_NONBLOCK
 (1<<1)

	)

1516 
	#I915_PERF_FLAG_DISABLED
 (1<<2)

	)

1519 
__u32
 
num_¥›îtõs
;

1525 
__u64
 
¥›îtõs_±r
;

1538 
	#I915_PERF_IOCTL_ENABLE
 
	`_IO
('i', 0x0)

	)

1545 
	#I915_PERF_IOCTL_DISABLE
 
	`_IO
('i', 0x1)

	)

1550 
	sdrm_i915_≥rf_ªc‹d_hódî
 {

1551 
__u32
 
ty≥
;

1552 
__u16
 
∑d
;

1553 
__u16
 
size
;

1556 
	edrm_i915_≥rf_ªc‹d_ty≥
 {

1577 
DRM_I915_PERF_RECORD_SAMPLE
 = 1,

1585 
DRM_I915_PERF_RECORD_OA_REPORT_LOST
 = 2,

1590 
DRM_I915_PERF_RECORD_OA_BUFFER_LOST
 = 3,

1592 
DRM_I915_PERF_RECORD_MAX


1598 
	sdrm_i915_≥rf_ﬂ_c⁄fig
 {

1600 
uuid
[36];

1602 
__u32
 
n_mux_ªgs
;

1603 
__u32
 
n_boﬁón_ªgs
;

1604 
__u32
 
n_Êex_ªgs
;

1611 
__u64
 
mux_ªgs_±r
;

1612 
__u64
 
boﬁón_ªgs_±r
;

1613 
__u64
 
Êex_ªgs_±r
;

1616 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/mga_drm.h

35 #i‚de‡
__MGA_DRM_H__


36 
	#__MGA_DRM_H__


	)

38 
	~"drm.h
"

40 #i‡
deföed
(
__˝lu•lus
)

48 #i‚de‡
__MGA_SAREA_DEFINES__


49 
	#__MGA_SAREA_DEFINES__


	)

53 
	#MGA_F
 0x1

	)

54 
	#MGA_A
 0x2

	)

55 
	#MGA_S
 0x4

	)

56 
	#MGA_T2
 0x8

	)

58 
	#MGA_WARP_TGZ
 0

	)

59 
	#MGA_WARP_TGZF
 (
MGA_F
)

	)

60 
	#MGA_WARP_TGZA
 (
MGA_A
)

	)

61 
	#MGA_WARP_TGZAF
 (
MGA_F
|
MGA_A
)

	)

62 
	#MGA_WARP_TGZS
 (
MGA_S
)

	)

63 
	#MGA_WARP_TGZSF
 (
MGA_S
|
MGA_F
)

	)

64 
	#MGA_WARP_TGZSA
 (
MGA_S
|
MGA_A
)

	)

65 
	#MGA_WARP_TGZSAF
 (
MGA_S
|
MGA_F
|
MGA_A
)

	)

66 
	#MGA_WARP_T2GZ
 (
MGA_T2
)

	)

67 
	#MGA_WARP_T2GZF
 (
MGA_T2
|
MGA_F
)

	)

68 
	#MGA_WARP_T2GZA
 (
MGA_T2
|
MGA_A
)

	)

69 
	#MGA_WARP_T2GZAF
 (
MGA_T2
|
MGA_A
|
MGA_F
)

	)

70 
	#MGA_WARP_T2GZS
 (
MGA_T2
|
MGA_S
)

	)

71 
	#MGA_WARP_T2GZSF
 (
MGA_T2
|
MGA_S
|
MGA_F
)

	)

72 
	#MGA_WARP_T2GZSA
 (
MGA_T2
|
MGA_S
|
MGA_A
)

	)

73 
	#MGA_WARP_T2GZSAF
 (
MGA_T2
|
MGA_S
|
MGA_F
|
MGA_A
)

	)

75 
	#MGA_MAX_G200_PIPES
 8

	)

76 
	#MGA_MAX_G400_PIPES
 16

	)

77 
	#MGA_MAX_WARP_PIPES
 
MGA_MAX_G400_PIPES


	)

78 
	#MGA_WARP_UCODE_SIZE
 32768

	)

80 
	#MGA_CARD_TYPE_G200
 1

	)

81 
	#MGA_CARD_TYPE_G400
 2

	)

82 
	#MGA_CARD_TYPE_G450
 3

	)

83 
	#MGA_CARD_TYPE_G550
 4

	)

85 
	#MGA_FRONT
 0x1

	)

86 
	#MGA_BACK
 0x2

	)

87 
	#MGA_DEPTH
 0x4

	)

91 
	#MGA_UPLOAD_CONTEXT
 0x1

	)

92 
	#MGA_UPLOAD_TEX0
 0x2

	)

93 
	#MGA_UPLOAD_TEX1
 0x4

	)

94 
	#MGA_UPLOAD_PIPE
 0x8

	)

95 
	#MGA_UPLOAD_TEX0IMAGE
 0x10

	)

96 
	#MGA_UPLOAD_TEX1IMAGE
 0x20

	)

97 
	#MGA_UPLOAD_2D
 0x40

	)

98 
	#MGA_WAIT_AGE
 0x80

	)

99 
	#MGA_UPLOAD_CLIPRECTS
 0x100

	)

101 
	#MGA_DMA_FLUSH
 0x200

	)

107 
	#MGA_BUFFER_SIZE
 (1 << 16)

	)

108 
	#MGA_NUM_BUFFERS
 128

	)

112 
	#MGA_NR_SAREA_CLIPRECTS
 8

	)

121 
	#MGA_CARD_HEAP
 0

	)

122 
	#MGA_AGP_HEAP
 1

	)

123 
	#MGA_NR_TEX_HEAPS
 2

	)

124 
	#MGA_NR_TEX_REGIONS
 16

	)

125 
	#MGA_LOG_MIN_TEX_REGION_SIZE
 16

	)

127 
	#DRM_MGA_IDLE_RETRY
 2048

	)

134 
d°‹g
;

135 
mac˚ss
;

136 
∂nwt
;

137 
dwg˘l
;

138 
Æpha˘æ
;

139 
fogcﬁ‹
;

140 
wÊag
;

141 
tduÆ°age0
;

142 
tduÆ°age1
;

143 
fcﬁ
;

144 
°ícû
;

145 
°ícû˘l
;

146 } 
	tdrm_mga_c⁄ãxt_ªgs_t
;

151 
pôch
;

152 } 
	tdrm_mga_£rvî_ªgs_t
;

157 
ãx˘l
;

158 
ãx˘l2
;

159 
ãxfûãr
;

160 
ãxb‹dîcﬁ
;

161 
ãx‹g
;

162 
ãxwidth
;

163 
ãxheight
;

164 
ãx‹g1
;

165 
ãx‹g2
;

166 
ãx‹g3
;

167 
ãx‹g4
;

168 } 
	tdrm_mga_ãxtuª_ªgs_t
;

173 
hód
;

174 
wøp
;

175 } 
	tdrm_mga_age_t
;

177 
	s_drm_mga_ßªa
 {

181 
drm_mga_c⁄ãxt_ªgs_t
 
c⁄ãxt_°©e
;

182 
drm_mga_£rvî_ªgs_t
 
£rvî_°©e
;

183 
drm_mga_ãxtuª_ªgs_t
 
ãx_°©e
[2];

184 
w¨p_pùe
;

185 
dúty
;

186 
vîtsize
;

190 
drm_˛ù_ª˘
 
boxes
[
MGA_NR_SAREA_CLIPRECTS
];

191 
nbox
;

200 
ªq_døwabÀ
;

201 
ªq_døw_buf„r
;

203 
exp‹ãd_døwabÀ
;

204 
exp‹ãd_ödex
;

205 
exp‹ãd_°amp
;

206 
exp‹ãd_buf„rs
;

207 
exp‹ãd_n‰⁄t
;

208 
exp‹ãd_nback
;

209 
exp‹ãd_back_x
, 
exp‹ãd_‰⁄t_x
, 
exp‹ãd_w
;

210 
exp‹ãd_back_y
, 
exp‹ãd_‰⁄t_y
, 
exp‹ãd_h
;

211 
drm_˛ù_ª˘
 
exp‹ãd_boxes
[
MGA_NR_SAREA_CLIPRECTS
];

215 
°©us
[4];

216 
œ°_wøp
;

218 
drm_mga_age_t
 
œ°_‰ame
;

219 
œ°_íqueue
;

220 
œ°_di•©ch
;

221 
œ°_quõs˚¡
;

225 
drm_ãx_ªgi⁄
 
ãxLi°
[
MGA_NR_TEX_HEAPS
][
MGA_NR_TEX_REGIONS
 + 1];

226 
ãxAge
[
MGA_NR_TEX_HEAPS
];

230 
˘xOw√r
;

231 } 
	tdrm_mga_ßªa_t
;

236 
	#DRM_MGA_INIT
 0x00

	)

237 
	#DRM_MGA_FLUSH
 0x01

	)

238 
	#DRM_MGA_RESET
 0x02

	)

239 
	#DRM_MGA_SWAP
 0x03

	)

240 
	#DRM_MGA_CLEAR
 0x04

	)

241 
	#DRM_MGA_VERTEX
 0x05

	)

242 
	#DRM_MGA_INDICES
 0x06

	)

243 
	#DRM_MGA_ILOAD
 0x07

	)

244 
	#DRM_MGA_BLIT
 0x08

	)

245 
	#DRM_MGA_GETPARAM
 0x09

	)

250 
	#DRM_MGA_SET_FENCE
 0x0a

	)

251 
	#DRM_MGA_WAIT_FENCE
 0x0b

	)

252 
	#DRM_MGA_DMA_BOOTSTRAP
 0x0c

	)

254 
	#DRM_IOCTL_MGA_INIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_INIT
, 
drm_mga_öô_t
)

	)

255 
	#DRM_IOCTL_MGA_FLUSH
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_FLUSH
, 
drm_lock
)

	)

256 
	#DRM_IOCTL_MGA_RESET
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_MGA_RESET
)

	)

257 
	#DRM_IOCTL_MGA_SWAP
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_MGA_SWAP
)

	)

258 
	#DRM_IOCTL_MGA_CLEAR
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_CLEAR
, 
drm_mga_˛ór_t
)

	)

259 
	#DRM_IOCTL_MGA_VERTEX
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_VERTEX
, 
drm_mga_vîãx_t
)

	)

260 
	#DRM_IOCTL_MGA_INDICES
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_INDICES
, 
drm_mga_ödi˚s_t
)

	)

261 
	#DRM_IOCTL_MGA_ILOAD
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_ILOAD
, 
drm_mga_ûﬂd_t
)

	)

262 
	#DRM_IOCTL_MGA_BLIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_BLIT
, 
drm_mga_blô_t
)

	)

263 
	#DRM_IOCTL_MGA_GETPARAM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MGA_GETPARAM
, 
drm_mga_gë∑øm_t
)

	)

264 
	#DRM_IOCTL_MGA_SET_FENCE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_MGA_SET_FENCE
, 
__u32
)

	)

265 
	#DRM_IOCTL_MGA_WAIT_FENCE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MGA_WAIT_FENCE
, 
__u32
)

	)

266 
	#DRM_IOCTL_MGA_DMA_BOOTSTRAP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MGA_DMA_BOOTSTRAP
, 
drm_mga_dma_boŸ°øp_t
)

	)

268 
	s_drm_mga_w¨p_ödex
 {

269 
ö°ÆÀd
;

270 
phys_addr
;

271 
size
;

272 } 
	tdrm_mga_w¨p_ödex_t
;

274 
	sdrm_mga_öô
 {

276 
MGA_INIT_DMA
 = 0x01,

277 
MGA_CLEANUP_DMA
 = 0x02

278 } 
func
;

280 
ßªa_¥iv_off£t
;

282 
chù£t
;

283 
sgøm
;

285 
mac˚ss
;

287 
fb_˝p
;

288 
‰⁄t_off£t
, 
‰⁄t_pôch
;

289 
back_off£t
, 
back_pôch
;

291 
dïth_˝p
;

292 
dïth_off£t
, 
dïth_pôch
;

294 
ãxtuª_off£t
[
MGA_NR_TEX_HEAPS
];

295 
ãxtuª_size
[
MGA_NR_TEX_HEAPS
];

297 
fb_off£t
;

298 
mmio_off£t
;

299 
°©us_off£t
;

300 
w¨p_off£t
;

301 
¥im¨y_off£t
;

302 
buf„rs_off£t
;

303 } 
	tdrm_mga_öô_t
;

305 
	sdrm_mga_dma_boŸ°øp
 {

318 
ãxtuª_h™dÀ
;

319 
__u32
 
ãxtuª_size
;

328 
__u32
 
¥im¨y_size
;

338 
__u32
 
£c⁄d¨y_bö_cou¡
;

347 
__u32
 
£c⁄d¨y_bö_size
;

359 
__u32
 
agp_mode
;

364 
__u8
 
agp_size
;

365 } 
	tdrm_mga_dma_boŸ°øp_t
;

367 
	sdrm_mga_˛ór
 {

368 
Êags
;

369 
˛ór_cﬁ‹
;

370 
˛ór_dïth
;

371 
cﬁ‹_mask
;

372 
dïth_mask
;

373 } 
	tdrm_mga_˛ór_t
;

375 
	sdrm_mga_vîãx
 {

376 
idx
;

377 
u£d
;

378 
disˇrd
;

379 } 
	tdrm_mga_vîãx_t
;

381 
	sdrm_mga_ödi˚s
 {

382 
idx
;

383 
°¨t
;

384 
íd
;

385 
disˇrd
;

386 } 
	tdrm_mga_ödi˚s_t
;

388 
	sdrm_mga_ûﬂd
 {

389 
idx
;

390 
d°‹g
;

391 
Àngth
;

392 } 
	tdrm_mga_ûﬂd_t
;

394 
	s_drm_mga_blô
 {

395 
∂™emask
;

396 
§c‹g
;

397 
d°‹g
;

398 
§c_pôch
, 
d°_pôch
;

399 
dñè_sx
, 
dñè_sy
;

400 
dñè_dx
, 
dñè_dy
;

401 
height
, 
ydú
;

402 
sour˚_pôch
, 
de°_pôch
;

403 } 
	tdrm_mga_blô_t
;

408 
	#MGA_PARAM_IRQ_NR
 1

	)

416 
	#MGA_PARAM_CARD_TYPE
 2

	)

418 
	sdrm_mga_gë∑øm
 {

419 
∑øm
;

420 
__u£r
 *
vÆue
;

421 } 
	tdrm_mga_gë∑øm_t
;

423 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/msm_drm.h

25 #i‚de‡
__MSM_DRM_H__


26 
	#__MSM_DRM_H__


	)

28 
	~"drm.h
"

30 #i‡
deföed
(
__˝lu•lus
)

47 
	#MSM_PIPE_NONE
 0x00

	)

48 
	#MSM_PIPE_2D0
 0x01

	)

49 
	#MSM_PIPE_2D1
 0x02

	)

50 
	#MSM_PIPE_3D0
 0x10

	)

57 
	#MSM_PIPE_ID_MASK
 0xffff

	)

58 
	#MSM_PIPE_ID
(
x
Ë((xË& 
MSM_PIPE_ID_MASK
)

	)

59 
	#MSM_PIPE_FLAGS
(
x
Ë((xË& ~
MSM_PIPE_ID_MASK
)

	)

65 
	sdrm_msm_time•ec
 {

66 
__s64
 
tv_£c
;

67 
__s64
 
tv_n£c
;

70 
	#MSM_PARAM_GPU_ID
 0x01

	)

71 
	#MSM_PARAM_GMEM_SIZE
 0x02

	)

72 
	#MSM_PARAM_CHIP_ID
 0x03

	)

73 
	#MSM_PARAM_MAX_FREQ
 0x04

	)

74 
	#MSM_PARAM_TIMESTAMP
 0x05

	)

75 
	#MSM_PARAM_GMEM_BASE
 0x06

	)

76 
	#MSM_PARAM_NR_RINGS
 0x07

	)

78 
	sdrm_msm_∑øm
 {

79 
__u32
 
pùe
;

80 
__u32
 
∑øm
;

81 
__u64
 
vÆue
;

88 
	#MSM_BO_SCANOUT
 0x00000001

	)

89 
	#MSM_BO_GPU_READONLY
 0x00000002

	)

90 
	#MSM_BO_CACHE_MASK
 0x000f0000

	)

92 
	#MSM_BO_CACHED
 0x00010000

	)

93 
	#MSM_BO_WC
 0x00020000

	)

94 
	#MSM_BO_UNCACHED
 0x00040000

	)

96 
	#MSM_BO_FLAGS
 (
MSM_BO_SCANOUT
 | \

97 
MSM_BO_GPU_READONLY
 | \

98 
MSM_BO_CACHED
 | \

99 
MSM_BO_WC
 | \

100 
MSM_BO_UNCACHED
)

	)

102 
	sdrm_msm_gem_√w
 {

103 
__u64
 
size
;

104 
__u32
 
Êags
;

105 
__u32
 
h™dÀ
;

108 
	#MSM_INFO_IOVA
 0x01

	)

110 
	#MSM_INFO_FLAGS
 (
MSM_INFO_IOVA
)

	)

112 
	sdrm_msm_gem_öfo
 {

113 
__u32
 
h™dÀ
;

114 
__u32
 
Êags
;

115 
__u64
 
off£t
;

118 
	#MSM_PREP_READ
 0x01

	)

119 
	#MSM_PREP_WRITE
 0x02

	)

120 
	#MSM_PREP_NOSYNC
 0x04

	)

122 
	#MSM_PREP_FLAGS
 (
MSM_PREP_READ
 | 
MSM_PREP_WRITE
 | 
MSM_PREP_NOSYNC
)

	)

124 
	sdrm_msm_gem_˝u_¥ï
 {

125 
__u32
 
h™dÀ
;

126 
__u32
 
›
;

127 
drm_msm_time•ec
 
timeout
;

130 
	sdrm_msm_gem_˝u_föi
 {

131 
__u32
 
h™dÀ
;

149 
	sdrm_msm_gem_submô_ªloc
 {

150 
__u32
 
submô_off£t
;

151 
__u32
 
‹
;

152 
__s32
 
shi·
;

153 
__u32
 
ªloc_idx
;

154 
__u64
 
ªloc_off£t
;

165 
	#MSM_SUBMIT_CMD_BUF
 0x0001

	)

166 
	#MSM_SUBMIT_CMD_IB_TARGET_BUF
 0x0002

	)

167 
	#MSM_SUBMIT_CMD_CTX_RESTORE_BUF
 0x0003

	)

168 
	sdrm_msm_gem_submô_cmd
 {

169 
__u32
 
ty≥
;

170 
__u32
 
submô_idx
;

171 
__u32
 
submô_off£t
;

172 
__u32
 
size
;

173 
__u32
 
∑d
;

174 
__u32
 
ƒ_ªlocs
;

175 
__u64
 
ªlocs
;

189 
	#MSM_SUBMIT_BO_READ
 0x0001

	)

190 
	#MSM_SUBMIT_BO_WRITE
 0x0002

	)

192 
	#MSM_SUBMIT_BO_FLAGS
 (
MSM_SUBMIT_BO_READ
 | 
MSM_SUBMIT_BO_WRITE
)

	)

194 
	sdrm_msm_gem_submô_bo
 {

195 
__u32
 
Êags
;

196 
__u32
 
h™dÀ
;

197 
__u64
 
¥esumed
;

201 
	#MSM_SUBMIT_NO_IMPLICIT
 0x80000000

	)

202 
	#MSM_SUBMIT_FENCE_FD_IN
 0x40000000

	)

203 
	#MSM_SUBMIT_FENCE_FD_OUT
 0x20000000

	)

204 
	#MSM_SUBMIT_FLAGS
 ( \

205 
MSM_SUBMIT_NO_IMPLICIT
 | \

206 
MSM_SUBMIT_FENCE_FD_IN
 | \

207 
MSM_SUBMIT_FENCE_FD_OUT
 | \

208 0)

	)

214 
	sdrm_msm_gem_submô
 {

215 
__u32
 
Êags
;

216 
__u32
 
„n˚
;

217 
__u32
 
ƒ_bos
;

218 
__u32
 
ƒ_cmds
;

219 
__u64
 
bos
;

220 
__u64
 
cmds
;

221 
__s32
 
„n˚_fd
;

222 
__u32
 
queueid
;

232 
	sdrm_msm_waô_„n˚
 {

233 
__u32
 
„n˚
;

234 
__u32
 
∑d
;

235 
drm_msm_time•ec
 
timeout
;

236 
__u32
 
queueid
;

250 
	#MSM_MADV_WILLNEED
 0

	)

251 
	#MSM_MADV_DONTNEED
 1

	)

252 
	#__MSM_MADV_PURGED
 2

	)

254 
	sdrm_msm_gem_madvi£
 {

255 
__u32
 
h™dÀ
;

256 
__u32
 
madv
;

257 
__u32
 
ªèöed
;

266 
	#MSM_SUBMITQUEUE_FLAGS
 (0)

	)

268 
	sdrm_msm_submôqueue
 {

269 
__u32
 
Êags
;

270 
__u32
 
¥io
;

271 
__u32
 
id
;

274 
	#DRM_MSM_GET_PARAM
 0x00

	)

278 
	#DRM_MSM_GEM_NEW
 0x02

	)

279 
	#DRM_MSM_GEM_INFO
 0x03

	)

280 
	#DRM_MSM_GEM_CPU_PREP
 0x04

	)

281 
	#DRM_MSM_GEM_CPU_FINI
 0x05

	)

282 
	#DRM_MSM_GEM_SUBMIT
 0x06

	)

283 
	#DRM_MSM_WAIT_FENCE
 0x07

	)

284 
	#DRM_MSM_GEM_MADVISE
 0x08

	)

288 
	#DRM_MSM_SUBMITQUEUE_NEW
 0x0A

	)

289 
	#DRM_MSM_SUBMITQUEUE_CLOSE
 0x0B

	)

291 
	#DRM_IOCTL_MSM_GET_PARAM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MSM_GET_PARAM
, 
drm_msm_∑øm
)

	)

292 
	#DRM_IOCTL_MSM_GEM_NEW
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MSM_GEM_NEW
, 
drm_msm_gem_√w
)

	)

293 
	#DRM_IOCTL_MSM_GEM_INFO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MSM_GEM_INFO
, 
drm_msm_gem_öfo
)

	)

294 
	#DRM_IOCTL_MSM_GEM_CPU_PREP
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_MSM_GEM_CPU_PREP
, 
drm_msm_gem_˝u_¥ï
)

	)

295 
	#DRM_IOCTL_MSM_GEM_CPU_FINI
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_MSM_GEM_CPU_FINI
, 
drm_msm_gem_˝u_föi
)

	)

296 
	#DRM_IOCTL_MSM_GEM_SUBMIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MSM_GEM_SUBMIT
, 
drm_msm_gem_submô
)

	)

297 
	#DRM_IOCTL_MSM_WAIT_FENCE
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_MSM_WAIT_FENCE
, 
drm_msm_waô_„n˚
)

	)

298 
	#DRM_IOCTL_MSM_GEM_MADVISE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MSM_GEM_MADVISE
, 
drm_msm_gem_madvi£
)

	)

299 
	#DRM_IOCTL_MSM_SUBMITQUEUE_NEW
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_MSM_SUBMITQUEUE_NEW
, 
drm_msm_submôqueue
)

	)

300 
	#DRM_IOCTL_MSM_SUBMITQUEUE_CLOSE
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_MSM_SUBMITQUEUE_CLOSE
, 
__u32
)

	)

302 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/nouveau_drm.h

25 #i‚de‡
__NOUVEAU_DRM_H__


26 
	#__NOUVEAU_DRM_H__


	)

28 
	#DRM_NOUVEAU_EVENT_NVIF
 0x80000000

	)

30 
	~"drm.h
"

32 #i‡
deföed
(
__˝lu•lus
)

36 
	#NOUVEAU_GEM_DOMAIN_CPU
 (1 << 0)

	)

37 
	#NOUVEAU_GEM_DOMAIN_VRAM
 (1 << 1)

	)

38 
	#NOUVEAU_GEM_DOMAIN_GART
 (1 << 2)

	)

39 
	#NOUVEAU_GEM_DOMAIN_MAPPABLE
 (1 << 3)

	)

40 
	#NOUVEAU_GEM_DOMAIN_COHERENT
 (1 << 4)

	)

42 
	#NOUVEAU_GEM_TILE_COMP
 0x00030000

	)

43 
	#NOUVEAU_GEM_TILE_LAYOUT_MASK
 0x0000ff00

	)

44 
	#NOUVEAU_GEM_TILE_16BPP
 0x00000001

	)

45 
	#NOUVEAU_GEM_TILE_32BPP
 0x00000002

	)

46 
	#NOUVEAU_GEM_TILE_ZETA
 0x00000004

	)

47 
	#NOUVEAU_GEM_TILE_NONCONTIG
 0x00000008

	)

49 
	sdrm_nouvóu_gem_öfo
 {

50 
__u32
 
h™dÀ
;

51 
__u32
 
domaö
;

52 
__u64
 
size
;

53 
__u64
 
off£t
;

54 
__u64
 
m≠_h™dÀ
;

55 
__u32
 
tûe_mode
;

56 
__u32
 
tûe_Êags
;

59 
	sdrm_nouvóu_gem_√w
 {

60 
drm_nouvóu_gem_öfo
 
öfo
;

61 
__u32
 
ch™√l_höt
;

62 
__u32
 
Æign
;

65 
	#NOUVEAU_GEM_MAX_BUFFERS
 1024

	)

66 
	sdrm_nouvóu_gem_pushbuf_bo_¥esumed
 {

67 
__u32
 
vÆid
;

68 
__u32
 
domaö
;

69 
__u64
 
off£t
;

72 
	sdrm_nouvóu_gem_pushbuf_bo
 {

73 
__u64
 
u£r_¥iv
;

74 
__u32
 
h™dÀ
;

75 
__u32
 
ªad_domaös
;

76 
__u32
 
wrôe_domaös
;

77 
__u32
 
vÆid_domaös
;

78 
drm_nouvóu_gem_pushbuf_bo_¥esumed
 
¥esumed
;

81 
	#NOUVEAU_GEM_RELOC_LOW
 (1 << 0)

	)

82 
	#NOUVEAU_GEM_RELOC_HIGH
 (1 << 1)

	)

83 
	#NOUVEAU_GEM_RELOC_OR
 (1 << 2)

	)

84 
	#NOUVEAU_GEM_MAX_RELOCS
 1024

	)

85 
	sdrm_nouvóu_gem_pushbuf_ªloc
 {

86 
__u32
 
ªloc_bo_ödex
;

87 
__u32
 
ªloc_bo_off£t
;

88 
__u32
 
bo_ödex
;

89 
__u32
 
Êags
;

90 
__u32
 
d©a
;

91 
__u32
 
v‹
;

92 
__u32
 
t‹
;

95 
	#NOUVEAU_GEM_MAX_PUSH
 512

	)

96 
	sdrm_nouvóu_gem_pushbuf_push
 {

97 
__u32
 
bo_ödex
;

98 
__u32
 
∑d
;

99 
__u64
 
off£t
;

100 
__u64
 
Àngth
;

103 
	sdrm_nouvóu_gem_pushbuf
 {

104 
__u32
 
ch™√l
;

105 
__u32
 
ƒ_buf„rs
;

106 
__u64
 
buf„rs
;

107 
__u32
 
ƒ_ªlocs
;

108 
__u32
 
ƒ_push
;

109 
__u64
 
ªlocs
;

110 
__u64
 
push
;

111 
__u32
 
suffix0
;

112 
__u32
 
suffix1
;

113 
__u64
 
vøm_avaûabÀ
;

114 
__u64
 
g¨t_avaûabÀ
;

117 
	#NOUVEAU_GEM_CPU_PREP_NOWAIT
 0x00000001

	)

118 
	#NOUVEAU_GEM_CPU_PREP_WRITE
 0x00000004

	)

119 
	sdrm_nouvóu_gem_˝u_¥ï
 {

120 
__u32
 
h™dÀ
;

121 
__u32
 
Êags
;

124 
	sdrm_nouvóu_gem_˝u_föi
 {

125 
__u32
 
h™dÀ
;

128 
	#DRM_NOUVEAU_GETPARAM
 0x00

	)

129 
	#DRM_NOUVEAU_SETPARAM
 0x01

	)

130 
	#DRM_NOUVEAU_CHANNEL_ALLOC
 0x02

	)

131 
	#DRM_NOUVEAU_CHANNEL_FREE
 0x03

	)

132 
	#DRM_NOUVEAU_GROBJ_ALLOC
 0x04

	)

133 
	#DRM_NOUVEAU_NOTIFIEROBJ_ALLOC
 0x05

	)

134 
	#DRM_NOUVEAU_GPUOBJ_FREE
 0x06

	)

135 
	#DRM_NOUVEAU_NVIF
 0x07

	)

136 
	#DRM_NOUVEAU_GEM_NEW
 0x40

	)

137 
	#DRM_NOUVEAU_GEM_PUSHBUF
 0x41

	)

138 
	#DRM_NOUVEAU_GEM_CPU_PREP
 0x42

	)

139 
	#DRM_NOUVEAU_GEM_CPU_FINI
 0x43

	)

140 
	#DRM_NOUVEAU_GEM_INFO
 0x44

	)

142 
	#DRM_IOCTL_NOUVEAU_GEM_NEW
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_NOUVEAU_GEM_NEW
, 
drm_nouvóu_gem_√w
)

	)

143 
	#DRM_IOCTL_NOUVEAU_GEM_PUSHBUF
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_NOUVEAU_GEM_PUSHBUF
, 
drm_nouvóu_gem_pushbuf
)

	)

144 
	#DRM_IOCTL_NOUVEAU_GEM_CPU_PREP
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_NOUVEAU_GEM_CPU_PREP
, 
drm_nouvóu_gem_˝u_¥ï
)

	)

145 
	#DRM_IOCTL_NOUVEAU_GEM_CPU_FINI
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_NOUVEAU_GEM_CPU_FINI
, 
drm_nouvóu_gem_˝u_föi
)

	)

146 
	#DRM_IOCTL_NOUVEAU_GEM_INFO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_NOUVEAU_GEM_INFO
, 
drm_nouvóu_gem_öfo
)

	)

148 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/omap_drm.h

21 #i‚de‡
__OMAP_DRM_H__


22 
	#__OMAP_DRM_H__


	)

24 
	~"drm.h
"

26 #i‡
deföed
(
__˝lu•lus
)

34 
	#OMAP_PARAM_CHIPSET_ID
 1

	)

36 
	sdrm_om≠_∑øm
 {

37 
__u64
 
∑øm
;

38 
__u64
 
vÆue
;

41 
	#OMAP_BO_SCANOUT
 0x00000001

	)

42 
	#OMAP_BO_CACHE_MASK
 0x00000006

	)

43 
	#OMAP_BO_TILED_MASK
 0x00000f00

	)

46 
	#OMAP_BO_CACHED
 0x00000000

	)

47 
	#OMAP_BO_WC
 0x00000002

	)

48 
	#OMAP_BO_UNCACHED
 0x00000004

	)

51 
	#OMAP_BO_TILED_8
 0x00000100

	)

52 
	#OMAP_BO_TILED_16
 0x00000200

	)

53 
	#OMAP_BO_TILED_32
 0x00000300

	)

54 
	#OMAP_BO_TILED
 (
OMAP_BO_TILED_8
 | 
OMAP_BO_TILED_16
 | 
OMAP_BO_TILED_32
)

	)

56 
	uom≠_gem_size
 {

57 
__u32
 
byãs
;

59 
__u16
 
width
;

60 
__u16
 
height
;

61 } 
tûed
;

64 
	sdrm_om≠_gem_√w
 {

65 
om≠_gem_size
 
size
;

66 
__u32
 
Êags
;

67 
__u32
 
h™dÀ
;

68 
__u32
 
__∑d
;

72 
	eom≠_gem_›
 {

73 
OMAP_GEM_READ
 = 0x01,

74 
OMAP_GEM_WRITE
 = 0x02,

77 
	sdrm_om≠_gem_˝u_¥ï
 {

78 
__u32
 
h™dÀ
;

79 
__u32
 
›
;

82 
	sdrm_om≠_gem_˝u_föi
 {

83 
__u32
 
h™dÀ
;

84 
__u32
 
›
;

89 
__u32
 
ƒegi⁄s
;

90 
__u32
 
__∑d
;

93 
	sdrm_om≠_gem_öfo
 {

94 
__u32
 
h™dÀ
;

95 
__u32
 
∑d
;

96 
__u64
 
off£t
;

103 
__u32
 
size
;

104 
__u32
 
__∑d
;

107 
	#DRM_OMAP_GET_PARAM
 0x00

	)

108 
	#DRM_OMAP_SET_PARAM
 0x01

	)

109 
	#DRM_OMAP_GEM_NEW
 0x03

	)

110 
	#DRM_OMAP_GEM_CPU_PREP
 0x04

	)

111 
	#DRM_OMAP_GEM_CPU_FINI
 0x05

	)

112 
	#DRM_OMAP_GEM_INFO
 0x06

	)

113 
	#DRM_OMAP_NUM_IOCTLS
 0x07

	)

115 
	#DRM_IOCTL_OMAP_GET_PARAM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_OMAP_GET_PARAM
, 
drm_om≠_∑øm
)

	)

116 
	#DRM_IOCTL_OMAP_SET_PARAM
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_OMAP_SET_PARAM
, 
drm_om≠_∑øm
)

	)

117 
	#DRM_IOCTL_OMAP_GEM_NEW
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_OMAP_GEM_NEW
, 
drm_om≠_gem_√w
)

	)

118 
	#DRM_IOCTL_OMAP_GEM_CPU_PREP
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_OMAP_GEM_CPU_PREP
, 
drm_om≠_gem_˝u_¥ï
)

	)

119 
	#DRM_IOCTL_OMAP_GEM_CPU_FINI
 
	`DRM_IOW
 (
DRM_COMMAND_BASE
 + 
DRM_OMAP_GEM_CPU_FINI
, 
drm_om≠_gem_˝u_föi
)

	)

120 
	#DRM_IOCTL_OMAP_GEM_INFO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_OMAP_GEM_INFO
, 
drm_om≠_gem_öfo
)

	)

122 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/qxl_drm.h

24 #i‚de‡
QXL_DRM_H


25 
	#QXL_DRM_H


	)

27 
	~"drm.h
"

29 #i‡
deföed
(
__˝lu•lus
)

40 
	#QXL_GEM_DOMAIN_CPU
 0

	)

41 
	#QXL_GEM_DOMAIN_VRAM
 1

	)

42 
	#QXL_GEM_DOMAIN_SURFACE
 2

	)

44 
	#DRM_QXL_ALLOC
 0x00

	)

45 
	#DRM_QXL_MAP
 0x01

	)

46 
	#DRM_QXL_EXECBUFFER
 0x02

	)

47 
	#DRM_QXL_UPDATE_AREA
 0x03

	)

48 
	#DRM_QXL_GETPARAM
 0x04

	)

49 
	#DRM_QXL_CLIENTCAP
 0x05

	)

51 
	#DRM_QXL_ALLOC_SURF
 0x06

	)

53 
	sdrm_qxl_Æloc
 {

54 
__u32
 
size
;

55 
__u32
 
h™dÀ
;

58 
	sdrm_qxl_m≠
 {

59 
__u64
 
off£t
;

60 
__u32
 
h™dÀ
;

61 
__u32
 
∑d
;

70 
	#QXL_RELOC_TYPE_BO
 1

	)

71 
	#QXL_RELOC_TYPE_SURF
 2

	)

73 
	sdrm_qxl_ªloc
 {

74 
__u64
 
§c_off£t
;

75 
__u64
 
d°_off£t
;

76 
__u32
 
§c_h™dÀ
;

77 
__u32
 
d°_h™dÀ
;

78 
__u32
 
ªloc_ty≥
;

79 
__u32
 
∑d
;

82 
	sdrm_qxl_comm™d
 {

83 
__u64
 
comm™d
;

84 
__u64
 
ªlocs
;

85 
__u32
 
ty≥
;

86 
__u32
 
comm™d_size
;

87 
__u32
 
ªlocs_num
;

88 
__u32
 
∑d
;

91 
	sdrm_qxl_execbuf„r
 {

92 
__u32
 
Êags
;

93 
__u32
 
comm™ds_num
;

94 
__u64
 
comm™ds
;

97 
	sdrm_qxl_upd©e_¨ó
 {

98 
__u32
 
h™dÀ
;

99 
__u32
 
t›
;

100 
__u32
 
À·
;

101 
__u32
 
bŸtom
;

102 
__u32
 
right
;

103 
__u32
 
∑d
;

106 
	#QXL_PARAM_NUM_SURFACES
 1

	)

107 
	#QXL_PARAM_MAX_RELOCS
 2

	)

108 
	sdrm_qxl_gë∑øm
 {

109 
__u64
 
∑øm
;

110 
__u64
 
vÆue
;

114 
	sdrm_qxl_˛õ¡ˇp
 {

115 
__u32
 
ödex
;

116 
__u32
 
∑d
;

119 
	sdrm_qxl_Æloc_surf
 {

120 
__u32
 
f‹m©
;

121 
__u32
 
width
;

122 
__u32
 
height
;

123 
__s32
 
°ride
;

124 
__u32
 
h™dÀ
;

125 
__u32
 
∑d
;

128 
	#DRM_IOCTL_QXL_ALLOC
 \

129 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_QXL_ALLOC
, 
drm_qxl_Æloc
)

	)

131 
	#DRM_IOCTL_QXL_MAP
 \

132 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_QXL_MAP
, 
drm_qxl_m≠
)

	)

134 
	#DRM_IOCTL_QXL_EXECBUFFER
 \

135 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_QXL_EXECBUFFER
,\

136 
drm_qxl_execbuf„r
)

	)

138 
	#DRM_IOCTL_QXL_UPDATE_AREA
 \

139 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_QXL_UPDATE_AREA
,\

140 
drm_qxl_upd©e_¨ó
)

	)

142 
	#DRM_IOCTL_QXL_GETPARAM
 \

143 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_QXL_GETPARAM
,\

144 
drm_qxl_gë∑øm
)

	)

146 
	#DRM_IOCTL_QXL_CLIENTCAP
 \

147 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_QXL_CLIENTCAP
,\

148 
drm_qxl_˛õ¡ˇp
)

	)

150 
	#DRM_IOCTL_QXL_ALLOC_SURF
 \

151 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_QXL_ALLOC_SURF
,\

152 
drm_qxl_Æloc_surf
)

	)

154 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/r128_drm.h

33 #i‚de‡
__R128_DRM_H__


34 
	#__R128_DRM_H__


	)

36 
	~"drm.h
"

38 #i‡
deföed
(
__˝lu•lus
)

45 #i‚de‡
__R128_SAREA_DEFINES__


46 
	#__R128_SAREA_DEFINES__


	)

50 
	#R128_UPLOAD_CONTEXT
 0x001

	)

51 
	#R128_UPLOAD_SETUP
 0x002

	)

52 
	#R128_UPLOAD_TEX0
 0x004

	)

53 
	#R128_UPLOAD_TEX1
 0x008

	)

54 
	#R128_UPLOAD_TEX0IMAGES
 0x010

	)

55 
	#R128_UPLOAD_TEX1IMAGES
 0x020

	)

56 
	#R128_UPLOAD_CORE
 0x040

	)

57 
	#R128_UPLOAD_MASKS
 0x080

	)

58 
	#R128_UPLOAD_WINDOW
 0x100

	)

59 
	#R128_UPLOAD_CLIPRECTS
 0x200

	)

60 
	#R128_REQUIRE_QUIESCENCE
 0x400

	)

61 
	#R128_UPLOAD_ALL
 0x7ff

	)

63 
	#R128_FRONT
 0x1

	)

64 
	#R128_BACK
 0x2

	)

65 
	#R128_DEPTH
 0x4

	)

69 
	#R128_POINTS
 0x1

	)

70 
	#R128_LINES
 0x2

	)

71 
	#R128_LINE_STRIP
 0x3

	)

72 
	#R128_TRIANGLES
 0x4

	)

73 
	#R128_TRIANGLE_FAN
 0x5

	)

74 
	#R128_TRIANGLE_STRIP
 0x6

	)

78 
	#R128_BUFFER_SIZE
 16384

	)

82 
	#R128_INDEX_PRIM_OFFSET
 20

	)

83 
	#R128_HOSTDATA_BLIT_OFFSET
 32

	)

87 
	#R128_NR_SAREA_CLIPRECTS
 12

	)

92 
	#R128_LOCAL_TEX_HEAP
 0

	)

93 
	#R128_AGP_TEX_HEAP
 1

	)

94 
	#R128_NR_TEX_HEAPS
 2

	)

95 
	#R128_NR_TEX_REGIONS
 64

	)

96 
	#R128_LOG_TEX_GRANULARITY
 16

	)

98 
	#R128_NR_CONTEXT_REGS
 12

	)

100 
	#R128_MAX_TEXTURE_LEVELS
 11

	)

101 
	#R128_MAX_TEXTURE_UNITS
 2

	)

107 
d°_pôch_off£t_c
;

108 
dp_gui_ma°î_˙é_c
;

109 
sc_t›_À·_c
;

110 
sc_bŸtom_right_c
;

111 
z_off£t_c
;

112 
z_pôch_c
;

113 
z_°í_˙é_c
;

114 
ãx_˙é_c
;

115 
misc_3d_°©e_˙é_ªg
;

116 
ãxtuª_˛r_cmp_˛r_c
;

117 
ãxtuª_˛r_cmp_msk_c
;

118 
fog_cﬁ‹_c
;

121 
ãx_size_pôch_c
;

122 
c⁄°™t_cﬁ‹_c
;

125 
pm4_vc_Âu_£tup
;

126 
£tup_˙é
;

129 
dp_wrôe_mask
;

130 
°í_ªf_mask_c
;

131 
∂™e_3d_mask_c
;

134 
wödow_xy_off£t
;

137 
sˇÀ_3d_˙é
;

138 } 
	tdrm_r128_c⁄ãxt_ªgs_t
;

143 
ãx_˙é
;

144 
ãx_comböe_˙é
;

145 
ãx_size_pôch
;

146 
ãx_off£t
[
R128_MAX_TEXTURE_LEVELS
];

147 
ãx_b‹dî_cﬁ‹
;

148 } 
	tdrm_r128_ãxtuª_ªgs_t
;

150 
	sdrm_r128_ßªa
 {

154 
drm_r128_c⁄ãxt_ªgs_t
 
c⁄ãxt_°©e
;

155 
drm_r128_ãxtuª_ªgs_t
 
ãx_°©e
[
R128_MAX_TEXTURE_UNITS
];

156 
dúty
;

157 
vîtsize
;

158 
vc_f‹m©
;

162 
drm_˛ù_ª˘
 
boxes
[
R128_NR_SAREA_CLIPRECTS
];

163 
nbox
;

167 
œ°_‰ame
;

168 
œ°_di•©ch
;

170 
drm_ãx_ªgi⁄
 
ãx_li°
[
R128_NR_TEX_HEAPS
][
R128_NR_TEX_REGIONS
 + 1];

171 
ãx_age
[
R128_NR_TEX_HEAPS
];

172 
˘x_ow√r
;

173 
pfAŒowPageFlù
;

174 
pfCuºítPage
;

175 } 
	tdrm_r128_ßªa_t
;

184 
	#DRM_R128_INIT
 0x00

	)

185 
	#DRM_R128_CCE_START
 0x01

	)

186 
	#DRM_R128_CCE_STOP
 0x02

	)

187 
	#DRM_R128_CCE_RESET
 0x03

	)

188 
	#DRM_R128_CCE_IDLE
 0x04

	)

190 
	#DRM_R128_RESET
 0x06

	)

191 
	#DRM_R128_SWAP
 0x07

	)

192 
	#DRM_R128_CLEAR
 0x08

	)

193 
	#DRM_R128_VERTEX
 0x09

	)

194 
	#DRM_R128_INDICES
 0x0a

	)

195 
	#DRM_R128_BLIT
 0x0b

	)

196 
	#DRM_R128_DEPTH
 0x0c

	)

197 
	#DRM_R128_STIPPLE
 0x0d

	)

199 
	#DRM_R128_INDIRECT
 0x0f

	)

200 
	#DRM_R128_FULLSCREEN
 0x10

	)

201 
	#DRM_R128_CLEAR2
 0x11

	)

202 
	#DRM_R128_GETPARAM
 0x12

	)

203 
	#DRM_R128_FLIP
 0x13

	)

205 
	#DRM_IOCTL_R128_INIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_INIT
, 
drm_r128_öô_t
)

	)

206 
	#DRM_IOCTL_R128_CCE_START
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_R128_CCE_START
)

	)

207 
	#DRM_IOCTL_R128_CCE_STOP
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_CCE_STOP
, 
drm_r128_c˚_°›_t
)

	)

208 
	#DRM_IOCTL_R128_CCE_RESET
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_R128_CCE_RESET
)

	)

209 
	#DRM_IOCTL_R128_CCE_IDLE
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_R128_CCE_IDLE
)

	)

211 
	#DRM_IOCTL_R128_RESET
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_R128_RESET
)

	)

212 
	#DRM_IOCTL_R128_SWAP
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_R128_SWAP
)

	)

213 
	#DRM_IOCTL_R128_CLEAR
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_CLEAR
, 
drm_r128_˛ór_t
)

	)

214 
	#DRM_IOCTL_R128_VERTEX
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_VERTEX
, 
drm_r128_vîãx_t
)

	)

215 
	#DRM_IOCTL_R128_INDICES
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_INDICES
, 
drm_r128_ödi˚s_t
)

	)

216 
	#DRM_IOCTL_R128_BLIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_BLIT
, 
drm_r128_blô_t
)

	)

217 
	#DRM_IOCTL_R128_DEPTH
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_DEPTH
, 
drm_r128_dïth_t
)

	)

218 
	#DRM_IOCTL_R128_STIPPLE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_STIPPLE
, 
drm_r128_°ù∂e_t
)

	)

220 
	#DRM_IOCTL_R128_INDIRECT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_R128_INDIRECT
, 
drm_r128_ödúe˘_t
)

	)

221 
	#DRM_IOCTL_R128_FULLSCREEN
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_FULLSCREEN
, 
drm_r128_fuŒs¸ìn_t
)

	)

222 
	#DRM_IOCTL_R128_CLEAR2
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_R128_CLEAR2
, 
drm_r128_˛ór2_t
)

	)

223 
	#DRM_IOCTL_R128_GETPARAM
 
	`DRM_IOWR
–
DRM_COMMAND_BASE
 + 
DRM_R128_GETPARAM
, 
drm_r128_gë∑øm_t
)

	)

224 
	#DRM_IOCTL_R128_FLIP
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_R128_FLIP
)

	)

226 
	sdrm_r128_öô
 {

228 
R128_INIT_CCE
 = 0x01,

229 
R128_CLEANUP_CCE
 = 0x02

230 } 
func
;

231 
ßªa_¥iv_off£t
;

232 
is_pci
;

233 
c˚_mode
;

234 
c˚_£cuª
;

235 
rög_size
;

236 
u£c_timeout
;

238 
fb_bµ
;

239 
‰⁄t_off£t
, 
‰⁄t_pôch
;

240 
back_off£t
, 
back_pôch
;

241 
dïth_bµ
;

242 
dïth_off£t
, 
dïth_pôch
;

243 
•™_off£t
;

245 
fb_off£t
;

246 
mmio_off£t
;

247 
rög_off£t
;

248 
rög_Ωå_off£t
;

249 
buf„rs_off£t
;

250 
agp_ãxtuªs_off£t
;

251 } 
	tdrm_r128_öô_t
;

253 
	sdrm_r128_c˚_°›
 {

254 
Êush
;

255 
idÀ
;

256 } 
	tdrm_r128_c˚_°›_t
;

258 
	sdrm_r128_˛ór
 {

259 
Êags
;

260 
˛ór_cﬁ‹
;

261 
˛ór_dïth
;

262 
cﬁ‹_mask
;

263 
dïth_mask
;

264 } 
	tdrm_r128_˛ór_t
;

266 
	sdrm_r128_vîãx
 {

267 
¥im
;

268 
idx
;

269 
cou¡
;

270 
disˇrd
;

271 } 
	tdrm_r128_vîãx_t
;

273 
	sdrm_r128_ödi˚s
 {

274 
¥im
;

275 
idx
;

276 
°¨t
;

277 
íd
;

278 
disˇrd
;

279 } 
	tdrm_r128_ödi˚s_t
;

281 
	sdrm_r128_blô
 {

282 
idx
;

283 
pôch
;

284 
off£t
;

285 
f‹m©
;

286 
x
, 
y
;

287 
width
, 
height
;

288 } 
	tdrm_r128_blô_t
;

290 
	sdrm_r128_dïth
 {

292 
R128_WRITE_SPAN
 = 0x01,

293 
R128_WRITE_PIXELS
 = 0x02,

294 
R128_READ_SPAN
 = 0x03,

295 
R128_READ_PIXELS
 = 0x04

296 } 
func
;

297 
n
;

298 
__u£r
 *
x
;

299 
__u£r
 *
y
;

300 
__u£r
 *
buf„r
;

301 
__u£r
 *
mask
;

302 } 
	tdrm_r128_dïth_t
;

304 
	sdrm_r128_°ù∂e
 {

305 
__u£r
 *
mask
;

306 } 
	tdrm_r128_°ù∂e_t
;

308 
	sdrm_r128_ödúe˘
 {

309 
idx
;

310 
°¨t
;

311 
íd
;

312 
disˇrd
;

313 } 
	tdrm_r128_ödúe˘_t
;

315 
	sdrm_r128_fuŒs¸ìn
 {

317 
R128_INIT_FULLSCREEN
 = 0x01,

318 
R128_CLEANUP_FULLSCREEN
 = 0x02

319 } 
func
;

320 } 
	tdrm_r128_fuŒs¸ìn_t
;

325 
	#R128_PARAM_IRQ_NR
 1

	)

327 
	sdrm_r128_gë∑øm
 {

328 
∑øm
;

329 
__u£r
 *
vÆue
;

330 } 
	tdrm_r128_gë∑øm_t
;

332 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/radeon_drm.h

33 #i‚de‡
__RADEON_DRM_H__


34 
	#__RADEON_DRM_H__


	)

36 
	~"drm.h
"

38 #i‡
deföed
(
__˝lu•lus
)

45 #i‚de‡
__RADEON_SAREA_DEFINES__


46 
	#__RADEON_SAREA_DEFINES__


	)

51 
	#RADEON_UPLOAD_CONTEXT
 0x00000001

	)

52 
	#RADEON_UPLOAD_VERTFMT
 0x00000002

	)

53 
	#RADEON_UPLOAD_LINE
 0x00000004

	)

54 
	#RADEON_UPLOAD_BUMPMAP
 0x00000008

	)

55 
	#RADEON_UPLOAD_MASKS
 0x00000010

	)

56 
	#RADEON_UPLOAD_VIEWPORT
 0x00000020

	)

57 
	#RADEON_UPLOAD_SETUP
 0x00000040

	)

58 
	#RADEON_UPLOAD_TCL
 0x00000080

	)

59 
	#RADEON_UPLOAD_MISC
 0x00000100

	)

60 
	#RADEON_UPLOAD_TEX0
 0x00000200

	)

61 
	#RADEON_UPLOAD_TEX1
 0x00000400

	)

62 
	#RADEON_UPLOAD_TEX2
 0x00000800

	)

63 
	#RADEON_UPLOAD_TEX0IMAGES
 0x00001000

	)

64 
	#RADEON_UPLOAD_TEX1IMAGES
 0x00002000

	)

65 
	#RADEON_UPLOAD_TEX2IMAGES
 0x00004000

	)

66 
	#RADEON_UPLOAD_CLIPRECTS
 0x00008000

	)

67 
	#RADEON_REQUIRE_QUIESCENCE
 0x00010000

	)

68 
	#RADEON_UPLOAD_ZBIAS
 0x00020000

	)

69 
	#RADEON_UPLOAD_ALL
 0x003effff

	)

70 
	#RADEON_UPLOAD_CONTEXT_ALL
 0x003e01ff

	)

76 
	#RADEON_EMIT_PP_MISC
 0

	)

77 
	#RADEON_EMIT_PP_CNTL
 1

	)

78 
	#RADEON_EMIT_RB3D_COLORPITCH
 2

	)

79 
	#RADEON_EMIT_RE_LINE_PATTERN
 3

	)

80 
	#RADEON_EMIT_SE_LINE_WIDTH
 4

	)

81 
	#RADEON_EMIT_PP_LUM_MATRIX
 5

	)

82 
	#RADEON_EMIT_PP_ROT_MATRIX_0
 6

	)

83 
	#RADEON_EMIT_RB3D_STENCILREFMASK
 7

	)

84 
	#RADEON_EMIT_SE_VPORT_XSCALE
 8

	)

85 
	#RADEON_EMIT_SE_CNTL
 9

	)

86 
	#RADEON_EMIT_SE_CNTL_STATUS
 10

	)

87 
	#RADEON_EMIT_RE_MISC
 11

	)

88 
	#RADEON_EMIT_PP_TXFILTER_0
 12

	)

89 
	#RADEON_EMIT_PP_BORDER_COLOR_0
 13

	)

90 
	#RADEON_EMIT_PP_TXFILTER_1
 14

	)

91 
	#RADEON_EMIT_PP_BORDER_COLOR_1
 15

	)

92 
	#RADEON_EMIT_PP_TXFILTER_2
 16

	)

93 
	#RADEON_EMIT_PP_BORDER_COLOR_2
 17

	)

94 
	#RADEON_EMIT_SE_ZBIAS_FACTOR
 18

	)

95 
	#RADEON_EMIT_SE_TCL_OUTPUT_VTX_FMT
 19

	)

96 
	#RADEON_EMIT_SE_TCL_MATERIAL_EMMISSIVE_RED
 20

	)

97 
	#R200_EMIT_PP_TXCBLEND_0
 21

	)

98 
	#R200_EMIT_PP_TXCBLEND_1
 22

	)

99 
	#R200_EMIT_PP_TXCBLEND_2
 23

	)

100 
	#R200_EMIT_PP_TXCBLEND_3
 24

	)

101 
	#R200_EMIT_PP_TXCBLEND_4
 25

	)

102 
	#R200_EMIT_PP_TXCBLEND_5
 26

	)

103 
	#R200_EMIT_PP_TXCBLEND_6
 27

	)

104 
	#R200_EMIT_PP_TXCBLEND_7
 28

	)

105 
	#R200_EMIT_TCL_LIGHT_MODEL_CTL_0
 29

	)

106 
	#R200_EMIT_TFACTOR_0
 30

	)

107 
	#R200_EMIT_VTX_FMT_0
 31

	)

108 
	#R200_EMIT_VAP_CTL
 32

	)

109 
	#R200_EMIT_MATRIX_SELECT_0
 33

	)

110 
	#R200_EMIT_TEX_PROC_CTL_2
 34

	)

111 
	#R200_EMIT_TCL_UCP_VERT_BLEND_CTL
 35

	)

112 
	#R200_EMIT_PP_TXFILTER_0
 36

	)

113 
	#R200_EMIT_PP_TXFILTER_1
 37

	)

114 
	#R200_EMIT_PP_TXFILTER_2
 38

	)

115 
	#R200_EMIT_PP_TXFILTER_3
 39

	)

116 
	#R200_EMIT_PP_TXFILTER_4
 40

	)

117 
	#R200_EMIT_PP_TXFILTER_5
 41

	)

118 
	#R200_EMIT_PP_TXOFFSET_0
 42

	)

119 
	#R200_EMIT_PP_TXOFFSET_1
 43

	)

120 
	#R200_EMIT_PP_TXOFFSET_2
 44

	)

121 
	#R200_EMIT_PP_TXOFFSET_3
 45

	)

122 
	#R200_EMIT_PP_TXOFFSET_4
 46

	)

123 
	#R200_EMIT_PP_TXOFFSET_5
 47

	)

124 
	#R200_EMIT_VTE_CNTL
 48

	)

125 
	#R200_EMIT_OUTPUT_VTX_COMP_SEL
 49

	)

126 
	#R200_EMIT_PP_TAM_DEBUG3
 50

	)

127 
	#R200_EMIT_PP_CNTL_X
 51

	)

128 
	#R200_EMIT_RB3D_DEPTHXY_OFFSET
 52

	)

129 
	#R200_EMIT_RE_AUX_SCISSOR_CNTL
 53

	)

130 
	#R200_EMIT_RE_SCISSOR_TL_0
 54

	)

131 
	#R200_EMIT_RE_SCISSOR_TL_1
 55

	)

132 
	#R200_EMIT_RE_SCISSOR_TL_2
 56

	)

133 
	#R200_EMIT_SE_VAP_CNTL_STATUS
 57

	)

134 
	#R200_EMIT_SE_VTX_STATE_CNTL
 58

	)

135 
	#R200_EMIT_RE_POINTSIZE
 59

	)

136 
	#R200_EMIT_TCL_INPUT_VTX_VECTOR_ADDR_0
 60

	)

137 
	#R200_EMIT_PP_CUBIC_FACES_0
 61

	)

138 
	#R200_EMIT_PP_CUBIC_OFFSETS_0
 62

	)

139 
	#R200_EMIT_PP_CUBIC_FACES_1
 63

	)

140 
	#R200_EMIT_PP_CUBIC_OFFSETS_1
 64

	)

141 
	#R200_EMIT_PP_CUBIC_FACES_2
 65

	)

142 
	#R200_EMIT_PP_CUBIC_OFFSETS_2
 66

	)

143 
	#R200_EMIT_PP_CUBIC_FACES_3
 67

	)

144 
	#R200_EMIT_PP_CUBIC_OFFSETS_3
 68

	)

145 
	#R200_EMIT_PP_CUBIC_FACES_4
 69

	)

146 
	#R200_EMIT_PP_CUBIC_OFFSETS_4
 70

	)

147 
	#R200_EMIT_PP_CUBIC_FACES_5
 71

	)

148 
	#R200_EMIT_PP_CUBIC_OFFSETS_5
 72

	)

149 
	#RADEON_EMIT_PP_TEX_SIZE_0
 73

	)

150 
	#RADEON_EMIT_PP_TEX_SIZE_1
 74

	)

151 
	#RADEON_EMIT_PP_TEX_SIZE_2
 75

	)

152 
	#R200_EMIT_RB3D_BLENDCOLOR
 76

	)

153 
	#R200_EMIT_TCL_POINT_SPRITE_CNTL
 77

	)

154 
	#RADEON_EMIT_PP_CUBIC_FACES_0
 78

	)

155 
	#RADEON_EMIT_PP_CUBIC_OFFSETS_T0
 79

	)

156 
	#RADEON_EMIT_PP_CUBIC_FACES_1
 80

	)

157 
	#RADEON_EMIT_PP_CUBIC_OFFSETS_T1
 81

	)

158 
	#RADEON_EMIT_PP_CUBIC_FACES_2
 82

	)

159 
	#RADEON_EMIT_PP_CUBIC_OFFSETS_T2
 83

	)

160 
	#R200_EMIT_PP_TRI_PERF_CNTL
 84

	)

161 
	#R200_EMIT_PP_AFS_0
 85

	)

162 
	#R200_EMIT_PP_AFS_1
 86

	)

163 
	#R200_EMIT_ATF_TFACTOR
 87

	)

164 
	#R200_EMIT_PP_TXCTLALL_0
 88

	)

165 
	#R200_EMIT_PP_TXCTLALL_1
 89

	)

166 
	#R200_EMIT_PP_TXCTLALL_2
 90

	)

167 
	#R200_EMIT_PP_TXCTLALL_3
 91

	)

168 
	#R200_EMIT_PP_TXCTLALL_4
 92

	)

169 
	#R200_EMIT_PP_TXCTLALL_5
 93

	)

170 
	#R200_EMIT_VAP_PVS_CNTL
 94

	)

171 
	#RADEON_MAX_STATE_PACKETS
 95

	)

176 
	#RADEON_CMD_PACKET
 1

	)

177 
	#RADEON_CMD_SCALARS
 2

	)

178 
	#RADEON_CMD_VECTORS
 3

	)

179 
	#RADEON_CMD_DMA_DISCARD
 4

	)

180 
	#RADEON_CMD_PACKET3
 5

	)

181 
	#RADEON_CMD_PACKET3_CLIP
 6

	)

182 
	#RADEON_CMD_SCALARS2
 7

	)

183 
	#RADEON_CMD_WAIT
 8

	)

186 
	#RADEON_CMD_VECLINEAR
 9

	)

189 
i
;

191 
cmd_ty≥
, 
∑d0
, 
∑d1
, 
∑d2
;

192 } 
hódî
;

194 
cmd_ty≥
, 
∑ckë_id
, 
∑d0
, 
∑d1
;

195 } 
∑ckë
;

197 
cmd_ty≥
, 
off£t
, 
°ride
, 
cou¡
;

198 } 
sˇœrs
;

200 
cmd_ty≥
, 
off£t
, 
°ride
, 
cou¡
;

201 } 
ve˘‹s
;

203 
cmd_ty≥
, 
addr_lo
, 
addr_hi
, 
cou¡
;

204 } 
ve˛öór
;

206 
cmd_ty≥
, 
buf_idx
, 
∑d0
, 
∑d1
;

207 } 
dma
;

209 
cmd_ty≥
, 
Êags
, 
∑d0
, 
∑d1
;

210 } 
waô
;

211 } 
	tdrm_øde⁄_cmd_hódî_t
;

213 
	#RADEON_WAIT_2D
 0x1

	)

214 
	#RADEON_WAIT_3D
 0x2

	)

218 
	#R300_CMD_PACKET3_CLEAR
 0

	)

219 
	#R300_CMD_PACKET3_RAW
 1

	)

225 
	#R300_CMD_PACKET0
 1

	)

226 
	#R300_CMD_VPU
 2

	)

227 
	#R300_CMD_PACKET3
 3

	)

228 
	#R300_CMD_END3D
 4

	)

229 
	#R300_CMD_CP_DELAY
 5

	)

230 
	#R300_CMD_DMA_DISCARD
 6

	)

231 
	#R300_CMD_WAIT
 7

	)

232 
	#R300_WAIT_2D
 0x1

	)

233 
	#R300_WAIT_3D
 0x2

	)

240 
	#R300_WAIT_2D_CLEAN
 0x3

	)

241 
	#R300_WAIT_3D_CLEAN
 0x4

	)

243 
	#R300_NEW_WAIT_2D_3D
 0x3

	)

244 
	#R300_NEW_WAIT_2D_2D_CLEAN
 0x4

	)

245 
	#R300_NEW_WAIT_3D_3D_CLEAN
 0x6

	)

246 
	#R300_NEW_WAIT_2D_2D_CLEAN_3D_3D_CLEAN
 0x8

	)

248 
	#R300_CMD_SCRATCH
 8

	)

249 
	#R300_CMD_R500FP
 9

	)

252 
	mu
;

254 
	mcmd_ty≥
, 
	m∑d0
, 
	m∑d1
, 
	m∑d2
;

255 } 
	mhódî
;

257 
	mcmd_ty≥
, 
	mcou¡
, 
	mªglo
, 
	mªghi
;

258 } 
	m∑ckë0
;

260 
	mcmd_ty≥
, 
	mcou¡
, 
	madæo
, 
	madrhi
;

261 } 
	mvpu
;

263 
	mcmd_ty≥
, 
	m∑ckë
, 
	m∑d0
, 
	m∑d1
;

264 } 
	m∑ckë3
;

266 
	mcmd_ty≥
, 
	m∑ckë
;

267 
	mcou¡
;

268 } 
	mdñay
;

270 
	mcmd_ty≥
, 
	mbuf_idx
, 
	m∑d0
, 
	m∑d1
;

271 } 
	mdma
;

273 
	mcmd_ty≥
, 
	mÊags
, 
	m∑d0
, 
	m∑d1
;

274 } 
	mwaô
;

276 
	mcmd_ty≥
, 
	mªg
, 
	mn_bufs
, 
	mÊags
;

277 } 
	ms¸©ch
;

279 
	mcmd_ty≥
, 
	mcou¡
, 
	madæo
, 
	madrhi_Êags
;

280 } 
	mr500Â
;

281 } 
	tdrm_r300_cmd_hódî_t
;

283 
	#RADEON_FRONT
 0x1

	)

284 
	#RADEON_BACK
 0x2

	)

285 
	#RADEON_DEPTH
 0x4

	)

286 
	#RADEON_STENCIL
 0x8

	)

287 
	#RADEON_CLEAR_FASTZ
 0x80000000

	)

288 
	#RADEON_USE_HIERZ
 0x40000000

	)

289 
	#RADEON_USE_COMP_ZBUF
 0x20000000

	)

291 
	#R500FP_CONSTANT_TYPE
 (1 << 1)

	)

292 
	#R500FP_CONSTANT_CLAMP
 (1 << 2)

	)

296 
	#RADEON_POINTS
 0x1

	)

297 
	#RADEON_LINES
 0x2

	)

298 
	#RADEON_LINE_STRIP
 0x3

	)

299 
	#RADEON_TRIANGLES
 0x4

	)

300 
	#RADEON_TRIANGLE_FAN
 0x5

	)

301 
	#RADEON_TRIANGLE_STRIP
 0x6

	)

305 
	#RADEON_BUFFER_SIZE
 65536

	)

309 
	#RADEON_INDEX_PRIM_OFFSET
 20

	)

311 
	#RADEON_SCRATCH_REG_OFFSET
 32

	)

313 
	#R600_SCRATCH_REG_OFFSET
 256

	)

315 
	#RADEON_NR_SAREA_CLIPRECTS
 12

	)

320 
	#RADEON_LOCAL_TEX_HEAP
 0

	)

321 
	#RADEON_GART_TEX_HEAP
 1

	)

322 
	#RADEON_NR_TEX_HEAPS
 2

	)

323 
	#RADEON_NR_TEX_REGIONS
 64

	)

324 
	#RADEON_LOG_TEX_GRANULARITY
 16

	)

326 
	#RADEON_MAX_TEXTURE_LEVELS
 12

	)

327 
	#RADEON_MAX_TEXTURE_UNITS
 3

	)

329 
	#RADEON_MAX_SURFACES
 8

	)

334 
	#RADEON_OFFSET_SHIFT
 10

	)

335 
	#RADEON_OFFSET_ALIGN
 (1 << 
RADEON_OFFSET_SHIFT
)

	)

336 
	#RADEON_OFFSET_MASK
 (
RADEON_OFFSET_ALIGN
 - 1)

	)

341 
	gªd
;

342 
	ggªí
;

343 
	gblue
;

344 
	gÆpha
;

345 } 
	tøde⁄_cﬁ‹_ªgs_t
;

349 
	gµ_misc
;

350 
	gµ_fog_cﬁ‹
;

351 
	gª_sﬁid_cﬁ‹
;

352 
	grb3d_bÀnd˙é
;

353 
	grb3d_dïthoff£t
;

354 
	grb3d_dïthpôch
;

355 
	grb3d_z°ícû˙é
;

357 
	gµ_˙é
;

358 
	grb3d_˙é
;

359 
	grb3d_cﬁ‹off£t
;

360 
	gª_width_height
;

361 
	grb3d_cﬁ‹pôch
;

362 
	g£_˙é
;

365 
	g£_co‹d_fmt
;

368 
	gª_löe_∑âîn
;

369 
	gª_löe_°©e
;

371 
	g£_löe_width
;

374 
	gµ_lum_m©rix
;

376 
	gµ_rŸ_m©rix_0
;

377 
	gµ_rŸ_m©rix_1
;

380 
	grb3d_°ícûªfmask
;

381 
	grb3d_r›˙é
;

382 
	grb3d_∂™emask
;

385 
	g£_vp‹t_xsˇÀ
;

386 
	g£_vp‹t_xoff£t
;

387 
	g£_vp‹t_ysˇÀ
;

388 
	g£_vp‹t_yoff£t
;

389 
	g£_vp‹t_zsˇÀ
;

390 
	g£_vp‹t_zoff£t
;

393 
	g£_˙é_°©us
;

396 
	gª_t›_À·
;

397 
	gª_misc
;

398 } 
	tdrm_øde⁄_c⁄ãxt_ªgs_t
;

402 
	g£_zbüs_Á˘‹
;

403 
	g£_zbüs_c⁄°™t
;

404 } 
	tdrm_øde⁄_c⁄ãxt2_ªgs_t
;

409 
	gµ_txfûãr
;

410 
	gµ_txf‹m©
;

411 
	gµ_txoff£t
;

412 
	gµ_txcbÀnd
;

413 
	gµ_txabÀnd
;

414 
	gµ_tÁ˘‹
;

415 
	gµ_b‹dî_cﬁ‹
;

416 } 
	tdrm_øde⁄_ãxtuª_ªgs_t
;

419 
	g°¨t
;

420 
	gföish
;

421 
	g¥im
:8;

422 
	g°©eidx
:8;

423 
	gnumvîts
:16;

424 
	gvc_f‹m©
;

425 } 
	tdrm_øde⁄_¥im_t
;

428 
drm_øde⁄_c⁄ãxt_ªgs_t
 
	gc⁄ãxt
;

429 
drm_øde⁄_ãxtuª_ªgs_t
 
	gãx
[
RADEON_MAX_TEXTURE_UNITS
];

430 
drm_øde⁄_c⁄ãxt2_ªgs_t
 
	gc⁄ãxt2
;

431 
	gdúty
;

432 } 
	tdrm_øde⁄_°©e_t
;

439 
drm_øde⁄_c⁄ãxt_ªgs_t
 
	gc⁄ãxt_°©e
;

440 
drm_øde⁄_ãxtuª_ªgs_t
 
	gãx_°©e
[
RADEON_MAX_TEXTURE_UNITS
];

441 
	gdúty
;

442 
	gvîtsize
;

443 
	gvc_f‹m©
;

447 
drm_˛ù_ª˘
 
	gboxes
[
RADEON_NR_SAREA_CLIPRECTS
];

448 
	gnbox
;

452 
	gœ°_‰ame
;

453 
	gœ°_di•©ch
;

454 
	gœ°_˛ór
;

456 
drm_ãx_ªgi⁄
 
	gãx_li°
[
RADEON_NR_TEX_HEAPS
][
RADEON_NR_TEX_REGIONS
 +

458 
	gãx_age
[
RADEON_NR_TEX_HEAPS
];

459 
	g˘x_ow√r
;

460 
	gpfSèã
;

461 
	gpfCuºítPage
;

462 
	g¸tc2_ba£
;

463 
	gtûög_íabÀd
;

464 } 
	tdrm_øde⁄_ßªa_t
;

475 
	#DRM_RADEON_CP_INIT
 0x00

	)

476 
	#DRM_RADEON_CP_START
 0x01

	)

477 
	#DRM_RADEON_CP_STOP
 0x02

	)

478 
	#DRM_RADEON_CP_RESET
 0x03

	)

479 
	#DRM_RADEON_CP_IDLE
 0x04

	)

480 
	#DRM_RADEON_RESET
 0x05

	)

481 
	#DRM_RADEON_FULLSCREEN
 0x06

	)

482 
	#DRM_RADEON_SWAP
 0x07

	)

483 
	#DRM_RADEON_CLEAR
 0x08

	)

484 
	#DRM_RADEON_VERTEX
 0x09

	)

485 
	#DRM_RADEON_INDICES
 0x0A

	)

486 
	#DRM_RADEON_NOT_USED


	)

487 
	#DRM_RADEON_STIPPLE
 0x0C

	)

488 
	#DRM_RADEON_INDIRECT
 0x0D

	)

489 
	#DRM_RADEON_TEXTURE
 0x0E

	)

490 
	#DRM_RADEON_VERTEX2
 0x0F

	)

491 
	#DRM_RADEON_CMDBUF
 0x10

	)

492 
	#DRM_RADEON_GETPARAM
 0x11

	)

493 
	#DRM_RADEON_FLIP
 0x12

	)

494 
	#DRM_RADEON_ALLOC
 0x13

	)

495 
	#DRM_RADEON_FREE
 0x14

	)

496 
	#DRM_RADEON_INIT_HEAP
 0x15

	)

497 
	#DRM_RADEON_IRQ_EMIT
 0x16

	)

498 
	#DRM_RADEON_IRQ_WAIT
 0x17

	)

499 
	#DRM_RADEON_CP_RESUME
 0x18

	)

500 
	#DRM_RADEON_SETPARAM
 0x19

	)

501 
	#DRM_RADEON_SURF_ALLOC
 0x1a

	)

502 
	#DRM_RADEON_SURF_FREE
 0x1b

	)

504 
	#DRM_RADEON_GEM_INFO
 0x1c

	)

505 
	#DRM_RADEON_GEM_CREATE
 0x1d

	)

506 
	#DRM_RADEON_GEM_MMAP
 0x1e

	)

507 
	#DRM_RADEON_GEM_PREAD
 0x21

	)

508 
	#DRM_RADEON_GEM_PWRITE
 0x22

	)

509 
	#DRM_RADEON_GEM_SET_DOMAIN
 0x23

	)

510 
	#DRM_RADEON_GEM_WAIT_IDLE
 0x24

	)

511 
	#DRM_RADEON_CS
 0x26

	)

512 
	#DRM_RADEON_INFO
 0x27

	)

513 
	#DRM_RADEON_GEM_SET_TILING
 0x28

	)

514 
	#DRM_RADEON_GEM_GET_TILING
 0x29

	)

515 
	#DRM_RADEON_GEM_BUSY
 0x2a

	)

516 
	#DRM_RADEON_GEM_VA
 0x2b

	)

517 
	#DRM_RADEON_GEM_OP
 0x2c

	)

518 
	#DRM_RADEON_GEM_USERPTR
 0x2d

	)

520 
	#DRM_IOCTL_RADEON_CP_INIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CP_INIT
, 
drm_øde⁄_öô_t
)

	)

521 
	#DRM_IOCTL_RADEON_CP_START
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CP_START
)

	)

522 
	#DRM_IOCTL_RADEON_CP_STOP
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CP_STOP
, 
drm_øde⁄_˝_°›_t
)

	)

523 
	#DRM_IOCTL_RADEON_CP_RESET
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CP_RESET
)

	)

524 
	#DRM_IOCTL_RADEON_CP_IDLE
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CP_IDLE
)

	)

525 
	#DRM_IOCTL_RADEON_RESET
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_RESET
)

	)

526 
	#DRM_IOCTL_RADEON_FULLSCREEN
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_FULLSCREEN
, 
drm_øde⁄_fuŒs¸ìn_t
)

	)

527 
	#DRM_IOCTL_RADEON_SWAP
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_SWAP
)

	)

528 
	#DRM_IOCTL_RADEON_CLEAR
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CLEAR
, 
drm_øde⁄_˛ór_t
)

	)

529 
	#DRM_IOCTL_RADEON_VERTEX
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_VERTEX
, 
drm_øde⁄_vîãx_t
)

	)

530 
	#DRM_IOCTL_RADEON_INDICES
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_INDICES
, 
drm_øde⁄_ödi˚s_t
)

	)

531 
	#DRM_IOCTL_RADEON_STIPPLE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_STIPPLE
, 
drm_øde⁄_°ù∂e_t
)

	)

532 
	#DRM_IOCTL_RADEON_INDIRECT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_INDIRECT
, 
drm_øde⁄_ödúe˘_t
)

	)

533 
	#DRM_IOCTL_RADEON_TEXTURE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_TEXTURE
, 
drm_øde⁄_ãxtuª_t
)

	)

534 
	#DRM_IOCTL_RADEON_VERTEX2
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_VERTEX2
, 
drm_øde⁄_vîãx2_t
)

	)

535 
	#DRM_IOCTL_RADEON_CMDBUF
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CMDBUF
, 
drm_øde⁄_cmd_buf„r_t
)

	)

536 
	#DRM_IOCTL_RADEON_GETPARAM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GETPARAM
, 
drm_øde⁄_gë∑øm_t
)

	)

537 
	#DRM_IOCTL_RADEON_FLIP
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_FLIP
)

	)

538 
	#DRM_IOCTL_RADEON_ALLOC
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_ALLOC
, 
drm_øde⁄_mem_Æloc_t
)

	)

539 
	#DRM_IOCTL_RADEON_FREE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_FREE
, 
drm_øde⁄_mem_‰ì_t
)

	)

540 
	#DRM_IOCTL_RADEON_INIT_HEAP
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_INIT_HEAP
, 
drm_øde⁄_mem_öô_hóp_t
)

	)

541 
	#DRM_IOCTL_RADEON_IRQ_EMIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_IRQ_EMIT
, 
drm_øde⁄_úq_emô_t
)

	)

542 
	#DRM_IOCTL_RADEON_IRQ_WAIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_IRQ_WAIT
, 
drm_øde⁄_úq_waô_t
)

	)

543 
	#DRM_IOCTL_RADEON_CP_RESUME
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_CP_RESUME
)

	)

544 
	#DRM_IOCTL_RADEON_SETPARAM
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_SETPARAM
, 
drm_øde⁄_£ç¨am_t
)

	)

545 
	#DRM_IOCTL_RADEON_SURF_ALLOC
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_SURF_ALLOC
, 
drm_øde⁄_surÁ˚_Æloc_t
)

	)

546 
	#DRM_IOCTL_RADEON_SURF_FREE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_RADEON_SURF_FREE
, 
drm_øde⁄_surÁ˚_‰ì_t
)

	)

548 
	#DRM_IOCTL_RADEON_GEM_INFO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_INFO
, 
drm_øde⁄_gem_öfo
)

	)

549 
	#DRM_IOCTL_RADEON_GEM_CREATE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_CREATE
, 
drm_øde⁄_gem_¸óã
)

	)

550 
	#DRM_IOCTL_RADEON_GEM_MMAP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_MMAP
, 
drm_øde⁄_gem_mm≠
)

	)

551 
	#DRM_IOCTL_RADEON_GEM_PREAD
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_PREAD
, 
drm_øde⁄_gem_¥ód
)

	)

552 
	#DRM_IOCTL_RADEON_GEM_PWRITE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_PWRITE
, 
drm_øde⁄_gem_pwrôe
)

	)

553 
	#DRM_IOCTL_RADEON_GEM_SET_DOMAIN
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_SET_DOMAIN
, 
drm_øde⁄_gem_£t_domaö
)

	)

554 
	#DRM_IOCTL_RADEON_GEM_WAIT_IDLE
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_WAIT_IDLE
, 
drm_øde⁄_gem_waô_idÀ
)

	)

555 
	#DRM_IOCTL_RADEON_CS
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_CS
, 
drm_øde⁄_cs
)

	)

556 
	#DRM_IOCTL_RADEON_INFO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_INFO
, 
drm_øde⁄_öfo
)

	)

557 
	#DRM_IOCTL_RADEON_GEM_SET_TILING
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_SET_TILING
, 
drm_øde⁄_gem_£t_tûög
)

	)

558 
	#DRM_IOCTL_RADEON_GEM_GET_TILING
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_GET_TILING
, 
drm_øde⁄_gem_gë_tûög
)

	)

559 
	#DRM_IOCTL_RADEON_GEM_BUSY
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_BUSY
, 
drm_øde⁄_gem_busy
)

	)

560 
	#DRM_IOCTL_RADEON_GEM_VA
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_VA
, 
drm_øde⁄_gem_va
)

	)

561 
	#DRM_IOCTL_RADEON_GEM_OP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_OP
, 
drm_øde⁄_gem_›
)

	)

562 
	#DRM_IOCTL_RADEON_GEM_USERPTR
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_RADEON_GEM_USERPTR
, 
drm_øde⁄_gem_u£Ωå
)

	)

564 
	sdrm_øde⁄_öô
 {

566 
	gRADEON_INIT_CP
 = 0x01,

567 
	gRADEON_CLEANUP_CP
 = 0x02,

568 
	gRADEON_INIT_R200_CP
 = 0x03,

569 
	gRADEON_INIT_R300_CP
 = 0x04,

570 
	gRADEON_INIT_R600_CP
 = 0x05

571 } 
	gfunc
;

572 
	gßªa_¥iv_off£t
;

573 
	gis_pci
;

574 
	g˝_mode
;

575 
	gg¨t_size
;

576 
	grög_size
;

577 
	gu£c_timeout
;

579 
	gfb_bµ
;

580 
	g‰⁄t_off£t
, 
	g‰⁄t_pôch
;

581 
	gback_off£t
, 
	gback_pôch
;

582 
	gdïth_bµ
;

583 
	gdïth_off£t
, 
	gdïth_pôch
;

585 
	gfb_off£t
;

586 
	gmmio_off£t
;

587 
	grög_off£t
;

588 
	grög_Ωå_off£t
;

589 
	gbuf„rs_off£t
;

590 
	gg¨t_ãxtuªs_off£t
;

591 } 
	tdrm_øde⁄_öô_t
;

593 
	sdrm_øde⁄_˝_°›
 {

594 
	gÊush
;

595 
	gidÀ
;

596 } 
	tdrm_øde⁄_˝_°›_t
;

598 
	sdrm_øde⁄_fuŒs¸ìn
 {

600 
	gRADEON_INIT_FULLSCREEN
 = 0x01,

601 
	gRADEON_CLEANUP_FULLSCREEN
 = 0x02

602 } 
	gfunc
;

603 } 
	tdrm_øde⁄_fuŒs¸ìn_t
;

605 
	#CLEAR_X1
 0

	)

606 
	#CLEAR_Y1
 1

	)

607 
	#CLEAR_X2
 2

	)

608 
	#CLEAR_Y2
 3

	)

609 
	#CLEAR_DEPTH
 4

	)

611 
	udrm_øde⁄_˛ór_ª˘
 {

612 
	gf
[5];

613 
	gui
[5];

614 } 
	tdrm_øde⁄_˛ór_ª˘_t
;

616 
	sdrm_øde⁄_˛ór
 {

617 
	gÊags
;

618 
	g˛ór_cﬁ‹
;

619 
	g˛ór_dïth
;

620 
	gcﬁ‹_mask
;

621 
	gdïth_mask
;

622 
drm_øde⁄_˛ór_ª˘_t
 
__u£r
 *
	gdïth_boxes
;

623 } 
	tdrm_øde⁄_˛ór_t
;

625 
	sdrm_øde⁄_vîãx
 {

626 
	g¥im
;

627 
	gidx
;

628 
	gcou¡
;

629 
	gdisˇrd
;

630 } 
	tdrm_øde⁄_vîãx_t
;

632 
	sdrm_øde⁄_ödi˚s
 {

633 
	g¥im
;

634 
	gidx
;

635 
	g°¨t
;

636 
	gíd
;

637 
	gdisˇrd
;

638 } 
	tdrm_øde⁄_ödi˚s_t
;

644 
	sdrm_øde⁄_vîãx2
 {

645 
	gidx
;

646 
	gdisˇrd
;

647 
	gƒ_°©es
;

648 
drm_øde⁄_°©e_t
 
__u£r
 *
	g°©e
;

649 
	gƒ_¥ims
;

650 
drm_øde⁄_¥im_t
 
__u£r
 *
	g¥im
;

651 } 
	tdrm_øde⁄_vîãx2_t
;

663 
	sdrm_øde⁄_cmd_buf„r
 {

664 
	gbufsz
;

665 
__u£r
 *
	gbuf
;

666 
	gnbox
;

667 
drm_˛ù_ª˘
 
__u£r
 *
	gboxes
;

668 } 
	tdrm_øde⁄_cmd_buf„r_t
;

670 
	sdrm_øde⁄_ãx_image
 {

671 
	gx
, 
	gy
;

672 
	gwidth
, 
	gheight
;

673 c⁄° 
__u£r
 *
	gd©a
;

674 } 
	tdrm_øde⁄_ãx_image_t
;

676 
	sdrm_øde⁄_ãxtuª
 {

677 
	goff£t
;

678 
	gpôch
;

679 
	gf‹m©
;

680 
	gwidth
;

681 
	gheight
;

682 
drm_øde⁄_ãx_image_t
 
__u£r
 *
	gimage
;

683 } 
	tdrm_øde⁄_ãxtuª_t
;

685 
	sdrm_øde⁄_°ù∂e
 {

686 
__u£r
 *
	gmask
;

687 } 
	tdrm_øde⁄_°ù∂e_t
;

689 
	sdrm_øde⁄_ödúe˘
 {

690 
	gidx
;

691 
	g°¨t
;

692 
	gíd
;

693 
	gdisˇrd
;

694 } 
	tdrm_øde⁄_ödúe˘_t
;

697 
	#RADEON_CARD_PCI
 0

	)

698 
	#RADEON_CARD_AGP
 1

	)

699 
	#RADEON_CARD_PCIE
 2

	)

704 
	#RADEON_PARAM_GART_BUFFER_OFFSET
 1

	)

705 
	#RADEON_PARAM_LAST_FRAME
 2

	)

706 
	#RADEON_PARAM_LAST_DISPATCH
 3

	)

707 
	#RADEON_PARAM_LAST_CLEAR
 4

	)

709 
	#RADEON_PARAM_IRQ_NR
 5

	)

710 
	#RADEON_PARAM_GART_BASE
 6

	)

712 
	#RADEON_PARAM_REGISTER_HANDLE
 7

	)

713 
	#RADEON_PARAM_STATUS_HANDLE
 8

	)

714 
	#RADEON_PARAM_SAREA_HANDLE
 9

	)

715 
	#RADEON_PARAM_GART_TEX_HANDLE
 10

	)

716 
	#RADEON_PARAM_SCRATCH_OFFSET
 11

	)

717 
	#RADEON_PARAM_CARD_TYPE
 12

	)

718 
	#RADEON_PARAM_VBLANK_CRTC
 13

	)

719 
	#RADEON_PARAM_FB_LOCATION
 14

	)

720 
	#RADEON_PARAM_NUM_GB_PIPES
 15

	)

721 
	#RADEON_PARAM_DEVICE_ID
 16

	)

722 
	#RADEON_PARAM_NUM_Z_PIPES
 17

	)

724 
	sdrm_øde⁄_gë∑øm
 {

725 
	g∑øm
;

726 
__u£r
 *
	gvÆue
;

727 } 
	tdrm_øde⁄_gë∑øm_t
;

731 
	#RADEON_MEM_REGION_GART
 1

	)

732 
	#RADEON_MEM_REGION_FB
 2

	)

734 
	sdrm_øde⁄_mem_Æloc
 {

735 
	gªgi⁄
;

736 
	gÆignmít
;

737 
	gsize
;

738 
__u£r
 *
	gªgi⁄_off£t
;

739 } 
	tdrm_øde⁄_mem_Æloc_t
;

741 
	sdrm_øde⁄_mem_‰ì
 {

742 
	gªgi⁄
;

743 
	gªgi⁄_off£t
;

744 } 
	tdrm_øde⁄_mem_‰ì_t
;

746 
	sdrm_øde⁄_mem_öô_hóp
 {

747 
	gªgi⁄
;

748 
	gsize
;

749 
	g°¨t
;

750 } 
	tdrm_øde⁄_mem_öô_hóp_t
;

754 
	sdrm_øde⁄_úq_emô
 {

755 
__u£r
 *
	gúq_£q
;

756 } 
	tdrm_øde⁄_úq_emô_t
;

758 
	sdrm_øde⁄_úq_waô
 {

759 
	gúq_£q
;

760 } 
	tdrm_øde⁄_úq_waô_t
;

766 
	sdrm_øde⁄_£ç¨am
 {

767 
	g∑øm
;

768 
__s64
 
	gvÆue
;

769 } 
	tdrm_øde⁄_£ç¨am_t
;

771 
	#RADEON_SETPARAM_FB_LOCATION
 1

	)

772 
	#RADEON_SETPARAM_SWITCH_TILING
 2

	)

773 
	#RADEON_SETPARAM_PCIGART_LOCATION
 3

	)

774 
	#RADEON_SETPARAM_NEW_MEMMAP
 4

	)

775 
	#RADEON_SETPARAM_PCIGART_TABLE_SIZE
 5

	)

776 
	#RADEON_SETPARAM_VBLANK_CRTC
 6

	)

779 
	sdrm_øde⁄_surÁ˚_Æloc
 {

780 
	gaddªss
;

781 
	gsize
;

782 
	gÊags
;

783 } 
	tdrm_øde⁄_surÁ˚_Æloc_t
;

785 
	sdrm_øde⁄_surÁ˚_‰ì
 {

786 
	gaddªss
;

787 } 
	tdrm_øde⁄_surÁ˚_‰ì_t
;

789 
	#DRM_RADEON_VBLANK_CRTC1
 1

	)

790 
	#DRM_RADEON_VBLANK_CRTC2
 2

	)

795 
	#RADEON_GEM_DOMAIN_CPU
 0x1

	)

796 
	#RADEON_GEM_DOMAIN_GTT
 0x2

	)

797 
	#RADEON_GEM_DOMAIN_VRAM
 0x4

	)

799 
	sdrm_øde⁄_gem_öfo
 {

800 
__u64
 
	gg¨t_size
;

801 
__u64
 
	gvøm_size
;

802 
__u64
 
	gvøm_visibÀ
;

805 
	#RADEON_GEM_NO_BACKING_STORE
 (1 << 0)

	)

806 
	#RADEON_GEM_GTT_UC
 (1 << 1)

	)

807 
	#RADEON_GEM_GTT_WC
 (1 << 2)

	)

809 
	#RADEON_GEM_CPU_ACCESS
 (1 << 3)

	)

811 
	#RADEON_GEM_NO_CPU_ACCESS
 (1 << 4)

	)

813 
	sdrm_øde⁄_gem_¸óã
 {

814 
__u64
 
	gsize
;

815 
__u64
 
	gÆignmít
;

816 
__u32
 
	gh™dÀ
;

817 
__u32
 
	göôül_domaö
;

818 
__u32
 
	gÊags
;

826 
	#RADEON_GEM_USERPTR_READONLY
 (1 << 0)

	)

827 
	#RADEON_GEM_USERPTR_ANONONLY
 (1 << 1)

	)

828 
	#RADEON_GEM_USERPTR_VALIDATE
 (1 << 2)

	)

829 
	#RADEON_GEM_USERPTR_REGISTER
 (1 << 3)

	)

831 
	sdrm_øde⁄_gem_u£Ωå
 {

832 
__u64
 
	gaddr
;

833 
__u64
 
	gsize
;

834 
__u32
 
	gÊags
;

835 
__u32
 
	gh™dÀ
;

838 
	#RADEON_TILING_MACRO
 0x1

	)

839 
	#RADEON_TILING_MICRO
 0x2

	)

840 
	#RADEON_TILING_SWAP_16BIT
 0x4

	)

841 
	#RADEON_TILING_SWAP_32BIT
 0x8

	)

843 
	#RADEON_TILING_SURFACE
 0x10

	)

844 
	#RADEON_TILING_MICRO_SQUARE
 0x20

	)

845 
	#RADEON_TILING_EG_BANKW_SHIFT
 8

	)

846 
	#RADEON_TILING_EG_BANKW_MASK
 0xf

	)

847 
	#RADEON_TILING_EG_BANKH_SHIFT
 12

	)

848 
	#RADEON_TILING_EG_BANKH_MASK
 0xf

	)

849 
	#RADEON_TILING_EG_MACRO_TILE_ASPECT_SHIFT
 16

	)

850 
	#RADEON_TILING_EG_MACRO_TILE_ASPECT_MASK
 0xf

	)

851 
	#RADEON_TILING_EG_TILE_SPLIT_SHIFT
 24

	)

852 
	#RADEON_TILING_EG_TILE_SPLIT_MASK
 0xf

	)

853 
	#RADEON_TILING_EG_STENCIL_TILE_SPLIT_SHIFT
 28

	)

854 
	#RADEON_TILING_EG_STENCIL_TILE_SPLIT_MASK
 0xf

	)

856 
	sdrm_øde⁄_gem_£t_tûög
 {

857 
__u32
 
	gh™dÀ
;

858 
__u32
 
	gtûög_Êags
;

859 
__u32
 
	gpôch
;

862 
	sdrm_øde⁄_gem_gë_tûög
 {

863 
__u32
 
	gh™dÀ
;

864 
__u32
 
	gtûög_Êags
;

865 
__u32
 
	gpôch
;

868 
	sdrm_øde⁄_gem_mm≠
 {

869 
__u32
 
	gh™dÀ
;

870 
__u32
 
	g∑d
;

871 
__u64
 
	goff£t
;

872 
__u64
 
	gsize
;

873 
__u64
 
	gaddr_±r
;

876 
	sdrm_øde⁄_gem_£t_domaö
 {

877 
__u32
 
	gh™dÀ
;

878 
__u32
 
	gªad_domaös
;

879 
__u32
 
	gwrôe_domaö
;

882 
	sdrm_øde⁄_gem_waô_idÀ
 {

883 
__u32
 
	gh™dÀ
;

884 
__u32
 
	g∑d
;

887 
	sdrm_øde⁄_gem_busy
 {

888 
__u32
 
	gh™dÀ
;

889 
__u32
 
	gdomaö
;

892 
	sdrm_øde⁄_gem_¥ód
 {

894 
__u32
 
	gh™dÀ
;

895 
__u32
 
	g∑d
;

897 
__u64
 
	goff£t
;

899 
__u64
 
	gsize
;

902 
__u64
 
	gd©a_±r
;

905 
	sdrm_øde⁄_gem_pwrôe
 {

907 
__u32
 
	gh™dÀ
;

908 
__u32
 
	g∑d
;

910 
__u64
 
	goff£t
;

912 
__u64
 
	gsize
;

915 
__u64
 
	gd©a_±r
;

919 
	sdrm_øde⁄_gem_›
 {

920 
__u32
 
	gh™dÀ
;

921 
__u32
 
	g›
;

922 
__u64
 
	gvÆue
;

925 
	#RADEON_GEM_OP_GET_INITIAL_DOMAIN
 0

	)

926 
	#RADEON_GEM_OP_SET_INITIAL_DOMAIN
 1

	)

928 
	#RADEON_VA_MAP
 1

	)

929 
	#RADEON_VA_UNMAP
 2

	)

931 
	#RADEON_VA_RESULT_OK
 0

	)

932 
	#RADEON_VA_RESULT_ERROR
 1

	)

933 
	#RADEON_VA_RESULT_VA_EXIST
 2

	)

935 
	#RADEON_VM_PAGE_VALID
 (1 << 0)

	)

936 
	#RADEON_VM_PAGE_READABLE
 (1 << 1)

	)

937 
	#RADEON_VM_PAGE_WRITEABLE
 (1 << 2)

	)

938 
	#RADEON_VM_PAGE_SYSTEM
 (1 << 3)

	)

939 
	#RADEON_VM_PAGE_SNOOPED
 (1 << 4)

	)

941 
	sdrm_øde⁄_gem_va
 {

942 
__u32
 
	gh™dÀ
;

943 
__u32
 
	g›î©i⁄
;

944 
__u32
 
	gvm_id
;

945 
__u32
 
	gÊags
;

946 
__u64
 
	goff£t
;

949 
	#RADEON_CHUNK_ID_RELOCS
 0x01

	)

950 
	#RADEON_CHUNK_ID_IB
 0x02

	)

951 
	#RADEON_CHUNK_ID_FLAGS
 0x03

	)

952 
	#RADEON_CHUNK_ID_CONST_IB
 0x04

	)

955 
	#RADEON_CS_KEEP_TILING_FLAGS
 0x01

	)

956 
	#RADEON_CS_USE_VM
 0x02

	)

957 
	#RADEON_CS_END_OF_FRAME
 0x04

	)

959 
	#RADEON_CS_RING_GFX
 0

	)

960 
	#RADEON_CS_RING_COMPUTE
 1

	)

961 
	#RADEON_CS_RING_DMA
 2

	)

962 
	#RADEON_CS_RING_UVD
 3

	)

963 
	#RADEON_CS_RING_VCE
 4

	)

967 
	sdrm_øde⁄_cs_chunk
 {

968 
__u32
 
	gchunk_id
;

969 
__u32
 
	gÀngth_dw
;

970 
__u64
 
	gchunk_d©a
;

974 
	#RADEON_RELOC_PRIO_MASK
 (0x‡<< 0)

	)

976 
	sdrm_øde⁄_cs_ªloc
 {

977 
__u32
 
	gh™dÀ
;

978 
__u32
 
	gªad_domaös
;

979 
__u32
 
	gwrôe_domaö
;

980 
__u32
 
	gÊags
;

983 
	sdrm_øde⁄_cs
 {

984 
__u32
 
	gnum_chunks
;

985 
__u32
 
	gcs_id
;

987 
__u64
 
	gchunks
;

989 
__u64
 
	gg¨t_limô
;

990 
__u64
 
	gvøm_limô
;

993 
	#RADEON_INFO_DEVICE_ID
 0x00

	)

994 
	#RADEON_INFO_NUM_GB_PIPES
 0x01

	)

995 
	#RADEON_INFO_NUM_Z_PIPES
 0x02

	)

996 
	#RADEON_INFO_ACCEL_WORKING
 0x03

	)

997 
	#RADEON_INFO_CRTC_FROM_ID
 0x04

	)

998 
	#RADEON_INFO_ACCEL_WORKING2
 0x05

	)

999 
	#RADEON_INFO_TILING_CONFIG
 0x06

	)

1000 
	#RADEON_INFO_WANT_HYPERZ
 0x07

	)

1001 
	#RADEON_INFO_WANT_CMASK
 0x08

	)

1002 
	#RADEON_INFO_CLOCK_CRYSTAL_FREQ
 0x09

	)

1003 
	#RADEON_INFO_NUM_BACKENDS
 0x0®

	)

1004 
	#RADEON_INFO_NUM_TILE_PIPES
 0x0b

	)

1005 
	#RADEON_INFO_FUSION_GART_WORKING
 0x0¯

	)

1006 
	#RADEON_INFO_BACKEND_MAP
 0x0d

	)

1008 
	#RADEON_INFO_VA_START
 0x0e

	)

1010 
	#RADEON_INFO_IB_VM_MAX_SIZE
 0x0f

	)

1012 
	#RADEON_INFO_MAX_PIPES
 0x10

	)

1014 
	#RADEON_INFO_TIMESTAMP
 0x11

	)

1016 
	#RADEON_INFO_MAX_SE
 0x12

	)

1018 
	#RADEON_INFO_MAX_SH_PER_SE
 0x13

	)

1020 
	#RADEON_INFO_FASTFB_WORKING
 0x14

	)

1022 
	#RADEON_INFO_RING_WORKING
 0x15

	)

1024 
	#RADEON_INFO_SI_TILE_MODE_ARRAY
 0x16

	)

1026 
	#RADEON_INFO_SI_CP_DMA_COMPUTE
 0x17

	)

1028 
	#RADEON_INFO_CIK_MACROTILE_MODE_ARRAY
 0x18

	)

1030 
	#RADEON_INFO_SI_BACKEND_ENABLED_MASK
 0x19

	)

1032 
	#RADEON_INFO_MAX_SCLK
 0x1a

	)

1034 
	#RADEON_INFO_VCE_FW_VERSION
 0x1b

	)

1036 
	#RADEON_INFO_VCE_FB_VERSION
 0x1c

	)

1037 
	#RADEON_INFO_NUM_BYTES_MOVED
 0x1d

	)

1038 
	#RADEON_INFO_VRAM_USAGE
 0x1e

	)

1039 
	#RADEON_INFO_GTT_USAGE
 0x1f

	)

1040 
	#RADEON_INFO_ACTIVE_CU_COUNT
 0x20

	)

1041 
	#RADEON_INFO_CURRENT_GPU_TEMP
 0x21

	)

1042 
	#RADEON_INFO_CURRENT_GPU_SCLK
 0x22

	)

1043 
	#RADEON_INFO_CURRENT_GPU_MCLK
 0x23

	)

1044 
	#RADEON_INFO_READ_REG
 0x24

	)

1045 
	#RADEON_INFO_VA_UNMAP_WORKING
 0x25

	)

1046 
	#RADEON_INFO_GPU_RESET_COUNTER
 0x26

	)

1048 
	sdrm_øde⁄_öfo
 {

1049 
__u32
 
	gªque°
;

1050 
__u32
 
	g∑d
;

1051 
__u64
 
	gvÆue
;

1057 
	#SI_TILE_MODE_COLOR_LINEAR_ALIGNED
 8

	)

1058 
	#SI_TILE_MODE_COLOR_1D
 13

	)

1059 
	#SI_TILE_MODE_COLOR_1D_SCANOUT
 9

	)

1060 
	#SI_TILE_MODE_COLOR_2D_8BPP
 14

	)

1061 
	#SI_TILE_MODE_COLOR_2D_16BPP
 15

	)

1062 
	#SI_TILE_MODE_COLOR_2D_32BPP
 16

	)

1063 
	#SI_TILE_MODE_COLOR_2D_64BPP
 17

	)

1064 
	#SI_TILE_MODE_COLOR_2D_SCANOUT_16BPP
 11

	)

1065 
	#SI_TILE_MODE_COLOR_2D_SCANOUT_32BPP
 12

	)

1066 
	#SI_TILE_MODE_DEPTH_STENCIL_1D
 4

	)

1067 
	#SI_TILE_MODE_DEPTH_STENCIL_2D
 0

	)

1068 
	#SI_TILE_MODE_DEPTH_STENCIL_2D_2AA
 3

	)

1069 
	#SI_TILE_MODE_DEPTH_STENCIL_2D_4AA
 3

	)

1070 
	#SI_TILE_MODE_DEPTH_STENCIL_2D_8AA
 2

	)

1072 
	#CIK_TILE_MODE_DEPTH_STENCIL_1D
 5

	)

1074 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/savage_drm.h

26 #i‚de‡
__SAVAGE_DRM_H__


27 
	#__SAVAGE_DRM_H__


	)

29 
	~"drm.h
"

31 #i‡
deföed
(
__˝lu•lus
)

35 #i‚de‡
__SAVAGE_SAREA_DEFINES__


36 
	#__SAVAGE_SAREA_DEFINES__


	)

45 
	#SAVAGE_CARD_HEAP
 0

	)

46 
	#SAVAGE_AGP_HEAP
 1

	)

47 
	#SAVAGE_NR_TEX_HEAPS
 2

	)

48 
	#SAVAGE_NR_TEX_REGIONS
 16

	)

49 
	#SAVAGE_LOG_MIN_TEX_REGION_SIZE
 16

	)

53 
	s_drm_ßvage_ßªa
 {

56 
drm_ãx_ªgi⁄
 
ãxLi°
[
SAVAGE_NR_TEX_HEAPS
][
SAVAGE_NR_TEX_REGIONS
 +

58 
ãxAge
[
SAVAGE_NR_TEX_HEAPS
];

62 
˘xOw√r
;

63 } 
	tdrm_ßvage_ßªa_t
, *
	tdrm_ßvage_ßªa_±r
;

67 
	#DRM_SAVAGE_BCI_INIT
 0x00

	)

68 
	#DRM_SAVAGE_BCI_CMDBUF
 0x01

	)

69 
	#DRM_SAVAGE_BCI_EVENT_EMIT
 0x02

	)

70 
	#DRM_SAVAGE_BCI_EVENT_WAIT
 0x03

	)

72 
	#DRM_IOCTL_SAVAGE_BCI_INIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_SAVAGE_BCI_INIT
, 
drm_ßvage_öô_t
)

	)

73 
	#DRM_IOCTL_SAVAGE_BCI_CMDBUF
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_SAVAGE_BCI_CMDBUF
, 
drm_ßvage_cmdbuf_t
)

	)

74 
	#DRM_IOCTL_SAVAGE_BCI_EVENT_EMIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_SAVAGE_BCI_EVENT_EMIT
, 
drm_ßvage_evít_emô_t
)

	)

75 
	#DRM_IOCTL_SAVAGE_BCI_EVENT_WAIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_SAVAGE_BCI_EVENT_WAIT
, 
drm_ßvage_evít_waô_t
)

	)

77 
	#SAVAGE_DMA_PCI
 1

	)

78 
	#SAVAGE_DMA_AGP
 3

	)

79 
	sdrm_ßvage_öô
 {

81 
SAVAGE_INIT_BCI
 = 1,

82 
SAVAGE_CLEANUP_BCI
 = 2

83 } 
func
;

84 
ßªa_¥iv_off£t
;

87 
cob_size
;

88 
bci_thªshﬁd_lo
, 
bci_thªshﬁd_hi
;

89 
dma_ty≥
;

92 
fb_bµ
;

93 
‰⁄t_off£t
, 
‰⁄t_pôch
;

94 
back_off£t
, 
back_pôch
;

95 
dïth_bµ
;

96 
dïth_off£t
, 
dïth_pôch
;

99 
ãxtuª_off£t
;

100 
ãxtuª_size
;

103 
°©us_off£t
;

104 
buf„rs_off£t
;

105 
agp_ãxtuªs_off£t
;

106 
cmd_dma_off£t
;

107 } 
	tdrm_ßvage_öô_t
;

109 
drm_ßvage_cmd_hódî
 
	tdrm_ßvage_cmd_hódî_t
;

110 
	sdrm_ßvage_cmdbuf
 {

112 
drm_ßvage_cmd_hódî_t
 
__u£r
 *
cmd_addr
;

113 
size
;

115 
dma_idx
;

116 
disˇrd
;

118 
__u£r
 *
vb_addr
;

119 
vb_size
;

120 
vb_°ride
;

122 
drm_˛ù_ª˘
 
__u£r
 *
box_addr
;

123 
nbox
;

124 } 
	tdrm_ßvage_cmdbuf_t
;

126 
	#SAVAGE_WAIT_2D
 0x1

	)

127 
	#SAVAGE_WAIT_3D
 0x2

	)

128 
	#SAVAGE_WAIT_IRQ
 0x4

	)

129 
	sdrm_ßvage_evít
 {

130 
cou¡
;

131 
Êags
;

132 } 
	tdrm_ßvage_evít_emô_t
, 
	tdrm_ßvage_evít_waô_t
;

136 
	#SAVAGE_CMD_STATE
 0

	)

137 
	#SAVAGE_CMD_DMA_PRIM
 1

	)

138 
	#SAVAGE_CMD_VB_PRIM
 2

	)

139 
	#SAVAGE_CMD_DMA_IDX
 3

	)

140 
	#SAVAGE_CMD_VB_IDX
 4

	)

141 
	#SAVAGE_CMD_CLEAR
 5

	)

142 
	#SAVAGE_CMD_SWAP
 6

	)

146 
	#SAVAGE_PRIM_TRILIST
 0

	)

147 
	#SAVAGE_PRIM_TRISTRIP
 1

	)

148 
	#SAVAGE_PRIM_TRIFAN
 2

	)

149 
	#SAVAGE_PRIM_TRILIST_201
 3

	)

154 
	#SAVAGE_SKIP_Z
 0x01

	)

155 
	#SAVAGE_SKIP_W
 0x02

	)

156 
	#SAVAGE_SKIP_C0
 0x04

	)

157 
	#SAVAGE_SKIP_C1
 0x08

	)

158 
	#SAVAGE_SKIP_S0
 0x10

	)

159 
	#SAVAGE_SKIP_T0
 0x20

	)

160 
	#SAVAGE_SKIP_ST0
 0x30

	)

161 
	#SAVAGE_SKIP_S1
 0x40

	)

162 
	#SAVAGE_SKIP_T1
 0x80

	)

163 
	#SAVAGE_SKIP_ST1
 0xc0

	)

164 
	#SAVAGE_SKIP_ALL_S3D
 0x3f

	)

165 
	#SAVAGE_SKIP_ALL_S4
 0xff

	)

169 
	#SAVAGE_FRONT
 0x1

	)

170 
	#SAVAGE_BACK
 0x2

	)

171 
	#SAVAGE_DEPTH
 0x4

	)

175 
	udrm_ßvage_cmd_hódî
 {

177 
cmd
;

178 
∑d0
;

179 
∑d1
;

180 
∑d2
;

181 
∑d3
;

182 } 
cmd
;

184 
cmd
;

185 
globÆ
;

186 
cou¡
;

187 
°¨t
;

188 
∑d3
;

189 } 
°©e
;

191 
cmd
;

192 
¥im
;

193 
skù
;

194 
cou¡
;

195 
°¨t
;

196 } 
¥im
;

198 
cmd
;

199 
¥im
;

200 
skù
;

201 
cou¡
;

202 
∑d3
;

203 } 
idx
;

205 
cmd
;

206 
∑d0
;

207 
∑d1
;

208 
Êags
;

209 } 
˛ór0
;

211 
mask
;

212 
vÆue
;

213 } 
˛ór1
;

216 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/sis_drm.h

27 #i‚de‡
__SIS_DRM_H__


28 
	#__SIS_DRM_H__


	)

30 
	~"drm.h
"

32 #i‡
deföed
(
__˝lu•lus
)

37 
	#NOT_USED_0_3


	)

38 
	#DRM_SIS_FB_ALLOC
 0x04

	)

39 
	#DRM_SIS_FB_FREE
 0x05

	)

40 
	#NOT_USED_6_12


	)

41 
	#DRM_SIS_AGP_INIT
 0x13

	)

42 
	#DRM_SIS_AGP_ALLOC
 0x14

	)

43 
	#DRM_SIS_AGP_FREE
 0x15

	)

44 
	#DRM_SIS_FB_INIT
 0x16

	)

46 
	#DRM_IOCTL_SIS_FB_ALLOC
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_SIS_FB_ALLOC
, 
drm_sis_mem_t
)

	)

47 
	#DRM_IOCTL_SIS_FB_FREE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_SIS_FB_FREE
, 
drm_sis_mem_t
)

	)

48 
	#DRM_IOCTL_SIS_AGP_INIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_SIS_AGP_INIT
, 
drm_sis_agp_t
)

	)

49 
	#DRM_IOCTL_SIS_AGP_ALLOC
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_SIS_AGP_ALLOC
, 
drm_sis_mem_t
)

	)

50 
	#DRM_IOCTL_SIS_AGP_FREE
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_SIS_AGP_FREE
, 
drm_sis_mem_t
)

	)

51 
	#DRM_IOCTL_SIS_FB_INIT
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_SIS_FB_INIT
, 
drm_sis_fb_t
)

	)

59 
c⁄ãxt
;

60 
off£t
;

61 
size
;

62 
‰ì
;

63 } 
	tdrm_sis_mem_t
;

66 
off£t
, 
size
;

67 } 
	tdrm_sis_agp_t
;

70 
off£t
, 
size
;

71 } 
	tdrm_sis_fb_t
;

73 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/tegra_drm.h

23 #i‚de‡
_UAPI_TEGRA_DRM_H_


24 
	#_UAPI_TEGRA_DRM_H_


	)

26 
	~"drm.h
"

28 #i‡
deföed
(
__˝lu•lus
)

32 
	#DRM_TEGRA_GEM_CREATE_TILED
 (1 << 0)

	)

33 
	#DRM_TEGRA_GEM_CREATE_BOTTOM_UP
 (1 << 1)

	)

35 
	sdrm_ãgø_gem_¸óã
 {

36 
__u64
 
size
;

37 
__u32
 
Êags
;

38 
__u32
 
h™dÀ
;

41 
	sdrm_ãgø_gem_mm≠
 {

42 
__u32
 
h™dÀ
;

43 
__u32
 
∑d
;

44 
__u64
 
off£t
;

47 
	sdrm_ãgø_syn˝t_ªad
 {

48 
__u32
 
id
;

49 
__u32
 
vÆue
;

52 
	sdrm_ãgø_syn˝t_ö¸
 {

53 
__u32
 
id
;

54 
__u32
 
∑d
;

57 
	sdrm_ãgø_syn˝t_waô
 {

58 
__u32
 
id
;

59 
__u32
 
thªsh
;

60 
__u32
 
timeout
;

61 
__u32
 
vÆue
;

64 
	#DRM_TEGRA_NO_TIMEOUT
 (0xffffffff)

	)

66 
	sdrm_ãgø_›í_ch™√l
 {

67 
__u32
 
˛õ¡
;

68 
__u32
 
∑d
;

69 
__u64
 
c⁄ãxt
;

72 
	sdrm_ãgø_˛o£_ch™√l
 {

73 
__u64
 
c⁄ãxt
;

76 
	sdrm_ãgø_gë_syn˝t
 {

77 
__u64
 
c⁄ãxt
;

78 
__u32
 
ödex
;

79 
__u32
 
id
;

82 
	sdrm_ãgø_gë_syn˝t_ba£
 {

83 
__u64
 
c⁄ãxt
;

84 
__u32
 
syn˝t
;

85 
__u32
 
id
;

88 
	sdrm_ãgø_syn˝t
 {

89 
__u32
 
id
;

90 
__u32
 
ö¸s
;

93 
	sdrm_ãgø_cmdbuf
 {

94 
__u32
 
h™dÀ
;

95 
__u32
 
off£t
;

96 
__u32
 
w‹ds
;

97 
__u32
 
∑d
;

100 
	sdrm_ãgø_ªloc
 {

102 
__u32
 
h™dÀ
;

103 
__u32
 
off£t
;

104 } 
cmdbuf
;

106 
__u32
 
h™dÀ
;

107 
__u32
 
off£t
;

108 } 
èrgë
;

109 
__u32
 
shi·
;

110 
__u32
 
∑d
;

113 
	sdrm_ãgø_waôchk
 {

114 
__u32
 
h™dÀ
;

115 
__u32
 
off£t
;

116 
__u32
 
syn˝t
;

117 
__u32
 
thªsh
;

120 
	sdrm_ãgø_submô
 {

121 
__u64
 
c⁄ãxt
;

122 
__u32
 
num_syn˝ts
;

123 
__u32
 
num_cmdbufs
;

124 
__u32
 
num_ªlocs
;

125 
__u32
 
num_waôchks
;

126 
__u32
 
waôchk_mask
;

127 
__u32
 
timeout
;

128 
__u64
 
syn˝ts
;

129 
__u64
 
cmdbufs
;

130 
__u64
 
ªlocs
;

131 
__u64
 
waôchks
;

132 
__u32
 
„n˚
;

134 
__u32
 
ª£rved
[5];

137 
	#DRM_TEGRA_GEM_TILING_MODE_PITCH
 0

	)

138 
	#DRM_TEGRA_GEM_TILING_MODE_TILED
 1

	)

139 
	#DRM_TEGRA_GEM_TILING_MODE_BLOCK
 2

	)

141 
	sdrm_ãgø_gem_£t_tûög
 {

143 
__u32
 
h™dÀ
;

144 
__u32
 
mode
;

145 
__u32
 
vÆue
;

146 
__u32
 
∑d
;

149 
	sdrm_ãgø_gem_gë_tûög
 {

151 
__u32
 
h™dÀ
;

153 
__u32
 
mode
;

154 
__u32
 
vÆue
;

155 
__u32
 
∑d
;

158 
	#DRM_TEGRA_GEM_BOTTOM_UP
 (1 << 0)

	)

159 
	#DRM_TEGRA_GEM_FLAGS
 (
DRM_TEGRA_GEM_BOTTOM_UP
)

	)

161 
	sdrm_ãgø_gem_£t_Êags
 {

163 
__u32
 
h™dÀ
;

165 
__u32
 
Êags
;

168 
	sdrm_ãgø_gem_gë_Êags
 {

170 
__u32
 
h™dÀ
;

172 
__u32
 
Êags
;

175 
	#DRM_TEGRA_GEM_CREATE
 0x00

	)

176 
	#DRM_TEGRA_GEM_MMAP
 0x01

	)

177 
	#DRM_TEGRA_SYNCPT_READ
 0x02

	)

178 
	#DRM_TEGRA_SYNCPT_INCR
 0x03

	)

179 
	#DRM_TEGRA_SYNCPT_WAIT
 0x04

	)

180 
	#DRM_TEGRA_OPEN_CHANNEL
 0x05

	)

181 
	#DRM_TEGRA_CLOSE_CHANNEL
 0x06

	)

182 
	#DRM_TEGRA_GET_SYNCPT
 0x07

	)

183 
	#DRM_TEGRA_SUBMIT
 0x08

	)

184 
	#DRM_TEGRA_GET_SYNCPT_BASE
 0x09

	)

185 
	#DRM_TEGRA_GEM_SET_TILING
 0x0a

	)

186 
	#DRM_TEGRA_GEM_GET_TILING
 0x0b

	)

187 
	#DRM_TEGRA_GEM_SET_FLAGS
 0x0c

	)

188 
	#DRM_TEGRA_GEM_GET_FLAGS
 0x0d

	)

190 
	#DRM_IOCTL_TEGRA_GEM_CREATE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GEM_CREATE
, 
drm_ãgø_gem_¸óã
)

	)

191 
	#DRM_IOCTL_TEGRA_GEM_MMAP
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GEM_MMAP
, 
drm_ãgø_gem_mm≠
)

	)

192 
	#DRM_IOCTL_TEGRA_SYNCPT_READ
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_SYNCPT_READ
, 
drm_ãgø_syn˝t_ªad
)

	)

193 
	#DRM_IOCTL_TEGRA_SYNCPT_INCR
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_SYNCPT_INCR
, 
drm_ãgø_syn˝t_ö¸
)

	)

194 
	#DRM_IOCTL_TEGRA_SYNCPT_WAIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_SYNCPT_WAIT
, 
drm_ãgø_syn˝t_waô
)

	)

195 
	#DRM_IOCTL_TEGRA_OPEN_CHANNEL
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_OPEN_CHANNEL
, 
drm_ãgø_›í_ch™√l
)

	)

196 
	#DRM_IOCTL_TEGRA_CLOSE_CHANNEL
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_CLOSE_CHANNEL
, 
drm_ãgø_›í_ch™√l
)

	)

197 
	#DRM_IOCTL_TEGRA_GET_SYNCPT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GET_SYNCPT
, 
drm_ãgø_gë_syn˝t
)

	)

198 
	#DRM_IOCTL_TEGRA_SUBMIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_SUBMIT
, 
drm_ãgø_submô
)

	)

199 
	#DRM_IOCTL_TEGRA_GET_SYNCPT_BASE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GET_SYNCPT_BASE
, 
drm_ãgø_gë_syn˝t_ba£
)

	)

200 
	#DRM_IOCTL_TEGRA_GEM_SET_TILING
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GEM_SET_TILING
, 
drm_ãgø_gem_£t_tûög
)

	)

201 
	#DRM_IOCTL_TEGRA_GEM_GET_TILING
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GEM_GET_TILING
, 
drm_ãgø_gem_gë_tûög
)

	)

202 
	#DRM_IOCTL_TEGRA_GEM_SET_FLAGS
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GEM_SET_FLAGS
, 
drm_ãgø_gem_£t_Êags
)

	)

203 
	#DRM_IOCTL_TEGRA_GEM_GET_FLAGS
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_TEGRA_GEM_GET_FLAGS
, 
drm_ãgø_gem_gë_Êags
)

	)

205 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/vc4_drm.h

24 #i‚de‡
_UAPI_VC4_DRM_H_


25 
	#_UAPI_VC4_DRM_H_


	)

27 
	~"drm.h
"

29 #i‡
deföed
(
__˝lu•lus
)

33 
	#DRM_VC4_SUBMIT_CL
 0x00

	)

34 
	#DRM_VC4_WAIT_SEQNO
 0x01

	)

35 
	#DRM_VC4_WAIT_BO
 0x02

	)

36 
	#DRM_VC4_CREATE_BO
 0x03

	)

37 
	#DRM_VC4_MMAP_BO
 0x04

	)

38 
	#DRM_VC4_CREATE_SHADER_BO
 0x05

	)

39 
	#DRM_VC4_GET_HANG_STATE
 0x06

	)

40 
	#DRM_VC4_GET_PARAM
 0x07

	)

41 
	#DRM_VC4_SET_TILING
 0x08

	)

42 
	#DRM_VC4_GET_TILING
 0x09

	)

43 
	#DRM_VC4_LABEL_BO
 0x0a

	)

44 
	#DRM_VC4_GEM_MADVISE
 0x0b

	)

46 
	#DRM_IOCTL_VC4_SUBMIT_CL
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_SUBMIT_CL
, 
drm_vc4_submô_˛
)

	)

47 
	#DRM_IOCTL_VC4_WAIT_SEQNO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_WAIT_SEQNO
, 
drm_vc4_waô_£qno
)

	)

48 
	#DRM_IOCTL_VC4_WAIT_BO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_WAIT_BO
, 
drm_vc4_waô_bo
)

	)

49 
	#DRM_IOCTL_VC4_CREATE_BO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_CREATE_BO
, 
drm_vc4_¸óã_bo
)

	)

50 
	#DRM_IOCTL_VC4_MMAP_BO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_MMAP_BO
, 
drm_vc4_mm≠_bo
)

	)

51 
	#DRM_IOCTL_VC4_CREATE_SHADER_BO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_CREATE_SHADER_BO
, 
drm_vc4_¸óã_shadî_bo
)

	)

52 
	#DRM_IOCTL_VC4_GET_HANG_STATE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_GET_HANG_STATE
, 
drm_vc4_gë_h™g_°©e
)

	)

53 
	#DRM_IOCTL_VC4_GET_PARAM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_GET_PARAM
, 
drm_vc4_gë_∑øm
)

	)

54 
	#DRM_IOCTL_VC4_SET_TILING
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_SET_TILING
, 
drm_vc4_£t_tûög
)

	)

55 
	#DRM_IOCTL_VC4_GET_TILING
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_GET_TILING
, 
drm_vc4_gë_tûög
)

	)

56 
	#DRM_IOCTL_VC4_LABEL_BO
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_LABEL_BO
, 
drm_vc4_œbñ_bo
)

	)

57 
	#DRM_IOCTL_VC4_GEM_MADVISE
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VC4_GEM_MADVISE
, 
drm_vc4_gem_madvi£
)

	)

59 
	sdrm_vc4_submô_r˛_surÁ˚
 {

60 
__u32
 
hödex
;

61 
__u32
 
off£t
;

66 
__u16
 
bôs
;

68 
	#VC4_SUBMIT_RCL_SURFACE_READ_IS_FULL_RES
 (1 << 0)

	)

69 
__u16
 
Êags
;

85 
	sdrm_vc4_submô_˛
 {

93 
__u64
 
bö_˛
;

104 
__u64
 
shadî_ªc
;

120 
__u64
 
unif‹ms
;

121 
__u64
 
bo_h™dÀs
;

124 
__u32
 
bö_˛_size
;

126 
__u32
 
shadî_ªc_size
;

133 
__u32
 
shadî_ªc_cou¡
;

135 
__u32
 
unif‹ms_size
;

138 
__u32
 
bo_h™dÀ_cou¡
;

141 
__u16
 
width
;

142 
__u16
 
height
;

143 
__u8
 
mö_x_tûe
;

144 
__u8
 
mö_y_tûe
;

145 
__u8
 
max_x_tûe
;

146 
__u8
 
max_y_tûe
;

147 
drm_vc4_submô_r˛_surÁ˚
 
cﬁ‹_ªad
;

148 
drm_vc4_submô_r˛_surÁ˚
 
cﬁ‹_wrôe
;

149 
drm_vc4_submô_r˛_surÁ˚
 
zs_ªad
;

150 
drm_vc4_submô_r˛_surÁ˚
 
zs_wrôe
;

151 
drm_vc4_submô_r˛_surÁ˚
 
mßa_cﬁ‹_wrôe
;

152 
drm_vc4_submô_r˛_surÁ˚
 
mßa_zs_wrôe
;

153 
__u32
 
˛ór_cﬁ‹
[2];

154 
__u32
 
˛ór_z
;

155 
__u8
 
˛ór_s
;

157 
__u32
 
∑d
:24;

159 
	#VC4_SUBMIT_CL_USE_CLEAR_COLOR
 (1 << 0)

	)

167 
	#VC4_SUBMIT_CL_FIXED_RCL_ORDER
 (1 << 1)

	)

168 
	#VC4_SUBMIT_CL_RCL_ORDER_INCREASING_X
 (1 << 2)

	)

169 
	#VC4_SUBMIT_CL_RCL_ORDER_INCREASING_Y
 (1 << 3)

	)

170 
__u32
 
Êags
;

175 
__u64
 
£qno
;

185 
	sdrm_vc4_waô_£qno
 {

186 
__u64
 
£qno
;

187 
__u64
 
timeout_ns
;

198 
	sdrm_vc4_waô_bo
 {

199 
__u32
 
h™dÀ
;

200 
__u32
 
∑d
;

201 
__u64
 
timeout_ns
;

210 
	sdrm_vc4_¸óã_bo
 {

211 
__u32
 
size
;

212 
__u32
 
Êags
;

214 
__u32
 
h™dÀ
;

215 
__u32
 
∑d
;

229 
	sdrm_vc4_mm≠_bo
 {

231 
__u32
 
h™dÀ
;

232 
__u32
 
Êags
;

234 
__u64
 
off£t
;

245 
	sdrm_vc4_¸óã_shadî_bo
 {

247 
__u32
 
size
;

249 
__u32
 
Êags
;

252 
__u64
 
d©a
;

255 
__u32
 
h™dÀ
;

257 
__u32
 
∑d
;

260 
	sdrm_vc4_gë_h™g_°©e_bo
 {

261 
__u32
 
h™dÀ
;

262 
__u32
 
∑ddr
;

263 
__u32
 
size
;

264 
__u32
 
∑d
;

271 
	sdrm_vc4_gë_h™g_°©e
 {

273 
__u64
 
bo
;

278 
__u32
 
bo_cou¡
;

280 
__u32
 
°¨t_bö
, 
°¨t_ªndî
;

282 
__u32
 
˘0ˇ
, 
˘0ó
;

283 
__u32
 
˘1ˇ
, 
˘1ó
;

284 
__u32
 
˘0cs
, 
˘1cs
;

285 
__u32
 
˘0ø0
, 
˘1ø0
;

287 
__u32
 
bpˇ
, 
bpcs
;

288 
__u32
 
bpﬂ
, 
bpos
;

290 
__u32
 
vpmba£
;

292 
__u32
 
dbge
;

293 
__u32
 
fdbgo
;

294 
__u32
 
fdbgb
;

295 
__u32
 
fdbgr
;

296 
__u32
 
fdbgs
;

297 
__u32
 
îr°©
;

300 
__u32
 
∑d
[16];

303 
	#DRM_VC4_PARAM_V3D_IDENT0
 0

	)

304 
	#DRM_VC4_PARAM_V3D_IDENT1
 1

	)

305 
	#DRM_VC4_PARAM_V3D_IDENT2
 2

	)

306 
	#DRM_VC4_PARAM_SUPPORTS_BRANCHES
 3

	)

307 
	#DRM_VC4_PARAM_SUPPORTS_ETC1
 4

	)

308 
	#DRM_VC4_PARAM_SUPPORTS_THREADED_FS
 5

	)

309 
	#DRM_VC4_PARAM_SUPPORTS_FIXED_RCL_ORDER
 6

	)

310 
	#DRM_VC4_PARAM_SUPPORTS_MADVISE
 7

	)

312 
	sdrm_vc4_gë_∑øm
 {

313 
__u32
 
∑øm
;

314 
__u32
 
∑d
;

315 
__u64
 
vÆue
;

318 
	sdrm_vc4_gë_tûög
 {

319 
__u32
 
h™dÀ
;

320 
__u32
 
Êags
;

321 
__u64
 
modifõr
;

324 
	sdrm_vc4_£t_tûög
 {

325 
__u32
 
h™dÀ
;

326 
__u32
 
Êags
;

327 
__u64
 
modifõr
;

333 
	sdrm_vc4_œbñ_bo
 {

334 
__u32
 
h™dÀ
;

335 
__u32
 
Àn
;

336 
__u64
 
«me
;

343 
	#VC4_MADV_WILLNEED
 0

	)

344 
	#VC4_MADV_DONTNEED
 1

	)

345 
	#__VC4_MADV_PURGED
 2

	)

346 
	#__VC4_MADV_NOTSUPP
 3

	)

348 
	sdrm_vc4_gem_madvi£
 {

349 
__u32
 
h™dÀ
;

350 
__u32
 
madv
;

351 
__u32
 
ªèöed
;

352 
__u32
 
∑d
;

355 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/vgem_drm.h

27 #i‚de‡
_UAPI_VGEM_DRM_H_


28 
	#_UAPI_VGEM_DRM_H_


	)

30 
	~"drm.h
"

32 #i‡
deföed
(
__˝lu•lus
)

39 
	#DRM_VGEM_FENCE_ATTACH
 0x1

	)

40 
	#DRM_VGEM_FENCE_SIGNAL
 0x2

	)

42 
	#DRM_IOCTL_VGEM_FENCE_ATTACH
 
	`DRM_IOWR
–
DRM_COMMAND_BASE
 + 
DRM_VGEM_FENCE_ATTACH
, 
drm_vgem_„n˚_©èch
)

	)

43 
	#DRM_IOCTL_VGEM_FENCE_SIGNAL
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_VGEM_FENCE_SIGNAL
, 
drm_vgem_„n˚_sig«l
)

	)

45 
	sdrm_vgem_„n˚_©èch
 {

46 
__u32
 
h™dÀ
;

47 
__u32
 
Êags
;

48 
	#VGEM_FENCE_WRITE
 0x1

	)

49 
__u32
 
out_„n˚
;

50 
__u32
 
∑d
;

53 
	sdrm_vgem_„n˚_sig«l
 {

54 
__u32
 
„n˚
;

55 
__u32
 
Êags
;

58 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/via_drm.h

24 #i‚de‡
_VIA_DRM_H_


25 
	#_VIA_DRM_H_


	)

27 
	~"drm.h
"

29 #i‡
deföed
(
__˝lu•lus
)

37 #i‚de‡
_VIA_DEFINES_


38 
	#_VIA_DEFINES_


	)

41 
	#VIA_NR_SAREA_CLIPRECTS
 8

	)

42 
	#VIA_NR_XVMC_PORTS
 10

	)

43 
	#VIA_NR_XVMC_LOCKS
 5

	)

44 
	#VIA_MAX_CACHELINE_SIZE
 64

	)

45 
	#XVMCLOCKPTR
(
ßPriv
,
lockNo
) \

46 ((vﬁ©ûê
drm_hw_lock
 *)(((((Ë(
ßPriv
)->
XvMCLockAªa
) + \

47 (
VIA_MAX_CACHELINE_SIZE
 - 1)) & \

48 ~(
VIA_MAX_CACHELINE_SIZE
 - 1)) + \

49 
VIA_MAX_CACHELINE_SIZE
*(
lockNo
)))

	)

53 
	#VIA_NR_TEX_REGIONS
 64

	)

54 
	#VIA_LOG_MIN_TEX_REGION_SIZE
 16

	)

57 
	#VIA_UPLOAD_TEX0IMAGE
 0x1

	)

58 
	#VIA_UPLOAD_TEX1IMAGE
 0x2

	)

59 
	#VIA_UPLOAD_CTX
 0x4

	)

60 
	#VIA_UPLOAD_BUFFERS
 0x8

	)

61 
	#VIA_UPLOAD_TEX0
 0x10

	)

62 
	#VIA_UPLOAD_TEX1
 0x20

	)

63 
	#VIA_UPLOAD_CLIPRECTS
 0x40

	)

64 
	#VIA_UPLOAD_ALL
 0xff

	)

67 
	#DRM_VIA_ALLOCMEM
 0x00

	)

68 
	#DRM_VIA_FREEMEM
 0x01

	)

69 
	#DRM_VIA_AGP_INIT
 0x02

	)

70 
	#DRM_VIA_FB_INIT
 0x03

	)

71 
	#DRM_VIA_MAP_INIT
 0x04

	)

72 
	#DRM_VIA_DEC_FUTEX
 0x05

	)

73 
	#NOT_USED


	)

74 
	#DRM_VIA_DMA_INIT
 0x07

	)

75 
	#DRM_VIA_CMDBUFFER
 0x08

	)

76 
	#DRM_VIA_FLUSH
 0x09

	)

77 
	#DRM_VIA_PCICMD
 0x0a

	)

78 
	#DRM_VIA_CMDBUF_SIZE
 0x0b

	)

79 
	#NOT_USED


	)

80 
	#DRM_VIA_WAIT_IRQ
 0x0d

	)

81 
	#DRM_VIA_DMA_BLIT
 0x0e

	)

82 
	#DRM_VIA_BLIT_SYNC
 0x0f

	)

84 
	#DRM_IOCTL_VIA_ALLOCMEM
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIA_ALLOCMEM
, 
drm_vü_mem_t
)

	)

85 
	#DRM_IOCTL_VIA_FREEMEM
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_VIA_FREEMEM
, 
drm_vü_mem_t
)

	)

86 
	#DRM_IOCTL_VIA_AGP_INIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIA_AGP_INIT
, 
drm_vü_agp_t
)

	)

87 
	#DRM_IOCTL_VIA_FB_INIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIA_FB_INIT
, 
drm_vü_fb_t
)

	)

88 
	#DRM_IOCTL_VIA_MAP_INIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIA_MAP_INIT
, 
drm_vü_öô_t
)

	)

89 
	#DRM_IOCTL_VIA_DEC_FUTEX
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_VIA_DEC_FUTEX
, 
drm_vü_fuãx_t
)

	)

90 
	#DRM_IOCTL_VIA_DMA_INIT
 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIA_DMA_INIT
, 
drm_vü_dma_öô_t
)

	)

91 
	#DRM_IOCTL_VIA_CMDBUFFER
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_VIA_CMDBUFFER
, 
drm_vü_cmdbuf„r_t
)

	)

92 
	#DRM_IOCTL_VIA_FLUSH
 
	`DRM_IO
–
DRM_COMMAND_BASE
 + 
DRM_VIA_FLUSH
)

	)

93 
	#DRM_IOCTL_VIA_PCICMD
 
	`DRM_IOW
–
DRM_COMMAND_BASE
 + 
DRM_VIA_PCICMD
, 
drm_vü_cmdbuf„r_t
)

	)

94 
	#DRM_IOCTL_VIA_CMDBUF_SIZE
 
	`DRM_IOWR
–
DRM_COMMAND_BASE
 + 
DRM_VIA_CMDBUF_SIZE
, \

95 
drm_vü_cmdbuf_size_t
)

	)

96 
	#DRM_IOCTL_VIA_WAIT_IRQ
 
	`DRM_IOWR
–
DRM_COMMAND_BASE
 + 
DRM_VIA_WAIT_IRQ
, 
drm_vü_úqwaô_t
)

	)

97 
	#DRM_IOCTL_VIA_DMA_BLIT
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_VIA_DMA_BLIT
, 
drm_vü_dmablô_t
)

	)

98 
	#DRM_IOCTL_VIA_BLIT_SYNC
 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_VIA_BLIT_SYNC
, 
drm_vü_blôsync_t
)

	)

105 
	#VIA_TEX_SETUP_SIZE
 8

	)

109 
	#VIA_FRONT
 0x1

	)

110 
	#VIA_BACK
 0x2

	)

111 
	#VIA_DEPTH
 0x4

	)

112 
	#VIA_STENCIL
 0x8

	)

113 
	#VIA_MEM_VIDEO
 0

	)

114 
	#VIA_MEM_AGP
 1

	)

115 
	#VIA_MEM_SYSTEM
 2

	)

116 
	#VIA_MEM_MIXED
 3

	)

117 
	#VIA_MEM_UNKNOWN
 4

	)

120 
__u32
 
off£t
;

121 
__u32
 
size
;

122 } 
	tdrm_vü_agp_t
;

125 
__u32
 
off£t
;

126 
__u32
 
size
;

127 } 
	tdrm_vü_fb_t
;

130 
__u32
 
c⁄ãxt
;

131 
__u32
 
ty≥
;

132 
__u32
 
size
;

133 
ödex
;

134 
off£t
;

135 } 
	tdrm_vü_mem_t
;

137 
	s_drm_vü_öô
 {

139 
VIA_INIT_MAP
 = 0x01,

140 
VIA_CLEANUP_MAP
 = 0x02

141 } 
func
;

143 
ßªa_¥iv_off£t
;

144 
fb_off£t
;

145 
mmio_off£t
;

146 
agpAddr
;

147 } 
	tdrm_vü_öô_t
;

149 
	s_drm_vü_fuãx
 {

151 
VIA_FUTEX_WAIT
 = 0x00,

152 
VIA_FUTEX_WAKE
 = 0X01

153 } 
func
;

154 
__u32
 
ms
;

155 
__u32
 
lock
;

156 
__u32
 
vÆ
;

157 } 
	tdrm_vü_fuãx_t
;

159 
	s_drm_vü_dma_öô
 {

161 
VIA_INIT_DMA
 = 0x01,

162 
VIA_CLEANUP_DMA
 = 0x02,

163 
VIA_DMA_INITIALIZED
 = 0x03

164 } 
func
;

166 
off£t
;

167 
size
;

168 
ªg_∑u£_addr
;

169 } 
	tdrm_vü_dma_öô_t
;

171 
	s_drm_vü_cmdbuf„r
 {

172 
__u£r
 *
buf
;

173 
size
;

174 } 
	tdrm_vü_cmdbuf„r_t
;

179 
	s_drm_vü_ãx_ªgi⁄
 {

180 
√xt
, 
¥ev
;

181 
öU£
;

182 
age
;

183 } 
	tdrm_vü_ãx_ªgi⁄_t
;

185 
	s_drm_vü_ßªa
 {

186 
dúty
;

187 
nbox
;

188 
drm_˛ù_ª˘
 
boxes
[
VIA_NR_SAREA_CLIPRECTS
];

189 
drm_vü_ãx_ªgi⁄_t
 
ãxLi°
[
VIA_NR_TEX_REGIONS
 + 1];

190 
ãxAge
;

191 
˘xOw√r
;

192 
vîãxPrim
;

200 
XvMCLockAªa
[
VIA_MAX_CACHELINE_SIZE
 * (
VIA_NR_XVMC_LOCKS
 + 1)];

202 
XvMCDi•œyög
[
VIA_NR_XVMC_PORTS
];

203 
XvMCSubPicOn
[
VIA_NR_XVMC_PORTS
];

204 
XvMCCtxNoGøbbed
;

208 
pfCuºítOff£t
;

209 } 
	tdrm_vü_ßªa_t
;

211 
	s_drm_vü_cmdbuf_size
 {

213 
VIA_CMDBUF_SPACE
 = 0x01,

214 
VIA_CMDBUF_LAG
 = 0x02

215 } 
func
;

216 
waô
;

217 
__u32
 
size
;

218 } 
	tdrm_vü_cmdbuf_size_t
;

221 
VIA_IRQ_ABSOLUTE
 = 0x0,

222 
VIA_IRQ_RELATIVE
 = 0x1,

223 
VIA_IRQ_SIGNAL
 = 0x10000000,

224 
VIA_IRQ_FORCE_SEQUENCE
 = 0x20000000

225 } 
	tvü_úq_£q_ty≥_t
;

227 
	#VIA_IRQ_FLAGS_MASK
 0xF0000000

	)

229 
	edrm_vü_úqs
 {

230 
drm_vü_úq_hqv0
 = 0,

231 
drm_vü_úq_hqv1
,

232 
drm_vü_úq_dma0_dd
,

233 
drm_vü_úq_dma0_td
,

234 
drm_vü_úq_dma1_dd
,

235 
drm_vü_úq_dma1_td
,

236 
drm_vü_úq_num


239 
	sdrm_vü_waô_úq_ªque°
 {

240 
úq
;

241 
vü_úq_£q_ty≥_t
 
ty≥
;

242 
__u32
 
£quí˚
;

243 
__u32
 
sig«l
;

246 
	udrm_vü_úqwaô
 {

247 
drm_vü_waô_úq_ªque°
 
ªque°
;

248 
drm_waô_vbœnk_ª∂y
 
ª∂y
;

249 } 
	tdrm_vü_úqwaô_t
;

251 
	sdrm_vü_blôsync
 {

252 
__u32
 
sync_h™dÀ
;

253 
ígöe
;

254 } 
	tdrm_vü_blôsync_t
;

262 
	sdrm_vü_dmablô
 {

263 
__u32
 
num_löes
;

264 
__u32
 
löe_Àngth
;

266 
__u32
 
fb_addr
;

267 
__u32
 
fb_°ride
;

269 *
mem_addr
;

270 
__u32
 
mem_°ride
;

272 
__u32
 
Êags
;

273 
to_fb
;

275 
drm_vü_blôsync_t
 
sync
;

276 } 
	tdrm_vü_dmablô_t
;

278 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/virtgpu_drm.h

24 #i‚de‡
VIRTGPU_DRM_H


25 
	#VIRTGPU_DRM_H


	)

27 
	~"drm.h
"

29 #i‡
deföed
(
__˝lu•lus
)

40 
	#DRM_VIRTGPU_MAP
 0x01

	)

41 
	#DRM_VIRTGPU_EXECBUFFER
 0x02

	)

42 
	#DRM_VIRTGPU_GETPARAM
 0x03

	)

43 
	#DRM_VIRTGPU_RESOURCE_CREATE
 0x04

	)

44 
	#DRM_VIRTGPU_RESOURCE_INFO
 0x05

	)

45 
	#DRM_VIRTGPU_TRANSFER_FROM_HOST
 0x06

	)

46 
	#DRM_VIRTGPU_TRANSFER_TO_HOST
 0x07

	)

47 
	#DRM_VIRTGPU_WAIT
 0x08

	)

48 
	#DRM_VIRTGPU_GET_CAPS
 0x09

	)

50 
	sdrm_vútgpu_m≠
 {

51 
__u64
 
off£t
;

52 
__u32
 
h™dÀ
;

53 
__u32
 
∑d
;

56 
	sdrm_vútgpu_execbuf„r
 {

57 
__u32
 
Êags
;

58 
__u32
 
size
;

59 
__u64
 
comm™d
;

60 
__u64
 
bo_h™dÀs
;

61 
__u32
 
num_bo_h™dÀs
;

62 
__u32
 
∑d
;

65 
	#VIRTGPU_PARAM_3D_FEATURES
 1

	)

66 
	#VIRTGPU_PARAM_CAPSET_QUERY_FIX
 2

	)

68 
	sdrm_vútgpu_gë∑øm
 {

69 
__u64
 
∑øm
;

70 
__u64
 
vÆue
;

75 
	sdrm_vútgpu_ªsour˚_¸óã
 {

76 
__u32
 
èrgë
;

77 
__u32
 
f‹m©
;

78 
__u32
 
böd
;

79 
__u32
 
width
;

80 
__u32
 
height
;

81 
__u32
 
dïth
;

82 
__u32
 
¨øy_size
;

83 
__u32
 
œ°_Àvñ
;

84 
__u32
 
ƒ_ßm∂es
;

85 
__u32
 
Êags
;

86 
__u32
 
bo_h™dÀ
;

87 
__u32
 
ªs_h™dÀ
;

88 
__u32
 
size
;

89 
__u32
 
°ride
;

92 
	sdrm_vútgpu_ªsour˚_öfo
 {

93 
__u32
 
bo_h™dÀ
;

94 
__u32
 
ªs_h™dÀ
;

95 
__u32
 
size
;

96 
__u32
 
°ride
;

99 
	sdrm_vútgpu_3d_box
 {

100 
__u32
 
x
;

101 
__u32
 
y
;

102 
__u32
 
z
;

103 
__u32
 
w
;

104 
__u32
 
h
;

105 
__u32
 
d
;

108 
	sdrm_vútgpu_3d_å™s„r_to_ho°
 {

109 
__u32
 
bo_h™dÀ
;

110 
drm_vútgpu_3d_box
 
box
;

111 
__u32
 
Àvñ
;

112 
__u32
 
off£t
;

115 
	sdrm_vútgpu_3d_å™s„r_‰om_ho°
 {

116 
__u32
 
bo_h™dÀ
;

117 
drm_vútgpu_3d_box
 
box
;

118 
__u32
 
Àvñ
;

119 
__u32
 
off£t
;

122 
	#VIRTGPU_WAIT_NOWAIT
 1

	)

123 
	sdrm_vútgpu_3d_waô
 {

124 
__u32
 
h™dÀ
;

125 
__u32
 
Êags
;

128 
	sdrm_vútgpu_gë_ˇps
 {

129 
__u32
 
ˇp_£t_id
;

130 
__u32
 
ˇp_£t_vî
;

131 
__u64
 
addr
;

132 
__u32
 
size
;

133 
__u32
 
∑d
;

136 
	#DRM_IOCTL_VIRTGPU_MAP
 \

137 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_MAP
, 
drm_vútgpu_m≠
)

	)

139 
	#DRM_IOCTL_VIRTGPU_EXECBUFFER
 \

140 
	`DRM_IOW
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_EXECBUFFER
,\

141 
drm_vútgpu_execbuf„r
)

	)

143 
	#DRM_IOCTL_VIRTGPU_GETPARAM
 \

144 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_GETPARAM
,\

145 
drm_vútgpu_gë∑øm
)

	)

147 
	#DRM_IOCTL_VIRTGPU_RESOURCE_CREATE
 \

148 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_RESOURCE_CREATE
, \

149 
drm_vútgpu_ªsour˚_¸óã
)

	)

151 
	#DRM_IOCTL_VIRTGPU_RESOURCE_INFO
 \

152 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_RESOURCE_INFO
, \

153 
drm_vútgpu_ªsour˚_öfo
)

	)

155 
	#DRM_IOCTL_VIRTGPU_TRANSFER_FROM_HOST
 \

156 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_TRANSFER_FROM_HOST
, \

157 
drm_vútgpu_3d_å™s„r_‰om_ho°
)

	)

159 
	#DRM_IOCTL_VIRTGPU_TRANSFER_TO_HOST
 \

160 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_TRANSFER_TO_HOST
, \

161 
drm_vútgpu_3d_å™s„r_to_ho°
)

	)

163 
	#DRM_IOCTL_VIRTGPU_WAIT
 \

164 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_WAIT
, \

165 
drm_vútgpu_3d_waô
)

	)

167 
	#DRM_IOCTL_VIRTGPU_GET_CAPS
 \

168 
	`DRM_IOWR
(
DRM_COMMAND_BASE
 + 
DRM_VIRTGPU_GET_CAPS
, \

169 
drm_vútgpu_gë_ˇps
)

	)

171 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/drm/vmwgfx_drm.h

28 #i‚de‡
__VMWGFX_DRM_H__


29 
	#__VMWGFX_DRM_H__


	)

31 
	~"drm.h
"

33 #i‡
deföed
(
__˝lu•lus
)

37 
	#DRM_VMW_MAX_SURFACE_FACES
 6

	)

38 
	#DRM_VMW_MAX_MIP_LEVELS
 24

	)

41 
	#DRM_VMW_GET_PARAM
 0

	)

42 
	#DRM_VMW_ALLOC_DMABUF
 1

	)

43 
	#DRM_VMW_UNREF_DMABUF
 2

	)

44 
	#DRM_VMW_HANDLE_CLOSE
 2

	)

45 
	#DRM_VMW_CURSOR_BYPASS
 3

	)

47 
	#DRM_VMW_CONTROL_STREAM
 4

	)

48 
	#DRM_VMW_CLAIM_STREAM
 5

	)

49 
	#DRM_VMW_UNREF_STREAM
 6

	)

51 
	#DRM_VMW_CREATE_CONTEXT
 7

	)

52 
	#DRM_VMW_UNREF_CONTEXT
 8

	)

53 
	#DRM_VMW_CREATE_SURFACE
 9

	)

54 
	#DRM_VMW_UNREF_SURFACE
 10

	)

55 
	#DRM_VMW_REF_SURFACE
 11

	)

56 
	#DRM_VMW_EXECBUF
 12

	)

57 
	#DRM_VMW_GET_3D_CAP
 13

	)

58 
	#DRM_VMW_FENCE_WAIT
 14

	)

59 
	#DRM_VMW_FENCE_SIGNALED
 15

	)

60 
	#DRM_VMW_FENCE_UNREF
 16

	)

61 
	#DRM_VMW_FENCE_EVENT
 17

	)

62 
	#DRM_VMW_PRESENT
 18

	)

63 
	#DRM_VMW_PRESENT_READBACK
 19

	)

64 
	#DRM_VMW_UPDATE_LAYOUT
 20

	)

65 
	#DRM_VMW_CREATE_SHADER
 21

	)

66 
	#DRM_VMW_UNREF_SHADER
 22

	)

67 
	#DRM_VMW_GB_SURFACE_CREATE
 23

	)

68 
	#DRM_VMW_GB_SURFACE_REF
 24

	)

69 
	#DRM_VMW_SYNCCPU
 25

	)

70 
	#DRM_VMW_CREATE_EXTENDED_CONTEXT
 26

	)

84 
	#DRM_VMW_PARAM_NUM_STREAMS
 0

	)

85 
	#DRM_VMW_PARAM_NUM_FREE_STREAMS
 1

	)

86 
	#DRM_VMW_PARAM_3D
 2

	)

87 
	#DRM_VMW_PARAM_HW_CAPS
 3

	)

88 
	#DRM_VMW_PARAM_FIFO_CAPS
 4

	)

89 
	#DRM_VMW_PARAM_MAX_FB_SIZE
 5

	)

90 
	#DRM_VMW_PARAM_FIFO_HW_VERSION
 6

	)

91 
	#DRM_VMW_PARAM_MAX_SURF_MEMORY
 7

	)

92 
	#DRM_VMW_PARAM_3D_CAPS_SIZE
 8

	)

93 
	#DRM_VMW_PARAM_MAX_MOB_MEMORY
 9

	)

94 
	#DRM_VMW_PARAM_MAX_MOB_SIZE
 10

	)

95 
	#DRM_VMW_PARAM_SCREEN_TARGET
 11

	)

96 
	#DRM_VMW_PARAM_DX
 12

	)

102 
	edrm_vmw_h™dÀ_ty≥
 {

103 
DRM_VMW_HANDLE_LEGACY
 = 0,

104 
DRM_VMW_HANDLE_PRIME
 = 1

116 
	sdrm_vmw_gë∑øm_¨g
 {

117 
__u64
 
vÆue
;

118 
__u32
 
∑øm
;

119 
__u32
 
∑d64
;

139 
	sdrm_vmw_c⁄ãxt_¨g
 {

140 
__s32
 
cid
;

141 
__u32
 
∑d64
;

182 
	sdrm_vmw_surÁ˚_¸óã_ªq
 {

183 
__u32
 
Êags
;

184 
__u32
 
f‹m©
;

185 
__u32
 
mù_Àvñs
[
DRM_VMW_MAX_SURFACE_FACES
];

186 
__u64
 
size_addr
;

187 
__s32
 
sh¨óbÀ
;

188 
__s32
 
sˇnout
;

202 
	sdrm_vmw_surÁ˚_¨g
 {

203 
__s32
 
sid
;

204 
drm_vmw_h™dÀ_ty≥
 
h™dÀ_ty≥
;

218 
	sdrm_vmw_size
 {

219 
__u32
 
width
;

220 
__u32
 
height
;

221 
__u32
 
dïth
;

222 
__u32
 
∑d64
;

234 
	udrm_vmw_surÁ˚_¸óã_¨g
 {

235 
drm_vmw_surÁ˚_¨g
 
ªp
;

236 
drm_vmw_surÁ˚_¸óã_ªq
 
ªq
;

262 
	udrm_vmw_surÁ˚_ª„ªn˚_¨g
 {

263 
drm_vmw_surÁ˚_¸óã_ªq
 
ªp
;

264 
drm_vmw_surÁ˚_¨g
 
ªq
;

306 
	#DRM_VMW_EXECBUF_VERSION
 2

	)

308 
	#DRM_VMW_EXECBUF_FLAG_IMPORT_FENCE_FD
 (1 << 0)

	)

309 
	#DRM_VMW_EXECBUF_FLAG_EXPORT_FENCE_FD
 (1 << 1)

	)

311 
	sdrm_vmw_execbuf_¨g
 {

312 
__u64
 
comm™ds
;

313 
__u32
 
comm™d_size
;

314 
__u32
 
thrŸée_us
;

315 
__u64
 
„n˚_ªp
;

316 
__u32
 
vîsi⁄
;

317 
__u32
 
Êags
;

318 
__u32
 
c⁄ãxt_h™dÀ
;

319 
__s32
 
imp‹ãd_„n˚_fd
;

348 
	sdrm_vmw_„n˚_ªp
 {

349 
__u32
 
h™dÀ
;

350 
__u32
 
mask
;

351 
__u32
 
£qno
;

352 
__u32
 
∑s£d_£qno
;

353 
__s32
 
fd
;

354 
__s32
 
îr‹
;

383 
	sdrm_vmw_Æloc_dmabuf_ªq
 {

384 
__u32
 
size
;

385 
__u32
 
∑d64
;

401 
	sdrm_vmw_dmabuf_ªp
 {

402 
__u64
 
m≠_h™dÀ
;

403 
__u32
 
h™dÀ
;

404 
__u32
 
cur_gmr_id
;

405 
__u32
 
cur_gmr_off£t
;

406 
__u32
 
∑d64
;

418 
	udrm_vmw_Æloc_dmabuf_¨g
 {

419 
drm_vmw_Æloc_dmabuf_ªq
 
ªq
;

420 
drm_vmw_dmabuf_ªp
 
ªp
;

438 
	sdrm_vmw_uƒef_dmabuf_¨g
 {

439 
__u32
 
h™dÀ
;

440 
__u32
 
∑d64
;

462 
	sdrm_vmw_ª˘
 {

463 
__s32
 
x
;

464 
__s32
 
y
;

465 
__u32
 
w
;

466 
__u32
 
h
;

487 
	sdrm_vmw_c⁄åﬁ_°ªam_¨g
 {

488 
__u32
 
°ªam_id
;

489 
__u32
 
íabÀd
;

491 
__u32
 
Êags
;

492 
__u32
 
cﬁ‹_key
;

494 
__u32
 
h™dÀ
;

495 
__u32
 
off£t
;

496 
__s32
 
f‹m©
;

497 
__u32
 
size
;

498 
__u32
 
width
;

499 
__u32
 
height
;

500 
__u32
 
pôch
[3];

502 
__u32
 
∑d64
;

503 
drm_vmw_ª˘
 
§c
;

504 
drm_vmw_ª˘
 
d°
;

513 
	#DRM_VMW_CURSOR_BYPASS_ALL
 (1 << 0)

	)

514 
	#DRM_VMW_CURSOR_BYPASS_FLAGS
 (1)

	)

529 
	sdrm_vmw_curs‹_by∑ss_¨g
 {

530 
__u32
 
Êags
;

531 
__u32
 
¸tc_id
;

532 
__s32
 
xpos
;

533 
__s32
 
ypos
;

534 
__s32
 
xhŸ
;

535 
__s32
 
yhŸ
;

552 
	sdrm_vmw_°ªam_¨g
 {

553 
__u32
 
°ªam_id
;

554 
__u32
 
∑d64
;

583 
	sdrm_vmw_gë_3d_ˇp_¨g
 {

584 
__u64
 
buf„r
;

585 
__u32
 
max_size
;

586 
__u32
 
∑d64
;

614 
	#DRM_VMW_FENCE_FLAG_EXEC
 (1 << 0)

	)

615 
	#DRM_VMW_FENCE_FLAG_QUERY
 (1 << 1)

	)

617 
	#DRM_VMW_WAIT_OPTION_UNREF
 (1 << 0)

	)

634 
	sdrm_vmw_„n˚_waô_¨g
 {

635 
__u32
 
h™dÀ
;

636 
__s32
 
cookõ_vÆid
;

637 
__u64
 
kî√l_cookõ
;

638 
__u64
 
timeout_us
;

639 
__s32
 
œzy
;

640 
__s32
 
Êags
;

641 
__s32
 
waô_›ti⁄s
;

642 
__s32
 
∑d64
;

665 
	sdrm_vmw_„n˚_sig«Àd_¨g
 {

666 
__u32
 
h™dÀ
;

667 
__u32
 
Êags
;

668 
__s32
 
sig«Àd
;

669 
__u32
 
∑s£d_£qno
;

670 
__u32
 
sig«Àd_Êags
;

671 
__u32
 
∑d64
;

691 
	sdrm_vmw_„n˚_¨g
 {

692 
__u32
 
h™dÀ
;

693 
__u32
 
∑d64
;

710 
	#DRM_VMW_EVENT_FENCE_SIGNALED
 0x80000000

	)

712 
	sdrm_vmw_evít_„n˚
 {

713 
drm_evít
 
ba£
;

714 
__u64
 
u£r_d©a
;

715 
__u32
 
tv_£c
;

716 
__u32
 
tv_u£c
;

723 
	#DRM_VMW_FE_FLAG_REQ_TIME
 (1 << 0)

	)

734 
	sdrm_vmw_„n˚_evít_¨g
 {

735 
__u64
 
„n˚_ªp
;

736 
__u64
 
u£r_d©a
;

737 
__u32
 
h™dÀ
;

738 
__u32
 
Êags
;

766 
	sdrm_vmw_¥e£¡_¨g
 {

767 
__u32
 
fb_id
;

768 
__u32
 
sid
;

769 
__s32
 
de°_x
;

770 
__s32
 
de°_y
;

771 
__u64
 
˛ùs_±r
;

772 
__u32
 
num_˛ùs
;

773 
__u32
 
∑d64
;

796 
	sdrm_vmw_¥e£¡_ªadback_¨g
 {

797 
__u32
 
fb_id
;

798 
__u32
 
num_˛ùs
;

799 
__u64
 
˛ùs_±r
;

800 
__u64
 
„n˚_ªp
;

820 
	sdrm_vmw_upd©e_œyout_¨g
 {

821 
__u32
 
num_ouçuts
;

822 
__u32
 
∑d64
;

823 
__u64
 
ª˘s
;

838 
	edrm_vmw_shadî_ty≥
 {

839 
drm_vmw_shadî_ty≥_vs
 = 0,

840 
drm_vmw_shadî_ty≥_ps
,

858 
	sdrm_vmw_shadî_¸óã_¨g
 {

859 
drm_vmw_shadî_ty≥
 
shadî_ty≥
;

860 
__u32
 
size
;

861 
__u32
 
buf„r_h™dÀ
;

862 
__u32
 
shadî_h™dÀ
;

863 
__u64
 
off£t
;

881 
	sdrm_vmw_shadî_¨g
 {

882 
__u32
 
h™dÀ
;

883 
__u32
 
∑d64
;

904 
	edrm_vmw_surÁ˚_Êags
 {

905 
drm_vmw_surÁ˚_Êag_sh¨óbÀ
 = (1 << 0),

906 
drm_vmw_surÁ˚_Êag_sˇnout
 = (1 << 1),

907 
drm_vmw_surÁ˚_Êag_¸óã_buf„r
 = (1 << 2)

928 
	sdrm_vmw_gb_surÁ˚_¸óã_ªq
 {

929 
__u32
 
svga3d_Êags
;

930 
__u32
 
f‹m©
;

931 
__u32
 
mù_Àvñs
;

932 
drm_vmw_surÁ˚_Êags
 
drm_surÁ˚_Êags
;

933 
__u32
 
mu…ißm∂e_cou¡
;

934 
__u32
 
autogí_fûãr
;

935 
__u32
 
buf„r_h™dÀ
;

936 
__u32
 
¨øy_size
;

937 
drm_vmw_size
 
ba£_size
;

954 
	sdrm_vmw_gb_surÁ˚_¸óã_ªp
 {

955 
__u32
 
h™dÀ
;

956 
__u32
 
backup_size
;

957 
__u32
 
buf„r_h™dÀ
;

958 
__u32
 
buf„r_size
;

959 
__u64
 
buf„r_m≠_h™dÀ
;

970 
	udrm_vmw_gb_surÁ˚_¸óã_¨g
 {

971 
drm_vmw_gb_surÁ˚_¸óã_ªp
 
ªp
;

972 
drm_vmw_gb_surÁ˚_¸óã_ªq
 
ªq
;

999 
	sdrm_vmw_gb_surÁ˚_ªf_ªp
 {

1000 
drm_vmw_gb_surÁ˚_¸óã_ªq
 
¸eq
;

1001 
drm_vmw_gb_surÁ˚_¸óã_ªp
 
¸ï
;

1012 
	udrm_vmw_gb_surÁ˚_ª„ªn˚_¨g
 {

1013 
drm_vmw_gb_surÁ˚_ªf_ªp
 
ªp
;

1014 
drm_vmw_surÁ˚_¨g
 
ªq
;

1044 
	edrm_vmw_sync˝u_Êags
 {

1045 
drm_vmw_sync˝u_ªad
 = (1 << 0),

1046 
drm_vmw_sync˝u_wrôe
 = (1 << 1),

1047 
drm_vmw_sync˝u_d⁄tblock
 = (1 << 2),

1048 
drm_vmw_sync˝u_Ælow_cs
 = (1 << 3)

1057 
	edrm_vmw_sync˝u_›
 {

1058 
drm_vmw_sync˝u_gøb
,

1059 
drm_vmw_sync˝u_ªÀa£


1069 
	sdrm_vmw_sync˝u_¨g
 {

1070 
drm_vmw_sync˝u_›
 
›
;

1071 
drm_vmw_sync˝u_Êags
 
Êags
;

1072 
__u32
 
h™dÀ
;

1073 
__u32
 
∑d64
;

1083 
	edrm_vmw_exãnded_c⁄ãxt
 {

1084 
drm_vmw_c⁄ãxt_Àgacy
,

1085 
drm_vmw_c⁄ãxt_dx


1096 
	udrm_vmw_exãnded_c⁄ãxt_¨g
 {

1097 
drm_vmw_exãnded_c⁄ãxt
 
ªq
;

1098 
drm_vmw_c⁄ãxt_¨g
 
ªp
;

1118 
	sdrm_vmw_h™dÀ_˛o£_¨g
 {

1119 
__u32
 
h™dÀ
;

1120 
__u32
 
∑d64
;

1124 #i‡
deföed
(
__˝lu•lus
)

	@src/common/linuxkpi/include/uapi/linux/kfd_ioctl.h

23 #i‚de‡
KFD_IOCTL_H_INCLUDED


24 
	#KFD_IOCTL_H_INCLUDED


	)

26 
	~<drm/drm.h
>

27 
	~<löux/io˘l.h
>

29 
	#KFD_IOCTL_MAJOR_VERSION
 1

	)

30 
	#KFD_IOCTL_MINOR_VERSION
 1

	)

32 
	skfd_io˘l_gë_vîsi⁄_¨gs
 {

33 
__u32
 
	mmaj‹_vîsi⁄
;

34 
__u32
 
	mmö‹_vîsi⁄
;

38 
	#KFD_IOC_QUEUE_TYPE_COMPUTE
 0

	)

39 
	#KFD_IOC_QUEUE_TYPE_SDMA
 1

	)

40 
	#KFD_IOC_QUEUE_TYPE_COMPUTE_AQL
 2

	)

42 
	#KFD_MAX_QUEUE_PERCENTAGE
 100

	)

43 
	#KFD_MAX_QUEUE_PRIORITY
 15

	)

45 
	skfd_io˘l_¸óã_queue_¨gs
 {

46 
__u64
 
	mrög_ba£_addªss
;

47 
__u64
 
	mwrôe_poöãr_addªss
;

48 
__u64
 
	mªad_poöãr_addªss
;

49 
__u64
 
	mdo‹bñl_off£t
;

51 
__u32
 
	mrög_size
;

52 
__u32
 
	mgpu_id
;

53 
__u32
 
	mqueue_ty≥
;

54 
__u32
 
	mqueue_≥r˚¡age
;

55 
__u32
 
	mqueue_¥i‹ôy
;

56 
__u32
 
	mqueue_id
;

58 
__u64
 
	me›_buf„r_addªss
;

59 
__u64
 
	me›_buf„r_size
;

60 
__u64
 
	m˘x_ßve_ª°‹e_addªss
;

61 
__u64
 
	m˘x_ßve_ª°‹e_size
;

64 
	skfd_io˘l_de°roy_queue_¨gs
 {

65 
__u32
 
	mqueue_id
;

66 
__u32
 
	m∑d
;

69 
	skfd_io˘l_upd©e_queue_¨gs
 {

70 
__u64
 
	mrög_ba£_addªss
;

72 
__u32
 
	mqueue_id
;

73 
__u32
 
	mrög_size
;

74 
__u32
 
	mqueue_≥r˚¡age
;

75 
__u32
 
	mqueue_¥i‹ôy
;

79 
	#KFD_IOC_CACHE_POLICY_COHERENT
 0

	)

80 
	#KFD_IOC_CACHE_POLICY_NONCOHERENT
 1

	)

82 
	skfd_io˘l_£t_mem‹y_pﬁicy_¨gs
 {

83 
__u64
 
	mÆã∫©e_≠îtuª_ba£
;

84 
__u64
 
	mÆã∫©e_≠îtuª_size
;

86 
__u32
 
	mgpu_id
;

87 
__u32
 
	mdeÁu…_pﬁicy
;

88 
__u32
 
	mÆã∫©e_pﬁicy
;

89 
__u32
 
	m∑d
;

99 
	skfd_io˘l_gë_˛ock_cou¡îs_¨gs
 {

100 
__u64
 
	mgpu_˛ock_cou¡î
;

101 
__u64
 
	m˝u_˛ock_cou¡î
;

102 
__u64
 
	msy°em_˛ock_cou¡î
;

103 
__u64
 
	msy°em_˛ock_‰eq
;

105 
__u32
 
	mgpu_id
;

106 
__u32
 
	m∑d
;

109 
	#NUM_OF_SUPPORTED_GPUS
 7

	)

111 
	skfd_¥o˚ss_devi˚_≠îtuªs
 {

112 
__u64
 
	mlds_ba£
;

113 
__u64
 
	mlds_limô
;

114 
__u64
 
	ms¸©ch_ba£
;

115 
__u64
 
	ms¸©ch_limô
;

116 
__u64
 
	mgpuvm_ba£
;

117 
__u64
 
	mgpuvm_limô
;

118 
__u32
 
	mgpu_id
;

119 
__u32
 
	m∑d
;

122 
	skfd_io˘l_gë_¥o˚ss_≠îtuªs_¨gs
 {

123 
kfd_¥o˚ss_devi˚_≠îtuªs


124 
	m¥o˚ss_≠îtuªs
[
NUM_OF_SUPPORTED_GPUS
];

127 
__u32
 
	mnum_of_nodes
;

128 
__u32
 
	m∑d
;

131 
	#MAX_ALLOWED_NUM_POINTS
 100

	)

132 
	#MAX_ALLOWED_AW_BUFF_SIZE
 4096

	)

133 
	#MAX_ALLOWED_WAC_BUFF_SIZE
 128

	)

135 
	skfd_io˘l_dbg_ªgi°î_¨gs
 {

136 
__u32
 
	mgpu_id
;

137 
__u32
 
	m∑d
;

140 
	skfd_io˘l_dbg_uƒegi°î_¨gs
 {

141 
__u32
 
	mgpu_id
;

142 
__u32
 
	m∑d
;

145 
	skfd_io˘l_dbg_addªss_w©ch_¨gs
 {

146 
__u64
 
	mc⁄ã¡_±r
;

147 
__u32
 
	mgpu_id
;

148 
__u32
 
	mbuf_size_ö_byãs
;

151 
	skfd_io˘l_dbg_wave_c⁄åﬁ_¨gs
 {

152 
__u64
 
	mc⁄ã¡_±r
;

153 
__u32
 
	mgpu_id
;

154 
__u32
 
	mbuf_size_ö_byãs
;

158 
	#KFD_IOC_EVENT_SIGNAL
 0

	)

159 
	#KFD_IOC_EVENT_NODECHANGE
 1

	)

160 
	#KFD_IOC_EVENT_DEVICESTATECHANGE
 2

	)

161 
	#KFD_IOC_EVENT_HW_EXCEPTION
 3

	)

162 
	#KFD_IOC_EVENT_SYSTEM_EVENT
 4

	)

163 
	#KFD_IOC_EVENT_DEBUG_EVENT
 5

	)

164 
	#KFD_IOC_EVENT_PROFILE_EVENT
 6

	)

165 
	#KFD_IOC_EVENT_QUEUE_EVENT
 7

	)

166 
	#KFD_IOC_EVENT_MEMORY
 8

	)

168 
	#KFD_IOC_WAIT_RESULT_COMPLETE
 0

	)

169 
	#KFD_IOC_WAIT_RESULT_TIMEOUT
 1

	)

170 
	#KFD_IOC_WAIT_RESULT_FAIL
 2

	)

172 
	#KFD_SIGNAL_EVENT_LIMIT
 256

	)

174 
	skfd_io˘l_¸óã_evít_¨gs
 {

175 
__u64
 
	mevít_∑ge_off£t
;

176 
__u32
 
	mevít_åiggî_d©a
;

177 
__u32
 
	mevít_ty≥
;

178 
__u32
 
	mauto_ª£t
;

179 
__u32
 
	mnode_id
;

181 
__u32
 
	mevít_id
;

182 
__u32
 
	mevít_¶Ÿ_ödex
;

185 
	skfd_io˘l_de°roy_evít_¨gs
 {

186 
__u32
 
	mevít_id
;

187 
__u32
 
	m∑d
;

190 
	skfd_io˘l_£t_evít_¨gs
 {

191 
__u32
 
	mevít_id
;

192 
__u32
 
	m∑d
;

195 
	skfd_io˘l_ª£t_evít_¨gs
 {

196 
__u32
 
	mevít_id
;

197 
__u32
 
	m∑d
;

200 
	skfd_mem‹y_ex˚±i⁄_Áûuª
 {

201 
__u32
 
	mNŸPª£¡
;

202 
__u32
 
	mRódO∆y
;

203 
__u32
 
	mNoExecuã
;

204 
__u32
 
	m∑d
;

208 
	skfd_hß_mem‹y_ex˚±i⁄_d©a
 {

209 
kfd_mem‹y_ex˚±i⁄_Áûuª
 
	mÁûuª
;

210 
__u64
 
	mva
;

211 
__u32
 
	mgpu_id
;

212 
__u32
 
	m∑d
;

216 
	skfd_evít_d©a
 {

218 
kfd_hß_mem‹y_ex˚±i⁄_d©a
 
	mmem‹y_ex˚±i⁄_d©a
;

220 
__u64
 
	mkfd_evít_d©a_ext
;

222 
__u32
 
	mevít_id
;

223 
__u32
 
	m∑d
;

226 
	skfd_io˘l_waô_evíts_¨gs
 {

227 
__u64
 
	mevíts_±r
;

229 
__u32
 
	mnum_evíts
;

230 
__u32
 
	mwaô_f‹_Æl
;

231 
__u32
 
	mtimeout
;

232 
__u32
 
	mwaô_ªsu…
;

235 
	skfd_io˘l_£t_s¸©ch_backög_va_¨gs
 {

236 
uöt64_t
 
	mva_addr
;

237 
uöt32_t
 
	mgpu_id
;

238 
uöt32_t
 
	m∑d
;

241 
	skfd_io˘l_gë_tûe_c⁄fig_¨gs
 {

243 
uöt64_t
 
	mtûe_c⁄fig_±r
;

245 
uöt64_t
 
	mma¸o_tûe_c⁄fig_±r
;

249 
uöt32_t
 
	mnum_tûe_c⁄figs
;

253 
uöt32_t
 
	mnum_ma¸o_tûe_c⁄figs
;

255 
uöt32_t
 
	mgpu_id
;

256 
uöt32_t
 
	mgb_addr_c⁄fig
;

257 
uöt32_t
 
	mnum_b™ks
;

258 
uöt32_t
 
	mnum_ønks
;

264 
	#AMDKFD_IOCTL_BASE
 'K'

	)

265 
	#AMDKFD_IO
(
ƒ
Ë
	`_IO
(
AMDKFD_IOCTL_BASE
,Çr)

	)

266 
	#AMDKFD_IOR
(
ƒ
, 
ty≥
Ë
	`_IOR
(
AMDKFD_IOCTL_BASE
,Çr,Åy≥)

	)

267 
	#AMDKFD_IOW
(
ƒ
, 
ty≥
Ë
	`_IOW
(
AMDKFD_IOCTL_BASE
,Çr,Åy≥)

	)

268 
	#AMDKFD_IOWR
(
ƒ
, 
ty≥
Ë
	`_IOWR
(
AMDKFD_IOCTL_BASE
,Çr,Åy≥)

	)

270 
	#AMDKFD_IOC_GET_VERSION
 \

271 
	`AMDKFD_IOR
(0x01, 
kfd_io˘l_gë_vîsi⁄_¨gs
)

	)

273 
	#AMDKFD_IOC_CREATE_QUEUE
 \

274 
	`AMDKFD_IOWR
(0x02, 
kfd_io˘l_¸óã_queue_¨gs
)

	)

276 
	#AMDKFD_IOC_DESTROY_QUEUE
 \

277 
	`AMDKFD_IOWR
(0x03, 
kfd_io˘l_de°roy_queue_¨gs
)

	)

279 
	#AMDKFD_IOC_SET_MEMORY_POLICY
 \

280 
	`AMDKFD_IOW
(0x04, 
kfd_io˘l_£t_mem‹y_pﬁicy_¨gs
)

	)

282 
	#AMDKFD_IOC_GET_CLOCK_COUNTERS
 \

283 
	`AMDKFD_IOWR
(0x05, 
kfd_io˘l_gë_˛ock_cou¡îs_¨gs
)

	)

285 
	#AMDKFD_IOC_GET_PROCESS_APERTURES
 \

286 
	`AMDKFD_IOR
(0x06, 
kfd_io˘l_gë_¥o˚ss_≠îtuªs_¨gs
)

	)

288 
	#AMDKFD_IOC_UPDATE_QUEUE
 \

289 
	`AMDKFD_IOW
(0x07, 
kfd_io˘l_upd©e_queue_¨gs
)

	)

291 
	#AMDKFD_IOC_CREATE_EVENT
 \

292 
	`AMDKFD_IOWR
(0x08, 
kfd_io˘l_¸óã_evít_¨gs
)

	)

294 
	#AMDKFD_IOC_DESTROY_EVENT
 \

295 
	`AMDKFD_IOW
(0x09, 
kfd_io˘l_de°roy_evít_¨gs
)

	)

297 
	#AMDKFD_IOC_SET_EVENT
 \

298 
	`AMDKFD_IOW
(0x0A, 
kfd_io˘l_£t_evít_¨gs
)

	)

300 
	#AMDKFD_IOC_RESET_EVENT
 \

301 
	`AMDKFD_IOW
(0x0B, 
kfd_io˘l_ª£t_evít_¨gs
)

	)

303 
	#AMDKFD_IOC_WAIT_EVENTS
 \

304 
	`AMDKFD_IOWR
(0x0C, 
kfd_io˘l_waô_evíts_¨gs
)

	)

306 
	#AMDKFD_IOC_DBG_REGISTER
 \

307 
	`AMDKFD_IOW
(0x0D, 
kfd_io˘l_dbg_ªgi°î_¨gs
)

	)

309 
	#AMDKFD_IOC_DBG_UNREGISTER
 \

310 
	`AMDKFD_IOW
(0x0E, 
kfd_io˘l_dbg_uƒegi°î_¨gs
)

	)

312 
	#AMDKFD_IOC_DBG_ADDRESS_WATCH
 \

313 
	`AMDKFD_IOW
(0x0F, 
kfd_io˘l_dbg_addªss_w©ch_¨gs
)

	)

315 
	#AMDKFD_IOC_DBG_WAVE_CONTROL
 \

316 
	`AMDKFD_IOW
(0x10, 
kfd_io˘l_dbg_wave_c⁄åﬁ_¨gs
)

	)

318 
	#AMDKFD_IOC_SET_SCRATCH_BACKING_VA
 \

319 
	`AMDKFD_IOWR
(0x11, 
kfd_io˘l_£t_s¸©ch_backög_va_¨gs
)

	)

321 
	#AMDKFD_IOC_GET_TILE_CONFIG
 \

322 
	`AMDKFD_IOWR
(0x12, 
kfd_io˘l_gë_tûe_c⁄fig_¨gs
)

	)

324 
	#AMDKFD_COMMAND_START
 0x01

	)

325 
	#AMDKFD_COMMAND_END
 0x13

	)

	@src/nvidia-drm/bus_if.h

20 #i‚de‡
_bus_if_h_


21 
	#_bus_if_h_


	)

24 
kobj›_desc
 
bus_¥öt_chûd_desc
;

26 
	tbus_¥öt_chûd_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

42 
__ölöe
 
	$BUS_PRINT_CHILD
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

44 
kobj›_t
 
_m
;

45 
rc
;

46 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_¥öt_chûd
);

47 
rc
 = ((
bus_¥öt_chûd_t
 *Ë
_m
)(
_dev
, 
_chûd
);

48  (
rc
);

49 
	}
}

52 
kobj›_desc
 
bus_¥obe_nom©ch_desc
;

54 
	tbus_¥obe_nom©ch_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

65 
__ölöe
 
	$BUS_PROBE_NOMATCH
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

67 
kobj›_t
 
_m
;

68 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_¥obe_nom©ch
);

69 ((
bus_¥obe_nom©ch_t
 *Ë
_m
)(
_dev
, 
_chûd
);

70 
	}
}

73 
kobj›_desc
 
bus_ªad_iv¨_desc
;

75 
	tbus_ªad_iv¨_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ödex
,

76 
	tuöçå_t
 *
	t_ªsu…
);

105 
__ölöe
 
	$BUS_READ_IVAR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ödex
,

106 
uöçå_t
 *
_ªsu…
)

108 
kobj›_t
 
_m
;

109 
rc
;

110 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªad_iv¨
);

111 
rc
 = ((
bus_ªad_iv¨_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ödex
, 
_ªsu…
);

112  (
rc
);

113 
	}
}

116 
kobj›_desc
 
bus_wrôe_iv¨_desc
;

118 
	tbus_wrôe_iv¨_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ödx
,

119 
	tuöçå_t
 
	t_vÆue
);

138 
__ölöe
 
	$BUS_WRITE_IVAR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ödx
,

139 
uöçå_t
 
_vÆue
)

141 
kobj›_t
 
_m
;

142 
rc
;

143 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_wrôe_iv¨
);

144 
rc
 = ((
bus_wrôe_iv¨_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ödx
, 
_vÆue
);

145  (
rc
);

146 
	}
}

149 
kobj›_desc
 
bus_chûd_dñëed_desc
;

151 
	tbus_chûd_dñëed_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

162 
__ölöe
 
	$BUS_CHILD_DELETED
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

164 
kobj›_t
 
_m
;

165 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_dñëed
);

166 ((
bus_chûd_dñëed_t
 *Ë
_m
)(
_dev
, 
_chûd
);

167 
	}
}

170 
kobj›_desc
 
bus_chûd_dëached_desc
;

172 
	tbus_chûd_dëached_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

183 
__ölöe
 
	$BUS_CHILD_DETACHED
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

185 
kobj›_t
 
_m
;

186 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_dëached
);

187 ((
bus_chûd_dëached_t
 *Ë
_m
)(
_dev
, 
_chûd
);

188 
	}
}

191 
kobj›_desc
 
bus_drivî_added_desc
;

193 
	tbus_drivî_added_t
(
	tdevi˚_t
 
	t_dev
, 
	tdrivî_t
 *
	t_drivî
);

206 
__ölöe
 
	$BUS_DRIVER_ADDED
(
devi˚_t
 
_dev
, 
drivî_t
 *
_drivî
)

208 
kobj›_t
 
_m
;

209 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_drivî_added
);

210 ((
bus_drivî_added_t
 *Ë
_m
)(
_dev
, 
_drivî
);

211 
	}
}

214 
kobj›_desc
 
bus_add_chûd_desc
;

216 
devi˚_t
 
	tbus_add_chûd_t
(
	tdevi˚_t
 
	t_dev
, 
	tu_öt
 
	t_‹dî
, c⁄° *
	t_«me
,

217 
	t_unô
);

240 
__ölöe
 
devi˚_t
 
	$BUS_ADD_CHILD
(
devi˚_t
 
_dev
, 
u_öt
 
_‹dî
,

241 c⁄° *
_«me
, 
_unô
)

243 
kobj›_t
 
_m
;

244 
devi˚_t
 
rc
;

245 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_add_chûd
);

246 
rc
 = ((
bus_add_chûd_t
 *Ë
_m
)(
_dev
, 
_‹dî
, 
_«me
, 
_unô
);

247  (
rc
);

248 
	}
}

251 
kobj›_desc
 
bus_ªsˇn_desc
;

253 
	tbus_ªsˇn_t
(
	tdevi˚_t
 
	t_dev
);

264 
__ölöe
 
	$BUS_RESCAN
(
devi˚_t
 
_dev
)

266 
kobj›_t
 
_m
;

267 
rc
;

268 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªsˇn
);

269 
rc
 = ((
bus_ªsˇn_t
 *Ë
_m
)(
_dev
);

270  (
rc
);

271 
	}
}

274 
kobj›_desc
 
bus_Æloc_ªsour˚_desc
;

276 
ªsour˚
 * 
	tbus_Æloc_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

277 
	t_ty≥
, *
	t_rid
,

278 
	trm™_ªs_t
 
	t_°¨t
,

279 
	trm™_ªs_t
 
	t_íd
,

280 
	trm™_ªs_t
 
	t_cou¡
, 
	tu_öt
 
	t_Êags
);

310 
__ölöe
 
ªsour˚
 * 
	$BUS_ALLOC_RESOURCE
(
devi˚_t
 
_dev
,

311 
devi˚_t
 
_chûd
, 
_ty≥
,

312 *
_rid
,

313 
rm™_ªs_t
 
_°¨t
,

314 
rm™_ªs_t
 
_íd
,

315 
rm™_ªs_t
 
_cou¡
,

316 
u_öt
 
_Êags
)

318 
kobj›_t
 
_m
;

319 
ªsour˚
 * 
rc
;

320 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_Æloc_ªsour˚
);

321 
rc
 = ((
bus_Æloc_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨t
, 
_íd
, 
_cou¡
, 
_Êags
);

322  (
rc
);

323 
	}
}

326 
kobj›_desc
 
bus_a˘iv©e_ªsour˚_desc
;

328 
	tbus_a˘iv©e_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

329 
	t_rid
, 
	tªsour˚
 *
	t_r
);

345 
__ölöe
 
	$BUS_ACTIVATE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

346 
_ty≥
, 
_rid
,

347 
ªsour˚
 *
_r
)

349 
kobj›_t
 
_m
;

350 
rc
;

351 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_a˘iv©e_ªsour˚
);

352 
rc
 = ((
bus_a˘iv©e_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_r
);

353  (
rc
);

354 
	}
}

357 
kobj›_desc
 
bus_m≠_ªsour˚_desc
;

359 
	tbus_m≠_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

360 
	tªsour˚
 *
	t_r
,

361 
	tªsour˚_m≠_ªque°
 *
	t_¨gs
,

362 
	tªsour˚_m≠
 *
	t_m≠
);

378 
__ölöe
 
	$BUS_MAP_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

379 
ªsour˚
 *
_r
,

380 
ªsour˚_m≠_ªque°
 *
_¨gs
,

381 
ªsour˚_m≠
 *
_m≠
)

383 
kobj›_t
 
_m
;

384 
rc
;

385 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_m≠_ªsour˚
);

386 
rc
 = ((
bus_m≠_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_r
, 
_¨gs
, 
_m≠
);

387  (
rc
);

388 
	}
}

391 
kobj›_desc
 
bus_unm≠_ªsour˚_desc
;

393 
	tbus_unm≠_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

394 
	tªsour˚
 *
	t_r
,

395 
	tªsour˚_m≠
 *
	t_m≠
);

410 
__ölöe
 
	$BUS_UNMAP_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

411 
_ty≥
, 
ªsour˚
 *
_r
,

412 
ªsour˚_m≠
 *
_m≠
)

414 
kobj›_t
 
_m
;

415 
rc
;

416 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_unm≠_ªsour˚
);

417 
rc
 = ((
bus_unm≠_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_r
, 
_m≠
);

418  (
rc
);

419 
	}
}

422 
kobj›_desc
 
bus_dó˘iv©e_ªsour˚_desc
;

424 
	tbus_dó˘iv©e_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

425 
	t_rid
, 
	tªsour˚
 *
	t_r
);

439 
__ölöe
 
	$BUS_DEACTIVATE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

440 
_ty≥
, 
_rid
,

441 
ªsour˚
 *
_r
)

443 
kobj›_t
 
_m
;

444 
rc
;

445 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_dó˘iv©e_ªsour˚
);

446 
rc
 = ((
bus_dó˘iv©e_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_r
);

447  (
rc
);

448 
	}
}

451 
kobj›_desc
 
bus_adju°_ªsour˚_desc
;

453 
	tbus_adju°_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

454 
	tªsour˚
 *
	t_ªs
, 
	trm™_ªs_t
 
	t_°¨t
,

455 
	trm™_ªs_t
 
	t_íd
);

472 
__ölöe
 
	$BUS_ADJUST_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

473 
_ty≥
, 
ªsour˚
 *
_ªs
,

474 
rm™_ªs_t
 
_°¨t
,Ñm™_ªs_à
_íd
)

476 
kobj›_t
 
_m
;

477 
rc
;

478 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_adju°_ªsour˚
);

479 
rc
 = ((
bus_adju°_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_ªs
, 
_°¨t
, 
_íd
);

480  (
rc
);

481 
	}
}

484 
kobj›_desc
 
bus_ªÀa£_ªsour˚_desc
;

486 
	tbus_ªÀa£_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

487 
	t_rid
, 
	tªsour˚
 *
	t_ªs
);

502 
__ölöe
 
	$BUS_RELEASE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

503 
_ty≥
, 
_rid
,

504 
ªsour˚
 *
_ªs
)

506 
kobj›_t
 
_m
;

507 
rc
;

508 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªÀa£_ªsour˚
);

509 
rc
 = ((
bus_ªÀa£_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_ªs
);

510  (
rc
);

511 
	}
}

514 
kobj›_desc
 
bus_£tup_öå_desc
;

516 
	tbus_£tup_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

517 
	tªsour˚
 *
	t_úq
, 
	t_Êags
,

518 
	tdrivî_fûãr_t
 *
	t_fûãr
, 
	tdrivî_öå_t
 *
	t_öå
,

519 *
	t_¨g
, **
	t_cookõp
);

544 
__ölöe
 
	$BUS_SETUP_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

545 
ªsour˚
 *
_úq
, 
_Êags
,

546 
drivî_fûãr_t
 *
_fûãr
,

547 
drivî_öå_t
 *
_öå
, *
_¨g
,

548 **
_cookõp
)

550 
kobj›_t
 
_m
;

551 
rc
;

552 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_£tup_öå
);

553 
rc
 = ((
bus_£tup_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_Êags
, 
_fûãr
, 
_öå
, 
_¨g
, 
_cookõp
);

554  (
rc
);

555 
	}
}

558 
kobj›_desc
 
bus_ã¨down_öå_desc
;

560 
	tbus_ã¨down_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

561 
	tªsour˚
 *
	t_úq
, *
	t_cookõ
);

576 
__ölöe
 
	$BUS_TEARDOWN_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

577 
ªsour˚
 *
_úq
, *
_cookõ
)

579 
kobj›_t
 
_m
;

580 
rc
;

581 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ã¨down_öå
);

582 
rc
 = ((
bus_ã¨down_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_cookõ
);

583  (
rc
);

584 
	}
}

587 
kobj›_desc
 
bus_£t_ªsour˚_desc
;

589 
	tbus_£t_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

590 
	t_rid
, 
	trm™_ªs_t
 
	t_°¨t
,Ñm™_ªs_à
	t_cou¡
);

609 
__ölöe
 
	$BUS_SET_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

610 
_rid
, 
rm™_ªs_t
 
_°¨t
,

611 
rm™_ªs_t
 
_cou¡
)

613 
kobj›_t
 
_m
;

614 
rc
;

615 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_£t_ªsour˚
);

616 
rc
 = ((
bus_£t_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨t
, 
_cou¡
);

617  (
rc
);

618 
	}
}

621 
kobj›_desc
 
bus_gë_ªsour˚_desc
;

623 
	tbus_gë_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

624 
	t_rid
, 
	trm™_ªs_t
 *
	t_°¨ç
,

625 
	trm™_ªs_t
 *
	t_cou¡p
);

642 
__ölöe
 
	$BUS_GET_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

643 
_rid
, 
rm™_ªs_t
 *
_°¨ç
,

644 
rm™_ªs_t
 *
_cou¡p
)

646 
kobj›_t
 
_m
;

647 
rc
;

648 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_ªsour˚
);

649 
rc
 = ((
bus_gë_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨ç
, 
_cou¡p
);

650  (
rc
);

651 
	}
}

654 
kobj›_desc
 
bus_dñëe_ªsour˚_desc
;

656 
	tbus_dñëe_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

657 
	t_rid
);

670 
__ölöe
 
	$BUS_DELETE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

671 
_ty≥
, 
_rid
)

673 
kobj›_t
 
_m
;

674 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_dñëe_ªsour˚
);

675 ((
bus_dñëe_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
);

676 
	}
}

679 
kobj›_desc
 
bus_gë_ªsour˚_li°_desc
;

681 
ªsour˚_li°
 * 
	tbus_gë_ªsour˚_li°_t
(
	tdevi˚_t
 
	t_dev
,

682 
	tdevi˚_t
 
	t_chûd
);

694 
__ölöe
 
ªsour˚_li°
 * 
	$BUS_GET_RESOURCE_LIST
(
devi˚_t
 
_dev
,

695 
devi˚_t
 
_chûd
)

697 
kobj›_t
 
_m
;

698 
ªsour˚_li°
 * 
rc
;

699 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_ªsour˚_li°
);

700 
rc
 = ((
bus_gë_ªsour˚_li°_t
 *Ë
_m
)(
_dev
, 
_chûd
);

701  (
rc
);

702 
	}
}

705 
kobj›_desc
 
bus_chûd_¥e£¡_desc
;

707 
	tbus_chûd_¥e£¡_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

724 
__ölöe
 
	$BUS_CHILD_PRESENT
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

726 
kobj›_t
 
_m
;

727 
rc
;

728 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_¥e£¡
);

729 
rc
 = ((
bus_chûd_¥e£¡_t
 *Ë
_m
)(
_dev
, 
_chûd
);

730  (
rc
);

731 
	}
}

734 
kobj›_desc
 
bus_chûd_≤pöfo_°r_desc
;

736 
	tbus_chûd_≤pöfo_°r_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_buf
,

737 
	tsize_t
 
	t_buÊí
);

758 
__ölöe
 
	$BUS_CHILD_PNPINFO_STR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

759 *
_buf
, 
size_t
 
_buÊí
)

761 
kobj›_t
 
_m
;

762 
rc
;

763 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_≤pöfo_°r
);

764 
rc
 = ((
bus_chûd_≤pöfo_°r_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_buf
, 
_buÊí
);

765  (
rc
);

766 
	}
}

769 
kobj›_desc
 
bus_chûd_loˇti⁄_°r_desc
;

771 
	tbus_chûd_loˇti⁄_°r_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_buf
,

772 
	tsize_t
 
	t_buÊí
);

793 
__ölöe
 
	$BUS_CHILD_LOCATION_STR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

794 *
_buf
, 
size_t
 
_buÊí
)

796 
kobj›_t
 
_m
;

797 
rc
;

798 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_loˇti⁄_°r
);

799 
rc
 = ((
bus_chûd_loˇti⁄_°r_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_buf
, 
_buÊí
);

800  (
rc
);

801 
	}
}

804 
kobj›_desc
 
bus_böd_öå_desc
;

806 
	tbus_böd_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

807 
	tªsour˚
 *
	t_úq
, 
	t_˝u
);

818 
__ölöe
 
	$BUS_BIND_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

819 
ªsour˚
 *
_úq
, 
_˝u
)

821 
kobj›_t
 
_m
;

822 
rc
;

823 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_böd_öå
);

824 
rc
 = ((
bus_böd_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_˝u
);

825  (
rc
);

826 
	}
}

829 
kobj›_desc
 
bus_c⁄fig_öå_desc
;

831 
	tbus_c⁄fig_öå_t
(
	tdevi˚_t
 
	t_dev
, 
	t_úq
, 
	töå_åiggî
 
	t_åig
,

832 
	töå_pﬁ¨ôy
 
	t_pﬁ
);

843 
__ölöe
 
	$BUS_CONFIG_INTR
(
devi˚_t
 
_dev
, 
_úq
,

844 
öå_åiggî
 
_åig
,

845 
öå_pﬁ¨ôy
 
_pﬁ
)

847 
kobj›_t
 
_m
;

848 
rc
;

849 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_c⁄fig_öå
);

850 
rc
 = ((
bus_c⁄fig_öå_t
 *Ë
_m
)(
_dev
, 
_úq
, 
_åig
, 
_pﬁ
);

851  (
rc
);

852 
	}
}

855 
kobj›_desc
 
bus_des¸ibe_öå_desc
;

857 
	tbus_des¸ibe_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

858 
	tªsour˚
 *
	t_úq
, *
	t_cookõ
,

859 c⁄° *
	t_des¸
);

872 
__ölöe
 
	$BUS_DESCRIBE_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

873 
ªsour˚
 *
_úq
, *
_cookõ
,

874 c⁄° *
_des¸
)

876 
kobj›_t
 
_m
;

877 
rc
;

878 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_des¸ibe_öå
);

879 
rc
 = ((
bus_des¸ibe_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_cookõ
, 
_des¸
);

880  (
rc
);

881 
	}
}

884 
kobj›_desc
 
bus_höãd_chûd_desc
;

886 
	tbus_höãd_chûd_t
(
	tdevi˚_t
 
	t_dev
, c⁄° *
	t_d«me
, 
	t_dunô
);

904 
__ölöe
 
	$BUS_HINTED_CHILD
(
devi˚_t
 
_dev
, c⁄° *
_d«me
,

905 
_dunô
)

907 
kobj›_t
 
_m
;

908 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_höãd_chûd
);

909 ((
bus_höãd_chûd_t
 *Ë
_m
)(
_dev
, 
_d«me
, 
_dunô
);

910 
	}
}

913 
kobj›_desc
 
bus_gë_dma_èg_desc
;

915 
bus_dma_èg_t
 
	tbus_gë_dma_èg_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

923 
__ölöe
 
bus_dma_èg_t
 
	$BUS_GET_DMA_TAG
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

925 
kobj›_t
 
_m
;

926 
bus_dma_èg_t
 
rc
;

927 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_dma_èg
);

928 
rc
 = ((
bus_gë_dma_èg_t
 *Ë
_m
)(
_dev
, 
_chûd
);

929  (
rc
);

930 
	}
}

933 
kobj›_desc
 
bus_gë_bus_èg_desc
;

935 
bus_•a˚_èg_t
 
	tbus_gë_bus_èg_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

943 
__ölöe
 
bus_•a˚_èg_t
 
	$BUS_GET_BUS_TAG
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

945 
kobj›_t
 
_m
;

946 
bus_•a˚_èg_t
 
rc
;

947 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_bus_èg
);

948 
rc
 = ((
bus_gë_bus_èg_t
 *Ë
_m
)(
_dev
, 
_chûd
);

949  (
rc
);

950 
	}
}

953 
kobj›_desc
 
bus_höt_devi˚_unô_desc
;

955 
	tbus_höt_devi˚_unô_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

956 c⁄° *
	t_«me
, *
	t_unôp
);

966 
__ölöe
 
	$BUS_HINT_DEVICE_UNIT
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

967 c⁄° *
_«me
, *
_unôp
)

969 
kobj›_t
 
_m
;

970 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_höt_devi˚_unô
);

971 ((
bus_höt_devi˚_unô_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_«me
, 
_unôp
);

972 
	}
}

975 
kobj›_desc
 
bus_√w_∑ss_desc
;

977 
	tbus_√w_∑ss_t
(
	tdevi˚_t
 
	t_dev
);

984 
__ölöe
 
	$BUS_NEW_PASS
(
devi˚_t
 
_dev
)

986 
kobj›_t
 
_m
;

987 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_√w_∑ss
);

988 ((
bus_√w_∑ss_t
 *Ë
_m
)(
_dev
);

989 
	}
}

992 
kobj›_desc
 
bus_ªm≠_öå_desc
;

994 
	tbus_ªm≠_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	tu_öt
 
	t_úq
);

1003 
__ölöe
 
	$BUS_REMAP_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
u_öt
 
_úq
)

1005 
kobj›_t
 
_m
;

1006 
rc
;

1007 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªm≠_öå
);

1008 
rc
 = ((
bus_ªm≠_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
);

1009  (
rc
);

1010 
	}
}

1013 
kobj›_desc
 
bus_su•íd_chûd_desc
;

1015 
	tbus_su•íd_chûd_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

1023 
__ölöe
 
	$BUS_SUSPEND_CHILD
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

1025 
kobj›_t
 
_m
;

1026 
rc
;

1027 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_su•íd_chûd
);

1028 
rc
 = ((
bus_su•íd_chûd_t
 *Ë
_m
)(
_dev
, 
_chûd
);

1029  (
rc
);

1030 
	}
}

1033 
kobj›_desc
 
bus_ªsume_chûd_desc
;

1035 
	tbus_ªsume_chûd_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

1043 
__ölöe
 
	$BUS_RESUME_CHILD
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

1045 
kobj›_t
 
_m
;

1046 
rc
;

1047 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªsume_chûd
);

1048 
rc
 = ((
bus_ªsume_chûd_t
 *Ë
_m
)(
_dev
, 
_chûd
);

1049  (
rc
);

1050 
	}
}

1053 
kobj›_desc
 
bus_gë_domaö_desc
;

1055 
	tbus_gë_domaö_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_domaö
);

1064 
__ölöe
 
	$BUS_GET_DOMAIN
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, *
_domaö
)

1066 
kobj›_t
 
_m
;

1067 
rc
;

1068 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_domaö
);

1069 
rc
 = ((
bus_gë_domaö_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_domaö
);

1070  (
rc
);

1071 
	}
}

1074 
kobj›_desc
 
bus_gë_˝us_desc
;

1076 
	tbus_gë_˝us_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t˝u_£ts
 
	t_›
,

1077 
	tsize_t
 
	t_£tsize
, 
	t˝u£t_t
 *
	t_˝u£t
);

1089 
__ölöe
 
	$BUS_GET_CPUS
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

1090 
˝u_£ts
 
_›
, 
size_t
 
_£tsize
,

1091 
˝u£t_t
 *
_˝u£t
)

1093 
kobj›_t
 
_m
;

1094 
rc
;

1095 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_˝us
);

1096 
rc
 = ((
bus_gë_˝us_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_›
, 
_£tsize
, 
_˝u£t
);

1097  (
rc
);

1098 
	}
}

	@src/nvidia-drm/device_if.h

23 #i‚de‡
_devi˚_if_h_


24 
	#_devi˚_if_h_


	)

27 
	~<sys/t¶og.h
>

30 
kobj›_desc
 
devi˚_¥obe_desc
;

32 
	tdevi˚_¥obe_t
(
	tdevi˚_t
 
	tdev
);

107 
__ölöe
 
	$DEVICE_PROBE
(
devi˚_t
 
dev
)

109 
kobj›_t
 
_m
;

110 
rc
;

112 
	`TSENTER2
(
	`devi˚_gë_«me
(
dev
));

114 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_¥obe
);

115 
rc
 = ((
devi˚_¥obe_t
 *Ë
_m
)(
dev
);

117 
	`TSEXIT2
(
	`devi˚_gë_«me
(
dev
));

119  (
rc
);

120 
	}
}

123 
kobj›_desc
 
devi˚_idítify_desc
;

125 
	tdevi˚_idítify_t
(
	tdrivî_t
 *
	tdrivî
, 
	tdevi˚_t
 
	t∑ª¡
);

152 
__ölöe
 
	$DEVICE_IDENTIFY
(
drivî_t
 *
drivî
, 
devi˚_t
 
∑ª¡
)

154 
kobj›_t
 
_m
;

155 
	`KOBJOPLOOKUP
(
drivî
->
›s
,
devi˚_idítify
);

156 ((
devi˚_idítify_t
 *Ë
_m
)(
drivî
, 
∑ª¡
);

157 
	}
}

160 
kobj›_desc
 
devi˚_©èch_desc
;

162 
	tdevi˚_©èch_t
(
	tdevi˚_t
 
	tdev
);

187 
__ölöe
 
	$DEVICE_ATTACH
(
devi˚_t
 
dev
)

189 
kobj›_t
 
_m
;

190 
rc
;

192 
	`TSENTER2
(
	`devi˚_gë_«me
(
dev
));

194 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_©èch
);

195 
rc
 = ((
devi˚_©èch_t
 *Ë
_m
)(
dev
);

197 
	`TSEXIT2
(
	`devi˚_gë_«me
(
dev
));

199  (
rc
);

200 
	}
}

203 
kobj›_desc
 
devi˚_dëach_desc
;

205 
	tdevi˚_dëach_t
(
	tdevi˚_t
 
	tdev
);

229 
__ölöe
 
	$DEVICE_DETACH
(
devi˚_t
 
dev
)

231 
kobj›_t
 
_m
;

232 
rc
;

233 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_dëach
);

234 
rc
 = ((
devi˚_dëach_t
 *Ë
_m
)(
dev
);

235  (
rc
);

236 
	}
}

239 
kobj›_desc
 
devi˚_shutdown_desc
;

241 
	tdevi˚_shutdown_t
(
	tdevi˚_t
 
	tdev
);

257 
__ölöe
 
	$DEVICE_SHUTDOWN
(
devi˚_t
 
dev
)

259 
kobj›_t
 
_m
;

260 
rc
;

261 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_shutdown
);

262 
rc
 = ((
devi˚_shutdown_t
 *Ë
_m
)(
dev
);

263  (
rc
);

264 
	}
}

267 
kobj›_desc
 
devi˚_su•íd_desc
;

269 
	tdevi˚_su•íd_t
(
	tdevi˚_t
 
	tdev
);

294 
__ölöe
 
	$DEVICE_SUSPEND
(
devi˚_t
 
dev
)

296 
kobj›_t
 
_m
;

297 
rc
;

298 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_su•íd
);

299 
rc
 = ((
devi˚_su•íd_t
 *Ë
_m
)(
dev
);

300  (
rc
);

301 
	}
}

304 
kobj›_desc
 
devi˚_ªsume_desc
;

306 
	tdevi˚_ªsume_t
(
	tdevi˚_t
 
	tdev
);

326 
__ölöe
 
	$DEVICE_RESUME
(
devi˚_t
 
dev
)

328 
kobj›_t
 
_m
;

329 
rc
;

330 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_ªsume
);

331 
rc
 = ((
devi˚_ªsume_t
 *Ë
_m
)(
dev
);

332  (
rc
);

333 
	}
}

336 
kobj›_desc
 
devi˚_quõs˚_desc
;

338 
	tdevi˚_quõs˚_t
(
	tdevi˚_t
 
	tdev
);

362 
__ölöe
 
	$DEVICE_QUIESCE
(
devi˚_t
 
dev
)

364 
kobj›_t
 
_m
;

365 
rc
;

366 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_quõs˚
);

367 
rc
 = ((
devi˚_quõs˚_t
 *Ë
_m
)(
dev
);

368  (
rc
);

369 
	}
}

372 
kobj›_desc
 
devi˚_ªgi°î_desc
;

374 * 
	tdevi˚_ªgi°î_t
(
	tdevi˚_t
 
	tdev
);

393 
__ölöe
 * 
	$DEVICE_REGISTER
(
devi˚_t
 
dev
)

395 
kobj›_t
 
_m
;

396 * 
rc
;

397 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_ªgi°î
);

398 
rc
 = ((
devi˚_ªgi°î_t
 *Ë
_m
)(
dev
);

399  (
rc
);

400 
	}
}

	@src/nvidia-drm/machine/_align.h

6 
	~<x86/_Æign.h
>

	@src/nvidia-drm/machine/_bus.h

33 #i‚de‡
AMD64_INCLUDE__BUS_H


34 
	#AMD64_INCLUDE__BUS_H


	)

39 
uöt64_t
 
	tbus_addr_t
;

40 
uöt64_t
 
	tbus_size_t
;

45 
uöt64_t
 
	tbus_•a˚_èg_t
;

46 
uöt64_t
 
	tbus_•a˚_h™dÀ_t
;

	@src/nvidia-drm/machine/_inttypes.h

6 
	~<x86/_öây≥s.h
>

	@src/nvidia-drm/machine/_limits.h

6 
	~<x86/_limôs.h
>

	@src/nvidia-drm/machine/_stdint.h

6 
	~<x86/_°döt.h
>

	@src/nvidia-drm/machine/_types.h

6 
	~<x86/_ty≥s.h
>

	@src/nvidia-drm/machine/acpica_machdep.h

6 
	~<x86/a˝iˇ_machdï.h
>

	@src/nvidia-drm/machine/apm_bios.h

6 
	~<x86/≠m_bios.h
>

	@src/nvidia-drm/machine/asm.h

38 #i‚de‡
_MACHINE_ASM_H_


39 
	#_MACHINE_ASM_H_


	)

41 
	~<sys/cdefs.h
>

43 #ifde‡
PIC


44 
	#PIC_PLT
(
x
Ëx@
PLT


	)

45 
	#PIC_GOT
(
x
Ëx@
	`GOTPCREL
(%
rù
)

	)

47 
	#PIC_PLT
(
x
Ë
	)
x

57 
	#CNAME
(
csym
Ë
	)
csym

58 
	#HIDENAME
(
asmsym
Ë.
	)
asmsym

60 
	#_START_ENTRY
 .
ãxt
; .
p2Æign
 4,0x90

	)

62 
	#_ENTRY
(
x
Ë
_START_ENTRY
; \

63 .
globl
 
	`CNAME
(
x
); .
ty≥
 CNAME(x),@
fun˘i⁄
; CNAME(x):

	)

65 #ifde‡
PROF


66 
	#ALTENTRY
(
x
Ë
	`_ENTRY
(x); \

67 
pushq
 %
rbp
; 
movq
 %
r•
,%rbp; \

68 
ˇŒ
 
	`PIC_PLT
(
	`HIDENAME
(
mcou¡
)); \

69 
p›q
 %
rbp
; \

70 
jmp
 9f

	)

71 
	#ENTRY
(
x
Ë
	`_ENTRY
(x); \

72 
pushq
 %
rbp
; 
movq
 %
r•
,%rbp; \

73 
ˇŒ
 
	`PIC_PLT
(
	`HIDENAME
(
mcou¡
)); \

74 
p›q
 %
rbp
; \

75 9:

	)

77 
	#ALTENTRY
(
x
Ë
	`_ENTRY
(x)

	)

78 
	#ENTRY
(
x
Ë
	`_ENTRY
(x)

	)

81 
	#END
(
x
Ë.
size
 x, . - 
	)
x

88 
	#WEAK_REFERENCE
(
sym
, 
Æüs
) \

89 .
wók
 
	`CNAME
(
Æüs
); \

90 .
equ
 
	`CNAME
(
Æüs
),CNAME(
sym
)

	)

92 
	#RCSID
(
x
Ë.
ãxt
; .
asciz
 
	)
x

94 #unde‡
__FBSDID


95 #i‡!
deföed
(
STRIP_FBSDID
)

96 
	#__FBSDID
(
s
Ë.
idít
 
	)
s

98 
	#__FBSDID
(
s
Ë

	)

	@src/nvidia-drm/machine/asmacros.h

42 #i‚de‡
_MACHINE_ASMACROS_H_


43 
	#_MACHINE_ASMACROS_H_


	)

45 
	~<sys/cdefs.h
>

55 
	#CNAME
(
csym
Ë
	)
csym

57 
	#ALIGN_DATA
 .
p2Æign
 3

	)

58 #ifde‡
GPROF


59 
	#ALIGN_TEXT
 .
p2Æign
 4,0x90

	)

61 
	#ALIGN_TEXT
 .
p2Æign
 4,0x90

	)

63 
	#SUPERALIGN_TEXT
 .
p2Æign
 4,0x90

	)

65 
	#GEN_ENTRY
(
«me
Ë
ALIGN_TEXT
; .
globl
 
	`CNAME
(name); \

66 .
ty≥
 
	`CNAME
(
«me
),@
fun˘i⁄
; CNAME“ame):

	)

67 
	#NON_GPROF_ENTRY
(
«me
Ë
	`GEN_ENTRY
“ame)

	)

68 
	#NON_GPROF_RET
 .
byã
 0xc3

	)

70 
	#END
(
«me
Ë.
size
Çame, . - 
	)
«me

72 #ifde‡
GPROF


112 
	#ALTENTRY
(
«me
Ë
	`GEN_ENTRY
“ameË; 
MCOUNT
 ; 
MEXITCOUNT
 ; 
jmp
 9f

	)

113 
	#CROSSJUMP
(
jåue
, 
œbñ
, 
jÁl£
) \

114 
jÁl£
 8f; 
MEXITCOUNT
; 
jmp
 
	`__CONCAT
(
to
,
œbñ
); 8:

	)

115 
	#CROSSJUMPTARGET
(
œbñ
) \

116 
ALIGN_TEXT
; 
	`__CONCAT
(
to
,
œbñ
): ; 
MCOUNT
; 
jmp
 
	)
œbñ

117 
	#ENTRY
(
«me
Ë
	`GEN_ENTRY
“ameË; 9: ; 
MCOUNT


	)

118 
	#FAKE_MCOUNT
(
ˇŒî
Ë
pushq
 cÆÀ∏; 
ˇŒ
 
__mcou¡
 ; 
p›q
 %
rcx


	)

119 
	#MCOUNT
 
ˇŒ
 
__mcou¡


	)

120 
	#MCOUNT_LABEL
(
«me
Ë
	`GEN_ENTRY
“ameË; 
n›
 ; 
ALIGN_TEXT


	)

121 #ifde‡
GUPROF


122 
	#MEXITCOUNT
 
ˇŒ
 .
mexôcou¡


	)

123 
	#ªt
 
MEXITCOUNT
 ; 
NON_GPROF_RET


	)

125 
	#MEXITCOUNT


	)

135 
	#ALTENTRY
(
«me
Ë
	`GEN_ENTRY
“ame)

	)

136 
	#CROSSJUMP
(
jåue
, 
œbñ
, 
jÁl£
Ëjåuê
	)
œbñ

137 
	#CROSSJUMPTARGET
(
œbñ
)

	)

138 
	#ENTRY
(
«me
Ë
	`GEN_ENTRY
“ame)

	)

139 
	#FAKE_MCOUNT
(
ˇŒî
)

	)

140 
	#MCOUNT


	)

141 
	#MCOUNT_LABEL
(
«me
)

	)

142 
	#MEXITCOUNT


	)

149 
	#PUSH_FRAME_POINTER
 \

150 
pushq
 %
rbp
 ; \

151 
movq
 %
r•
, %
rbp
 ;

	)

152 
	#POP_FRAME_POINTER
 \

153 
p›q
 %
rbp


	)

155 #ifde‡
LOCORE


159 
	#PCPU
(
membî
Ë%
gs
:
PC_
 ## 
	)
membî

160 
	#PCPU_ADDR
(
membî
, 
ªg
) \

161 
movq
 %
gs
:
PC_PRVSPACE
, 
ªg
 ; \

162 
addq
 
$PC_
 ## 
membî
, 
ªg


	)

167 
	#IDTVEC
(
«me
Ë
ALIGN_TEXT
; .
globl
 
	`__CONCAT
(
X
,name); \

168 .
ty≥
 
	`__CONCAT
(
X
,
«me
),@
fun˘i⁄
; __CONCAT(X,«me):

	)

170 .
ma¸o
 
SAVE_SEGS


171 
	gmovw
 %
	gfs
,
TF_FS
(%
r•
)

172 
	gmovw
 %
	ggs
,
TF_GS
(%
r•
)

173 
	gmovw
 %
	ges
,
TF_ES
(%
r•
)

174 
	gmovw
 %
	gds
,
TF_DS
(%
r•
)

175 .
	gídm


177 .
ma¸o
 
MOVE_STACKS
 
	gqw


178 .
	gL
.
	goff£t
=0

179 .
ª±
 \
qw


180 
movq
 .
L
.
off£t
(%
r•
),%
rdx


181 
	gmovq
 %
	grdx
,.
	gL
.
off£t
(%
øx
)

182 .
	gL
.
	goff£t
=.
L
.
off£t
+8

183 .
ídr


184 .
ídm


186 .
ma¸o
 
PTI_UUENTRY
 
has_îr


187 
movq
 
PCPU
(
KCR3
),%
øx


188 
	gmovq
 %
	gøx
,%
¸3


189 
movq
 
PCPU
(
RSP0
),%
øx


190 
subq
 
	g$PTI_SIZE
 - 8 * (1 - \
	ghas_îr
),%
øx


191 
MOVE_STACKS
 ((
PTI_SIZE
 / 8Ë- 1 + \
has_îr
)

192 
	gmovq
 %
	gøx
,%
r•


193 
	gp›q
 %
rdx


194 
	gp›q
 %
	gøx


195 .
	gídm


197 .
ma¸o
 
PTI_UENTRY
 
has_îr


198 
sw≠gs


199 
cmpq
 
	g$
~0,
	$PCPU
(
UCR3
)

200 
je
 1f

201 
pushq
 %
øx


202 
pushq
 %
rdx


203 
PTI_UUENTRY
 \
has_îr


205 .
ídm


207 .
ma¸o
 
PTI_ENTRY
 
«me
, 
c⁄t
, 
has_îr
=0

208 
ALIGN_TEXT


209 .
globl
 
X
\
«me
\()
_±i


210 .
ty≥
 
X
\
«me
\()
_±i
,@
fun˘i⁄


211 
X
\
«me
\()
_±i
:

213 
ã°b
 
$SEL_RPL_MASK
,
PTI_CS
-(2+1-\
has_îr
)*8(%
r•
)

214 
jz
 \
c⁄t


215 
PTI_UENTRY
 \
has_îr


216 
sw≠gs


217 
jmp
 \
c⁄t


218 .
ídm


220 .
ma¸o
 
PTI_INTRENTRY
 
vec_«me


221 
SUPERALIGN_TEXT


222 .
globl
 
X
\
vec_«me
\()
_±i


223 .
ty≥
 
X
\
vec_«me
\()
_±i
,@
fun˘i⁄


224 
X
\
vec_«me
\()
_±i
:

225 
ã°b
 
$SEL_RPL_MASK
,
PTI_CS
-3*8(%
r•
)

226 
jz
 .
L
\
vec_«me
\()
_u


227 
PTI_UENTRY
 
has_îr
=0

228 
jmp
 .
L
\
vec_«me
\()
_u


229 .
ídm


231 .
ma¸o
 
INTR_PUSH_FRAME
 
vec_«me


232 
SUPERALIGN_TEXT


233 .
globl
 
X
\
vec_«me


234 .
ty≥
 
X
\
vec_«me
,@
fun˘i⁄


235 
X
\
vec_«me
:

236 
ã°b
 
$SEL_RPL_MASK
,
PTI_CS
-3*8(%
r•
)

237 
jz
 .
L
\
vec_«me
\()
_u


238 
sw≠gs


239 .
L
\
vec_«me
\()
_u
:

240 
subq
 
$TF_RIP
,%
r•


241 
movq
 %
rdi
,
	`TF_RDI
(%
r•
)

242 
movq
 %
rsi
,
	`TF_RSI
(%
r•
)

243 
movq
 %
rdx
,
	`TF_RDX
(%
r•
)

244 
movq
 %
rcx
,
	`TF_RCX
(%
r•
)

245 
movq
 %
r8
,
	`TF_R8
(%
r•
)

246 
movq
 %
r9
,
	`TF_R9
(%
r•
)

247 
movq
 %
øx
,
	`TF_RAX
(%
r•
)

248 
movq
 %
rbx
,
	`TF_RBX
(%
r•
)

249 
movq
 %
rbp
,
	`TF_RBP
(%
r•
)

250 
movq
 %
r10
,
	`TF_R10
(%
r•
)

251 
movq
 %
r11
,
	`TF_R11
(%
r•
)

252 
movq
 %
r12
,
	`TF_R12
(%
r•
)

253 
movq
 %
r13
,
	`TF_R13
(%
r•
)

254 
movq
 %
r14
,
	`TF_R14
(%
r•
)

255 
movq
 %
r15
,
	`TF_R15
(%
r•
)

256 
SAVE_SEGS


257 
movl
 
$TF_HASSEGS
,
	`TF_FLAGS
(%
r•
)

258 
pushfq


259 
™dq
 
$
~(
PSL_D
|
PSL_AC
),(%
r•
)

260 
p›fq


261 
ã°b
 
$SEL_RPL_MASK
,
	`TF_CS
(%
r•
)

262 
jz
 1f

263 
movq
 
	`PCPU
(
CURPCB
),%
r8


264 
™dl
 
$
~
PCB_FULL_IRET
,
	`PCB_FLAGS
(%
r8
)

265 
ˇŒ
 
h™dÀ_ibrs_íåy


267 .
ídm


269 .
ma¸o
 
INTR_HANDLER
 
vec_«me


270 .
ãxt


271 
PTI_INTRENTRY
 \
vec_«me


272 
INTR_PUSH_FRAME
 \
vec_«me


273 .
ídm


275 .
ma¸o
 
RESTORE_REGS


276 
movq
 
	`TF_RDI
(%
r•
),%
rdi


277 
movq
 
	`TF_RSI
(%
r•
),%
rsi


278 
movq
 
	`TF_RDX
(%
r•
),%
rdx


279 
movq
 
	`TF_RCX
(%
r•
),%
rcx


280 
movq
 
	`TF_R8
(%
r•
),%
r8


281 
movq
 
	`TF_R9
(%
r•
),%
r9


282 
movq
 
	`TF_RAX
(%
r•
),%
øx


283 
movq
 
	`TF_RBX
(%
r•
),%
rbx


284 
movq
 
	`TF_RBP
(%
r•
),%
rbp


285 
movq
 
	`TF_R10
(%
r•
),%
r10


286 
movq
 
	`TF_R11
(%
r•
),%
r11


287 
movq
 
	`TF_R12
(%
r•
),%
r12


288 
movq
 
	`TF_R13
(%
r•
),%
r13


289 
movq
 
	`TF_R14
(%
r•
),%
r14


290 
movq
 
	`TF_R15
(%
r•
),%
r15


291 .
ídm


295 #ifde‡
__STDC__


296 
	#ELFNOTE
(
«me
, 
ty≥
, 
des˘y≥
, 
descd©a
...) \

297 .
push£˘i⁄
 .
nŸe
.
«me
 ; \

298 .
Æign
 4 ; \

301 .
ty≥
 ; \

302 1:.
asciz
 #name ; \

303 2:.
Æign
 4 ; \

304 3:
des˘y≥
 
descd©a
 ; \

305 4:.
Æign
 4 ; \

306 .
p›£˘i⁄


	)

308 
	#ELFNOTE
(
«me
, 
ty≥
, 
des˘y≥
, 
descd©a
) \

309 .
push£˘i⁄
 .
nŸe
.
«me
 ; \

310 .
Æign
 4 ; \

313 .
ty≥
 ; \

314 1:.
asciz
 "name" ; \

315 2:.
Æign
 4 ; \

316 3:
des˘y≥
 
descd©a
 ; \

317 4:.
Æign
 4 ; \

318 .
p›£˘i⁄


	)

	@src/nvidia-drm/machine/atomic.h

30 #i‚de‡
_MACHINE_ATOMIC_H_


31 
	#_MACHINE_ATOMIC_H_


	)

33 #i‚de‡
_SYS_CDEFS_H_


34 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


56 
	#mb
(Ë
__asm
 
	`__vﬁ©ûe
("m„n˚;" : : : "mem‹y")

	)

57 
	#wmb
(Ë
__asm
 
	`__vﬁ©ûe
("s„n˚;" : : : "mem‹y")

	)

58 
	#rmb
(Ë
__asm
 
	`__vﬁ©ûe
("l„n˚;" : : : "mem‹y")

	)

60 
	~<sys/©omic_comm⁄.h
>

99 #i‡!
deföed
(
__GNUCLIKE_ASM
)

100 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

101 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
); \

102 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

104 
©omic_cmp£t_ch¨
(vﬁ©ûê
u_ch¨
 *
d°
, u_ch¨ 
ex≥˘
, u_ch¨ 
§c
);

105 
©omic_cmp£t_sh‹t
(vﬁ©ûê
u_sh‹t
 *
d°
, u_sh‹à
ex≥˘
, u_sh‹à
§c
);

106 
©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
ex≥˘
, u_öà
§c
);

107 
©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
ex≥˘
, u_l⁄g 
§c
);

108 
©omic_fcmp£t_ch¨
(vﬁ©ûê
u_ch¨
 *
d°
, u_ch¨ *
ex≥˘
, u_ch¨ 
§c
);

109 
©omic_fcmp£t_sh‹t
(vﬁ©ûê
u_sh‹t
 *
d°
, u_sh‹à*
ex≥˘
,

110 
u_sh‹t
 
§c
);

111 
©omic_fcmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà*
ex≥˘
, u_öà
§c
);

112 
©omic_fcmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g *
ex≥˘
, u_l⁄g 
§c
);

113 
u_öt
 
©omic_„tchadd_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

114 
u_l⁄g
 
©omic_„tchadd_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

115 
©omic_ã°™d£t_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
);

116 
©omic_ã°™d£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
);

117 
©omic_ã°™d˛ór_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
);

118 
©omic_ã°™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
);

119 
©omic_thªad_„n˚_acq
();

120 
©omic_thªad_„n˚_acq_ªl
();

121 
©omic_thªad_„n˚_ªl
();

122 
©omic_thªad_„n˚_£q_c°
();

124 
	#ATOMIC_LOAD
(
TYPE
) \

125 
u_
##
TYPE
 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûêu_##TYPE *
p
)

	)

126 
	#ATOMIC_STORE
(
TYPE
) \

127 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

135 #i‡
deföed
(
SMP
Ë|| !deföed(
_KERNEL
Ë|| deföed(
KLD_MODULE
)

136 
	#MPLOCKED
 "lock ; "

	)

138 
	#MPLOCKED


	)

146 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

147 
__ölöe
 \

148 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

150 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

151 : "+m" (*
p
) \

152 : 
	`CONS
 (
V
) \

156 
__ölöe
 \

157 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

159 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

160 : "+m" (*
p
) \

161 : 
	`CONS
 (
V
) \

164 
__hack


	)

181 
	#ATOMIC_CMPSET
(
TYPE
) \

182 
__ölöe
 \

183 
©omic_cmp£t_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
d°
, u_##TYPE 
ex≥˘
, u_##TYPE 
§c
) \

185 
u_ch¨
 
ªs
; \

187 
__asm
 
	`__vﬁ©ûe
( \

188 " " 
MPLOCKED
 " " \

192 : "=q" (
ªs
), \

193 "+m" (*
d°
), \

194 "+a" (
ex≥˘
) \

195 : "r" (
§c
) \

197  (
ªs
); \

200 
__ölöe
 \

201 
©omic_fcmp£t_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
d°
, u_##TYPE *
ex≥˘
, u_##TYPE 
§c
) \

203 
u_ch¨
 
ªs
; \

205 
__asm
 
	`__vﬁ©ûe
( \

206 " " 
MPLOCKED
 " " \

210 : "=q" (
ªs
), \

211 "+m" (*
d°
), \

212 "+a" (*
ex≥˘
) \

213 : "r" (
§c
) \

215  (
ªs
); \

216 }

	)

218 
ATOMIC_CMPSET
();

219 
ATOMIC_CMPSET
();

220 
ATOMIC_CMPSET
();

221 
ATOMIC_CMPSET
();

227 
__ölöe
 
u_öt


228 
	$©omic_„tchadd_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

231 
__asm
 
	`__vﬁ©ûe
(

232 " " 
MPLOCKED
 " "

235 : "+r" (
v
),

236 "+m" (*
p
)

238  (
v
);

239 
	}
}

245 
__ölöe
 
u_l⁄g


246 
	$©omic_„tchadd_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

249 
__asm
 
	`__vﬁ©ûe
(

250 " " 
MPLOCKED
 " "

253 : "+r" (
v
),

254 "+m" (*
p
)

256  (
v
);

257 
	}
}

259 
__ölöe
 

260 
	$©omic_ã°™d£t_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

262 
u_ch¨
 
ªs
;

264 
__asm
 
	`__vﬁ©ûe
(

265 " " 
MPLOCKED
 " "

269 : "=q" (
ªs
),

270 "+m" (*
p
)

271 : "Ir" (
v
 & 0x1f)

273  (
ªs
);

274 
	}
}

276 
__ölöe
 

277 
	$©omic_ã°™d£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
)

279 
u_ch¨
 
ªs
;

281 
__asm
 
	`__vﬁ©ûe
(

282 " " 
MPLOCKED
 " "

286 : "=q" (
ªs
),

287 "+m" (*
p
)

288 : "Jr" ((
u_l⁄g
)(
v
 & 0x3f))

290  (
ªs
);

291 
	}
}

293 
__ölöe
 

294 
	$©omic_ã°™d˛ór_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

296 
u_ch¨
 
ªs
;

298 
__asm
 
	`__vﬁ©ûe
(

299 " " 
MPLOCKED
 " "

303 : "=q" (
ªs
),

304 "+m" (*
p
)

305 : "Ir" (
v
 & 0x1f)

307  (
ªs
);

308 
	}
}

310 
__ölöe
 

311 
	$©omic_ã°™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
)

313 
u_ch¨
 
ªs
;

315 
__asm
 
	`__vﬁ©ûe
(

316 " " 
MPLOCKED
 " "

320 : "=q" (
ªs
),

321 "+m" (*
p
)

322 : "Jr" ((
u_l⁄g
)(
v
 & 0x3f))

324  (
ªs
);

325 
	}
}

346 #i‡
deföed
(
_KERNEL
)

355 
	#OFFSETOF_MONITORBUF
 0x100

	)

357 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

358 
__ölöe
 

359 
	$__°‹ñﬂd_b¨rõr
()

362 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,%%gs:%0"

363 : "+m" (*(
u_öt
 *)
OFFSETOF_MONITORBUF
) : : "memory", "cc");

364 
	}
}

366 
__ölöe
 

367 
	$__°‹ñﬂd_b¨rõr
()

370 
	`__compûî_memb¨
();

371 
	}
}

374 
__ölöe
 

375 
	$__°‹ñﬂd_b¨rõr
()

378 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,-8(%%rsp)" : : : "memory", "cc");

379 
	}
}

382 
	#ATOMIC_LOAD
(
TYPE
) \

383 
__ölöe
 
u_
##
TYPE
 \

384 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

386 
u_
##
TYPE
 
ªs
; \

388 
ªs
 = *
p
; \

389 
	`__compûî_memb¨
(); \

390  (
ªs
); \

392 
__hack


	)

394 
	#ATOMIC_STORE
(
TYPE
) \

395 
__ölöe
 \

396 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
) \

399 
	`__compûî_memb¨
(); \

400 *
p
 = 
v
; \

402 
__hack


	)

404 
__ölöe
 

405 
	$©omic_thªad_„n˚_acq
()

408 
	`__compûî_memb¨
();

409 
	}
}

411 
__ölöe
 

412 
	$©omic_thªad_„n˚_ªl
()

415 
	`__compûî_memb¨
();

416 
	}
}

418 
__ölöe
 

419 
	$©omic_thªad_„n˚_acq_ªl
()

422 
	`__compûî_memb¨
();

423 
	}
}

425 
__ölöe
 

426 
	$©omic_thªad_„n˚_£q_c°
()

429 
	`__°‹ñﬂd_b¨rõr
();

430 
	}
}

434 
ATOMIC_ASM
(
£t
, , "‹b %b1,%0", "iq", 
v
);

435 
ATOMIC_ASM
(
˛ór
, , "™db %b1,%0", "iq", ~
v
);

436 
ATOMIC_ASM
(
add
, , "addb %b1,%0", "iq", 
v
);

437 
ATOMIC_ASM
(
subåa˘
, , "subb %b1,%0", "iq", 
v
);

439 
ATOMIC_ASM
(
£t
, , "‹w %w1,%0", "ú", 
v
);

440 
ATOMIC_ASM
(
˛ór
, , "™dw %w1,%0", "ú", ~
v
);

441 
ATOMIC_ASM
(
add
, , "addw %w1,%0", "ú", 
v
);

442 
ATOMIC_ASM
(
subåa˘
, , "subw %w1,%0", "ú", 
v
);

444 
ATOMIC_ASM
(
£t
, , "‹»%1,%0", "ú", 
v
);

445 
ATOMIC_ASM
(
˛ór
, , "™d»%1,%0", "ú", ~
v
);

446 
ATOMIC_ASM
(
add
, , "add»%1,%0", "ú", 
v
);

447 
ATOMIC_ASM
(
subåa˘
, , "sub»%1,%0", "ú", 
v
);

449 
ATOMIC_ASM
(
£t
, , "‹q %1,%0", "î", 
v
);

450 
ATOMIC_ASM
(
˛ór
, , "™dq %1,%0", "î", ~
v
);

451 
ATOMIC_ASM
(
add
, , "addq %1,%0", "î", 
v
);

452 
ATOMIC_ASM
(
subåa˘
, , "subq %1,%0", "î", 
v
);

454 
	#ATOMIC_LOADSTORE
(
TYPE
) \

455 
	`ATOMIC_LOAD
(
TYPE
); \

456 
	`ATOMIC_STORE
(
TYPE
)

	)

458 
ATOMIC_LOADSTORE
();

459 
ATOMIC_LOADSTORE
();

460 
ATOMIC_LOADSTORE
();

461 
ATOMIC_LOADSTORE
();

463 #unde‡
ATOMIC_ASM


464 #unde‡
ATOMIC_LOAD


465 #unde‡
ATOMIC_STORE


466 #unde‡
ATOMIC_LOADSTORE


467 #i‚de‡
WANT_FUNCTIONS


470 #ifde‡
__GNUCLIKE_ASM


472 
__ölöe
 
u_öt


473 
	$©omic_sw≠_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

476 
__asm
 
	`__vﬁ©ûe
(

479 : "+r" (
v
),

480 "+m" (*
p
));

481  (
v
);

482 
	}
}

484 
__ölöe
 
u_l⁄g


485 
	$©omic_sw≠_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

488 
__asm
 
	`__vﬁ©ûe
(

491 : "+r" (
v
),

492 "+m" (*
p
));

493  (
v
);

494 
	}
}

498 
u_öt
 
©omic_sw≠_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

499 
u_l⁄g
 
©omic_sw≠_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

503 
	#©omic_£t_acq_ch¨
 
©omic_£t_b¨r_ch¨


	)

504 
	#©omic_£t_ªl_ch¨
 
©omic_£t_b¨r_ch¨


	)

505 
	#©omic_˛ór_acq_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

506 
	#©omic_˛ór_ªl_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

507 
	#©omic_add_acq_ch¨
 
©omic_add_b¨r_ch¨


	)

508 
	#©omic_add_ªl_ch¨
 
©omic_add_b¨r_ch¨


	)

509 
	#©omic_subåa˘_acq_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

510 
	#©omic_subåa˘_ªl_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

511 
	#©omic_cmp£t_acq_ch¨
 
©omic_cmp£t_ch¨


	)

512 
	#©omic_cmp£t_ªl_ch¨
 
©omic_cmp£t_ch¨


	)

513 
	#©omic_fcmp£t_acq_ch¨
 
©omic_fcmp£t_ch¨


	)

514 
	#©omic_fcmp£t_ªl_ch¨
 
©omic_fcmp£t_ch¨


	)

516 
	#©omic_£t_acq_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

517 
	#©omic_£t_ªl_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

518 
	#©omic_˛ór_acq_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

519 
	#©omic_˛ór_ªl_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

520 
	#©omic_add_acq_sh‹t
 
©omic_add_b¨r_sh‹t


	)

521 
	#©omic_add_ªl_sh‹t
 
©omic_add_b¨r_sh‹t


	)

522 
	#©omic_subåa˘_acq_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

523 
	#©omic_subåa˘_ªl_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

524 
	#©omic_cmp£t_acq_sh‹t
 
©omic_cmp£t_sh‹t


	)

525 
	#©omic_cmp£t_ªl_sh‹t
 
©omic_cmp£t_sh‹t


	)

526 
	#©omic_fcmp£t_acq_sh‹t
 
©omic_fcmp£t_sh‹t


	)

527 
	#©omic_fcmp£t_ªl_sh‹t
 
©omic_fcmp£t_sh‹t


	)

529 
	#©omic_£t_acq_öt
 
©omic_£t_b¨r_öt


	)

530 
	#©omic_£t_ªl_öt
 
©omic_£t_b¨r_öt


	)

531 
	#©omic_˛ór_acq_öt
 
©omic_˛ór_b¨r_öt


	)

532 
	#©omic_˛ór_ªl_öt
 
©omic_˛ór_b¨r_öt


	)

533 
	#©omic_add_acq_öt
 
©omic_add_b¨r_öt


	)

534 
	#©omic_add_ªl_öt
 
©omic_add_b¨r_öt


	)

535 
	#©omic_subåa˘_acq_öt
 
©omic_subåa˘_b¨r_öt


	)

536 
	#©omic_subåa˘_ªl_öt
 
©omic_subåa˘_b¨r_öt


	)

537 
	#©omic_cmp£t_acq_öt
 
©omic_cmp£t_öt


	)

538 
	#©omic_cmp£t_ªl_öt
 
©omic_cmp£t_öt


	)

539 
	#©omic_fcmp£t_acq_öt
 
©omic_fcmp£t_öt


	)

540 
	#©omic_fcmp£t_ªl_öt
 
©omic_fcmp£t_öt


	)

542 
	#©omic_£t_acq_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

543 
	#©omic_£t_ªl_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

544 
	#©omic_˛ór_acq_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

545 
	#©omic_˛ór_ªl_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

546 
	#©omic_add_acq_l⁄g
 
©omic_add_b¨r_l⁄g


	)

547 
	#©omic_add_ªl_l⁄g
 
©omic_add_b¨r_l⁄g


	)

548 
	#©omic_subåa˘_acq_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

549 
	#©omic_subåa˘_ªl_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

550 
	#©omic_cmp£t_acq_l⁄g
 
©omic_cmp£t_l⁄g


	)

551 
	#©omic_cmp£t_ªl_l⁄g
 
©omic_cmp£t_l⁄g


	)

552 
	#©omic_fcmp£t_acq_l⁄g
 
©omic_fcmp£t_l⁄g


	)

553 
	#©omic_fcmp£t_ªl_l⁄g
 
©omic_fcmp£t_l⁄g


	)

555 
	#©omic_ªad™d˛ór_öt
(
p
Ë
	`©omic_sw≠_öt
’, 0)

	)

556 
	#©omic_ªad™d˛ór_l⁄g
(
p
Ë
	`©omic_sw≠_l⁄g
’, 0)

	)

559 
	#©omic_£t_8
 
©omic_£t_ch¨


	)

560 
	#©omic_£t_acq_8
 
©omic_£t_acq_ch¨


	)

561 
	#©omic_£t_ªl_8
 
©omic_£t_ªl_ch¨


	)

562 
	#©omic_˛ór_8
 
©omic_˛ór_ch¨


	)

563 
	#©omic_˛ór_acq_8
 
©omic_˛ór_acq_ch¨


	)

564 
	#©omic_˛ór_ªl_8
 
©omic_˛ór_ªl_ch¨


	)

565 
	#©omic_add_8
 
©omic_add_ch¨


	)

566 
	#©omic_add_acq_8
 
©omic_add_acq_ch¨


	)

567 
	#©omic_add_ªl_8
 
©omic_add_ªl_ch¨


	)

568 
	#©omic_subåa˘_8
 
©omic_subåa˘_ch¨


	)

569 
	#©omic_subåa˘_acq_8
 
©omic_subåa˘_acq_ch¨


	)

570 
	#©omic_subåa˘_ªl_8
 
©omic_subåa˘_ªl_ch¨


	)

571 
	#©omic_lﬂd_acq_8
 
©omic_lﬂd_acq_ch¨


	)

572 
	#©omic_°‹e_ªl_8
 
©omic_°‹e_ªl_ch¨


	)

573 
	#©omic_cmp£t_8
 
©omic_cmp£t_ch¨


	)

574 
	#©omic_cmp£t_acq_8
 
©omic_cmp£t_acq_ch¨


	)

575 
	#©omic_cmp£t_ªl_8
 
©omic_cmp£t_ªl_ch¨


	)

576 
	#©omic_fcmp£t_8
 
©omic_fcmp£t_ch¨


	)

577 
	#©omic_fcmp£t_acq_8
 
©omic_fcmp£t_acq_ch¨


	)

578 
	#©omic_fcmp£t_ªl_8
 
©omic_fcmp£t_ªl_ch¨


	)

581 
	#©omic_£t_16
 
©omic_£t_sh‹t


	)

582 
	#©omic_£t_acq_16
 
©omic_£t_acq_sh‹t


	)

583 
	#©omic_£t_ªl_16
 
©omic_£t_ªl_sh‹t


	)

584 
	#©omic_˛ór_16
 
©omic_˛ór_sh‹t


	)

585 
	#©omic_˛ór_acq_16
 
©omic_˛ór_acq_sh‹t


	)

586 
	#©omic_˛ór_ªl_16
 
©omic_˛ór_ªl_sh‹t


	)

587 
	#©omic_add_16
 
©omic_add_sh‹t


	)

588 
	#©omic_add_acq_16
 
©omic_add_acq_sh‹t


	)

589 
	#©omic_add_ªl_16
 
©omic_add_ªl_sh‹t


	)

590 
	#©omic_subåa˘_16
 
©omic_subåa˘_sh‹t


	)

591 
	#©omic_subåa˘_acq_16
 
©omic_subåa˘_acq_sh‹t


	)

592 
	#©omic_subåa˘_ªl_16
 
©omic_subåa˘_ªl_sh‹t


	)

593 
	#©omic_lﬂd_acq_16
 
©omic_lﬂd_acq_sh‹t


	)

594 
	#©omic_°‹e_ªl_16
 
©omic_°‹e_ªl_sh‹t


	)

595 
	#©omic_cmp£t_16
 
©omic_cmp£t_sh‹t


	)

596 
	#©omic_cmp£t_acq_16
 
©omic_cmp£t_acq_sh‹t


	)

597 
	#©omic_cmp£t_ªl_16
 
©omic_cmp£t_ªl_sh‹t


	)

598 
	#©omic_fcmp£t_16
 
©omic_fcmp£t_sh‹t


	)

599 
	#©omic_fcmp£t_acq_16
 
©omic_fcmp£t_acq_sh‹t


	)

600 
	#©omic_fcmp£t_ªl_16
 
©omic_fcmp£t_ªl_sh‹t


	)

603 
	#©omic_£t_32
 
©omic_£t_öt


	)

604 
	#©omic_£t_acq_32
 
©omic_£t_acq_öt


	)

605 
	#©omic_£t_ªl_32
 
©omic_£t_ªl_öt


	)

606 
	#©omic_˛ór_32
 
©omic_˛ór_öt


	)

607 
	#©omic_˛ór_acq_32
 
©omic_˛ór_acq_öt


	)

608 
	#©omic_˛ór_ªl_32
 
©omic_˛ór_ªl_öt


	)

609 
	#©omic_add_32
 
©omic_add_öt


	)

610 
	#©omic_add_acq_32
 
©omic_add_acq_öt


	)

611 
	#©omic_add_ªl_32
 
©omic_add_ªl_öt


	)

612 
	#©omic_subåa˘_32
 
©omic_subåa˘_öt


	)

613 
	#©omic_subåa˘_acq_32
 
©omic_subåa˘_acq_öt


	)

614 
	#©omic_subåa˘_ªl_32
 
©omic_subåa˘_ªl_öt


	)

615 
	#©omic_lﬂd_acq_32
 
©omic_lﬂd_acq_öt


	)

616 
	#©omic_°‹e_ªl_32
 
©omic_°‹e_ªl_öt


	)

617 
	#©omic_cmp£t_32
 
©omic_cmp£t_öt


	)

618 
	#©omic_cmp£t_acq_32
 
©omic_cmp£t_acq_öt


	)

619 
	#©omic_cmp£t_ªl_32
 
©omic_cmp£t_ªl_öt


	)

620 
	#©omic_fcmp£t_32
 
©omic_fcmp£t_öt


	)

621 
	#©omic_fcmp£t_acq_32
 
©omic_fcmp£t_acq_öt


	)

622 
	#©omic_fcmp£t_ªl_32
 
©omic_fcmp£t_ªl_öt


	)

623 
	#©omic_sw≠_32
 
©omic_sw≠_öt


	)

624 
	#©omic_ªad™d˛ór_32
 
©omic_ªad™d˛ór_öt


	)

625 
	#©omic_„tchadd_32
 
©omic_„tchadd_öt


	)

626 
	#©omic_ã°™d£t_32
 
©omic_ã°™d£t_öt


	)

627 
	#©omic_ã°™d˛ór_32
 
©omic_ã°™d˛ór_öt


	)

630 
	#©omic_£t_64
 
©omic_£t_l⁄g


	)

631 
	#©omic_£t_acq_64
 
©omic_£t_acq_l⁄g


	)

632 
	#©omic_£t_ªl_64
 
©omic_£t_ªl_l⁄g


	)

633 
	#©omic_˛ór_64
 
©omic_˛ór_l⁄g


	)

634 
	#©omic_˛ór_acq_64
 
©omic_˛ór_acq_l⁄g


	)

635 
	#©omic_˛ór_ªl_64
 
©omic_˛ór_ªl_l⁄g


	)

636 
	#©omic_add_64
 
©omic_add_l⁄g


	)

637 
	#©omic_add_acq_64
 
©omic_add_acq_l⁄g


	)

638 
	#©omic_add_ªl_64
 
©omic_add_ªl_l⁄g


	)

639 
	#©omic_subåa˘_64
 
©omic_subåa˘_l⁄g


	)

640 
	#©omic_subåa˘_acq_64
 
©omic_subåa˘_acq_l⁄g


	)

641 
	#©omic_subåa˘_ªl_64
 
©omic_subåa˘_ªl_l⁄g


	)

642 
	#©omic_lﬂd_acq_64
 
©omic_lﬂd_acq_l⁄g


	)

643 
	#©omic_°‹e_ªl_64
 
©omic_°‹e_ªl_l⁄g


	)

644 
	#©omic_cmp£t_64
 
©omic_cmp£t_l⁄g


	)

645 
	#©omic_cmp£t_acq_64
 
©omic_cmp£t_acq_l⁄g


	)

646 
	#©omic_cmp£t_ªl_64
 
©omic_cmp£t_ªl_l⁄g


	)

647 
	#©omic_fcmp£t_64
 
©omic_fcmp£t_l⁄g


	)

648 
	#©omic_fcmp£t_acq_64
 
©omic_fcmp£t_acq_l⁄g


	)

649 
	#©omic_fcmp£t_ªl_64
 
©omic_fcmp£t_ªl_l⁄g


	)

650 
	#©omic_sw≠_64
 
©omic_sw≠_l⁄g


	)

651 
	#©omic_ªad™d˛ór_64
 
©omic_ªad™d˛ór_l⁄g


	)

652 
	#©omic_„tchadd_64
 
©omic_„tchadd_l⁄g


	)

653 
	#©omic_ã°™d£t_64
 
©omic_ã°™d£t_l⁄g


	)

654 
	#©omic_ã°™d˛ór_64
 
©omic_ã°™d˛ór_l⁄g


	)

657 
	#©omic_£t_±r
 
©omic_£t_l⁄g


	)

658 
	#©omic_£t_acq_±r
 
©omic_£t_acq_l⁄g


	)

659 
	#©omic_£t_ªl_±r
 
©omic_£t_ªl_l⁄g


	)

660 
	#©omic_˛ór_±r
 
©omic_˛ór_l⁄g


	)

661 
	#©omic_˛ór_acq_±r
 
©omic_˛ór_acq_l⁄g


	)

662 
	#©omic_˛ór_ªl_±r
 
©omic_˛ór_ªl_l⁄g


	)

663 
	#©omic_add_±r
 
©omic_add_l⁄g


	)

664 
	#©omic_add_acq_±r
 
©omic_add_acq_l⁄g


	)

665 
	#©omic_add_ªl_±r
 
©omic_add_ªl_l⁄g


	)

666 
	#©omic_subåa˘_±r
 
©omic_subåa˘_l⁄g


	)

667 
	#©omic_subåa˘_acq_±r
 
©omic_subåa˘_acq_l⁄g


	)

668 
	#©omic_subåa˘_ªl_±r
 
©omic_subåa˘_ªl_l⁄g


	)

669 
	#©omic_lﬂd_acq_±r
 
©omic_lﬂd_acq_l⁄g


	)

670 
	#©omic_°‹e_ªl_±r
 
©omic_°‹e_ªl_l⁄g


	)

671 
	#©omic_cmp£t_±r
 
©omic_cmp£t_l⁄g


	)

672 
	#©omic_cmp£t_acq_±r
 
©omic_cmp£t_acq_l⁄g


	)

673 
	#©omic_cmp£t_ªl_±r
 
©omic_cmp£t_ªl_l⁄g


	)

674 
	#©omic_fcmp£t_±r
 
©omic_fcmp£t_l⁄g


	)

675 
	#©omic_fcmp£t_acq_±r
 
©omic_fcmp£t_acq_l⁄g


	)

676 
	#©omic_fcmp£t_ªl_±r
 
©omic_fcmp£t_ªl_l⁄g


	)

677 
	#©omic_sw≠_±r
 
©omic_sw≠_l⁄g


	)

678 
	#©omic_ªad™d˛ór_±r
 
©omic_ªad™d˛ór_l⁄g


	)

	@src/nvidia-drm/machine/bus.h

6 
	~<x86/bus.h
>

	@src/nvidia-drm/machine/bus_dma.h

31 #i‚de‡
_AMD64_BUS_DMA_H_


32 
	#_AMD64_BUS_DMA_H_


	)

34 
	~<x86/bus_dma.h
>

	@src/nvidia-drm/machine/clock.h

9 #i‚de‡
_MACHINE_CLOCK_H_


10 
	#_MACHINE_CLOCK_H_


	)

12 #ifde‡
_KERNEL


17 
˛köå_≥ndög
;

18 
u_öt
 
i8254_‰eq
;

19 
i8254_max_cou¡
;

20 
uöt64_t
 
tsc_‰eq
;

21 
tsc_is_öv¨ü¡
;

22 
tsc_≥rf_°©
;

23 #ifde‡
SMP


24 
smp_tsc
;

27 
i8254_öô
();

28 
i8254_dñay
();

29 
˛ock_öô
();

35 
°¨åt˛ock
();

36 
öô_TSC
();

37 
ªsume_TSC
();

39 
	#HAS_TIMER_SPKR
 1

	)

40 
timî_•kr_acquúe
();

41 
timî_•kr_ªÀa£
();

42 
timî_•kr_£t‰eq
(
‰eq
);

	@src/nvidia-drm/machine/counter.h

31 #i‚de‡
__MACHINE_COUNTER_H__


32 
	#__MACHINE_COUNTER_H__


	)

34 
	~<sys/p˝u.h
>

36 
p˝u
 
__p˝u
[];

38 
	#EARLY_COUNTER
 &
__p˝u
[0].
pc_óæy_dummy_cou¡î


	)

40 
	#cou¡î_íãr
(Ëdÿ{} 0)

	)

41 
	#cou¡î_exô
(Ëdÿ{} 0)

	)

43 #ifde‡
IN_SUBR_COUNTER_C


44 
ölöe
 
uöt64_t


45 
	$cou¡î_u64_ªad_⁄e
(
uöt64_t
 *
p
, 
˝u
)

48  (*(
uöt64_t
 *)((*)
p
 + 
UMA_PCPU_ALLOC_SIZE
 * 
˝u
));

49 
	}
}

51 
ölöe
 
uöt64_t


52 
	$cou¡î_u64_„tch_ölöe
(
uöt64_t
 *
p
)

54 
uöt64_t
 
r
;

55 
i
;

57 
r
 = 0;

58 
	`CPU_FOREACH
(
i
)

59 
r
 +
	`cou¡î_u64_ªad_⁄e
((
uöt64_t
 *)
p
, 
i
);

61  (
r
);

62 
	}
}

65 
	$cou¡î_u64_zîo_⁄e_˝u
(*
¨g
)

68 *((
uöt64_t
 *)((*)
¨g
 + 
UMA_PCPU_ALLOC_SIZE
 *

69 
	`PCPU_GET
(
˝uid
))) = 0;

70 
	}
}

72 
ölöe
 

73 
	$cou¡î_u64_zîo_ölöe
(
cou¡î_u64_t
 
c
)

76 
	`smp_ªndezvous
(
smp_no_ªndezvous_b¨rõr
, 
cou¡î_u64_zîo_⁄e_˝u
,

77 
smp_no_ªndezvous_b¨rõr
, 
c
);

78 
	}
}

81 
	#cou¡î_u64_add_¥Ÿe˘ed
(
c
, 
i
Ë
	`cou¡î_u64_add
(c, i)

	)

83 
ölöe
 

84 
	$cou¡î_u64_add
(
cou¡î_u64_t
 
c
, 
öt64_t
 
öc
)

87 
__asm
 
	`__vﬁ©ûe
("addq\t%1,%%gs:(%0)"

89 : "r" ((*)
c
 - (*)&
__p˝u
[0]), "ri" (
öc
)

91 
	}
}

	@src/nvidia-drm/machine/cpu.h

38 #i‚de‡
_MACHINE_CPU_H_


39 
	#_MACHINE_CPU_H_


	)

44 
	~<machöe/p¶.h
>

45 
	~<machöe/‰ame.h
>

46 
	~<machöe/£gmíts.h
>

48 
	#˝u_exec
(
p
Ë

	)

49 
	#˝u_sw≠ö
(
p
Ë

	)

50 
	#˝u_gë°ack
(
td
Ë(—d)->
td_‰ame
->
tf_r•
)

	)

51 
	#˝u_£t°ack
(
td
, 
≠
Ë(—d)->
td_‰ame
->
tf_r•
 = (≠))

	)

52 
	#˝u_•öwaô
(Ë
	`ü32_∑u£
()

	)

54 
	#TRAPF_USERMODE
(
‰amï
) \

55 (
	`ISPL
((
‰amï
)->
tf_cs
Ë=
SEL_UPL
)

	)

56 
	#TRAPF_PC
(
‰amï
Ë((‰amï)->
tf_rù
)

	)

58 #ifde‡
_KERNEL


65 
	s˝u_›s
 {

66 (*
	m˝u_öô
)();

67 (*
	m˝u_ªsume
)();

70 
˝u_›s
 cpu_ops;

71 
brw£˘i⁄
[];

72 
bãxt
[];

73 
_íd
[];

74 
ëext
[];

77 (*
vmm_ªsume_p
)();

79 
	`˝u_hÆt
();

80 
	`˝u_lock_dñay
();

81 
	`˝u_ª£t
();

82 
	`f‹k_åampﬁöe
();

83 
	`swi_vm
(*);

89 
__ölöe
 
u_öt64_t


90 
	$gë_cy˛ecou¡
()

93  (
	`rdtsc
());

94 
	}
}

96 
	#MEMSET_EARLY_FUNC
 
mem£t_°d


	)

97 
	#MEMCPY_EARLY_FUNC
 
mem˝y_°d


	)

98 
	#MEMMOVE_EARLY_FUNC
 
memmove_°d


	)

	@src/nvidia-drm/machine/cpufunc.h

41 #i‚de‡
_MACHINE_CPUFUNC_H_


42 
	#_MACHINE_CPUFUNC_H_


	)

44 #i‚de‡
_SYS_CDEFS_H_


45 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


48 
	gªgi⁄_des¸ùt‹
;

50 
	#ªadb
(
va
Ë(*(vﬁ©ûê
uöt8_t
 *Ë(va))

	)

51 
	#ªadw
(
va
Ë(*(vﬁ©ûê
uöt16_t
 *Ë(va))

	)

52 
	#ªadl
(
va
Ë(*(vﬁ©ûê
uöt32_t
 *Ë(va))

	)

53 
	#ªadq
(
va
Ë(*(vﬁ©ûê
uöt64_t
 *Ë(va))

	)

55 
	#wrôeb
(
va
, 
d
Ë(*(vﬁ©ûê
uöt8_t
 *Ë(vaË(d))

	)

56 
	#wrôew
(
va
, 
d
Ë(*(vﬁ©ûê
uöt16_t
 *Ë(vaË(d))

	)

57 
	#wrôñ
(
va
, 
d
Ë(*(vﬁ©ûê
uöt32_t
 *Ë(vaË(d))

	)

58 
	#wrôeq
(
va
, 
d
Ë(*(vﬁ©ûê
uöt64_t
 *Ë(vaË(d))

	)

60 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__CC_SUPPORTS___INLINE
)

62 
__ölöe
 

63 
	$bªakpoöt
()

65 
__asm
 
	`__vﬁ©ûe
("int $3");

66 
	}
}

68 
__ölöe
 
__puª2
 
u_öt


69 
	$bsÊ
(
u_öt
 
mask
)

71 
u_öt
 
ªsu…
;

73 
__asm
 
	`__vﬁ©ûe
("bsÊ %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

74  (
ªsu…
);

75 
	}
}

77 
__ölöe
 
__puª2
 
u_l⁄g


78 
	$bsfq
(
u_l⁄g
 
mask
)

80 
u_l⁄g
 
ªsu…
;

82 
__asm
 
	`__vﬁ©ûe
("bsfq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

83  (
ªsu…
);

84 
	}
}

86 
__ölöe
 
__puª2
 
u_öt


87 
	$b§l
(
u_öt
 
mask
)

89 
u_öt
 
ªsu…
;

91 
__asm
 
	`__vﬁ©ûe
("b§»%1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

92  (
ªsu…
);

93 
	}
}

95 
__ölöe
 
__puª2
 
u_l⁄g


96 
	$b§q
(
u_l⁄g
 
mask
)

98 
u_l⁄g
 
ªsu…
;

100 
__asm
 
	`__vﬁ©ûe
("b§q %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

101  (
ªsu…
);

102 
	}
}

104 
__ölöe
 

105 
	$˛Êush
(
u_l⁄g
 
addr
)

108 
__asm
 
	`__vﬁ©ûe
("˛Êush %0" : : "m" (*(*)
addr
));

109 
	}
}

111 
__ölöe
 

112 
	$˛Êush›t
(
u_l⁄g
 
addr
)

115 
__asm
 
	`__vﬁ©ûe
(".byã 0x66;˛Êush %0" : : "m" (*(*)
addr
));

116 
	}
}

118 
__ölöe
 

119 
	$˛wb
(
u_l⁄g
 
addr
)

122 
__asm
 
	`__vﬁ©ûe
("˛wb %0" : : "m" (*(*)
addr
));

123 
	}
}

125 
__ölöe
 

126 
	$˛ts
()

129 
__asm
 
	`__vﬁ©ûe
("clts");

130 
	}
}

132 
__ölöe
 

133 
	$dißbÀ_öå
()

135 
__asm
 
	`__vﬁ©ûe
("cli" : : : "memory");

136 
	}
}

138 
__ölöe
 

139 
	$do_˝uid
(
u_öt
 
ax
, u_öà*
p
)

141 
__asm
 
	`__vﬁ©ûe
("cpuid"

142 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

143 : "0" (
ax
));

144 
	}
}

146 
__ölöe
 

147 
	$˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
)

149 
__asm
 
	`__vﬁ©ûe
("cpuid"

150 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

151 : "0" (
ax
), "c" (
cx
));

152 
	}
}

154 
__ölöe
 

155 
	$íabÀ_öå
()

157 
__asm
 
	`__vﬁ©ûe
("sti");

158 
	}
}

160 #ifde‡
_KERNEL


162 
	#HAVE_INLINE_FFS


	)

163 
	#ffs
(
x
Ë
	`__buûtö_ffs
(x)

	)

165 
	#HAVE_INLINE_FFSL


	)

167 
__ölöe
 
__puª2
 

168 
	$ff¶
(
mask
)

170  (
mask
 =0 ? mask : ()
	`bsfq
((
u_l⁄g
)mask) + 1);

171 
	}
}

173 
	#HAVE_INLINE_FFSLL


	)

175 
__ölöe
 
__puª2
 

176 
	$ff¶l
(
mask
)

178  (
	`ff¶
(()
mask
));

179 
	}
}

181 
	#HAVE_INLINE_FLS


	)

183 
__ölöe
 
__puª2
 

184 
	$Ês
(
mask
)

186  (
mask
 =0 ? mask : ()
	`b§l
((
u_öt
)mask) + 1);

187 
	}
}

189 
	#HAVE_INLINE_FLSL


	)

191 
__ölöe
 
__puª2
 

192 
	$Ê¶
(
mask
)

194  (
mask
 =0 ? mask : ()
	`b§q
((
u_l⁄g
)mask) + 1);

195 
	}
}

197 
	#HAVE_INLINE_FLSLL


	)

199 
__ölöe
 
__puª2
 

200 
	$Ê¶l
(
mask
)

202  (
	`Ê¶
(()
mask
));

203 
	}
}

207 
__ölöe
 

208 
	$hÆt
()

210 
__asm
 
	`__vﬁ©ûe
("hlt");

211 
	}
}

213 
__ölöe
 
u_ch¨


214 
	$öb
(
u_öt
 
p‹t
)

216 
u_ch¨
 
d©a
;

218 
__asm
 
	`__vﬁ©ûe
("öb %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

219  (
d©a
);

220 
	}
}

222 
__ölöe
 
u_öt


223 
	$öl
(
u_öt
 
p‹t
)

225 
u_öt
 
d©a
;

227 
__asm
 
	`__vﬁ©ûe
("ö»%w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

228  (
d©a
);

229 
	}
}

231 
__ölöe
 

232 
	$ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

234 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insb"

235 : "+D" (
addr
), "+c" (
cou¡
)

236 : "d" (
p‹t
)

238 
	}
}

240 
__ölöe
 

241 
	$ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

243 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insw"

244 : "+D" (
addr
), "+c" (
cou¡
)

245 : "d" (
p‹t
)

247 
	}
}

249 
__ölöe
 

250 
	$ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

252 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insl"

253 : "+D" (
addr
), "+c" (
cou¡
)

254 : "d" (
p‹t
)

256 
	}
}

258 
__ölöe
 

259 
	$övd
()

261 
__asm
 
	`__vﬁ©ûe
("invd");

262 
	}
}

264 
__ölöe
 
u_sh‹t


265 
	$öw
(
u_öt
 
p‹t
)

267 
u_sh‹t
 
d©a
;

269 
__asm
 
	`__vﬁ©ûe
("öw %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

270  (
d©a
);

271 
	}
}

273 
__ölöe
 

274 
	$outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
)

276 
__asm
 
	`__vﬁ©ûe
("outb %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

277 
	}
}

279 
__ölöe
 

280 
	$oué
(
u_öt
 
p‹t
, u_öà
d©a
)

282 
__asm
 
	`__vﬁ©ûe
("oué %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

283 
	}
}

285 
__ölöe
 

286 
	$outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

288 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsb"

289 : "+S" (
addr
), "+c" (
cou¡
)

290 : "d" (
p‹t
));

291 
	}
}

293 
__ölöe
 

294 
	$outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

296 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsw"

297 : "+S" (
addr
), "+c" (
cou¡
)

298 : "d" (
p‹t
));

299 
	}
}

301 
__ölöe
 

302 
	$out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

304 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsl"

305 : "+S" (
addr
), "+c" (
cou¡
)

306 : "d" (
p‹t
));

307 
	}
}

309 
__ölöe
 

310 
	$outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
)

312 
__asm
 
	`__vﬁ©ûe
("outw %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

313 
	}
}

315 
__ölöe
 
u_l⁄g


316 
	$p›˙tq
(
u_l⁄g
 
mask
)

318 
u_l⁄g
 
ªsu…
;

320 
__asm
 
	`__vﬁ©ûe
("p›˙tq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

321  (
ªsu…
);

322 
	}
}

324 
__ölöe
 

325 
	$l„n˚
()

328 
__asm
 
	`__vﬁ©ûe
("lfence" : : : "memory");

329 
	}
}

331 
__ölöe
 

332 
	$m„n˚
()

335 
__asm
 
	`__vﬁ©ûe
("mfence" : : : "memory");

336 
	}
}

338 
__ölöe
 

339 
	$s„n˚
()

342 
__asm
 
	`__vﬁ©ûe
("sfence" : : : "memory");

343 
	}
}

345 
__ölöe
 

346 
	$ü32_∑u£
()

348 
__asm
 
	`__vﬁ©ûe
("pause");

349 
	}
}

351 
__ölöe
 
u_l⁄g


352 
	$ªad_rÊags
()

354 
u_l⁄g
 
rf
;

356 
__asm
 
	`__vﬁ©ûe
("pushfq;Ö›q %0" : "Ù" (
rf
));

357  (
rf
);

358 
	}
}

360 
__ölöe
 
uöt64_t


361 
	$rdm§
(
u_öt
 
m§
)

363 
uöt32_t
 
low
, 
high
;

365 
__asm
 
	`__vﬁ©ûe
("rdm§" : "˜" (
low
), "=d" (
high
Ë: "c" (
m§
));

366  (
low
 | ((
uöt64_t
)
high
 << 32));

367 
	}
}

369 
__ölöe
 
uöt32_t


370 
	$rdm§32
(
u_öt
 
m§
)

372 
uöt32_t
 
low
;

374 
__asm
 
	`__vﬁ©ûe
("rdm§" : "˜" (
low
Ë: "c" (
m§
) : "rdx");

375  (
low
);

376 
	}
}

378 
__ölöe
 
uöt64_t


379 
	$rdpmc
(
u_öt
 
pmc
)

381 
uöt32_t
 
low
, 
high
;

383 
__asm
 
	`__vﬁ©ûe
("rdpmc" : "˜" (
low
), "=d" (
high
Ë: "c" (
pmc
));

384  (
low
 | ((
uöt64_t
)
high
 << 32));

385 
	}
}

387 
__ölöe
 
uöt64_t


388 
	$rdtsc
()

390 
uöt32_t
 
low
, 
high
;

392 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
low
), "=d" (
high
));

393  (
low
 | ((
uöt64_t
)
high
 << 32));

394 
	}
}

396 
__ölöe
 
uöt64_t


397 
	$rdts˝
()

399 
uöt32_t
 
low
, 
high
;

401 
__asm
 
	`__vﬁ©ûe
("rdts˝" : "˜" (
low
), "=d" (
high
) : : "ecx");

402  (
low
 | ((
uöt64_t
)
high
 << 32));

403 
	}
}

405 
__ölöe
 
uöt32_t


406 
	$rdtsc32
()

408 
uöt32_t
 
rv
;

410 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
rv
) : : "edx");

411  (
rv
);

412 
	}
}

414 
__ölöe
 

415 
	$wbövd
()

417 
__asm
 
	`__vﬁ©ûe
("wbinvd");

418 
	}
}

420 
__ölöe
 

421 
	$wrôe_rÊags
(
u_l⁄g
 
rf
)

423 
__asm
 
	`__vﬁ©ûe
("pushq %0;Ö›fq" : : "r" (
rf
));

424 
	}
}

426 
__ölöe
 

427 
	$wrm§
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
)

429 
uöt32_t
 
low
, 
high
;

431 
low
 = 
√wvÆ
;

432 
high
 = 
√wvÆ
 >> 32;

433 
__asm
 
	`__vﬁ©ûe
("wrm§" : : "a" (
low
), "d" (
high
), "c" (
m§
));

434 
	}
}

436 
__ölöe
 

437 
	$lﬂd_¸0
(
u_l⁄g
 
d©a
)

440 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸0" : : "r" (
d©a
));

441 
	}
}

443 
__ölöe
 
u_l⁄g


444 
	$r¸0
()

446 
u_l⁄g
 
d©a
;

448 
__asm
 
	`__vﬁ©ûe
("movq %%¸0,%0" : "Ù" (
d©a
));

449  (
d©a
);

450 
	}
}

452 
__ölöe
 
u_l⁄g


453 
	$r¸2
()

455 
u_l⁄g
 
d©a
;

457 
__asm
 
	`__vﬁ©ûe
("movq %%¸2,%0" : "Ù" (
d©a
));

458  (
d©a
);

459 
	}
}

461 
__ölöe
 

462 
	$lﬂd_¸3
(
u_l⁄g
 
d©a
)

465 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸3" : : "r" (
d©a
) : "memory");

466 
	}
}

468 
__ölöe
 
u_l⁄g


469 
	$r¸3
()

471 
u_l⁄g
 
d©a
;

473 
__asm
 
	`__vﬁ©ûe
("movq %%¸3,%0" : "Ù" (
d©a
));

474  (
d©a
);

475 
	}
}

477 
__ölöe
 

478 
	$lﬂd_¸4
(
u_l⁄g
 
d©a
)

480 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸4" : : "r" (
d©a
));

481 
	}
}

483 
__ölöe
 
u_l⁄g


484 
	$r¸4
()

486 
u_l⁄g
 
d©a
;

488 
__asm
 
	`__vﬁ©ûe
("movq %%¸4,%0" : "Ù" (
d©a
));

489  (
d©a
);

490 
	}
}

492 
__ölöe
 
u_l⁄g


493 
	$rx¸
(
u_öt
 
ªg
)

495 
u_öt
 
low
, 
high
;

497 
__asm
 
	`__vﬁ©ûe
("xgëbv" : "˜" (
low
), "=d" (
high
Ë: "c" (
ªg
));

498  (
low
 | ((
uöt64_t
)
high
 << 32));

499 
	}
}

501 
__ölöe
 

502 
	$lﬂd_x¸
(
u_öt
 
ªg
, 
u_l⁄g
 
vÆ
)

504 
u_öt
 
low
, 
high
;

506 
low
 = 
vÆ
;

507 
high
 = 
vÆ
 >> 32;

508 
__asm
 
	`__vﬁ©ûe
("x£tbv" : : "c" (
ªg
), "a" (
low
), "d" (
high
));

509 
	}
}

514 
__ölöe
 

515 
	$öv…lb
()

518 
	`lﬂd_¸3
(
	`r¸3
());

519 
	}
}

521 #i‚de‡
CR4_PGE


522 
	#CR4_PGE
 0x00000080

	)

532 
__ölöe
 

533 
	$öv…lb_glob
()

535 
uöt64_t
 
¸4
;

537 
¸4
 = 
	`r¸4
();

538 
	`lﬂd_¸4
(
¸4
 & ~
CR4_PGE
);

546 
	`lﬂd_¸4
(
¸4
 | 
CR4_PGE
);

547 
	}
}

553 
__ölöe
 

554 
	$övÕg
(
u_l⁄g
 
addr
)

557 
__asm
 
	`__vﬁ©ûe
("övÕg %0" : : "m" (*(*)
addr
) : "memory");

558 
	}
}

560 
	#INVPCID_ADDR
 0

	)

561 
	#INVPCID_CTX
 1

	)

562 
	#INVPCID_CTXGLOB
 2

	)

563 
	#INVPCID_ALLCTX
 3

	)

565 
	sövpcid_des¸
 {

566 
uöt64_t
 
	mpcid
:12 
__∑cked
;

567 
uöt64_t
 
	m∑d
:52 
__∑cked
;

568 
uöt64_t
 
	maddr
;

569 } 
	g__∑cked
;

571 
__ölöe
 

572 
	$övpcid
(
övpcid_des¸
 *
d
, 
ty≥
)

575 
__asm
 
	`__vﬁ©ûe
("invpcid (%0),%1"

576 : : "r" (
d
), "r" ((
u_l⁄g
)
ty≥
) : "memory");

577 
	}
}

579 
__ölöe
 
u_sh‹t


580 
	$rfs
()

582 
u_sh‹t
 
£l
;

583 
__asm
 
	`__vﬁ©ûe
("movw %%fs,%0" : "Ùm" (
£l
));

584  (
£l
);

585 
	}
}

587 
__ölöe
 
u_sh‹t


588 
	$rgs
()

590 
u_sh‹t
 
£l
;

591 
__asm
 
	`__vﬁ©ûe
("movw %%gs,%0" : "Ùm" (
£l
));

592  (
£l
);

593 
	}
}

595 
__ölöe
 
u_sh‹t


596 
	$rss
()

598 
u_sh‹t
 
£l
;

599 
__asm
 
	`__vﬁ©ûe
("movw %%ss,%0" : "Ùm" (
£l
));

600  (
£l
);

601 
	}
}

603 
__ölöe
 

604 
	$lﬂd_ds
(
u_sh‹t
 
£l
)

606 
__asm
 
	`__vﬁ©ûe
("movw %0,%%ds" : : "rm" (
£l
));

607 
	}
}

609 
__ölöe
 

610 
	$lﬂd_es
(
u_sh‹t
 
£l
)

612 
__asm
 
	`__vﬁ©ûe
("movw %0,%%es" : : "rm" (
£l
));

613 
	}
}

615 
__ölöe
 

616 
	$˝u_m⁄ô‹
(c⁄° *
addr
, 
u_l⁄g
 
exãnsi⁄s
, 
u_öt
 
höts
)

619 
__asm
 
	`__vﬁ©ûe
("monitor"

620 : : "a" (
addr
), "c" (
exãnsi⁄s
), "d" (
höts
));

621 
	}
}

623 
__ölöe
 

624 
	$˝u_mwaô
(
u_l⁄g
 
exãnsi⁄s
, 
u_öt
 
höts
)

627 
__asm
 
	`__vﬁ©ûe
("mwaô" : : "a" (
höts
), "c" (
exãnsi⁄s
));

628 
	}
}

630 #ifde‡
_KERNEL


632 #i‚def 
MSR_FSBASE


633 
	#MSR_FSBASE
 0xc0000100

	)

635 
__ölöe
 

636 
	$lﬂd_fs
(
u_sh‹t
 
£l
)

639 
__asm
 
	`__vﬁ©ûe
("rdmsr; movw %0,%%fs; wrmsr"

640 : : "rm" (
£l
), "c" (
MSR_FSBASE
) : "eax", "edx");

641 
	}
}

643 #i‚def 
MSR_GSBASE


644 
	#MSR_GSBASE
 0xc0000101

	)

646 
__ölöe
 

647 
	$lﬂd_gs
(
u_sh‹t
 
£l
)

654 
__asm
 
	`__vﬁ©ûe
("pushfq; cli;Ñdmsr; movw %0,%%gs; wrmsr;Öopfq"

655 : : "rm" (
£l
), "c" (
MSR_GSBASE
) : "eax", "edx");

656 
	}
}

659 
__ölöe
 

660 
	$lﬂd_fs
(
u_sh‹t
 
£l
)

662 
__asm
 
	`__vﬁ©ûe
("movw %0,%%fs" : : "rm" (
£l
));

663 
	}
}

665 
__ölöe
 

666 
	$lﬂd_gs
(
u_sh‹t
 
£l
)

668 
__asm
 
	`__vﬁ©ûe
("movw %0,%%gs" : : "rm" (
£l
));

669 
	}
}

672 
__ölöe
 
uöt64_t


673 
	$rdfsba£
()

675 
uöt64_t
 
x
;

677 
__asm
 
	`__vﬁ©ûe
("rdfsba£ %0" : "Ù" (
x
));

678  (
x
);

679 
	}
}

681 
__ölöe
 

682 
	$wrfsba£
(
uöt64_t
 
x
)

685 
__asm
 
	`__vﬁ©ûe
("wrfsba£ %0" : : "r" (
x
));

686 
	}
}

688 
__ölöe
 
uöt64_t


689 
	$rdgsba£
()

691 
uöt64_t
 
x
;

693 
__asm
 
	`__vﬁ©ûe
("rdgsba£ %0" : "Ù" (
x
));

694  (
x
);

695 
	}
}

697 
__ölöe
 

698 
	$wrgsba£
(
uöt64_t
 
x
)

701 
__asm
 
	`__vﬁ©ûe
("wrgsba£ %0" : : "r" (
x
));

702 
	}
}

704 
__ölöe
 

705 
	$b¨e_lgdt
(
ªgi⁄_des¸ùt‹
 *
addr
)

707 
__asm
 
	`__vﬁ©ûe
("lgdà(%0)" : : "r" (
addr
));

708 
	}
}

710 
__ölöe
 

711 
	$sgdt
(
ªgi⁄_des¸ùt‹
 *
addr
)

713 *
loc
;

715 
loc
 = (*)
addr
;

716 
__asm
 
	`__vﬁ©ûe
("sgdà%0" : "=m" (*
loc
) : : "memory");

717 
	}
}

719 
__ölöe
 

720 
	$lidt
(
ªgi⁄_des¸ùt‹
 *
addr
)

722 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
addr
));

723 
	}
}

725 
__ölöe
 

726 
	$sidt
(
ªgi⁄_des¸ùt‹
 *
addr
)

728 *
loc
;

730 
loc
 = (*)
addr
;

731 
__asm
 
	`__vﬁ©ûe
("sidà%0" : "=m" (*
loc
) : : "memory");

732 
	}
}

734 
__ölöe
 

735 
	$Œdt
(
u_sh‹t
 
£l
)

737 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

738 
	}
}

740 
__ölöe
 
u_sh‹t


741 
	$¶dt
()

743 
u_sh‹t
 
£l
;

745 
__asm
 
	`__vﬁ©ûe
("¶dà%0" : "Ù" (
£l
));

746  (
£l
);

747 
	}
}

749 
__ölöe
 

750 
	$…r
(
u_sh‹t
 
£l
)

752 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

753 
	}
}

755 
__ölöe
 
uöt32_t


756 
	$ªad_å
()

758 
u_sh‹t
 
£l
;

760 
__asm
 
	`__vﬁ©ûe
("°∏%0" : "Ù" (
£l
));

761  (
£l
);

762 
	}
}

764 
__ölöe
 
uöt64_t


765 
	$rdr0
()

767 
uöt64_t
 
d©a
;

768 
__asm
 
	`__vﬁ©ûe
("movq %%dr0,%0" : "Ù" (
d©a
));

769  (
d©a
);

770 
	}
}

772 
__ölöe
 

773 
	$lﬂd_dr0
(
uöt64_t
 
dr0
)

775 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr0" : : "r" (
dr0
));

776 
	}
}

778 
__ölöe
 
uöt64_t


779 
	$rdr1
()

781 
uöt64_t
 
d©a
;

782 
__asm
 
	`__vﬁ©ûe
("movq %%dr1,%0" : "Ù" (
d©a
));

783  (
d©a
);

784 
	}
}

786 
__ölöe
 

787 
	$lﬂd_dr1
(
uöt64_t
 
dr1
)

789 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr1" : : "r" (
dr1
));

790 
	}
}

792 
__ölöe
 
uöt64_t


793 
	$rdr2
()

795 
uöt64_t
 
d©a
;

796 
__asm
 
	`__vﬁ©ûe
("movq %%dr2,%0" : "Ù" (
d©a
));

797  (
d©a
);

798 
	}
}

800 
__ölöe
 

801 
	$lﬂd_dr2
(
uöt64_t
 
dr2
)

803 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr2" : : "r" (
dr2
));

804 
	}
}

806 
__ölöe
 
uöt64_t


807 
	$rdr3
()

809 
uöt64_t
 
d©a
;

810 
__asm
 
	`__vﬁ©ûe
("movq %%dr3,%0" : "Ù" (
d©a
));

811  (
d©a
);

812 
	}
}

814 
__ölöe
 

815 
	$lﬂd_dr3
(
uöt64_t
 
dr3
)

817 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr3" : : "r" (
dr3
));

818 
	}
}

820 
__ölöe
 
uöt64_t


821 
	$rdr6
()

823 
uöt64_t
 
d©a
;

824 
__asm
 
	`__vﬁ©ûe
("movq %%dr6,%0" : "Ù" (
d©a
));

825  (
d©a
);

826 
	}
}

828 
__ölöe
 

829 
	$lﬂd_dr6
(
uöt64_t
 
dr6
)

831 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr6" : : "r" (
dr6
));

832 
	}
}

834 
__ölöe
 
uöt64_t


835 
	$rdr7
()

837 
uöt64_t
 
d©a
;

838 
__asm
 
	`__vﬁ©ûe
("movq %%dr7,%0" : "Ù" (
d©a
));

839  (
d©a
);

840 
	}
}

842 
__ölöe
 

843 
	$lﬂd_dr7
(
uöt64_t
 
dr7
)

845 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr7" : : "r" (
dr7
));

846 
	}
}

848 
__ölöe
 
ªgi°î_t


849 
	$öå_dißbÀ
()

851 
ªgi°î_t
 
rÊags
;

853 
rÊags
 = 
	`ªad_rÊags
();

854 
	`dißbÀ_öå
();

855  (
rÊags
);

856 
	}
}

858 
__ölöe
 

859 
	$öå_ª°‹e
(
ªgi°î_t
 
rÊags
)

861 
	`wrôe_rÊags
(
rÊags
);

862 
	}
}

864 
__ölöe
 

865 
	$°ac
()

868 
__asm
 
	`__vﬁ©ûe
("stac" : : : "cc");

869 
	}
}

871 
__ölöe
 

872 
	$˛ac
()

875 
__asm
 
	`__vﬁ©ûe
("clac" : : : "cc");

876 
	}
}

879 
	mSGX_ECREATE
 = 0x0,

880 
	mSGX_EADD
 = 0x1,

881 
	mSGX_EINIT
 = 0x2,

882 
	mSGX_EREMOVE
 = 0x3,

883 
	mSGX_EDGBRD
 = 0x4,

884 
	mSGX_EDGBWR
 = 0x5,

885 
	mSGX_EEXTEND
 = 0x6,

886 
	mSGX_ELDU
 = 0x8,

887 
	mSGX_EBLOCK
 = 0x9,

888 
	mSGX_EPA
 = 0xA,

889 
	mSGX_EWB
 = 0xB,

890 
	mSGX_ETRACK
 = 0xC,

894 
	mSGX_PT_SECS
 = 0x00,

895 
	mSGX_PT_TCS
 = 0x01,

896 
	mSGX_PT_REG
 = 0x02,

897 
	mSGX_PT_VA
 = 0x03,

898 
	mSGX_PT_TRIM
 = 0x04,

901 
sgx_í˛s
(
uöt32_t
 
óx
, 
uöt64_t
 
rbx
, uöt64_à
rcx
, uöt64_à
rdx
);

903 
__ölöe
 

904 
	$sgx_e¸óã
(*
pgöfo
, *
£cs
)

907  (
	`sgx_í˛s
(
SGX_ECREATE
, (
uöt64_t
)
pgöfo
,

908 (
uöt64_t
)
£cs
, 0));

909 
	}
}

911 
__ölöe
 

912 
	$sgx_ódd
(*
pgöfo
, *
ïc
)

915  (
	`sgx_í˛s
(
SGX_EADD
, (
uöt64_t
)
pgöfo
,

916 (
uöt64_t
)
ïc
, 0));

917 
	}
}

919 
__ölöe
 

920 
	$sgx_eöô
(*
sig°ru˘
, *
£cs
, *
eöôtokí
)

923  (
	`sgx_í˛s
(
SGX_EINIT
, (
uöt64_t
)
sig°ru˘
,

924 (
uöt64_t
)
£cs
, (uöt64_t)
eöôtokí
));

925 
	}
}

927 
__ölöe
 

928 
	$sgx_ìxãnd
(*
£cs
, *
ïc
)

931  (
	`sgx_í˛s
(
SGX_EEXTEND
, (
uöt64_t
)
£cs
,

932 (
uöt64_t
)
ïc
, 0));

933 
	}
}

935 
__ölöe
 

936 
	$sgx_ïa
(*
ïc
)

939  (
	`sgx_í˛s
(
SGX_EPA
, 
SGX_PT_VA
, (
uöt64_t
)
ïc
, 0));

940 
	}
}

942 
__ölöe
 

943 
	$sgx_ñdu
(
uöt64_t
 
rbx
, uöt64_à
rcx
,

944 
uöt64_t
 
rdx
)

947  (
	`sgx_í˛s
(
SGX_ELDU
, 
rbx
, 
rcx
, 
rdx
));

948 
	}
}

950 
__ölöe
 

951 
	$sgx_îemove
(*
ïc
)

954  (
	`sgx_í˛s
(
SGX_EREMOVE
, 0, (
uöt64_t
)
ïc
, 0));

955 
	}
}

959 
bªakpoöt
();

960 
u_öt
 
bsÊ
(u_öà
mask
);

961 
u_öt
 
b§l
(u_öà
mask
);

962 
˛Êush
(
u_l⁄g
 
addr
);

963 
˛ts
();

964 
˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
);

965 
dißbÀ_öå
();

966 
do_˝uid
(
u_öt
 
ax
, u_öà*
p
);

967 
íabÀ_öå
();

968 
hÆt
();

969 
ü32_∑u£
();

970 
u_ch¨
 
öb
(
u_öt
 
p‹t
);

971 
u_öt
 
öl
(u_öà
p‹t
);

972 
ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

973 
ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

974 
ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

975 
ªgi°î_t
 
öå_dißbÀ
();

976 
öå_ª°‹e
(
ªgi°î_t
 
rf
);

977 
övd
();

978 
övÕg
(
u_öt
 
addr
);

979 
öv…lb
();

980 
u_sh‹t
 
öw
(
u_öt
 
p‹t
);

981 
lidt
(
ªgi⁄_des¸ùt‹
 *
addr
);

982 
Œdt
(
u_sh‹t
 
£l
);

983 
lﬂd_¸0
(
u_l⁄g
 
¸0
);

984 
lﬂd_¸3
(
u_l⁄g
 
¸3
);

985 
lﬂd_¸4
(
u_l⁄g
 
¸4
);

986 
lﬂd_dr0
(
uöt64_t
 
dr0
);

987 
lﬂd_dr1
(
uöt64_t
 
dr1
);

988 
lﬂd_dr2
(
uöt64_t
 
dr2
);

989 
lﬂd_dr3
(
uöt64_t
 
dr3
);

990 
lﬂd_dr6
(
uöt64_t
 
dr6
);

991 
lﬂd_dr7
(
uöt64_t
 
dr7
);

992 
lﬂd_fs
(
u_sh‹t
 
£l
);

993 
lﬂd_gs
(
u_sh‹t
 
£l
);

994 
…r
(
u_sh‹t
 
£l
);

995 
outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
);

996 
oué
(
u_öt
 
p‹t
, u_öà
d©a
);

997 
outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

998 
out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

999 
outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

1000 
outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
);

1001 
u_l⁄g
 
r¸0
();

1002 
u_l⁄g
 
r¸2
();

1003 
u_l⁄g
 
r¸3
();

1004 
u_l⁄g
 
r¸4
();

1005 
uöt64_t
 
rdm§
(
u_öt
 
m§
);

1006 
uöt32_t
 
rdm§32
(
u_öt
 
m§
);

1007 
uöt64_t
 
rdpmc
(
u_öt
 
pmc
);

1008 
uöt64_t
 
rdr0
();

1009 
uöt64_t
 
rdr1
();

1010 
uöt64_t
 
rdr2
();

1011 
uöt64_t
 
rdr3
();

1012 
uöt64_t
 
rdr6
();

1013 
uöt64_t
 
rdr7
();

1014 
uöt64_t
 
rdtsc
();

1015 
u_l⁄g
 
ªad_rÊags
();

1016 
u_öt
 
rfs
();

1017 
u_öt
 
rgs
();

1018 
wbövd
();

1019 
wrôe_rÊags
(
u_öt
 
rf
);

1020 
wrm§
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

1024 
ª£t_dbªgs
();

1026 #ifde‡
_KERNEL


1027 
rdm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 *
vÆ
);

1028 
wrm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

	@src/nvidia-drm/machine/cputypes.h

6 
	~<x86/˝uty≥s.h
>

	@src/nvidia-drm/machine/db_machdep.h

29 #i‚de‡
_MACHINE_DB_MACHDEP_H_


30 
	#_MACHINE_DB_MACHDEP_H_


	)

32 
	~<machöe/‰ame.h
>

33 
	~<machöe/ªg.h
>

34 
	~<machöe/å≠.h
>

36 
vm_off£t_t
 
	tdb_addr_t
;

37 
	tdb_ex¥_t
;

39 
	#PC_REGS
(Ë((
db_addr_t
)
kdb_thr˘x
->
pcb_rù
)

	)

41 
	#BKPT_INST
 0xc¯

	)

42 
	#BKPT_SIZE
 (1Ë

	)

43 
	#BKPT_SET
(
ö°
Ë(
BKPT_INST
)

	)

45 
	#BKPT_SKIP
 \

47 
kdb_‰ame
->
tf_rù
 += 1; \

48 
kdb_thr˘x
->
pcb_rù
 += 1; \

49 } 0)

	)

51 
	#FIXUP_PC_AFTER_BREAK
 \

53 
kdb_‰ame
->
tf_rù
 -= 1; \

54 
kdb_thr˘x
->
pcb_rù
 -= 1; \

55 } 0);

	)

57 
	#db_˛ór_sögÀ_°ï
 
kdb_˝u_˛ór_sögÀ°ï


	)

58 
	#db_£t_sögÀ_°ï
 
kdb_˝u_£t_sögÀ°ï


	)

67 
	#IS_BREAKPOINT_TRAP
(
ty≥
, 
code
Ë(—y≥Ë=
T_BPTFLT
)

	)

68 
	#IS_SSTEP_TRAP
(
ty≥
, 
code
) \

69 ((
ty≥
Ë=
T_TRCTRAP
 && (
code
Ë& 
DBREG_DR6_BS
)

	)

70 
	#IS_WATCHPOINT_TRAP
(
ty≥
, 
code
Ë0

	)

72 
	#I_CALL
 0xe8

	)

73 
	#I_CALLI
 0xff

	)

74 
	#i_ˇŒi
(
ös
Ë(((ös)&0xffË=
I_CALLI
 && ((ös)&0x3800Ë=0x1000)

	)

75 
	#I_RET
 0xc3

	)

76 
	#I_IRET
 0xcf

	)

77 
	#i_ªx
(
ös
Ë(((ösË& 0xffË=0x41 || ((ösË& 0xffË=0x43)

	)

79 
	#ö°_å≠_ªtu∫
(
ös
Ë(((ös)&0xffË=
I_IRET
)

	)

80 
	#ö°_ªtu∫
(
ös
Ë(((ös)&0xffË=
I_RET
)

	)

81 
	#ö°_ˇŒ
(
ös
Ë(((ös)&0xffË=
I_CALL
 || 
	`i_ˇŒi
(ins) || \

82 (
	`i_ˇŒi
((
ös
Ë>> 8Ë&& 
	`i_ªx
(ös)))

	)

83 
	#ö°_lﬂd
(
ös
Ë0

	)

84 
	#ö°_°‹e
(
ös
Ë0

	)

	@src/nvidia-drm/machine/dump.h

6 
	~<x86/dump.h
>

	@src/nvidia-drm/machine/efi.h

32 #i‚de‡
__AMD64_INCLUDE_EFI_H_


33 
	#__AMD64_INCLUDE_EFI_H_


	)

43 #i‡
deföed
(
__˛™g__
Ë|| deföed(
__GNUC__
) && \

44 (
	g__GNUC__
 > 4 || __GNUC__ =4 && 
__GNUC_MINOR__
 >= 4)

45 
	#EFIABI_ATTR
 
	`__©åibuã__
((
ms_abi
))

	)

48 #ifde‡
_KERNEL


49 
	~<iß/πc.h
>

51 
	#EFI_TIME_LOCK
(Ë
	`mtx_lock
(&
©πc_time_lock
)

	)

52 
	#EFI_TIME_UNLOCK
(Ë
	`mtx_u∆ock
(&
©πc_time_lock
)

	)

53 
	#EFI_TIME_OWNED
(Ë
	`mtx_as£π
(&
©πc_time_lock
, 
MA_OWNED
)

	)

55 
	#EFI_RT_HANDLE_FAULTS_DEFAULT
 1

	)

58 
	sefút_ˇŒöfo
 {

59 c⁄° *
	mec_«me
;

60 
ªgi°î_t
 
	mec_efi_°©us
;

61 
ªgi°î_t
 
	mec_Âå
;

62 
ªgi°î_t
 
	mec_¨g˙t
;

63 
ªgi°î_t
 
	mec_¨g1
;

64 
ªgi°î_t
 
	mec_¨g2
;

65 
ªgi°î_t
 
	mec_¨g3
;

66 
ªgi°î_t
 
	mec_¨g4
;

67 
ªgi°î_t
 
	mec_¨g5
;

68 
ªgi°î_t
 
	mec_rbx
;

69 
ªgi°î_t
 
	mec_r•
;

70 
ªgi°î_t
 
	mec_rbp
;

71 
ªgi°î_t
 
	mec_r12
;

72 
ªgi°î_t
 
	mec_r13
;

73 
ªgi°î_t
 
	mec_r14
;

74 
ªgi°î_t
 
	mec_r15
;

	@src/nvidia-drm/machine/elf.h

6 
	~<x86/ñf.h
>

	@src/nvidia-drm/machine/endian.h

6 
	~<x86/ídün.h
>

	@src/nvidia-drm/machine/exec.h

35 #i‚def 
_MACHINE_EXEC_H_


36 
	#_MACHINE_EXEC_H_


	)

38 
	#__LDPGSZ
 4096

	)

	@src/nvidia-drm/machine/fdt.h

6 
	~<x86/fdt.h
>

	@src/nvidia-drm/machine/float.h

6 
	~<x86/Êﬂt.h
>

	@src/nvidia-drm/machine/floatingpoint.h

39 #i‚de‡
_FLOATINGPOINT_H_


40 
	#_FLOATINGPOINT_H_


	)

42 
	~<sys/cdefs.h
>

43 
	~<machöe/õìÂ.h
>

	@src/nvidia-drm/machine/fpu.h

43 #i‚de‡
_MACHINE_FPU_H_


44 
	#_MACHINE_FPU_H_


	)

46 
	~<x86/Âu.h
>

48 #ifde‡
_KERNEL


50 
	gÂu_kîn_˘x
;

52 
	#PCB_USER_FPU
(
pcb
Ë((’cb)->
pcb_Êags
 & 
PCB_KERNFPU
Ë=0)

	)

54 
	#XSAVE_AREA_ALIGN
 64

	)

56 
Âud«
();

57 
Âudr›
();

58 
Âuexô
(
thªad
 *
td
);

59 
Âuf‹m©
();

60 
Âugëªgs
(
thªad
 *
td
);

61 
Âuöô
();

62 
Âuª°‹e
(*
addr
);

63 
Âuªsume
(*
addr
);

64 
Âußve
(*
addr
);

65 
Âu£åegs
(
thªad
 *
td
, 
ßveÂu
 *
addr
,

66 *
xÂu°©e
, 
size_t
 
xÂu°©e_size
);

67 
Âu£tx°©e
(
thªad
 *
td
, *
xÂu°©e
,

68 
size_t
 
xÂu°©e_size
);

69 
Âusu•íd
(*
addr
);

70 
Âuå≠_s£
();

71 
Âuå≠_x87
();

72 
Âuu£röôed
(
thªad
 *
td
);

73 
Âu_kîn_˘x
 *
Âu_kîn_Æloc_˘x
(
u_öt
 
Êags
);

74 
Âu_kîn_‰ì_˘x
(
Âu_kîn_˘x
 *
˘x
);

75 
Âu_kîn_íãr
(
thªad
 *
td
, 
Âu_kîn_˘x
 *
˘x
,

76 
u_öt
 
Êags
);

77 
Âu_kîn_Àave
(
thªad
 *
td
, 
Âu_kîn_˘x
 *
˘x
);

78 
Âu_kîn_thªad
(
u_öt
 
Êags
);

79 
is_Âu_kîn_thªad
(
u_öt
 
Êags
);

81 
ßveÂu
 *
Âu_ßve_¨ó_Æloc
();

82 
Âu_ßve_¨ó_‰ì
(
ßveÂu
 *
fß
);

83 
Âu_ßve_¨ó_ª£t
(
ßveÂu
 *
fß
);

88 
	#FPU_KERN_NORMAL
 0x0000

	)

89 
	#FPU_KERN_NOWAIT
 0x0001

	)

90 
	#FPU_KERN_KTHR
 0x0002

	)

91 
	#FPU_KERN_NOCTX
 0x0004

	)

	@src/nvidia-drm/machine/frame.h

34 #i‚def 
_AMD64_FRAME_H


35 
	#_AMD64_FRAME_H


	)

37 
	~<x86/‰ame.h
>

39 
	s±i_‰ame
 {

40 
ªgi°î_t
 
	m±i_rdx
;

41 
ªgi°î_t
 
	m±i_øx
;

42 
ªgi°î_t
 
	m±i_îr
;

43 
ªgi°î_t
 
	m±i_rù
;

44 
ªgi°î_t
 
	m±i_cs
;

45 
ªgi°î_t
 
	m±i_rÊags
;

46 
ªgi°î_t
 
	m±i_r•
;

47 
ªgi°î_t
 
	m±i_ss
;

	@src/nvidia-drm/machine/gdb_machdep.h

31 #i‚de‡
_MACHINE_GDB_MACHDEP_H_


32 
	#_MACHINE_GDB_MACHDEP_H_


	)

34 
	#GDB_BUFSZ
 (
GDB_NREGS
 * 16)

	)

35 
	#GDB_NREGS
 56

	)

36 
	#GDB_REG_PC
 16

	)

38 
__ölöe
 
size_t


39 
	$gdb_˝u_ªgsz
(
ªgnum
)

41  ((
ªgnum
 > 16 &&Ñegnum < 24) ? 4 : 8);

42 
	}
}

44 
__ölöe
 

45 
	$gdb_˝u_quîy
()

48 
	}
}

50 *
gdb_begö_wrôe
();

51 *
gdb_˝u_gëªg
(, 
size_t
 *);

52 
gdb_˝u_£åeg
(, *);

53 
gdb_˝u_sig«l
(, );

54 
gdb_íd_wrôe
(*);

	@src/nvidia-drm/machine/ieeefp.h

40 #i‚de‡
_MACHINE_IEEEFP_H_


41 
	#_MACHINE_IEEEFP_H_


	)

50 #i‚de‡
_SYS_CDEFS_H_


51 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


58 
	mFP_RN
=0,

59 
	mFP_RM
,

60 
	mFP_RP
,

61 
	mFP_RZ


62 } 
	tÂ_∫d_t
;

68 
	mFP_PS
=0,

69 
	mFP_PRS
,

70 
	mFP_PD
,

71 
	mFP_PE


72 } 
	tÂ_¥ec_t
;

74 
	#Â_ex˚±_t
 

	)

79 
	#FP_X_INV
 0x01

	)

80 
	#FP_X_DNML
 0x02

	)

81 
	#FP_X_DZ
 0x04

	)

82 
	#FP_X_OFL
 0x08

	)

83 
	#FP_X_UFL
 0x10

	)

84 
	#FP_X_IMP
 0x20

	)

85 
	#FP_X_STK
 0x40

	)

90 
	#FP_MSKS_FLD
 0x3‡

	)

91 
	#FP_PRC_FLD
 0x300

	)

92 
	#FP_RND_FLD
 0xc00

	)

97 
	#FP_STKY_FLD
 0x3‡

	)

102 
	#SSE_STKY_FLD
 0x3‡

	)

103 
	#SSE_DAZ_FLD
 0x40

	)

104 
	#SSE_MSKS_FLD
 0x1f80

	)

105 
	#SSE_RND_FLD
 0x6000

	)

106 
	#SSE_FZ_FLD
 0x8000

	)

111 
	#FP_MSKS_OFF
 0

	)

112 
	#FP_PRC_OFF
 8

	)

113 
	#FP_RND_OFF
 10

	)

118 
	#FP_STKY_OFF
 0

	)

123 
	#SSE_STKY_OFF
 0

	)

124 
	#SSE_DAZ_OFF
 6

	)

125 
	#SSE_MSKS_OFF
 7

	)

126 
	#SSE_RND_OFF
 13

	)

127 
	#SSE_FZ_OFF
 15

	)

129 #ifde‡
__GNUCLIKE_ASM


131 
	#__Êdcw
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("Êdcw %0" : : "m" (*◊ddr)))

	)

132 
	#__Êdív
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("Êdív %0" : : "m" (*◊ddr)))

	)

133 
	#__‚˛ex
(Ë
__asm
 
	`__vﬁ©ûe
("‚˛ex")

	)

134 
	#__‚°cw
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("‚°cw %0" : "=m" (*◊ddr)))

	)

135 
	#__‚°ív
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("‚°ív %0" : "=m" (*◊ddr)))

	)

136 
	#__‚°sw
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("‚°sw %0" : "=m" (*◊ddr)))

	)

137 
	#__ldmxc§
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("ldmxc§ %0" : : "m" (*◊ddr)))

	)

138 
	#__°mxc§
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("°mxc§ %0" : "=m" (*◊ddr)))

	)

147 
__ölöe
 

148 
	$__‚ldcw
(
_cw
, 
_√wcw
)

151 
_cw
;

152 
_Ÿhî
[6];

153 } 
_ív
;

154 
_sw
;

156 i‡((
_cw
 & 
FP_MSKS_FLD
) != FP_MSKS_FLD) {

157 
	`__‚°sw
(&
_sw
);

158 i‡(((
_sw
 & ~
_cw
Ë& 
FP_STKY_FLD
) != 0) {

159 
	`__‚°ív
(&
_ív
);

160 
_ív
.
_cw
 = 
_√wcw
;

161 
	`__Êdív
(&
_ív
);

165 
	`__Êdcw
(&
_√wcw
);

166 
	}
}

179 
__ölöe
 
Â_∫d_t


180 
	$__Âgëround
()

182 
_cw
;

184 
	`__‚°cw
(&
_cw
);

185  ((
Â_∫d_t
)((
_cw
 & 
FP_RND_FLD
Ë>> 
FP_RND_OFF
));

186 
	}
}

188 
__ölöe
 
Â_∫d_t


189 
	$__Â£åound
(
Â_∫d_t
 
_m
)

191 
Â_∫d_t
 
_p
;

192 
_mxc§
;

193 
_cw
, 
_√wcw
;

195 
	`__‚°cw
(&
_cw
);

196 
_p
 = (
Â_∫d_t
)((
_cw
 & 
FP_RND_FLD
Ë>> 
FP_RND_OFF
);

197 
_√wcw
 = 
_cw
 & ~
FP_RND_FLD
;

198 
_√wcw
 |(
_m
 << 
FP_RND_OFF
Ë& 
FP_RND_FLD
;

199 
	`__‚ldcw
(
_cw
, 
_√wcw
);

200 
	`__°mxc§
(&
_mxc§
);

201 
_mxc§
 &~
SSE_RND_FLD
;

202 
_mxc§
 |(
_m
 << 
SSE_RND_OFF
Ë& 
SSE_RND_FLD
;

203 
	`__ldmxc§
(&
_mxc§
);

204  (
_p
);

205 
	}
}

212 
__ölöe
 
Â_¥ec_t


213 
	$__Âgë¥ec
()

215 
_cw
;

217 
	`__‚°cw
(&
_cw
);

218  ((
Â_¥ec_t
)((
_cw
 & 
FP_PRC_FLD
Ë>> 
FP_PRC_OFF
));

219 
	}
}

221 
__ölöe
 
Â_¥ec_t


222 
	$__Â£çªc
(
Â_¥ec_t
 
_m
)

224 
Â_¥ec_t
 
_p
;

225 
_cw
, 
_√wcw
;

227 
	`__‚°cw
(&
_cw
);

228 
_p
 = (
Â_¥ec_t
)((
_cw
 & 
FP_PRC_FLD
Ë>> 
FP_PRC_OFF
);

229 
_√wcw
 = 
_cw
 & ~
FP_PRC_FLD
;

230 
_√wcw
 |(
_m
 << 
FP_PRC_OFF
Ë& 
FP_PRC_FLD
;

231 
	`__‚ldcw
(
_cw
, 
_√wcw
);

232  (
_p
);

233 
	}
}

241 
__ölöe
 
Â_ex˚±_t


242 
	$__Âgëmask
()

244 
_cw
;

246 
	`__‚°cw
(&
_cw
);

247  ((~
_cw
 & 
FP_MSKS_FLD
Ë>> 
FP_MSKS_OFF
);

248 
	}
}

250 
__ölöe
 
Â_ex˚±_t


251 
	$__Â£tmask
(
Â_ex˚±_t
 
_m
)

253 
Â_ex˚±_t
 
_p
;

254 
_mxc§
;

255 
_cw
, 
_√wcw
;

257 
	`__‚°cw
(&
_cw
);

258 
_p
 = (~
_cw
 & 
FP_MSKS_FLD
Ë>> 
FP_MSKS_OFF
;

259 
_√wcw
 = 
_cw
 & ~
FP_MSKS_FLD
;

260 
_√wcw
 |(~
_m
 << 
FP_MSKS_OFF
Ë& 
FP_MSKS_FLD
;

261 
	`__‚ldcw
(
_cw
, 
_√wcw
);

262 
	`__°mxc§
(&
_mxc§
);

264 
_mxc§
 &~
SSE_MSKS_FLD
;

265 
_mxc§
 |(~
_m
 << 
SSE_MSKS_OFF
Ë& 
SSE_MSKS_FLD
;

266 
	`__ldmxc§
(&
_mxc§
);

267  (
_p
);

268 
	}
}

270 
__ölöe
 
Â_ex˚±_t


271 
	$__Âgë°icky
()

273 
_ex
, 
_mxc§
;

274 
_sw
;

276 
	`__‚°sw
(&
_sw
);

277 
_ex
 = (
_sw
 & 
FP_STKY_FLD
Ë>> 
FP_STKY_OFF
;

278 
	`__°mxc§
(&
_mxc§
);

279 
_ex
 |(
_mxc§
 & 
SSE_STKY_FLD
Ë>> 
SSE_STKY_OFF
;

280  ((
Â_ex˚±_t
)
_ex
);

281 
	}
}

285 #i‡!
deföed
(
__IEEEFP_NOINLINES__
Ë&& deföed(
__GNUCLIKE_ASM
)

287 
	#Âgëmask
(Ë
	`__Âgëmask
()

	)

288 
	#Âgë¥ec
(Ë
	`__Âgë¥ec
()

	)

289 
	#Âgëround
(Ë
	`__Âgëround
()

	)

290 
	#Âgë°icky
(Ë
	`__Âgë°icky
()

	)

291 
	#Â£tmask
(
m
Ë
	`__Â£tmask
(m)

	)

292 
	#Â£çªc
(
m
Ë
	`__Â£çªc
(m)

	)

293 
	#Â£åound
(
m
Ë
	`__Â£åound
(m)

	)

298 
__BEGIN_DECLS


299 
Â_∫d_t
 
Âgëround
();

300 
Â_∫d_t
 
Â£åound
(fp_rnd_t);

301 
Â_ex˚±_t
 
Âgëmask
();

302 
Â_ex˚±_t
 
Â£tmask
(fp_except_t);

303 
Â_ex˚±_t
 
Âgë°icky
();

304 
Â_ex˚±_t
 
Â£t°icky
(fp_except_t);

305 
Â_¥ec_t
 
Âgë¥ec
();

306 
Â_¥ec_t
 
Â£çªc
(fp_prec_t);

307 
	g__END_DECLS


	@src/nvidia-drm/machine/in_cksum.h

37 #i‚de‡
_MACHINE_IN_CKSUM_H_


38 
	#_MACHINE_IN_CKSUM_H_
 1

	)

40 #i‚de‡
_SYS_CDEFS_H_


41 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


44 
	~<sys/cdefs.h
>

46 
	#ö_cksum
(
m
, 
Àn
Ë
	`ö_cksum_skù
(m,Üí, 0)

	)

48 #i‡
deföed
(
IPVERSION
) && (IPVERSION == 4)

55 #ifde‡
__CC_SUPPORTS___INLINE


57 
__ölöe
 

58 
	$ö_cksum_upd©e
(
ù
 *ip)

60 
__tmpsum
;

61 
__tmpsum
 = ()
	`¡ohs
(
ù
->
ù_sum
) + 256;

62 
ù
->
ù_sum
 = 
	`ht⁄s
(
__tmpsum
 + (__tmpsum >> 16));

63 
	}
}

67 
	#ö_cksum_upd©e
(
ù
) \

69 
__tmpsum
; \

70 
__tmpsum
 = ()
	`¡ohs
(
ù
->
ù_sum
) + 256; \

71 
ù
->
ù_sum
 = 
	`ht⁄s
(
__tmpsum
 + (__tmpsum >> 16)); \

72 } 0)

	)

77 #ifde‡
_KERNEL


78 #i‡
deföed
(
IPVERSION
) && (IPVERSION == 4)

79 
u_öt
 
ö_cksum_hdr
(c⁄° 
ù
 *ip);

81 
u_sh‹t
 
ö_addw‹d
(u_sh‹à
sum
, u_sh‹à
b
);

82 
u_sh‹t
 
ö_p£udo
(
u_öt
 
sum
, u_öà
b
, u_öà
c
);

83 
u_sh‹t
 
ö_cksum_skù
(
mbuf
 *
m
, 
Àn
, 
skù
);

	@src/nvidia-drm/machine/intr_machdep.h

31 #i‚de‡
__MACHINE_INTR_MACHDEP_H__


32 
	#__MACHINE_INTR_MACHDEP_H__


	)

34 
	~<x86/öå_machdï.h
>

40 
	snmi_p˝u
 {

41 
ªgi°î_t
 
	m≈_p˝u
;

42 
ªgi°î_t
 
	m__∑ddög
;

	@src/nvidia-drm/machine/iodev.h

30 #i‚de‡
_MACHINE_IODEV_H_


31 
	#_MACHINE_IODEV_H_


	)

33 #ifde‡
_KERNEL


34 
	~<machöe/˝ufunc.h
>

36 
	#iodev_ªad_1
 
öb


	)

37 
	#iodev_ªad_2
 
öw


	)

38 
	#iodev_ªad_4
 
öl


	)

39 
	#iodev_wrôe_1
 
outb


	)

40 
	#iodev_wrôe_2
 
outw


	)

41 
	#iodev_wrôe_4
 
oué


	)

43 
iodev_›í
(
thªad
 *
td
);

44 
iodev_˛o£
(
thªad
 *
td
);

45 
iodev_io˘l
(
u_l⁄g
 
cmd
, 
ˇddr_t
 
d©a
);

	@src/nvidia-drm/machine/kdb.h

31 #i‚de‡
_MACHINE_KDB_H_


32 
	#_MACHINE_KDB_H_


	)

34 
	~<machöe/‰ame.h
>

35 
	~<machöe/p¶.h
>

37 
	#KDB_STOPPEDPCB
(
pc
Ë&
°›pcbs
[pc->
pc_˝uid
]

	)

39 
__ölöe
 

40 
	$kdb_˝u_˛ór_sögÀ°ï
()

42 
kdb_‰ame
->
tf_rÊags
 &~
PSL_T
;

43 
	}
}

45 
__ölöe
 

46 
	$kdb_˝u_£t_sögÀ°ï
()

48 
kdb_‰ame
->
tf_rÊags
 |
PSL_T
;

49 
	}
}

51 
__ölöe
 

52 
	$kdb_˝u_sync_iˇche
(*
addr
, 
size_t
 
size
)

54 
	}
}

56 
__ölöe
 

57 
	$kdb_˝u_å≠
(
ty≥
, 
code
)

59 
	}
}

	@src/nvidia-drm/machine/limits.h

35 #i‚de‡
_MACHINE_LIMITS_H_


36 
	#_MACHINE_LIMITS_H_


	)

38 
	~<sys/cdefs.h
>

40 #ifde‡
__CC_SUPPORTS_WARNING


44 
	~<sys/limôs.h
>

	@src/nvidia-drm/machine/md_var.h

34 #i‚de‡
_MACHINE_MD_VAR_H_


35 
	#_MACHINE_MD_VAR_H_


	)

37 
	~<x86/x86_v¨.h
>

39 
uöt64_t
 *
vm_∑ge_dump
;

40 
hw_lowî_amd64_sh¨ed∑ge
;

41 
hw_ibrs_dißbÀ
;

42 
hw_ssb_dißbÀ
;

43 
nmi_Êush_l1d_sw
;

45 
vm_∑ddr_t
 
öãl_gøphics_°ﬁí_ba£
;

46 
vm_∑ddr_t
 
öãl_gøphics_°ﬁí_size
;

52 
kî≈hys
[];

54 
	gßveÂu
;

55 
	gsy£¡vec
;

57 
amd64_c⁄f_Á°_sysˇŒ
();

58 
amd64_db_ªsume_dbªg
();

59 
amd64_lowî_sh¨ed_∑ge
(
sy£¡vec
 *);

60 
amd64_sysˇŒ
(
thªad
 *
td
, 
åa˚d
);

61 
	$d‹ëi_úë
(Ë
	`__asm
(
	`__STRING
(
d‹ëi_úë
));

62 
	$d‹ëi_úë_Áu…
(Ë
	`__asm
(
	`__STRING
(
d‹ëi_úë_Áu…
));

63 
	$ld_ds
(Ë
	`__asm
(
	`__STRING
(
ld_ds
));

64 
	$ld_es
(Ë
	`__asm
(
	`__STRING
(
ld_es
));

65 
	$ld_fs
(Ë
	`__asm
(
	`__STRING
(
ld_fs
));

66 
	$ld_gs
(Ë
	`__asm
(
	`__STRING
(
ld_gs
));

67 
	$ld_fsba£
(Ë
	`__asm
(
	`__STRING
(
ld_fsba£
));

68 
	$ld_gsba£
(Ë
	`__asm
(
	`__STRING
(
ld_gsba£
));

69 
	$ds_lﬂd_Áu…
(Ë
	`__asm
(
	`__STRING
(
ds_lﬂd_Áu…
));

70 
	$es_lﬂd_Áu…
(Ë
	`__asm
(
	`__STRING
(
es_lﬂd_Áu…
));

71 
	$fs_lﬂd_Áu…
(Ë
	`__asm
(
	`__STRING
(
fs_lﬂd_Áu…
));

72 
	$gs_lﬂd_Áu…
(Ë
	`__asm
(
	`__STRING
(
gs_lﬂd_Áu…
));

73 
	$fsba£_lﬂd_Áu…
(Ë
	`__asm
(
	`__STRING
(
fsba£_lﬂd_Áu…
));

74 
	$gsba£_lﬂd_Áu…
(Ë
	`__asm
(
	`__STRING
(
gsba£_lﬂd_Áu…
));

75 
	`Â°©e_dr›
(
thªad
 *
td
);

76 
	`∑gezîo
(*
addr
);

77 
	`£tidt
(
idx
, 
Æüs_f‹_öth™d_t
 *
func
, 
typ
, 
d∂
, 
i°
);

78 
	`s£2_∑gezîo
(*
addr
);

79 
ßveÂu
 *
	`gë_pcb_u£r_ßve_td
(
thªad
 *
td
);

80 
ßveÂu
 *
	`gë_pcb_u£r_ßve_pcb
(
pcb
 *pcb);

81 
	`pci_óæy_quúks
();

	@src/nvidia-drm/machine/memdev.h

31 #i‚de‡
_MACHINE_MEMDEV_H_


32 
	#_MACHINE_MEMDEV_H_


	)

34 
	#CDEV_MINOR_MEM
 0

	)

35 
	#CDEV_MINOR_KMEM
 1

	)

37 
d_›í_t
 
	gmem›í
;

38 
d_ªad_t
 
	gmemrw
;

39 
d_io˘l_t
 
	gmemio˘l
;

40 
d_mm≠_t
 
	gmemmm≠
;

	@src/nvidia-drm/machine/metadata.h

6 
	~<x86/mëad©a.h
>

	@src/nvidia-drm/machine/minidump.h

31 #i‚def 
_MACHINE_MINIDUMP_H_


32 
	#_MACHINE_MINIDUMP_H_
 1

	)

34 
	#MINIDUMP_MAGIC
 "möidum∞FªeBSD/amd64"

	)

35 
	#MINIDUMP_VERSION
 2

	)

37 
	smöidumphdr
 {

38 
	mmagic
[24];

39 
uöt32_t
 
	mvîsi⁄
;

40 
uöt32_t
 
	mmsgbufsize
;

41 
uöt32_t
 
	mbôm≠size
;

42 
uöt32_t
 
	mpm≠size
;

43 
uöt64_t
 
	mkînba£
;

44 
uöt64_t
 
	mdm≠ba£
;

45 
uöt64_t
 
	mdm≠íd
;

	@src/nvidia-drm/machine/mp_watchdog.h

31 #i‚def 
_MACHINE_MP_WATCHDOG_H_


32 
	#_MACHINE_MP_WATCHDOG_H_


	)

34 
≠_w©chdog
(
u_öt
 
˝uid
);

	@src/nvidia-drm/machine/nexusvar.h

32 #i‚de‡
_MACHINE_NEXUSVAR_H_


33 
	#_MACHINE_NEXUSVAR_H_


	)

35 
	s√xus_devi˚
 {

36 
ªsour˚_li°
 
	mnx_ªsour˚s
;

39 
DECLARE_CLASS
(
√xus_drivî
);

41 
rm™
 
úq_rm™
, 
drq_rm™
, 
p‹t_rm™
, 
mem_rm™
;

43 
√xus_öô_ªsour˚s
();

	@src/nvidia-drm/machine/npx.h

6 
	~<x86/Âu.h
>

	@src/nvidia-drm/machine/ofw_machdep.h

6 
	~<x86/ofw_machdï.h
>

	@src/nvidia-drm/machine/param.h

45 #i‚de‡
_AMD64_INCLUDE_PARAM_H_


46 
	#_AMD64_INCLUDE_PARAM_H_


	)

48 
	~<machöe/_Æign.h
>

55 
	#__HAVE_ACPI


	)

56 
	#__PCI_REROUTE_INTERRUPT


	)

58 #i‚de‡
MACHINE


59 
	#MACHINE
 "amd64"

	)

61 #i‚de‡
MACHINE_ARCH


62 
	#MACHINE_ARCH
 "amd64"

	)

64 #i‚de‡
MACHINE_ARCH32


65 
	#MACHINE_ARCH32
 "i386"

	)

68 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

69 #i‚de‡
MAXCPU


70 
	#MAXCPU
 256

	)

73 
	#MAXCPU
 1

	)

76 #i‚de‡
MAXMEMDOM


77 
	#MAXMEMDOM
 8

	)

80 
	#ALIGNBYTES
 
_ALIGNBYTES


	)

81 
	#ALIGN
(
p
Ë
	`_ALIGN
’)

	)

88 
	#ALIGNED_POINTER
(
p
, 
t
Ë1

	)

94 
	#CACHE_LINE_SHIFT
 6

	)

95 
	#CACHE_LINE_SIZE
 (1 << 
CACHE_LINE_SHIFT
)

	)

98 
	#NPTEPG
 (
PAGE_SIZE
/( (
±_íåy_t
)))

	)

99 
	#NPTEPGSHIFT
 9

	)

100 
	#PAGE_SHIFT
 12

	)

101 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
Ë

	)

102 
	#PAGE_MASK
 (
PAGE_SIZE
-1)

	)

104 
	#NPDEPG
 (
PAGE_SIZE
/( (
pd_íåy_t
)))

	)

105 
	#NPDEPGSHIFT
 9

	)

106 
	#PDRSHIFT
 21

	)

107 
	#NBPDR
 (1<<
PDRSHIFT
Ë

	)

108 
	#PDRMASK
 (
NBPDR
-1)

	)

110 
	#NPDPEPG
 (
PAGE_SIZE
/( (
pdp_íåy_t
)))

	)

111 
	#NPDPEPGSHIFT
 9

	)

112 
	#PDPSHIFT
 30

	)

113 
	#NBPDP
 (1<<
PDPSHIFT
Ë

	)

114 
	#PDPMASK
 (
NBPDP
-1)

	)

116 
	#NPML4EPG
 (
PAGE_SIZE
/( (
pml4_íåy_t
)))

	)

117 
	#NPML4EPGSHIFT
 9

	)

118 
	#PML4SHIFT
 39

	)

119 
	#NBPML4
 (1UL<<
PML4SHIFT
)

	)

120 
	#PML4MASK
 (
NBPML4
-1)

	)

122 
	#MAXPAGESIZES
 3

	)

124 
	#IOPAGES
 2

	)

130 
	#IOPERM_BITMAP_SIZE
 (
IOPAGES
 * 
PAGE_SIZE
 + 1)

	)

132 #i‚def 
KSTACK_PAGES


133 
	#KSTACK_PAGES
 4

	)

135 
	#KSTACK_GUARD_PAGES
 1

	)

140 
	#round_∑ge
(
x
Ë(((()(x)Ë+ 
PAGE_MASK
Ë& ~(PAGE_MASK))

	)

141 
	#åunc_∑ge
(
x
Ë(()(xË& ~(
PAGE_MASK
))

	)

142 
	#åunc_2m∑ge
(
x
Ë(()(xË& ~
PDRMASK
)

	)

143 
	#round_2m∑ge
(
x
Ë(((()(x)Ë+ 
PDRMASK
Ë& ~PDRMASK)

	)

144 
	#åunc_1g∑ge
(
x
Ë(()(xË& ~
PDPMASK
)

	)

146 
	#©›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

147 
	#±ﬂ
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

149 
	#amd64_bt›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

150 
	#amd64_±ob
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

152 
	#pgtok
(
x
Ë(()(xË* (
PAGE_SIZE
 / 1024))

	)

154 
	#INKERNEL
(
va
Ë(((vaË>
DMAP_MIN_ADDRESS
 && (vaË< 
DMAP_MAX_ADDRESS
) \

155 || ((
va
Ë>
VM_MIN_KERNEL_ADDRESS
 && (vaË< 
VM_MAX_KERNEL_ADDRESS
))

	)

157 #ifde‡
SMP


158 
	#SC_TABLESIZE
 1024

	)

	@src/nvidia-drm/machine/pc/bios.h

32 #i‚de‡
_MACHINE_PC_BIOS_H_


33 
	#_MACHINE_PC_BIOS_H_


	)

38 
	#SMAP_SIG
 0x534D4150

	)

40 
	#SMAP_TYPE_MEMORY
 1

	)

41 
	#SMAP_TYPE_RESERVED
 2

	)

42 
	#SMAP_TYPE_ACPI_RECLAIM
 3

	)

43 
	#SMAP_TYPE_ACPI_NVS
 4

	)

44 
	#SMAP_TYPE_ACPI_ERROR
 5

	)

45 
	#SMAP_TYPE_DISABLED
 6

	)

46 
	#SMAP_TYPE_PMEM
 7

	)

47 
	#SMAP_TYPE_PRAM
 12

	)

49 
	#SMAP_XATTR_ENABLED
 0x00000001

	)

50 
	#SMAP_XATTR_NON_VOLATILE
 0x00000002

	)

51 
	#SMAP_XATTR_MASK
 (
SMAP_XATTR_ENABLED
 | 
SMAP_XATTR_NON_VOLATILE
)

	)

53 
	sbios_sm≠
 {

54 
u_öt64_t
 
	mba£
;

55 
u_öt64_t
 
	mÀngth
;

56 
u_öt32_t
 
	mty≥
;

57 } 
	g__∑cked
;

60 
	sbios_sm≠_x©å
 {

61 
u_öt64_t
 
	mba£
;

62 
u_öt64_t
 
	mÀngth
;

63 
u_öt32_t
 
	mty≥
;

64 
u_öt32_t
 
	mx©å
;

65 } 
	g__∑cked
;

70 
	#SMBIOS_START
 0xf0000

	)

71 
	#SMBIOS_STEP
 0x10

	)

72 
	#SMBIOS_OFF
 0

	)

73 
	#SMBIOS_LEN
 4

	)

74 
	#SMBIOS_SIG
 "_SM_"

	)

76 
	ssmbios_ïs
 {

77 
uöt8_t
 
	m™ch‹_°rög
[4];

78 
uöt8_t
 
	mchecksum
;

79 
uöt8_t
 
	mÀngth
;

80 
uöt8_t
 
	mmaj‹_vîsi⁄
;

81 
uöt8_t
 
	mmö‹_vîsi⁄
;

82 
uöt16_t
 
	mmaximum_°ru˘uª_size
;

83 
uöt8_t
 
	míåy_poöt_ªvisi⁄
;

84 
uöt8_t
 
	mf‹m©ãd_¨ó
[5];

85 
uöt8_t
 
	möãrmedüã_™ch‹_°rög
[5];

86 
uöt8_t
 
	möãrmedüã_checksum
;

87 
uöt16_t
 
	m°ru˘uª_èbÀ_Àngth
;

88 
uöt32_t
 
	m°ru˘uª_èbÀ_addªss
;

89 
uöt16_t
 
	mnumbî_°ru˘uªs
;

90 
uöt8_t
 
	mBCD_ªvisi⁄
;

93 
	ssmbios_°ru˘uª_hódî
 {

94 
uöt8_t
 
	mty≥
;

95 
uöt8_t
 
	mÀngth
;

96 
uöt16_t
 
	mh™dÀ
;

99 #ifde‡
_KERNEL


100 
	#BIOS_PADDRTOVADDR
(
x
Ë((xË+ 
KERNBASE
)

	)

101 
	#BIOS_VADDRTOPADDR
(
x
Ë((xË- 
KERNBASE
)

	)

103 
	sbios_€m_sig«tuª
 {

104 * 
	m™ch‹
;

105 
size_t
 
	moff£t
;

106 
size_t
 
	mtŸÀn
;

107 } 
	g__∑cked
;

109 
	sbios_€m_ønge
 {

110 
u_öt
 
	m‰om
;

111 
u_öt
 
	mto
;

112 } 
	g__∑cked
;

114 
	sbios_€m
 {

115 
bios_€m_ønge
 
	mønge
;

116 
bios_€m_sig«tuª
 
	msig«tuª
[];

117 } 
	g__∑cked
;

119 
bios_€m_°rögs
(
bios_€m
 *
€m
, 
u_ch¨
 *
buf„r
, 
size_t
 
maxÀn
);

120 
uöt32_t
 
bios_sig£¨ch
(uöt32_à
°¨t
, 
u_ch¨
 *
sig
, 
sigÀn
, 
∑øÀn
,

121 
sigofs
);

122 
bios_add_sm≠_íåõs
(
bios_sm≠
 *
sm≠ba£
, 
u_öt32_t
 
sm≠size
,

123 
vm_∑ddr_t
 *
physm≠
, *
physm≠_idx
);

	@src/nvidia-drm/machine/pc/display.h

9 
	#FG_BLACK
 0

	)

10 
	#FG_BLUE
 1

	)

11 
	#FG_GREEN
 2

	)

12 
	#FG_CYAN
 3

	)

13 
	#FG_RED
 4

	)

14 
	#FG_MAGENTA
 5

	)

15 
	#FG_BROWN
 6

	)

16 
	#FG_LIGHTGREY
 7

	)

17 
	#FG_DARKGREY
 8

	)

18 
	#FG_LIGHTBLUE
 9

	)

19 
	#FG_LIGHTGREEN
 10

	)

20 
	#FG_LIGHTCYAN
 11

	)

21 
	#FG_LIGHTRED
 12

	)

22 
	#FG_LIGHTMAGENTA
 13

	)

23 
	#FG_YELLOW
 14

	)

24 
	#FG_WHITE
 15

	)

25 
	#FG_BLINK
 0x80

	)

29 
	#BG_BLACK
 0x00

	)

30 
	#BG_BLUE
 0x10

	)

31 
	#BG_GREEN
 0x20

	)

32 
	#BG_CYAN
 0x30

	)

33 
	#BG_RED
 0x40

	)

34 
	#BG_MAGENTA
 0x50

	)

35 
	#BG_BROWN
 0x60

	)

36 
	#BG_LIGHTGREY
 0x70

	)

40 
	#FG_UNDERLINE
 0x01

	)

41 
	#FG_INTENSE
 0x08

	)

45 
	#BG_INTENSE
 0x10

	)

	@src/nvidia-drm/machine/pcb.h

39 #i‚de‡
_AMD64_PCB_H_


40 
	#_AMD64_PCB_H_


	)

45 
	~<machöe/Âu.h
>

46 
	~<machöe/£gmíts.h
>

48 #ifde‡
__amd64__


53 
	spcb
 {

54 
ªgi°î_t
 
	mpcb_r15
;

55 
ªgi°î_t
 
	mpcb_r14
;

56 
ªgi°î_t
 
	mpcb_r13
;

57 
ªgi°î_t
 
	mpcb_r12
;

58 
ªgi°î_t
 
	mpcb_rbp
;

59 
ªgi°î_t
 
	mpcb_r•
;

60 
ªgi°î_t
 
	mpcb_rbx
;

61 
ªgi°î_t
 
	mpcb_rù
;

62 
ªgi°î_t
 
	mpcb_fsba£
;

63 
ªgi°î_t
 
	mpcb_gsba£
;

64 
ªgi°î_t
 
	mpcb_kgsba£
;

65 
ªgi°î_t
 
	mpcb_¸0
;

66 
ªgi°î_t
 
	mpcb_¸2
;

67 
ªgi°î_t
 
	mpcb_¸3
;

68 
ªgi°î_t
 
	mpcb_¸4
;

69 
ªgi°î_t
 
	mpcb_dr0
;

70 
ªgi°î_t
 
	mpcb_dr1
;

71 
ªgi°î_t
 
	mpcb_dr2
;

72 
ªgi°î_t
 
	mpcb_dr3
;

73 
ªgi°î_t
 
	mpcb_dr6
;

74 
ªgi°î_t
 
	mpcb_dr7
;

76 
ªgi⁄_des¸ùt‹
 
	mpcb_gdt
;

77 
ªgi⁄_des¸ùt‹
 
	mpcb_idt
;

78 
ªgi⁄_des¸ùt‹
 
	mpcb_ldt
;

79 
uöt16_t
 
	mpcb_å
;

81 
u_öt
 
	mpcb_Êags
;

82 
	#PCB_FULL_IRET
 0x01

	)

83 
	#PCB_DBREGS
 0x02

	)

84 
	#PCB_KERNFPU
 0x04

	)

85 
	#PCB_FPUINITDONE
 0x08

	)

86 
	#PCB_USERFPUINITDONE
 0x10

	)

87 
	#PCB_32BIT
 0x40

	)

88 
	#PCB_FPUNOSAVE
 0x80

	)

90 
uöt16_t
 
	mpcb_öôül_Âucw
;

93 
ˇddr_t
 
	mpcb_⁄Áu…
;

95 
uöt64_t
 
	mpcb_ßved_u¸3
;

98 
amd64tss
 *
	mpcb_ts•
;

101 
ªgi°î_t
 
	mpcb_e„r
;

102 
ªgi°î_t
 
	mpcb_°¨
;

103 
ªgi°î_t
 
	mpcb_l°¨
;

104 
ªgi°î_t
 
	mpcb_c°¨
;

105 
ªgi°î_t
 
	mpcb_sfmask
;

107 
ßveÂu
 *
	mpcb_ßve
;

109 
uöt64_t
 
	mpcb_∑d
[5];

113 
	ssu•pcb
 {

114 
pcb
 
	m•_pcb
;

117 *
	m•_Âusu•íd
;

121 #ifde‡
_KERNEL


122 
	gå≠‰ame
;

124 
˛ór_pcb_Êags
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
);

125 
make˘x
(
å≠‰ame
 *, 
pcb
 *);

126 
£t_pcb_Êags
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
);

127 
£t_pcb_Êags_øw
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
);

128 
	$ßve˘x
(
pcb
 *Ë
__ªtu∫s_twi˚
;

129 
	`ªsume˘x
(
pcb
 *);

132 
	#upd©e_pcb_ba£s
(
pcb
Ë
	`£t_pcb_Êags
(’cb), 
PCB_FULL_IRET
)

	)

	@src/nvidia-drm/machine/pci_cfgreg.h

6 
	~<x86/pci_cfgªg.h
>

	@src/nvidia-drm/machine/pcpu.h

31 #i‚de‡
_MACHINE_PCPU_H_


32 
	#_MACHINE_PCPU_H_


	)

34 #i‚de‡
_SYS_CDEFS_H_


38 
	#PC_PTI_STACK_SZ
 16

	)

46 
	#PCPU_MD_FIELDS
 \

47 
pc_m⁄ô‹buf
[128] 
	`__Æig√d
(128); \

48 
p˝u
 *
pc_¥v•a˚
; \

49 
pm≠
 *
pc_cuΩm≠
; \

50 
amd64tss
 *
pc_ts•
; \

51 
amd64tss
 *
pc_comm⁄ts•
; \

52 
uöt64_t
 
pc_k¸3
; \

53 
uöt64_t
 
pc_u¸3
; \

54 
uöt64_t
 
pc_ßved_u¸3
; \

55 
ªgi°î_t
 
pc_r•0
; \

56 
ªgi°î_t
 
pc_s¸©ch_r•
; \

57 
ªgi°î_t
 
pc_s¸©ch_øx
; \

58 
u_öt
 
pc_≠ic_id
; \

59 
u_öt
 
pc_a˝i_id
; \

61 
u£r_£gmít_des¸ùt‹
 *
pc_fs32p
; \

63 
u£r_£gmít_des¸ùt‹
 *
pc_gs32p
; \

65 
sy°em_£gmít_des¸ùt‹
 *
pc_ldt
; \

67 
sy°em_£gmít_des¸ùt‹
 *
pc_tss
; \

68 
uöt64_t
 
pc_pm_ßve_˙t
; \

69 
u_öt
 
pc_cmci_mask
; \

70 
uöt64_t
 
pc_dbªg
[16]; \

71 
uöt64_t
 
pc_±i_°ack
[
PC_PTI_STACK_SZ
]; \

72 
ªgi°î_t
 
pc_±i_r•0
; \

73 
pc_dbªg_cmd
; \

74 
u_öt
 
pc_v˝u_id
; \

75 
uöt32_t
 
pc_pcid_√xt
; \

76 
uöt32_t
 
pc_pcid_gí
; \

77 
uöt32_t
 
pc_smp_éb_d⁄e
; \

78 
uöt32_t
 
pc_ibpb_£t
; \

79 
__∑d
[3288]

	)

81 
	#PC_DBREG_CMD_NONE
 0

	)

82 
	#PC_DBREG_CMD_LOAD
 1

	)

84 #ifde‡
_KERNEL


86 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__GNUCLIKE___TYPEOF
)

91 
	#__p˝u_off£t
(
«me
) \

92 
	`__off£tof
(
p˝u
, 
«me
)

	)

97 
	#__p˝u_ty≥
(
«me
) \

98 
	`__ty≥of
(((
p˝u
 *)0)->
«me
)

	)

103 
	#__PCPU_PTR
(
«me
Ë
	`__exãnsi⁄__
 ({ \

104 
	`__p˝u_ty≥
(
«me
Ë*
__p
; \

106 
__asm
 
	`__vﬁ©ûe
("movq %%gs:%1,%0;áddq %2,%0" \

107 : "Ù" (
__p
) \

108 : "m" (*(
p˝u
 *)(
	`__p˝u_off£t
(
pc_¥v•a˚
))), \

109 "i" (
	`__p˝u_off£t
(
«me
))); \

111 
__p
; \

112 })

	)

117 
	#__PCPU_GET
(
«me
Ë
	`__exãnsi⁄__
 ({ \

118 
	`__p˝u_ty≥
(
«me
Ë
__ªs
; \

119 
	s__s
 { \

120 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

121 } 
__s
; \

123 i‡((
__ªs
) == 1 || (__res) == 2 || \

124 (
__ªs
) == 4 || (__res) == 8) { \

125 
__asm
 
	`__vﬁ©ûe
("mov %%gs:%1,%0" \

126 : "Ù" (
__s
) \

127 : "m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
)))); \

128 *(
__s
 *)(*)&
__ªs
 = __s; \

130 
__ªs
 = *
	`__PCPU_PTR
(
«me
); \

132 
__ªs
; \

133 })

	)

139 
	#__PCPU_ADD
(
«me
, 
vÆ
) do { \

140 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

141 
	s__s
 { \

142 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

143 } 
__s
; \

145 
__vÆ
 = (
vÆ
); \

146 i‡((
__vÆ
) == 1 || (__val) == 2 || \

147 (
__vÆ
) == 4 || (__val) == 8) { \

148 
__s
 = *(__†*)(*)&
__vÆ
; \

149 
__asm
 
	`__vﬁ©ûe
("add %1,%%gs:%0" \

150 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

151 : "r" (
__s
)); \

153 *
	`__PCPU_PTR
(
«me
Ë+
__vÆ
; \

154 } 0)

	)

160 
	#__PCPU_INC
(
«me
) do { \

161 
	`CTASSERT
((
	`__p˝u_ty≥
(
«me
)) == 1 || \

162 (
	`__p˝u_ty≥
(
«me
)) == 2 || \

163 (
	`__p˝u_ty≥
(
«me
)) == 4 || \

164 (
	`__p˝u_ty≥
(
«me
)) == 8); \

165 i‡((
	`__p˝u_ty≥
(
«me
)) == 1) { \

166 
__asm
 
	`__vﬁ©ûe
("incb %%gs:%0" \

167 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

168 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

169 } i‡((
	`__p˝u_ty≥
(
«me
)) == 2) { \

170 
__asm
 
	`__vﬁ©ûe
("incw %%gs:%0" \

171 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

172 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

173 } i‡((
	`__p˝u_ty≥
(
«me
)) == 4) { \

174 
__asm
 
	`__vﬁ©ûe
("incl %%gs:%0" \

175 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

176 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

177 } i‡((
	`__p˝u_ty≥
(
«me
)) == 8) { \

178 
__asm
 
	`__vﬁ©ûe
("incq %%gs:%0" \

179 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

180 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

182 } 0)

	)

187 
	#__PCPU_SET
(
«me
, 
vÆ
) { \

188 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

189 
	s__s
 { \

190 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

191 } 
__s
; \

193 
__vÆ
 = (
vÆ
); \

194 i‡((
__vÆ
) == 1 || (__val) == 2 || \

195 (
__vÆ
) == 4 || (__val) == 8) { \

196 
__s
 = *(__†*)(*)&
__vÆ
; \

197 
__asm
 
	`__vﬁ©ûe
("mov %1,%%gs:%0" \

198 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

199 : "r" (
__s
)); \

201 *
	`__PCPU_PTR
(
«me
Ë
__vÆ
; \

203 }

	)

205 
	#gë_p˝u
(Ë
	`__exãnsi⁄__
 ({ \

206 
p˝u
 *
__pc
; \

208 
__asm
 
	`__vﬁ©ûe
("movq %%gs:%1,%0" \

209 : "Ù" (
__pc
) \

210 : "m" (*(
p˝u
 *)(
	`__p˝u_off£t
(
pc_¥v•a˚
)))); \

211 
__pc
; \

212 })

	)

214 
	#PCPU_GET
(
membî
Ë
	`__PCPU_GET
(
pc_
 ## membî)

	)

215 
	#PCPU_ADD
(
membî
, 
vÆ
Ë
	`__PCPU_ADD
(
pc_
 ## membî, vÆ)

	)

216 
	#PCPU_INC
(
membî
Ë
	`__PCPU_INC
(
pc_
 ## membî)

	)

217 
	#PCPU_PTR
(
membî
Ë
	`__PCPU_PTR
(
pc_
 ## membî)

	)

218 
	#PCPU_SET
(
membî
, 
vÆ
Ë
	`__PCPU_SET
(
pc_
 ## membî, vÆ)

	)

220 
	#OFFSETOF_CURTHREAD
 0

	)

221 #ifde‡
__˛™g__


222 #¥agm®
˛™g
 
dügno°ic
 
push


223 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnull-dereference"

225 
__ölöe
 
__puª2
 
thªad
 *

226 
	$__cuπhªad
()

228 
thªad
 *
td
;

230 
	`__asm
("movq %%gs:%1,%0" : "Ù" (
td
)

231 : "m" (*(*)
OFFSETOF_CURTHREAD
));

232  (
td
);

233 
	}
}

234 #ifde‡
__˛™g__


235 #¥agm®
˛™g
 
dügno°ic
 
p›


237 
	#cuπhªad
 (
	`__cuπhªad
())

	)

239 
	#OFFSETOF_CURPCB
 32

	)

240 
__ölöe
 
__puª2
 
pcb
 *

241 
	$__cuΩcb
()

243 
pcb
 *pcb;

245 
	`__asm
("movq %%gs:%1,%0" : "Ù" (
pcb
Ë: "m" (*(*)
OFFSETOF_CURPCB
));

246  (
pcb
);

247 
	}
}

248 
	#cuΩcb
 (
	`__cuΩcb
())

	)

250 
	#IS_BSP
(Ë(
	`PCPU_GET
(
˝uid
Ë=0)

	)

	@src/nvidia-drm/machine/pmap.h

47 #i‚de‡
_MACHINE_PMAP_H_


48 
	#_MACHINE_PMAP_H_


	)

55 
	#X86_PG_V
 0x001

	)

56 
	#X86_PG_RW
 0x002

	)

57 
	#X86_PG_U
 0x004

	)

58 
	#X86_PG_NC_PWT
 0x008

	)

59 
	#X86_PG_NC_PCD
 0x010

	)

60 
	#X86_PG_A
 0x020

	)

61 
	#X86_PG_M
 0x040

	)

62 
	#X86_PG_PS
 0x080

	)

63 
	#X86_PG_PTE_PAT
 0x080

	)

64 
	#X86_PG_G
 0x100

	)

65 
	#X86_PG_AVAIL1
 0x200

	)

66 
	#X86_PG_AVAIL2
 0x400

	)

67 
	#X86_PG_AVAIL3
 0x800

	)

68 
	#X86_PG_PDE_PAT
 0x1000

	)

69 
	#X86_PG_NX
 (1ul<<63Ë

	)

70 
	#X86_PG_AVAIL
(
x
Ë(1u»<< (x))

	)

73 
	#X86_PG_PDE_CACHE
 (
X86_PG_PDE_PAT
 | 
X86_PG_NC_PWT
 | 
X86_PG_NC_PCD
)

	)

74 
	#X86_PG_PTE_CACHE
 (
X86_PG_PTE_PAT
 | 
X86_PG_NC_PWT
 | 
X86_PG_NC_PCD
)

	)

79 
	#EPT_PG_READ
 0x001

	)

80 
	#EPT_PG_WRITE
 0x002

	)

81 
	#EPT_PG_EXECUTE
 0x004

	)

82 
	#EPT_PG_IGNORE_PAT
 0x040

	)

83 
	#EPT_PG_PS
 0x080

	)

84 
	#EPT_PG_A
 0x100

	)

85 
	#EPT_PG_M
 0x200

	)

86 
	#EPT_PG_MEMORY_TYPE
(
x
Ë((xË<< 3Ë

	)

91 
	#PG_V
 
X86_PG_V


	)

92 
	#PG_RW
 
X86_PG_RW


	)

93 
	#PG_U
 
X86_PG_U


	)

94 
	#PG_NC_PWT
 
X86_PG_NC_PWT


	)

95 
	#PG_NC_PCD
 
X86_PG_NC_PCD


	)

96 
	#PG_A
 
X86_PG_A


	)

97 
	#PG_M
 
X86_PG_M


	)

98 
	#PG_PS
 
X86_PG_PS


	)

99 
	#PG_PTE_PAT
 
X86_PG_PTE_PAT


	)

100 
	#PG_G
 
X86_PG_G


	)

101 
	#PG_AVAIL1
 
X86_PG_AVAIL1


	)

102 
	#PG_AVAIL2
 
X86_PG_AVAIL2


	)

103 
	#PG_AVAIL3
 
X86_PG_AVAIL3


	)

104 
	#PG_PDE_PAT
 
X86_PG_PDE_PAT


	)

105 
	#PG_NX
 
X86_PG_NX


	)

106 
	#PG_PDE_CACHE
 
X86_PG_PDE_CACHE


	)

107 
	#PG_PTE_CACHE
 
X86_PG_PTE_CACHE


	)

110 
	#PG_W
 
X86_PG_AVAIL3


	)

111 
	#PG_MANAGED
 
X86_PG_AVAIL2


	)

112 
	#EPT_PG_EMUL_V
 
	`X86_PG_AVAIL
(52)

	)

113 
	#EPT_PG_EMUL_RW
 
	`X86_PG_AVAIL
(53)

	)

114 
	#PG_PROMOTED
 
	`X86_PG_AVAIL
(54Ë

	)

115 
	#PG_FRAME
 (0x000ffffffffff000ul)

	)

116 
	#PG_PS_FRAME
 (0x000ffffff„00000ul)

	)

122 
	#PG_PTE_PROMOTE
 (
PG_NX
 | 
PG_MANAGED
 | 
PG_W
 | 
PG_G
 | 
PG_PTE_CACHE
 | \

123 
PG_M
 | 
PG_A
 | 
PG_U
 | 
PG_RW
 | 
PG_V
)

	)

129 
	#PGEX_P
 0x01

	)

130 
	#PGEX_W
 0x02

	)

131 
	#PGEX_U
 0x04

	)

132 
	#PGEX_RSV
 0x08

	)

133 
	#PGEX_I
 0x10

	)

144 #ifde‡
AMD64_NPT_AWARE


145 #unde‡
PG_AVAIL1


146 #unde‡
PG_G


147 #unde‡
PG_A


148 #unde‡
PG_M


149 #unde‡
PG_PDE_PAT


150 #unde‡
PG_PDE_CACHE


151 #unde‡
PG_PTE_PAT


152 #unde‡
PG_PTE_CACHE


153 #unde‡
PG_RW


154 #unde‡
PG_V


161 
	#KVADDR
(
l4
, 
l3
, 
l2
, 
l1
) ( \

163 (()(
l4
Ë<< 
PML4SHIFT
) | \

164 (()(
l3
Ë<< 
PDPSHIFT
) | \

165 (()(
l2
Ë<< 
PDRSHIFT
) | \

166 (()(
l1
Ë<< 
PAGE_SHIFT
))

	)

168 
	#UVADDR
(
l4
, 
l3
, 
l2
, 
l1
) ( \

169 (()(
l4
Ë<< 
PML4SHIFT
) | \

170 (()(
l3
Ë<< 
PDPSHIFT
) | \

171 (()(
l2
Ë<< 
PDRSHIFT
) | \

172 (()(
l1
Ë<< 
PAGE_SHIFT
))

	)

180 
	#NKPML4E
 4

	)

182 
	#NUPML4E
 (
NPML4EPG
/2Ë

	)

183 
	#NUPDPE
 (
NUPML4E
*
NPDPEPG
)

	)

184 
	#NUPDE
 (
NUPDPE
*
NPDEPG
Ë

	)

193 
	#NDMPML4E
 8

	)

211 
	#PML4PML4I
 (
NPML4EPG
/2Ë

	)

213 
	#KPML4BASE
 (
NPML4EPG
-
NKPML4E
Ë

	)

214 
	#DMPML4I
 
	`rounddown
(
KPML4BASE
-
NDMPML4E
, NDMPML4EË

	)

216 
	#KPML4I
 (
NPML4EPG
-1)

	)

217 
	#KPDPI
 (
NPDPEPG
-2Ë

	)

220 
	#LMSPML4I
 (
PML4PML4I
 + 1)

	)

221 
	#LMEPML4I
 (
DMPML4I
 - 1)

	)

226 
	#ISA_HOLE_START
 0xa0000

	)

227 
	#ISA_HOLE_LENGTH
 (0x100000-
ISA_HOLE_START
)

	)

229 
	#PMAP_PCID_NONE
 0xffffffff

	)

230 
	#PMAP_PCID_KERN
 0

	)

231 
	#PMAP_PCID_OVERMAX
 0x1000

	)

232 
	#PMAP_PCID_OVERMAX_KERN
 0x800

	)

233 
	#PMAP_PCID_USER_PT
 0x800

	)

235 
	#PMAP_NO_CR3
 (~0UL)

	)

237 #i‚de‡
LOCORE


239 
	~<sys/queue.h
>

240 
	~<sys/_˝u£t.h
>

241 
	~<sys/_lock.h
>

242 
	~<sys/_muãx.h
>

244 
	~<vm/_vm_ødix.h
>

246 
u_öt64_t
 
	tpd_íåy_t
;

247 
u_öt64_t
 
	t±_íåy_t
;

248 
u_öt64_t
 
	tpdp_íåy_t
;

249 
u_öt64_t
 
	tpml4_íåy_t
;

254 #ifde‡
_KERNEL


255 
	#addr_PTm≠
 (
	`KVADDR
(
PML4PML4I
, 0, 0, 0))

	)

256 
	#addr_PDm≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, 0, 0))

	)

257 
	#addr_PDPm≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, 0))

	)

258 
	#addr_PML4m≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, PML4PML4I))

	)

259 
	#addr_PML4pml4e
 (
addr_PML4m≠
 + (
PML4PML4I
 * (
pml4_íåy_t
)))

	)

260 
	#PTm≠
 ((
±_íåy_t
 *)(
addr_PTm≠
))

	)

261 
	#PDm≠
 ((
pd_íåy_t
 *)(
addr_PDm≠
))

	)

262 
	#PDPm≠
 ((
pd_íåy_t
 *)(
addr_PDPm≠
))

	)

263 
	#PML4m≠
 ((
pd_íåy_t
 *)(
addr_PML4m≠
))

	)

264 
	#PML4pml4e
 ((
pd_íåy_t
 *)(
addr_PML4pml4e
))

	)

266 
nk±
;

267 
u_öt64_t
 
KPDPphys
;

268 
u_öt64_t
 
KPML4phys
;

276 
±_íåy_t
 *
vt›ã
(
vm_off£t_t
);

277 
	#vt›hys
(
va
Ë
	`pm≠_kexåa˘
(((
vm_off£t_t
Ë(va)))

	)

279 
	#±e_lﬂd_°‹e
(
±ï
, 
±e
Ë
	`©omic_sw≠_l⁄g
’ãp,Öã)

	)

280 
	#±e_lﬂd_˛ór
(
±ï
Ë
	`©omic_sw≠_l⁄g
’ãp, 0)

	)

281 
	#±e_°‹e
(
±ï
, 
±e
) do { \

282 *(
u_l⁄g
 *)(
±ï
Ë(u_l⁄g)(
±e
); \

283 } 0)

	)

284 
	#±e_˛ór
(
±ï
Ë
	`±e_°‹e
’ãp, 0)

	)

286 
	#pde_°‹e
(
pdï
, 
pde
Ë
	`±e_°‹e
’dï,Öde)

	)

288 
±_íåy_t
 
pg_nx
;

295 
	gpv_íåy
;

296 
	gpv_chunk
;

302 
	smd_∑ge
 {

303 
TAILQ_HEAD
(, 
pv_íåy
Ë
	mpv_li°
;

304 
	mpv_gí
;

305 
	m∑t_mode
;

308 
	epm≠_ty≥
 {

309 
	mPT_X86
,

310 
	mPT_EPT
,

311 
	mPT_RVI
,

314 
	spm≠_pcids
 {

315 
uöt32_t
 
	mpm_pcid
;

316 
uöt32_t
 
	mpm_gí
;

323 
	spm≠
 {

324 
mtx
 
	mpm_mtx
;

325 
pml4_íåy_t
 *
	mpm_pml4
;

326 
pml4_íåy_t
 *
	mpm_pml4u
;

327 
uöt64_t
 
	mpm_¸3
;

328 
uöt64_t
 
	mpm_u¸3
;

329 
TAILQ_HEAD
(,
pv_chunk
Ë
	mpm_pvchunk
;

330 
˝u£t_t
 
	mpm_a˘ive
;

331 
pm≠_ty≥
 
	mpm_ty≥
;

332 
pm≠_°©i°ics
 
	mpm_°©s
;

333 
vm_ødix
 
	mpm_roŸ
;

334 
	mpm_ïtgí
;

335 
	mpm_Êags
;

336 
pm≠_pcids
 
	mpm_pcids
[
MAXCPU
];

340 
	#PMAP_NESTED_IPIMASK
 0xff

	)

341 
	#PMAP_PDE_SUPERPAGE
 (1 << 8Ë

	)

342 
	#PMAP_EMULATE_AD_BITS
 (1 << 9Ë

	)

343 
	#PMAP_SUPPORTS_EXEC_ONLY
 (1 << 10Ë

	)

345 
pm≠
 *
	tpm≠_t
;

347 #ifde‡
_KERNEL


348 
pm≠
 
kî√l_pm≠_°‹e
;

349 
	#kî√l_pm≠
 (&
kî√l_pm≠_°‹e
)

	)

351 
	#PMAP_LOCK
(
pm≠
Ë
	`mtx_lock
(&’m≠)->
pm_mtx
)

	)

352 
	#PMAP_LOCK_ASSERT
(
pm≠
, 
ty≥
) \

353 
	`mtx_as£π
(&(
pm≠
)->
pm_mtx
, (
ty≥
))

	)

354 
	#PMAP_LOCK_DESTROY
(
pm≠
Ë
	`mtx_de°roy
(&’m≠)->
pm_mtx
)

	)

355 
	#PMAP_LOCK_INIT
(
pm≠
Ë
	`mtx_öô
(&’m≠)->
pm_mtx
, "pmap", \

356 
NULL
, 
MTX_DEF
 | 
MTX_DUPOK
)

	)

357 
	#PMAP_LOCKED
(
pm≠
Ë
	`mtx_ow√d
(&’m≠)->
pm_mtx
)

	)

358 
	#PMAP_MTX
(
pm≠
Ë(&’m≠)->
pm_mtx
)

	)

359 
	#PMAP_TRYLOCK
(
pm≠
Ë
	`mtx_åylock
(&’m≠)->
pm_mtx
)

	)

360 
	#PMAP_UNLOCK
(
pm≠
Ë
	`mtx_u∆ock
(&’m≠)->
pm_mtx
)

	)

362 
pm≠_pöô_ty≥
(
pm≠_t
 
pm≠
, 
pm≠_ty≥
 
pm_ty≥
, 
Êags
);

363 
pm≠_emuœã_ac˚s£d_dúty
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
, 
·y≥
);

370 
	spv_íåy
 {

371 
vm_off£t_t
 
	mpv_va
;

372 
TAILQ_ENTRY
(
pv_íåy
Ë
	mpv_√xt
;

373 } *
	tpv_íåy_t
;

379 
	#_NPCM
 3

	)

380 
	#_NPCPV
 168

	)

381 
	#PV_CHUNK_HEADER
 \

382 
pm≠_t
 
pc_pm≠
; \

383 
	`TAILQ_ENTRY
(
pv_chunk
Ë
pc_li°
; \

384 
uöt64_t
 
pc_m≠
[
_NPCM
]; \

385 
	`TAILQ_ENTRY
(
pv_chunk
Ë
pc_Ãu
;

	)

387 
	spv_chunk_hódî
 {

388 
	mPV_CHUNK_HEADER


391 
	spv_chunk
 {

392 
PV_CHUNK_HEADER


393 
pv_íåy
 
	mpc_pvíåy
[
_NPCPV
];

396 #ifdef 
_KERNEL


398 
ˇddr_t
 
CADDR1
;

399 
±_íåy_t
 *
CMAP1
;

400 
vm_∑ddr_t
 
phys_avaû
[];

401 
vm_∑ddr_t
 
dump_avaû
[];

402 
vm_off£t_t
 
vútuÆ_avaû
;

403 
vm_off£t_t
 
vútuÆ_íd
;

404 
vm_∑ddr_t
 
dm≠limô
;

405 
pm≠_pcid_íabÀd
;

406 
övpcid_w‹ks
;

408 
	#pm≠_∑ge_gë_mem©å
(
m
Ë((
vm_mem©å_t
)(m)->
md
.
∑t_mode
)

	)

409 
	#pm≠_∑ge_is_wrôe_m≠≥d
(
m
Ë(((m)->
aÊags
 & 
PGA_WRITEABLE
Ë!0)

	)

410 
	#pm≠_unm≠bios
(
va
, 
sz
Ë
	`pm≠_unm≠dev
((va), (sz))

	)

412 
	gthªad
;

414 
pm≠_a˘iv©e_boŸ
(
pm≠_t
 
pm≠
);

415 
pm≠_a˘iv©e_sw
(
thªad
 *);

416 
pm≠_boŸ°øp
(
vm_∑ddr_t
 *);

417 
pm≠_ˇche_bôs
(
pm≠_t
 
pm≠
, 
mode
, 
boﬁón_t
 
is_pde
);

418 
pm≠_ch™ge_©å
(
vm_off£t_t
, 
vm_size_t
, );

419 
pm≠_demŸe_DMAP
(
vm_∑ddr_t
 
ba£
, 
vm_size_t
 
Àn
, 
boﬁón_t
 
övÆid©e
);

420 
pm≠_Êush_ˇche_ønge
(
vm_off£t_t
, vm_offset_t);

421 
pm≠_Êush_ˇche_phys_ønge
(
vm_∑ddr_t
, vm_∑ddr_t, 
vm_mem©å_t
);

422 
pm≠_öô_∑t
();

423 
pm≠_kíãr
(
vm_off£t_t
 
va
, 
vm_∑ddr_t
 
∑
);

424 *
pm≠_kíãr_ãmp‹¨y
(
vm_∑ddr_t
 
∑
, 
i
);

425 
vm_∑ddr_t
 
pm≠_kexåa˘
(
vm_off£t_t
);

426 
pm≠_kªmove
(
vm_off£t_t
);

427 
pm≠_œrge_m≠
(
vm_∑ddr_t
, 
vm_size_t
, **, 
vm_mem©å_t
);

428 
pm≠_œrge_m≠_wb
(*
sva
, 
vm_size_t
 
Àn
);

429 
pm≠_œrge_unm≠
(*
sva
, 
vm_size_t
 
Àn
);

430 *
pm≠_m≠bios
(
vm_∑ddr_t
, 
vm_size_t
);

431 *
pm≠_m≠dev
(
vm_∑ddr_t
, 
vm_size_t
);

432 *
pm≠_m≠dev_©å
(
vm_∑ddr_t
, 
vm_size_t
, );

433 *
pm≠_m≠dev_pcõcfg
(
vm_∑ddr_t
 
∑
, 
vm_size_t
 
size
);

434 
boﬁón_t
 
pm≠_∑ge_is_m≠≥d
(
vm_∑ge_t
 
m
);

435 
pm≠_∑ge_£t_mem©å
(
vm_∑ge_t
 
m
, 
vm_mem©å_t
 
ma
);

436 
pm≠_pöô_pml4
(
vm_∑ge_t
);

437 
boﬁ
 
pm≠_ps_íabÀd
(
pm≠_t
 
pm≠
);

438 
pm≠_unm≠dev
(
vm_off£t_t
, 
vm_size_t
);

439 
pm≠_övÆid©e_∑ge
(
pm≠_t
, 
vm_off£t_t
);

440 
pm≠_övÆid©e_ønge
(
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

441 
pm≠_övÆid©e_Æl
(
pm≠_t
);

442 
pm≠_övÆid©e_ˇche
();

443 
pm≠_övÆid©e_ˇche_∑ges
(
vm_∑ge_t
 *
∑ges
, 
cou¡
);

444 
pm≠_övÆid©e_ˇche_ønge
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
);

445 
pm≠_f‹˚_övÆid©e_ˇche_ønge
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
);

446 
pm≠_gë_m≠pög
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
, 
uöt64_t
 *
±r
, *
num
);

447 
boﬁón_t
 
pm≠_m≠_io_å™sõ¡
(
vm_∑ge_t
 *, 
vm_off£t_t
 *, , boolean_t);

448 
pm≠_unm≠_io_å™sõ¡
(
vm_∑ge_t
 *, 
vm_off£t_t
 *, , 
boﬁón_t
);

449 
pm≠_±i_add_kva
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
, 
boﬁ
 
exec
);

450 
pm≠_±i_ªmove_kva
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
);

451 
pm≠_±i_pcid_övÆid©e
(
uöt64_t
 
u¸3
, uöt64_à
k¸3
);

452 
pm≠_±i_pcid_övÕg
(
uöt64_t
 
u¸3
, uöt64_à
k¸3
, 
vm_off£t_t
 
va
);

453 
pm≠_±i_pcid_övÃng
(
uöt64_t
 
u¸3
, uöt64_à
k¸3
, 
vm_off£t_t
 
sva
,

454 
vm_off£t_t
 
eva
);

458 
__ölöe
 
vm_pödex_t


459 
	$pm≠_±e_ödex
(
vm_off£t_t
 
va
)

462  ((
va
 >> 
PAGE_SHIFT
Ë& ((1u»<< 
NPTEPGSHIFT
) - 1));

463 
	}
}

465 
__ölöe
 
vm_pödex_t


466 
	$pm≠_pde_ödex
(
vm_off£t_t
 
va
)

469  ((
va
 >> 
PDRSHIFT
Ë& ((1u»<< 
NPDEPGSHIFT
) - 1));

470 
	}
}

472 
__ölöe
 
vm_pödex_t


473 
	$pm≠_pd≥_ödex
(
vm_off£t_t
 
va
)

476  ((
va
 >> 
PDPSHIFT
Ë& ((1u»<< 
NPDPEPGSHIFT
) - 1));

477 
	}
}

479 
__ölöe
 
vm_pödex_t


480 
	$pm≠_pml4e_ödex
(
vm_off£t_t
 
va
)

483  ((
va
 >> 
PML4SHIFT
Ë& ((1u»<< 
NPML4EPGSHIFT
) - 1));

484 
	}
}

	@src/nvidia-drm/machine/pmc_mdep.h

37 #i‚de‡
_MACHINE_PMC_MDEP_H


38 
	#_MACHINE_PMC_MDEP_H
 1

	)

40 #ifdef 
_KERNEL


41 
	gpmc_mdï
;

44 
	~<dev/hwpmc/hwpmc_amd.h
>

45 
	~<dev/hwpmc/hwpmc_c‹e.h
>

46 
	~<dev/hwpmc/hwpmc_tsc.h
>

47 
	~<dev/hwpmc/hwpmc_unc‹e.h
>

54 
	#PMC_MDEP_CLASS_INDEX_TSC
 1

	)

55 
	#PMC_MDEP_CLASS_INDEX_K8
 2

	)

56 
	#PMC_MDEP_CLASS_INDEX_P4
 2

	)

57 
	#PMC_MDEP_CLASS_INDEX_IAP
 2

	)

58 
	#PMC_MDEP_CLASS_INDEX_IAF
 3

	)

59 
	#PMC_MDEP_CLASS_INDEX_UCP
 4

	)

60 
	#PMC_MDEP_CLASS_INDEX_UCF
 5

	)

74 
	upmc_md_›_pmˇŒoˇã
 {

75 
pmc_md_amd_›_pmˇŒoˇã
 
	mpm_amd
;

76 
pmc_md_üp_›_pmˇŒoˇã
 
	mpm_üp
;

77 
pmc_md_ucf_›_pmˇŒoˇã
 
	mpm_ucf
;

78 
pmc_md_u˝_›_pmˇŒoˇã
 
	mpm_u˝
;

79 
uöt64_t
 
	m__∑d
[4];

83 
	#PMCLOG_READADDR
 
PMCLOG_READ64


	)

84 
	#PMCLOG_EMITADDR
 
PMCLOG_EMIT64


	)

86 #ifdef 
_KERNEL


88 
	upmc_md_pmc
 {

89 
pmc_md_amd_pmc
 
	mpm_amd
;

90 
pmc_md_üf_pmc
 
	mpm_üf
;

91 
pmc_md_üp_pmc
 
	mpm_üp
;

92 
pmc_md_ucf_pmc
 
	mpm_ucf
;

93 
pmc_md_u˝_pmc
 
	mpm_u˝
;

96 
	#PMC_TRAPFRAME_TO_PC
(
TF
Ë((TF)->
tf_rù
)

	)

97 
	#PMC_TRAPFRAME_TO_FP
(
TF
Ë((TF)->
tf_rbp
)

	)

98 
	#PMC_TRAPFRAME_TO_USER_SP
(
TF
Ë((TF)->
tf_r•
)

	)

99 
	#PMC_TRAPFRAME_TO_KERNEL_SP
(
TF
Ë((TF)->
tf_r•
)

	)

101 
	#PMC_AT_FUNCTION_PROLOGUE_PUSH_BP
(
I
) \

102 (((
I
Ë& 0xffffffffË=0xe5894855Ë

	)

103 
	#PMC_AT_FUNCTION_PROLOGUE_MOV_SP_BP
(
I
) \

104 (((
I
Ë& 0x00ffffffË=0x00e58948Ë

	)

105 
	#PMC_AT_FUNCTION_EPILOGUE_RET
(
I
) \

106 (((
I
Ë& 0xFFË=0xC3Ë

	)

108 
	#PMC_IN_TRAP_HANDLER
(
PC
) \

109 ((
PC
Ë>(
uöçå_t
Ë
°¨t_ex˚±i⁄s
 && \

110 (
PC
Ë< (
uöçå_t
Ë
íd_ex˚±i⁄s
)

	)

112 
	#PMC_IN_KERNEL_STACK
(
S
,
START
,
END
) \

113 ((
S
Ë>(
START
Ë&& (SË< (
END
))

	)

114 
	#PMC_IN_KERNEL
(
va
Ë
	`INKERNEL
(va)

	)

116 
	#PMC_IN_USERSPACE
(
va
Ë((vaË<
VM_MAXUSER_ADDRESS
)

	)

119 
	#PMC_FAKE_TRAPFRAME
(
TF
) \

121 (
TF
)->
tf_cs
 = 0; (TF)->
tf_rÊags
 = 0; \

122 
__asm
 
	`__vﬁ©ûe
("movq %%rbp,%0" : "Ù" ((
TF
)->
tf_rbp
)); \

123 
__asm
 
	`__vﬁ©ûe
("movq %%r•,%0" : "Ù" ((
TF
)->
tf_r•
)); \

124 
__asm
 
	`__vﬁ©ûe
("ˇŒ 1‡\n\t1:Ö› %0" : "Ù"((
TF
)->
tf_rù
)); \

125 } 0)

	)

131 
°¨t_ex˚±i⁄s
(), 
íd_ex˚±i⁄s
();

133 
pmc_mdï
 *
pmc_amd_öôülize
();

134 
pmc_amd_föÆize
(
pmc_mdï
 *
_md
);

135 
pmc_mdï
 *
pmc_öãl_öôülize
();

136 
pmc_öãl_föÆize
(
pmc_mdï
 *
_md
);

	@src/nvidia-drm/machine/ppireg.h

30 #i‚de‡
_MACHINE_PPIREG_H_


31 
	#_MACHINE_PPIREG_H_


	)

33 #ifde‡
_KERNEL


35 
	#IO_PPI
 0x61

	)

41 
	#PIT_ENABLETMR2
 0x01

	)

42 
	#PIT_SPKRDATA
 0x02

	)

44 
	#PIT_SPKR
 (
PIT_ENABLETMR2
 | 
PIT_SPKRDATA
)

	)

46 
	#µi_•kr_⁄
(Ë
	`outb
(
IO_PPI
, 
	`öb
(IO_PPIË| 
PIT_SPKR
)

	)

47 
	#µi_•kr_off
(Ë
	`outb
(
IO_PPI
, 
	`öb
(IO_PPIË& ~
PIT_SPKR
)

	)

	@src/nvidia-drm/machine/proc.h

35 #i‚de‡
_MACHINE_PROC_H_


36 
	#_MACHINE_PROC_H_


	)

38 
	~<sys/queue.h
>

39 
	~<machöe/£gmíts.h
>

47 
	s¥oc_ldt
 {

48 
ˇddr_t
 
	mldt_ba£
;

49 
	mldt_ªf˙t
;

52 
	spm≠_övl_gí
 {

53 
u_l⁄g
 
	mgí
;

54 
LIST_ENTRY
(
pm≠_övl_gí
Ë
	mlök
;

60 
	smdthªad
 {

61 
	mmd_•ölock_cou¡
;

62 
ªgi°î_t
 
	mmd_ßved_Êags
;

63 
ªgi°î_t
 
	mmd_•urÊt_addr
;

64 
pm≠_övl_gí
 
	mmd_övl_gí
;

65 
ªgi°î_t
 
	mmd_efút_tmp
;

66 
	mmd_efút_dis_pf
;

69 
	smd¥oc
 {

70 
¥oc_ldt
 *
	mmd_ldt
;

71 
sy°em_£gmít_des¸ùt‹
 
	mmd_ldt_sd
;

74 
	#KINFO_PROC_SIZE
 1088

	)

75 
	#KINFO_PROC32_SIZE
 768

	)

77 
	ssysˇŒ_¨gs
 {

78 
u_öt
 
	mcode
;

79 
sy£¡
 *
	mˇŒp
;

80 
ªgi°î_t
 
	m¨gs
[8];

81 
	m«rg
;

84 #ifdef 
_KERNEL


87 
	#GET_STACK_USAGE
(
tŸÆ
, 
u£d
) do { \

88 
thªad
 *
td
 = 
cuπhªad
; \

89 (
tŸÆ
Ë
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
; \

90 (
u£d
Ë(*)
td
->
td_k°ack
 + \

91 
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
 - \

92 (*)&
td
; \

93 } 0)

	)

95 
¥oc_ldt
 *
u£r_ldt_Æloc
(
¥oc
 *, );

96 
u£r_ldt_‰ì
(
thªad
 *);

97 
	gsyßrch_¨gs
;

98 
syßrch_ldt
(
thªad
 *
td
, 
syßrch_¨gs
 *
u≠
, 
u≠_•a˚
);

99 
amd64_£t_ldt_d©a
(
thªad
 *
td
, 
°¨t
, 
num
,

100 
u£r_£gmít_des¸ùt‹
 *
descs
);

102 
mtx
 
dt_lock
;

103 
max_ldt_£gmít
;

105 
	#NARGREGS
 6

	)

	@src/nvidia-drm/machine/profile.h

35 #i‚de‡
_MACHINE_PROFILE_H_


36 
	#_MACHINE_PROFILE_H_


	)

38 #i‚de‡
_SYS_CDEFS_H_


39 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


42 #ifde‡
_KERNEL


48 
	#FUNCTION_ALIGNMENT
 16

	)

55 
	#_MCOUNT_DECL
 
mcou¡


	)

56 
	#MCOUNT


	)

58 #ifde‡
GUPROF


59 
	#MCOUNT_DECL
(
s
)

	)

60 
	#MCOUNT_ENTER
(
s
)

	)

61 
	#MCOUNT_EXIT
(
s
)

	)

62 #ifde‡
__GNUCLIKE_ASM


63 
	#MCOUNT_OVERHEAD
(
œbñ
) \

64 
__asm
 
	`__vﬁ©ûe
("pushq %0; call __mcount;Öopq %%rcx" \

66 : "i" (
œbñ
) \

67 : "cx", "r10", "r11", "mem‹y")

	)

68 
	#MEXITCOUNT_OVERHEAD
() \

69 
__asm
 
	`__vﬁ©ûe
("call .mexitcount; 1:" \

71 : "r10", "r11", "mem‹y")

	)

72 
	#MEXITCOUNT_OVERHEAD_GETLABEL
(
œbñp
) \

73 
__asm
 
	`__vﬁ©ûe
("movq $1b,%0" : "Ùm" (
œbñp
))

	)

75 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


78 
	#MCOUNT_DECL
(
s
Ë
ªgi°î_t
 s;

	)

79 #ifde‡
SMP


80 
mcou¡_lock
;

81 
	#MCOUNT_ENTER
(
s
Ë{ s = 
	`öå_dißbÀ
(); \

82 !
	`©omic_cmp£t_acq_öt
(&
mcou¡_lock
, 0, 1)) \

83  ; }

	)

84 
	#MCOUNT_EXIT
(
s
Ë{ 
	`©omic_°‹e_ªl_öt
(&
mcou¡_lock
, 0); \

85 
	`öå_ª°‹e
(
s
); }

	)

87 
	#MCOUNT_ENTER
(
s
Ë{ s = 
	`öå_dißbÀ
(); }

	)

88 
	#MCOUNT_EXIT
(
s
Ë(
	`öå_ª°‹e
(s))

	)

92 
böå
();

93 
bå≠
();

94 
eöå
();

95 
u£r
();

97 
	#MCOUNT_FROMPC_USER
(
pc
) \

98 ((
pc
 < (
uötÂå_t
)
VM_MAXUSER_ADDRESS
Ë? (uötÂå_t)
u£r
 :Öc)

	)

100 
	#MCOUNT_FROMPC_INTR
(
pc
) \

101 ((
pc
 >(
uötÂå_t
)
bå≠
 &&Ö¯< (uötÂå_t)
eöå
) ? \

102 ((
pc
 >(
uötÂå_t
)
böå
) ? (uintfptr_t)bintr : \

103 (
uötÂå_t
)
bå≠
Ë: ~0UL)

	)

107 
	#FUNCTION_ALIGNMENT
 4

	)

109 
	#_MCOUNT_DECL
 \

110 
	`_mcou¡
(
uötÂå_t
 
‰ompc
, uötÂå_à
£lÂc
Ë
__u£d
; \

111 
_mcou¡


	)

113 #ifde‡
__GNUCLIKE_ASM


114 
	#MCOUNT
 
	`__asm
(" \n\
.ãxt \n\
.p2Æig¿4,0x90 \n\
.globl .mcou¡ \n\
.ty≥ .mcou¡,@fun˘i⁄ \n\
.mcou¡: \n\
 %rdi \n\
 %rsi \n\
 %rdx \n\
 %rcx \n\
 %r8 \n\
 %r9 \n\
 %øx \n\
 8(%rbp),%rdi \n\
 7*8(%r•),%rsi \n\
 _mcou¡ \n\
 %øx \n\
 %r9 \n\
 %r8 \n\
 %rcx \n\
 %rdx \n\
 %rsi \n\
 %rdi \n\
 \n\
.size .mcou¡, . - .mcou¡");

	)

146 
	#MCOUNT
 \

148 
	`mcou¡
() \

150 
uötÂå_t
 
£lÂc
, 
‰ompc
; \

157 
	`__asm
("movq 8(%%rbp),%0" : "Ù" (
£lÂc
)); \

164 
	`__asm
("movq (%%rbp),%0" : "Ù" (
‰ompc
)); \

165 
‰ompc
 = ((
uötÂå_t
 *)frompc)[1]; \

166 
	`_mcou¡
(
‰ompc
, 
£lÂc
); \

167 }

	)

170 
	#MCOUNT


	)

173 
u_l⁄g
 
	tuötÂå_t
;

181 
u_l⁄g
 
	tÂådiff_t
;

183 #ifde‡
_KERNEL


185 
mcou¡
(
uötÂå_t
 
‰ompc
, uötÂå_à
£lÂc
);

189 
	~<sys/cdefs.h
>

191 
	g__BEGIN_DECLS


192 #ifde‡
__GNUCLIKE_ASM


193 
	$mcou¡
(Ë
	`__asm
(".mcount");

195 
__END_DECLS


	@src/nvidia-drm/machine/psl.h

6 
	~<x86/p¶.h
>

	@src/nvidia-drm/machine/ptrace.h

6 
	~<x86/±ø˚.h
>

	@src/nvidia-drm/machine/pvclock.h

6 
	~<x86/pv˛ock.h
>

	@src/nvidia-drm/machine/reg.h

6 
	~<x86/ªg.h
>

	@src/nvidia-drm/machine/reloc.h

35 #i‚de‡
_I386_MACHINE_RELOC_H_


36 
	#_I386_MACHINE_RELOC_H_


	)

39 
	sªloˇti⁄_öfo
 {

40 
	mr_addªss
;

41 
	mr_symbﬁnum
 : 24,

42 
	mr_p¸ñ
 : 1,

43 
	mr_Àngth
 : 2,

44 
	mr_exã∫
 : 1,

45 
	mr_ba£ªl
 : 1,

46 
	mr_jm±abÀ
 : 1,

47 
	mr_ªœtive
 : 1,

48 
	mr_c›y
 : 1;

	@src/nvidia-drm/machine/resource.h

31 #i‚de‡
_MACHINE_RESOURCE_H_


32 
	#_MACHINE_RESOURCE_H_
 1

	)

39 
	#SYS_RES_IRQ
 1

	)

40 
	#SYS_RES_DRQ
 2

	)

41 
	#SYS_RES_MEMORY
 3

	)

42 
	#SYS_RES_IOPORT
 4

	)

43 #ifde‡
NEW_PCIB


44 
	#PCI_RES_BUS
 5

	)

	@src/nvidia-drm/machine/runq.h

31 #i‚def 
_MACHINE_RUNQ_H_


32 
	#_MACHINE_RUNQ_H_


	)

34 
	#RQB_LEN
 (1Ë

	)

35 
	#RQB_L2BPW
 (6Ë

	)

36 
	#RQB_BPW
 (1<<
RQB_L2BPW
Ë

	)

38 
	#RQB_BIT
(
¥i
Ë(1u»<< (’riË& (
RQB_BPW
 - 1)))

	)

39 
	#RQB_WORD
(
¥i
Ë(’riË>> 
RQB_L2BPW
)

	)

41 
	#RQB_FFS
(
w‹d
Ë(
	`bsfq
(w‹d))

	)

46 
u_öt64_t
 
	trqb_w‹d_t
;

	@src/nvidia-drm/machine/segments.h

39 #i‚de‡
_MACHINE_SEGMENTS_H_


40 
	#_MACHINE_SEGMENTS_H_


	)

46 
	~<x86/£gmíts.h
>

51 
	ssy°em_£gmít_des¸ùt‹
 {

52 
u_öt64_t
 
	msd_lﬁimô
:16;

53 
u_öt64_t
 
	msd_loba£
:24;

54 
u_öt64_t
 
	msd_ty≥
:5;

55 
u_öt64_t
 
	msd_d∂
:2;

56 
u_öt64_t
 
	msd_p
:1;

57 
u_öt64_t
 
	msd_hûimô
:4;

58 
u_öt64_t
 
	msd_xx0
:3;

59 
u_öt64_t
 
	msd_gøn
:1;

60 
u_öt64_t
 
	msd_hiba£
:40 
__∑cked
;

61 
u_öt64_t
 
	msd_xx1
:8;

62 
u_öt64_t
 
	msd_mbz
:5;

63 
u_öt64_t
 
	msd_xx2
:19;

64 } 
	g__∑cked
;

72 
	sso·_£gmít_des¸ùt‹
 {

73 
	mssd_ba£
;

74 
	mssd_limô
;

75 
	mssd_ty≥
:5;

76 
	mssd_d∂
:2;

77 
	mssd_p
:1;

78 
	mssd_l⁄g
:1;

79 
	mssd_def32
:1;

80 
	mssd_gøn
:1;

81 } 
	g__∑cked
;

86 
	sªgi⁄_des¸ùt‹
 {

87 
uöt64_t
 
	mrd_limô
:16;

88 
uöt64_t
 
	mrd_ba£
:64 
__∑cked
;

89 } 
	g__∑cked
;

91 #ifde‡
_KERNEL


92 
u£r_£gmít_des¸ùt‹
 
gdt
[];

93 
so·_£gmít_des¸ùt‹
 
gdt_£gs
[];

94 
g©e_des¸ùt‹
 *
idt
;

95 
ªgi⁄_des¸ùt‹
 
r_gdt
, 
r_idt
;

97 
lgdt
(
ªgi⁄_des¸ùt‹
 *
rdp
);

98 
sdtossd
(
u£r_£gmít_des¸ùt‹
 *
sdp
,

99 
so·_£gmít_des¸ùt‹
 *
ssdp
);

100 
ssdtosd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

101 
u£r_£gmít_des¸ùt‹
 *
sdp
);

102 
ssdtosyssd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

103 
sy°em_£gmít_des¸ùt‹
 *
sdp
);

104 
upd©e_gdt_gsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

105 
upd©e_gdt_fsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

	@src/nvidia-drm/machine/setjmp.h

6 
	~<x86/£tjmp.h
>

	@src/nvidia-drm/machine/sf_buf.h

31 #i‚de‡
_MACHINE_SF_BUF_H_


32 
	#_MACHINE_SF_BUF_H_


	)

40 
ölöe
 
vm_off£t_t


41 
	$sf_buf_kva
(
sf_buf
 *
sf
)

44  (
	`PHYS_TO_DMAP
(
	`VM_PAGE_TO_PHYS
((
vm_∑ge_t
)
sf
)));

45 
	}
}

47 
ölöe
 
vm_∑ge_t


48 
	$sf_buf_∑ge
(
sf_buf
 *
sf
)

51  ((
vm_∑ge_t
)
sf
);

52 
	}
}

	@src/nvidia-drm/machine/sgx.h

36 #i‚de‡
_MACHINE_SGX_H_


37 
	#_MACHINE_SGX_H_


	)

39 
	#SGX_MAGIC
 0xA4

	)

40 
	#SGX_IOC_ENCLAVE_CREATE
 \

41 
	`_IOW
(
SGX_MAGIC
, 0x00, 
sgx_í˛ave_¸óã
)

	)

42 
	#SGX_IOC_ENCLAVE_ADD_PAGE
 \

43 
	`_IOW
(
SGX_MAGIC
, 0x01, 
sgx_í˛ave_add_∑ge
)

	)

44 
	#SGX_IOC_ENCLAVE_INIT
 \

45 
	`_IOW
(
SGX_MAGIC
, 0x02, 
sgx_í˛ave_öô
)

	)

47 
	ssgx_í˛ave_¸óã
 {

48 
uöt64_t
 
	m§c
;

49 } 
	g__∑cked
;

51 
	ssgx_í˛ave_add_∑ge
 {

52 
uöt64_t
 
	maddr
;

53 
uöt64_t
 
	m§c
;

54 
uöt64_t
 
	m£cöfo
;

55 
uöt16_t
 
	mmrmask
;

56 } 
	g__∑cked
;

58 
	ssgx_í˛ave_öô
 {

59 
uöt64_t
 
	maddr
;

60 
uöt64_t
 
	msig°ru˘
;

61 
uöt64_t
 
	meöôtokí
;

62 } 
	g__∑cked
;

	@src/nvidia-drm/machine/sgxreg.h

36 #i‚de‡
_MACHINE_SGXREG_H_


37 
	#_MACHINE_SGXREG_H_


	)

40 
	#SGX_SUCCESS
 0

	)

41 
	#SGX_INVALID_SIG_STRUCT
 1

	)

42 
	#SGX_INVALID_ATTRIBUTE
 2

	)

43 
	#SGX_BLSTATE
 3

	)

44 
	#SGX_INVALID_MEASUREMENT
 4

	)

45 
	#SGX_NOTBLOCKABLE
 5

	)

46 
	#SGX_PG_INVLD
 6

	)

47 
	#SGX_LOCKFAIL
 7

	)

48 
	#SGX_INVALID_SIGNATURE
 8

	)

49 
	#SGX_MAC_COMPARE_FAIL
 9

	)

50 
	#SGX_PAGE_NOT_BLOCKED
 10

	)

51 
	#SGX_NOT_TRACKED
 11

	)

52 
	#SGX_VA_SLOT_OCCUPIED
 12

	)

53 
	#SGX_CHILD_PRESENT
 13

	)

54 
	#SGX_ENCLAVE_ACT
 14

	)

55 
	#SGX_ENTRYEPOCH_LOCKED
 15

	)

56 
	#SGX_INVALID_EINIT_TOKEN
 16

	)

57 
	#SGX_PREV_TRK_INCMPL
 17

	)

58 
	#SGX_PG_IS_SECS
 18

	)

59 
	#SGX_PAGE_ATTRIBUTES_MISMATCH
 19

	)

60 
	#SGX_PAGE_NOT_MODIFIABLE
 20

	)

61 
	#SGX_INVALID_CPUSVN
 32

	)

62 
	#SGX_INVALID_ISVSVN
 64

	)

63 
	#SGX_UNMASKED_EVENT
 128

	)

64 
	#SGX_INVALID_KEYNAME
 256

	)

71 
	s∑ge_öfo
 {

72 
uöt64_t
 
	mlöaddr
;

73 
uöt64_t
 
	m§˝ge
;

75 
£cöfo
 *
	m£cöfo
;

76 
uöt64_t
 
	mpcmd
;

78 
uöt64_t
 
	m£cs
;

79 } 
__Æig√d
(32);

85 
	s£cöfo
 {

86 
uöt64_t
 
	mÊags
;

87 
	#SECINFO_FLAGS_PT_S
 8

	)

88 
	#SECINFO_FLAGS_PT_M
 (0xf‡<< 
SECINFO_FLAGS_PT_S
)

	)

89 
uöt64_t
 
	mª£rved
[7];

90 } 
__Æig√d
(64);

98 
	s£cs_©å
 {

99 
uöt8_t
 
	mª£rved1
: 1;

100 
uöt8_t
 
	mdebug
: 1;

101 
uöt8_t
 
	mmode64bô
: 1;

102 
uöt8_t
 
	mª£rved2
: 1;

103 
uöt8_t
 
	m¥ovisi⁄key
: 1;

104 
uöt8_t
 
	meöôtokíkey
: 1;

105 
uöt8_t
 
	mª£rved3
: 2;

106 
	#SECS_ATTR_RSV4_SIZE
 7

	)

107 
uöt8_t
 
	mª£rved4
[
SECS_ATTR_RSV4_SIZE
];

108 
uöt64_t
 
	mx‰m
;

115 
	s£cs
 {

116 
uöt64_t
 
	msize
;

117 
uöt64_t
 
	mba£
;

118 
uöt32_t
 
	msß_‰ame_size
;

119 
uöt32_t
 
	mmisc_£À˘
;

120 
	#SECS_RSV1_SIZE
 24

	)

121 
uöt8_t
 
	mª£rved1
[
SECS_RSV1_SIZE
];

122 
£cs_©å
 
	m©åibuãs
;

123 
uöt8_t
 
	mmr_í˛ave
[32];

124 
	#SECS_RSV2_SIZE
 32

	)

125 
uöt8_t
 
	mª£rved2
[
SECS_RSV2_SIZE
];

126 
uöt8_t
 
	mmr_sig√r
[32];

127 
	#SECS_RSV3_SIZE
 96

	)

128 
uöt8_t
 
	mª£rved3
[
SECS_RSV3_SIZE
];

129 
uöt16_t
 
	misv_¥od_id
;

130 
uöt16_t
 
	misv_svn
;

131 
	#SECS_RSV4_SIZE
 3836

	)

132 
uöt8_t
 
	mª£rved4
[
SECS_RSV4_SIZE
];

140 
	stcs
 {

141 
uöt64_t
 
	mª£rved1
;

142 
uöt64_t
 
	mÊags
;

143 
uöt64_t
 
	mosß
;

144 
uöt32_t
 
	mcsß
;

145 
uöt32_t
 
	mnsß
;

146 
uöt64_t
 
	m€¡ry
;

147 
uöt64_t
 
	mª£rved2
;

148 
uöt64_t
 
	mofsbasgx
;

149 
uöt64_t
 
	mogsbasgx
;

150 
uöt32_t
 
	mf¶imô
;

151 
uöt32_t
 
	mg¶imô
;

152 
uöt64_t
 
	mª£rved3
[503];

	@src/nvidia-drm/machine/sigframe.h

6 
	~<x86/sig‰ame.h
>

	@src/nvidia-drm/machine/signal.h

6 
	~<x86/sig«l.h
>

	@src/nvidia-drm/machine/smp.h

13 #i‚de‡
_MACHINE_SMP_H_


14 
	#_MACHINE_SMP_H_


	)

16 #ifde‡
_KERNEL


18 #ifde‡
SMP


20 #i‚de‡
LOCORE


22 
	~<x86/x86_smp.h
>

25 
m±ømp_°¨t
[];

26 
u_öt32_t
 
m±ømp_∑gëabÀs
;

29 
öth™d_t


30 
IDTVEC
(
ju°ªtu∫
),

31 
IDTVEC
(
ju°ªtu∫1_±i
),

32 
IDTVEC
(
öv…lb_±i
),

33 
IDTVEC
(
öv…lb_pcid_±i
),

34 
IDTVEC
(
öv…lb_pcid
),

35 
IDTVEC
(
öv…lb_övpcid_±i_±i
),

36 
IDTVEC
(
öv…lb_övpcid_n›ti
),

37 
IDTVEC
(
övÕg_±i
),

38 
IDTVEC
(
övÕg_övpcid_±i
),

39 
IDTVEC
(
övÕg_övpcid
),

40 
IDTVEC
(
övÕg_pcid_±i
),

41 
IDTVEC
(
övÕg_pcid
),

42 
IDTVEC
(
övÃng_±i
),

43 
IDTVEC
(
övÃng_övpcid_±i
),

44 
IDTVEC
(
övÃng_övpcid
),

45 
IDTVEC
(
övÃng_pcid_±i
),

46 
IDTVEC
(
övÃng_pcid
),

47 
IDTVEC
(
övlˇche_±i
),

48 
IDTVEC
(
ùi_öå_bôm≠_h™dÀr_±i
),

49 
IDTVEC
(
˝u°›_±i
),

50 
IDTVEC
(
˝usu•íd_±i
),

51 
IDTVEC
(
ªndezvous_±i
);

53 
öv…lb_pcid_h™dÀr
();

54 
öv…lb_övpcid_h™dÀr
();

55 
öv…lb_övpcid_±i_h™dÀr
();

56 
övÕg_övpcid_h™dÀr
();

57 
övÕg_pcid_h™dÀr
();

58 
övÃng_övpcid_h™dÀr
();

59 
övÃng_pcid_h™dÀr
();

60 
«tive_°¨t_Æl_≠s
();

61 
mp_boŸaddªss
(
vm_∑ddr_t
 *, *);

	@src/nvidia-drm/machine/specialreg.h

6 
	~<x86/•ecüÃeg.h
>

	@src/nvidia-drm/machine/stack.h

6 
	~<x86/°ack.h
>

	@src/nvidia-drm/machine/stdarg.h

6 
	~<x86/°d¨g.h
>

	@src/nvidia-drm/machine/sysarch.h

6 
	~<x86/syßrch.h
>

	@src/nvidia-drm/machine/timerreg.h

41 #i‚de‡
_MACHINE_TIMERREG_H_


42 
	#_MACHINE_TIMERREG_H_


	)

44 #ifde‡
_KERNEL


46 
	~<dev/ic/i8253ªg.h
>

48 
	#IO_TIMER1
 0x40

	)

49 
	#TIMER_CNTR0
 (
IO_TIMER1
 + 
TIMER_REG_CNTR0
)

	)

50 
	#TIMER_CNTR1
 (
IO_TIMER1
 + 
TIMER_REG_CNTR1
)

	)

51 
	#TIMER_CNTR2
 (
IO_TIMER1
 + 
TIMER_REG_CNTR2
)

	)

52 
	#TIMER_MODE
 (
IO_TIMER1
 + 
TIMER_REG_MODE
)

	)

	@src/nvidia-drm/machine/trap.h

6 
	~<x86/å≠.h
>

	@src/nvidia-drm/machine/tss.h

38 #i‚de‡
_MACHINE_TSS_H_


39 
	#_MACHINE_TSS_H_
 1

	)

48 
	samd64tss
 {

49 
u_öt32_t
 
	mtss_rsvd0
;

50 
u_öt64_t
 
tss_r•0
 
	m__∑cked
;

51 
u_öt64_t
 
tss_r•1
 
	m__∑cked
;

52 
u_öt64_t
 
tss_r•2
 
	m__∑cked
;

53 
u_öt32_t
 
	mtss_rsvd1
;

54 
u_öt32_t
 
	mtss_rsvd2
;

55 
u_öt64_t
 
tss_i°1
 
	m__∑cked
;

56 
u_öt64_t
 
tss_i°2
 
	m__∑cked
;

57 
u_öt64_t
 
tss_i°3
 
	m__∑cked
;

58 
u_öt64_t
 
tss_i°4
 
	m__∑cked
;

59 
u_öt64_t
 
tss_i°5
 
	m__∑cked
;

60 
u_öt64_t
 
tss_i°6
 
	m__∑cked
;

61 
u_öt64_t
 
tss_i°7
 
	m__∑cked
;

62 
u_öt32_t
 
	mtss_rsvd3
;

63 
u_öt32_t
 
	mtss_rsvd4
;

64 
u_öt16_t
 
	mtss_rsvd5
;

65 
u_öt16_t
 
	mtss_ioba£
;

68 #ifde‡
_KERNEL


69 
amd64tss
 
comm⁄_tss
[];

	@src/nvidia-drm/machine/ucontext.h

6 
	~<x86/uc⁄ãxt.h
>

	@src/nvidia-drm/machine/vdso.h

6 
	~<x86/vdso.h
>

	@src/nvidia-drm/machine/vm.h

32 #i‚de‡
_MACHINE_VM_H_


33 
	#_MACHINE_VM_H_


	)

35 
	~<machöe/•ecüÃeg.h
>

38 
	#VM_MEMATTR_UNCACHEABLE
 ((
vm_mem©å_t
)
PAT_UNCACHEABLE
)

	)

39 
	#VM_MEMATTR_WRITE_COMBINING
 ((
vm_mem©å_t
)
PAT_WRITE_COMBINING
)

	)

40 
	#VM_MEMATTR_WRITE_THROUGH
 ((
vm_mem©å_t
)
PAT_WRITE_THROUGH
)

	)

41 
	#VM_MEMATTR_WRITE_PROTECTED
 ((
vm_mem©å_t
)
PAT_WRITE_PROTECTED
)

	)

42 
	#VM_MEMATTR_WRITE_BACK
 ((
vm_mem©å_t
)
PAT_WRITE_BACK
)

	)

43 
	#VM_MEMATTR_WEAK_UNCACHEABLE
 ((
vm_mem©å_t
)
PAT_UNCACHED
)

	)

45 
	#VM_MEMATTR_DEFAULT
 
VM_MEMATTR_WRITE_BACK


	)

	@src/nvidia-drm/machine/vmm.h

31 #i‚de‡
_VMM_H_


32 
	#_VMM_H_


	)

34 
	~<sys/sdt.h
>

35 
	~<x86/£gmíts.h
>

37 #ifde‡
_KERNEL


38 
SDT_PROVIDER_DECLARE
(
vmm
);

41 
	evm_su•íd_how
 {

42 
	mVM_SUSPEND_NONE
,

43 
	mVM_SUSPEND_RESET
,

44 
	mVM_SUSPEND_POWEROFF
,

45 
	mVM_SUSPEND_HALT
,

46 
	mVM_SUSPEND_TRIPLEFAULT
,

47 
	mVM_SUSPEND_LAST


53 
	evm_ªg_«me
 {

54 
	mVM_REG_GUEST_RAX
,

55 
	mVM_REG_GUEST_RBX
,

56 
	mVM_REG_GUEST_RCX
,

57 
	mVM_REG_GUEST_RDX
,

58 
	mVM_REG_GUEST_RSI
,

59 
	mVM_REG_GUEST_RDI
,

60 
	mVM_REG_GUEST_RBP
,

61 
	mVM_REG_GUEST_R8
,

62 
	mVM_REG_GUEST_R9
,

63 
	mVM_REG_GUEST_R10
,

64 
	mVM_REG_GUEST_R11
,

65 
	mVM_REG_GUEST_R12
,

66 
	mVM_REG_GUEST_R13
,

67 
	mVM_REG_GUEST_R14
,

68 
	mVM_REG_GUEST_R15
,

69 
	mVM_REG_GUEST_CR0
,

70 
	mVM_REG_GUEST_CR3
,

71 
	mVM_REG_GUEST_CR4
,

72 
	mVM_REG_GUEST_DR7
,

73 
	mVM_REG_GUEST_RSP
,

74 
	mVM_REG_GUEST_RIP
,

75 
	mVM_REG_GUEST_RFLAGS
,

76 
	mVM_REG_GUEST_ES
,

77 
	mVM_REG_GUEST_CS
,

78 
	mVM_REG_GUEST_SS
,

79 
	mVM_REG_GUEST_DS
,

80 
	mVM_REG_GUEST_FS
,

81 
	mVM_REG_GUEST_GS
,

82 
	mVM_REG_GUEST_LDTR
,

83 
	mVM_REG_GUEST_TR
,

84 
	mVM_REG_GUEST_IDTR
,

85 
	mVM_REG_GUEST_GDTR
,

86 
	mVM_REG_GUEST_EFER
,

87 
	mVM_REG_GUEST_CR2
,

88 
	mVM_REG_GUEST_PDPTE0
,

89 
	mVM_REG_GUEST_PDPTE1
,

90 
	mVM_REG_GUEST_PDPTE2
,

91 
	mVM_REG_GUEST_PDPTE3
,

92 
	mVM_REG_GUEST_INTR_SHADOW
,

93 
	mVM_REG_GUEST_DR0
,

94 
	mVM_REG_GUEST_DR1
,

95 
	mVM_REG_GUEST_DR2
,

96 
	mVM_REG_GUEST_DR3
,

97 
	mVM_REG_GUEST_DR6
,

98 
	mVM_REG_LAST


101 
	ex2≠ic_°©e
 {

102 
	mX2APIC_DISABLED
,

103 
	mX2APIC_ENABLED
,

104 
	mX2APIC_STATE_LAST


107 
	#VM_INTINFO_VECTOR
(
öfo
Ë((öfoË& 0xff)

	)

108 
	#VM_INTINFO_DEL_ERRCODE
 0x800

	)

109 
	#VM_INTINFO_RSVD
 0x7ffff000

	)

110 
	#VM_INTINFO_VALID
 0x80000000

	)

111 
	#VM_INTINFO_TYPE
 0x700

	)

112 
	#VM_INTINFO_HWINTR
 (0 << 8)

	)

113 
	#VM_INTINFO_NMI
 (2 << 8)

	)

114 
	#VM_INTINFO_HWEXCEPTION
 (3 << 8)

	)

115 
	#VM_INTINFO_SWINTR
 (4 << 8)

	)

117 #ifde‡
_KERNEL


119 
	#VM_MAX_NAMELEN
 32

	)

121 
	gvm
;

122 
	gvm_ex˚±i⁄
;

123 
	g£g_desc
;

124 
	gvm_exô
;

125 
	gvm_run
;

126 
	gvh≥t
;

127 
	gviﬂpic
;

128 
	gvœpic
;

129 
	gvm•a˚
;

130 
	gvm_obje˘
;

131 
	gvm_gue°_∑gög
;

132 
	gpm≠
;

134 
	svm_evítöfo
 {

135 *
	mΩå
;

136 *
	m•å
;

137 *
	mùå
;

140 (*
	tvmm_öô_func_t
)(
	tùöum
);

141 (*
	tvmm_˛ónup_func_t
)();

142 (*
	tvmm_ªsume_func_t
)();

143 * (*
	tvmi_öô_func_t
)(
	tvm
 *vm, 
	tpm≠
 *pmap);

144 (*
	tvmi_run_func_t
)(*
	tvmi
, 
	tv˝u
, 
	tªgi°î_t
 
	trù
,

145 
	tpm≠
 *pm≠, 
	tvm_evítöfo
 *
	töfo
);

146 (*
	tvmi_˛ónup_func_t
)(*
	tvmi
);

147 (*
	tvmi_gë_ªgi°î_t
)(*
	tvmi
, 
	tv˝u
, 
	tnum
,

148 
	tuöt64_t
 *
	tªtvÆ
);

149 (*
	tvmi_£t_ªgi°î_t
)(*
	tvmi
, 
	tv˝u
, 
	tnum
,

150 
	tuöt64_t
 
	tvÆ
);

151 (*
	tvmi_gë_desc_t
)(*
	tvmi
, 
	tv˝u
, 
	tnum
,

152 
	t£g_desc
 *
	tdesc
);

153 (*
	tvmi_£t_desc_t
)(*
	tvmi
, 
	tv˝u
, 
	tnum
,

154 
	t£g_desc
 *
	tdesc
);

155 (*
	tvmi_gë_ˇp_t
)(*
	tvmi
, 
	tv˝u
, 
	tnum
, *
	tªtvÆ
);

156 (*
	tvmi_£t_ˇp_t
)(*
	tvmi
, 
	tv˝u
, 
	tnum
, 
	tvÆ
);

157 
vm•a˚
 * (*
	tvmi_vm•a˚_Æloc
)(
	tvm_off£t_t
 
	tmö
, vm_off£t_à
	tmax
);

158 (*
	tvmi_vm•a˚_‰ì
)(
	tvm•a˚
 *vmspace);

159 
vœpic
 * (*
	tvmi_vœpic_öô
)(*
	tvmi
, 
	tv˝u
);

160 (*
	tvmi_vœpic_˛ónup
)(*
	tvmi
, 
	tvœpic
 *vlapic);

162 
	svmm_›s
 {

163 
vmm_öô_func_t
 
öô
;

164 
vmm_˛ónup_func_t
 
˛ónup
;

165 
vmm_ªsume_func_t
 
ªsume
;

167 
vmi_öô_func_t
 
vmöô
;

168 
vmi_run_func_t
 
vmrun
;

169 
vmi_˛ónup_func_t
 
vm˛ónup
;

170 
vmi_gë_ªgi°î_t
 
vmgëªg
;

171 
vmi_£t_ªgi°î_t
 
vm£åeg
;

172 
vmi_gë_desc_t
 
vmgëdesc
;

173 
vmi_£t_desc_t
 
vm£tdesc
;

174 
vmi_gë_ˇp_t
 
vmgëˇp
;

175 
vmi_£t_ˇp_t
 
vm£tˇp
;

176 
vmi_vm•a˚_Æloc
 
vm•a˚_Æloc
;

177 
vmi_vm•a˚_‰ì
 
vm•a˚_‰ì
;

178 
vmi_vœpic_öô
 
vœpic_öô
;

179 
vmi_vœpic_˛ónup
 
vœpic_˛ónup
;

182 
vmm_›s
 
vmm_›s_öãl
;

183 
vmm_›s
 
vmm_›s_amd
;

185 
	`vm_¸óã
(c⁄° *
«me
, 
vm
 **
ªtvm
);

186 
	`vm_de°roy
(
vm
 *vm);

187 
	`vm_ªöô
(
vm
 *vm);

188 c⁄° *
	`vm_«me
(
vm
 *vm);

189 
	`vm_gë_t›ﬁogy
(
vm
 *vm, 
uöt16_t
 *
sockës
, uöt16_à*
c‹es
,

190 
uöt16_t
 *
thªads
, uöt16_à*
max˝us
);

191 
	`vm_£t_t›ﬁogy
(
vm
 *vm, 
uöt16_t
 
sockës
, uöt16_à
c‹es
,

192 
uöt16_t
 
thªads
, uöt16_à
max˝us
);

197 
	`vm_mm≠_mem£g
(
vm
 *vm, 
vm_∑ddr_t
 
g∑
, 
£gid
, 
vm_ooff£t_t
 
off
,

198 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
);

199 
	`vm_Æloc_mem£g
(
vm
 *vm, 
idít
, 
size_t
 
Àn
, 
boﬁ
 
sysmem
);

200 
	`vm_‰ì_mem£g
(
vm
 *vm, 
idít
);

201 
	`vm_m≠_mmio
(
vm
 *vm, 
vm_∑ddr_t
 
g∑
, 
size_t
 
Àn
, vm_∑ddr_à
h∑
);

202 
	`vm_unm≠_mmio
(
vm
 *vm, 
vm_∑ddr_t
 
g∑
, 
size_t
 
Àn
);

203 
	`vm_assign_µtdev
(
vm
 *vm, 
bus
, 
¶Ÿ
, 
func
);

204 
	`vm_u«ssign_µtdev
(
vm
 *vm, 
bus
, 
¶Ÿ
, 
func
);

211 
	`vm_mm≠_gë√xt
(
vm
 *vm, 
vm_∑ddr_t
 *
g∑
, *
£gid
,

212 
vm_ooff£t_t
 *
£goff
, 
size_t
 *
Àn
, *
¥Ÿ
, *
Êags
);

213 
	`vm_gë_mem£g
(
vm
 *vm, 
idít
, 
size_t
 *
Àn
, 
boﬁ
 *
sysmem
,

214 
vm_obje˘
 **
obj±r
);

215 
vm_∑ddr_t
 
	`vmm_sysmem_maxaddr
(
vm
 *vm);

216 *
	`vm_g∑_hﬁd
(
vm
 *, 
v˝uid
, 
vm_∑ddr_t
 
g∑
, 
size_t
 
Àn
,

217 
¥Ÿ
, **
cookõ
);

218 
	`vm_g∑_ªÀa£
(*
cookõ
);

219 
boﬁ
 
	`vm_mem_Æloˇãd
(
vm
 *vm, 
v˝uid
, 
vm_∑ddr_t
 
g∑
);

221 
	`vm_gë_ªgi°î
(
vm
 *vm, 
v˝u
, 
ªg
, 
uöt64_t
 *
ªtvÆ
);

222 
	`vm_£t_ªgi°î
(
vm
 *vm, 
v˝u
, 
ªg
, 
uöt64_t
 
vÆ
);

223 
	`vm_gë_£g_desc
(
vm
 *vm, 
v˝u
, 
ªg
,

224 
£g_desc
 *
ªt_desc
);

225 
	`vm_£t_£g_desc
(
vm
 *vm, 
v˝u
, 
ªg
,

226 
£g_desc
 *
desc
);

227 
	`vm_run
(
vm
 *vm, 
vm_run
 *
vmrun
);

228 
	`vm_su•íd
(
vm
 *vm, 
vm_su•íd_how
 
how
);

229 
	`vm_öje˘_nmi
(
vm
 *vm, 
v˝u
);

230 
	`vm_nmi_≥ndög
(
vm
 *vm, 
v˝uid
);

231 
	`vm_nmi_˛ór
(
vm
 *vm, 
v˝uid
);

232 
	`vm_öje˘_extöt
(
vm
 *vm, 
v˝u
);

233 
	`vm_extöt_≥ndög
(
vm
 *vm, 
v˝uid
);

234 
	`vm_extöt_˛ór
(
vm
 *vm, 
v˝uid
);

235 
vœpic
 *
	`vm_œpic
(
vm
 *vm, 
˝u
);

236 
viﬂpic
 *
	`vm_iﬂpic
(
vm
 *vm);

237 
vh≥t
 *
	`vm_h≥t
(
vm
 *vm);

238 
	`vm_gë_ˇ∑bûôy
(
vm
 *vm, 
v˝u
, 
ty≥
, *
vÆ
);

239 
	`vm_£t_ˇ∑bûôy
(
vm
 *vm, 
v˝u
, 
ty≥
, 
vÆ
);

240 
	`vm_gë_x2≠ic_°©e
(
vm
 *vm, 
v˝u
, 
x2≠ic_°©e
 *
°©e
);

241 
	`vm_£t_x2≠ic_°©e
(
vm
 *vm, 
v˝u
, 
x2≠ic_°©e
 
°©e
);

242 
	`vm_≠icid2v˝uid
(
vm
 *vm, 
≠icid
);

243 
	`vm_a˘iv©e_˝u
(
vm
 *vm, 
v˝u
);

244 
	`vm_su•íd_˝u
(
vm
 *vm, 
v˝u
);

245 
	`vm_ªsume_˝u
(
vm
 *vm, 
v˝u
);

246 
vm_exô
 *
	`vm_exôöfo
(
vm
 *vm, 
v˝uid
);

247 
	`vm_exô_su•íded
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 
rù
);

248 
	`vm_exô_debug
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 
rù
);

249 
	`vm_exô_ªndezvous
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 
rù
);

250 
	`vm_exô_a°≥ndög
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 
rù
);

251 
	`vm_exô_ªqidÀ
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 
rù
);

253 #ifde‡
_SYS__CPUSET_H_


268 (*
	tvm_ªndezvous_func_t
)(
	tvm
 *vm, 
	tv˝uid
, *
	t¨g
);

269 
	`vm_smp_ªndezvous
(
vm
 *vm, 
v˝uid
, 
˝u£t_t
 
de°
,

270 
vm_ªndezvous_func_t
 
func
, *
¨g
);

271 
˝u£t_t
 
	`vm_a˘ive_˝us
(
vm
 *vm);

272 
˝u£t_t
 
	`vm_debug_˝us
(
vm
 *vm);

273 
˝u£t_t
 
	`vm_su•íded_˝us
(
vm
 *vm);

276 
__ölöe
 

277 
	$v˝u_ªndezvous_≥ndög
(
vm_evítöfo
 *
öfo
)

280  (*((
uöçå_t
 *)(
öfo
->
Ωå
)) != 0);

281 
	}
}

283 
__ölöe
 

284 
	$v˝u_su•íded
(
vm_evítöfo
 *
öfo
)

287  (*
öfo
->
•å
);

288 
	}
}

290 
__ölöe
 

291 
	$v˝u_ªqidÀ
(
vm_evítöfo
 *
öfo
)

294  (*
öfo
->
ùå
);

295 
	}
}

297 
v˝u_debugged
(
vm
 *vm, 
v˝uid
);

305 
vmm_is_µtdev
(
bus
, 
¶Ÿ
, 
func
);

307 *
vm_iommu_domaö
(
vm
 *vm);

309 
	ev˝u_°©e
 {

310 
	mVCPU_IDLE
,

311 
	mVCPU_FROZEN
,

312 
	mVCPU_RUNNING
,

313 
	mVCPU_SLEEPING
,

316 
v˝u_£t_°©e
(
vm
 *vm, 
v˝u
, 
v˝u_°©e
 
°©e
,

317 
boﬁ
 
‰om_idÀ
);

318 
v˝u_°©e
 
v˝u_gë_°©e
(
vm
 *vm, 
v˝u
, *
ho°˝u
);

320 
__ölöe


321 
	$v˝u_is_ru¬ög
(
vm
 *vm, 
v˝u
, *
ho°˝u
)

323  (
	`v˝u_gë_°©e
(
vm
, 
v˝u
, 
ho°˝u
Ë=
VCPU_RUNNING
);

324 
	}
}

326 #ifde‡
_SYS_PROC_H_


327 
__ölöe


328 
	$v˝u_should_yõld
(
vm
 *vm, 
v˝u
)

331 i‡(
cuπhªad
->
td_Êags
 & (
TDF_ASTPENDING
 | 
TDF_NEEDRESCHED
))

333 i‡(
cuπhªad
->
td_owïªem±
)

337 
	}
}

340 *
v˝u_°©s
(
vm
 *vm, 
v˝u
);

341 
v˝u_nŸify_evít
(
vm
 *vm, 
v˝uid
, 
boﬁ
 
œpic_öå
);

342 
vm•a˚
 *
vm_gë_vm•a˚
(
vm
 *vm);

343 
v©pic
 *
vm_©pic
(
vm
 *vm);

344 
v©pô
 *
vm_©pô
(
vm
 *vm);

345 
vpmtmr
 *
vm_pmtmr
(
vm
 *vm);

346 
vπc
 *
vm_πc
(
vm
 *vm);

359 
vm_öje˘_ex˚±i⁄
(
vm
 *vm, 
v˝uid
, 
ve˘‹
, 
îr_vÆid
,

360 
uöt32_t
 
îrcode
, 
ª°¨t_ö°ru˘i⁄
);

375 
vm_exô_ötöfo
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 
ötöfo
);

385 
vm_íåy_ötöfo
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 *
öfo
);

387 
vm_gë_ötöfo
(
vm
 *vm, 
v˝uid
, 
uöt64_t
 *
öfo1
, uöt64_à*
öfo2
);

389 
vm_ªg_«me
 
vm_£gmít_«me
(
£g_ícodög
);

391 
	svm_c›yöfo
 {

392 
uöt64_t
 
	mg∑
;

393 
size_t
 
	mÀn
;

394 *
	mhva
;

395 *
	mcookõ
;

412 
vm_c›y_£tup
(
vm
 *vm, 
v˝uid
, 
vm_gue°_∑gög
 *
∑gög
,

413 
uöt64_t
 
gœ
, 
size_t
 
Àn
, 
¥Ÿ
, 
vm_c›yöfo
 *
c›yöfo
,

414 
num_c›yöfo
, *
is_Áu…
);

415 
vm_c›y_ã¨down
(
vm
 *vm, 
v˝uid
, 
vm_c›yöfo
 *
c›yöfo
,

416 
num_c›yöfo
);

417 
vm_c›yö
(
vm
 *vm, 
v˝uid
, 
vm_c›yöfo
 *
c›yöfo
,

418 *
kaddr
, 
size_t
 
Àn
);

419 
vm_c›yout
(
vm
 *vm, 
v˝uid
, c⁄° *
kaddr
,

420 
vm_c›yöfo
 *
c›yöfo
, 
size_t
 
Àn
);

422 
v˝u_åa˚_ex˚±i⁄s
(
vm
 *vm, 
v˝uid
);

425 
	#VM_MAXCPU
 16

	)

430 
	evm_ˇp_ty≥
 {

431 
	mVM_CAP_HALT_EXIT
,

432 
	mVM_CAP_MTRAP_EXIT
,

433 
	mVM_CAP_PAUSE_EXIT
,

434 
	mVM_CAP_UNRESTRICTED_GUEST
,

435 
	mVM_CAP_ENABLE_INVPCID
,

436 
	mVM_CAP_MAX


439 
	evm_öå_åiggî
 {

440 
	mEDGE_TRIGGER
,

441 
	mLEVEL_TRIGGER


451 
	s£g_desc
 {

452 
uöt64_t
 
	mba£
;

453 
uöt32_t
 
	mlimô
;

454 
uöt32_t
 
	mac˚ss
;

456 
	#SEG_DESC_TYPE
(
ac˚ss
Ë(◊c˚ssË& 0x001f)

	)

457 
	#SEG_DESC_DPL
(
ac˚ss
Ë((◊c˚ssË>> 5Ë& 0x3)

	)

458 
	#SEG_DESC_PRESENT
(
ac˚ss
Ë((◊c˚ssË& 0x0080Ë? 1 : 0)

	)

459 
	#SEG_DESC_DEF32
(
ac˚ss
Ë((◊c˚ssË& 0x4000Ë? 1 : 0)

	)

460 
	#SEG_DESC_GRANULARITY
(
ac˚ss
Ë((◊c˚ssË& 0x8000Ë? 1 : 0)

	)

461 
	#SEG_DESC_UNUSABLE
(
ac˚ss
Ë((◊c˚ssË& 0x10000Ë? 1 : 0)

	)

463 
	evm_˝u_mode
 {

464 
	mCPU_MODE_REAL
,

465 
	mCPU_MODE_PROTECTED
,

466 
	mCPU_MODE_COMPATIBILITY
,

467 
	mCPU_MODE_64BIT
,

470 
	evm_∑gög_mode
 {

471 
	mPAGING_MODE_FLAT
,

472 
	mPAGING_MODE_32
,

473 
	mPAGING_MODE_PAE
,

474 
	mPAGING_MODE_64
,

477 
	svm_gue°_∑gög
 {

478 
uöt64_t
 
	m¸3
;

479 
	m˝l
;

480 
vm_˝u_mode
 
	m˝u_mode
;

481 
vm_∑gög_mode
 
	m∑gög_mode
;

489 
	svõ_›
 {

490 
uöt8_t
 
	m›_byã
;

491 
uöt8_t
 
	m›_ty≥
;

492 
uöt16_t
 
	m›_Êags
;

495 
	#VIE_INST_SIZE
 15

	)

496 
	svõ
 {

497 
uöt8_t
 
	mö°
[
VIE_INST_SIZE
];

498 
uöt8_t
 
	mnum_vÆid
;

499 
uöt8_t
 
	mnum_¥o˚s£d
;

501 
uöt8_t
 
	maddrsize
:4, 
	m›size
:4;

502 
uöt8_t
 
	mªx_w
:1,

503 
	mªx_r
:1,

504 
	mªx_x
:1,

505 
	mªx_b
:1,

506 
	mªx_¥e£¡
:1,

507 
	mªpz_¥e£¡
:1,

508 
	mª≤z_¥e£¡
:1,

509 
	m›size_ovîride
:1,

510 
	maddrsize_ovîride
:1,

511 
	m£gmít_ovîride
:1;

513 
uöt8_t
 
	mmod
:2,

514 
	mªg
:4,

515 
	mrm
:4;

517 
uöt8_t
 
	mss
:2,

518 
	mödex
:4,

519 
	mba£
:4;

521 
uöt8_t
 
	mdi•_byãs
;

522 
uöt8_t
 
	mimm_byãs
;

524 
uöt8_t
 
	msˇÀ
;

525 
	mba£_ªgi°î
;

526 
	mödex_ªgi°î
;

527 
	m£gmít_ªgi°î
;

529 
öt64_t
 
	mdi•œ˚mít
;

530 
öt64_t
 
	mimmedüã
;

532 
uöt8_t
 
	mdecoded
;

534 
võ_›
 
	m›
;

537 
	evm_exôcode
 {

538 
	mVM_EXITCODE_INOUT
,

539 
	mVM_EXITCODE_VMX
,

540 
	mVM_EXITCODE_BOGUS
,

541 
	mVM_EXITCODE_RDMSR
,

542 
	mVM_EXITCODE_WRMSR
,

543 
	mVM_EXITCODE_HLT
,

544 
	mVM_EXITCODE_MTRAP
,

545 
	mVM_EXITCODE_PAUSE
,

546 
	mVM_EXITCODE_PAGING
,

547 
	mVM_EXITCODE_INST_EMUL
,

548 
	mVM_EXITCODE_SPINUP_AP
,

549 
	mVM_EXITCODE_DEPRECATED1
,

550 
	mVM_EXITCODE_RENDEZVOUS
,

551 
	mVM_EXITCODE_IOAPIC_EOI
,

552 
	mVM_EXITCODE_SUSPENDED
,

553 
	mVM_EXITCODE_INOUT_STR
,

554 
	mVM_EXITCODE_TASK_SWITCH
,

555 
	mVM_EXITCODE_MONITOR
,

556 
	mVM_EXITCODE_MWAIT
,

557 
	mVM_EXITCODE_SVM
,

558 
	mVM_EXITCODE_REQIDLE
,

559 
	mVM_EXITCODE_DEBUG
,

560 
	mVM_EXITCODE_VMINSN
,

561 
	mVM_EXITCODE_MAX


564 
	svm_öout
 {

565 
uöt16_t
 
	mbyãs
:3;

566 
uöt16_t
 
	mö
:1;

567 
uöt16_t
 
	m°rög
:1;

568 
uöt16_t
 
	mªp
:1;

569 
uöt16_t
 
	mp‹t
;

570 
uöt32_t
 
	móx
;

573 
	svm_öout_°r
 {

574 
vm_öout
 
	möout
;

575 
vm_gue°_∑gög
 
	m∑gög
;

576 
uöt64_t
 
	mrÊags
;

577 
uöt64_t
 
	m¸0
;

578 
uöt64_t
 
	mödex
;

579 
uöt64_t
 
	mcou¡
;

580 
	maddrsize
;

581 
vm_ªg_«me
 
	m£g_«me
;

582 
£g_desc
 
	m£g_desc
;

585 
	eèsk_swôch_ªas⁄
 {

586 
	mTSR_CALL
,

587 
	mTSR_IRET
,

588 
	mTSR_JMP
,

589 
	mTSR_IDT_GATE
,

592 
	svm_èsk_swôch
 {

593 
uöt16_t
 
	mtss£l
;

594 
	mext
;

595 
uöt32_t
 
	mîrcode
;

596 
	mîrcode_vÆid
;

597 
èsk_swôch_ªas⁄
 
	mªas⁄
;

598 
vm_gue°_∑gög
 
	m∑gög
;

601 
	svm_exô
 {

602 
vm_exôcode
 
	mexôcode
;

603 
	mö°_Àngth
;

604 
uöt64_t
 
	mrù
;

606 
vm_öout
 
	möout
;

607 
vm_öout_°r
 
	möout_°r
;

609 
uöt64_t
 
	mg∑
;

610 
	mÁu…_ty≥
;

611 } 
	m∑gög
;

613 
uöt64_t
 
	mg∑
;

614 
uöt64_t
 
	mgœ
;

615 
uöt64_t
 
	mcs_ba£
;

616 
	mcs_d
;

617 
vm_gue°_∑gög
 
	m∑gög
;

618 
võ
 
	mvõ
;

619 } 
	mö°_emul
;

625 
	m°©us
;

630 
uöt32_t
 
	mexô_ªas⁄
;

631 
uöt64_t
 
	mexô_quÆifiˇti⁄
;

636 
	mö°_ty≥
;

637 
	mö°_îr‹
;

638 } 
	mvmx
;

643 
uöt64_t
 
	mexôcode
;

644 
uöt64_t
 
	mexôöfo1
;

645 
uöt64_t
 
	mexôöfo2
;

646 } 
	msvm
;

648 
uöt32_t
 
	mcode
;

649 
uöt64_t
 
	mwvÆ
;

650 } 
	mm§
;

652 
	mv˝u
;

653 
uöt64_t
 
	mrù
;

654 } 
	m•öup_≠
;

656 
uöt64_t
 
	mrÊags
;

657 
uöt64_t
 
	möå_°©us
;

658 } 
	mh…
;

660 
	mve˘‹
;

661 } 
	miﬂpic_eoi
;

663 
vm_su•íd_how
 
	mhow
;

664 } 
	msu•íded
;

665 
vm_èsk_swôch
 
	mèsk_swôch
;

666 } 
	mu
;

670 
vm_öje˘_Áu…
(*
vm
, 
v˝uid
, 
ve˘‹
, 
îrcode_vÆid
,

671 
îrcode
);

673 
__ölöe
 

674 
	$vm_öje˘_ud
(*
vm
, 
v˝uid
)

676 
	`vm_öje˘_Áu…
(
vm
, 
v˝uid
, 
IDT_UD
, 0, 0);

677 
	}
}

679 
__ölöe
 

680 
	$vm_öje˘_gp
(*
vm
, 
v˝uid
)

682 
	`vm_öje˘_Áu…
(
vm
, 
v˝uid
, 
IDT_GP
, 1, 0);

683 
	}
}

685 
__ölöe
 

686 
	$vm_öje˘_ac
(*
vm
, 
v˝uid
, 
îrcode
)

688 
	`vm_öje˘_Áu…
(
vm
, 
v˝uid
, 
IDT_AC
, 1, 
îrcode
);

689 
	}
}

691 
__ölöe
 

692 
	$vm_öje˘_ss
(*
vm
, 
v˝uid
, 
îrcode
)

694 
	`vm_öje˘_Áu…
(
vm
, 
v˝uid
, 
IDT_SS
, 1, 
îrcode
);

695 
	}
}

697 
vm_öje˘_pf
(*
vm
, 
v˝uid
, 
îr‹_code
, 
uöt64_t
 
¸2
);

699 
vm_ª°¨t_ö°ru˘i⁄
(*
vm
, 
v˝uid
);

	@src/nvidia-drm/machine/vmm_dev.h

31 #i‚def 
_VMM_DEV_H_


32 
	#_VMM_DEV_H_


	)

34 #ifde‡
_KERNEL


35 
vmmdev_öô
();

36 
vmmdev_˛ónup
();

39 
	svm_memm≠
 {

40 
vm_∑ddr_t
 
	mg∑
;

41 
	m£gid
;

42 
vm_ooff£t_t
 
	m£goff
;

43 
size_t
 
	mÀn
;

44 
	m¥Ÿ
;

45 
	mÊags
;

47 
	#VM_MEMMAP_F_WIRED
 0x01

	)

48 
	#VM_MEMMAP_F_IOMMU
 0x02

	)

50 
	#VM_MEMSEG_NAME
(
m
Ë((m)->
«me
[0] !'\0' ? (m)->«mê: 
NULL
)

	)

51 
	svm_mem£g
 {

52 
	m£gid
;

53 
size_t
 
	mÀn
;

54 
	m«me
[
SPECNAMELEN
 + 1];

57 
	svm_ªgi°î
 {

58 
	m˝uid
;

59 
	mªgnum
;

60 
uöt64_t
 
	mªgvÆ
;

63 
	svm_£g_desc
 {

64 
	m˝uid
;

65 
	mªgnum
;

66 
£g_desc
 
	mdesc
;

69 
	svm_ªgi°î_£t
 {

70 
	m˝uid
;

71 
	mcou¡
;

72 c⁄° *
	mªgnums
;

73 
uöt64_t
 *
	mªgvÆs
;

76 
	svm_run
 {

77 
	m˝uid
;

78 
vm_exô
 
	mvm_exô
;

81 
	svm_ex˚±i⁄
 {

82 
	m˝uid
;

83 
	mve˘‹
;

84 
uöt32_t
 
	mîr‹_code
;

85 
	mîr‹_code_vÆid
;

86 
	mª°¨t_ö°ru˘i⁄
;

89 
	svm_œpic_msi
 {

90 
uöt64_t
 
	mmsg
;

91 
uöt64_t
 
	maddr
;

94 
	svm_œpic_úq
 {

95 
	m˝uid
;

96 
	mve˘‹
;

99 
	svm_iﬂpic_úq
 {

100 
	múq
;

103 
	svm_iß_úq
 {

104 
	m©pic_úq
;

105 
	miﬂpic_úq
;

108 
	svm_iß_úq_åiggî
 {

109 
	m©pic_úq
;

110 
vm_öå_åiggî
 
	måiggî
;

113 
	svm_ˇ∑bûôy
 {

114 
	m˝uid
;

115 
vm_ˇp_ty≥
 
	mˇ±y≥
;

116 
	mˇpvÆ
;

117 
	mÆl˝us
;

120 
	svm_µtdev
 {

121 
	mbus
;

122 
	m¶Ÿ
;

123 
	mfunc
;

126 
	svm_µtdev_mmio
 {

127 
	mbus
;

128 
	m¶Ÿ
;

129 
	mfunc
;

130 
vm_∑ddr_t
 
	mg∑
;

131 
vm_∑ddr_t
 
	mh∑
;

132 
size_t
 
	mÀn
;

135 
	svm_µtdev_msi
 {

136 
	mv˝u
;

137 
	mbus
;

138 
	m¶Ÿ
;

139 
	mfunc
;

140 
	mnumvec
;

141 
uöt64_t
 
	mmsg
;

142 
uöt64_t
 
	maddr
;

145 
	svm_µtdev_msix
 {

146 
	mv˝u
;

147 
	mbus
;

148 
	m¶Ÿ
;

149 
	mfunc
;

150 
	midx
;

151 
uöt64_t
 
	mmsg
;

152 
uöt32_t
 
	mve˘‹_c⁄åﬁ
;

153 
uöt64_t
 
	maddr
;

156 
	svm_nmi
 {

157 
	m˝uid
;

160 
	#MAX_VM_STATS
 64

	)

161 
	svm_°©s
 {

162 
	m˝uid
;

163 
	mnum_íåõs
;

164 
timevÆ
 
	mtv
;

165 
uöt64_t
 
	m°©buf
[
MAX_VM_STATS
];

168 
	svm_°©_desc
 {

169 
	mödex
;

170 
	mdesc
[128];

173 
	svm_x2≠ic
 {

174 
	m˝uid
;

175 
x2≠ic_°©e
 
	m°©e
;

178 
	svm_g∑_±e
 {

179 
uöt64_t
 
	mg∑
;

180 
uöt64_t
 
	m±e
[4];

181 
	m±íum
;

184 
	svm_h≥t_ˇp
 {

185 
uöt32_t
 
	mˇ∑bûôõs
;

188 
	svm_su•íd
 {

189 
vm_su•íd_how
 
	mhow
;

192 
	svm_gœ2g∑
 {

193 
	mv˝uid
;

194 
	m¥Ÿ
;

195 
uöt64_t
 
	mgœ
;

196 
vm_gue°_∑gög
 
	m∑gög
;

197 
	mÁu…
;

198 
uöt64_t
 
	mg∑
;

201 
	svm_a˘iv©e_˝u
 {

202 
	mv˝uid
;

205 
	svm_˝u£t
 {

206 
	mwhich
;

207 
	m˝u£tsize
;

208 
˝u£t_t
 *
	m˝us
;

210 
	#VM_ACTIVE_CPUS
 0

	)

211 
	#VM_SUSPENDED_CPUS
 1

	)

212 
	#VM_DEBUG_CPUS
 2

	)

214 
	svm_ötöfo
 {

215 
	mv˝uid
;

216 
uöt64_t
 
	möfo1
;

217 
uöt64_t
 
	möfo2
;

220 
	svm_πc_time
 {

221 
time_t
 
	m£cs
;

224 
	svm_πc_d©a
 {

225 
	moff£t
;

226 
uöt8_t
 
	mvÆue
;

229 
	svm_˝u_t›ﬁogy
 {

230 
uöt16_t
 
	msockës
;

231 
uöt16_t
 
	mc‹es
;

232 
uöt16_t
 
	mthªads
;

233 
uöt16_t
 
	mmax˝us
;

238 
	mIOCNUM_ABIVERS
 = 0,

239 
	mIOCNUM_RUN
 = 1,

240 
	mIOCNUM_SET_CAPABILITY
 = 2,

241 
	mIOCNUM_GET_CAPABILITY
 = 3,

242 
	mIOCNUM_SUSPEND
 = 4,

243 
	mIOCNUM_REINIT
 = 5,

246 
	mIOCNUM_MAP_MEMORY
 = 10,

247 
	mIOCNUM_GET_MEMORY_SEG
 = 11,

248 
	mIOCNUM_GET_GPA_PMAP
 = 12,

249 
	mIOCNUM_GLA2GPA
 = 13,

250 
	mIOCNUM_ALLOC_MEMSEG
 = 14,

251 
	mIOCNUM_GET_MEMSEG
 = 15,

252 
	mIOCNUM_MMAP_MEMSEG
 = 16,

253 
	mIOCNUM_MMAP_GETNEXT
 = 17,

254 
	mIOCNUM_GLA2GPA_NOFAULT
 = 18,

257 
	mIOCNUM_SET_REGISTER
 = 20,

258 
	mIOCNUM_GET_REGISTER
 = 21,

259 
	mIOCNUM_SET_SEGMENT_DESCRIPTOR
 = 22,

260 
	mIOCNUM_GET_SEGMENT_DESCRIPTOR
 = 23,

261 
	mIOCNUM_SET_REGISTER_SET
 = 24,

262 
	mIOCNUM_GET_REGISTER_SET
 = 25,

265 
	mIOCNUM_GET_INTINFO
 = 28,

266 
	mIOCNUM_SET_INTINFO
 = 29,

267 
	mIOCNUM_INJECT_EXCEPTION
 = 30,

268 
	mIOCNUM_LAPIC_IRQ
 = 31,

269 
	mIOCNUM_INJECT_NMI
 = 32,

270 
	mIOCNUM_IOAPIC_ASSERT_IRQ
 = 33,

271 
	mIOCNUM_IOAPIC_DEASSERT_IRQ
 = 34,

272 
	mIOCNUM_IOAPIC_PULSE_IRQ
 = 35,

273 
	mIOCNUM_LAPIC_MSI
 = 36,

274 
	mIOCNUM_LAPIC_LOCAL_IRQ
 = 37,

275 
	mIOCNUM_IOAPIC_PINCOUNT
 = 38,

276 
	mIOCNUM_RESTART_INSTRUCTION
 = 39,

279 
	mIOCNUM_BIND_PPTDEV
 = 40,

280 
	mIOCNUM_UNBIND_PPTDEV
 = 41,

281 
	mIOCNUM_MAP_PPTDEV_MMIO
 = 42,

282 
	mIOCNUM_PPTDEV_MSI
 = 43,

283 
	mIOCNUM_PPTDEV_MSIX
 = 44,

286 
	mIOCNUM_VM_STATS
 = 50,

287 
	mIOCNUM_VM_STAT_DESC
 = 51,

290 
	mIOCNUM_SET_X2APIC_STATE
 = 60,

291 
	mIOCNUM_GET_X2APIC_STATE
 = 61,

292 
	mIOCNUM_GET_HPET_CAPABILITIES
 = 62,

295 
	mIOCNUM_SET_TOPOLOGY
 = 63,

296 
	mIOCNUM_GET_TOPOLOGY
 = 64,

299 
	mIOCNUM_ISA_ASSERT_IRQ
 = 80,

300 
	mIOCNUM_ISA_DEASSERT_IRQ
 = 81,

301 
	mIOCNUM_ISA_PULSE_IRQ
 = 82,

302 
	mIOCNUM_ISA_SET_IRQ_TRIGGER
 = 83,

305 
	mIOCNUM_ACTIVATE_CPU
 = 90,

306 
	mIOCNUM_GET_CPUSET
 = 91,

307 
	mIOCNUM_SUSPEND_CPU
 = 92,

308 
	mIOCNUM_RESUME_CPU
 = 93,

311 
	mIOCNUM_RTC_READ
 = 100,

312 
	mIOCNUM_RTC_WRITE
 = 101,

313 
	mIOCNUM_RTC_SETTIME
 = 102,

314 
	mIOCNUM_RTC_GETTIME
 = 103,

317 
	#VM_RUN
 \

318 
	`_IOWR
('v', 
IOCNUM_RUN
, 
vm_run
)

	)

319 
	#VM_SUSPEND
 \

320 
	`_IOW
('v', 
IOCNUM_SUSPEND
, 
vm_su•íd
)

	)

321 
	#VM_REINIT
 \

322 
	`_IO
('v', 
IOCNUM_REINIT
)

	)

323 
	#VM_ALLOC_MEMSEG
 \

324 
	`_IOW
('v', 
IOCNUM_ALLOC_MEMSEG
, 
vm_mem£g
)

	)

325 
	#VM_GET_MEMSEG
 \

326 
	`_IOWR
('v', 
IOCNUM_GET_MEMSEG
, 
vm_mem£g
)

	)

327 
	#VM_MMAP_MEMSEG
 \

328 
	`_IOW
('v', 
IOCNUM_MMAP_MEMSEG
, 
vm_memm≠
)

	)

329 
	#VM_MMAP_GETNEXT
 \

330 
	`_IOWR
('v', 
IOCNUM_MMAP_GETNEXT
, 
vm_memm≠
)

	)

331 
	#VM_SET_REGISTER
 \

332 
	`_IOW
('v', 
IOCNUM_SET_REGISTER
, 
vm_ªgi°î
)

	)

333 
	#VM_GET_REGISTER
 \

334 
	`_IOWR
('v', 
IOCNUM_GET_REGISTER
, 
vm_ªgi°î
)

	)

335 
	#VM_SET_SEGMENT_DESCRIPTOR
 \

336 
	`_IOW
('v', 
IOCNUM_SET_SEGMENT_DESCRIPTOR
, 
vm_£g_desc
)

	)

337 
	#VM_GET_SEGMENT_DESCRIPTOR
 \

338 
	`_IOWR
('v', 
IOCNUM_GET_SEGMENT_DESCRIPTOR
, 
vm_£g_desc
)

	)

339 
	#VM_SET_REGISTER_SET
 \

340 
	`_IOW
('v', 
IOCNUM_SET_REGISTER_SET
, 
vm_ªgi°î_£t
)

	)

341 
	#VM_GET_REGISTER_SET
 \

342 
	`_IOWR
('v', 
IOCNUM_GET_REGISTER_SET
, 
vm_ªgi°î_£t
)

	)

343 
	#VM_INJECT_EXCEPTION
 \

344 
	`_IOW
('v', 
IOCNUM_INJECT_EXCEPTION
, 
vm_ex˚±i⁄
)

	)

345 
	#VM_LAPIC_IRQ
 \

346 
	`_IOW
('v', 
IOCNUM_LAPIC_IRQ
, 
vm_œpic_úq
)

	)

347 
	#VM_LAPIC_LOCAL_IRQ
 \

348 
	`_IOW
('v', 
IOCNUM_LAPIC_LOCAL_IRQ
, 
vm_œpic_úq
)

	)

349 
	#VM_LAPIC_MSI
 \

350 
	`_IOW
('v', 
IOCNUM_LAPIC_MSI
, 
vm_œpic_msi
)

	)

351 
	#VM_IOAPIC_ASSERT_IRQ
 \

352 
	`_IOW
('v', 
IOCNUM_IOAPIC_ASSERT_IRQ
, 
vm_iﬂpic_úq
)

	)

353 
	#VM_IOAPIC_DEASSERT_IRQ
 \

354 
	`_IOW
('v', 
IOCNUM_IOAPIC_DEASSERT_IRQ
, 
vm_iﬂpic_úq
)

	)

355 
	#VM_IOAPIC_PULSE_IRQ
 \

356 
	`_IOW
('v', 
IOCNUM_IOAPIC_PULSE_IRQ
, 
vm_iﬂpic_úq
)

	)

357 
	#VM_IOAPIC_PINCOUNT
 \

358 
	`_IOR
('v', 
IOCNUM_IOAPIC_PINCOUNT
, )

	)

359 
	#VM_ISA_ASSERT_IRQ
 \

360 
	`_IOW
('v', 
IOCNUM_ISA_ASSERT_IRQ
, 
vm_iß_úq
)

	)

361 
	#VM_ISA_DEASSERT_IRQ
 \

362 
	`_IOW
('v', 
IOCNUM_ISA_DEASSERT_IRQ
, 
vm_iß_úq
)

	)

363 
	#VM_ISA_PULSE_IRQ
 \

364 
	`_IOW
('v', 
IOCNUM_ISA_PULSE_IRQ
, 
vm_iß_úq
)

	)

365 
	#VM_ISA_SET_IRQ_TRIGGER
 \

366 
	`_IOW
('v', 
IOCNUM_ISA_SET_IRQ_TRIGGER
, 
vm_iß_úq_åiggî
)

	)

367 
	#VM_SET_CAPABILITY
 \

368 
	`_IOW
('v', 
IOCNUM_SET_CAPABILITY
, 
vm_ˇ∑bûôy
)

	)

369 
	#VM_GET_CAPABILITY
 \

370 
	`_IOWR
('v', 
IOCNUM_GET_CAPABILITY
, 
vm_ˇ∑bûôy
)

	)

371 
	#VM_BIND_PPTDEV
 \

372 
	`_IOW
('v', 
IOCNUM_BIND_PPTDEV
, 
vm_µtdev
)

	)

373 
	#VM_UNBIND_PPTDEV
 \

374 
	`_IOW
('v', 
IOCNUM_UNBIND_PPTDEV
, 
vm_µtdev
)

	)

375 
	#VM_MAP_PPTDEV_MMIO
 \

376 
	`_IOW
('v', 
IOCNUM_MAP_PPTDEV_MMIO
, 
vm_µtdev_mmio
)

	)

377 
	#VM_PPTDEV_MSI
 \

378 
	`_IOW
('v', 
IOCNUM_PPTDEV_MSI
, 
vm_µtdev_msi
)

	)

379 
	#VM_PPTDEV_MSIX
 \

380 
	`_IOW
('v', 
IOCNUM_PPTDEV_MSIX
, 
vm_µtdev_msix
)

	)

381 
	#VM_INJECT_NMI
 \

382 
	`_IOW
('v', 
IOCNUM_INJECT_NMI
, 
vm_nmi
)

	)

383 
	#VM_STATS
 \

384 
	`_IOWR
('v', 
IOCNUM_VM_STATS
, 
vm_°©s
)

	)

385 
	#VM_STAT_DESC
 \

386 
	`_IOWR
('v', 
IOCNUM_VM_STAT_DESC
, 
vm_°©_desc
)

	)

387 
	#VM_SET_X2APIC_STATE
 \

388 
	`_IOW
('v', 
IOCNUM_SET_X2APIC_STATE
, 
vm_x2≠ic
)

	)

389 
	#VM_GET_X2APIC_STATE
 \

390 
	`_IOWR
('v', 
IOCNUM_GET_X2APIC_STATE
, 
vm_x2≠ic
)

	)

391 
	#VM_GET_HPET_CAPABILITIES
 \

392 
	`_IOR
('v', 
IOCNUM_GET_HPET_CAPABILITIES
, 
vm_h≥t_ˇp
)

	)

393 
	#VM_SET_TOPOLOGY
 \

394 
	`_IOW
('v', 
IOCNUM_SET_TOPOLOGY
, 
vm_˝u_t›ﬁogy
)

	)

395 
	#VM_GET_TOPOLOGY
 \

396 
	`_IOR
('v', 
IOCNUM_GET_TOPOLOGY
, 
vm_˝u_t›ﬁogy
)

	)

397 
	#VM_GET_GPA_PMAP
 \

398 
	`_IOWR
('v', 
IOCNUM_GET_GPA_PMAP
, 
vm_g∑_±e
)

	)

399 
	#VM_GLA2GPA
 \

400 
	`_IOWR
('v', 
IOCNUM_GLA2GPA
, 
vm_gœ2g∑
)

	)

401 
	#VM_GLA2GPA_NOFAULT
 \

402 
	`_IOWR
('v', 
IOCNUM_GLA2GPA_NOFAULT
, 
vm_gœ2g∑
)

	)

403 
	#VM_ACTIVATE_CPU
 \

404 
	`_IOW
('v', 
IOCNUM_ACTIVATE_CPU
, 
vm_a˘iv©e_˝u
)

	)

405 
	#VM_GET_CPUS
 \

406 
	`_IOW
('v', 
IOCNUM_GET_CPUSET
, 
vm_˝u£t
)

	)

407 
	#VM_SUSPEND_CPU
 \

408 
	`_IOW
('v', 
IOCNUM_SUSPEND_CPU
, 
vm_a˘iv©e_˝u
)

	)

409 
	#VM_RESUME_CPU
 \

410 
	`_IOW
('v', 
IOCNUM_RESUME_CPU
, 
vm_a˘iv©e_˝u
)

	)

411 
	#VM_SET_INTINFO
 \

412 
	`_IOW
('v', 
IOCNUM_SET_INTINFO
, 
vm_ötöfo
)

	)

413 
	#VM_GET_INTINFO
 \

414 
	`_IOWR
('v', 
IOCNUM_GET_INTINFO
, 
vm_ötöfo
)

	)

415 
	#VM_RTC_WRITE
 \

416 
	`_IOW
('v', 
IOCNUM_RTC_WRITE
, 
vm_πc_d©a
)

	)

417 
	#VM_RTC_READ
 \

418 
	`_IOWR
('v', 
IOCNUM_RTC_READ
, 
vm_πc_d©a
)

	)

419 
	#VM_RTC_SETTIME
 \

420 
	`_IOW
('v', 
IOCNUM_RTC_SETTIME
, 
vm_πc_time
)

	)

421 
	#VM_RTC_GETTIME
 \

422 
	`_IOR
('v', 
IOCNUM_RTC_GETTIME
, 
vm_πc_time
)

	)

423 
	#VM_RESTART_INSTRUCTION
 \

424 
	`_IOW
('v', 
IOCNUM_RESTART_INSTRUCTION
, )

	)

	@src/nvidia-drm/machine/vmm_instruction_emul.h

31 #i‚def 
_VMM_INSTRUCTION_EMUL_H_


32 
	#_VMM_INSTRUCTION_EMUL_H_


	)

34 
	~<sys/mm™.h
>

39 (*
	tmem_ªgi⁄_ªad_t
)(*
	tvm
, 
	t˝uid
, 
	tuöt64_t
 
	tg∑
,

40 
	tuöt64_t
 *
	trvÆ
, 
	trsize
, *
	t¨g
);

42 (*
	tmem_ªgi⁄_wrôe_t
)(*
	tvm
, 
	t˝uid
, 
	tuöt64_t
 
	tg∑
,

43 
	tuöt64_t
 
	twvÆ
, 
	twsize
, *
	t¨g
);

56 
	`vmm_emuœã_ö°ru˘i⁄
(*
vm
, 
˝uid
, 
uöt64_t
 
g∑
, 
võ
 *vie,

57 
vm_gue°_∑gög
 *
∑gög
, 
mem_ªgi⁄_ªad_t
 
mº
,

58 
mem_ªgi⁄_wrôe_t
 
mrw
, *
mørg
);

60 
	`võ_upd©e_ªgi°î
(*
vm
, 
v˝uid
, 
vm_ªg_«me
 
ªg
,

61 
uöt64_t
 
vÆ
, 
size
);

66 
	`võ_Æignmít_check
(
˝l
, 
›î™d_size
, 
uöt64_t
 
¸0
,

67 
uöt64_t
 
rÊags
, uöt64_à
gœ
);

70 
	`võ_ˇn⁄iˇl_check
(
vm_˝u_mode
 
˝u_mode
, 
uöt64_t
 
gœ
);

72 
uöt64_t
 
	`võ_size2mask
(
size
);

74 
	`võ_ˇlcuœã_gœ
(
vm_˝u_mode
 
˝u_mode
, 
vm_ªg_«me
 
£g
,

75 
£g_desc
 *
desc
, 
uöt64_t
 
off
, 
Àngth
, 
addrsize
, 
¥Ÿ
,

76 
uöt64_t
 *
gœ
);

78 #ifde‡
_KERNEL


84 
	`vmm_„tch_ö°ru˘i⁄
(
vm
 *vm, 
˝uid
,

85 
vm_gue°_∑gög
 *
gue°_∑gög
,

86 
uöt64_t
 
rù
, 
ö°_Àngth
, 
võ
 *vie,

87 *
is_Áu…
);

97 
	`vm_gœ2g∑
(
vm
 *vm, 
v˝uid
, 
vm_gue°_∑gög
 *
∑gög
,

98 
uöt64_t
 
gœ
, 
¥Ÿ
, uöt64_à*
g∑
, *
is_Áu…
);

104 
	`vm_gœ2g∑_noÁu…
(
vm
 *vm, 
v˝uid
, 
vm_gue°_∑gög
 *
∑gög
,

105 
uöt64_t
 
gœ
, 
¥Ÿ
, uöt64_à*
g∑
, *
is_Áu…
);

107 
	`võ_öô
(
võ
 *võ, c⁄° *
ö°_byãs
, 
ö°_Àngth
);

120 
	#VIE_INVALID_GLA
 (1UL << 63Ë

	)

121 
	`vmm_decode_ö°ru˘i⁄
(
vm
 *vm, 
˝uid
, 
uöt64_t
 
gœ
,

122 
vm_˝u_mode
 
˝u_mode
, 
csd
, 
võ
 *vie);

	@src/nvidia-drm/machine/vmparam.h

47 #i‚de‡
_MACHINE_VMPARAM_H_


48 
	#_MACHINE_VMPARAM_H_
 1

	)

57 
	#MAXTSIZ
 (32768UL*1024*1024Ë

	)

58 #i‚de‡
DFLDSIZ


59 
	#DFLDSIZ
 (32768UL*1024*1024Ë

	)

61 #i‚de‡
MAXDSIZ


62 
	#MAXDSIZ
 (32768UL*1024*1024Ë

	)

64 #i‚def 
DFLSSIZ


65 
	#DFLSSIZ
 (8UL*1024*1024Ë

	)

67 #i‚def 
MAXSSIZ


68 
	#MAXSSIZ
 (512UL*1024*1024Ë

	)

70 #i‚de‡
SGROWSIZ


71 
	#SGROWSIZ
 (128UL*1024Ë

	)

79 
	#UMA_MD_SMALL_ALLOC


	)

84 
	#VM_PHYSSEG_DENSE


	)

92 
	#VM_PHYSSEG_MAX
 63

	)

100 
	#VM_NFREEPOOL
 2

	)

101 
	#VM_FREEPOOL_DEFAULT
 0

	)

102 
	#VM_FREEPOOL_DIRECT
 1

	)

110 
	#VM_NFREELIST
 3

	)

111 
	#VM_FREELIST_DEFAULT
 0

	)

112 
	#VM_FREELIST_DMA32
 1

	)

113 
	#VM_FREELIST_LOWMEM
 2

	)

115 
	#VM_LOWMEM_BOUNDARY
 (16 << 20Ë

	)

122 
	#VM_DMA32_NPAGES_THRESHOLD
 16777216

	)

132 
	#VM_NFREEORDER
 13

	)

137 #i‚def 
VM_NRESERVLEVEL


138 
	#VM_NRESERVLEVEL
 1

	)

144 #i‚def 
VM_LEVEL_0_ORDER


145 
	#VM_LEVEL_0_ORDER
 9

	)

148 #ifdef 
SMP


149 
	#PA_LOCK_COUNT
 256

	)

171 
	#VM_MIN_KERNEL_ADDRESS
 
	`KVADDR
(
KPML4BASE
, 0, 0, 0)

	)

172 
	#VM_MAX_KERNEL_ADDRESS
 
	`KVADDR
(
KPML4BASE
 + 
NKPML4E
 - 1, \

173 
NPDPEPG
-1, 
NPDEPG
-1, 
NPTEPG
-1)

	)

175 
	#DMAP_MIN_ADDRESS
 
	`KVADDR
(
DMPML4I
, 0, 0, 0)

	)

176 
	#DMAP_MAX_ADDRESS
 
	`KVADDR
(
DMPML4I
 + 
NDMPML4E
, 0, 0, 0)

	)

178 
	#LARGEMAP_MIN_ADDRESS
 
	`KVADDR
(
LMSPML4I
, 0, 0, 0)

	)

179 
	#LARGEMAP_MAX_ADDRESS
 
	`KVADDR
(
LMEPML4I
 + 1, 0, 0, 0)

	)

181 
	#KERNBASE
 
	`KVADDR
(
KPML4I
, 
KPDPI
, 0, 0)

	)

183 
	#UPT_MAX_ADDRESS
 
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, PML4PML4I)

	)

184 
	#UPT_MIN_ADDRESS
 
	`KVADDR
(
PML4PML4I
, 0, 0, 0)

	)

186 
	#VM_MAXUSER_ADDRESS
 
	`UVADDR
(
NUPML4E
, 0, 0, 0)

	)

188 
	#SHAREDPAGE
 (
VM_MAXUSER_ADDRESS
 - 
PAGE_SIZE
)

	)

189 
	#USRSTACK
 
SHAREDPAGE


	)

191 
	#VM_MAX_ADDRESS
 
UPT_MAX_ADDRESS


	)

192 
	#VM_MIN_ADDRESS
 (0)

	)

200 
	#PMAP_HAS_DMAP
 1

	)

201 
	#PHYS_TO_DMAP
(
x
) ({ \

202 
	`KASSERT
(
dm≠limô
 =0 || (
x
) < dmaplimit, \

204 (
uötmax_t
)
x
)); \

205 (
x
Ë| 
DMAP_MIN_ADDRESS
; })

	)

207 
	#DMAP_TO_PHYS
(
x
) ({ \

208 
	`KASSERT
((
x
Ë< (
DMAP_MIN_ADDRESS
 + 
dm≠limô
) && \

209 (
x
Ë>
DMAP_MIN_ADDRESS
, \

211 (
uötmax_t
)
x
)); \

212 (
x
Ë& ~
DMAP_MIN_ADDRESS
; })

	)

217 #i‚de‡
VM_KMEM_SIZE_SCALE


218 
	#VM_KMEM_SIZE_SCALE
 (1)

	)

225 #i‚de‡
VM_KMEM_SIZE_MAX


226 
	#VM_KMEM_SIZE_MAX
 ((
VM_MAX_KERNEL_ADDRESS
 - \

227 
VM_MIN_KERNEL_ADDRESS
 + 1Ë* 3 / 5)

	)

231 #i‚de‡
VM_INITIAL_PAGEIN


232 
	#VM_INITIAL_PAGEIN
 16

	)

235 
	#ZERO_REGION_SIZE
 (2 * 1024 * 1024Ë

	)

241 
	#VM_BATCHQUEUE_SIZE
 31

	)

	@src/nvidia-drm/machine/xen/hypercall.h

39 #i‚de‡
__MACHINE_XEN_HYPERCALL_H__


40 
	#__MACHINE_XEN_HYPERCALL_H__


	)

42 
	~<sys/sy°m.h
>

44 #i‚de‡
__XEN_HYPERVISOR_H__


48 *
hy≥rˇŒ_∑ge
;

50 
	#__STR
(
x
Ë#x

	)

51 
	#STR
(
x
Ë
	`__STR
(x)

	)

52 
	#ENOXENSYS
 38

	)

53 
	#CONFIG_XEN_COMPAT
 0x030002

	)

54 
	#__mu°_check


	)

56 
	#HYPERCALL_STR
(
«me
) \

57 "ˇŒ hy≥rˇŒ_∑gê+ ("
	`STR
(
__HYPERVISOR_
##
«me
)" * 32)"

	)

59 
	#_hy≥rˇŒ0
(
ty≥
, 
«me
) \

61 
ty≥
 
__ªs
; \

62 
__asm__
 volatile ( \

63 
	`HYPERCALL_STR
(
«me
) \

64 : "˜" (
__ªs
) \

67 
__ªs
; \

68 })

	)

70 
	#_hy≥rˇŒ1
(
ty≥
, 
«me
, 
a1
) \

72 
ty≥
 
__ªs
; \

73 
__ign1
; \

74 
__asm__
 volatile ( \

75 
	`HYPERCALL_STR
(
«me
) \

76 : "˜" (
__ªs
), "=D" (
__ign1
) \

77 : "1" (()(
a1
)) \

79 
__ªs
; \

80 })

	)

82 
	#_hy≥rˇŒ2
(
ty≥
, 
«me
, 
a1
, 
a2
) \

84 
ty≥
 
__ªs
; \

85 
__ign1
, 
__ign2
; \

86 
__asm__
 volatile ( \

87 
	`HYPERCALL_STR
(
«me
) \

88 : "˜" (
__ªs
), "=D" (
__ign1
), "=S" (
__ign2
) \

89 : "1" (()(
a1
)), "2" (()(
a2
)) \

91 
__ªs
; \

92 })

	)

94 
	#_hy≥rˇŒ3
(
ty≥
, 
«me
, 
a1
, 
a2
, 
a3
) \

96 
ty≥
 
__ªs
; \

97 
__ign1
, 
__ign2
, 
__ign3
; \

98 
__asm__
 volatile ( \

99 
	`HYPERCALL_STR
(
«me
) \

100 : "˜" (
__ªs
), "=D" (
__ign1
), "=S" (
__ign2
), \

101 "=d" (
__ign3
) \

102 : "1" (()(
a1
)), "2" (()(
a2
)), \

103 "3" (()(
a3
)) \

105 
__ªs
; \

106 })

	)

108 
	#_hy≥rˇŒ4
(
ty≥
, 
«me
, 
a1
, 
a2
, 
a3
, 
a4
) \

110 
ty≥
 
__ªs
; \

111 
__ign1
, 
__ign2
, 
__ign3
; \

112 
__¨g4
 
	`__asm__
("r10"Ë()(
a4
); \

113 
__asm__
 volatile ( \

114 
	`HYPERCALL_STR
(
«me
) \

115 : "˜" (
__ªs
), "=D" (
__ign1
), "=S" (
__ign2
), \

116 "=d" (
__ign3
), "+r" (
__¨g4
) \

117 : "1" (()(
a1
)), "2" (()(
a2
)), \

118 "3" (()(
a3
)) \

120 
__ªs
; \

121 })

	)

123 
	#_hy≥rˇŒ5
(
ty≥
, 
«me
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
) \

125 
ty≥
 
__ªs
; \

126 
__ign1
, 
__ign2
, 
__ign3
; \

127 
__¨g4
 
	`__asm__
("r10"Ë()(
a4
); \

128 
__¨g5
 
	`__asm__
("r8"Ë()(
a5
); \

129 
__asm__
 volatile ( \

130 
	`HYPERCALL_STR
(
«me
) \

131 : "˜" (
__ªs
), "=D" (
__ign1
), "=S" (
__ign2
), \

132 "=d" (
__ign3
), "+r" (
__¨g4
), "+r" (
__¨g5
) \

133 : "1" (()(
a1
)), "2" (()(
a2
)), \

134 "3" (()(
a3
)) \

136 
__ªs
; \

137 })

	)

139 
ölöe
 

140 
	$¥ivcmd_hy≥rˇŒ
(
›
, 
a1
, 
a2
, 
a3
, 
a4
, 
a5
)

142 
__ªs
;

143 
__ign1
, 
__ign2
, 
__ign3
;

144 
__¨g4
 
	`__asm__
("r10"Ë()(
a4
);

145 
__¨g5
 
	`__asm__
("r8"Ë()(
a5
);

146 
__ˇŒ
 = ()&
hy≥rˇŒ_∑ge
 + (
›
 * 32);

148 
__asm__
 volatile (

150 : "˜" (
__ªs
), "=D" (
__ign1
), "=S" (
__ign2
),

151 "=d" (
__ign3
), "+r" (
__¨g4
), "+r" (
__¨g5
)

152 : "1" (()(
a1
)), "2" (()(
a2
)),

153 "3" (()(
a3
)), [
ˇŒ
] "a" (
__ˇŒ
)

156  (
__ªs
);

157 
	}
}

159 
ölöe
 
__mu°_check


160 
	$HYPERVISOR_£t_å≠_èbÀ
(

161 c⁄° 
å≠_öfo_t
 *
èbÀ
)

163  
	`_hy≥rˇŒ1
(, 
£t_å≠_èbÀ
, 
èbÀ
);

164 
	}
}

166 
ölöe
 
__mu°_check


167 
	$HYPERVISOR_mmu_upd©e
(

168 
mmu_upd©e_t
 *
ªq
, 
cou¡
, *
suc˚ss_cou¡
,

169 
domid_t
 
domid
)

171  
	`_hy≥rˇŒ4
(, 
mmu_upd©e
, 
ªq
, 
cou¡
, 
suc˚ss_cou¡
, 
domid
);

172 
	}
}

174 
ölöe
 
__mu°_check


175 
	$HYPERVISOR_mmuext_›
(

176 
mmuext_›
 *
›
, 
cou¡
, *
suc˚ss_cou¡
,

177 
domid_t
 
domid
)

179  
	`_hy≥rˇŒ4
(, 
mmuext_›
, 
›
, 
cou¡
, 
suc˚ss_cou¡
, 
domid
);

180 
	}
}

182 
ölöe
 
__mu°_check


183 
	$HYPERVISOR_£t_gdt
(

184 *
‰ame_li°
, 
íåõs
)

186  
	`_hy≥rˇŒ2
(, 
£t_gdt
, 
‰ame_li°
, 
íåõs
);

187 
	}
}

189 
ölöe
 
__mu°_check


190 
	$HYPERVISOR_°ack_swôch
(

191 
ss
, 
e•
)

193  
	`_hy≥rˇŒ2
(, 
°ack_swôch
, 
ss
, 
e•
);

194 
	}
}

196 
ölöe
 
__mu°_check


197 
	$HYPERVISOR_£t_ˇŒbacks
(

198 
evít_addªss
, 
Áûß„_addªss
,

199 
sysˇŒ_addªss
)

201  
	`_hy≥rˇŒ3
(, 
£t_ˇŒbacks
,

202 
evít_addªss
, 
Áûß„_addªss
, 
sysˇŒ_addªss
);

203 
	}
}

205 
ölöe
 

206 
	$HYPERVISOR_Âu_èskswôch
(

207 
£t
)

209  
	`_hy≥rˇŒ1
(, 
Âu_èskswôch
, 
£t
);

210 
	}
}

212 
ölöe
 
__mu°_check


213 
	$HYPERVISOR_sched_›_com∑t
(

214 
cmd
, 
¨g
)

216  
	`_hy≥rˇŒ2
(, 
sched_›_com∑t
, 
cmd
, 
¨g
);

217 
	}
}

219 
ölöe
 
__mu°_check


220 
	$HYPERVISOR_sched_›
(

221 
cmd
, *
¨g
)

223  
	`_hy≥rˇŒ2
(, 
sched_›
, 
cmd
, 
¨g
);

224 
	}
}

226 
ölöe
 
__mu°_check


227 
	$HYPERVISOR_£t_timî_›
(

228 
uöt64_t
 
timeout
)

230  
	`_hy≥rˇŒ1
(, 
£t_timî_›
, 
timeout
);

231 
	}
}

233 
ölöe
 
__mu°_check


234 
	$HYPERVISOR_∂©f‹m_›
(

235 
xí_∂©f‹m_›
 *
∂©f‹m_›
)

237 
∂©f‹m_›
->
öãrÁ˚_vîsi⁄
 = 
XENPF_INTERFACE_VERSION
;

238  
	`_hy≥rˇŒ1
(, 
∂©f‹m_›
,Ölatform_op);

239 
	}
}

241 
ölöe
 
__mu°_check


242 
	$HYPERVISOR_£t_debugªg
(

243 
ªg
, 
vÆue
)

245  
	`_hy≥rˇŒ2
(, 
£t_debugªg
, 
ªg
, 
vÆue
);

246 
	}
}

248 
ölöe
 
__mu°_check


249 
	$HYPERVISOR_gë_debugªg
(

250 
ªg
)

252  
	`_hy≥rˇŒ1
(, 
gë_debugªg
, 
ªg
);

253 
	}
}

255 
ölöe
 
__mu°_check


256 
	$HYPERVISOR_upd©e_des¸ùt‹
(

257 
ma
, 
w‹d
)

259  
	`_hy≥rˇŒ2
(, 
upd©e_des¸ùt‹
, 
ma
, 
w‹d
);

260 
	}
}

262 
ölöe
 
__mu°_check


263 
	$HYPERVISOR_mem‹y_›
(

264 
cmd
, *
¨g
)

266  
	`_hy≥rˇŒ2
(, 
mem‹y_›
, 
cmd
, 
¨g
);

267 
	}
}

269 
ölöe
 
__mu°_check


270 
	$HYPERVISOR_mu…iˇŒ
(

271 
mu…iˇŒ_íåy_t
 *
ˇŒ_li°
, 
ƒ_ˇŒs
)

273  
	`_hy≥rˇŒ2
(, 
mu…iˇŒ
, 
ˇŒ_li°
, 
ƒ_ˇŒs
);

274 
	}
}

276 
ölöe
 
__mu°_check


277 
	$HYPERVISOR_upd©e_va_m≠pög
(

278 
va
, 
uöt64_t
 
√w_vÆ
, 
Êags
)

280  
	`_hy≥rˇŒ3
(, 
upd©e_va_m≠pög
, 
va
, 
√w_vÆ
, 
Êags
);

281 
	}
}

283 
ölöe
 
__mu°_check


284 
	$HYPERVISOR_evít_ch™√l_›
(

285 
cmd
, *
¨g
)

287 
rc
 = 
	`_hy≥rˇŒ2
(, 
evít_ch™√l_›
, 
cmd
, 
¨g
);

289 #i‡
CONFIG_XEN_COMPAT
 <= 0x030002

290 i‡(
	`__¥edi˘_Ál£
(
rc
 =-
ENOXENSYS
)) {

291 
evtchn_›
 
›
;

292 
›
.
cmd
 = cmd;

293 
	`mem˝y
(&
›
.
u
, 
¨g
, (op.u));

294 
rc
 = 
	`_hy≥rˇŒ1
(, 
evít_ch™√l_›_com∑t
, &
›
);

295 
	`mem˝y
(
¨g
, &
›
.
u
, (op.u));

299  
rc
;

300 
	}
}

302 
ölöe
 
__mu°_check


303 
	$HYPERVISOR_xí_vîsi⁄
(

304 
cmd
, *
¨g
)

306  
	`_hy≥rˇŒ2
(, 
xí_vîsi⁄
, 
cmd
, 
¨g
);

307 
	}
}

309 
ölöe
 
__mu°_check


310 
	$HYPERVISOR_c⁄sﬁe_io
(

311 
cmd
, 
cou¡
, c⁄° *
°r
)

313  
	`_hy≥rˇŒ3
(, 
c⁄sﬁe_io
, 
cmd
, 
cou¡
, 
°r
);

314 
	}
}

316 
ölöe
 
__mu°_check


317 
	$HYPERVISOR_physdev_›
(

318 
cmd
, *
¨g
)

320 
rc
 = 
	`_hy≥rˇŒ2
(, 
physdev_›
, 
cmd
, 
¨g
);

322 #i‡
CONFIG_XEN_COMPAT
 <= 0x030002

323 i‡(
	`__¥edi˘_Ál£
(
rc
 =-
ENOXENSYS
)) {

324 
physdev_›
 
›
;

325 
›
.
cmd
 = cmd;

326 
	`mem˝y
(&
›
.
u
, 
¨g
, (op.u));

327 
rc
 = 
	`_hy≥rˇŒ1
(, 
physdev_›_com∑t
, &
›
);

328 
	`mem˝y
(
¨g
, &
›
.
u
, (op.u));

332  
rc
;

333 
	}
}

335 
ölöe
 
__mu°_check


336 
	$HYPERVISOR_gø¡_èbÀ_›
(

337 
cmd
, *
u›
, 
cou¡
)

339  
	`_hy≥rˇŒ3
(, 
gø¡_èbÀ_›
, 
cmd
, 
u›
, 
cou¡
);

340 
	}
}

342 
ölöe
 
__mu°_check


343 
	$HYPERVISOR_upd©e_va_m≠pög_Ÿhîdomaö
(

344 
va
, 
uöt64_t
 
√w_vÆ
, 
Êags
, 
domid_t
 
domid
)

346  
	`_hy≥rˇŒ4
(, 
upd©e_va_m≠pög_Ÿhîdomaö
, 
va
,

347 
√w_vÆ
, 
Êags
, 
domid
);

348 
	}
}

350 
ölöe
 
__mu°_check


351 
	$HYPERVISOR_vm_assi°
(

352 
cmd
, 
ty≥
)

354  
	`_hy≥rˇŒ2
(, 
vm_assi°
, 
cmd
, 
ty≥
);

355 
	}
}

357 
ölöe
 
__mu°_check


358 
	$HYPERVISOR_v˝u_›
(

359 
cmd
, 
v˝uid
, *
exåa_¨gs
)

361  
	`_hy≥rˇŒ3
(, 
v˝u_›
, 
cmd
, 
v˝uid
, 
exåa_¨gs
);

362 
	}
}

364 
ölöe
 
__mu°_check


365 
	$HYPERVISOR_£t_£gmít_ba£
(

366 
ªg
, 
vÆue
)

368  
	`_hy≥rˇŒ2
(, 
£t_£gmít_ba£
, 
ªg
, 
vÆue
);

369 
	}
}

371 
ölöe
 
__mu°_check


372 
	$HYPERVISOR_su•íd
(

373 
§ec
)

375 
sched_shutdown
 sched_shutdown = {

376 .
ªas⁄
 = 
SHUTDOWN_su•íd


379 
rc
 = 
	`_hy≥rˇŒ3
(, 
sched_›
, 
SCHEDOP_shutdown
,

380 &
sched_shutdown
, 
§ec
);

382 #i‡
CONFIG_XEN_COMPAT
 <= 0x030002

383 i‡(
rc
 =-
ENOXENSYS
)

384 
rc
 = 
	`_hy≥rˇŒ3
(, 
sched_›_com∑t
, 
SCHEDOP_shutdown
,

385 
SHUTDOWN_su•íd
, 
§ec
);

388  
rc
;

389 
	}
}

391 #i‡
CONFIG_XEN_COMPAT
 <= 0x030002

392 
ölöe
 

393 
	$HYPERVISOR_nmi_›
(

394 
›
, *
¨g
)

396  
	`_hy≥rˇŒ2
(, 
nmi_›
, 
›
, 
¨g
);

397 
	}
}

400 #i‚de‡
CONFIG_XEN


401 
ölöe
 
__mu°_check


402 
	$HYPERVISOR_hvm_›
(

403 
›
, *
¨g
)

405  
	`_hy≥rˇŒ2
(, 
hvm_›
, 
›
, 
¨g
);

406 
	}
}

409 
ölöe
 
__mu°_check


410 
	$HYPERVISOR_ˇŒback_›
(

411 
cmd
, c⁄° *
¨g
)

413  
	`_hy≥rˇŒ2
(, 
ˇŒback_›
, 
cmd
, 
¨g
);

414 
	}
}

416 
ölöe
 
__mu°_check


417 
	$HYPERVISOR_xí›rof_›
(

418 
›
, *
¨g
)

420  
	`_hy≥rˇŒ2
(, 
xí›rof_›
, 
›
, 
¨g
);

421 
	}
}

423 
ölöe
 
__mu°_check


424 
	$HYPERVISOR_kexec_›
(

425 
›
, *
¨gs
)

427  
	`_hy≥rˇŒ2
(, 
kexec_›
, 
›
, 
¨gs
);

428 
	}
}

430 #unde‡
__mu°_check


	@src/nvidia-drm/machine/xen/synch_bitops.h

1 #i‚de‡
__XEN_SYNCH_BITOPS_H__


2 
	#__XEN_SYNCH_BITOPS_H__


	)

11 
	#ADDR
 (*(vﬁ©ûê*Ë
addr
)

	)

13 
__ölöe__
 
	$synch_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

15 
__asm__
 
	`__vﬁ©ûe__
 (

17 : "=m" (
ADDR
Ë: "Ir" (
ƒ
) : "memory" );

18 
	}
}

20 
__ölöe__
 
	$synch_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

22 
__asm__
 
	`__vﬁ©ûe__
 (

24 : "=m" (
ADDR
Ë: "Ir" (
ƒ
) : "memory" );

25 
	}
}

27 
__ölöe__
 
	$synch_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

29 
__asm__
 
	`__vﬁ©ûe__
 (

31 : "=m" (
ADDR
Ë: "Ir" (
ƒ
) : "memory" );

32 
	}
}

34 
__ölöe__
 
	$synch_ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

36 
ﬁdbô
;

37 
__asm__
 
	`__vﬁ©ûe__
 (

39 : "Ù" (
ﬁdbô
), "=m" (
ADDR
Ë: "Ir" (
ƒ
) : "memory");

40  
ﬁdbô
;

41 
	}
}

43 
__ölöe__
 
	$synch_ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

45 
ﬁdbô
;

46 
__asm__
 
	`__vﬁ©ûe__
 (

48 : "Ù" (
ﬁdbô
), "=m" (
ADDR
Ë: "Ir" (
ƒ
) : "memory");

49  
ﬁdbô
;

50 
	}
}

52 
__ölöe__
 
	$synch_ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

54 
ﬁdbô
;

56 
__asm__
 
	`__vﬁ©ûe__
 (

58 : "Ù" (
ﬁdbô
), "=m" (
ADDR
Ë: "Ir" (
ƒ
) : "memory");

59  
ﬁdbô
;

60 
	}
}

62 
	s__synch_xchg_dummy
 { 
	ma
[100]; };

63 
	#__synch_xg
(
x
Ë((vﬁ©ûê
__synch_xchg_dummy
 *)(x))

	)

65 
	#synch_cmpxchg
(
±r
, 
ﬁd
, 
√w
) \

66 ((
	`__ty≥of__
(*(
±r
)))
	`__synch_cmpxchg
((ptr),\

67 ()(
ﬁd
), \

68 ()(
√w
), \

69 (*(
±r
))))

	)

71 
ölöe
 
	$__synch_cmpxchg
(vﬁ©ûê*
±r
,

72 
ﬁd
,

73 
√w
, 
size
)

75 
¥ev
;

76 
size
) {

78 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgb %b1,%2"

79 : "˜"(
¥ev
)

80 : "q"(
√w
), "m"(*
	`__synch_xg
(
±r
)),

81 "0"(
ﬁd
)

83  
¥ev
;

85 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgw %w1,%2"

86 : "˜"(
¥ev
)

87 : "q"(
√w
), "m"(*
	`__synch_xg
(
±r
)),

88 "0"(
ﬁd
)

90  
¥ev
;

92 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgl %k1,%2"

93 : "˜"(
¥ev
)

94 : "q"(
√w
), "m"(*
	`__synch_xg
(
±r
)),

95 "0"(
ﬁd
)

97  
¥ev
;

99 
__asm__
 
	`__vﬁ©ûe__
("lock; cmpxchgq %1,%2"

100 : "˜"(
¥ev
)

101 : "q"(
√w
), "m"(*
	`__synch_xg
(
±r
)),

102 "0"(
ﬁd
)

104  
¥ev
;

106  
ﬁd
;

107 
	}
}

109 
__ölöe__
 
	$synch_c⁄°_ã°_bô
(
ƒ
, c⁄° vﬁ©ûê* 
addr
)

111  ((1UL << (
ƒ
 & 31)) &

112 (((c⁄° vﬁ©ûê*Ë
addr
)[
ƒ
 >> 5])) != 0;

113 
	}
}

115 
__ölöe__
 
	$synch_v¨_ã°_bô
(
ƒ
, vﬁ©ûê* 
addr
)

117 
ﬁdbô
;

118 
__asm__
 
	`__vﬁ©ûe__
 (

120 : "Ù" (
ﬁdbô
Ë: "m" (
ADDR
), "Ir" (
ƒ
) );

121  
ﬁdbô
;

122 
	}
}

124 
	#synch_ã°_bô
(
ƒ
,
addr
) \

125 (
	`__buûtö_c⁄°™t_p
(
ƒ
) ? \

126 
	`synch_c⁄°_ã°_bô
((
ƒ
),(
addr
)) : \

127 
	`synch_v¨_ã°_bô
((
ƒ
),(
addr
)))

	)

	@src/nvidia-drm/machine/xen/xen-os.h

6 
	~<x86/xí/xí-os.h
>

	@src/nvidia-drm/nv-mm.h

23 #i‚de‡
__NV_MM_H__


24 
	#__NV_MM_H__


	)

26 #ifde‡
__löux__


27 
	~"c⁄·e°.h
"

44 #i‡
deföed
(
NV_GET_USER_PAGES_HAS_TASK_STRUCT
)

45 
	#NV_GET_USER_PAGES
(
°¨t
, 
ƒ_∑ges
, 
wrôe
, 
f‹˚
, 
∑ges
, 
vmas
) \

46 
	`gë_u£r_∑ges
(
cuºít
, cuºít->
mm
, 
°¨t
, 
ƒ_∑ges
, 
wrôe
, 
f‹˚
, 
∑ges
, 
vmas
)

	)

48 #i‡
deföed
(
NV_GET_USER_PAGES_HAS_WRITE_AND_FORCE_ARGS
)

49 
	#NV_GET_USER_PAGES
 
gë_u£r_∑ges


	)

51 
	~<löux/mm.h
>

53 
ölöe
 
	$NV_GET_USER_PAGES
(
°¨t
,

54 
ƒ_∑ges
,

55 
wrôe
,

56 
f‹˚
,

57 
∑ge
 **
∑ges
,

58 
vm_¨ó_°ru˘
 **
vmas
)

60 
Êags
 = 0;

62 i‡(
wrôe
)

63 
Êags
 |
FOLL_WRITE
;

64 i‡(
f‹˚
)

65 
Êags
 |
FOLL_FORCE
;

67  
	`gë_u£r_∑ges
(
°¨t
, 
ƒ_∑ges
, 
Êags
, 
∑ges
, 
vmas
);

68 
	}
}

93 #i‡
deföed
(
NV_GET_USER_PAGES_REMOTE_PRESENT
)

94 #i‡
deföed
(
NV_GET_USER_PAGES_REMOTE_HAS_WRITE_AND_FORCE_ARGS
)

95 
	#NV_GET_USER_PAGES_REMOTE
 
gë_u£r_∑ges_ªmŸe


	)

97 
ölöe
 
	$NV_GET_USER_PAGES_REMOTE
(
èsk_°ru˘
 *
tsk
,

98 
mm_°ru˘
 *
mm
,

99 
°¨t
,

100 
ƒ_∑ges
,

101 
wrôe
,

102 
f‹˚
,

103 
∑ge
 **
∑ges
,

104 
vm_¨ó_°ru˘
 **
vmas
)

106 
Êags
 = 0;

108 i‡(
wrôe
)

109 
Êags
 |
FOLL_WRITE
;

110 i‡(
f‹˚
)

111 
Êags
 |
FOLL_FORCE
;

113 #i‡
	`deföed
(
NV_GET_USER_PAGES_REMOTE_HAS_LOCKED_ARG
)

115  
	`gë_u£r_∑ges_ªmŸe
(
tsk
, 
mm
, 
°¨t
, 
ƒ_∑ges
, 
Êags
,

116 
∑ges
, 
vmas
, 
NULL
);

120  
	`gë_u£r_∑ges_ªmŸe
(
tsk
, 
mm
, 
°¨t
, 
ƒ_∑ges
, 
Êags
,

121 
∑ges
, 
vmas
);

125 
	}
}

128 
	#NV_GET_USER_PAGES_REMOTE
 
gë_u£r_∑ges


	)

152 #i‡
deföed
(
NV_VM_FAULT_PRESENT
)

153 
ölöe
 
	$nv_∑ge_Áu…_va
(
vm_Áu…
 *
vmf
)

155 #i‡
	`deföed
(
NV_VM_FAULT_HAS_ADDRESS
)

156  
vmf
->
addªss
;

158  ()(
vmf
->
vútuÆ_addªss
);

160 
	}
}

	@src/nvidia-drm/nvidia-dma-fence-helper.h

23 #i‚de‡
__NVIDIA_DMA_FENCE_HELPER_H__


24 
	#__NVIDIA_DMA_FENCE_HELPER_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

37 #i‡
deföed
(
NV_LINUX_FENCE_H_PRESENT
)

38 
	~<löux/„n˚.h
>

40 
	~<löux/dma-„n˚.h
>

43 
	~<löux/ª£rv©i⁄.h
>

45 #i‡
deföed
(
NV_LINUX_FENCE_H_PRESENT
)

46 
„n˚
 
	tnv_dma_„n˚_t
;

47 
„n˚_›s
 
	tnv_dma_„n˚_›s_t
;

49 
dma_„n˚
 
	tnv_dma_„n˚_t
;

50 
dma_„n˚_›s
 
	tnv_dma_„n˚_›s_t
;

53 #i‡
deföed
(
NV_LINUX_FENCE_H_PRESENT
)

54 
	#NV_DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT
 
FENCE_FLAG_ENABLE_SIGNAL_BIT


	)

56 
	#NV_DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT
 
DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT


	)

59 
ölöe
 
boﬁ
 
	$nv_dma_„n˚_is_sig«Àd
(
nv_dma_„n˚_t
 *
„n˚
) {

60 #i‡
	`deföed
(
NV_LINUX_FENCE_H_PRESENT
)

61  
	`„n˚_is_sig«Àd
(
„n˚
);

63  
	`dma_„n˚_is_sig«Àd
(
„n˚
);

65 
	}
}

67 
ölöe
 
nv_dma_„n˚_t
 *
	$nv_dma_„n˚_gë
(
nv_dma_„n˚_t
 *
„n˚
)

69 #i‡
	`deföed
(
NV_LINUX_FENCE_H_PRESENT
)

70  
	`„n˚_gë
(
„n˚
);

72  
	`dma_„n˚_gë
(
„n˚
);

74 
	}
}

76 
ölöe
 
	$nv_dma_„n˚_put
(
nv_dma_„n˚_t
 *
„n˚
) {

77 #i‡
	`deföed
(
NV_LINUX_FENCE_H_PRESENT
)

78 
	`„n˚_put
(
„n˚
);

80 
	`dma_„n˚_put
(
„n˚
);

82 
	}
}

84 
ölöe
 signed 

85 
	$nv_dma_„n˚_deÁu…_waô
(
nv_dma_„n˚_t
 *
„n˚
,

86 
boﬁ
 
öå
, sig√d 
timeout
) {

87 #i‡
	`deföed
(
NV_LINUX_FENCE_H_PRESENT
)

88  
	`„n˚_deÁu…_waô
(
„n˚
, 
öå
, 
timeout
);

90  
	`dma_„n˚_deÁu…_waô
(
„n˚
, 
öå
, 
timeout
);

92 
	}
}

94 
ölöe
 
	$nv_dma_„n˚_sig«l
(
nv_dma_„n˚_t
 *
„n˚
) {

95 #i‡
	`deföed
(
NV_LINUX_FENCE_H_PRESENT
)

96  
	`„n˚_sig«l
(
„n˚
);

98  
	`dma_„n˚_sig«l
(
„n˚
);

100 
	}
}

102 
ölöe
 
u64
 
	$nv_dma_„n˚_c⁄ãxt_Æloc
(
num
) {

103 #i‡
	`deföed
(
NV_LINUX_FENCE_H_PRESENT
)

104  
	`„n˚_c⁄ãxt_Æloc
(
num
);

106  
	`dma_„n˚_c⁄ãxt_Æloc
(
num
);

108 
	}
}

110 
ölöe
 

111 
	$nv_dma_„n˚_öô
(
nv_dma_„n˚_t
 *
„n˚
,

112 c⁄° 
nv_dma_„n˚_›s_t
 *
›s
,

113 
•ölock_t
 *
lock
, 
u64
 
c⁄ãxt
, 
£qno
) {

114 #i‡
	`deföed
(
NV_LINUX_FENCE_H_PRESENT
)

115 
	`„n˚_öô
(
„n˚
, 
›s
, 
lock
, 
c⁄ãxt
, 
£qno
);

117 
	`dma_„n˚_öô
(
„n˚
, 
›s
, 
lock
, 
c⁄ãxt
, 
£qno
);

119 
	}
}

	@src/nvidia-drm/nvidia-drm-conftest.h

23 #i‚de‡
__NVIDIA_DRM_CONFTEST_H__


24 
	#__NVIDIA_DRM_CONFTEST_H__


	)

29 #ifde‡
__löux__


31 
	~"c⁄·e°.h
"

43 
	~<löux/ªfcou¡.h
>

45 
	#ªfcou¡_öc
(
__±r
) \

47 
	`©omic_öc
(&(
__±r
)->
ªfs
); \

48 } 0)

	)

51 
	#ªfcou¡_dec_™d_ã°
(
__±r
Ë
	`©omic_dec_™d_ã°
(&(__±r)->
ªfs
)

	)

56 
	~<drm/drm_gem.h
>

57 
	~<drm/drm_ícodî.h
>

58 
	~<löux/idr.h
>

59 
	~<drm/drm_auth.h
>

60 
	#NV_VM_FAULT_PRESENT


	)

61 
	~"nv-mm.h
"

62 
	~<löux/mm.h
>

64 
	~<löux/li°.h
>

66 
	#LIST_HEAD_INIT
(
«me
Ë
	`LINUX_LIST_HEAD_INIT
“ame)

	)

74 
	#NV_DRM_AVAILABLE


	)

75 
	#NV_DRM_ATOMIC_MODESET_AVAILABLE


	)

77 
	#NV_DRM_DEV_UNREF_PRESENT


	)

78 
	#NV_DRM_ATOMIC_HELPER_SET_CONFIG_PRESENT


	)

79 
	#NV_DRM_ATOMIC_HELPER_SET_CONFIG_HAS_CTX_ARG


	)

80 
	#NV_DRM_MODE_OBJECT_FIND_HAS_FILE_PRIV_ARG


	)

81 
	#NV_DRM_CONNECTOR_FUNCS_HAVE_MODE_IN_NAME


	)

82 
	#NV_DRM_GEM_OBJECT_LOOKUP_PRESENT


	)

83 
	#NV_DRM_GEM_OBJECT_LOOKUP_ARGUMENT_COUNT
 2

	)

84 
	#NV_DRM_CRTC_HELPER_FUNCS_HAS_ATOMIC_ENABLE


	)

85 
	#NV_DRM_UNIVERSAL_PLANE_INIT_HAS_FORMAT_MODIFIERS_ARG


	)

86 
	#NV_DRM_UNIVERSAL_PLANE_INIT_HAS_NAME_ARG


	)

87 
	#NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE


	)

88 
	#NV_DRM_CRTC_INIT_WITH_PLANES_HAS_NAME_ARG


	)

89 
	#NV_DRM_HELPER_MODE_FILL_FB_STRUCT_HAS_CONST_MODE_CMD_ARG


	)

90 
	#NV_DRM_DRIVER_HAS_LEGACY_DEV_LIST


	)

91 
	#NV_DRM_ENCODER_INIT_HAS_NAME_ARG


	)

92 
	#NV_DRM_HELPER_MODE_FILL_FB_STRUCT_HAS_DEV_ARG


	)

	@src/nvidia-drm/nvidia-drm-connector.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

27 
	~"nvidü-drm-hñ≥r.h
"

28 
	~"nvidü-drm-¥iv.h
"

29 
	~"nvidü-drm-c⁄√˘‹.h
"

30 
	~"nvidü-drm-utûs.h
"

31 
	~"nvidü-drm-ícodî.h
"

33 
	~<drm/drm_¸tc_hñ≥r.h
>

35 
	~<drm/drm_©omic.h
>

36 
	~<drm/drm_©omic_hñ≥r.h
>

38 
	$nv_drm_c⁄√˘‹_de°roy
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

40 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
 = 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
);

42 
	`drm_c⁄√˘‹_uƒegi°î
(
c⁄√˘‹
);

44 
	`drm_c⁄√˘‹_˛ónup
(
c⁄√˘‹
);

46 i‡(
nv_c⁄√˘‹
->
edid
 !
NULL
) {

47 
	`nv_drm_‰ì
(
nv_c⁄√˘‹
->
edid
);

50 
	`nv_drm_‰ì
(
nv_c⁄√˘‹
);

51 
	}
}

53 
drm_c⁄√˘‹_°©us
 
	$__nv_drm_c⁄√˘‹_dëe˘_öã∫Æ
(

54 
drm_c⁄√˘‹
 *
c⁄√˘‹
)

56 
drm_devi˚
 *
dev
 = 
c⁄√˘‹
->dev;

57 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

58 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
 = 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
);

60 
drm_c⁄√˘‹_°©us
 
°©us
 = 
c⁄√˘‹_°©us_disc⁄√˘ed
;

62 
drm_ícodî
 *
dëe˘ed_ícodî
 = 
NULL
;

63 
nv_drm_ícodî
 *
nv_dëe˘ed_ícodî
 = 
NULL
;

65 
NvKmsK≠iDy«micDi•œyP¨ams
 *
pDëe˘P¨ams
 = 
NULL
;

66 
i
;

68 
	`BUG_ON
(!
	`muãx_is_locked
(&
dev
->
mode_c⁄fig
.
muãx
));

70 i‡(
nv_c⁄√˘‹
->
edid
 !
NULL
) {

71 
	`nv_drm_‰ì
(
nv_c⁄√˘‹
->
edid
);

72 
nv_c⁄√˘‹
->
edid
 = 
NULL
;

75 i‡((
pDëe˘P¨ams
 = 
	`nv_drm_ˇŒoc
(

77 (*
pDëe˘P¨ams
))Ë=
NULL
) {

78 
	`WARN_ON
(
pDëe˘P¨ams
 =
NULL
);

79 
d⁄e
;

82 
i
 = 0;

83 
i
 < 
DRM_CONNECTOR_MAX_ENCODER
 && 
dëe˘ed_ícodî
 =
NULL
; i++) {

84 
drm_ícodî
 *
ícodî
;

85 
nv_drm_ícodî
 *
nv_ícodî
;

87 i‡(
c⁄√˘‹
->
ícodî_ids
[
i
] == 0) {

91 
ícodî
 = 
	`nv_drm_ícodî_föd
(
dev
, 
c⁄√˘‹
->
ícodî_ids
[
i
]);

93 i‡(
ícodî
 =
NULL
) {

94 
	`BUG_ON
(
ícodî
 !
NULL
);

104 i‡(
c⁄√˘‹
->
c⁄√˘‹_ty≥
 =
DRM_MODE_CONNECTOR_DVII
 &&

105 
c⁄√˘‹
->
f‹˚
 =
DRM_FORCE_ON_DIGITAL
 &&

106 
ícodî
->
ícodî_ty≥
 =
DRM_MODE_ENCODER_DAC
) {

110 
nv_ícodî
 = 
	`to_nv_ícodî
(
ícodî
);

112 
	`mem£t
(
pDëe˘P¨ams
, 0, (*pDetectParams));

114 
pDëe˘P¨ams
->
h™dÀ
 = 
nv_ícodî
->
hDi•œy
;

116 
c⁄√˘‹
->
f‹˚
) {

117 
DRM_FORCE_ON
:

118 
DRM_FORCE_ON_DIGITAL
:

119 
pDëe˘P¨ams
->
f‹˚C⁄√˘ed
 = 
NV_TRUE
;

121 
DRM_FORCE_OFF
:

122 
pDëe˘P¨ams
->
f‹˚Disc⁄√˘ed
 = 
NV_TRUE
;

124 
DRM_FORCE_UNSPECIFIED
:

128 i‡(
c⁄√˘‹
->
ovîride_edid
) {

129 c⁄° 
drm_¥›îty_blob
 *
edid
 = 
c⁄√˘‹
->
edid_blob_±r
;

131 i‡(
edid
->
Àngth
 <(
pDëe˘P¨ams
->edid.
buf„r
)) {

132 
	`mem˝y
(
pDëe˘P¨ams
->
edid
.
buf„r
,Édid->
d©a
,Édid->
Àngth
);

133 
pDëe˘P¨ams
->
edid
.
buf„rSize
 =Édid->
Àngth
;

134 
pDëe˘P¨ams
->
ovîrideEdid
 = 
NV_TRUE
;

136 
	`WARN_ON
(
edid
->
Àngth
 >

137 (
pDëe˘P¨ams
->
edid
.
buf„r
));

141 i‡(!
nvKms
->
	`gëDy«micDi•œyInfo
(
nv_dev
->
pDevi˚
, 
pDëe˘P¨ams
)) {

142 
	`NV_DRM_DEV_LOG_ERR
(

143 
nv_dev
,

148 i‡(
pDëe˘P¨ams
->
c⁄√˘ed
) {

149 i‡(!
pDëe˘P¨ams
->
ovîrideEdid
 &&ÖDëe˘P¨ams->
edid
.
buf„rSize
) {

151 i‡((
nv_c⁄√˘‹
->
edid
 = 
	`nv_drm_ˇŒoc
(

153 
pDëe˘P¨ams
->
edid
.
buf„rSize
)Ë!
NULL
) {

155 
	`mem˝y
(
nv_c⁄√˘‹
->
edid
,

156 
pDëe˘P¨ams
->
edid
.
buf„r
,

157 
pDëe˘P¨ams
->
edid
.
buf„rSize
);

159 
	`NV_DRM_LOG_ERR
("Out of Memory");

163 
dëe˘ed_ícodî
 = 
ícodî
;

167 i‡(
dëe˘ed_ícodî
 =
NULL
) {

168 
d⁄e
;

171 
nv_dëe˘ed_ícodî
 = 
	`to_nv_ícodî
(
dëe˘ed_ícodî
);

173 
°©us
 = 
c⁄√˘‹_°©us_c⁄√˘ed
;

175 
nv_c⁄√˘‹
->
nv_dëe˘ed_ícodî
 =Çv_detected_encoder;

177 i‡(
nv_c⁄√˘‹
->
ty≥
 =
NVKMS_CONNECTOR_TYPE_DVI_I
) {

178 
	`drm_obje˘_¥›îty_£t_vÆue
(

179 &
c⁄√˘‹
->
ba£
,

180 
dev
->
mode_c⁄fig
.
dvi_i_subc⁄√˘‹_¥›îty
,

181 
dëe˘ed_ícodî
->
ícodî_ty≥
 =
DRM_MODE_ENCODER_DAC
 ?

182 
DRM_MODE_SUBCONNECTOR_DVIA
 :

183 
DRM_MODE_SUBCONNECTOR_DVID
);

186 
d⁄e
:

188 
	`nv_drm_‰ì
(
pDëe˘P¨ams
);

190  
°©us
;

191 
	}
}

193 
	$__nv_drm_c⁄√˘‹_f‹˚
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

195 
	`__nv_drm_c⁄√˘‹_dëe˘_öã∫Æ
(
c⁄√˘‹
);

196 
	}
}

198 
drm_c⁄√˘‹_°©us


199 
	$nv_drm_c⁄√˘‹_dëe˘
(
drm_c⁄√˘‹
 *
c⁄√˘‹
, 
boﬁ
 
f‹˚
)

201  
	`__nv_drm_c⁄√˘‹_dëe˘_öã∫Æ
(
c⁄√˘‹
);

202 
	}
}

204 
drm_c⁄√˘‹_funcs
 
	gnv_c⁄√˘‹_funcs
 = {

205 #i‡
deföed
 
NV_DRM_ATOMIC_HELPER_CONNECTOR_DPMS_PRESENT


206 .
dpms
 = 
drm_©omic_hñ≥r_c⁄√˘‹_dpms
,

208 .
	gde°roy
 = 
nv_drm_c⁄√˘‹_de°roy
,

209 .
	gª£t
 = 
drm_©omic_hñ≥r_c⁄√˘‹_ª£t
,

210 .
	gf‹˚
 = 
__nv_drm_c⁄√˘‹_f‹˚
,

211 .
	gdëe˘
 = 
nv_drm_c⁄√˘‹_dëe˘
,

212 .
	gfûl_modes
 = 
drm_hñ≥r_¥obe_sögÀ_c⁄√˘‹_modes
,

213 .
	g©omic_du∂iˇã_°©e
 = 
drm_©omic_hñ≥r_c⁄√˘‹_du∂iˇã_°©e
,

214 .
	g©omic_de°roy_°©e
 = 
drm_©omic_hñ≥r_c⁄√˘‹_de°roy_°©e
,

217 
	$nv_drm_c⁄√˘‹_gë_modes
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

219 
drm_devi˚
 *
dev
 = 
c⁄√˘‹
->dev;

220 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

221 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
 = 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
);

222 
nv_drm_ícodî
 *
nv_dëe˘ed_ícodî
 =

223 
nv_c⁄√˘‹
->
nv_dëe˘ed_ícodî
;

224 
NvU32
 
modeIndex
 = 0;

225 
cou¡
 = 0;

228 i‡(
nv_c⁄√˘‹
->
edid
 !
NULL
) {

229 
	`nv_drm_c⁄√˘‹_upd©e_edid_¥›îty
(
c⁄√˘‹
, 
nv_c⁄√˘‹
->
edid
);

233 
drm_di•œy_mode
 *
mode
;

234 
NvKmsK≠iDi•œyMode
 
di•œyMode
;

235 
NvBoﬁ
 
vÆid
 = 0;

236 
ªt
;

238 
ªt
 = 
nvKms
->
	`gëDi•œyMode
(
nv_dev
->
pDevi˚
,

239 
nv_dëe˘ed_ícodî
->
hDi•œy
,

240 
modeIndex
++, &
di•œyMode
, &
vÆid
);

242 i‡(
ªt
 < 0) {

243 
	`NV_DRM_DEV_LOG_ERR
(

244 
nv_dev
,

246 
modeIndex
, 
nv_dëe˘ed_ícodî
->
hDi•œy
);

252 i‡(
ªt
 == 0) {

258 i‡(!
vÆid
) {

262 
mode
 = 
	`drm_mode_¸óã
(
c⁄√˘‹
->
dev
);

264 i‡(
mode
 =
NULL
) {

265 
	`NV_DRM_DEV_LOG_ERR
(

266 
nv_dev
,

268 
nv_dëe˘ed_ícodî
->
hDi•œy
);

272 
	`nvkms_di•œy_mode_to_drm_mode
(&
di•œyMode
, 
mode
);

276 
	`drm_mode_¥obed_add
(
c⁄√˘‹
, 
mode
);

278 
cou¡
++;

281  
cou¡
;

282 
	}
}

284 
	$nv_drm_c⁄√˘‹_mode_vÆid
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

285 
drm_di•œy_mode
 *
mode
)

287 
drm_devi˚
 *
dev
 = 
c⁄√˘‹
->dev;

288 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

289 
nv_drm_ícodî
 *
nv_dëe˘ed_ícodî
 =

290 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
)->
nv_dëe˘ed_ícodî
;

291 
NvKmsK≠iDi•œyMode
 
di•œyMode
;

293 i‡(
nv_dëe˘ed_ícodî
 =
NULL
) {

294  
MODE_BAD
;

297 
	`drm_mode_to_nvkms_di•œy_mode
(
mode
, &
di•œyMode
);

299 i‡(!
nvKms
->
	`vÆid©eDi•œyMode
(
nv_dev
->
pDevi˚
,

300 
nv_dëe˘ed_ícodî
->
hDi•œy
,

301 &
di•œyMode
)) {

302  
MODE_BAD
;

305  
MODE_OK
;

306 
	}
}

308 
drm_ícodî
*

309 
	$nv_drm_c⁄√˘‹_be°_ícodî
(
drm_c⁄√˘‹
 *
c⁄√˘‹
)

311 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
 = 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
);

313 i‡(
nv_c⁄√˘‹
->
nv_dëe˘ed_ícodî
 !
NULL
) {

314  &
nv_c⁄√˘‹
->
nv_dëe˘ed_ícodî
->
ba£
;

317  
NULL
;

318 
	}
}

320 c⁄° 
drm_c⁄√˘‹_hñ≥r_funcs
 
	gnv_c⁄√˘‹_hñ≥r_funcs
 = {

321 .
gë_modes
 = 
nv_drm_c⁄√˘‹_gë_modes
,

322 .
	gmode_vÆid
 = 
nv_drm_c⁄√˘‹_mode_vÆid
,

323 .
	gbe°_ícodî
 = 
nv_drm_c⁄√˘‹_be°_ícodî
,

326 
drm_c⁄√˘‹
*

327 
	$nv_drm_c⁄√˘‹_√w
(
drm_devi˚
 *
dev
,

328 
NvU32
 
physiˇlIndex
, 
NvKmsC⁄√˘‹Ty≥
 
ty≥
,

329 
NvBoﬁ
 
öã∫Æ
,

330 
dpAddªss
[
NVKMS_DP_ADDRESS_STRING_LENGTH
])

332 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

333 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
 = 
NULL
;

334 
ªt
 = -
ENOMEM
;

336 i‡((
nv_c⁄√˘‹
 = 
	`nv_drm_ˇŒoc
(1, (*nv_c⁄√˘‹))Ë=
NULL
) {

337 
Áûed
;

340 i‡((
nv_c⁄√˘‹
->
ba£
.
°©e
 =

341 
	`nv_drm_ˇŒoc
(1, (*
nv_c⁄√˘‹
->
ba£
.
°©e
))Ë=
NULL
) {

342 
Áûed_°©e_Æloc
;

344 
nv_c⁄√˘‹
->
ba£
.
°©e
->
c⁄√˘‹
 = &nv_connector->base;

346 
nv_c⁄√˘‹
->
physiˇlIndex
 =ÖhysicalIndex;

347 
nv_c⁄√˘‹
->
ty≥
 =Åype;

348 
nv_c⁄√˘‹
->
öã∫Æ
 = internal;

350 
	`°r˝y
(
nv_c⁄√˘‹
->
dpAddªss
, dpAddress);

352 
ªt
 = 
	`drm_c⁄√˘‹_öô
(

353 
dev
,

354 &
nv_c⁄√˘‹
->
ba£
, &
nv_c⁄√˘‹_funcs
,

355 
	`nvkms_c⁄√˘‹_ty≥_to_drm_c⁄√˘‹_ty≥
(
ty≥
, 
öã∫Æ
));

357 i‡(
ªt
 != 0) {

358 
	`NV_DRM_DEV_LOG_ERR
(

359 
nv_dev
,

361 
nv_c⁄√˘‹
->
physiˇlIndex
);

362 
Áûed_c⁄√˘‹_öô
;

365 
	`drm_c⁄√˘‹_hñ≥r_add
(&
nv_c⁄√˘‹
->
ba£
, &
nv_c⁄√˘‹_hñ≥r_funcs
);

367 
nv_c⁄√˘‹
->
ba£
.
pﬁÀd
 = 
DRM_CONNECTOR_POLL_HPD
;

369 i‡(
nv_c⁄√˘‹
->
ty≥
 =
NVKMS_CONNECTOR_TYPE_VGA
) {

370 
nv_c⁄√˘‹
->
ba£
.
pﬁÀd
 =

371 
DRM_CONNECTOR_POLL_CONNECT
 | 
DRM_CONNECTOR_POLL_DISCONNECT
;

376 
ªt
 = 
	`drm_c⁄√˘‹_ªgi°î
(&
nv_c⁄√˘‹
->
ba£
);

378 i‡(
ªt
 != 0) {

379 
	`NV_DRM_DEV_LOG_ERR
(

380 
nv_dev
,

382 
nv_c⁄√˘‹
->
physiˇlIndex
);

383 
Áûed_c⁄√˘‹_ªgi°î
;

386  &
nv_c⁄√˘‹
->
ba£
;

388 
Áûed_c⁄√˘‹_ªgi°î
:

389 
	`drm_c⁄√˘‹_˛ónup
(&
nv_c⁄√˘‹
->
ba£
);

391 
Áûed_c⁄√˘‹_öô
:

392 
	`nv_drm_‰ì
(
nv_c⁄√˘‹
->
ba£
.
°©e
);

394 
Áûed_°©e_Æloc
:

395 
	`nv_drm_‰ì
(
nv_c⁄√˘‹
);

397 
Áûed
:

398  
	`ERR_PTR
(
ªt
);

399 
	}
}

405 
drm_c⁄√˘‹
*

406 
	$nv_drm_gë_c⁄√˘‹
(
drm_devi˚
 *
dev
,

407 
NvU32
 
physiˇlIndex
, 
NvKmsC⁄√˘‹Ty≥
 
ty≥
,

408 
NvBoﬁ
 
öã∫Æ
,

409 
dpAddªss
[
NVKMS_DP_ADDRESS_STRING_LENGTH
])

411 
drm_c⁄√˘‹
 *
c⁄√˘‹
 = 
NULL
;

415 
	`li°_f‹_óch_íåy
(
c⁄√˘‹
, &
dev
->
mode_c⁄fig
.
c⁄√˘‹_li°
, 
hód
) {

416 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
 = 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
);

418 i‡(
nv_c⁄√˘‹
->
physiˇlIndex
 ==ÖhysicalIndex) {

419 
	`BUG_ON
(
nv_c⁄√˘‹
->
ty≥
 !=Åype ||

420 
nv_c⁄√˘‹
->
öã∫Æ
 != internal);

422 i‡(
	`°rcmp
(
nv_c⁄√˘‹
->
dpAddªss
, dpAddress) == 0) {

423  
c⁄√˘‹
;

428  
	`nv_drm_c⁄√˘‹_√w
(
dev
, 
physiˇlIndex
, 
ty≥
, 
öã∫Æ
, 
dpAddªss
);

429 
	}
}

	@src/nvidia-drm/nvidia-drm-connector.h

23 #i‚de‡
__NVIDIA_DRM_CONNECTOR_H__


24 
	#__NVIDIA_DRM_CONNECTOR_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

30 
	~<drm/drmP.h
>

32 
	~"nvty≥s.h
"

33 
	~"nvkms-≠i-ty≥s.h
"

35 
	snv_drm_c⁄√˘‹
 {

36 
NvU32
 
	mphysiˇlIndex
;

38 
NvBoﬁ
 
	möã∫Æ
;

39 
NvKmsC⁄√˘‹Ty≥
 
	mty≥
;

41 
	mdpAddªss
[
NVKMS_DP_ADDRESS_STRING_LENGTH
];

43 
nv_drm_ícodî
 *
	mnv_dëe˘ed_ícodî
;

44 
edid
 *
	medid
;

46 
©omic_t
 
	mc⁄√˘i⁄_°©us_dúty
;

48 
drm_c⁄√˘‹
 
	mba£
;

51 
ölöe
 
nv_drm_c⁄√˘‹
 *
	$to_nv_c⁄√˘‹
(

52 
drm_c⁄√˘‹
 *
c⁄√˘‹
)

54 i‡(
c⁄√˘‹
 =
NULL
) {

55  
NULL
;

57  
	`c⁄èöî_of
(
c⁄√˘‹
, 
nv_drm_c⁄√˘‹
, 
ba£
);

58 
	}
}

60 
ölöe
 
	$nv_drm_c⁄√˘‹_m¨k_c⁄√˘i⁄_°©us_dúty
(

61 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
)

63 
	`©omic_cmpxchg
(&
nv_c⁄√˘‹
->
c⁄√˘i⁄_°©us_dúty
, 
Ál£
, 
åue
);

64 
	}
}

66 
ölöe
 
boﬁ
 
	$nv_drm_c⁄√˘‹_check_c⁄√˘i⁄_°©us_dúty_™d_˛ór
(

67 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
)

69  
	`©omic_cmpxchg
(

70 &
nv_c⁄√˘‹
->
c⁄√˘i⁄_°©us_dúty
,

71 
åue
,

72 
Ál£
Ë=
åue
;

73 
	}
}

75 
drm_c⁄√˘‹
*

76 
nv_drm_gë_c⁄√˘‹
(
drm_devi˚
 *
dev
,

77 
NvU32
 
physiˇlIndex
, 
NvKmsC⁄√˘‹Ty≥
 
ty≥
,

78 
NvBoﬁ
 
öã∫Æ
,

79 
dpAddªss
[
NVKMS_DP_ADDRESS_STRING_LENGTH
]);

	@src/nvidia-drm/nvidia-drm-crtc.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

27 
	~"nvidü-drm-hñ≥r.h
"

28 
	~"nvidü-drm-¥iv.h
"

29 
	~"nvidü-drm-¸tc.h
"

30 
	~"nvidü-drm-c⁄√˘‹.h
"

31 
	~"nvidü-drm-ícodî.h
"

32 
	~"nvidü-drm-utûs.h
"

33 
	~"nvidü-drm-fb.h
"

34 
	~"nvidü-drm-io˘l.h
"

36 
	~<drm/drm_¸tc_hñ≥r.h
>

37 
	~<drm/drm_∂™e_hñ≥r.h
>

39 
	~<drm/drm_©omic.h
>

40 
	~<drm/drm_©omic_hñ≥r.h
>

42 c⁄° 
u32
 
	gnv_deÁu…_suµ‹ãd_∂™e_drm_f‹m©s
[] = {

43 
DRM_FORMAT_ARGB1555
,

44 
DRM_FORMAT_XRGB1555
,

45 
DRM_FORMAT_RGB565
,

46 
DRM_FORMAT_ARGB8888
,

47 
DRM_FORMAT_XRGB8888
,

48 
DRM_FORMAT_ABGR2101010
,

49 
DRM_FORMAT_XBGR2101010
,

52 c⁄° 
u32
 
	gnv_suµ‹ãd_curs‹_∂™e_drm_f‹m©s
[] = {

53 
DRM_FORMAT_ARGB1555
,

54 
DRM_FORMAT_ARGB8888
,

57 
	$nv_drm_∂™e_de°roy
(
drm_∂™e
 *
∂™e
)

60 
	`drm_∂™e_˛ónup
(
∂™e
);

62 
	`nv_drm_‰ì
(
∂™e
);

63 
	}
}

65 
ölöe
 

66 
	$∂™e_ªq_c⁄fig_dißbÀ
(
NvKmsK≠iPœ√Reque°edC⁄fig
 *
ªq_c⁄fig
)

68 
ªq_c⁄fig
->
c⁄fig
.
surÁ˚
 = 
NULL
;

69 
ªq_c⁄fig
->
Êags
.
surÁ˚Ch™ged
 = 
NV_TRUE
;

70 
	}
}

73 
	$∂™e_ªq_c⁄fig_upd©e
(
drm_∂™e_°©e
 *
∂™e_°©e
,

74 
NvKmsK≠iPœ√Reque°edC⁄fig
 *
ªq_c⁄fig
)

76 
NvKmsK≠iPœ√C⁄fig
 
ﬁd_c⁄fig
 = 
ªq_c⁄fig
->
c⁄fig
;

78 i‡(
∂™e_°©e
->
fb
 =
NULL
) {

79 
	`∂™e_ªq_c⁄fig_dißbÀ
(
ªq_c⁄fig
);

83 *
ªq_c⁄fig
 = (
NvKmsK≠iPœ√Reque°edC⁄fig
) {

84 .
c⁄fig
 = {

85 .
surÁ˚
 = 
	`to_nv_‰amebuf„r
(
∂™e_°©e
->
fb
)->
pSurÁ˚
,

88 .
§cX
 = 
∂™e_°©e
->
§c_x
 >> 16,

89 .
§cY
 = 
∂™e_°©e
->
§c_y
 >> 16,

90 .
§cWidth
 = 
∂™e_°©e
->
§c_w
 >> 16,

91 .
§cHeight
 = 
∂™e_°©e
->
§c_h
 >> 16,

93 .
d°X
 = 
∂™e_°©e
->
¸tc_x
,

94 .
d°Y
 = 
∂™e_°©e
->
¸tc_y
,

95 .
d°Width
 = 
∂™e_°©e
->
¸tc_w
,

96 .
d°Height
 = 
∂™e_°©e
->
¸tc_h
,

105 
ªq_c⁄fig
->
Êags
.
surÁ˚Ch™ged
 = 
NV_TRUE
;

107 i‡(
ﬁd_c⁄fig
.
surÁ˚
 =
NULL
 &&

108 
ﬁd_c⁄fig
.
surÁ˚
 !
ªq_c⁄fig
->
c⁄fig
.surface) {

109 
ªq_c⁄fig
->
Êags
.
§cXYCh™ged
 = 
NV_TRUE
;

110 
ªq_c⁄fig
->
Êags
.
§cWHCh™ged
 = 
NV_TRUE
;

111 
ªq_c⁄fig
->
Êags
.
d°XYCh™ged
 = 
NV_TRUE
;

112 
ªq_c⁄fig
->
Êags
.
d°WHCh™ged
 = 
NV_TRUE
;

116 
ªq_c⁄fig
->
Êags
.
§cXYCh™ged
 =

117 
ﬁd_c⁄fig
.
§cX
 !
ªq_c⁄fig
->
c⁄fig
.srcX ||

118 
ﬁd_c⁄fig
.
§cY
 !
ªq_c⁄fig
->
c⁄fig
.srcY;

120 
ªq_c⁄fig
->
Êags
.
§cWHCh™ged
 =

121 
ﬁd_c⁄fig
.
§cWidth
 !
ªq_c⁄fig
->
c⁄fig
.srcWidth ||

122 
ﬁd_c⁄fig
.
§cHeight
 !
ªq_c⁄fig
->
c⁄fig
.srcHeight;

124 
ªq_c⁄fig
->
Êags
.
d°XYCh™ged
 =

125 
ﬁd_c⁄fig
.
d°X
 !
ªq_c⁄fig
->
c⁄fig
.dstX ||

126 
ﬁd_c⁄fig
.
d°Y
 !
ªq_c⁄fig
->
c⁄fig
.dstY;

128 
ªq_c⁄fig
->
Êags
.
d°WHCh™ged
 =

129 
ﬁd_c⁄fig
.
d°Width
 !
ªq_c⁄fig
->
c⁄fig
.dstWidth ||

130 
ﬁd_c⁄fig
.
d°Height
 !
ªq_c⁄fig
->
c⁄fig
.dstHeight;

131 
	}
}

133 
	$nv_drm_∂™e_©omic_check
(
drm_∂™e
 *
∂™e
,

134 
drm_∂™e_°©e
 *
∂™e_°©e
)

136 
i
;

137 
drm_¸tc
 *
¸tc
;

138 
drm_¸tc_°©e
 *
¸tc_°©e
;

139 
NvKmsK≠iPœ√Ty≥
 
ty≥
;

141 i‡(
	`NV_DRM_WARN
(!
	`drm_∂™e_ty≥_to_nvkms_∂™e_ty≥
(
∂™e
->
ty≥
, &type))) {

142 
d⁄e
;

145 
	`nv_drm_f‹_óch_¸tc_ö_°©e
(
∂™e_°©e
->
°©e
, 
¸tc
, 
¸tc_°©e
, 
i
) {

146 
nv_drm_¸tc_°©e
 *
nv_¸tc_°©e
 = 
	`to_nv_¸tc_°©e
(
¸tc_°©e
);

147 
NvKmsK≠iHódReque°edC⁄fig
 *
hód_ªq_c⁄fig
 =

148 &
nv_¸tc_°©e
->
ªq_c⁄fig
;

149 
NvKmsK≠iPœ√Reque°edC⁄fig
 *
∂™e_ªque°ed_c⁄fig
 =

150 &
hód_ªq_c⁄fig
->
∂™eReque°edC⁄fig
[
ty≥
];

152 i‡(
∂™e
->
°©e
->
¸tc
 == crtc &&

153 
∂™e
->
°©e
->
¸tc
 !
∂™e_°©e
->crtc) {

154 
	`∂™e_ªq_c⁄fig_dißbÀ
(
∂™e_ªque°ed_c⁄fig
);

158 i‡(
∂™e_°©e
->
¸tc
 == crtc) {

159 
	`∂™e_ªq_c⁄fig_upd©e
(
∂™e_°©e
,

160 
∂™e_ªque°ed_c⁄fig
);

164 
d⁄e
:

166 
	}
}

168 
	$nv_drm_∂™e_©omic_upd©e
(
drm_∂™e
 *
∂™e
,

169 
drm_∂™e_°©e
 *
ﬁd_°©e
)

171 
	}
}

173 
	$nv_drm_∂™e_©omic_dißbÀ
(
drm_∂™e
 *
∂™e
,

174 
drm_∂™e_°©e
 *
ﬁd_°©e
)

176 
	}
}

178 c⁄° 
drm_∂™e_funcs
 
	gnv_∂™e_funcs
 = {

179 .
upd©e_∂™e
 = 
drm_©omic_hñ≥r_upd©e_∂™e
,

180 .
	gdißbÀ_∂™e
 = 
drm_©omic_hñ≥r_dißbÀ_∂™e
,

181 .
	gde°roy
 = 
nv_drm_∂™e_de°roy
,

182 .
	gª£t
 = 
drm_©omic_hñ≥r_∂™e_ª£t
,

183 .
	g©omic_du∂iˇã_°©e
 = 
drm_©omic_hñ≥r_∂™e_du∂iˇã_°©e
,

184 .
	g©omic_de°roy_°©e
 = 
drm_©omic_hñ≥r_∂™e_de°roy_°©e
,

187 c⁄° 
drm_∂™e_hñ≥r_funcs
 
	gnv_∂™e_hñ≥r_funcs
 = {

188 .
©omic_check
 = 
nv_drm_∂™e_©omic_check
,

189 .
	g©omic_upd©e
 = 
nv_drm_∂™e_©omic_upd©e
,

190 .
	g©omic_dißbÀ
 = 
nv_drm_∂™e_©omic_dißbÀ
,

193 
	$nv_drm_¸tc_de°roy
(
drm_¸tc
 *
¸tc
)

195 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

197 
	`drm_¸tc_˛ónup
(
¸tc
);

199 
	`nv_drm_‰ì
(
nv_¸tc
);

200 
	}
}

202 
ölöe
 

203 
	$__nv_drm_©omic_hñ≥r_¸tc_de°roy_°©e
(
drm_¸tc
 *
¸tc
,

204 
drm_¸tc_°©e
 *
¸tc_°©e
)

206 #i‡
	`deföed
(
NV_DRM_ATOMIC_HELPER_CRTC_DESTROY_STATE_HAS_CRTC_ARG
)

207 
	`__drm_©omic_hñ≥r_¸tc_de°roy_°©e
(
¸tc
, 
¸tc_°©e
);

209 
	`__drm_©omic_hñ≥r_¸tc_de°roy_°©e
(
¸tc_°©e
);

211 
	}
}

213 
ölöe
 
	$nv_drm_¸tc_du∂iˇã_ªq_hód_mode£t_c⁄fig
(

214 c⁄° 
NvKmsK≠iHódReque°edC⁄fig
 *
ﬁd
,

215 
NvKmsK≠iHódReque°edC⁄fig
 *
√w
)

217 
uöt32_t
 
i
;

225 *
√w
 = (
NvKmsK≠iHódReque°edC⁄fig
) {

226 .
modeSëC⁄fig
 = 
ﬁd
->modeSetConfig,

229 
i
 = 0; i < 
	`ARRAY_SIZE
(
ﬁd
->
∂™eReque°edC⁄fig
); i++) {

230 
√w
->
∂™eReque°edC⁄fig
[
i
] = (
NvKmsK≠iPœ√Reque°edC⁄fig
) {

231 .
c⁄fig
 = 
ﬁd
->
∂™eReque°edC⁄fig
[
i
].config,

234 
	}
}

244 
drm_¸tc_°©e
*

245 
	$nv_drm_©omic_¸tc_du∂iˇã_°©e
(
drm_¸tc
 *
¸tc
)

247 
nv_drm_¸tc_°©e
 *
nv_°©e
 = 
	`nv_drm_ˇŒoc
(1, (*nv_state));

249 i‡(
nv_°©e
 =
NULL
) {

250  
NULL
;

253 
	`__drm_©omic_hñ≥r_¸tc_du∂iˇã_°©e
(
¸tc
, &
nv_°©e
->
ba£
);

255 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

256 i‡((
nv_°©e
->
nv_Êù
 =

257 
	`nv_drm_ˇŒoc
(1, (*(
nv_°©e
->
nv_Êù
)))Ë=
NULL
) {

258 
	`__nv_drm_©omic_hñ≥r_¸tc_de°roy_°©e
(
¸tc
, &
nv_°©e
->
ba£
);

259 
	`nv_drm_‰ì
(
nv_°©e
);

260  
NULL
;

263 
	`INIT_LIST_HEAD
(&
nv_°©e
->
nv_Êù
->
li°_íåy
);

266 
	`nv_drm_¸tc_du∂iˇã_ªq_hód_mode£t_c⁄fig
(

267 &(
	`to_nv_¸tc_°©e
(
¸tc
->
°©e
)->
ªq_c⁄fig
),

268 &
nv_°©e
->
ªq_c⁄fig
);

270  &
nv_°©e
->
ba£
;

271 
	}
}

281 
	$nv_drm_©omic_¸tc_de°roy_°©e
(
drm_¸tc
 *
¸tc
,

282 
drm_¸tc_°©e
 *
°©e
)

284 
nv_drm_¸tc_°©e
 *
nv_°©e
 = 
	`to_nv_¸tc_°©e
(
°©e
);

286 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

287 i‡(
nv_°©e
->
nv_Êù
 !
NULL
) {

288 
	`nv_drm_‰ì
(
nv_°©e
->
nv_Êù
);

289 
nv_°©e
->
nv_Êù
 = 
NULL
;

293 
	`__nv_drm_©omic_hñ≥r_¸tc_de°roy_°©e
(
¸tc
, &
nv_°©e
->
ba£
);

295 
	`nv_drm_‰ì
(
nv_°©e
);

296 
	}
}

298 
drm_¸tc_funcs
 
	gnv_¸tc_funcs
 = {

299 .
£t_c⁄fig
 = 
drm_©omic_hñ≥r_£t_c⁄fig
,

300 .
	g∑ge_Êù
 = 
drm_©omic_hñ≥r_∑ge_Êù
,

301 .
	gª£t
 = 
drm_©omic_hñ≥r_¸tc_ª£t
,

302 .
	gde°roy
 = 
nv_drm_¸tc_de°roy
,

303 .
	g©omic_du∂iˇã_°©e
 = 
nv_drm_©omic_¸tc_du∂iˇã_°©e
,

304 .
	g©omic_de°roy_°©e
 = 
nv_drm_©omic_¸tc_de°roy_°©e
,

312 
ölöe
 
boﬁ


313 
	$nv_drm_¸tc_°©e_c⁄√˘‹s_ch™ged
(
drm_¸tc_°©e
 *
¸tc_°©e
)

315 #i‡
	`deföed
(
NV_DRM_CRTC_STATE_HAS_CONNECTORS_CHANGED
)

316  
¸tc_°©e
->
c⁄√˘‹s_ch™ged
;

318  
¸tc_°©e
->
mode_ch™ged
;

320 
	}
}

322 
	$hód_mode£t_c⁄fig_©èch_c⁄√˘‹
(

323 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
,

324 
NvKmsK≠iHódModeSëC⁄fig
 *
hód_mode£t_c⁄fig
)

326 
nv_drm_ícodî
 *
nv_ícodî
 = 
nv_c⁄√˘‹
->
nv_dëe˘ed_ícodî
;

328 i‡(
	`NV_DRM_WARN
(
nv_ícodî
 =
NULL
 ||

329 
hód_mode£t_c⁄fig
->
numDi•œys
 >=

330 
	`ARRAY_SIZE
(
hód_mode£t_c⁄fig
->
di•œys
))) {

331  -
EINVAL
;

333 
hód_mode£t_c⁄fig
->
di•œys
[hód_mode£t_c⁄fig->
numDi•œys
++] =

334 
nv_ícodî
->
hDi•œy
;

336 
	}
}

343 
	$nv_drm_¸tc_©omic_check
(
drm_¸tc
 *
¸tc
,

344 
drm_¸tc_°©e
 *
¸tc_°©e
)

346 
nv_drm_¸tc_°©e
 *
nv_¸tc_°©e
 = 
	`to_nv_¸tc_°©e
(
¸tc_°©e
);

347 
NvKmsK≠iHódReque°edC⁄fig
 *
ªq_c⁄fig
 =

348 &
nv_¸tc_°©e
->
ªq_c⁄fig
;

349 
ªt
 = 0;

351 i‡(
¸tc_°©e
->
mode_ch™ged
) {

352 
	`drm_mode_to_nvkms_di•œy_mode
(&
¸tc_°©e
->
mode
,

353 &
ªq_c⁄fig
->
modeSëC⁄fig
.
mode
);

354 
ªq_c⁄fig
->
Êags
.
modeCh™ged
 = 
NV_TRUE
;

357 i‡(
	`nv_drm_¸tc_°©e_c⁄√˘‹s_ch™ged
(
¸tc_°©e
)) {

358 
NvKmsK≠iHódModeSëC⁄fig
 *
c⁄fig
 = &
ªq_c⁄fig
->
modeSëC⁄fig
;

359 
drm_c⁄√˘‹
 *
c⁄√˘‹
;

360 
drm_c⁄√˘‹_°©e
 *
c⁄√˘‹_°©e
;

361 
j
;

363 
c⁄fig
->
numDi•œys
 = 0;

365 
	`mem£t
(
c⁄fig
->
di•œys
, 0, (config->displays));

367 
ªq_c⁄fig
->
Êags
.
di•œysCh™ged
 = 
NV_TRUE
;

369 
	`nv_drm_f‹_óch_c⁄√˘‹_ö_°©e
(
¸tc_°©e
->
°©e
,

370 
c⁄√˘‹
, 
c⁄√˘‹_°©e
, 
j
) {

371 i‡(
c⁄√˘‹_°©e
->
¸tc
 != crtc) {

375 i‡((
ªt
 = 
	`hód_mode£t_c⁄fig_©èch_c⁄√˘‹
(

376 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
),

377 
c⁄fig
)) != 0) {

378  
ªt
;

383 i‡(
¸tc_°©e
->
a˘ive_ch™ged
) {

384 
ªq_c⁄fig
->
modeSëC⁄fig
.
bA˘ive
 = 
¸tc_°©e
->
a˘ive
;

385 
ªq_c⁄fig
->
Êags
.
a˘iveCh™ged
 = 
NV_TRUE
;

388  
ªt
;

389 
	}
}

391 
boﬁ


392 
	$nv_drm_¸tc_mode_fixup
(
drm_¸tc
 *
¸tc
,

393 c⁄° 
drm_di•œy_mode
 *
mode
,

394 
drm_di•œy_mode
 *
adju°ed_mode
)

396  
åue
;

397 
	}
}

399 
	$nv_drm_¸tc_¥ï¨e
(
drm_¸tc
 *
¸tc
)

402 
	}
}

404 
	$nv_drm_¸tc_commô
(
drm_¸tc
 *
¸tc
)

407 
	}
}

409 
	$nv_drm_¸tc_dißbÀ
(
drm_¸tc
 *
¸tc
)

412 
	}
}

414 #ifde‡
NV_DRM_CRTC_HELPER_FUNCS_HAS_ATOMIC_ENABLE


415 
	$nv_drm_¸tc_©omic_íabÀ
(
drm_¸tc
 *
¸tc
,

416 
drm_¸tc_°©e
 *
ﬁd_¸tc_°©e
)

419 
	}
}

421 
	$nv_drm_¸tc_íabÀ
(
drm_¸tc
 *
¸tc
)

424 
	}
}

427 c⁄° 
drm_¸tc_hñ≥r_funcs
 
	gnv_¸tc_hñ≥r_funcs
 = {

428 .
©omic_check
 = 
nv_drm_¸tc_©omic_check
,

429 .
	g¥ï¨e
 = 
nv_drm_¸tc_¥ï¨e
,

430 .
	gcommô
 = 
nv_drm_¸tc_commô
,

431 #ifde‡
NV_DRM_CRTC_HELPER_FUNCS_HAS_ATOMIC_ENABLE


432 .
	g©omic_íabÀ
 = 
nv_drm_¸tc_©omic_íabÀ
,

434 .
	gíabÀ
 = 
nv_drm_¸tc_íabÀ
,

436 .
	gdißbÀ
 = 
nv_drm_¸tc_dißbÀ
,

437 .
	gmode_fixup
 = 
nv_drm_¸tc_mode_fixup
,

440 
drm_∂™e
*

441 
	$nv_drm_∂™e_¸óã
(
drm_devi˚
 *
dev
,

442 
drm_∂™e_ty≥
 
∂™e_ty≥
,

443 c⁄° 
u32
 
f‹m©s
[], 
f‹m©s_cou¡
)

445 
drm_∂™e
 *
∂™e
 = 
NULL
;

446 
ªt
 = -
ENOMEM
;

448 i‡((
∂™e
 = 
	`nv_drm_ˇŒoc
(1, (*∂™e))Ë=
NULL
) {

449 
Áûed
;

452 
∂™e
->
°©e
 = 
	`nv_drm_ˇŒoc
(1, (*plane->state));

453 i‡(
∂™e
->
°©e
 =
NULL
) {

454 
Áûed_°©e_Æloc
;

457 
∂™e
->
°©e
->plane =Ölane;

464 
ªt
 = 
	`drm_univîßl_∂™e_öô
(

465 
dev
,

466 
∂™e
, 0 , &
nv_∂™e_funcs
,

467 
f‹m©s
, 
f‹m©s_cou¡
,

468 #i‡
	`deföed
(
NV_DRM_UNIVERSAL_PLANE_INIT_HAS_FORMAT_MODIFIERS_ARG
)

469 
NULL
,

471 
∂™e_ty≥


472 #i‡
	`deföed
(
NV_DRM_UNIVERSAL_PLANE_INIT_HAS_NAME_ARG
)

473 , 
NULL


477 i‡(
ªt
 != 0) {

478 
Áûed_∂™e_öô
;

481 
	`drm_∂™e_hñ≥r_add
(
∂™e
, &
nv_∂™e_hñ≥r_funcs
);

483  
∂™e
;

485 
Áûed_∂™e_öô
:

486 
	`nv_drm_‰ì
(
∂™e
->
°©e
);

488 
Áûed_°©e_Æloc
:

489 
	`nv_drm_‰ì
(
∂™e
);

491 
Áûed
:

492  
	`ERR_PTR
(
ªt
);

493 
	}
}

498 
drm_¸tc
 *
	$__nv_drm_¸tc_¸óã
(
nv_drm_devi˚
 *
nv_dev
,

499 
drm_∂™e
 *
¥im¨y_∂™e
,

500 
drm_∂™e
 *
curs‹_∂™e
,

501 
hód
)

503 
nv_drm_¸tc
 *
nv_¸tc
 = 
NULL
;

504 
ªt
 = -
ENOMEM
;

506 i‡((
nv_¸tc
 = 
	`nv_drm_ˇŒoc
(1, (*nv_¸tc))Ë=
NULL
) {

507 
Áûed
;

510 
nv_¸tc
->
ba£
.
°©e
 = 
	`nv_drm_ˇŒoc
(1, (*nv_crtc->base.state));

511 i‡(
nv_¸tc
->
ba£
.
°©e
 =
NULL
) {

512 
Áûed_°©e_Æloc
;

514 
nv_¸tc
->
ba£
.
°©e
->
¸tc
 = &nv_crtc->base;

516 
nv_¸tc
->
hód
 = head;

517 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

518 
	`INIT_LIST_HEAD
(&
nv_¸tc
->
Êù_li°
);

519 
	`•ö_lock_öô
(&
nv_¸tc
->
Êù_lock
);

522 
ªt
 = 
	`drm_¸tc_öô_wôh_∂™es
(
nv_dev
->
dev
,

523 &
nv_¸tc
->
ba£
,

524 
¥im¨y_∂™e
, 
curs‹_∂™e
,

525 &
nv_¸tc_funcs


526 #i‡
	`deföed
(
NV_DRM_CRTC_INIT_WITH_PLANES_HAS_NAME_ARG
)

527 , 
NULL


531 i‡(
ªt
 != 0) {

532 
	`NV_DRM_DEV_LOG_ERR
(

533 
nv_dev
,

534 "FaûedÅÿöô cπ¯f‹ hód %u wôhÖœ√s", 
hód
);

535 
Áûed_öô_¸tc
;

540 
	`drm_¸tc_hñ≥r_add
(&
nv_¸tc
->
ba£
, &
nv_¸tc_hñ≥r_funcs
);

542  &
nv_¸tc
->
ba£
;

544 
Áûed_öô_¸tc
:

545 
	`nv_drm_‰ì
(
nv_¸tc
->
ba£
.
°©e
);

547 
Áûed_°©e_Æloc
:

548 
	`nv_drm_‰ì
(
nv_¸tc
);

550 
Áûed
:

551  
	`ERR_PTR
(
ªt
);

552 
	}
}

554 
	$nv_drm_íumî©e_¸tcs_™d_∂™es
(
nv_drm_devi˚
 *
nv_dev
,

555 
num_hóds
)

557 
i
;

559 
i
 = 0; i < 
num_hóds
; i++) {

560 
drm_∂™e
 *
¥im¨y_∂™e
 = 
NULL
, *
curs‹_∂™e
 = NULL;

562 
¥im¨y_∂™e
 = 
	`nv_drm_∂™e_¸óã
(

563 
nv_dev
->
dev
,

564 
DRM_PLANE_TYPE_PRIMARY
,

565 
nv_deÁu…_suµ‹ãd_∂™e_drm_f‹m©s
,

566 
	`ARRAY_SIZE
(
nv_deÁu…_suµ‹ãd_∂™e_drm_f‹m©s
));

568 i‡(
	`IS_ERR
(
¥im¨y_∂™e
)) {

569 
	`NV_DRM_DEV_LOG_ERR
(

570 
nv_dev
,

572 
i
, 
	`PTR_ERR
(
¥im¨y_∂™e
));

575 
curs‹_∂™e
 = 
	`nv_drm_∂™e_¸óã
(

576 
nv_dev
->
dev
,

577 
DRM_PLANE_TYPE_CURSOR
,

578 
nv_suµ‹ãd_curs‹_∂™e_drm_f‹m©s
,

579 
	`ARRAY_SIZE
(
nv_suµ‹ãd_curs‹_∂™e_drm_f‹m©s
));

581 i‡(
	`IS_ERR
(
curs‹_∂™e
)) {

582 
	`NV_DRM_DEV_LOG_ERR
(

583 
nv_dev
,

585 
i
, 
	`PTR_ERR
(
curs‹_∂™e
));

588 i‡(
¥im¨y_∂™e
 !
NULL
) {

589 
drm_¸tc
 *
¸tc
 =

590 
	`__nv_drm_¸tc_¸óã
(
nv_dev
,

591 
¥im¨y_∂™e
, 
curs‹_∂™e
,

592 
i
);

594 i‡(
	`IS_ERR
(
¸tc
)) {

595 
	`NV_DRM_DEV_LOG_ERR
(

596 
nv_dev
,

598 
i
, 
	`PTR_ERR
(
¸tc
));

602 
	}
}

604 
	$nv_drm_gë_¸tc_¸c32_io˘l
(
drm_devi˚
 *
dev
,

605 *
d©a
, 
drm_fûe
 *
fûï
)

607 
drm_nvidü_gë_¸tc_¸c32_∑øms
 *
∑øms
 = 
d©a
;

608 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

609 
drm_¸tc
 *
¸tc
 = 
NULL
;

610 
nv_drm_¸tc
 *
nv_¸tc
 = 
NULL
;

611 
NvU32
 
¸c32
 = 0;

612 
ªt
 = 0;

614 i‡(!
	`drm_c‹e_check_„©uª
(
dev
, 
DRIVER_MODESET
)) {

615 
ªt
 = -
ENOENT
;

616 
d⁄e
;

619 
¸tc
 = 
	`nv_drm_¸tc_föd
(
dev
, 
∑øms
->
¸tc_id
);

620 i‡(!
¸tc
) {

621 
ªt
 = -
ENOENT
;

622 
d⁄e
;

625 
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

627 i‡(!
nvKms
->
	`gëCRC32
(
nv_dev
->
pDevi˚
, 
nv_¸tc
->
hód
, &
¸c32
)) {

628 
ªt
 = -
ENODEV
;

631 
∑øms
->
¸c32
 = crc32;

633 
d⁄e
:

634  
ªt
;

635 
	}
}

	@src/nvidia-drm/nvidia-drm-crtc.h

23 #i‚de‡
__NVIDIA_DRM_CRTC_H__


24 
	#__NVIDIA_DRM_CRTC_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

30 
	~<drm/drmP.h
>

31 
	~"nvty≥s.h
"

32 
	~"nvkms-k≠i.h
"

34 
	snv_drm_¸tc
 {

35 
NvU32
 
	mhód
;

37 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

44 
li°_hód
 
	mÊù_li°
;

51 
•ölock_t
 
	mÊù_lock
;

53 
©omic_t
 
	mhas_≥ndög_commô
;

54 
©omic_t
 
	mhas_≥ndög_Êù_evít
;

57 
drm_¸tc
 
	mba£
;

60 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

71 
	snv_drm_Êù
 {

78 
drm_≥ndög_vbœnk_evít
 *
	mevít
;

86 
li°_hód
 
	mli°_íåy
;

90 
	snv_drm_¸tc_°©e
 {

96 
drm_¸tc_°©e
 
	mba£
;

103 
NvKmsK≠iHódReque°edC⁄fig
 
	mªq_c⁄fig
;

105 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

118 
nv_drm_Êù
 *
	mnv_Êù
;

122 
ölöe
 
nv_drm_¸tc_°©e
 *
	$to_nv_¸tc_°©e
(
drm_¸tc_°©e
 *
°©e
)

124  
	`c⁄èöî_of
(
°©e
, 
nv_drm_¸tc_°©e
, 
ba£
);

125 
	}
}

127 
ölöe
 
nv_drm_¸tc
 *
	$to_nv_¸tc
(
drm_¸tc
 *
¸tc
)

129 i‡(
¸tc
 =
NULL
) {

130  
NULL
;

132  
	`c⁄èöî_of
(
¸tc
, 
nv_drm_¸tc
, 
ba£
);

133 
	}
}

140 
ölöe


141 
nv_drm_¸tc
 *
	$nv_drm_¸tc_lookup
(
nv_drm_devi˚
 *
nv_dev
, 
NvU32
 
hód
)

143 
drm_¸tc
 *
¸tc
;

144 
	`li°_f‹_óch_íåy
(
¸tc
, &
nv_dev
->
dev
->
mode_c⁄fig
.
¸tc_li°
, 
hód
) {

145 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

147 i‡(
nv_¸tc
->
hód
 == head) {

148  
nv_¸tc
;

151  
NULL
;

152 
	}
}

154 
nv_drm_íumî©e_¸tcs_™d_∂™es
(
nv_drm_devi˚
 *
nv_dev
,

155 
num_hóds
);

157 
nv_drm_gë_¸tc_¸c32_io˘l
(
drm_devi˚
 *
dev
,

158 *
d©a
, 
drm_fûe
 *
fûï
);

	@src/nvidia-drm/nvidia-drm-drv.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‚de‡
__löux__


26 
	~"nvidü-drm.h
"

27 
	~<drm/drm.h
>

30 
	~"nvidü-drm-¥iv.h
"

31 
	~"nvidü-drm-drv.h
"

32 
	~"nvidü-drm-fb.h
"

33 
	~"nvidü-drm-mode£t.h
"

34 
	~"nvidü-drm-ícodî.h
"

35 
	~"nvidü-drm-c⁄√˘‹.h
"

36 
	~"nvidü-drm-gem.h
"

37 
	~"nvidü-drm-¸tc.h
"

38 
	~"nvidü-drm-¥ime-„n˚.h
"

39 
	~"nvidü-drm-hñ≥r.h
"

40 
	~"nvidü-drm-gem-nvkms-mem‹y.h
"

41 
	~"nvidü-drm-gem-u£r-mem‹y.h
"

43 #i‡
deföed
(
NV_DRM_AVAILABLE
)

45 
	~"nvidü-drm-io˘l.h
"

47 
	~<drm/drmP.h
>

49 
	~<drm/drm_¸tc_hñ≥r.h
>

51 #i‡
deföed
(
NV_DRM_DRM_GEM_H_PRESENT
)

52 
	~<drm/drm_gem.h
>

55 #i‡
deföed
(
NV_DRM_DRM_AUTH_H_PRESENT
)

56 
	~<drm/drm_auth.h
>

59 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

60 
	~<drm/drm_©omic_hñ≥r.h
>

63 
nv_drm_devi˚
 *
	gdev_li°
 = 
NULL
;

65 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

67 
	$nv_drm_ouçut_pﬁl_ch™ged
(
drm_devi˚
 *
dev
)

69 
drm_c⁄√˘‹
 *
c⁄√˘‹
 = 
NULL
;

71 
	`muãx_lock
(&
dev
->
mode_c⁄fig
.
muãx
);

73 
	`li°_f‹_óch_íåy
(
c⁄√˘‹
, &
dev
->
mode_c⁄fig
.
c⁄√˘‹_li°
, 
hód
) {

75 
nv_drm_c⁄√˘‹
 *
nv_c⁄√˘‹
 = 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
);

77 i‡(!
	`nv_drm_c⁄√˘‹_check_c⁄√˘i⁄_°©us_dúty_™d_˛ór
(

78 
nv_c⁄√˘‹
)) {

82 
c⁄√˘‹
->
funcs
->
	`fûl_modes
(

83 
c⁄√˘‹
,

84 
dev
->
mode_c⁄fig
.
max_width
, dev->mode_c⁄fig.
max_height
);

87 
	`muãx_u∆ock
(&
dev
->
mode_c⁄fig
.
muãx
);

88 
	}
}

90 
drm_‰amebuf„r
 *
nv_drm_‰amebuf„r_¸óã
(

91 
drm_devi˚
 *
dev
,

92 
drm_fûe
 *
fûe
,

93 #i‡
deföed
(
NV_DRM_HELPER_MODE_FILL_FB_STRUCT_HAS_CONST_MODE_CMD_ARG
)

94 c⁄° 
drm_mode_fb_cmd2
 *
cmd


96 
drm_mode_fb_cmd2
 *
cmd


100 
drm_mode_fb_cmd2
 
	gloˇl_cmd
;

101 
drm_‰amebuf„r
 *
	gfb
;

103 
	gloˇl_cmd
 = *
cmd
;

105 
	gfb
 = 
nv_drm_öã∫Æ_‰amebuf„r_¸óã
(

106 
dev
,

107 
fûe
,

108 &
loˇl_cmd
);

110 #i‡!
deföed
(
NV_DRM_HELPER_MODE_FILL_FB_STRUCT_HAS_CONST_MODE_CMD_ARG
)

111 *
	gcmd
 = 
loˇl_cmd
;

114  
	gfb
;

117 c⁄° 
drm_mode_c⁄fig_funcs
 
	gnv_mode_c⁄fig_funcs
 = {

118 .
fb_¸óã
 = 
nv_drm_‰amebuf„r_¸óã
,

120 .
	g©omic_°©e_Æloc
 = 
nv_drm_©omic_°©e_Æloc
,

121 .
	g©omic_°©e_˛ór
 = 
nv_drm_©omic_°©e_˛ór
,

122 .
	g©omic_°©e_‰ì
 = 
nv_drm_©omic_°©e_‰ì
,

123 .
	g©omic_check
 = 
nv_drm_©omic_check
,

124 .
	g©omic_commô
 = 
nv_drm_©omic_commô
,

126 .
	gouçut_pﬁl_ch™ged
 = 
nv_drm_ouçut_pﬁl_ch™ged
,

129 
	$nv_drm_evít_ˇŒback
(c⁄° 
NvKmsK≠iEvít
 *
evít
)

131 
nv_drm_devi˚
 *
nv_dev
 = 
evít
->
¥iv©eD©a
;

133 
	`muãx_lock
(&
nv_dev
->
lock
);

135 i‡(!
	`©omic_ªad
(&
nv_dev
->
íabÀ_evít_h™dlög
)) {

136 
d⁄e
;

139 
evít
->
ty≥
) {

140 
NVKMS_EVENT_TYPE_DPY_CHANGED
:

141 
	`nv_drm_h™dÀ_di•œy_ch™ge
(

142 
nv_dev
,

143 
evít
->
u
.
di•œyCh™ged
.
di•œy
);

146 
NVKMS_EVENT_TYPE_DYNAMIC_DPY_CONNECTED
:

147 
	`nv_drm_h™dÀ_dy«mic_di•œy_c⁄√˘ed
(

148 
nv_dev
,

149 
evít
->
u
.
dy«micDi•œyC⁄√˘ed
.
di•œy
);

151 
NVKMS_EVENT_TYPE_FLIP_OCCURRED
:

152 
	`nv_drm_h™dÀ_Êù_occuºed
(

153 
nv_dev
,

154 
evít
->
u
.
ÊùOccuºed
.
hód
,

155 
evít
->
u
.
ÊùOccuºed
.
∂™e
);

161 
d⁄e
:

163 
	`muãx_u∆ock
(&
nv_dev
->
lock
);

164 
	}
}

171 
	$nv_drm_öô_mode_c⁄fig
(
nv_drm_devi˚
 *
nv_dev
,

172 c⁄° 
NvKmsK≠iDevi˚Resour˚sInfo
 *
pResInfo
)

174 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

175 
drm_mode_c⁄fig_hñ≥r_funcs
 
nv_mode_c⁄fig_hñ≥r
 = {

176 .
©omic_commô_èû
 = 
nv_drm_©omic_hñ≥r_commô_èû
,

179 
drm_devi˚
 *
dev
 = 
nv_dev
->dev;

181 
	`drm_mode_c⁄fig_öô
(
dev
);

182 
	`drm_mode_¸óã_dvi_i_¥›îtõs
(
dev
);

184 
dev
->
mode_c⁄fig
.
funcs
 = &
nv_mode_c⁄fig_funcs
;

186 
dev
->
mode_c⁄fig
.
mö_width
 = 
pResInfo
->
ˇps
.
möWidthInPixñs
;

187 
dev
->
mode_c⁄fig
.
mö_height
 = 
pResInfo
->
ˇps
.
möHeightInPixñs
;

189 
dev
->
mode_c⁄fig
.
max_width
 = 
pResInfo
->
ˇps
.
maxWidthInPixñs
;

190 
dev
->
mode_c⁄fig
.
max_height
 = 
pResInfo
->
ˇps
.
maxHeightInPixñs
;

192 
dev
->
mode_c⁄fig
.
curs‹_width
 = 
pResInfo
->
ˇps
.
maxCurs‹SizeInPixñs
;

193 
dev
->
mode_c⁄fig
.
curs‹_height
 = 
pResInfo
->
ˇps
.
maxCurs‹SizeInPixñs
;

200 
dev
->
mode_c⁄fig
.
¥e„ºed_dïth
 = 24;

201 
dev
->
mode_c⁄fig
.
¥e„r_shadow
 = 1;

205 
dev
->
mode_c⁄fig
.
fb_ba£
 = 0;

207 
dev
->
mode_c⁄fig
.
async_∑ge_Êù
 = 
Ál£
;

209 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

210 
dev
->
mode_c⁄fig
.
hñ≥r_¥iv©e
 = &
nv_mode_c⁄fig_hñ≥r
;

215 
	`drm_kms_hñ≥r_pﬁl_öô
(
dev
);

219 
	`drm_kms_hñ≥r_pﬁl_dißbÀ
(
dev
);

220 
	}
}

225 
	gnv_drm_íumî©e_ícodîs_™d_c⁄√˘‹s


227 
nv_drm_devi˚
 *
	gnv_dev


230 
drm_devi˚
 *
	gdev
 = 
nv_dev
->
dev
;

231 
NvU32
 
	gnDi•œys
 = 0;

233 i‡(!
	gnvKms
->
gëDi•œys
(
nv_dev
->
pDevi˚
, &
nDi•œys
, 
NULL
)) {

234 
NV_DRM_DEV_LOG_ERR
(

235 
nv_dev
,

239 i‡(
	gnDi•œys
 != 0) {

240 
NvKmsK≠iDi•œy
 *
hDi•œys
 =

241 
nv_drm_ˇŒoc
(
nDi•œys
, (*
hDi•œys
));

243 i‡(
	ghDi•œys
 !
NULL
) {

244 i‡(!
nvKms
->
gëDi•œys
(
nv_dev
->
pDevi˚
, &
nDi•œys
, 
hDi•œys
)) {

245 
NV_DRM_DEV_LOG_ERR
(

246 
nv_dev
,

249 
NvU32
 
	gi
;

251 
	gi
 = 0; i < 
	gnDi•œys
; i++) {

252 
drm_ícodî
 *
	gícodî
 =

253 
nv_drm_add_ícodî
(
dev
, 
hDi•œys
[
i
]);

255 i‡(
IS_ERR
(
ícodî
)) {

256 
NV_DRM_DEV_LOG_ERR
(

257 
nv_dev
,

259 
hDi•œys
[
i
]);

264 
nv_drm_‰ì
(
hDi•œys
);

266 
NV_DRM_DEV_LOG_ERR
(

267 
nv_dev
,

275 
	$nv_drm_lﬂd
(
drm_devi˚
 *
dev
, 
Êags
)

277 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

278 
NvKmsK≠iDevi˚
 *
pDevi˚
;

280 
NvKmsK≠iAŒoˇãDevi˚P¨ams
 
ÆloˇãDevi˚P¨ams
;

281 
NvKmsK≠iDevi˚Resour˚sInfo
 
ªsInfo
;

284 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

286 
	`NV_DRM_DEV_LOG_INFO
(
nv_dev
, "Loading driver");

288 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

290 i‡(!
	`drm_c‹e_check_„©uª
(
dev
, 
DRIVER_MODESET
)) {

296 
	`mem£t
(&
ÆloˇãDevi˚P¨ams
, 0, (allocateDeviceParams));

298 
ÆloˇãDevi˚P¨ams
.
gpuId
 = 
nv_dev
->
gpu_öfo
.
gpu_id
;

300 
ÆloˇãDevi˚P¨ams
.
¥iv©eD©a
 = 
nv_dev
;

301 
ÆloˇãDevi˚P¨ams
.
evítCÆlback
 = 
nv_drm_evít_ˇŒback
;

303 
pDevi˚
 = 
nvKms
->
	`ÆloˇãDevi˚
(&
ÆloˇãDevi˚P¨ams
);

305 i‡(
pDevi˚
 =
NULL
) {

306 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "FailedÅoállocate NvKmsKapiDevice");

307  -
ENODEV
;

312 i‡(!
nvKms
->
	`gëDevi˚Resour˚sInfo
(
pDevi˚
, &
ªsInfo
)) {

314 
nvKms
->
	`‰ìDevi˚
(
pDevi˚
);

316 
	`NV_DRM_DEV_LOG_ERR
(

317 
nv_dev
,

319  -
ENODEV
;

322 
	`muãx_lock
(&
nv_dev
->
lock
);

326 
nv_dev
->
pDevi˚
 =ÖDevice;

328 
nv_dev
->
pôchAlignmít
 = 
ªsInfo
.
ˇps
.pitchAlignment;

332 
	`nv_drm_öô_mode_c⁄fig
(
nv_dev
, &
ªsInfo
);

334 i‡(!
nvKms
->
	`de˛¨eEvítI¡îe°
(

335 
nv_dev
->
pDevi˚
,

336 ((1 << 
NVKMS_EVENT_TYPE_DPY_CHANGED
) |

337 (1 << 
NVKMS_EVENT_TYPE_DYNAMIC_DPY_CONNECTED
) |

338 (1 << 
NVKMS_EVENT_TYPE_FLIP_OCCURRED
)))) {

339 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "FailedÅoÑegisterÉvent mask");

344 
	`nv_drm_íumî©e_¸tcs_™d_∂™es
(
nv_dev
, 
ªsInfo
.
numHóds
);

348 
	`nv_drm_íumî©e_ícodîs_™d_c⁄√˘‹s
(
nv_dev
);

350 
	`drm_vbœnk_öô
(
dev
, dev->
mode_c⁄fig
.
num_¸tc
);

357 
	`drm_hñ≥r_hpd_úq_evít
(
dev
);

361 
	`©omic_£t
(&
nv_dev
->
íabÀ_evít_h™dlög
, 
åue
);

363 #i‡!
	`deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

364 
	`öô_waôqueue_hód
(&
nv_dev
->
≥ndög_commô_queue
);

365 
	`öô_waôqueue_hód
(&
nv_dev
->
≥ndög_Êù_queue
);

368 
	`muãx_u∆ock
(&
nv_dev
->
lock
);

373 
	}
}

375 
	$__nv_drm_u∆ﬂd
(
drm_devi˚
 *
dev
)

377 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

378 
NvKmsK≠iDevi˚
 *
pDevi˚
 = 
NULL
;

381 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

383 
	`NV_DRM_DEV_LOG_INFO
(
nv_dev
, "Unloading driver");

385 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

387 i‡(!
	`drm_c‹e_check_„©uª
(
dev
, 
DRIVER_MODESET
)) {

391 
	`muãx_lock
(&
nv_dev
->
lock
);

395 
	`©omic_£t
(&
nv_dev
->
íabÀ_evít_h™dlög
, 
Ál£
);

399 
	`drm_kms_hñ≥r_pﬁl_föi
(
dev
);

403 
	`drm_mode_c⁄fig_˛ónup
(
dev
);

405 i‡(!
nvKms
->
	`de˛¨eEvítI¡îe°
(
nv_dev
->
pDevi˚
, 0x0)) {

406 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "FailedÅo stopÉventÜistening");

411 
pDevi˚
 = 
nv_dev
->pDevice;

412 
nv_dev
->
pDevi˚
 = 
NULL
;

414 
	`muãx_u∆ock
(&
nv_dev
->
lock
);

416 
nvKms
->
	`‰ìDevi˚
(
pDevi˚
);

419 
	}
}

421 #i‡
deföed
(
NV_DRM_DRIVER_UNLOAD_HAS_INT_RETURN_TYPE
)

422 
	$nv_drm_u∆ﬂd
(
drm_devi˚
 *
dev
)

424 
	`__nv_drm_u∆ﬂd
(
dev
);

427 
	}
}

429 
	$nv_drm_u∆ﬂd
(
drm_devi˚
 *
dev
)

431 
	`__nv_drm_u∆ﬂd
(
dev
);

432 
	}
}

435 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

437 
	$nv_drm_ma°î_£t
(
drm_devi˚
 *
dev
,

438 
drm_fûe
 *
fûe_¥iv
, 
boﬁ
 
‰om_›í
)

440 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

442 i‡(!
nvKms
->
	`gøbOw√rshù
(
nv_dev
->
pDevi˚
)) {

443  -
EINVAL
;

447 
	}
}

449 #i‡
deföed
(
NV_DRM_MASTER_DROP_HAS_FROM_RELEASE_ARG
)

451 
	$nv_drm_ma°î_dr›
(
drm_devi˚
 *
dev
,

452 
drm_fûe
 *
fûe_¥iv
, 
boﬁ
 
‰om_ªÀa£
)

455 
	$nv_drm_ma°î_dr›
(
drm_devi˚
 *
dev
, 
drm_fûe
 *
fûe_¥iv
)

458 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

459 
drm_∂™e
 *
∂™e
;

460 
∂™e_mask
;

461 
drm_¸tc
 *
¸tc
;

462 
îr
;

474 
	`drm_mode£t_lock_Æl
(
dev
);

476 
∂™e_mask
 = 0x0;

477 
	`li°_f‹_óch_íåy
(
∂™e
, &
dev
->
mode_c⁄fig
.
∂™e_li°
, 
hód
) {

478 
∂™e
->
ﬁd_fb
 =Öœ√->
fb
;

479 
∂™e_mask
 |1 << 
	`drm_∂™e_ödex
(
∂™e
);

482 i‡((
îr
 = 
	`nv_drm_©omic_hñ≥r_dißbÀ_Æl
(

483 
dev
,

484 
dev
->
mode_c⁄fig
.
acquúe_˘x
)) != 0) {

486 
	`NV_DRM_DEV_LOG_ERR
(

487 
nv_dev
,

489 
îr
);

492 
	`nv_drm_©omic_˛ón_ﬁd_fb
(
dev
, 
∂™e_mask
, 
îr
);

494 
	`li°_f‹_óch_íåy
(
¸tc
, &
dev
->
mode_c⁄fig
.
¸tc_li°
, 
hód
) {

495 
drm_mode_£t
 
£t
 = {

496 .
¸tc
 = crtc,

499 
∂™e_mask
 = 0x0;

500 
	`li°_f‹_óch_íåy
(
∂™e
, &
dev
->
mode_c⁄fig
.
∂™e_li°
, 
hód
) {

501 
∂™e
->
ﬁd_fb
 =Öœ√->
fb
;

502 
∂™e_mask
 |1 << 
	`drm_∂™e_ödex
(
∂™e
);

505 i‡((
îr
 = 
	`nv_drm_©omic_hñ≥r_£t_c⁄fig
(

506 &
£t
,

507 
dev
->
mode_c⁄fig
.
acquúe_˘x
)) != 0) {

508 
	`NV_DRM_DEV_LOG_ERR
(

509 
nv_dev
,

511 
îr
);

514 
	`nv_drm_©omic_˛ón_ﬁd_fb
(
dev
, 
∂™e_mask
, 
îr
);

517 
	`drm_mode£t_u∆ock_Æl
(
dev
);

519 
nvKms
->
	`ªÀa£Ow√rshù
(
nv_dev
->
pDevi˚
);

520 
	}
}

523 #i‡
deföed
(
NV_DRM_BUS_PRESENT
Ë|| deföed(
NV_DRM_DRIVER_HAS_SET_BUSID
)

524 
	$nv_drm_pci_£t_busid
(
drm_devi˚
 *
dev
,

525 
drm_ma°î
 *
ma°î
)

527 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

529 
ma°î
->
unique
 = 
	`nv_drm_a•rötf
("pci:%04x:%02x:%02x.%d",

530 
nv_dev
->
gpu_öfo
.
pci_öfo
.
domaö
,

531 
nv_dev
->
gpu_öfo
.
pci_öfo
.
bus
,

532 
nv_dev
->
gpu_öfo
.
pci_öfo
.
¶Ÿ
,

533 
nv_dev
->
gpu_öfo
.
pci_öfo
.
fun˘i⁄
);

535 i‡(
ma°î
->
unique
 =
NULL
) {

536  -
ENOMEM
;

539 
ma°î
->
unique_Àn
 = 
	`°æí
(ma°î->
unique
);

542 
	}
}

545 
	$nv_drm_gë_dev_öfo_io˘l
(
drm_devi˚
 *
dev
,

546 *
d©a
, 
drm_fûe
 *
fûï
)

548 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

549 
drm_nvidü_gë_dev_öfo_∑øms
 *
∑øms
 = 
d©a
;

551 i‡(
dev
->
¥im¨y
 =
NULL
) {

552  -
ENOENT
;

555 
∑øms
->
gpu_id
 = 
nv_dev
->
gpu_öfo
.gpu_id;

556 
∑øms
->
¥im¨y_ödex
 = 
dev
->
¥im¨y
->
ödex
;

559 
	}
}

562 
	$nv_drm_gë_˛õ¡_ˇ∑bûôy_io˘l
(
drm_devi˚
 *
dev
,

563 *
d©a
, 
drm_fûe
 *
fûï
)

565 
drm_nvidü_gë_˛õ¡_ˇ∑bûôy_∑øms
 *
∑øms
 = 
d©a
;

567 
∑øms
->
ˇ∑bûôy
) {

568 #i‡
	`deföed
(
DRM_CLIENT_CAP_STEREO_3D
)

569 
DRM_CLIENT_CAP_STEREO_3D
:

570 
∑øms
->
vÆue
 = 
fûï
->
°îeo_Ælowed
;

573 #i‡
	`deföed
(
DRM_CLIENT_CAP_UNIVERSAL_PLANES
)

574 
DRM_CLIENT_CAP_UNIVERSAL_PLANES
:

575 
∑øms
->
vÆue
 = 
fûï
->
univîßl_∂™es
;

578 #i‡
	`deföed
(
DRM_CLIENT_CAP_ATOMIC
)

579 
DRM_CLIENT_CAP_ATOMIC
:

580 
∑øms
->
vÆue
 = 
fûï
->
©omic
;

584  -
EINVAL
;

588 
	}
}

590 #i‡
deföed
(
NV_DRM_BUS_PRESENT
)

592 #i‡
deföed
(
NV_DRM_BUS_HAS_GET_IRQ
)

593 
	$nv_drm_bus_gë_úq
(
drm_devi˚
 *
dev
)

596 
	}
}

599 #i‡
deföed
(
NV_DRM_BUS_HAS_GET_NAME
)

600 c⁄° *
	$nv_drm_bus_gë_«me
(
drm_devi˚
 *
dev
)

603 
	}
}

606 
drm_bus
 
	gnv_drm_bus
 = {

607 #i‡
deföed
(
NV_DRM_BUS_HAS_BUS_TYPE
)

608 .
bus_ty≥
 = 
DRIVER_BUS_PCI
,

610 #i‡
deföed
(
NV_DRM_BUS_HAS_GET_IRQ
)

611 .
	ggë_úq
 = 
nv_drm_bus_gë_úq
,

613 #i‡
deföed
(
NV_DRM_BUS_HAS_GET_NAME
)

614 .
	ggë_«me
 = 
nv_drm_bus_gë_«me
,

616 .
	g£t_busid
 = 
nv_drm_pci_£t_busid
,

621 c⁄° 
fûe_›î©i⁄s
 
	gnv_drm_f›s
 = {

622 .
ow√r
 = 
THIS_MODULE
,

624 .
	g›í
 = 
drm_›í
,

625 .
	gªÀa£
 = 
drm_ªÀa£
,

626 .
	gu∆ocked_io˘l
 = 
drm_io˘l
,

628 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

629 .
	gmm≠
 = 
drm_gem_mm≠
,

632 .
	gpﬁl
 = 
drm_pﬁl
,

633 .
	gªad
 = 
drm_ªad
,

635 .
	gŒ£ek
 = 
no›_Œ£ek
,

638 c⁄° 
drm_io˘l_desc
 
	gnv_drm_io˘ls
[] = {

639 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

640 
DRM_IOCTL_DEF_DRV
(
NVIDIA_GEM_IMPORT_NVKMS_MEMORY
,

641 
nv_drm_gem_imp‹t_nvkms_mem‹y_io˘l
,

642 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

645 
DRM_IOCTL_DEF_DRV
(
NVIDIA_GEM_IMPORT_USERSPACE_MEMORY
,

646 
nv_drm_gem_imp‹t_u£r•a˚_mem‹y_io˘l
,

647 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

648 
DRM_IOCTL_DEF_DRV
(
NVIDIA_GET_DEV_INFO
,

649 
nv_drm_gë_dev_öfo_io˘l
,

650 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

652 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

653 
DRM_IOCTL_DEF_DRV
(
NVIDIA_FENCE_SUPPORTED
,

654 
nv_drm_„n˚_suµ‹ãd_io˘l
,

655 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

656 
DRM_IOCTL_DEF_DRV
(
NVIDIA_FENCE_CONTEXT_CREATE
,

657 
nv_drm_„n˚_c⁄ãxt_¸óã_io˘l
,

658 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

659 
DRM_IOCTL_DEF_DRV
(
NVIDIA_GEM_FENCE_ATTACH
,

660 
nv_drm_gem_„n˚_©èch_io˘l
,

661 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

664 
DRM_IOCTL_DEF_DRV
(
NVIDIA_GET_CLIENT_CAPABILITY
,

665 
nv_drm_gë_˛õ¡_ˇ∑bûôy_io˘l
,

667 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

668 
DRM_IOCTL_DEF_DRV
(
NVIDIA_GET_CRTC_CRC32
,

669 
nv_drm_gë_¸tc_¸c32_io˘l
,

670 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

671 
DRM_IOCTL_DEF_DRV
(
NVIDIA_GEM_EXPORT_NVKMS_MEMORY
,

672 
nv_drm_gem_exp‹t_nvkms_mem‹y_io˘l
,

673 
DRM_RENDER_ALLOW
|
DRM_UNLOCKED
),

677 
drm_drivî
 
	gnv_drm_drivî
 = {

679 .
drivî_„©uªs
 = 
DRIVER_GEM
 | 
DRIVER_PRIME
 | 
DRIVER_RENDER
,

681 .
	ggem_‰ì_obje˘
 = 
nv_drm_gem_‰ì
,

683 .
	gio˘ls
 = 
nv_drm_io˘ls
,

684 .
	gnum_io˘ls
 = 
ARRAY_SIZE
(
nv_drm_io˘ls
),

686 .
	g¥ime_h™dÀ_to_fd
 = 
drm_gem_¥ime_h™dÀ_to_fd
,

687 .
	g¥ime_fd_to_h™dÀ
 = 
drm_gem_¥ime_fd_to_h™dÀ
,

688 .
	ggem_¥ime_exp‹t
 = 
drm_gem_¥ime_exp‹t
,

689 .
	ggem_¥ime_imp‹t
 = 
nv_drm_gem_¥ime_imp‹t
,

690 .
	ggem_¥ime_gë_sg_èbÀ
 = 
nv_drm_gem_¥ime_gë_sg_èbÀ
,

691 .
	ggem_¥ime_vm≠
 = 
nv_drm_gem_¥ime_vm≠
,

692 .
	ggem_¥ime_vunm≠
 = 
nv_drm_gem_¥ime_vunm≠
,

694 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

695 .
	ggem_¥ime_ªs_obj
 = 
nv_drm_gem_¥ime_ªs_obj
,

698 #i‡
deföed
(
NV_DRM_DRIVER_HAS_SET_BUSID
)

699 .
	g£t_busid
 = 
nv_drm_pci_£t_busid
,

702 .
	glﬂd
 = 
nv_drm_lﬂd
,

703 .
	gu∆ﬂd
 = 
nv_drm_u∆ﬂd
,

705 .
	gf›s
 = &
nv_drm_f›s
,

707 #i‡
deföed
(
NV_DRM_BUS_PRESENT
)

708 .
	gbus
 = &
nv_drm_bus
,

711 .
	g«me
 = "nvidia-drm",

713 .
	gdesc
 = "NVIDIA DRM driver",

714 .
	gd©e
 = "20160202",

716 #i‡
deföed
(
NV_DRM_DRIVER_HAS_LEGACY_DEV_LIST
)

717 .
	gÀgacy_dev_li°
 = 
LIST_HEAD_INIT
(
nv_drm_drivî
.
Àgacy_dev_li°
),

719 .
	gdevi˚_li°
 = 
LIST_HEAD_INIT
(
nv_drm_drivî
.
devi˚_li°
),

731 #ifde‡
__löux__


732 
	$nv_drm_upd©e_drm_drivî_„©uªs
()

734 
	$nv_drm_upd©e_drm_drivî_„©uªs
()

737 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

739 i‡(!
nv_drm_mode£t_moduÀ_∑øm
) {

743 
nv_drm_drivî
.
drivî_„©uªs
 |
DRIVER_MODESET
 | 
DRIVER_ATOMIC
;

745 
nv_drm_drivî
.
ma°î_£t
 = 
nv_drm_ma°î_£t
;

746 
nv_drm_drivî
.
ma°î_dr›
 = 
nv_drm_ma°î_dr›
;

748 
nv_drm_drivî
.
dumb_¸óã
 = 
nv_drm_dumb_¸óã
;

749 
nv_drm_drivî
.
dumb_m≠_off£t
 = 
nv_drm_dumb_m≠_off£t
;

750 
nv_drm_drivî
.
dumb_de°roy
 = 
drm_gem_dumb_de°roy
;

752 
nv_drm_drivî
.
gem_vm_›s
 = &
nv_drm_gem_vma_›s
;

755 
	`NV_DRM_LOG_INFO
("nv_drm_drivî.drivî_„©uª†%x", 
nv_drm_drivî
.
drivî_„©uªs
);

758 
	}
}

763 #ifde‡
__löux__


766 
	$nv_drm_ªgi°î_drm_devi˚
(c⁄° 
nv_gpu_öfo_t
 *
gpu_öfo
)

768 
nv_drm_devi˚
 *
nv_dev
 = 
NULL
;

769 
drm_devi˚
 *
dev
 = 
NULL
;

770 
pci_dev
 *
pdev
 = 
gpu_öfo
->
os_dev_±r
;

772 
	`DRM_DEBUG
(

774 
gpu_öfo
->
gpu_id
);

778 
nv_dev
 = 
	`nv_drm_ˇŒoc
(1, (*nv_dev));

780 i‡(
nv_dev
 =
NULL
) {

781 
	`NV_DRM_LOG_ERR
(

786 
nv_dev
->
gpu_öfo
 = *gpu_info;

788 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

789 
	`muãx_öô
(&
nv_dev
->
lock
);

794 
dev
 = 
	`drm_dev_Æloc
(&
nv_drm_drivî
, &
pdev
->dev);

796 i‡(
dev
 =
NULL
) {

797 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "FailedÅoállocate device");

798 
Áûed_drm_Æloc
;

801 
dev
->
dev_¥iv©e
 = 
nv_dev
;

802 
nv_dev
->
dev
 = dev;

803 
dev
->
pdev
 =Ödev;

807 i‡(
	`drm_dev_ªgi°î
(
dev
, 0) != 0) {

808 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "FailedÅoÑegister device");

809 
Áûed_drm_ªgi°î
;

814 
nv_dev
->
√xt
 = 
dev_li°
;

815 
dev_li°
 = 
nv_dev
;

819 
Áûed_drm_ªgi°î
:

821 
	`nv_drm_dev_‰ì
(
dev
);

823 
Áûed_drm_Æloc
:

825 
	`nv_drm_‰ì
(
nv_dev
);

826 
	}
}

831 
	$nv_drm_¥obe_devi˚s
()

833 
nv_gpu_öfo_t
 *
gpu_öfo
 = 
NULL
;

834 
NvU32
 
gpu_cou¡
 = 0;

835 
NvU32
 
i
;

837 
ªt
 = 0;

839 
	`nv_drm_upd©e_drm_drivî_„©uªs
();

843 
gpu_öfo
 = 
	`nv_drm_ˇŒoc
(
NV_MAX_GPUS
, (*gpu_info));

845 i‡(
gpu_öfo
 =
NULL
) {

846 
ªt
 = -
ENOMEM
;

848 
	`NV_DRM_LOG_ERR
("FailedÅoállocate gpu idsárrays");

849 
d⁄e
;

852 
gpu_cou¡
 = 
nvKms
->
	`íumî©eGpus
(
gpu_öfo
);

854 i‡(
gpu_cou¡
 == 0) {

855 
	`NV_DRM_LOG_INFO
("Not found NVIDIA GPUs");

856 
d⁄e
;

859 
	`WARN_ON
(
gpu_cou¡
 > 
NV_MAX_GPUS
);

863 
i
 = 0; i < 
gpu_cou¡
; i++) {

864 
	`nv_drm_ªgi°î_drm_devi˚
(&
gpu_öfo
[
i
]);

867 
d⁄e
:

869 
	`nv_drm_‰ì
(
gpu_öfo
);

871  
ªt
;

872 
	}
}

877 
	$nv_drm_ªmove_devi˚s
()

879 
dev_li°
 !
NULL
) {

880 
nv_drm_devi˚
 *
√xt
 = 
dev_li°
->next;

882 
	`drm_dev_uƒegi°î
(
dev_li°
->
dev
);

884 
	`nv_drm_dev_‰ì
(
dev_li°
->
dev
);

886 
	`nv_drm_‰ì
(
dev_li°
);

888 
dev_li°
 = 
√xt
;

890 
	}
}

	@src/nvidia-drm/nvidia-drm-drv.h

23 #i‚de‡
__NVIDIA_DRM_DRV_H__


24 
	#__NVIDIA_DRM_DRV_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_AVAILABLE
)

30 
nv_drm_¥obe_devi˚s
();

32 
nv_drm_ªmove_devi˚s
();

35 #i‚de‡
__löux__


36 
nv_drm_ªgi°î_drm_devi˚
(c⁄° 
nv_gpu_öfo_t
 *);

	@src/nvidia-drm/nvidia-drm-encoder.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

27 
	~"nvidü-drm-¥iv.h
"

28 
	~"nvidü-drm-ícodî.h
"

29 
	~"nvidü-drm-utûs.h
"

30 
	~"nvidü-drm-c⁄√˘‹.h
"

31 
	~"nvidü-drm-¸tc.h
"

32 
	~"nvidü-drm-hñ≥r.h
"

34 
	~<drm/drm_¸tc_hñ≥r.h
>

36 
	~<drm/drm_©omic.h
>

37 
	~<drm/drm_©omic_hñ≥r.h
>

39 
	$nv_drm_ícodî_de°roy
(
drm_ícodî
 *
ícodî
)

41 
nv_drm_ícodî
 *
nv_ícodî
 = 
	`to_nv_ícodî
(
ícodî
);

43 
	`drm_ícodî_˛ónup
(
ícodî
);

45 
	`nv_drm_‰ì
(
nv_ícodî
);

46 
	}
}

48 c⁄° 
drm_ícodî_funcs
 
	gnv_ícodî_funcs
 = {

49 .
de°roy
 = 
nv_drm_ícodî_de°roy
,

52 
boﬁ
 
	$nv_drm_ícodî_mode_fixup
(
drm_ícodî
 *
ícodî
,

53 c⁄° 
drm_di•œy_mode
 *
mode
,

54 
drm_di•œy_mode
 *
adju°ed_mode
)

56  
åue
;

57 
	}
}

59 
	$nv_drm_ícodî_¥ï¨e
(
drm_ícodî
 *
ícodî
)

62 
	}
}

64 
	$nv_drm_ícodî_commô
(
drm_ícodî
 *
ícodî
)

67 
	}
}

69 
	$nv_drm_ícodî_mode_£t
(
drm_ícodî
 *
ícodî
,

70 
drm_di•œy_mode
 *
mode
,

71 
drm_di•œy_mode
 *
adju°ed_mode
)

74 
	}
}

76 c⁄° 
drm_ícodî_hñ≥r_funcs
 
	gnv_ícodî_hñ≥r_funcs
 = {

77 .
mode_fixup
 = 
nv_drm_ícodî_mode_fixup
,

78 .
	g¥ï¨e
 = 
nv_drm_ícodî_¥ï¨e
,

79 .
	gcommô
 = 
nv_drm_ícodî_commô
,

80 .
	gmode_£t
 = 
nv_drm_ícodî_mode_£t
,

83 
uöt32_t
 
	$gë_¸tc_mask
(
drm_devi˚
 *
dev
, 
uöt32_t
 
hódMask
)

85 
drm_¸tc
 *
¸tc
 = 
NULL
;

86 
uöt32_t
 
¸tc_mask
 = 0x0;

88 
	`li°_f‹_óch_íåy
(
¸tc
, &
dev
->
mode_c⁄fig
.
¸tc_li°
, 
hód
) {

89 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

91 i‡(
hódMask
 & 
	`BIT
(
nv_¸tc
->
hód
)) {

92 
¸tc_mask
 |
	`drm_¸tc_mask
(
¸tc
);

96  
¸tc_mask
;

97 
	}
}

103 
drm_ícodî
*

104 
	$nv_drm_ícodî_√w
(
drm_devi˚
 *
dev
,

105 
NvKmsK≠iDi•œy
 
hDi•œy
,

106 
NvKmsC⁄√˘‹Sig«lF‹m©
 
f‹m©
,

107 
¸tc_mask
)

109 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

111 
nv_drm_ícodî
 *
nv_ícodî
 = 
NULL
;

113 
ªt
 = 0;

117 
nv_ícodî
 = 
	`nv_drm_ˇŒoc
(1, (*nv_encoder));

119 i‡(
nv_ícodî
 =
NULL
) {

120 
	`NV_DRM_DEV_LOG_ERR
(

121 
nv_dev
,

123  
	`ERR_PTR
(-
ENOMEM
);

126 
nv_ícodî
->
hDi•œy
 = hDisplay;

130 
ªt
 = 
	`drm_ícodî_öô
(
dev
,

131 &
nv_ícodî
->
ba£
, &
nv_ícodî_funcs
,

132 
	`nvkms_c⁄√˘‹_sig«l_to_drm_ícodî_sig«l
(
f‹m©
)

133 #i‡
	`deföed
(
NV_DRM_ENCODER_INIT_HAS_NAME_ARG
)

134 , 
NULL


138 i‡(
ªt
 != 0) {

139 
	`nv_drm_‰ì
(
nv_ícodî
);

141 
	`NV_DRM_DEV_LOG_ERR
(

142 
nv_dev
,

144 
hDi•œy
);

145  
	`ERR_PTR
(
ªt
);

148 
nv_ícodî
->
ba£
.
possibÀ_¸tcs
 = 
¸tc_mask
;

150 
	`drm_ícodî_hñ≥r_add
(&
nv_ícodî
->
ba£
, &
nv_ícodî_hñ≥r_funcs
);

152  &
nv_ícodî
->
ba£
;

153 
	}
}

158 
drm_ícodî
*

159 
	$nv_drm_add_ícodî
(
drm_devi˚
 *
dev
, 
NvKmsK≠iDi•œy
 
hDi•œy
)

161 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

163 
NvKmsK≠iSèticDi•œyInfo
 *
di•œyInfo
 = 
NULL
;

164 
NvKmsK≠iC⁄√˘‹Info
 *
c⁄√˘‹Info
 = 
NULL
;

166 
drm_ícodî
 *
ícodî
 = 
NULL
;

167 
nv_drm_ícodî
 *
nv_ícodî
 = 
NULL
;

169 
drm_c⁄√˘‹
 *
c⁄√˘‹
 = 
NULL
;

171 
ªt
 = 0;

175 i‡((
di•œyInfo
 = 
	`nv_drm_ˇŒoc
(1, (*di•œyInfo))Ë=
NULL
) {

176 
ªt
 = -
ENOMEM
;

177 
d⁄e
;

180 i‡(!
nvKms
->
	`gëSèticDi•œyInfo
(
nv_dev
->
pDevi˚
, 
hDi•œy
, 
di•œyInfo
)) {

181 
ªt
 = -
EINVAL
;

182 
d⁄e
;

185 
c⁄√˘‹Info
 = 
	`nvkms_gë_c⁄√˘‹_öfo
(
nv_dev
->
pDevi˚
,

186 
di•œyInfo
->
c⁄√˘‹H™dÀ
);

188 i‡(
	`IS_ERR
(
c⁄√˘‹Info
)) {

189 
ªt
 = 
	`PTR_ERR
(
c⁄√˘‹Info
);

190 
d⁄e
;

195 
ícodî
 = 
	`nv_drm_ícodî_√w
(
dev
,

196 
di•œyInfo
->
h™dÀ
,

197 
c⁄√˘‹Info
->
sig«lF‹m©
,

198 
	`gë_¸tc_mask
(
dev
, 
c⁄√˘‹Info
->
hódMask
));

200 i‡(
	`IS_ERR
(
ícodî
)) {

201 
ªt
 = 
	`PTR_ERR
(
ícodî
);

202 
d⁄e
;

207 
c⁄√˘‹
 =

208 
	`nv_drm_gë_c⁄√˘‹
(
dev
,

209 
c⁄√˘‹Info
->
physiˇlIndex
,

210 
c⁄√˘‹Info
->
ty≥
,

211 
di•œyInfo
->
öã∫Æ
, di•œyInfo->
dpAddªss
);

213 i‡(
	`IS_ERR
(
c⁄√˘‹
)) {

214 
ªt
 = 
	`PTR_ERR
(
c⁄√˘‹
);

215 
Áûed_c⁄√˘‹_ícodî_©èch
;

220 
ªt
 = 
	`nv_drm_c⁄√˘‹_©èch_ícodî
(
c⁄√˘‹
, 
ícodî
);

222 i‡(
ªt
 != 0) {

223 
	`NV_DRM_DEV_LOG_ERR
(

224 
nv_dev
,

227 
hDi•œy
);

228 
Áûed_c⁄√˘‹_ícodî_©èch
;

231 
nv_ícodî
 = 
	`to_nv_ícodî
(
ícodî
);

233 
	`muãx_lock
(&
dev
->
mode_c⁄fig
.
muãx
);

235 
nv_ícodî
->
nv_c⁄√˘‹
 = 
	`to_nv_c⁄√˘‹
(
c⁄√˘‹
);

237 
	`nv_drm_c⁄√˘‹_m¨k_c⁄√˘i⁄_°©us_dúty
(
nv_ícodî
->
nv_c⁄√˘‹
);

239 
	`muãx_u∆ock
(&
dev
->
mode_c⁄fig
.
muãx
);

241 
d⁄e
;

243 
Áûed_c⁄√˘‹_ícodî_©èch
:

245 
	`drm_ícodî_˛ónup
(
ícodî
);

247 
	`nv_drm_‰ì
(
ícodî
);

249 
d⁄e
:

251 
	`nv_drm_‰ì
(
di•œyInfo
);

253 
	`nv_drm_‰ì
(
c⁄√˘‹Info
);

255  
ªt
 !0 ? 
	`ERR_PTR
‘ëË: 
ícodî
;

256 
	}
}

258 
ölöe
 
nv_drm_ícodî
*

259 
	$gë_nv_ícodî_‰om_nvkms_di•œy
(
drm_devi˚
 *
dev
,

260 
NvKmsK≠iDi•œy
 
hDi•œy
)

262 
drm_ícodî
 *
ícodî
;

264 
	`li°_f‹_óch_íåy
(
ícodî
, &
dev
->
mode_c⁄fig
.
ícodî_li°
, 
hód
) {

265 
nv_drm_ícodî
 *
nv_ícodî
 = 
	`to_nv_ícodî
(
ícodî
);

267 i‡(
nv_ícodî
->
hDi•œy
 == hDisplay) {

268  
nv_ícodî
;

272  
NULL
;

273 
	}
}

275 
	$nv_drm_h™dÀ_di•œy_ch™ge
(
nv_drm_devi˚
 *
nv_dev
,

276 
NvKmsK≠iDi•œy
 
hDi•œy
)

278 
drm_devi˚
 *
dev
 = 
nv_dev
->dev;

279 
nv_drm_ícodî
 *
nv_ícodî
 = 
NULL
;

281 
	`muãx_lock
(&
dev
->
mode_c⁄fig
.
muãx
);

283 
nv_ícodî
 = 
	`gë_nv_ícodî_‰om_nvkms_di•œy
(
dev
, 
hDi•œy
);

285 
	`muãx_u∆ock
(&
dev
->
mode_c⁄fig
.
muãx
);

287 i‡(
nv_ícodî
 =
NULL
) {

291 
	`nv_drm_c⁄√˘‹_m¨k_c⁄√˘i⁄_°©us_dúty
(
nv_ícodî
->
nv_c⁄√˘‹
);

293 
	`drm_kms_hñ≥r_hŸ∂ug_evít
(
dev
);

294 
	}
}

296 
	$nv_drm_h™dÀ_dy«mic_di•œy_c⁄√˘ed
(
nv_drm_devi˚
 *
nv_dev
,

297 
NvKmsK≠iDi•œy
 
hDi•œy
)

299 
drm_devi˚
 *
dev
 = 
nv_dev
->dev;

301 
drm_ícodî
 *
ícodî
 = 
NULL
;

302 
nv_drm_ícodî
 *
nv_ícodî
 = 
NULL
;

309 
nv_ícodî
 = 
	`gë_nv_ícodî_‰om_nvkms_di•œy
(
dev
, 
hDi•œy
);

311 i‡(
nv_ícodî
 !
NULL
) {

312 
	`NV_DRM_DEV_LOG_ERR
(

313 
nv_dev
,

315 
hDi•œy
);

319 
ícodî
 = 
	`nv_drm_add_ícodî
(
dev
, 
hDi•œy
);

321 i‡(
	`IS_ERR
(
ícodî
)) {

322 
	`NV_DRM_DEV_LOG_ERR
(

323 
nv_dev
,

325 
hDi•œy
);

336 #i‡
	`deföed
(
NV_DRM_REINIT_PRIMARY_MODE_GROUP_PRESENT
)

337 
	`drm_ªöô_¥im¨y_mode_group
(
dev
);

340 
	`drm_kms_hñ≥r_hŸ∂ug_evít
(
dev
);

341 
	}
}

	@src/nvidia-drm/nvidia-drm-encoder.h

23 #i‚de‡
__NVIDIA_DRM_ENCODER_H__


24 
	#__NVIDIA_DRM_ENCODER_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

30 
	~"nvidü-drm-¥iv.h
"

32 #i‡
deföed
(
NV_DRM_DRM_ENCODER_H_PRESENT
)

33 
	~<drm/drm_ícodî.h
>

35 
	~<drm/drmP.h
>

38 
	~"nvkms-k≠i.h
"

40 
	snv_drm_ícodî
 {

41 
NvKmsK≠iDi•œy
 
	mhDi•œy
;

43 
nv_drm_c⁄√˘‹
 *
	mnv_c⁄√˘‹
;

45 
drm_ícodî
 
	mba£
;

48 
ölöe
 
nv_drm_ícodî
 *
	$to_nv_ícodî
(

49 
drm_ícodî
 *
ícodî
)

51 i‡(
ícodî
 =
NULL
) {

52  
NULL
;

54  
	`c⁄èöî_of
(
ícodî
, 
nv_drm_ícodî
, 
ba£
);

55 
	}
}

57 
drm_ícodî
*

58 
nv_drm_add_ícodî
(
drm_devi˚
 *
dev
, 
NvKmsK≠iDi•œy
 
hDi•œy
);

60 
nv_drm_h™dÀ_di•œy_ch™ge
(
nv_drm_devi˚
 *
nv_dev
,

61 
NvKmsK≠iDi•œy
 
hDi•œy
);

63 
nv_drm_h™dÀ_dy«mic_di•œy_c⁄√˘ed
(
nv_drm_devi˚
 *
nv_dev
,

64 
NvKmsK≠iDi•œy
 
hDi•œy
);

	@src/nvidia-drm/nvidia-drm-fb.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

27 
	~"nvidü-drm-¥iv.h
"

28 
	~"nvidü-drm-io˘l.h
"

29 
	~"nvidü-drm-fb.h
"

30 
	~"nvidü-drm-utûs.h
"

31 
	~"nvidü-drm-gem.h
"

33 
	~<drm/drm_¸tc_hñ≥r.h
>

35 
	$nv_drm_‰amebuf„r_de°roy
(
drm_‰amebuf„r
 *
fb
)

37 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
fb
->
dev
);

39 
nv_drm_‰amebuf„r
 *
nv_fb
 = 
	`to_nv_‰amebuf„r
(
fb
);

43 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_fb
->
nv_nvkms_mem‹y
->
ba£
);

47 
	`drm_‰amebuf„r_˛ónup
(
fb
);

51 
nvKms
->
	`de°roySurÁ˚
(
nv_dev
->
pDevi˚
, 
nv_fb
->
pSurÁ˚
);

55 
	`nv_drm_‰ì
(
nv_fb
);

56 
	}
}

59 
	$nv_drm_‰amebuf„r_¸óã_h™dÀ
(
drm_‰amebuf„r
 *
fb
,

60 
drm_fûe
 *
fûe
, *
h™dÀ
)

62 
nv_drm_‰amebuf„r
 *
nv_fb
 = 
	`to_nv_‰amebuf„r
(
fb
);

64  
	`nv_drm_gem_h™dÀ_¸óã
(
fûe
,

65 &
nv_fb
->
nv_nvkms_mem‹y
->
ba£
,

66 
h™dÀ
);

67 
	}
}

69 
drm_‰amebuf„r_funcs
 
	gnv_‰amebuf„r_funcs
 = {

70 .
de°roy
 = 
nv_drm_‰amebuf„r_de°roy
,

71 .
	g¸óã_h™dÀ
 = 
nv_drm_‰amebuf„r_¸óã_h™dÀ
,

74 
nv_drm_‰amebuf„r
 *
	$nv_drm_‰amebuf„r_Æloc
(

75 
drm_devi˚
 *
dev
,

76 
drm_fûe
 *
fûe
,

77 
NvU32
 
h™dÀ
,

78 
NvU32
 
pixñ_f‹m©
)

80 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

81 
nv_drm_‰amebuf„r
 *
nv_fb
;

82 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
;

83 
NvKmsSurÁ˚Mem‹yF‹m©
 
f‹m©
;

87 i‡(!
	`drm_f‹m©_to_nvkms_f‹m©
(
pixñ_f‹m©
, &
f‹m©
)) {

88 
	`NV_DRM_DEV_LOG_ERR
(

89 
nv_dev
,

90 "Unsuµ‹ãd drmÖixñ f‹m© 0x%08x", 
pixñ_f‹m©
);

91  
	`ERR_PTR
(-
EINVAL
);

94 i‡((
nv_nvkms_mem‹y
 = 
	`nv_drm_gem_obje˘_nvkms_mem‹y_lookup
(

95 
dev
,

96 
fûe
,

97 
h™dÀ
)Ë=
NULL
) {

98 
	`NV_DRM_DEV_LOG_ERR
(

99 
nv_dev
,

101  
	`ERR_PTR
(-
ENOENT
);

106 
nv_fb
 = 
	`nv_drm_ˇŒoc
(1, (*nv_fb));

108 i‡(
nv_fb
 =
NULL
) {

109 
	`NV_DRM_DEV_LOG_ERR
(

110 
nv_dev
,

112 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_nvkms_mem‹y
->
ba£
);

113  
	`ERR_PTR
(-
ENOMEM
);

116 
nv_fb
->
nv_nvkms_mem‹y
 =Çv_nvkms_memory;

118  
nv_fb
;

119 
	}
}

121 
	$nv_drm_‰amebuf„r_öô
(

122 
drm_devi˚
 *
dev
,

123 
nv_drm_‰amebuf„r
 *
nv_fb
,

124 
NvU32
 
pixñ_f‹m©
)

126 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

127 
NvKmsSurÁ˚Mem‹yF‹m©
 
f‹m©
;

128 
ªt
;

130 
	`NV_DRM_WARN
(!
	`drm_f‹m©_to_nvkms_f‹m©
(
pixñ_f‹m©
, &
f‹m©
));

134 
ªt
 = 
	`drm_‰amebuf„r_öô
(
dev
, &
nv_fb
->
ba£
, &
nv_‰amebuf„r_funcs
);

136 i‡(
ªt
 != 0) {

137 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "FailedÅo initialize framebuffer object");

138  
ªt
;

143 
nv_fb
->
pSurÁ˚
 = 
nvKms
->
	`¸óãSurÁ˚
(

144 
nv_dev
->
pDevi˚
, 
nv_fb
->
nv_nvkms_mem‹y
->
pMem‹y
,

145 
f‹m©
, 
nv_fb
->
ba£
.
width
,Çv_fb->ba£.
height
,Çv_fb->ba£.
pôches
[0]);

147 i‡(
nv_fb
->
pSurÁ˚
 =
NULL
) {

148 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "FailedÅo create NvKmsKapiSurface");

149 
	`drm_‰amebuf„r_˛ónup
(&
nv_fb
->
ba£
);

150  -
EINVAL
;

154 
	}
}

156 
drm_‰amebuf„r
 *
	$nv_drm_öã∫Æ_‰amebuf„r_¸óã
(

157 
drm_devi˚
 *
dev
,

158 
drm_fûe
 *
fûe
,

159 
drm_mode_fb_cmd2
 *
cmd
)

161 
nv_drm_‰amebuf„r
 *
nv_fb
;

162 
ªt
;

171 
nv_fb
 = 
	`nv_drm_‰amebuf„r_Æloc
(
dev
, 
fûe
, 
cmd
->
h™dÀs
[0],

172 
cmd
->
pixñ_f‹m©
);

174 i‡(
	`IS_ERR
(
nv_fb
)) {

175  (
drm_‰amebuf„r
 *)
nv_fb
;

180 
	`drm_hñ≥r_mode_fûl_fb_°ru˘
(

181 #i‡
	`deföed
(
NV_DRM_HELPER_MODE_FILL_FB_STRUCT_HAS_DEV_ARG
)

182 
dev
,

184 &
nv_fb
->
ba£
,

185 
cmd
);

192 
ªt
 = 
	`nv_drm_‰amebuf„r_öô
(
dev
, 
nv_fb
, 
cmd
->
pixñ_f‹m©
);

194 i‡(
ªt
 != 0) {

195 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_fb
->
nv_nvkms_mem‹y
->
ba£
);

196 
	`nv_drm_‰ì
(
nv_fb
);

197  
	`ERR_PTR
(
ªt
);

200  &
nv_fb
->
ba£
;

201 
	}
}

	@src/nvidia-drm/nvidia-drm-fb.h

23 #i‚de‡
__NVIDIA_DRM_FB_H__


24 
	#__NVIDIA_DRM_FB_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

30 
	~<drm/drmP.h
>

31 
	~"nvidü-drm-gem-nvkms-mem‹y.h
"

32 
	~"nvkms-k≠i.h
"

34 
	snv_drm_‰amebuf„r
 {

35 
NvKmsK≠iSurÁ˚
 *
	mpSurÁ˚
;

37 
nv_drm_gem_nvkms_mem‹y
 *
	mnv_nvkms_mem‹y
;

39 
drm_‰amebuf„r
 
	mba£
;

42 
ölöe
 
nv_drm_‰amebuf„r
 *
	$to_nv_‰amebuf„r
(

43 
drm_‰amebuf„r
 *
fb
)

45 i‡(
fb
 =
NULL
) {

46  
NULL
;

48  
	`c⁄èöî_of
(
fb
, 
nv_drm_‰amebuf„r
, 
ba£
);

49 
	}
}

51 
drm_‰amebuf„r
 *
nv_drm_öã∫Æ_‰amebuf„r_¸óã
(

52 
drm_devi˚
 *
dev
,

53 
drm_fûe
 *
fûe
,

54 
drm_mode_fb_cmd2
 *
cmd
);

	@src/nvidia-drm/nvidia-drm-freebsd-lkpi.c

24 #i‚de‡
__löux__


29 
	~"../nvidü/nv-misc.h
"

30 
	~"../nvidü/os-öãrÁ˚.h
"

31 
	#NVRM


	)

32 
	~"../nvidü/nv.h
"

33 
	~"../nvidü/nv-‰ìbsd.h
"

36 
	~<löux/moduÀ.h
>

37 
	~<löux/¶ab.h
>

38 
	~<löux/îr.h
>

40 
	~"nvidü-drm-os-öãrÁ˚.h
"

41 
	~"nvidü-drm.h
"

43 
	~"nvidü-drm-c⁄·e°.h
"

45 #i‡
deföed
(
NV_DRM_AVAILABLE
)

47 
	~"nv-mm.h
"

49 #i‚de‡
__löux__


50 
	~"nv-gpu-öfo.h
"

51 
	~"nvidü-drm-drv.h
"

52 
	~"nvidü-drm-¥iv.h
"

55 
MODULE_PARM_DESC
(

56 
mode£t
,

58 
boﬁ
 
	gnv_drm_mode£t_moduÀ_∑øm
 = 
Ál£
;

59 
moduÀ_∑øm_«med
(
mode£t
, 
nv_drm_mode£t_moduÀ_∑øm
, 
boﬁ
, 0400);

61 *
	$nv_drm_ˇŒoc
(
size_t
 
nmemb
, size_à
size
)

63  
	`kzÆloc
(
nmemb
 * 
size
, 
GFP_KERNEL
);

64 
	}
}

66 
	$nv_drm_‰ì
(*
±r
)

68 i‡(
	`IS_ERR
(
±r
)) {

72 
	`k‰ì
(
±r
);

73 
	}
}

75 *
	$nv_drm_a•rötf
(c⁄° *
fmt
, ...)

77 
va_li°
 
≠
;

78 *
p
;

80 
	`va_°¨t
(
≠
, 
fmt
);

81 
p
 = 
	`kva•rötf
(
GFP_KERNEL
, 
fmt
, 
≠
);

82 
	`va_íd
(
≠
);

84  
p
;

85 
	}
}

87 #i‡
deföed
(
NVCPU_X86
Ë|| deföed(
NVCPU_X86_64
)

88 #ifde‡
__löux__


89 
	#WRITE_COMBINE_FLUSH
(Ë
asm
 vﬁ©ûe("s„n˚":::"mem‹y")

	)

91 
	#WRITE_COMBINE_FLUSH
(Ë
	`s„n˚
()

	)

93 #ñi‡
deföed
(
NVCPU_FAMILY_ARM
)

94 #i‡
deföed
(
NVCPU_ARM
)

95 
	#WRITE_COMBINE_FLUSH
(Ë{ 
	`dsb
(); 
	`ouãr_sync
(); }

	)

96 #ñi‡
deföed
(
NVCPU_AARCH64
)

97 
	#WRITE_COMBINE_FLUSH
(Ë
	`mb
()

	)

99 #ñi‡
deföed
(
NVCPU_PPC64LE
)

100 #ifde‡
__löux__


101 
	#WRITE_COMBINE_FLUSH
(Ë
asm
 vﬁ©ûe("sync":::"mem‹y")

	)

104 
	#WRITE_COMBINE_FLUSH
(Ë
__asm
 
	`__vﬁ©ûe
("sync":::"mem‹y")

	)

108 
	$nv_drm_wrôe_comböe_Êush
()

110 
	`WRITE_COMBINE_FLUSH
();

111 
	}
}

113 
	$nv_drm_lock_u£r_∑ges
(
addªss
,

114 
∑ges_cou¡
, 
∑ge
 ***
∑ges
)

116 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

117 
∑ge
 **
u£r_∑ges
;

118 c⁄° 
wrôe
 = 1;

119 c⁄° 
f‹˚
 = 0;

120 
∑ges_pö√d
;

122 
u£r_∑ges
 = 
	`nv_drm_ˇŒoc
(
∑ges_cou¡
, (*user_pages));

124 i‡(
u£r_∑ges
 =
NULL
) {

125  -
ENOMEM
;

128 
	`down_ªad
(&
mm
->
mm≠_£m
);

130 
∑ges_pö√d
 = 
	`NV_GET_USER_PAGES
(
addªss
, 
∑ges_cou¡
, 
wrôe
, 
f‹˚
,

131 
u£r_∑ges
, 
NULL
);

132 
	`up_ªad
(&
mm
->
mm≠_£m
);

134 i‡(
∑ges_pö√d
 < 0 || (Ìages_pö√d < 
∑ges_cou¡
) {

135 
Áûed
;

138 *
∑ges
 = 
u£r_∑ges
;

142 
Áûed
:

144 i‡(
∑ges_pö√d
 > 0) {

145 
i
;

147 
i
 = 0; i < 
∑ges_pö√d
; i++) {

148 
	`put_∑ge
(
u£r_∑ges
[
i
]);

152 
	`nv_drm_‰ì
(
u£r_∑ges
);

154  (
∑ges_pö√d
 < 0Ë?Öages_pö√d : -
EINVAL
;

155 
	}
}

157 
	$nv_drm_u∆ock_u£r_∑ges
(
∑ges_cou¡
, 
∑ge
 **
∑ges
)

159 
i
;

161 
i
 = 0; i < 
∑ges_cou¡
; i++) {

162 
	`£t_∑ge_dúty_lock
(
∑ges
[
i
]);

164 
	`put_∑ge
(
∑ges
[
i
]);

167 
	`nv_drm_‰ì
(
∑ges
);

168 
	}
}

170 *
	$nv_drm_vm≠
(
∑ge
 **
∑ges
, 
∑ges_cou¡
)

172  
	`vm≠
(
∑ges
, 
∑ges_cou¡
, 
VM_USERMAP
, 
PAGE_KERNEL
);

173 
	}
}

175 
	$nv_drm_vunm≠
(*
addªss
)

177 
	`vunm≠
(
addªss
);

178 
	}
}

180 
uöt64_t
 
	$nv_drm_gë_time_u£c
()

182 
timevÆ
 
tv
;

184 #ifde‡
__löux__


185 
	`do_gëtimeofday
(&
tv
);

187 
	`mi¸Ÿime
(&
tv
);

190  (((
uöt64_t
)
tv
.
tv_£c
Ë* 1000000Ë+Åv.
tv_u£c
;

191 
	}
}

195 #ifde‡
__löux__


200 
__öô
 
	$nv_löux_drm_öô
()

202  
	`nv_drm_öô
();

203 
	}
}

205 
__exô
 
	$nv_löux_drm_exô
()

207 
	`nv_drm_exô
();

208 
	}
}

210 
moduÀ_öô
(
nv_löux_drm_öô
);

211 
moduÀ_exô
(
nv_löux_drm_exô
);

213 #i‡
deföed
(
MODULE_LICENSE
)

214 
MODULE_LICENSE
("MIT");

216 #i‡
deföed
(
MODULE_INFO
)

217 
MODULE_INFO
(
suµ‹ãd
, "external");

219 #i‡
deföed
(
MODULE_VERSION
)

220 
MODULE_VERSION
(
NV_VERSION_STRING
);

231 
dev˛ass_t
 
	gnv_drm_dev˛ass
;

232 
pci_drivî
 
	gnv_drm_pci_drivî
 = {

233 .
«me
 = "nvidia-drm-pci",

234 .
	gid_èbÀ
 = 
nv_pci_èbÀ
,

235 .
	g¥obe
 = 
nv_drm_bsd_¥obe
,

252 
	gnv_globÆ_maj‹_numbî
;

253 
	$nv_drm_bsd_¥obe
(
pci_dev
 *
dev
,

254 c⁄° 
pci_devi˚_id
 *
ít
)

256 
nv_gpu_öfo_t
 
gpu_öfo
;

257 
nvidü_so·c
 *
sc
;

258 
nv_°©e_t
 *
nv
;

260 
	`NV_DRM_LOG_INFO
("pci_dev %lx ------------------------", ()
dev
);

261 
	`NV_DRM_LOG_INFO
("->víd‹ = %d", 
dev
->
víd‹
);

262 
	`NV_DRM_LOG_INFO
("->devi˚ = %d", 
dev
->
devi˚
);

263 
	`NV_DRM_LOG_INFO
("->drivî = 0x%lx", ()
dev
->
pdrv
);

270 
i
 = 0; i < 
NV_MAX_DEVICES
; i++) {

271 
sc
 = 
	`dev˛ass_gë_so·c
(
nvidü_dev˛ass
, 
i
);

272 i‡(!
sc
)

274 
nv
 = 
sc
->
nv_°©e
;

277 
	`NV_DRM_LOG_INFO
("nv->víd‹ = 0x%lx,É¡->víd‹ = 0x%lx", ()
nv
->
pci_öfo
.
víd‹_id
, ()
ít
->
víd‹
);

278 
	`NV_DRM_LOG_INFO
("nv->víd‹ = 0x%lx,É¡->víd‹ = 0x%lx", ()
nv
->
pci_öfo
.
devi˚_id
, ()
ít
->
devi˚
);

279 i‡(
nv
->
pci_öfo
.
víd‹_id
 =
ít
->
víd‹


280 && 
nv
->
pci_öfo
.
devi˚_id
 =
ít
->
devi˚
) {

284 i‡(!
nv
)

287 
	`NV_DRM_LOG_INFO
("nv = 0x%lx", ()
nv
);

288 
	`NV_DRM_LOG_INFO
("nv->gpu_id = 0x%lx", ()
nv
->
gpu_id
);

289 
gpu_öfo
.
gpu_id
 = 
nv
->gpu_id;

290 
gpu_öfo
.
os_dev_±r
 = 
dev
;

292 
	`nv_drm_ªgi°î_drm_devi˚
(&
gpu_öfo
);

295 
	}
}

297 
LKPI_DRIVER_MODULE
(
nvidü_drm
, 
nv_drm_öô
, 
nv_drm_exô
);

298 
MODULE_DEPEND
(
nvidü_drm
, 
löuxkpi
, 1, 1, 1);

299 
MODULE_DEPEND
(
nvidü_drm
, 
drmn
, 2, 2, 2);

300 
MODULE_DEPEND
(
nvidü_drm
, 
nvidü
, 1, 1, 1);

301 
MODULE_DEPEND
(
nvidü_drm
, 
nvidü_mode£t
, 1, 1, 1);

	@src/nvidia-drm/nvidia-drm-gem-nvkms-memory.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

27 
	~"nvidü-drm-gem-nvkms-mem‹y.h
"

28 
	~"nvidü-drm-io˘l.h
"

30 
	~"nv-mm.h
"

32 
	$__nv_drm_gem_nvkms_mem‹y_‰ì
(
nv_drm_gem_obje˘
 *
nv_gem
)

34 
nv_drm_devi˚
 *
nv_dev
 = 
nv_gem
->nv_dev;

35 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
 =

36 
	`to_nv_nvkms_mem‹y
(
nv_gem
);

38 i‡(
nv_nvkms_mem‹y
->
dumb_buf„r
) {

39 i‡(
nv_nvkms_mem‹y
->
pWrôeComböedIORem≠Addªss
 !
NULL
) {

40 
	`iounm≠
(
nv_nvkms_mem‹y
->
pWrôeComböedIORem≠Addªss
);

43 
nvKms
->
	`unm≠Mem‹y
(
nv_dev
->
pDevi˚
,

44 
nv_nvkms_mem‹y
->
pMem‹y
,

45 
NVKMS_KAPI_MAPPING_TYPE_USER
,

46 
nv_nvkms_mem‹y
->
pPhysiˇlAddªss
);

51 
nvKms
->
	`‰ìMem‹y
(
nv_dev
->
pDevi˚
, 
nv_nvkms_mem‹y
->
pMem‹y
);

53 
	`nv_drm_‰ì
(
nv_nvkms_mem‹y
);

54 
	}
}

56 
drm_gem_obje˘
 *
__nv_drm_gem_nvkms_¥ime_dup
(

57 
drm_devi˚
 *
dev
,

58 c⁄° 
nv_drm_gem_obje˘
 *
nv_gem_§c
);

60 c⁄° 
nv_drm_gem_obje˘_funcs
 
	gnv_gem_nvkms_mem‹y_›s
 = {

61 .
‰ì
 = 
__nv_drm_gem_nvkms_mem‹y_‰ì
,

62 .
	g¥ime_dup
 = 
__nv_drm_gem_nvkms_¥ime_dup
,

65 
	$nv_drm_dumb_¸óã
(

66 
drm_fûe
 *
fûe_¥iv
,

67 
drm_devi˚
 *
dev
, 
drm_mode_¸óã_dumb
 *
¨gs
)

69 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

70 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
;

71 
ªt
 = 0;

73 
¨gs
->
pôch
 = 
	`roundup
◊rgs->
width
 * (◊rgs->
bµ
 + 7) >> 3),

74 
nv_dev
->
pôchAlignmít
);

76 
¨gs
->
size
 =árgs->
height
 *árgs->
pôch
;

80 
¨gs
->
size
 = 
	`roundup
◊rgs->size, 
PAGE_SIZE
);

82 i‡((
nv_nvkms_mem‹y
 =

83 
	`nv_drm_ˇŒoc
(1, (*
nv_nvkms_mem‹y
))Ë=
NULL
) {

84 
ªt
 = -
ENOMEM
;

85 
Áû
;

88 i‡((
nv_nvkms_mem‹y
->
pMem‹y
 =

89 
nvKms
->
	`ÆloˇãMem‹y
(
nv_dev
->
pDevi˚
, 
¨gs
->
size
)Ë=
NULL
) {

90 
ªt
 = -
ENOMEM
;

91 
	`NV_DRM_DEV_LOG_ERR
(

92 
nv_dev
,

93 #ifde‡
__löux__


98 
¨gs
->
size
);

99 
nvkms_Æloc_mem‹y_Áûed
;

102 i‡(!
nvKms
->
	`m≠Mem‹y
(
nv_dev
->
pDevi˚
,

103 
nv_nvkms_mem‹y
->
pMem‹y
,

104 
NVKMS_KAPI_MAPPING_TYPE_USER
,

105 &
nv_nvkms_mem‹y
->
pPhysiˇlAddªss
)) {

106 
ªt
 = -
ENOMEM
;

108 
	`NV_DRM_DEV_LOG_ERR
(

109 
nv_dev
,

111 
nv_nvkms_mem‹y
->
pMem‹y
);

112 
nvkms_m≠_mem‹y_Áûed
;

115 
nv_nvkms_mem‹y
->
pWrôeComböedIORem≠Addªss
 = 
	`i‹em≠_wc
(

116 (
uöçå_t
)
nv_nvkms_mem‹y
->
pPhysiˇlAddªss
,

117 
¨gs
->
size
);

119 
nv_nvkms_mem‹y
->
dumb_buf„r
 = 
åue
;

121 
	`nv_drm_gem_obje˘_öô
(
nv_dev
,

122 &
nv_nvkms_mem‹y
->
ba£
,

123 &
nv_gem_nvkms_mem‹y_›s
,

124 
¨gs
->
size
);

126  
	`nv_drm_gem_h™dÀ_¸óã_dr›_ª„ªn˚
(
fûe_¥iv
,

127 &
nv_nvkms_mem‹y
->
ba£
,

128 &
¨gs
->
h™dÀ
);

130 
nvkms_m≠_mem‹y_Áûed
:

132 
nvKms
->
	`‰ìMem‹y
(
nv_dev
->
pDevi˚
, 
nv_nvkms_mem‹y
->
pMem‹y
);

134 
nvkms_Æloc_mem‹y_Áûed
:

135 
	`nv_drm_‰ì
(
nv_nvkms_mem‹y
);

137 
Áû
:

138  
ªt
;

139 
	}
}

141 
	$__nv_drm_nvkms_gem_obj_öô
(

142 
nv_drm_devi˚
 *
nv_dev
,

143 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
,

144 
NvKmsK≠iMem‹y
 *
pMem‹y
,

145 
uöt64_t
 
size
)

147 
nv_nvkms_mem‹y
->
pMem‹y
 =ÖMemory;

149 
nv_nvkms_mem‹y
->
pPhysiˇlAddªss
 = 
NULL
;

150 
nv_nvkms_mem‹y
->
pWrôeComböedIORem≠Addªss
 = 
NULL
;

152 
	`nv_drm_gem_obje˘_öô
(
nv_dev
,

153 &
nv_nvkms_mem‹y
->
ba£
,

154 &
nv_gem_nvkms_mem‹y_›s
,

155 
size
);

156 
	}
}

158 
	$nv_drm_gem_imp‹t_nvkms_mem‹y_io˘l
(
drm_devi˚
 *
dev
,

159 *
d©a
, 
drm_fûe
 *
fûï
)

161 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

162 
drm_nvidü_gem_imp‹t_nvkms_mem‹y_∑øms
 *
p
 = 
d©a
;

163 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
;

164 
NvKmsK≠iMem‹y
 *
pMem‹y
;

165 
ªt
;

167 i‡(!
	`drm_c‹e_check_„©uª
(
dev
, 
DRIVER_MODESET
)) {

168 
ªt
 = -
EINVAL
;

169 
Áûed
;

172 i‡((
nv_nvkms_mem‹y
 =

173 
	`nv_drm_ˇŒoc
(1, (*
nv_nvkms_mem‹y
))Ë=
NULL
) {

174 
ªt
 = -
ENOMEM
;

175 
Áûed
;

178 
pMem‹y
 = 
nvKms
->
	`imp‹tMem‹y
(
nv_dev
->
pDevi˚
,

179 
p
->
mem_size
,

180 
p
->
nvkms_∑øms_±r
,

181 
p
->
nvkms_∑øms_size
);

183 i‡(
pMem‹y
 =
NULL
) {

184 
ªt
 = -
EINVAL
;

185 
	`NV_DRM_DEV_LOG_ERR
(

186 
nv_dev
,

188 
nvkms_imp‹t_mem‹y_Áûed
;

191 
	`__nv_drm_nvkms_gem_obj_öô
(
nv_dev
, 
nv_nvkms_mem‹y
, 
pMem‹y
, 
p
->
mem_size
);

193  
	`nv_drm_gem_h™dÀ_¸óã_dr›_ª„ªn˚
(
fûï
,

194 &
nv_nvkms_mem‹y
->
ba£
,

195 &
p
->
h™dÀ
);

197 
nvkms_imp‹t_mem‹y_Áûed
:

198 
	`nv_drm_‰ì
(
nv_nvkms_mem‹y
);

200 
Áûed
:

201  
ªt
;

202 
	}
}

204 
	$nv_drm_gem_exp‹t_nvkms_mem‹y_io˘l
(
drm_devi˚
 *
dev
,

205 *
d©a
, 
drm_fûe
 *
fûï
)

207 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

208 
drm_nvidü_gem_exp‹t_nvkms_mem‹y_∑øms
 *
p
 = 
d©a
;

209 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
 = 
NULL
;

210 
ªt
 = 0;

212 i‡(!
	`drm_c‹e_check_„©uª
(
dev
, 
DRIVER_MODESET
)) {

213 
ªt
 = -
EINVAL
;

214 
d⁄e
;

217 i‡(
p
->
__∑d
 != 0) {

218 
ªt
 = -
EINVAL
;

219 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
, "Padding fields must be zeroed");

220 
d⁄e
;

223 i‡((
nv_nvkms_mem‹y
 = 
	`nv_drm_gem_obje˘_nvkms_mem‹y_lookup
(

224 
dev
,

225 
fûï
,

226 
p
->
h™dÀ
)Ë=
NULL
) {

227 
ªt
 = -
EINVAL
;

228 
	`NV_DRM_DEV_LOG_ERR
(

229 
nv_dev
,

231 
p
->
h™dÀ
);

232 
d⁄e
;

235 i‡(!
nvKms
->
	`exp‹tMem‹y
(
nv_dev
->
pDevi˚
,

236 
nv_nvkms_mem‹y
->
pMem‹y
,

237 
p
->
nvkms_∑øms_±r
,

238 
p
->
nvkms_∑øms_size
)) {

239 
ªt
 = -
EINVAL
;

240 
	`NV_DRM_DEV_LOG_ERR
(

241 
nv_dev
,

242 "FaûedÅÿexp‹àmem‹y from GEM obje˘: 0x%08x", 
p
->
h™dÀ
);

243 
d⁄e
;

246 
d⁄e
:

247 i‡(
nv_nvkms_mem‹y
 !
NULL
) {

248 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_nvkms_mem‹y
->
ba£
);

251  
ªt
;

252 
	}
}

254 
drm_gem_obje˘
 *
	$__nv_drm_gem_nvkms_¥ime_dup
(

255 
drm_devi˚
 *
dev
,

256 c⁄° 
nv_drm_gem_obje˘
 *
nv_gem_§c
)

258 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

259 c⁄° 
nv_drm_devi˚
 *
nv_dev_§c
;

260 c⁄° 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y_§c
;

261 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
;

262 
NvKmsK≠iMem‹y
 *
pMem‹y
;

264 
	`BUG_ON
(
nv_gem_§c
 =
NULL
 ||Çv_gem_§c->
›s
 !&
nv_gem_nvkms_mem‹y_›s
);

266 
nv_dev_§c
 = 
	`to_nv_devi˚
(
nv_gem_§c
->
ba£
.
dev
);

267 
nv_nvkms_mem‹y_§c
 = 
	`to_nv_nvkms_mem‹y_c⁄°
(
nv_gem_§c
);

269 i‡((
nv_nvkms_mem‹y
 =

270 
	`nv_drm_ˇŒoc
(1, (*
nv_nvkms_mem‹y
))Ë=
NULL
) {

271  
NULL
;

274 
pMem‹y
 = 
nvKms
->
	`dupMem‹y
(
nv_dev
->
pDevi˚
,

275 
nv_dev_§c
->
pDevi˚
,

276 
nv_nvkms_mem‹y_§c
->
pMem‹y
);

278 i‡(
pMem‹y
 =
NULL
) {

279 
	`NV_DRM_DEV_LOG_ERR
(

280 
nv_dev
,

282 
nvkms_dup_mem‹y_Áûed
;

285 
	`__nv_drm_nvkms_gem_obj_öô
(
nv_dev
,

286 
nv_nvkms_mem‹y
,

287 
pMem‹y
,

288 
nv_gem_§c
->
ba£
.
size
);

290  &
nv_nvkms_mem‹y
->
ba£
.base;

292 
nvkms_dup_mem‹y_Áûed
:

293 
	`nv_drm_‰ì
(
nv_nvkms_mem‹y
);

295  
NULL
;

296 
	}
}

298 
	$nv_drm_dumb_m≠_off£t
(
drm_fûe
 *
fûe
,

299 
drm_devi˚
 *
dev
, 
uöt32_t
 
h™dÀ
,

300 
uöt64_t
 *
off£t
)

302 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

303 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
;

304 
ªt
 = -
EINVAL
;

306 i‡((
nv_nvkms_mem‹y
 = 
	`nv_drm_gem_obje˘_nvkms_mem‹y_lookup
(

307 
dev
,

308 
fûe
,

309 
h™dÀ
)Ë=
NULL
) {

310 
	`NV_DRM_DEV_LOG_ERR
(

311 
nv_dev
,

313 
h™dÀ
);

314 
d⁄e
;

317 i‡(!
nv_nvkms_mem‹y
->
dumb_buf„r
) {

318 
	`NV_DRM_DEV_LOG_ERR
(

319 
nv_dev
,

321 
h™dÀ
);

322 
d⁄e
;

325 
ªt
 = 
	`nv_drm_gem_¸óã_mm≠_off£t
(&
nv_nvkms_mem‹y
->
ba£
, 
off£t
);

327 
d⁄e
:

328 i‡(
nv_nvkms_mem‹y
 !
NULL
) {

329 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_nvkms_mem‹y
->
ba£
);

332  
ªt
;

333 
	}
}

337 
	$__nv_drm_vma_Áu…
(
vm_¨ó_°ru˘
 *
vma
,

338 
vm_Áu…
 *
vmf
)

340 
addªss
 = 
	`nv_∑ge_Áu…_va
(
vmf
);

341 
drm_gem_obje˘
 *
gem
 = 
vma
->
vm_¥iv©e_d©a
;

342 
nv_drm_gem_nvkms_mem‹y
 *
nv_nvkms_mem‹y
 = 
	`to_nv_nvkms_mem‹y
(

343 
	`to_nv_gem_obje˘
(
gem
));

344 
∑ge_off£t
, 
p‚
;

345 
ªt
 = -
EINVAL
;

347 
p‚
 = ()(
uöçå_t
)
nv_nvkms_mem‹y
->
pPhysiˇlAddªss
;

348 
p‚
 >>
PAGE_SHIFT
;

350 
∑ge_off£t
 = 
vmf
->
pgoff
 - 
	`drm_vma_node_°¨t
(&
gem
->
vma_node
);

351 #ifde‡
__löux__


352 #i‡
	`deföed
(
NV_VMF_INSERT_PFN_PRESENT
)

353 ()
ªt
;

354  
	`vmf_ö£π_p‚
(
vma
, 
addªss
, 
p‚
 + 
∑ge_off£t
);

356 
ªt
 = 
	`vm_ö£π_p‚
(
vma
, 
addªss
, 
p‚
 + 
∑ge_off£t
);

358 
ªt
) {

360 -
EBUSY
:

365  
VM_FAULT_NOPAGE
;

366 -
ENOMEM
:

367  
VM_FAULT_OOM
;

369 
	`WARN_ONCE
(1, "Unh™dÀdÉº‹ i¿%s: %d\n", 
__FUNCTION__
, 
ªt
);

373  
VM_FAULT_SIGBUS
;

376 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…: (‹igöÆËp‚ = 0x%lx,Öage_off£à0x%lx", 
p‚
, 
∑ge_off£t
);

379 
∑ge_off£t
 = 
addªss
 + 
	`drm_vma_node_°¨t
(&
gem
->
vma_node
);

380 
vm_∑ge_t
 
∑ge
 = 
	`PHYS_TO_VM_PAGE
(
	`IDX_TO_OFF
(
p‚
Ë+ 
∑ge_off£t
);

381 
vm_obje˘_t
 
obj
 = 
vma
->
vm_obj
;

382 
vm_pödex_t
 
pidx
 = 
	`OFF_TO_IDX
(
addªss
);

384 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…:Ö‚ = 0x%lx,Öage_off£à0x%lx", 
p‚
, 
∑ge_off£t
);

385 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…:Çv_nvkms_mem‹y->pPhysiˇlAddªs†0x%lx", ()
nv_nvkms_mem‹y
->
pPhysiˇlAddªss
);

386 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…: IDX_TO_OFF = 0x%lx", ()
	`IDX_TO_OFF
(
p‚
 + 
∑ge_off£t
));

387 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…:Öagê0x%lx", ()
∑ge
);

388 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…: obj = 0x%lx", ()
obj
);

389 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…:Öidx = 0x%lx", ()
pidx
);

390 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_Áu…:áddªs†0x%lx", 
addªss
);

392 i‡(!
∑ge
 || !
obj
) {

393 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_fault:Öage was busy,Örobably gotÅhe wrong one");

394  
VM_FAULT_OOM
;

397 i‡(
	`vm_∑ge_busõd
(
∑ge
)) {

398 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_fault:Öage was busy,Örobably gotÅhe wrong one");

399  
VM_FAULT_OOM
;

401 i‡(
	`vm_∑ge_ö£π
(
∑ge
, 
obj
, 
pidx
)) {

402 
	`NV_DRM_LOG_INFO
("__nv_drm_vma_fault: CouldÇot insertÅheÖage");

403  
VM_FAULT_OOM
;

406 
∑ge
->
vÆid
 = 
VM_PAGE_BITS_ALL
;

407 
	`vm_∑ge_xbusy
(
∑ge
);

409 
ªt
 = 
VM_FAULT_NOPAGE
;

410 
vma
->
vm_p‚_cou¡
++;

411  
ªt
;

413 
	}
}

420 #i‡
deföed
(
NV_VM_OPS_FAULT_REMOVED_VMA_ARG
)

421 
	$nv_drm_vma_Áu…
(
vm_Áu…
 *
vmf
)

423  
	`__nv_drm_vma_Áu…
(
vmf
->
vma
, vmf);

424 
	}
}

426 
	$nv_drm_vma_Áu…
(
vm_¨ó_°ru˘
 *
vma
,

427 
vm_Áu…
 *
vmf
)

429  
	`__nv_drm_vma_Áu…
(
vma
, 
vmf
);

430 
	}
}

433 c⁄° 
vm_›î©i⁄s_°ru˘
 
	gnv_drm_gem_vma_›s
 = {

434 .
›í
 = 
drm_gem_vm_›í
,

435 .
	gÁu…
 = 
nv_drm_vma_Áu…
,

436 .
	g˛o£
 = 
drm_gem_vm_˛o£
,

	@src/nvidia-drm/nvidia-drm-gem-nvkms-memory.h

23 #i‚de‡
__NVIDIA_DRM_GEM_NVKMS_MEMORY_H__


24 
	#__NVIDIA_DRM_GEM_NVKMS_MEMORY_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

30 
	~"nvidü-drm-gem.h
"

32 
	snv_drm_gem_nvkms_mem‹y
 {

33 
nv_drm_gem_obje˘
 
	mba£
;

35 
NvKmsK≠iMem‹y
 *
	mpMem‹y
;

37 
boﬁ
 
	mdumb_buf„r
;

39 *
	mpPhysiˇlAddªss
;

40 *
	mpWrôeComböedIORem≠Addªss
;

43 
ölöe
 
nv_drm_gem_nvkms_mem‹y
 *
	$to_nv_nvkms_mem‹y
(

44 
nv_drm_gem_obje˘
 *
nv_gem
)

46 i‡(
nv_gem
 !
NULL
) {

47  
	`c⁄èöî_of
(
nv_gem
, 
nv_drm_gem_nvkms_mem‹y
, 
ba£
);

50  
NULL
;

51 
	}
}

53 
ölöe
 
nv_drm_gem_nvkms_mem‹y
 *
	$to_nv_nvkms_mem‹y_c⁄°
(

54 c⁄° 
nv_drm_gem_obje˘
 *
nv_gem
)

56 i‡(
nv_gem
 !
NULL
) {

57  
	`c⁄èöî_of
(
nv_gem
, 
nv_drm_gem_nvkms_mem‹y
, 
ba£
);

60  
NULL
;

61 
	}
}

63 
ölöe


64 
nv_drm_gem_nvkms_mem‹y
 *
	$nv_drm_gem_obje˘_nvkms_mem‹y_lookup
(

65 
drm_devi˚
 *
dev
,

66 
drm_fûe
 *
fûp
,

67 
u32
 
h™dÀ
)

69 c⁄° 
nv_drm_gem_obje˘_funcs
 
nv_gem_nvkms_mem‹y_›s
;

70 
nv_drm_gem_obje˘
 *
nv_gem
 =

71 
	`nv_drm_gem_obje˘_lookup
(
dev
, 
fûp
, 
h™dÀ
);

73 i‡(
nv_gem
 !
NULL
 &&Çv_gem->
›s
 !&
nv_gem_nvkms_mem‹y_›s
) {

74 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(
nv_gem
);

75  
NULL
;

78  
	`to_nv_nvkms_mem‹y
(
nv_gem
);

79 
	}
}

81 
nv_drm_dumb_¸óã
(

82 
drm_fûe
 *
fûe_¥iv
,

83 
drm_devi˚
 *
dev
, 
drm_mode_¸óã_dumb
 *
¨gs
);

85 
nv_drm_gem_imp‹t_nvkms_mem‹y_io˘l
(
drm_devi˚
 *
dev
,

86 *
d©a
, 
drm_fûe
 *
fûï
);

88 
nv_drm_gem_exp‹t_nvkms_mem‹y_io˘l
(
drm_devi˚
 *
dev
,

89 *
d©a
, 
drm_fûe
 *
fûï
);

91 
nv_drm_dumb_m≠_off£t
(
drm_fûe
 *
fûe
,

92 
drm_devi˚
 *
dev
, 
uöt32_t
 
h™dÀ
,

93 
uöt64_t
 *
off£t
);

95 
drm_gem_obje˘
 *
nv_drm_gem_nvkms_¥ime_imp‹t
(

96 
drm_devi˚
 *
dev
,

97 
drm_gem_obje˘
 *
gem
);

99 c⁄° 
vm_›î©i⁄s_°ru˘
 
nv_drm_gem_vma_›s
;

	@src/nvidia-drm/nvidia-drm-gem-user-memory.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_AVAILABLE
)

27 
	~"nvidü-drm-gem-u£r-mem‹y.h
"

28 
	~"nvidü-drm-io˘l.h
"

30 
ölöe


31 
	$__nv_drm_gem_u£r_mem‹y_‰ì
(
nv_drm_gem_obje˘
 *
nv_gem
)

33 
nv_drm_gem_u£r_mem‹y
 *
nv_u£r_mem‹y
 = 
	`to_nv_u£r_mem‹y
(
nv_gem
);

35 
	`nv_drm_u∆ock_u£r_∑ges
(
nv_u£r_mem‹y
->
∑ges_cou¡
,

36 
nv_u£r_mem‹y
->
∑ges
);

38 
	`nv_drm_‰ì
(
nv_u£r_mem‹y
);

39 
	}
}

41 
sg_èbÀ
 *
	$__nv_drm_gem_u£r_mem‹y_¥ime_gë_sg_èbÀ
(

42 
nv_drm_gem_obje˘
 *
nv_gem
)

44 
nv_drm_gem_u£r_mem‹y
 *
nv_u£r_mem‹y
 = 
	`to_nv_u£r_mem‹y
(
nv_gem
);

46  
	`drm_¥ime_∑ges_to_sg
(
nv_u£r_mem‹y
->
∑ges
,

47 
nv_u£r_mem‹y
->
∑ges_cou¡
);

48 
	}
}

50 *
	$__nv_drm_gem_u£r_mem‹y_¥ime_vm≠
(

51 
nv_drm_gem_obje˘
 *
nv_gem
)

53 
nv_drm_gem_u£r_mem‹y
 *
nv_u£r_mem‹y
 = 
	`to_nv_u£r_mem‹y
(
nv_gem
);

55  
	`nv_drm_vm≠
(
nv_u£r_mem‹y
->
∑ges
,

56 
nv_u£r_mem‹y
->
∑ges_cou¡
);

57 
	}
}

59 
	$__nv_drm_gem_u£r_mem‹y_¥ime_vunm≠
(

60 
nv_drm_gem_obje˘
 *
gem
,

61 *
addªss
)

63 
	`nv_drm_vunm≠
(
addªss
);

64 
	}
}

66 
nv_drm_gem_obje˘_funcs
 
	g__nv_gem_u£r_mem‹y_›s
 = {

67 .
‰ì
 = 
__nv_drm_gem_u£r_mem‹y_‰ì
,

68 .
	g¥ime_gë_sg_èbÀ
 = 
__nv_drm_gem_u£r_mem‹y_¥ime_gë_sg_èbÀ
,

69 .
	g¥ime_vm≠
 = 
__nv_drm_gem_u£r_mem‹y_¥ime_vm≠
,

70 .
	g¥ime_vunm≠
 = 
__nv_drm_gem_u£r_mem‹y_¥ime_vunm≠
,

73 
	$nv_drm_gem_imp‹t_u£r•a˚_mem‹y_io˘l
(
drm_devi˚
 *
dev
,

74 *
d©a
, 
drm_fûe
 *
fûï
)

76 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

78 
drm_nvidü_gem_imp‹t_u£r•a˚_mem‹y_∑øms
 *
∑øms
 = 
d©a
;

79 
nv_drm_gem_u£r_mem‹y
 *
nv_u£r_mem‹y
;

81 
∑ge
 **
∑ges
 = 
NULL
;

82 
∑ges_cou¡
 = 0;

84 
ªt
 = 0;

86 i‡((
∑øms
->
size
 % 
PAGE_SIZE
) != 0) {

87 
	`NV_DRM_DEV_LOG_ERR
(

88 
nv_dev
,

89 #ifde‡
__löux__


95 
∑øms
->
addªss
);

96  -
EINVAL
;

99 
∑ges_cou¡
 = 
∑øms
->
size
 / 
PAGE_SIZE
;

101 
ªt
 = 
	`nv_drm_lock_u£r_∑ges
(
∑øms
->
addªss
, 
∑ges_cou¡
, &
∑ges
);

103 i‡(
ªt
 != 0) {

104 
	`NV_DRM_DEV_LOG_ERR
(

105 
nv_dev
,

106 #ifde‡
__löux__


111 
∑øms
->
addªss
, 
ªt
);

112  
ªt
;

115 i‡((
nv_u£r_mem‹y
 =

116 
	`nv_drm_ˇŒoc
(1, (*
nv_u£r_mem‹y
))Ë=
NULL
) {

117 
ªt
 = -
ENOMEM
;

118 
Áûed
;

121 
nv_u£r_mem‹y
->
∑ges
 =Öages;

122 
nv_u£r_mem‹y
->
∑ges_cou¡
 =Öages_count;

124 
	`nv_drm_gem_obje˘_öô
(
nv_dev
,

125 &
nv_u£r_mem‹y
->
ba£
,

126 &
__nv_gem_u£r_mem‹y_›s
,

127 
∑øms
->
size
);

129  
	`nv_drm_gem_h™dÀ_¸óã_dr›_ª„ªn˚
(
fûï
,

130 &
nv_u£r_mem‹y
->
ba£
,

131 &
∑øms
->
h™dÀ
);

133 
Áûed
:

134 
	`nv_drm_u∆ock_u£r_∑ges
(
∑ges_cou¡
, 
∑ges
);

136  
ªt
;

137 
	}
}

	@src/nvidia-drm/nvidia-drm-gem-user-memory.h

23 #i‚de‡
__NVIDIA_DRM_GEM_USER_MEMORY_H__


24 
	#__NVIDIA_DRM_GEM_USER_MEMORY_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_AVAILABLE
)

30 
	~"nvidü-drm-gem.h
"

32 
	snv_drm_gem_u£r_mem‹y
 {

33 
nv_drm_gem_obje˘
 
	mba£
;

34 
∑ge
 **
	m∑ges
;

35 
	m∑ges_cou¡
;

38 
ölöe
 
nv_drm_gem_u£r_mem‹y
 *
	$to_nv_u£r_mem‹y
(

39 
nv_drm_gem_obje˘
 *
nv_gem
)

41 i‡(
nv_gem
 !
NULL
) {

42  
	`c⁄èöî_of
(
nv_gem
, 
nv_drm_gem_u£r_mem‹y
, 
ba£
);

45  
NULL
;

46 
	}
}

48 
nv_drm_gem_imp‹t_u£r•a˚_mem‹y_io˘l
(
drm_devi˚
 *
dev
,

49 *
d©a
, 
drm_fûe
 *
fûï
);

	@src/nvidia-drm/nvidia-drm-gem.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_AVAILABLE
)

27 
	~"nvidü-drm-¥iv.h
"

28 
	~"nvidü-drm-io˘l.h
"

29 
	~"nvidü-drm-¥ime-„n˚.h
"

30 
	~"nvidü-drm-gem.h
"

31 
	~"nvidü-drm-gem-nvkms-mem‹y.h
"

33 #i‡
deföed
(
NV_DMA_BUF_OWNER_PRESENT
)

34 
	~"löux/dma-buf.h
"

37 
	$nv_drm_gem_‰ì
(
drm_gem_obje˘
 *
gem
)

39 
drm_devi˚
 *
dev
 = 
gem
->dev;

40 
nv_drm_gem_obje˘
 *
nv_gem
 = 
	`to_nv_gem_obje˘
(
gem
);

42 
	`WARN_ON
(!
	`muãx_is_locked
(&
dev
->
°ru˘_muãx
));

46 
	`drm_gem_obje˘_ªÀa£
(&
nv_gem
->
ba£
);

48 #i‡
	`deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

49 
	`ª£rv©i⁄_obje˘_föi
(&
nv_gem
->
ªsv
);

52 
nv_gem
->
›s
->
	`‰ì
(nv_gem);

53 
	}
}

55 
drm_gem_obje˘
 *
	$nv_drm_gem_¥ime_imp‹t
(
drm_devi˚
 *
dev
,

56 
dma_buf
 *dma_buf)

58 #i‡
	`deföed
(
NV_DMA_BUF_OWNER_PRESENT
)

59 
drm_gem_obje˘
 *
gem_d°
;

60 
nv_drm_gem_obje˘
 *
nv_gem_§c
;

62 i‡(
dma_buf
->
ow√r
 =
dev
->
drivî
->
f›s
->owner) {

63 
nv_gem_§c
 = 
	`to_nv_gem_obje˘
(
dma_buf
->
¥iv
);

65 i‡(
nv_gem_§c
->
ba£
.
dev
 != dev &&

66 
nv_gem_§c
->
›s
->
¥ime_dup
 !
NULL
) {

73 
gem_d°
 = 
nv_gem_§c
->
›s
->
	`¥ime_dup
(
dev
,Çv_gem_src);

75 i‡(
gem_d°
)

76  
gem_d°
;

81  
	`drm_gem_¥ime_imp‹t
(
dev
, 
dma_buf
);

82 
	}
}

84 
sg_èbÀ
 *
	$nv_drm_gem_¥ime_gë_sg_èbÀ
(
drm_gem_obje˘
 *
gem
)

86 
nv_drm_gem_obje˘
 *
nv_gem
 = 
	`to_nv_gem_obje˘
(
gem
);

88 i‡(
nv_gem
->
›s
->
¥ime_gë_sg_èbÀ
 !
NULL
) {

89  
nv_gem
->
›s
->
	`¥ime_gë_sg_èbÀ
(nv_gem);

92  
	`ERR_PTR
(-
ENOTSUPP
);

93 
	}
}

95 *
	$nv_drm_gem_¥ime_vm≠
(
drm_gem_obje˘
 *
gem
)

97 
nv_drm_gem_obje˘
 *
nv_gem
 = 
	`to_nv_gem_obje˘
(
gem
);

99 i‡(
nv_gem
->
›s
->
¥ime_vm≠
 !
NULL
) {

100  
nv_gem
->
›s
->
	`¥ime_vm≠
(nv_gem);

103  
	`ERR_PTR
(-
ENOTSUPP
);

104 
	}
}

106 
	$nv_drm_gem_¥ime_vunm≠
(
drm_gem_obje˘
 *
gem
, *
addªss
)

108 
nv_drm_gem_obje˘
 *
nv_gem
 = 
	`to_nv_gem_obje˘
(
gem
);

110 i‡(
nv_gem
->
›s
->
¥ime_vunm≠
 !
NULL
) {

111 
nv_gem
->
›s
->
	`¥ime_vunm≠
“v_gem, 
addªss
);

113 
	}
}

115 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

116 
ª£rv©i⁄_obje˘
* 
	$nv_drm_gem_¥ime_ªs_obj
(
drm_gem_obje˘
 *
obj
)

118 
nv_drm_gem_obje˘
 *
nv_gem
 = 
	`to_nv_gem_obje˘
(
obj
);

120  &
nv_gem
->
ªsv
;

121 
	}
}

	@src/nvidia-drm/nvidia-drm-gem.h

23 #i‚de‡
__NVIDIA_DRM_GEM_H__


24 
	#__NVIDIA_DRM_GEM_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_AVAILABLE
)

30 
	~"nvidü-drm-¥iv.h
"

32 
	~<drm/drmP.h
>

33 
	~"nvkms-k≠i.h
"

35 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

37 
	~"nvidü-dma-„n˚-hñ≥r.h
"

41 
	gnv_drm_gem_obje˘
;

43 
	snv_drm_gem_obje˘_funcs
 {

44 (*
	m‰ì
)(
nv_drm_gem_obje˘
 *
	mnv_gem
);

45 
	msg_èbÀ
 *(*
	m¥ime_gë_sg_èbÀ
)(
nv_drm_gem_obje˘
 *
	mnv_gem
);

46 *(*
	m¥ime_vm≠
)(
nv_drm_gem_obje˘
 *
	mnv_gem
);

47 (*
	m¥ime_vunm≠
)(
nv_drm_gem_obje˘
 *
	mnv_gem
, *
	maddªss
);

48 
	mdrm_gem_obje˘
 *(*
	m¥ime_dup
)(
drm_devi˚
 *
	mdev
,

49 c⁄° 
nv_drm_gem_obje˘
 *
	mnv_gem_§c
);

52 
	snv_drm_gem_obje˘
 {

53 
drm_gem_obje˘
 
	mba£
;

55 
nv_drm_devi˚
 *
	mnv_dev
;

56 c⁄° 
nv_drm_gem_obje˘_funcs
 *
	m›s
;

58 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

59 
ª£rv©i⁄_obje˘
 
	mªsv
;

63 
ölöe
 
nv_drm_gem_obje˘
 *
	$to_nv_gem_obje˘
(

64 
drm_gem_obje˘
 *
gem
)

66 i‡(
gem
 !
NULL
) {

67  
	`c⁄èöî_of
(
gem
, 
nv_drm_gem_obje˘
, 
ba£
);

70  
NULL
;

71 
	}
}

73 
ölöe
 
	$nv_drm_gem_h™dÀ_¸óã_dr›_ª„ªn˚
(

74 
drm_fûe
 *
fûe_¥iv
,

75 
nv_drm_gem_obje˘
 *
nv_gem
,

76 
uöt32_t
 *
h™dÀ
)

78 
ªt
 = 
	`drm_gem_h™dÀ_¸óã
(
fûe_¥iv
, &
nv_gem
->
ba£
, 
h™dÀ
);

82 
	`drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_gem
->
ba£
);

84  
ªt
;

85 
	}
}

87 
ölöe


88 
	$nv_drm_gem_obje˘_öô
(
nv_drm_devi˚
 *
nv_dev
,

89 
nv_drm_gem_obje˘
 *
nv_gem
,

90 c⁄° 
nv_drm_gem_obje˘_funcs
 * c⁄° 
›s
,

91 
size_t
 
size
)

93 
drm_devi˚
 *
dev
 = 
nv_dev
->dev;

95 
nv_gem
->
nv_dev
 =Çv_dev;

96 
nv_gem
->
›s
 = ops;

100 
	`drm_gem_¥iv©e_obje˘_öô
(
dev
, &
nv_gem
->
ba£
, 
size
);

102 #i‡
	`deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

103 
	`ª£rv©i⁄_obje˘_öô
(&
nv_gem
->
ªsv
);

105 
	}
}

107 
ölöe
 
	$nv_drm_gem_¸óã_mm≠_off£t
(

108 
nv_drm_gem_obje˘
 *
nv_gem
,

109 
uöt64_t
 *
off£t
)

111 
ªt
;

113 i‡((
ªt
 = 
	`drm_gem_¸óã_mm≠_off£t
(&
nv_gem
->
ba£
)) < 0) {

114 
	`NV_DRM_DEV_LOG_ERR
(

115 
nv_gem
->
nv_dev
,

117 
ªt
);

118 
d⁄e
;

121 *
off£t
 = 
	`drm_vma_node_off£t_addr
(&
nv_gem
->
ba£
.
vma_node
);

123 
d⁄e
:

125  
ªt
;

126 
	}
}

128 
nv_drm_gem_‰ì
(
drm_gem_obje˘
 *
gem
);

130 
ölöe
 
nv_drm_gem_obje˘
 *
	$nv_drm_gem_obje˘_lookup
(

131 
drm_devi˚
 *
dev
,

132 
drm_fûe
 *
fûp
,

133 
u32
 
h™dÀ
)

135 #i‡
	`deföed
(
NV_DRM_GEM_OBJECT_LOOKUP_PRESENT
)

136 #i‡(
NV_DRM_GEM_OBJECT_LOOKUP_ARGUMENT_COUNT
 == 3)

137  
	`to_nv_gem_obje˘
(
	`drm_gem_obje˘_lookup
(
dev
, 
fûp
, 
h™dÀ
));

138 #ñi‡(
NV_DRM_GEM_OBJECT_LOOKUP_ARGUMENT_COUNT
 == 2)

139  
	`to_nv_gem_obje˘
(
	`drm_gem_obje˘_lookup
(
fûp
, 
h™dÀ
));

146 
	}
}

148 
ölöe
 

149 
	$nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(
nv_drm_gem_obje˘
 *
nv_gem
)

151 
	`drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_gem
->
ba£
);

152 
	}
}

154 
ölöe
 

155 
	$nv_drm_gem_obje˘_uƒe„ªn˚
(
nv_drm_gem_obje˘
 *
nv_gem
)

157 
	`drm_gem_obje˘_uƒe„ªn˚
(&
nv_gem
->
ba£
);

158 
	}
}

160 
ölöe
 
	$nv_drm_gem_h™dÀ_¸óã
(
drm_fûe
 *
fûp
,

161 
nv_drm_gem_obje˘
 *
nv_gem
,

162 
uöt32_t
 *
h™dÀ
)

164  
	`drm_gem_h™dÀ_¸óã
(
fûp
, &
nv_gem
->
ba£
, 
h™dÀ
);

165 
	}
}

167 
drm_gem_obje˘
 *
nv_drm_gem_¥ime_imp‹t
(
drm_devi˚
 *
dev
,

168 
dma_buf
 *dma_buf);

170 
sg_èbÀ
 *
nv_drm_gem_¥ime_gë_sg_èbÀ
(
drm_gem_obje˘
 *
gem
);

172 *
nv_drm_gem_¥ime_vm≠
(
drm_gem_obje˘
 *
gem
);

174 
nv_drm_gem_¥ime_vunm≠
(
drm_gem_obje˘
 *
gem
, *
addªss
);

176 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

177 
ª£rv©i⁄_obje˘
* 
nv_drm_gem_¥ime_ªs_obj
(
drm_gem_obje˘
 *
obj
);

	@src/nvidia-drm/nvidia-drm-helper.c

30 
	~"nvidü-drm-hñ≥r.h
"

32 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

34 
	~<drm/drmP.h
>

72 
	$nv_drm_©omic_£t_mode_f‹_¸tc
(
drm_¸tc_°©e
 *
°©e
,

73 
drm_di•œy_mode
 *
mode
)

75 #i‡
	`deföed
(
NV_DRM_ATOMIC_SET_MODE_FOR_CRTC
)

76  
	`drm_©omic_£t_mode_f‹_¸tc
(
°©e
, 
mode
);

79 i‡(
mode
 && 
	`memcmp
(&
°©e
->mode, mode, (*mode)) == 0)

82 i‡(
mode
) {

83 
	`drm_mode_c›y
(&
°©e
->
mode
, mode);

84 
°©e
->
íabÀ
 = 
åue
;

85 
	`DRM_DEBUG_ATOMIC
("Set [MODE:%s] for CRTC state %p\n",

86 
mode
->
«me
, 
°©e
);

88 
	`mem£t
(&
°©e
->
mode
, 0, (state->mode));

89 
°©e
->
íabÀ
 = 
Ál£
;

90 
	`DRM_DEBUG_ATOMIC
("Set [NOMODE] for CRTC state %p\n",

91 
°©e
);

96 
	}
}

134 
	$nv_drm_©omic_˛ón_ﬁd_fb
(
drm_devi˚
 *
dev
,

135 
∂™e_mask
,

136 
ªt
)

138 #i‡
	`deföed
(
NV_DRM_ATOMIC_CLEAN_OLD_FB
)

139  
	`drm_©omic_˛ón_ﬁd_fb
(
dev
, 
∂™e_mask
, 
ªt
);

141 
drm_∂™e
 *
∂™e
;

148 
	`drm_f‹_óch_∂™e_mask
(
∂™e
, 
dev
, 
∂™e_mask
) {

149 i‡(
ªt
 == 0) {

150 
drm_‰amebuf„r
 *
√w_fb
 = 
∂™e
->
°©e
->
fb
;

151 i‡(
√w_fb
)

152 
	`drm_‰amebuf„r_ª„ªn˚
(
√w_fb
);

153 
∂™e
->
fb
 = 
√w_fb
;

154 
∂™e
->
¸tc
 =Öœ√->
°©e
->crtc;

156 i‡(
∂™e
->
ﬁd_fb
)

157 
	`drm_‰amebuf„r_uƒe„ªn˚
(
∂™e
->
ﬁd_fb
);

159 
∂™e
->
ﬁd_fb
 = 
NULL
;

162 
	}
}

205 
	$nv_drm_©omic_hñ≥r_dißbÀ_Æl
(
drm_devi˚
 *
dev
,

206 
drm_mode£t_acquúe_˘x
 *
˘x
)

208 #i‡
	`deföed
(
NV_DRM_ATOMIC_HELPER_DISABLE_ALL_PRESENT
)

209  
	`drm_©omic_hñ≥r_dißbÀ_Æl
(
dev
, 
˘x
);

211 
drm_©omic_°©e
 *
°©e
;

212 
drm_c⁄√˘‹
 *
c⁄n
;

213 
îr
;

215 
°©e
 = 
	`drm_©omic_°©e_Æloc
(
dev
);

216 i‡(!
°©e
)

217  -
ENOMEM
;

219 
°©e
->
acquúe_˘x
 = 
˘x
;

221 
	`li°_f‹_óch_íåy
(
c⁄n
, &
dev
->
mode_c⁄fig
.
c⁄√˘‹_li°
, 
hód
) {

222 
drm_¸tc
 *
¸tc
 = 
c⁄n
->
°©e
->crtc;

223 
drm_¸tc_°©e
 *
¸tc_°©e
;

225 i‡(!
¸tc
 || 
c⁄n
->
dpms
 !
DRM_MODE_DPMS_ON
)

228 
¸tc_°©e
 = 
	`drm_©omic_gë_¸tc_°©e
(
°©e
, 
¸tc
);

229 i‡(
	`IS_ERR
(
¸tc_°©e
)) {

230 
îr
 = 
	`PTR_ERR
(
¸tc_°©e
);

231 
‰ì
;

234 
¸tc_°©e
->
a˘ive
 = 
Ál£
;

237 
îr
 = 
	`drm_©omic_commô
(
°©e
);

239 
‰ì
:

240 i‡(
îr
 < 0)

241 #ifde‡
__löux__


242 
	`drm_©omic_°©e_‰ì
(
°©e
);

244 
	`drm_©omic_°©e_put
(
°©e
);

246  
îr
;

248 
	}
}

	@src/nvidia-drm/nvidia-drm-helper.h

23 #i‚de‡
__NVIDIA_DRM_HELPER_H__


24 
	#__NVIDIA_DRM_HELPER_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_AVAILABLE
)

30 
	~<drm/drmP.h
>

37 
ölöe
 
	$nv_drm_dev_‰ì
(
drm_devi˚
 *
dev
)

39 #i‡
	`deföed
(
NV_DRM_DEV_UNREF_PRESENT
)

40 
	`drm_dev_uƒef
(
dev
);

42 
	`drm_dev_‰ì
(
dev
);

44 
	}
}

46 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

48 
	~<drm/drm_©omic.h
>

49 
	~<drm/drm_©omic_hñ≥r.h
>

51 
nv_drm_©omic_£t_mode_f‹_¸tc
(
drm_¸tc_°©e
 *
°©e
,

52 
drm_di•œy_mode
 *
mode
);

54 
nv_drm_©omic_˛ón_ﬁd_fb
(
drm_devi˚
 *
dev
,

55 
∂™e_mask
,

56 
ªt
);

58 
nv_drm_©omic_hñ≥r_dißbÀ_Æl
(
drm_devi˚
 *
dev
,

59 
drm_mode£t_acquúe_˘x
 *
˘x
);

61 
ölöe
 
	$nv_drm_©omic_hñ≥r_£t_c⁄fig
(

62 
drm_mode_£t
 *
£t
,

63 
drm_mode£t_acquúe_˘x
 *
˘x
)

65 #i‡
	`deföed
(
NV_DRM_ATOMIC_HELPER_SET_CONFIG_PRESENT
)

66 #i‡
	`deföed
(
NV_DRM_ATOMIC_HELPER_SET_CONFIG_HAS_CTX_ARG
)

67  
	`drm_©omic_hñ≥r_£t_c⁄fig
(
£t
, 
˘x
);

69  
	`drm_©omic_hñ≥r_£t_c⁄fig
(
£t
);

74 
	}
}

128 #i‡!
deföed
(
NV_DRM_OLD_ATOMIC_STATE_ITERATORS_PRESENT
)

129 
	#nv_drm_f‹_óch_c⁄√˘‹_ö_°©e
(
__°©e
, \

130 
c⁄√˘‹
, 
c⁄√˘‹_°©e
, 
__i
) \

131 (
__i
) = 0; \

132 (
__i
Ë< (
__°©e
)->
num_c⁄√˘‹
 && \

133 ((
c⁄√˘‹
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
±r
, \

134 (
c⁄√˘‹_°©e
Ë(
__°©e
)->
c⁄√˘‹s
[
__i
].
°©e
, 1); \

135 (
__i
)++) \

136 
	`f‹_óch_if
 (
c⁄√˘‹
)

	)

138 
	#nv_drm_f‹_óch_c⁄√˘‹_ö_°©e
(
__°©e
, \

139 
c⁄√˘‹
, 
c⁄√˘‹_°©e
, 
__i
) \

140 
	`f‹_óch_c⁄√˘‹_ö_°©e
(
__°©e
, 
c⁄√˘‹
, 
c⁄√˘‹_°©e
, 
__i
)

	)

156 #i‡!
deföed
(
NV_DRM_OLD_ATOMIC_STATE_ITERATORS_PRESENT
)

157 
	#nv_drm_f‹_óch_¸tc_ö_°©e
(
__°©e
, 
¸tc
, 
¸tc_°©e
, 
__i
) \

158 (
__i
) = 0; \

159 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_¸tc
 && \

160 ((
¸tc
Ë(
__°©e
)->
¸tcs
[
__i
].
±r
, \

161 (
¸tc_°©e
Ë(
__°©e
)->
¸tcs
[
__i
].
°©e
, 1); \

162 (
__i
)++) \

163 
	`f‹_óch_if
 (
¸tc_°©e
)

	)

165 
	#nv_drm_f‹_óch_¸tc_ö_°©e
(
__°©e
, 
¸tc
, 
¸tc_°©e
, 
__i
) \

166 
	`f‹_óch_¸tc_ö_°©e
(
__°©e
, 
¸tc
, 
¸tc_°©e
, 
__i
)

	)

181 #i‡!
deföed
(
NV_DRM_OLD_ATOMIC_STATE_ITERATORS_PRESENT
)

182 
	#nv_drm_f‹_óch_∂™e_ö_°©e
(
__°©e
, 
∂™e
, 
∂™e_°©e
, 
__i
) \

183 (
__i
) = 0; \

184 (
__i
Ë< (
__°©e
)->
dev
->
mode_c⁄fig
.
num_tŸÆ_∂™e
 && \

185 ((
∂™e
Ë(
__°©e
)->
∂™es
[
__i
].
±r
, \

186 (
∂™e_°©e
Ë(
__°©e
)->
∂™es
[
__i
].
°©e
, 1); \

187 (
__i
)++) \

188 
	`f‹_óch_if
 (
∂™e_°©e
)

	)

190 
	#nv_drm_f‹_óch_∂™e_ö_°©e
(
__°©e
, 
∂™e
, 
∂™e_°©e
, 
__i
) \

191 
	`f‹_óch_∂™e_ö_°©e
(
__°©e
, 
∂™e
, 
∂™e_°©e
, 
__i
)

	)

194 
ölöe
 
drm_¸tc
 *
	$nv_drm_¸tc_föd
(
drm_devi˚
 *
dev
,

195 
uöt32_t
 
id
)

197 #i‡
	`deföed
(
NV_DRM_MODE_OBJECT_FIND_HAS_FILE_PRIV_ARG
)

198  
	`drm_¸tc_föd
(
dev
, 
NULL
 , 
id
);

200  
	`drm_¸tc_föd
(
dev
, 
id
);

202 
	}
}

204 
ölöe
 
drm_ícodî
 *
	$nv_drm_ícodî_föd
(
drm_devi˚
 *
dev
,

205 
uöt32_t
 
id
)

207 #i‡
	`deföed
(
NV_DRM_MODE_OBJECT_FIND_HAS_FILE_PRIV_ARG
)

208  
	`drm_ícodî_föd
(
dev
, 
NULL
 , 
id
);

210  
	`drm_ícodî_föd
(
dev
, 
id
);

212 
	}
}

214 
ölöe
 

215 
	$nv_drm_c⁄√˘‹_©èch_ícodî
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

216 
drm_ícodî
 *
ícodî
)

218 #i‡
	`deföed
(
NV_DRM_CONNECTOR_FUNCS_HAVE_MODE_IN_NAME
)

219  
	`drm_mode_c⁄√˘‹_©èch_ícodî
(
c⁄√˘‹
, 
ícodî
);

221  
	`drm_c⁄√˘‹_©èch_ícodî
(
c⁄√˘‹
, 
ícodî
);

223 
	}
}

225 
ölöe
 

226 
	$nv_drm_c⁄√˘‹_upd©e_edid_¥›îty
(
drm_c⁄√˘‹
 *
c⁄√˘‹
,

227 c⁄° 
edid
 *edid)

229 #i‡
	`deföed
(
NV_DRM_CONNECTOR_FUNCS_HAVE_MODE_IN_NAME
)

230  
	`drm_mode_c⁄√˘‹_upd©e_edid_¥›îty
(
c⁄√˘‹
, 
edid
);

232  
	`drm_c⁄√˘‹_upd©e_edid_¥›îty
(
c⁄√˘‹
, 
edid
);

234 
	}
}

	@src/nvidia-drm/nvidia-drm-ioctl.h

23 #i‚de‡
_UAPI_NVIDIA_DRM_IOCTL_H_


24 
	#_UAPI_NVIDIA_DRM_IOCTL_H_


	)

26 
	~<drm/drm.h
>

32 
	#DRM_NVIDIA_GET_CRTC_CRC32
 0x00

	)

33 
	#DRM_NVIDIA_GEM_IMPORT_NVKMS_MEMORY
 0x01

	)

34 
	#DRM_NVIDIA_GEM_IMPORT_USERSPACE_MEMORY
 0x02

	)

35 
	#DRM_NVIDIA_GET_DEV_INFO
 0x03

	)

36 
	#DRM_NVIDIA_FENCE_SUPPORTED
 0x04

	)

37 
	#DRM_NVIDIA_FENCE_CONTEXT_CREATE
 0x05

	)

38 
	#DRM_NVIDIA_GEM_FENCE_ATTACH
 0x06

	)

39 
	#DRM_NVIDIA_GET_CLIENT_CAPABILITY
 0x08

	)

40 
	#DRM_NVIDIA_GEM_EXPORT_NVKMS_MEMORY
 0x09

	)

42 
	#DRM_IOCTL_NVIDIA_GEM_IMPORT_NVKMS_MEMORY
 \

43 
	`DRM_IOWR
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_GEM_IMPORT_NVKMS_MEMORY
), \

44 
drm_nvidü_gem_imp‹t_nvkms_mem‹y_∑øms
)

	)

46 
	#DRM_IOCTL_NVIDIA_GEM_IMPORT_USERSPACE_MEMORY
 \

47 
	`DRM_IOWR
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_GEM_IMPORT_USERSPACE_MEMORY
), \

48 
drm_nvidü_gem_imp‹t_u£r•a˚_mem‹y_∑øms
)

	)

50 
	#DRM_IOCTL_NVIDIA_GET_DEV_INFO
 \

51 
	`DRM_IOWR
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_GET_DEV_INFO
), \

52 
drm_nvidü_gë_dev_öfo_∑øms
)

	)

60 #i‡
deföed
(
NV_LINUX
)

61 
	#DRM_IOCTL_NVIDIA_FENCE_SUPPORTED
 \

62 
	`DRM_IO
(
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_FENCE_SUPPORTED
)

	)

64 
	#DRM_IOCTL_NVIDIA_FENCE_SUPPORTED
 0

	)

67 
	#DRM_IOCTL_NVIDIA_FENCE_CONTEXT_CREATE
 \

68 
	`DRM_IOWR
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_FENCE_CONTEXT_CREATE
), \

69 
drm_nvidü_„n˚_c⁄ãxt_¸óã_∑øms
)

	)

71 
	#DRM_IOCTL_NVIDIA_GEM_FENCE_ATTACH
 \

72 
	`DRM_IOW
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_GEM_FENCE_ATTACH
), \

73 
drm_nvidü_gem_„n˚_©èch_∑øms
)

	)

75 
	#DRM_IOCTL_NVIDIA_GET_CLIENT_CAPABILITY
 \

76 
	`DRM_IOWR
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_GET_CLIENT_CAPABILITY
), \

77 
drm_nvidü_gë_˛õ¡_ˇ∑bûôy_∑øms
)

	)

79 
	#DRM_IOCTL_NVIDIA_GET_CRTC_CRC32
 \

80 
	`DRM_IOWR
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_GET_CRTC_CRC32
), \

81 
drm_nvidü_gë_¸tc_¸c32_∑øms
)

	)

83 
	#DRM_IOCTL_NVIDIA_GEM_EXPORT_NVKMS_MEMORY
 \

84 
	`DRM_IOWR
((
DRM_COMMAND_BASE
 + 
DRM_NVIDIA_GEM_EXPORT_NVKMS_MEMORY
), \

85 
drm_nvidü_gem_exp‹t_nvkms_mem‹y_∑øms
)

	)

87 
	sdrm_nvidü_gem_imp‹t_nvkms_mem‹y_∑øms
 {

88 
uöt64_t
 
	mmem_size
;

90 
uöt64_t
 
	mnvkms_∑øms_±r
;

91 
uöt64_t
 
	mnvkms_∑øms_size
;

93 
uöt32_t
 
	mh™dÀ
;

95 
uöt32_t
 
	m__∑d
;

98 
	sdrm_nvidü_gem_imp‹t_u£r•a˚_mem‹y_∑øms
 {

99 
uöt64_t
 
	msize
;

100 
uöt64_t
 
	maddªss
;

101 
uöt32_t
 
	mh™dÀ
;

104 
	sdrm_nvidü_gë_dev_öfo_∑øms
 {

105 
uöt32_t
 
	mgpu_id
;

106 
uöt32_t
 
	m¥im¨y_ödex
;

109 
	sdrm_nvidü_„n˚_c⁄ãxt_¸óã_∑øms
 {

110 
uöt32_t
 
	mh™dÀ
;

112 
uöt32_t
 
	mödex
;

113 
uöt64_t
 
	msize
;

116 
uöt64_t
 
	mimp‹t_mem_nvkms_∑øms_±r
;

117 
uöt64_t
 
	mimp‹t_mem_nvkms_∑øms_size
;

120 
uöt64_t
 
	mevít_nvkms_∑øms_±r
;

121 
uöt64_t
 
	mevít_nvkms_∑øms_size
;

124 
	sdrm_nvidü_gem_„n˚_©èch_∑øms
 {

125 
uöt32_t
 
	mh™dÀ
;

126 
uöt32_t
 
	m„n˚_c⁄ãxt_h™dÀ
;

127 
uöt32_t
 
	m£m_thªsh
;

130 
	sdrm_nvidü_gë_˛õ¡_ˇ∑bûôy_∑øms
 {

131 
uöt64_t
 
	mˇ∑bûôy
;

132 
uöt64_t
 
	mvÆue
;

135 
	sdrm_nvidü_gë_¸tc_¸c32_∑øms
 {

136 
uöt32_t
 
	m¸tc_id
;

137 
uöt32_t
 
	m¸c32
;

140 
	sdrm_nvidü_gem_exp‹t_nvkms_mem‹y_∑øms
 {

141 
uöt32_t
 
	mh™dÀ
;

142 
uöt32_t
 
	m__∑d
;

144 
uöt64_t
 
	mnvkms_∑øms_±r
;

145 
uöt64_t
 
	mnvkms_∑øms_size
;

	@src/nvidia-drm/nvidia-drm-linux.c

23 
	~<löux/moduÀ.h
>

24 
	~<löux/¶ab.h
>

25 
	~<löux/îr.h
>

27 
	~"nvidü-drm-os-öãrÁ˚.h
"

28 
	~"nvidü-drm.h
"

30 
	~"nvidü-drm-c⁄·e°.h
"

32 #i‡
deföed
(
NV_DRM_AVAILABLE
)

34 
	~"nv-mm.h
"

36 
MODULE_PARM_DESC
(

37 
mode£t
,

39 
boﬁ
 
	gnv_drm_mode£t_moduÀ_∑øm
 = 
Ál£
;

40 
moduÀ_∑øm_«med
(
mode£t
, 
nv_drm_mode£t_moduÀ_∑øm
, 
boﬁ
, 0400);

42 *
	$nv_drm_ˇŒoc
(
size_t
 
nmemb
, size_à
size
)

44  
	`kzÆloc
(
nmemb
 * 
size
, 
GFP_KERNEL
);

45 
	}
}

47 
	$nv_drm_‰ì
(*
±r
)

49 i‡(
	`IS_ERR
(
±r
)) {

53 
	`k‰ì
(
±r
);

54 
	}
}

56 *
	$nv_drm_a•rötf
(c⁄° *
fmt
, ...)

58 
va_li°
 
≠
;

59 *
p
;

61 
	`va_°¨t
(
≠
, 
fmt
);

62 
p
 = 
	`kva•rötf
(
GFP_KERNEL
, 
fmt
, 
≠
);

63 
	`va_íd
(
≠
);

65  
p
;

66 
	}
}

68 #i‡
deföed
(
NVCPU_X86
Ë|| deföed(
NVCPU_X86_64
)

69 
	#WRITE_COMBINE_FLUSH
(Ë
asm
 vﬁ©ûe("s„n˚":::"mem‹y")

	)

70 #ñi‡
deföed
(
NVCPU_FAMILY_ARM
)

71 #i‡
deföed
(
NVCPU_ARM
)

72 
	#WRITE_COMBINE_FLUSH
(Ë{ 
	`dsb
(); 
	`ouãr_sync
(); }

	)

73 #ñi‡
deföed
(
NVCPU_AARCH64
)

74 
	#WRITE_COMBINE_FLUSH
(Ë
	`mb
()

	)

76 #ñi‡
deföed
(
NVCPU_PPC64LE
)

77 
	#WRITE_COMBINE_FLUSH
(Ë
asm
 vﬁ©ûe("sync":::"mem‹y")

	)

80 
	$nv_drm_wrôe_comböe_Êush
()

82 
	`WRITE_COMBINE_FLUSH
();

83 
	}
}

85 
	$nv_drm_lock_u£r_∑ges
(
addªss
,

86 
∑ges_cou¡
, 
∑ge
 ***
∑ges
)

88 
mm_°ru˘
 *
mm
 = 
cuºít
->mm;

89 
∑ge
 **
u£r_∑ges
;

90 c⁄° 
wrôe
 = 1;

91 c⁄° 
f‹˚
 = 0;

92 
∑ges_pö√d
;

94 
u£r_∑ges
 = 
	`nv_drm_ˇŒoc
(
∑ges_cou¡
, (*user_pages));

96 i‡(
u£r_∑ges
 =
NULL
) {

97  -
ENOMEM
;

100 
	`down_ªad
(&
mm
->
mm≠_£m
);

102 
∑ges_pö√d
 = 
	`NV_GET_USER_PAGES
(
addªss
, 
∑ges_cou¡
, 
wrôe
, 
f‹˚
,

103 
u£r_∑ges
, 
NULL
);

104 
	`up_ªad
(&
mm
->
mm≠_£m
);

106 i‡(
∑ges_pö√d
 < 0 || (Ìages_pö√d < 
∑ges_cou¡
) {

107 
Áûed
;

110 *
∑ges
 = 
u£r_∑ges
;

114 
Áûed
:

116 i‡(
∑ges_pö√d
 > 0) {

117 
i
;

119 
i
 = 0; i < 
∑ges_pö√d
; i++) {

120 
	`put_∑ge
(
u£r_∑ges
[
i
]);

124 
	`nv_drm_‰ì
(
u£r_∑ges
);

126  (
∑ges_pö√d
 < 0Ë?Öages_pö√d : -
EINVAL
;

127 
	}
}

129 
	$nv_drm_u∆ock_u£r_∑ges
(
∑ges_cou¡
, 
∑ge
 **
∑ges
)

131 
i
;

133 
i
 = 0; i < 
∑ges_cou¡
; i++) {

134 
	`£t_∑ge_dúty_lock
(
∑ges
[
i
]);

136 
	`put_∑ge
(
∑ges
[
i
]);

139 
	`nv_drm_‰ì
(
∑ges
);

140 
	}
}

142 *
	$nv_drm_vm≠
(
∑ge
 **
∑ges
, 
∑ges_cou¡
)

144  
	`vm≠
(
∑ges
, 
∑ges_cou¡
, 
VM_USERMAP
, 
PAGE_KERNEL
);

145 
	}
}

147 
	$nv_drm_vunm≠
(*
addªss
)

149 
	`vunm≠
(
addªss
);

150 
	}
}

152 
uöt64_t
 
	$nv_drm_gë_time_u£c
()

154 
timevÆ
 
tv
;

156 
	`do_gëtimeofday
(&
tv
);

158  (((
uöt64_t
)
tv
.
tv_£c
Ë* 1000000Ë+Åv.
tv_u£c
;

159 
	}
}

167 
__öô
 
	$nv_löux_drm_öô
()

169  
	`nv_drm_öô
();

170 
	}
}

172 
__exô
 
	$nv_löux_drm_exô
()

174 
	`nv_drm_exô
();

175 
	}
}

177 
moduÀ_öô
(
nv_löux_drm_öô
);

178 
moduÀ_exô
(
nv_löux_drm_exô
);

180 #i‡
deföed
(
MODULE_LICENSE
)

181 
MODULE_LICENSE
("MIT");

183 #i‡
deföed
(
MODULE_INFO
)

184 
MODULE_INFO
(
suµ‹ãd
, "external");

186 #i‡
deföed
(
MODULE_VERSION
)

187 
MODULE_VERSION
(
NV_VERSION_STRING
);

	@src/nvidia-drm/nvidia-drm-modeset.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

27 
	~"nvidü-drm-¥iv.h
"

28 
	~"nvidü-drm-mode£t.h
"

29 
	~"nvidü-drm-¸tc.h
"

30 
	~"nvidü-drm-os-öãrÁ˚.h
"

31 
	~"nvidü-drm-hñ≥r.h
"

33 
	~<drm/drm_©omic.h
>

34 
	~<drm/drm_©omic_hñ≥r.h
>

35 
	~<drm/drm_¸tc.h
>

37 
	snv_drm_©omic_°©e
 {

38 
NvKmsK≠iReque°edModeSëC⁄fig
 
	mc⁄fig
;

39 
drm_©omic_°©e
 
	mba£
;

42 
ölöe
 
nv_drm_©omic_°©e
 *
	$to_nv_©omic_°©e
(

43 
drm_©omic_°©e
 *
°©e
)

45  
	`c⁄èöî_of
(
°©e
, 
nv_drm_©omic_°©e
, 
ba£
);

46 
	}
}

48 
drm_©omic_°©e
 *
	$nv_drm_©omic_°©e_Æloc
(
drm_devi˚
 *
dev
)

50 
nv_drm_©omic_°©e
 *
nv_°©e
 =

51 
	`nv_drm_ˇŒoc
(1, (*
nv_°©e
));

53 i‡(
nv_°©e
 =
NULL
 || 
	`drm_©omic_°©e_öô
(
dev
, &nv_°©e->
ba£
) < 0) {

54 
	`nv_drm_‰ì
(
nv_°©e
);

55  
NULL
;

58  &
nv_°©e
->
ba£
;

59 
	}
}

61 
	$nv_drm_©omic_°©e_˛ór
(
drm_©omic_°©e
 *
°©e
)

63 
	`drm_©omic_°©e_deÁu…_˛ór
(
°©e
);

64 
	}
}

66 
	$nv_drm_©omic_°©e_‰ì
(
drm_©omic_°©e
 *
°©e
)

68 
nv_drm_©omic_°©e
 *
nv_°©e
 =

69 
	`to_nv_©omic_°©e
(
°©e
);

70 
	`drm_©omic_°©e_deÁu…_ªÀa£
(
°©e
);

71 
	`nv_drm_‰ì
(
nv_°©e
);

72 
	}
}

99 
	$nv_drm_©omic_≠∂y_mode£t_c⁄fig
(
drm_devi˚
 *
dev
,

100 
drm_©omic_°©e
 *
°©e
,

101 
boﬁ
 
commô
)

103 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

104 
NvKmsK≠iReque°edModeSëC⁄fig
 *
ªque°ed_c⁄fig
 =

105 &(
	`to_nv_©omic_°©e
(
°©e
)->
c⁄fig
);

106 
drm_¸tc
 *
¸tc
;

107 
drm_¸tc_°©e
 *
¸tc_°©e
;

108 
i
;

110 
	`mem£t
(
ªque°ed_c⁄fig
, 0, (*requested_config));

113 
	`nv_drm_f‹_óch_¸tc_ö_°©e
(
°©e
, 
¸tc
, 
¸tc_°©e
, 
i
) {

119 
drm_¸tc_°©e
 *
√w_¸tc_°©e
 =

120 
commô
 ? 
¸tc
->
°©e
 : 
¸tc_°©e
;

121 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

123 
ªque°ed_c⁄fig
->
hódReque°edC⁄fig
[
nv_¸tc
->
hód
] =

124 
	`to_nv_¸tc_°©e
(
√w_¸tc_°©e
)->
ªq_c⁄fig
;

126 
ªque°ed_c⁄fig
->
hódsMask
 |1 << 
nv_¸tc
->
hód
;

129 i‡(!
nvKms
->
	`≠∂yModeSëC⁄fig
(
nv_dev
->
pDevi˚
,

130 
ªque°ed_c⁄fig
, 
commô
)) {

131  -
EINVAL
;

135 
	}
}

137 
	$nv_drm_©omic_check
(
drm_devi˚
 *
dev
,

138 
drm_©omic_°©e
 *
°©e
)

140 
ªt
 = 0;

142 i‡((
ªt
 = 
	`drm_©omic_hñ≥r_check
(
dev
, 
°©e
)) != 0) {

143 
d⁄e
;

146 
ªt
 = 
	`nv_drm_©omic_≠∂y_mode£t_c⁄fig
(
dev
,

147 
°©e
, 
Ál£
 );

149 
d⁄e
:

150  
ªt
;

151 
	}
}

153 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

163 
	$nv_drm_©omic_hñ≥r_commô_èû
(
drm_©omic_°©e
 *
°©e
)

165 
drm_devi˚
 *
dev
 = 
°©e
->dev;

166 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

168 
i
;

169 
drm_¸tc
 *
¸tc
;

170 
drm_¸tc_°©e
 *
¸tc_°©e
;

171 
ªt
;

173 i‡(
nvKms
->
sy°emInfo
.
bAŒowWrôeComböög
) {

178 
	`nv_drm_wrôe_comböe_Êush
();

181 
	`nv_drm_f‹_óch_¸tc_ö_°©e
(
°©e
, 
¸tc
, 
¸tc_°©e
, 
i
) {

182 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

183 
nv_drm_¸tc_°©e
 *
nv_¸tc_°©e
 = 
	`to_nv_¸tc_°©e
(
¸tc
->
°©e
);

184 
nv_drm_Êù
 *
nv_Êù
 = 
nv_¸tc_°©e
->nv_flip;

186 
nv_¸tc_°©e
->
nv_Êù
 = 
NULL
;

188 i‡(!
¸tc
->
°©e
->
a˘ive
 && !
¸tc_°©e
->active) {

189 
	`nv_drm_‰ì
(
nv_Êù
);

193 
nv_Êù
->
evít
 = 
¸tc
->
°©e
->event;

194 
¸tc
->
°©e
->
evít
 = 
NULL
;

196 
	`•ö_lock
(&
nv_¸tc
->
Êù_lock
);

197 
	`li°_add
(&
nv_Êù
->
li°_íåy
, &
nv_¸tc
->
Êù_li°
);

198 
	`•ö_u∆ock
(&
nv_¸tc
->
Êù_lock
);

201 i‡((
ªt
 = 
	`nv_drm_©omic_≠∂y_mode£t_c⁄fig
(

202 
dev
,

203 
°©e
, 
åue
 )) != 0) {

204 
	`NV_DRM_DEV_LOG_ERR
(

205 
nv_dev
,

207 
ªt
);

210 
	`drm_©omic_hñ≥r_commô_hw_d⁄e
(
°©e
);

211 
	}
}

220 
	$__nv_drm_h™dÀ_Êù_evít
(
nv_drm_¸tc
 *
nv_¸tc
)

222 
drm_¸tc
 *
¸tc
 = &
nv_¸tc
->
ba£
;

223 
drm_devi˚
 *
dev
 = 
¸tc
->dev;

225 
nv_drm_Êù
 *
nv_Êù
 = 
NULL
;

227 
	`•ö_lock
(&
nv_¸tc
->
Êù_lock
);

228 i‡((
nv_Êù
 =

229 
	`li°_fú°_íåy_‹_nuŒ
(&
nv_¸tc
->
Êù_li°
,

230 
nv_drm_Êù
, 
li°_íåy
)Ë=
NULL
) {

231 
	`•ö_u∆ock
(&
nv_¸tc
->
Êù_lock
);

232 
	`WARN_ON
(1);

235 
	`li°_dñ
(&
nv_Êù
->
li°_íåy
);

236 
	`•ö_u∆ock
(&
nv_¸tc
->
Êù_lock
);

238 
	`•ö_lock
(&
dev
->
evít_lock
);

239 i‡(
nv_Êù
->
evít
 !
NULL
) {

240 
	`drm_¸tc_£nd_vbœnk_evít
(
¸tc
, 
nv_Êù
->
evít
);

242 
	`•ö_u∆ock
(&
dev
->
evít_lock
);

244 
	`nv_drm_‰ì
(
nv_Êù
);

245 
	}
}

249 
	snv_drm_©omic_commô_èsk
 {

250 
drm_devi˚
 *
	mdev
;

251 
drm_©omic_°©e
 *
	m°©e
;

253 
w‹k_°ru˘
 
	mw‹k
;

256 
	$nv_drm_©omic_commô_èsk_ˇŒback
(
w‹k_°ru˘
 *
w‹k
)

258 
nv_drm_©omic_commô_èsk
 *
nv_commô_èsk
 =

259 
	`c⁄èöî_of
(
w‹k
, 
nv_drm_©omic_commô_èsk
, work);

260 
drm_devi˚
 *
dev
 = 
nv_commô_èsk
->dev;

261 
drm_©omic_°©e
 *
°©e
 = 
nv_commô_èsk
->state;

262 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

263 
i
;

264 
drm_¸tc
 *
¸tc
;

265 
drm_¸tc_°©e
 *
¸tc_°©e
;

266 
ªt
;

268 i‡(
nvKms
->
sy°emInfo
.
bAŒowWrôeComböög
) {

273 
	`nv_drm_wrôe_comböe_Êush
();

276 i‡((
ªt
 = 
	`nv_drm_©omic_≠∂y_mode£t_c⁄fig
(

277 
dev
,

278 
°©e
, 
åue
 )) != 0) {

279 
	`NV_DRM_DEV_LOG_ERR
(

280 
nv_dev
,

282 
ªt
);

285 
	`nv_drm_f‹_óch_¸tc_ö_°©e
(
°©e
, 
¸tc
, 
¸tc_°©e
, 
i
) {

286 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

288 i‡(
	`waô_evít_timeout
(

289 
nv_dev
->
≥ndög_Êù_queue
,

290 !
	`©omic_ªad
(&
nv_¸tc
->
has_≥ndög_Êù_evít
),

291 3 * 
HZ
 ) == 0) {

292 
	`NV_DRM_DEV_LOG_ERR
(

293 
nv_dev
,

294 "FlùÉvíàtimeouà⁄ hód %u", 
nv_¸tc
->
hód
);

297 
	`©omic_£t
(&
nv_¸tc
->
has_≥ndög_commô
, 
Ál£
);

298 
	`wake_up_Æl
(&
nv_dev
->
≥ndög_commô_queue
);

301 #i‡
	`deföed
(
NV_DRM_ATOMIC_STATE_FREE
)

302 
	`drm_©omic_°©e_‰ì
(
°©e
);

304 
	`drm_©omic_°©e_put
(
°©e
);

307 
	`nv_drm_‰ì
(
nv_commô_èsk
);

308 
	}
}

310 
	$nv_drm_©omic_commô_öã∫Æ
(

311 
drm_devi˚
 *
dev
,

312 
drm_©omic_°©e
 *
°©e
,

313 
boﬁ
 
n⁄block
)

315 
ªt
 = 0;

317 
i
;

318 
drm_¸tc
 *
¸tc
 = 
NULL
;

319 
drm_¸tc_°©e
 *
¸tc_°©e
 = 
NULL
;

321 
nv_drm_©omic_commô_èsk
 *
nv_commô_èsk
 = 
NULL
;

323 
NvKmsK≠iReque°edModeSëC⁄fig
 *
ªque°ed_c⁄fig
 = 
NULL
;

325 
nv_commô_èsk
 = 
	`nv_drm_ˇŒoc
(1, (*nv_commit_task));

327 i‡(
nv_commô_èsk
 =
NULL
) {

328 
ªt
 = -
ENOMEM
;

329 
Áûed
;

340 
ªque°ed_c⁄fig
 = &(
	`to_nv_©omic_°©e
(
°©e
)->
c⁄fig
);

348 i‡(!
n⁄block
) {

354 
	`nv_drm_f‹_óch_¸tc_ö_°©e
(
°©e
, 
¸tc
, 
¸tc_°©e
, 
i
) {

355 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

356 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

358 i‡(
	`waô_evít_timeout
(

359 
nv_dev
->
≥ndög_Êù_queue
,

360 !
	`©omic_ªad
(&
nv_¸tc
->
has_≥ndög_Êù_evít
),

361 3 * 
HZ
 ) == 0) {

362 
ªt
 = -
EBUSY
;

363 
Áûed
;

366 i‡(
	`waô_evít_timeout
(

367 
nv_dev
->
≥ndög_commô_queue
,

368 !
	`©omic_ªad
(&
nv_¸tc
->
has_≥ndög_commô
),

369 3 * 
HZ
 ) == 0) {

370 
ªt
 = -
EBUSY
;

371 
Áûed
;

375 
	`nv_drm_f‹_óch_¸tc_ö_°©e
(
°©e
, 
¸tc
, 
¸tc_°©e
, 
i
) {

376 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

378 i‡(
	`©omic_ªad
(&
nv_¸tc
->
has_≥ndög_commô
) ||

379 
	`©omic_ªad
(&
nv_¸tc
->
has_≥ndög_Êù_evít
)) {

380 
ªt
 = -
EBUSY
;

381 
Áûed
;

391 
	`nv_drm_f‹_óch_¸tc_ö_°©e
(
°©e
, 
¸tc
, 
¸tc_°©e
, 
i
) {

392 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`to_nv_¸tc
(
¸tc
);

394 
	`©omic_£t
(&
nv_¸tc
->
has_≥ndög_commô
, 
åue
);

396 i‡(!
¸tc
->
°©e
->
a˘ive
 && !
¸tc_°©e
->active) {

400 
	`©omic_£t
(&
nv_¸tc
->
has_≥ndög_Êù_evít
, 
åue
);

403 
	`drm_©omic_hñ≥r_sw≠_°©e
(
dev
, 
°©e
);

405 
	`INIT_WORK
(&
nv_commô_èsk
->
w‹k
,

406 
nv_drm_©omic_commô_èsk_ˇŒback
);

408 
nv_commô_èsk
->
dev
 = dev;

409 
nv_commô_èsk
->
°©e
 = state;

411 i‡(
n⁄block
) {

412 
	`scheduÀ_w‹k
(&
nv_commô_èsk
->
w‹k
);

414 
	`nv_drm_©omic_commô_èsk_ˇŒback
(&
nv_commô_èsk
->
w‹k
);

419 
Áûed
:

421 
	`nv_drm_‰ì
(
nv_commô_èsk
);

423  
ªt
;

424 
	}
}

426 
	$__nv_drm_h™dÀ_Êù_evít
(
nv_drm_¸tc
 *
nv_¸tc
)

428 
drm_¸tc
 *
¸tc
 = &
nv_¸tc
->
ba£
;

429 
drm_¸tc_°©e
 *
¸tc_°©e
 = 
¸tc
->
°©e
;

431 
drm_devi˚
 *
dev
 = 
¸tc
->dev;

432 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

434 
	`•ö_lock
(&
dev
->
evít_lock
);

435 i‡(
¸tc_°©e
->
evít
 !
NULL
) {

436 
	`drm_¸tc_£nd_vbœnk_evít
(
¸tc
, 
¸tc_°©e
->
evít
);

438 
¸tc_°©e
->
evít
 = 
NULL
;

439 
	`•ö_u∆ock
(&
dev
->
evít_lock
);

441 
	`WARN_ON
(!
	`©omic_ªad
(&
nv_¸tc
->
has_≥ndög_Êù_evít
));

442 
	`©omic_£t
(&
nv_¸tc
->
has_≥ndög_Êù_evít
, 
Ál£
);

443 
	`wake_up_Æl
(&
nv_dev
->
≥ndög_Êù_queue
);

444 
	}
}

448 
	$nv_drm_©omic_commô
(
drm_devi˚
 *
dev
,

449 
drm_©omic_°©e
 *
°©e
, 
boﬁ
 
n⁄block
)

451 #i‡
	`deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

452  
	`drm_©omic_hñ≥r_commô
(
dev
, 
°©e
, 
n⁄block
);

454  
	`nv_drm_©omic_commô_öã∫Æ
(
dev
, 
°©e
, 
n⁄block
);

456 
	}
}

458 
	$nv_drm_h™dÀ_Êù_occuºed
(
nv_drm_devi˚
 *
nv_dev
,

459 
NvU32
 
hód
, 
NvKmsK≠iPœ√Ty≥
 
∂™e
)

461 
nv_drm_¸tc
 *
nv_¸tc
 = 
	`nv_drm_¸tc_lookup
(
nv_dev
, 
hód
);

463 i‡(
	`NV_DRM_WARN
(
nv_¸tc
 =
NULL
)) {

467 
∂™e
) {

468 
NVKMS_KAPI_PLANE_PRIMARY
:

469 
	`__nv_drm_h™dÀ_Êù_evít
(
nv_¸tc
);

471 
NVKMS_KAPI_PLANE_OVERLAY
:

473 
NVKMS_KAPI_PLANE_CURSOR
:

475 
	`BUG_ON
(1);

477 
	}
}

	@src/nvidia-drm/nvidia-drm-modeset.h

23 #i‚de‡
__NVIDIA_DRM_MODESET_H__


24 
	#__NVIDIA_DRM_MODESET_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

30 
	~<drm/drmP.h
>

32 
drm_©omic_°©e
 *
nv_drm_©omic_°©e_Æloc
(
drm_devi˚
 *
dev
);

33 
nv_drm_©omic_°©e_˛ór
(
drm_©omic_°©e
 *
°©e
);

34 
nv_drm_©omic_°©e_‰ì
(
drm_©omic_°©e
 *
°©e
);

36 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

37 
nv_drm_©omic_hñ≥r_commô_èû
(
drm_©omic_°©e
 *
°©e
);

40 
nv_drm_©omic_check
(
drm_devi˚
 *
dev
,

41 
drm_©omic_°©e
 *
°©e
);

43 
nv_drm_©omic_commô
(
drm_devi˚
 *
dev
,

44 
drm_©omic_°©e
 *
°©e
, 
boﬁ
 
n⁄block
);

47 
nv_drm_h™dÀ_Êù_occuºed
(
nv_drm_devi˚
 *
nv_dev
,

48 
NvU32
 
hód
,

49 
NvKmsK≠iPœ√Ty≥
 
∂™e
);

51 
nv_drm_shut_down_Æl_¸tcs
(
drm_devi˚
 *
dev
);

	@src/nvidia-drm/nvidia-drm-os-interface.h

23 #i‚de‡
__NVIDIA_DRM_OS_INTERFACE_H__


24 
	#__NVIDIA_DRM_OS_INTERFACE_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 
	~"nvty≥s.h
"

30 #i‡
deföed
(
NV_DRM_AVAILABLE
)

32 
	~<drm/drmP.h
>

35 
boﬁ
 
nv_drm_mode£t_moduÀ_∑øm
;

37 *
nv_drm_ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

39 
nv_drm_‰ì
(*
±r
);

41 *
nv_drm_a•rötf
(c⁄° *
fmt
, ...);

43 
nv_drm_wrôe_comböe_Êush
();

45 
nv_drm_lock_u£r_∑ges
(
addªss
,

46 
∑ges_cou¡
, 
∑ge
 ***
∑ges
);

48 
nv_drm_u∆ock_u£r_∑ges
(
∑ges_cou¡
, 
∑ge
 **
∑ges
);

50 *
nv_drm_vm≠
(
∑ge
 **
∑ges
, 
∑ges_cou¡
);

52 
nv_drm_vunm≠
(*
addªss
);

54 
uöt64_t
 
nv_drm_gë_time_u£c
();

	@src/nvidia-drm/nvidia-drm-prime-fence.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_AVAILABLE
)

27 
	~"nvidü-drm-¥iv.h
"

28 
	~"nvidü-drm-io˘l.h
"

29 
	~"nvidü-drm-gem.h
"

30 
	~"nvidü-drm-¥ime-„n˚.h
"

32 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

34 
	~"nvidü-dma-„n˚-hñ≥r.h
"

36 
	snv_drm_„n˚_c⁄ãxt
 {

37 
nv_drm_devi˚
 *
	mnv_dev
;

39 
uöt32_t
 
	mc⁄ãxt
;

41 
NvU64
 
	m„n˚SemIndex
;

44 
NvKmsK≠iMem‹y
 *
	mpSemSurÁ˚
;

45 
NvU32
 *
	mpLöórAddªss
;

48 
•ölock_t
 
	mlock
;

54 
boﬁ
 
	mdód
;

57 
NvKmsK≠iCh™√lEvít
 *
	mcb
;

60 
li°_hód
 
	m≥ndög
;

62 
	mœ°_£qno
;

65 
	snv_drm_¥ime_„n˚
 {

66 
li°_hód
 
	mli°_íåy
;

67 
nv_dma_„n˚_t
 
	mba£
;

68 
•ölock_t
 
	mlock
;

71 
ölöe


72 
nv_drm_¥ime_„n˚
 *
	$to_nv_drm_¥ime_„n˚
(
nv_dma_„n˚_t
 *
„n˚
)

74  
	`c⁄èöî_of
(
„n˚
, 
nv_drm_¥ime_„n˚
, 
ba£
);

75 
	}
}

78 
	$nv_drm_gem_¥ime_„n˚_›_gë_drivî_«me
(
nv_dma_„n˚_t
 *
„n˚
)

81 
	}
}

84 
	$nv_drm_gem_¥ime_„n˚_›_gë_timñöe_«me
(
nv_dma_„n˚_t
 *
„n˚
)

87 
	}
}

89 
boﬁ
 
	$nv_drm_gem_¥ime_„n˚_›_íabÀ_sig«lög
(
nv_dma_„n˚_t
 *
„n˚
)

92  
åue
;

93 
	}
}

95 
	$nv_drm_gem_¥ime_„n˚_›_ªÀa£
(
nv_dma_„n˚_t
 *
„n˚
)

97 
nv_drm_¥ime_„n˚
 *
nv_„n˚
 = 
	`to_nv_drm_¥ime_„n˚
(
„n˚
);

98 
	`nv_drm_‰ì
(
nv_„n˚
);

99 
	}
}

102 
	$nv_drm_gem_¥ime_„n˚_›_waô
(
nv_dma_„n˚_t
 *
„n˚
,

103 
boﬁ
 
öå
, sig√d 
timeout
)

115  
	`nv_dma_„n˚_deÁu…_waô
(
„n˚
, 
öå
,

116 (
timeout
 =
MAX_SCHEDULE_TIMEOUT
) ?

117 
	`m£cs_to_jiffõs
(96Ë: 
timeout
);

118 
	}
}

120 c⁄° 
nv_dma_„n˚_›s_t
 
	gnv_drm_gem_¥ime_„n˚_›s
 = {

121 .
gë_drivî_«me
 = 
nv_drm_gem_¥ime_„n˚_›_gë_drivî_«me
,

122 .
	ggë_timñöe_«me
 = 
nv_drm_gem_¥ime_„n˚_›_gë_timñöe_«me
,

123 .
	gíabÀ_sig«lög
 = 
nv_drm_gem_¥ime_„n˚_›_íabÀ_sig«lög
,

124 .
	gªÀa£
 = 
nv_drm_gem_¥ime_„n˚_›_ªÀa£
,

125 .
	gwaô
 = 
nv_drm_gem_¥ime_„n˚_›_waô
,

128 
ölöe
 

129 
	$__nv_drm_¥ime_„n˚_sig«l
(
nv_drm_¥ime_„n˚
 *
nv_„n˚
)

131 
	`li°_dñ
(&
nv_„n˚
->
li°_íåy
);

132 
	`nv_dma_„n˚_sig«l
(&
nv_„n˚
->
ba£
);

133 
	`nv_dma_„n˚_put
(&
nv_„n˚
->
ba£
);

134 
	}
}

136 
	$nv_drm_gem_¥ime_f‹˚_„n˚_sig«l
(

137 
nv_drm_„n˚_c⁄ãxt
 *
nv_„n˚_c⁄ãxt
)

139 
	`WARN_ON
(!
	`•ö_is_locked
(&
nv_„n˚_c⁄ãxt
->
lock
));

141 
	`WARN_ON
(
nv_„n˚_c⁄ãxt
->
dód
);

143 !
	`li°_em±y
(&
nv_„n˚_c⁄ãxt
->
≥ndög
)) {

144 
nv_drm_¥ime_„n˚
 *
nv_„n˚
 = 
	`li°_fú°_íåy
(

145 &
nv_„n˚_c⁄ãxt
->
≥ndög
,

146 
	`ty≥of
(*
nv_„n˚
),

147 
li°_íåy
);

149 
	`__nv_drm_¥ime_„n˚_sig«l
(
nv_„n˚
);

151 
	}
}

153 
NVKMS_KAPI_CALL
 
	gnv_drm_gem_¥ime_„n˚_evít


155 *
	gd©aPå
,

156 
NvU32
 
	gd©aU32


159 
nv_drm_„n˚_c⁄ãxt
 *
	gnv_„n˚_c⁄ãxt
 = 
d©aPå
;

161 
•ö_lock
(&
nv_„n˚_c⁄ãxt
->
lock
);

163 i‡(
	gnv_„n˚_c⁄ãxt
->
	gdód
) {

164 
WARN_ON
(!
li°_em±y
(&
nv_„n˚_c⁄ãxt
->
≥ndög
));

165 
	gu∆ock_™d_out
;

168 !
li°_em±y
(&
nv_„n˚_c⁄ãxt
->
≥ndög
)) {

169 
nv_drm_¥ime_„n˚
 *
	gnv_„n˚
 = 
li°_fú°_íåy
(

170 &
nv_„n˚_c⁄ãxt
->
≥ndög
,

171 
ty≥of
(*
nv_„n˚
),

172 
li°_íåy
);

175 
	g£qno
 = *((
nv_„n˚_c⁄ãxt
->
pLöórAddªss
) +

176 (
nv_„n˚_c⁄ãxt
->
„n˚SemIndex
 * 4));

178 i‡(
	gnv_„n˚
->
	gba£
.
	g£qno
 > seqno) {

187 
__nv_drm_¥ime_„n˚_sig«l
(
nv_„n˚
);

190 
	gu∆ock_™d_out
:

191 
•ö_u∆ock
(&
nv_„n˚_c⁄ãxt
->
lock
);

194 
ölöe
 
nv_drm_„n˚_c⁄ãxt
 *
	$__nv_drm_„n˚_c⁄ãxt_√w
(

195 
nv_drm_devi˚
 *
nv_dev
,

196 
drm_nvidü_„n˚_c⁄ãxt_¸óã_∑øms
 *
p
)

198 
nv_drm_„n˚_c⁄ãxt
 *
nv_„n˚_c⁄ãxt
;

199 
NvKmsK≠iMem‹y
 *
pSemSurÁ˚
;

200 
NvKmsK≠iCh™√lEvít
 *
cb
;

201 
NvU32
 *
pLöórAddªss
;

205 
pSemSurÁ˚
 = 
nvKms
->
	`imp‹tMem‹y
(
nv_dev
->
pDevi˚
,

206 
p
->
size
,

207 
p
->
imp‹t_mem_nvkms_∑øms_±r
,

208 
p
->
imp‹t_mem_nvkms_∑øms_size
);

209 i‡(!
pSemSurÁ˚
) {

210 
	`NV_DRM_DEV_LOG_ERR
(

211 
nv_dev
,

214 
Áûed
;

217 i‡(!
nvKms
->
	`m≠Mem‹y
(
nv_dev
->
pDevi˚
,

218 
pSemSurÁ˚
,

219 
NVKMS_KAPI_MAPPING_TYPE_KERNEL
,

220 (**Ë&
pLöórAddªss
)) {

221 
	`NV_DRM_DEV_LOG_ERR
(

222 
nv_dev
,

225 
Áûed_to_m≠_mem‹y
;

233 i‡((
nv_„n˚_c⁄ãxt
 = 
	`nv_drm_ˇŒoc
(

235 (*
nv_„n˚_c⁄ãxt
))Ë=
NULL
) {

236 
Áûed_Æloc_„n˚_c⁄ãxt
;

244 *
nv_„n˚_c⁄ãxt
 = (
nv_drm_„n˚_c⁄ãxt
) {

245 .
nv_dev
 =Çv_dev,

246 .
c⁄ãxt
 = 
	`nv_dma_„n˚_c⁄ãxt_Æloc
(1),

247 .
pSemSurÁ˚
 =ÖSemSurface,

248 .
pLöórAddªss
 =ÖLinearAddress,

249 .
„n˚SemIndex
 = 
p
->
ödex
,

252 
	`INIT_LIST_HEAD
(&
nv_„n˚_c⁄ãxt
->
≥ndög
);

254 
	`•ö_lock_öô
(&
nv_„n˚_c⁄ãxt
->
lock
);

261 
	`•ö_lock
(&
nv_„n˚_c⁄ãxt
->
lock
);

263 
cb
 = 
nvKms
->
	`ÆloˇãCh™√lEvít
(
nv_dev
->
pDevi˚
,

264 
nv_drm_gem_¥ime_„n˚_evít
,

265 
nv_„n˚_c⁄ãxt
,

266 
p
->
evít_nvkms_∑øms_±r
,

267 
p
->
evít_nvkms_∑øms_size
);

268 i‡(!
cb
) {

269 
	`NV_DRM_DEV_LOG_ERR
(
nv_dev
,

272 
Áûed_to_Æloˇã_ch™√l_evít
;

275 
nv_„n˚_c⁄ãxt
->
cb
 = cb;

277 
	`•ö_u∆ock
(&
nv_„n˚_c⁄ãxt
->
lock
);

279  
nv_„n˚_c⁄ãxt
;

281 
Áûed_to_Æloˇã_ch™√l_evít
:

282 
	`nv_drm_‰ì
(
nv_„n˚_c⁄ãxt
);

284 
Áûed_Æloc_„n˚_c⁄ãxt
:

286 
nvKms
->
	`unm≠Mem‹y
(
nv_dev
->
pDevi˚
,

287 
pSemSurÁ˚
,

288 
NVKMS_KAPI_MAPPING_TYPE_KERNEL
,

289 (*Ë
pLöórAddªss
);

291 
Áûed_to_m≠_mem‹y
:

292 
nvKms
->
	`‰ìMem‹y
(
nv_dev
->
pDevi˚
, 
pSemSurÁ˚
);

294 
Áûed
:

295  
NULL
;

296 
	}
}

298 
	$__nv_drm_„n˚_c⁄ãxt_de°roy
(

299 
nv_drm_„n˚_c⁄ãxt
 *
nv_„n˚_c⁄ãxt
)

301 
nv_drm_devi˚
 *
nv_dev
 = 
nv_„n˚_c⁄ãxt
->nv_dev;

308 
	`•ö_lock
(&
nv_„n˚_c⁄ãxt
->
lock
);

310 
	`nv_drm_gem_¥ime_f‹˚_„n˚_sig«l
(
nv_„n˚_c⁄ãxt
);

312 
nvKms
->
	`‰ìCh™√lEvít
(
nv_dev
->
pDevi˚
, 
nv_„n˚_c⁄ãxt
->
cb
);

314 
nv_„n˚_c⁄ãxt
->
dód
 = 
åue
;

316 
	`•ö_u∆ock
(&
nv_„n˚_c⁄ãxt
->
lock
);

320 
	`Êush_scheduÀd_w‹k
();

324 
nvKms
->
	`unm≠Mem‹y
(
nv_dev
->
pDevi˚
,

325 
nv_„n˚_c⁄ãxt
->
pSemSurÁ˚
,

326 
NVKMS_KAPI_MAPPING_TYPE_KERNEL
,

327 (*Ë
nv_„n˚_c⁄ãxt
->
pLöórAddªss
);

329 
nvKms
->
	`‰ìMem‹y
(
nv_dev
->
pDevi˚
, 
nv_„n˚_c⁄ãxt
->
pSemSurÁ˚
);

331 
	`nv_drm_‰ì
(
nv_„n˚_c⁄ãxt
);

332 
	}
}

334 
nv_dma_„n˚_t
 *
	$__nv_drm_„n˚_c⁄ãxt_¸óã_„n˚
(

335 
nv_drm_„n˚_c⁄ãxt
 *
nv_„n˚_c⁄ãxt
,

336 
£qno
)

338 
nv_drm_¥ime_„n˚
 *
nv_„n˚
;

339 
ªt
 = 0;

341 i‡((
nv_„n˚
 = 
	`nv_drm_ˇŒoc
(1, (*nv_„n˚))Ë=
NULL
) {

342 
ªt
 = -
ENOMEM
;

343 
out
;

346 
	`•ö_lock
(&
nv_„n˚_c⁄ãxt
->
lock
);

348 i‡(
nv_„n˚_c⁄ãxt
->
dód
) {

349 
ªt
 = -
EINVAL
;

350 
u∆ock_™d_out
;

357 i‡(
£qno
 < 
nv_„n˚_c⁄ãxt
->
œ°_£qno
) {

358 
	`nv_drm_gem_¥ime_f‹˚_„n˚_sig«l
(
nv_„n˚_c⁄ãxt
);

361 
	`INIT_LIST_HEAD
(&
nv_„n˚
->
li°_íåy
);

363 
	`•ö_lock_öô
(&
nv_„n˚
->
lock
);

365 
	`nv_dma_„n˚_öô
(&
nv_„n˚
->
ba£
, &
nv_drm_gem_¥ime_„n˚_›s
,

366 &
nv_„n˚
->
lock
, 
nv_„n˚_c⁄ãxt
->
c⁄ãxt
,

367 
£qno
);

369 
	`li°_add_èû
(&
nv_„n˚
->
li°_íåy
, &
nv_„n˚_c⁄ãxt
->
≥ndög
);

371 
nv_„n˚_c⁄ãxt
->
œ°_£qno
 = 
£qno
;

373 
u∆ock_™d_out
:

374 
	`•ö_u∆ock
(&
nv_„n˚_c⁄ãxt
->
lock
);

376 
out
:

377  
ªt
 !0 ? 
	`ERR_PTR
‘ëË: &
nv_„n˚
->
ba£
;

378 
	}
}

380 
	$nv_drm_„n˚_suµ‹ãd_io˘l
(
drm_devi˚
 *
dev
,

381 *
d©a
, 
drm_fûe
 *
fûï
)

383 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

384  
nv_dev
->
pDevi˚
 ? 0 : -
EINVAL
;

385 
	}
}

387 
	snv_drm_gem_„n˚_c⁄ãxt
 {

388 
nv_drm_gem_obje˘
 
	mba£
;

389 
nv_drm_„n˚_c⁄ãxt
 *
	mnv_„n˚_c⁄ãxt
;

392 
ölöe
 
nv_drm_gem_„n˚_c⁄ãxt
 *
	$to_gem_„n˚_c⁄ãxt
(

393 
nv_drm_gem_obje˘
 *
nv_gem
)

395 i‡(
nv_gem
 !
NULL
) {

396  
	`c⁄èöî_of
(
nv_gem
, 
nv_drm_gem_„n˚_c⁄ãxt
, 
ba£
);

399  
NULL
;

400 
	}
}

408 
	$__nv_drm_gem_„n˚_c⁄ãxt_‰ì
(
nv_drm_gem_obje˘
 *
nv_gem
)

410 
nv_drm_gem_„n˚_c⁄ãxt
 *
nv_gem_„n˚_c⁄ãxt
 =

411 
	`to_gem_„n˚_c⁄ãxt
(
nv_gem
);

413 
	`__nv_drm_„n˚_c⁄ãxt_de°roy
(
nv_gem_„n˚_c⁄ãxt
->
nv_„n˚_c⁄ãxt
);

415 
	`nv_drm_‰ì
(
nv_gem_„n˚_c⁄ãxt
);

416 
	}
}

418 c⁄° 
nv_drm_gem_obje˘_funcs
 
	gnv_gem_„n˚_c⁄ãxt_›s
 = {

419 .
‰ì
 = 
__nv_drm_gem_„n˚_c⁄ãxt_‰ì
,

422 
ölöe


423 
nv_drm_gem_„n˚_c⁄ãxt
 *
	$__nv_drm_gem_obje˘_„n˚_c⁄ãxt_lookup
(

424 
drm_devi˚
 *
dev
,

425 
drm_fûe
 *
fûp
,

426 
u32
 
h™dÀ
)

428 
nv_drm_gem_obje˘
 *
nv_gem
 =

429 
	`nv_drm_gem_obje˘_lookup
(
dev
, 
fûp
, 
h™dÀ
);

431 i‡(
nv_gem
 !
NULL
 &&Çv_gem->
›s
 !&
nv_gem_„n˚_c⁄ãxt_›s
) {

432 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(
nv_gem
);

433  
NULL
;

436  
	`to_gem_„n˚_c⁄ãxt
(
nv_gem
);

437 
	}
}

439 
	$nv_drm_„n˚_c⁄ãxt_¸óã_io˘l
(
drm_devi˚
 *
dev
,

440 *
d©a
, 
drm_fûe
 *
fûï
)

442 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

443 
drm_nvidü_„n˚_c⁄ãxt_¸óã_∑øms
 *
p
 = 
d©a
;

444 
nv_drm_gem_„n˚_c⁄ãxt
 *
nv_gem_„n˚_c⁄ãxt
 = 
NULL
;

446 i‡((
nv_gem_„n˚_c⁄ãxt
 = 
	`nv_drm_ˇŒoc
(

448 (
nv_drm_gem_„n˚_c⁄ãxt
))Ë=
NULL
) {

449 
d⁄e
;

452 i‡((
nv_gem_„n˚_c⁄ãxt
->
nv_„n˚_c⁄ãxt
 =

453 
	`__nv_drm_„n˚_c⁄ãxt_√w
(
nv_dev
, 
p
)Ë=
NULL
) {

454 
„n˚_c⁄ãxt_√w_Áûed
;

457 
	`nv_drm_gem_obje˘_öô
(
nv_dev
,

458 &
nv_gem_„n˚_c⁄ãxt
->
ba£
,

459 &
nv_gem_„n˚_c⁄ãxt_›s
,

462  
	`nv_drm_gem_h™dÀ_¸óã_dr›_ª„ªn˚
(
fûï
,

463 &
nv_gem_„n˚_c⁄ãxt
->
ba£
,

464 &
p
->
h™dÀ
);

466 
„n˚_c⁄ãxt_√w_Áûed
:

467 
	`nv_drm_‰ì
(
nv_gem_„n˚_c⁄ãxt
);

469 
d⁄e
:

470  -
ENOMEM
;

471 
	}
}

473 
	$nv_drm_gem_„n˚_©èch_io˘l
(
drm_devi˚
 *
dev
,

474 *
d©a
, 
drm_fûe
 *
fûï
)

476 
ªt
 = -
EINVAL
;

477 
nv_drm_devi˚
 *
nv_dev
 = 
	`to_nv_devi˚
(
dev
);

478 
drm_nvidü_gem_„n˚_©èch_∑øms
 *
p
 = 
d©a
;

480 
nv_drm_gem_obje˘
 *
nv_gem
;

481 
nv_drm_gem_„n˚_c⁄ãxt
 *
nv_gem_„n˚_c⁄ãxt
;

483 
nv_dma_„n˚_t
 *
„n˚
;

485 
nv_gem
 = 
	`nv_drm_gem_obje˘_lookup
(
nv_dev
->
dev
, 
fûï
, 
p
->
h™dÀ
);

487 i‡(!
nv_gem
) {

488 
	`NV_DRM_DEV_LOG_ERR
(

489 
nv_dev
,

491 
p
->
h™dÀ
);

493 
d⁄e
;

496 if((
nv_gem_„n˚_c⁄ãxt
 = 
	`__nv_drm_gem_obje˘_„n˚_c⁄ãxt_lookup
(

497 
nv_dev
->
dev
,

498 
fûï
,

499 
p
->
„n˚_c⁄ãxt_h™dÀ
)Ë=
NULL
) {

501 
	`NV_DRM_DEV_LOG_ERR
(

502 
nv_dev
,

504 
p
->
„n˚_c⁄ãxt_h™dÀ
);

506 
„n˚_c⁄ãxt_lookup_Áûed
;

509 i‡(
	`IS_ERR
(
„n˚
 = 
	`__nv_drm_„n˚_c⁄ãxt_¸óã_„n˚
(

510 
nv_gem_„n˚_c⁄ãxt
->
nv_„n˚_c⁄ãxt
,

511 
p
->
£m_thªsh
))) {

512 
ªt
 = 
	`PTR_ERR
(
„n˚
);

514 
	`NV_DRM_DEV_LOG_ERR
(

515 
nv_dev
,

516 "FaûedÅÿÆloˇã fí˚: 0x%08x", 
p
->
h™dÀ
);

518 
„n˚_c⁄ãxt_¸óã_„n˚_Áûed
;

521 
	`ª£rv©i⁄_obje˘_add_ex˛_„n˚
(&
nv_gem
->
ªsv
, 
„n˚
);

523 
ªt
 = 0;

525 
„n˚_c⁄ãxt_¸óã_„n˚_Áûed
:

526 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(&
nv_gem_„n˚_c⁄ãxt
->
ba£
);

528 
„n˚_c⁄ãxt_lookup_Áûed
:

529 
	`nv_drm_gem_obje˘_uƒe„ªn˚_u∆ocked
(
nv_gem
);

531 
d⁄e
:

532  
ªt
;

533 
	}
}

	@src/nvidia-drm/nvidia-drm-prime-fence.h

23 #i‚de‡
__NVIDIA_DRM_PRIME_FENCE_H__


24 
	#__NVIDIA_DRM_PRIME_FENCE_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_AVAILABLE
)

30 
	~<drm/drmP.h
>

32 #i‡
deföed
(
NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ
)

34 
nv_drm_„n˚_suµ‹ãd_io˘l
(
drm_devi˚
 *
dev
,

35 *
d©a
, 
drm_fûe
 *
fûï
);

37 
nv_drm_„n˚_c⁄ãxt_¸óã_io˘l
(
drm_devi˚
 *
dev
,

38 *
d©a
, 
drm_fûe
 *
fûï
);

40 
nv_drm_gem_„n˚_©èch_io˘l
(
drm_devi˚
 *
dev
,

41 *
d©a
, 
drm_fûe
 *
fûï
);

	@src/nvidia-drm/nvidia-drm-priv.h

23 #i‚de‡
__NVIDIA_DRM_PRIV_H__


24 
	#__NVIDIA_DRM_PRIV_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_AVAILABLE
)

30 
	~<drm/drmP.h
>

32 #i‡
deföed
(
NV_DRM_DRM_GEM_H_PRESENT
)

33 
	~<drm/drm_gem.h
>

36 
	~"nvidü-drm-os-öãrÁ˚.h
"

38 
	~"nvkms-k≠i.h
"

40 
	#NV_DRM_LOG_ERR
(
__fmt
, ...) \

41 
	`DRM_ERROR
("[nvidü-drm] " 
__fmt
 "\n", ##
__VA_ARGS__
)

	)

43 
	#NV_DRM_LOG_INFO
(
__fmt
, ...) \

44 
	`DRM_INFO
("[nvidü-drm] " 
__fmt
 "\n", ##
__VA_ARGS__
)

	)

46 
	#NV_DRM_DEV_LOG_INFO
(
__dev
, 
__fmt
, ...) \

47 
	`NV_DRM_LOG_INFO
("[GPU ID 0x%08x] " 
__fmt
, 
__dev
->
gpu_öfo
.
gpu_id
, ##
__VA_ARGS__
)

	)

49 
	#NV_DRM_DEV_LOG_ERR
(
__dev
, 
__fmt
, ...) \

50 
	`NV_DRM_LOG_ERR
("[GPU ID 0x%08x] " 
__fmt
, 
__dev
->
gpu_öfo
.
gpu_id
, ##
__VA_ARGS__
)

	)

52 
	#NV_DRM_WARN
(
__c⁄dôi⁄
Ë
	`WARN_ON
((__c⁄dôi⁄))

	)

54 
	snv_drm_devi˚
 {

55 
nv_gpu_öfo_t
 
	mgpu_öfo
;

57 
drm_devi˚
 *
	mdev
;

59 
NvKmsK≠iDevi˚
 *
	mpDevi˚
;

61 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

84 
muãx
 
	mlock
;

86 
NvU32
 
	mpôchAlignmít
;

88 
©omic_t
 
	míabÀ_evít_h™dlög
;

90 #i‡!
deföed
(
NV_DRM_ATOMIC_MODESET_NONBLOCKING_COMMIT_AVAILABLE
)

92 
waô_queue_hód_t
 
	m≥ndög_commô_queue
;

93 
waô_queue_hód_t
 
	m≥ndög_Êù_queue
;

98 
nv_drm_devi˚
 *
	m√xt
;

101 
ölöe
 
nv_drm_devi˚
 *
	$to_nv_devi˚
(

102 
drm_devi˚
 *
dev
)

104  
dev
->
dev_¥iv©e
;

105 
	}
}

107 c⁄° 
NvKmsK≠iFun˘i⁄sTabÀ
* c⁄° 
nvKms
;

	@src/nvidia-drm/nvidia-drm-utils.c

23 
	~"nvidü-drm-c⁄·e°.h
"

25 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

27 
	~"nvidü-drm-¥iv.h
"

28 
	~"nvidü-drm-utûs.h
"

30 
NvKmsK≠iC⁄√˘‹Info
*

31 
	$nvkms_gë_c⁄√˘‹_öfo
(
NvKmsK≠iDevi˚
 *
pDevi˚
,

32 
NvKmsK≠iC⁄√˘‹
 
hC⁄√˘‹
)

34 
NvKmsK≠iC⁄√˘‹Info
 *
c⁄√˘‹Info
 =

35 
	`nv_drm_ˇŒoc
(1, (*
c⁄√˘‹Info
));

37 i‡(
c⁄√˘‹Info
 =
NULL
) {

38  
	`ERR_PTR
(-
ENOMEM
);

41 i‡(!
nvKms
->
	`gëC⁄√˘‹Info
(
pDevi˚
, 
hC⁄√˘‹
, 
c⁄√˘‹Info
)) {

42 
	`nv_drm_‰ì
(
c⁄√˘‹Info
);

44  
	`ERR_PTR
(-
EINVAL
);

47  
c⁄√˘‹Info
;

48 
	}
}

51 
	$nvkms_c⁄√˘‹_sig«l_to_drm_ícodî_sig«l
(
NvKmsC⁄√˘‹Sig«lF‹m©
 
f‹m©
)

53 
f‹m©
) {

55 
NVKMS_CONNECTOR_SIGNAL_FORMAT_UNKNOWN
:

56  
DRM_MODE_ENCODER_NONE
;

57 
NVKMS_CONNECTOR_SIGNAL_FORMAT_TMDS
:

58 
NVKMS_CONNECTOR_SIGNAL_FORMAT_DP
:

59  
DRM_MODE_ENCODER_TMDS
;

60 
NVKMS_CONNECTOR_SIGNAL_FORMAT_LVDS
:

61  
DRM_MODE_ENCODER_LVDS
;

62 
NVKMS_CONNECTOR_SIGNAL_FORMAT_VGA
:

63  
DRM_MODE_ENCODER_DAC
;

65 
	}
}

67 
	$nvkms_c⁄√˘‹_ty≥_to_drm_c⁄√˘‹_ty≥
(
NvKmsC⁄√˘‹Ty≥
 
ty≥
,

68 
NvBoﬁ
 
öã∫Æ
)

70 
ty≥
) {

72 
NVKMS_CONNECTOR_TYPE_UNKNOWN
:

73  
DRM_MODE_CONNECTOR_Unknown
;

74 
NVKMS_CONNECTOR_TYPE_DP
:

76 
öã∫Æ
 ?

77 
DRM_MODE_CONNECTOR_eDP
 : 
DRM_MODE_CONNECTOR_Di•œyP‹t
;

78 
NVKMS_CONNECTOR_TYPE_HDMI
:

79  
DRM_MODE_CONNECTOR_HDMIA
;

80 
NVKMS_CONNECTOR_TYPE_DVI_D
:

81  
DRM_MODE_CONNECTOR_DVID
;

82 
NVKMS_CONNECTOR_TYPE_DVI_I
:

83  
DRM_MODE_CONNECTOR_DVII
;

84 
NVKMS_CONNECTOR_TYPE_LVDS
:

85  
DRM_MODE_CONNECTOR_LVDS
;

86 
NVKMS_CONNECTOR_TYPE_VGA
:

87  
DRM_MODE_CONNECTOR_VGA
;

89 
	}
}

92 
	$nvkms_di•œy_mode_to_drm_mode
(c⁄° 
NvKmsK≠iDi•œyMode
 *
di•œyMode
,

93 
drm_di•œy_mode
 *
mode
)

95 
mode
->
vª‰esh
 = (
di•œyMode
->
timögs
.
ª‰eshR©e
 + 500) / 1000;

97 
mode
->
˛ock
 = (
di•œyMode
->
timögs
.
pixñClockHz
 + 500) / 1000;

99 
mode
->
hdi•œy
 = 
di•œyMode
->
timögs
.
hVisibÀ
;

100 
mode
->
hsync_°¨t
 = 
di•œyMode
->
timögs
.
hSyncSèπ
;

101 
mode
->
hsync_íd
 = 
di•œyMode
->
timögs
.
hSyncEnd
;

102 
mode
->
htŸÆ
 = 
di•œyMode
->
timögs
.
hTŸÆ
;

103 
mode
->
hskew
 = 
di•œyMode
->
timögs
.
hSkew
;

105 
mode
->
vdi•œy
 = 
di•œyMode
->
timögs
.
vVisibÀ
;

106 
mode
->
vsync_°¨t
 = 
di•œyMode
->
timögs
.
vSyncSèπ
;

107 
mode
->
vsync_íd
 = 
di•œyMode
->
timögs
.
vSyncEnd
;

108 
mode
->
vtŸÆ
 = 
di•œyMode
->
timögs
.
vTŸÆ
;

110 i‡(
di•œyMode
->
timögs
.
Êags
.
öãæa˚d
) {

111 
mode
->
Êags
 |
DRM_MODE_FLAG_INTERLACE
;

114 i‡(
di•œyMode
->
timögs
.
Êags
.
doubÀSˇn
) {

115 
mode
->
Êags
 |
DRM_MODE_FLAG_DBLSCAN
;

118 i‡(
di•œyMode
->
timögs
.
Êags
.
hSyncPos
) {

119 
mode
->
Êags
 |
DRM_MODE_FLAG_PHSYNC
;

122 i‡(
di•œyMode
->
timögs
.
Êags
.
hSyncNeg
) {

123 
mode
->
Êags
 |
DRM_MODE_FLAG_NHSYNC
;

126 i‡(
di•œyMode
->
timögs
.
Êags
.
vSyncPos
) {

127 
mode
->
Êags
 |
DRM_MODE_FLAG_PVSYNC
;

130 i‡(
di•œyMode
->
timögs
.
Êags
.
vSyncNeg
) {

131 
mode
->
Êags
 |
DRM_MODE_FLAG_NVSYNC
;

134 
mode
->
width_mm
 = 
di•œyMode
->
timögs
.
widthMM
;

135 
mode
->
height_mm
 = 
di•œyMode
->
timögs
.
heightMM
;

137 i‡(
	`°æí
(
di•œyMode
->
«me
) != 0) {

138 
	`mem˝y
(

139 
mode
->
«me
, 
di•œyMode
->name,

140 
	`mö
((
mode
->
«me
), (
di•œyMode
->name)));

142 
mode
->
«me
[(mode->name) - 1] = '\0';

144 
	`drm_mode_£t_«me
(
mode
);

146 
	}
}

148 
boﬁ
 
	$drm_f‹m©_to_nvkms_f‹m©
(
u32
 
f‹m©
,

149 
NvKmsSurÁ˚Mem‹yF‹m©
 *
nvkms_f‹m©
)

151 
f‹m©
) {

152 
DRM_FORMAT_ARGB1555
:

153 *
nvkms_f‹m©
 = 
NvKmsSurÁ˚Mem‹yF‹m©A1R5G5B5
;

154  
åue
;

155 
DRM_FORMAT_XRGB1555
:

156 *
nvkms_f‹m©
 = 
NvKmsSurÁ˚Mem‹yF‹m©X1R5G5B5
;

157  
åue
;

158 
DRM_FORMAT_RGB565
:

159 *
nvkms_f‹m©
 = 
NvKmsSurÁ˚Mem‹yF‹m©R5G6B5
;

160  
åue
;

161 
DRM_FORMAT_ARGB8888
:

162 *
nvkms_f‹m©
 = 
NvKmsSurÁ˚Mem‹yF‹m©A8R8G8B8
;

163  
åue
;

164 
DRM_FORMAT_XRGB8888
:

165 *
nvkms_f‹m©
 = 
NvKmsSurÁ˚Mem‹yF‹m©X8R8G8B8
;

166  
åue
;

167 
DRM_FORMAT_ABGR2101010
:

168 *
nvkms_f‹m©
 = 
NvKmsSurÁ˚Mem‹yF‹m©A2B10G10R10
;

169  
åue
;

170 
DRM_FORMAT_XBGR2101010
:

171 *
nvkms_f‹m©
 = 
NvKmsSurÁ˚Mem‹yF‹m©X2B10G10R10
;

172  
åue
;

175  
Ál£
;

176 
	}
}

178 
	$drm_mode_to_nvkms_di•œy_mode
(c⁄° 
drm_di•œy_mode
 *
§c
,

179 
NvKmsK≠iDi•œyMode
 *
d°
)

181 
d°
->
timögs
.
ª‰eshR©e
 = 
§c
->
vª‰esh
 * 1000;

183 
d°
->
timögs
.
pixñClockHz
 = 
§c
->
˛ock
 * 1000;

185 
d°
->
timögs
.
hVisibÀ
 = 
§c
->
hdi•œy
;

186 
d°
->
timögs
.
hSyncSèπ
 = 
§c
->
hsync_°¨t
;

187 
d°
->
timögs
.
hSyncEnd
 = 
§c
->
hsync_íd
;

188 
d°
->
timögs
.
hTŸÆ
 = 
§c
->
htŸÆ
;

189 
d°
->
timögs
.
hSkew
 = 
§c
->
hskew
;

191 
d°
->
timögs
.
vVisibÀ
 = 
§c
->
vdi•œy
;

192 
d°
->
timögs
.
vSyncSèπ
 = 
§c
->
vsync_°¨t
;

193 
d°
->
timögs
.
vSyncEnd
 = 
§c
->
vsync_íd
;

194 
d°
->
timögs
.
vTŸÆ
 = 
§c
->
vtŸÆ
;

196 i‡(
§c
->
Êags
 & 
DRM_MODE_FLAG_INTERLACE
) {

197 
d°
->
timögs
.
Êags
.
öãæa˚d
 = 
NV_TRUE
;

199 
d°
->
timögs
.
Êags
.
öãæa˚d
 = 
NV_FALSE
;

202 i‡(
§c
->
Êags
 & 
DRM_MODE_FLAG_DBLSCAN
) {

203 
d°
->
timögs
.
Êags
.
doubÀSˇn
 = 
NV_TRUE
;

205 
d°
->
timögs
.
Êags
.
doubÀSˇn
 = 
NV_FALSE
;

208 i‡(
§c
->
Êags
 & 
DRM_MODE_FLAG_PHSYNC
) {

209 
d°
->
timögs
.
Êags
.
hSyncPos
 = 
NV_TRUE
;

211 
d°
->
timögs
.
Êags
.
hSyncPos
 = 
NV_FALSE
;

214 i‡(
§c
->
Êags
 & 
DRM_MODE_FLAG_NHSYNC
) {

215 
d°
->
timögs
.
Êags
.
hSyncNeg
 = 
NV_TRUE
;

217 
d°
->
timögs
.
Êags
.
hSyncNeg
 = 
NV_FALSE
;

220 i‡(
§c
->
Êags
 & 
DRM_MODE_FLAG_PVSYNC
) {

221 
d°
->
timögs
.
Êags
.
vSyncPos
 = 
NV_TRUE
;

223 
d°
->
timögs
.
Êags
.
vSyncPos
 = 
NV_FALSE
;

226 i‡(
§c
->
Êags
 & 
DRM_MODE_FLAG_NVSYNC
) {

227 
d°
->
timögs
.
Êags
.
vSyncNeg
 = 
NV_TRUE
;

229 
d°
->
timögs
.
Êags
.
vSyncNeg
 = 
NV_FALSE
;

232 
d°
->
timögs
.
widthMM
 = 
§c
->
width_mm
;

233 
d°
->
timögs
.
heightMM
 = 
§c
->
height_mm
;

235 
	`mem˝y
(
d°
->
«me
, 
§c
->«me, 
	`mö
((dst->name), (src->name)));

236 
	}
}

238 
boﬁ
 
	$drm_∂™e_ty≥_to_nvkms_∂™e_ty≥
(
drm_∂™e_ty≥
 
§c
,

239 
NvKmsK≠iPœ√Ty≥
 *
ty≥
)

241 
§c
) {

243  
Ál£
;

244 
DRM_PLANE_TYPE_OVERLAY
:

245 *
ty≥
 = 
NVKMS_KAPI_PLANE_OVERLAY
;

247 
DRM_PLANE_TYPE_PRIMARY
:

248 *
ty≥
 = 
NVKMS_KAPI_PLANE_PRIMARY
;

250 
DRM_PLANE_TYPE_CURSOR
:

251 *
ty≥
 = 
NVKMS_KAPI_PLANE_CURSOR
;

255  
åue
;

256 
	}
}

	@src/nvidia-drm/nvidia-drm-utils.h

23 #i‚de‡
__NVIDIA_DRM_UTILS_H__


24 
	#__NVIDIA_DRM_UTILS_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

28 #i‡
deföed
(
NV_DRM_ATOMIC_MODESET_AVAILABLE
)

30 
	~<drm/drmP.h
>

31 
	~"nvkms-k≠i.h
"

33 
NvKmsK≠iC⁄√˘‹Info
*

34 
nvkms_gë_c⁄√˘‹_öfo
(
NvKmsK≠iDevi˚
 *
pDevi˚
,

35 
NvKmsK≠iC⁄√˘‹
 
hC⁄√˘‹
);

37 
nvkms_c⁄√˘‹_sig«l_to_drm_ícodî_sig«l
(

38 
NvKmsC⁄√˘‹Sig«lF‹m©
 
f‹m©
);

40 
nvkms_c⁄√˘‹_ty≥_to_drm_c⁄√˘‹_ty≥
(
NvKmsC⁄√˘‹Ty≥
 
ty≥
,

41 
NvBoﬁ
 
öã∫Æ
);

43 
nvkms_di•œy_mode_to_drm_mode
(

44 c⁄° 
NvKmsK≠iDi•œyMode
 *
di•œyMode
,

45 
drm_di•œy_mode
 *
mode
);

47 
boﬁ
 
drm_f‹m©_to_nvkms_f‹m©
(
u32
 
f‹m©
,

48 
NvKmsSurÁ˚Mem‹yF‹m©
 *
nvkms_f‹m©
);

50 
drm_mode_to_nvkms_di•œy_mode
(c⁄° 
drm_di•œy_mode
 *
§c
,

51 
NvKmsK≠iDi•œyMode
 *
d°
);

53 
boﬁ
 
drm_∂™e_ty≥_to_nvkms_∂™e_ty≥
(
drm_∂™e_ty≥
 
§c
,

54 
NvKmsK≠iPœ√Ty≥
 *
ty≥
);

	@src/nvidia-drm/nvidia-drm.c

23 
	~"nvidü-drm.h
"

25 #i‡
deföed
(
NV_DRM_AVAILABLE
)

27 
	~"nvidü-drm-¥iv.h
"

28 
	~"nvidü-drm-drv.h
"

30 
NvKmsK≠iFun˘i⁄sTabÀ
 
	gnvKmsFuncsTabÀ
 = {

31 .
vîsi⁄Såög
 = 
NV_VERSION_STRING
,

34 c⁄° 
NvKmsK≠iFun˘i⁄sTabÀ
* c⁄° 
	gnvKms
 = &
nvKmsFuncsTabÀ
;

38 
	$nv_drm_öô
()

40 #i‡
	`deföed
(
NV_DRM_AVAILABLE
)

41 i‡(!
	`nvKmsK≠iGëFun˘i⁄sTabÀ
(&
nvKmsFuncsTabÀ
)) {

42 
	`NV_DRM_LOG_ERR
(

44 
nvKmsFuncsTabÀ
.
vîsi⁄Såög
, 
NV_VERSION_STRING
);

45  -
EINVAL
;

49 #ifde‡
__löux__


51  
	`nv_drm_¥obe_devi˚s
();

54 
	`NV_DRM_LOG_INFO
("nvKms:--------------");

55 
	`NV_DRM_LOG_INFO
("nvKms->íumî©eGpu†%lx", ()
nvKms
->
íumî©eGpus
);

62 
nv_drm_mode£t_moduÀ_∑øm
 = 
åue
;

63 
	`nv_drm_upd©e_drm_drivî_„©uªs
();

71 
nv_drm_dev˛ass
 = 
	`dev˛ass_¸óã
("nvidia-drm");

72 
nv_drm_pci_drivî
.
bsd˛ass
 = 
nv_drm_dev˛ass
;

73 
ªt
 = 
	`löux_pci_ªgi°î_drm_drivî
(&
nv_drm_pci_drivî
);

74 
	`NV_DRM_LOG_INFO
("Regi°îedÖcòdrivî wôhÑë: %d", 
ªt
);

76  
ªt
;

79 
	}
}

81 
	$nv_drm_exô
()

83 #i‡
	`deföed
(
NV_DRM_AVAILABLE
)

84 
	`NV_DRM_LOG_INFO
("nv_drm_remove_devices--");

85 
	`nv_drm_ªmove_devi˚s
();

87 
	}
}

	@src/nvidia-drm/nvidia-drm.h

23 #i‚de‡
__NVIDIA_DRM_H__


24 
	#__NVIDIA_DRM_H__


	)

26 
	~"nvidü-drm-c⁄·e°.h
"

33 #i‚de‡
__löux__


36 
	~<löux/devi˚.h
>

37 
	~<löux/vmÆloc.h
>

39 
	~"nv-pci-èbÀ.h
"

41 
nv_drm_bsd_¥obe
(
pci_dev
 *
dev
,

42 c⁄° 
pci_devi˚_id
 *
ít
);

44 
pci_drivî
 
nv_drm_pci_drivî
;

46 
	~<˝ufunc.h
>

49 *
nv_drm_ˇŒoc
(
size_t
, size_t);

50 
nv_drm_‰ì
(*);

51 *
nv_drm_a•rötf
(const *, ...);

52 
nv_drm_wrôe_comböe_Êush
();

53 
nv_drm_lock_u£r_∑ges
(,

54 , 
∑ge
 ***);

55 
nv_drm_u∆ock_u£r_∑ges
(, 
∑ge
 **);

56 *
nv_drm_vm≠
(
∑ge
 **, );

57 
nv_drm_vunm≠
(*);

58 
uöt64_t
 
nv_drm_gë_time_u£c
();

59 
nv_drm_upd©e_drm_drivî_„©uªs
();

62 
dev˛ass_t
 
nv_drm_dev˛ass
;

71 
	#VM_USERMAP
 0

	)

75 
nv_drm_öô
();

76 
nv_drm_exô
();

	@src/nvidia-drm/opt_compat.h

	@src/nvidia-drm/opt_drm.h

	@src/nvidia-drm/opt_stack.h

	@src/nvidia-drm/opt_syscons.h

	@src/nvidia-drm/opt_usb.h

	@src/nvidia-drm/pci_if.h

14 #i‚de‡
_pci_if_h_


15 
	#_pci_if_h_


	)

18 
	gnvli°
;

20 
	epci_id_ty≥
 {

21 
	mPCI_ID_RID
,

22 
	mPCI_ID_MSI
,

25 
	epci_„©uª
 {

26 
	mPCI_FEATURE_HP
,

27 
	mPCI_FEATURE_AER
,

31 
kobj›_desc
 
pci_ªad_c⁄fig_desc
;

33 
u_öt32_t
 
	tpci_ªad_c⁄fig_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tªg
,

34 
	twidth
);

36 
__ölöe
 
u_öt32_t
 
	$PCI_READ_CONFIG
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ªg
,

37 
width
)

39 
kobj›_t
 
_m
;

40 
u_öt32_t
 
rc
;

41 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_ªad_c⁄fig
);

42 
rc
 = ((
pci_ªad_c⁄fig_t
 *Ë
_m
)(
dev
, 
chûd
, 
ªg
, 
width
);

43  (
rc
);

44 
	}
}

47 
kobj›_desc
 
pci_wrôe_c⁄fig_desc
;

49 
	tpci_wrôe_c⁄fig_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tªg
,

50 
	tu_öt32_t
 
	tvÆ
, 
	twidth
);

52 
__ölöe
 
	$PCI_WRITE_CONFIG
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ªg
,

53 
u_öt32_t
 
vÆ
, 
width
)

55 
kobj›_t
 
_m
;

56 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_wrôe_c⁄fig
);

57 ((
pci_wrôe_c⁄fig_t
 *Ë
_m
)(
dev
, 
chûd
, 
ªg
, 
vÆ
, 
width
);

58 
	}
}

61 
kobj›_desc
 
pci_gë_powî°©e_desc
;

63 
	tpci_gë_powî°©e_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

65 
__ölöe
 
	$PCI_GET_POWERSTATE
(
devi˚_t
 
dev
, devi˚_à
chûd
)

67 
kobj›_t
 
_m
;

68 
rc
;

69 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_powî°©e
);

70 
rc
 = ((
pci_gë_powî°©e_t
 *Ë
_m
)(
dev
, 
chûd
);

71  (
rc
);

72 
	}
}

75 
kobj›_desc
 
pci_£t_powî°©e_desc
;

77 
	tpci_£t_powî°©e_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	t°©e
);

79 
__ölöe
 
	$PCI_SET_POWERSTATE
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
°©e
)

81 
kobj›_t
 
_m
;

82 
rc
;

83 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_£t_powî°©e
);

84 
rc
 = ((
pci_£t_powî°©e_t
 *Ë
_m
)(
dev
, 
chûd
, 
°©e
);

85  (
rc
);

86 
	}
}

89 
kobj›_desc
 
pci_gë_vpd_idít_desc
;

91 
	tpci_gë_vpd_idít_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
,

92 c⁄° **
	tidíçå
);

94 
__ölöe
 
	$PCI_GET_VPD_IDENT
(
devi˚_t
 
dev
, devi˚_à
chûd
,

95 c⁄° **
idíçå
)

97 
kobj›_t
 
_m
;

98 
rc
;

99 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_vpd_idít
);

100 
rc
 = ((
pci_gë_vpd_idít_t
 *Ë
_m
)(
dev
, 
chûd
, 
idíçå
);

101  (
rc
);

102 
	}
}

105 
kobj›_desc
 
pci_gë_vpd_ªad⁄ly_desc
;

107 
	tpci_gë_vpd_ªad⁄ly_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, c⁄° *
	tkw
,

108 c⁄° **
	tv±r
);

110 
__ölöe
 
	$PCI_GET_VPD_READONLY
(
devi˚_t
 
dev
, devi˚_à
chûd
,

111 c⁄° *
kw
, c⁄° **
v±r
)

113 
kobj›_t
 
_m
;

114 
rc
;

115 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_vpd_ªad⁄ly
);

116 
rc
 = ((
pci_gë_vpd_ªad⁄ly_t
 *Ë
_m
)(
dev
, 
chûd
, 
kw
, 
v±r
);

117  (
rc
);

118 
	}
}

121 
kobj›_desc
 
pci_íabÀ_busma°î_desc
;

123 
	tpci_íabÀ_busma°î_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

125 
__ölöe
 
	$PCI_ENABLE_BUSMASTER
(
devi˚_t
 
dev
, devi˚_à
chûd
)

127 
kobj›_t
 
_m
;

128 
rc
;

129 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_busma°î
);

130 
rc
 = ((
pci_íabÀ_busma°î_t
 *Ë
_m
)(
dev
, 
chûd
);

131  (
rc
);

132 
	}
}

135 
kobj›_desc
 
pci_dißbÀ_busma°î_desc
;

137 
	tpci_dißbÀ_busma°î_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

139 
__ölöe
 
	$PCI_DISABLE_BUSMASTER
(
devi˚_t
 
dev
, devi˚_à
chûd
)

141 
kobj›_t
 
_m
;

142 
rc
;

143 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_dißbÀ_busma°î
);

144 
rc
 = ((
pci_dißbÀ_busma°î_t
 *Ë
_m
)(
dev
, 
chûd
);

145  (
rc
);

146 
	}
}

149 
kobj›_desc
 
pci_íabÀ_io_desc
;

151 
	tpci_íabÀ_io_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	t•a˚
);

153 
__ölöe
 
	$PCI_ENABLE_IO
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
•a˚
)

155 
kobj›_t
 
_m
;

156 
rc
;

157 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_io
);

158 
rc
 = ((
pci_íabÀ_io_t
 *Ë
_m
)(
dev
, 
chûd
, 
•a˚
);

159  (
rc
);

160 
	}
}

163 
kobj›_desc
 
pci_dißbÀ_io_desc
;

165 
	tpci_dißbÀ_io_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	t•a˚
);

167 
__ölöe
 
	$PCI_DISABLE_IO
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
•a˚
)

169 
kobj›_t
 
_m
;

170 
rc
;

171 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_dißbÀ_io
);

172 
rc
 = ((
pci_dißbÀ_io_t
 *Ë
_m
)(
dev
, 
chûd
, 
•a˚
);

173  (
rc
);

174 
	}
}

177 
kobj›_desc
 
pci_assign_öãºu±_desc
;

179 
	tpci_assign_öãºu±_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

181 
__ölöe
 
	$PCI_ASSIGN_INTERRUPT
(
devi˚_t
 
dev
, devi˚_à
chûd
)

183 
kobj›_t
 
_m
;

184 
rc
;

185 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_assign_öãºu±
);

186 
rc
 = ((
pci_assign_öãºu±_t
 *Ë
_m
)(
dev
, 
chûd
);

187  (
rc
);

188 
	}
}

191 
kobj›_desc
 
pci_föd_ˇp_desc
;

193 
	tpci_föd_ˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

194 *
	tˇ¥eg
);

196 
__ölöe
 
	$PCI_FIND_CAP
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ˇ∑bûôy
,

197 *
ˇ¥eg
)

199 
kobj›_t
 
_m
;

200 
rc
;

201 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_ˇp
);

202 
rc
 = ((
pci_föd_ˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
ˇ¥eg
);

203  (
rc
);

204 
	}
}

207 
kobj›_desc
 
pci_föd_√xt_ˇp_desc
;

209 
	tpci_föd_√xt_ˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

210 
	t°¨t
, *
	tˇ¥eg
);

212 
__ölöe
 
	$PCI_FIND_NEXT_CAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

213 
ˇ∑bûôy
, 
°¨t
, *
ˇ¥eg
)

215 
kobj›_t
 
_m
;

216 
rc
;

217 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_√xt_ˇp
);

218 
rc
 = ((
pci_föd_√xt_ˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
°¨t
, 
ˇ¥eg
);

219  (
rc
);

220 
	}
}

223 
kobj›_desc
 
pci_föd_extˇp_desc
;

225 
	tpci_föd_extˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

226 *
	tˇ¥eg
);

228 
__ölöe
 
	$PCI_FIND_EXTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

229 
ˇ∑bûôy
, *
ˇ¥eg
)

231 
kobj›_t
 
_m
;

232 
rc
;

233 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_extˇp
);

234 
rc
 = ((
pci_föd_extˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
ˇ¥eg
);

235  (
rc
);

236 
	}
}

239 
kobj›_desc
 
pci_föd_√xt_extˇp_desc
;

241 
	tpci_föd_√xt_extˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

242 
	t°¨t
, *
	tˇ¥eg
);

244 
__ölöe
 
	$PCI_FIND_NEXT_EXTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

245 
ˇ∑bûôy
, 
°¨t
, *
ˇ¥eg
)

247 
kobj›_t
 
_m
;

248 
rc
;

249 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_√xt_extˇp
);

250 
rc
 = ((
pci_föd_√xt_extˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
°¨t
, 
ˇ¥eg
);

251  (
rc
);

252 
	}
}

255 
kobj›_desc
 
pci_föd_htˇp_desc
;

257 
	tpci_föd_htˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

258 *
	tˇ¥eg
);

260 
__ölöe
 
	$PCI_FIND_HTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ˇ∑bûôy
,

261 *
ˇ¥eg
)

263 
kobj›_t
 
_m
;

264 
rc
;

265 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_htˇp
);

266 
rc
 = ((
pci_föd_htˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
ˇ¥eg
);

267  (
rc
);

268 
	}
}

271 
kobj›_desc
 
pci_föd_√xt_htˇp_desc
;

273 
	tpci_föd_√xt_htˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

274 
	t°¨t
, *
	tˇ¥eg
);

276 
__ölöe
 
	$PCI_FIND_NEXT_HTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

277 
ˇ∑bûôy
, 
°¨t
, *
ˇ¥eg
)

279 
kobj›_t
 
_m
;

280 
rc
;

281 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_√xt_htˇp
);

282 
rc
 = ((
pci_föd_√xt_htˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
°¨t
, 
ˇ¥eg
);

283  (
rc
);

284 
	}
}

287 
kobj›_desc
 
pci_Æloc_msi_desc
;

289 
	tpci_Æloc_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, *
	tcou¡
);

291 
__ölöe
 
	$PCI_ALLOC_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
, *
cou¡
)

293 
kobj›_t
 
_m
;

294 
rc
;

295 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_Æloc_msi
);

296 
rc
 = ((
pci_Æloc_msi_t
 *Ë
_m
)(
dev
, 
chûd
, 
cou¡
);

297  (
rc
);

298 
	}
}

301 
kobj›_desc
 
pci_Æloc_msix_desc
;

303 
	tpci_Æloc_msix_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, *
	tcou¡
);

305 
__ölöe
 
	$PCI_ALLOC_MSIX
(
devi˚_t
 
dev
, devi˚_à
chûd
, *
cou¡
)

307 
kobj›_t
 
_m
;

308 
rc
;

309 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_Æloc_msix
);

310 
rc
 = ((
pci_Æloc_msix_t
 *Ë
_m
)(
dev
, 
chûd
, 
cou¡
);

311  (
rc
);

312 
	}
}

315 
kobj›_desc
 
pci_íabÀ_msi_desc
;

317 
	tpci_íabÀ_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tuöt64_t
 
	taddªss
,

318 
	tuöt16_t
 
	td©a
);

320 
__ölöe
 
	$PCI_ENABLE_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
,

321 
uöt64_t
 
addªss
, 
uöt16_t
 
d©a
)

323 
kobj›_t
 
_m
;

324 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_msi
);

325 ((
pci_íabÀ_msi_t
 *Ë
_m
)(
dev
, 
chûd
, 
addªss
, 
d©a
);

326 
	}
}

329 
kobj›_desc
 
pci_íabÀ_msix_desc
;

331 
	tpci_íabÀ_msix_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tu_öt
 
	tödex
,

332 
	tuöt64_t
 
	taddªss
, 
	tuöt32_t
 
	td©a
);

334 
__ölöe
 
	$PCI_ENABLE_MSIX
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
u_öt
 
ödex
,

335 
uöt64_t
 
addªss
, 
uöt32_t
 
d©a
)

337 
kobj›_t
 
_m
;

338 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_msix
);

339 ((
pci_íabÀ_msix_t
 *Ë
_m
)(
dev
, 
chûd
, 
ödex
, 
addªss
, 
d©a
);

340 
	}
}

343 
kobj›_desc
 
pci_dißbÀ_msi_desc
;

345 
	tpci_dißbÀ_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

347 
__ölöe
 
	$PCI_DISABLE_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
)

349 
kobj›_t
 
_m
;

350 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_dißbÀ_msi
);

351 ((
pci_dißbÀ_msi_t
 *Ë
_m
)(
dev
, 
chûd
);

352 
	}
}

355 
kobj›_desc
 
pci_ªm≠_msix_desc
;

357 
	tpci_ªm≠_msix_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tcou¡
,

358 c⁄° 
	tu_öt
 *
	tve˘‹s
);

360 
__ölöe
 
	$PCI_REMAP_MSIX
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
cou¡
,

361 c⁄° 
u_öt
 *
ve˘‹s
)

363 
kobj›_t
 
_m
;

364 
rc
;

365 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_ªm≠_msix
);

366 
rc
 = ((
pci_ªm≠_msix_t
 *Ë
_m
)(
dev
, 
chûd
, 
cou¡
, 
ve˘‹s
);

367  (
rc
);

368 
	}
}

371 
kobj›_desc
 
pci_ªÀa£_msi_desc
;

373 
	tpci_ªÀa£_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

375 
__ölöe
 
	$PCI_RELEASE_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
)

377 
kobj›_t
 
_m
;

378 
rc
;

379 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_ªÀa£_msi
);

380 
rc
 = ((
pci_ªÀa£_msi_t
 *Ë
_m
)(
dev
, 
chûd
);

381  (
rc
);

382 
	}
}

385 
kobj›_desc
 
pci_msi_cou¡_desc
;

387 
	tpci_msi_cou¡_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

389 
__ölöe
 
	$PCI_MSI_COUNT
(
devi˚_t
 
dev
, devi˚_à
chûd
)

391 
kobj›_t
 
_m
;

392 
rc
;

393 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msi_cou¡
);

394 
rc
 = ((
pci_msi_cou¡_t
 *Ë
_m
)(
dev
, 
chûd
);

395  (
rc
);

396 
	}
}

399 
kobj›_desc
 
pci_msix_cou¡_desc
;

401 
	tpci_msix_cou¡_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

403 
__ölöe
 
	$PCI_MSIX_COUNT
(
devi˚_t
 
dev
, devi˚_à
chûd
)

405 
kobj›_t
 
_m
;

406 
rc
;

407 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msix_cou¡
);

408 
rc
 = ((
pci_msix_cou¡_t
 *Ë
_m
)(
dev
, 
chûd
);

409  (
rc
);

410 
	}
}

413 
kobj›_desc
 
pci_msix_pba_b¨_desc
;

415 
	tpci_msix_pba_b¨_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

417 
__ölöe
 
	$PCI_MSIX_PBA_BAR
(
devi˚_t
 
dev
, devi˚_à
chûd
)

419 
kobj›_t
 
_m
;

420 
rc
;

421 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msix_pba_b¨
);

422 
rc
 = ((
pci_msix_pba_b¨_t
 *Ë
_m
)(
dev
, 
chûd
);

423  (
rc
);

424 
	}
}

427 
kobj›_desc
 
pci_msix_èbÀ_b¨_desc
;

429 
	tpci_msix_èbÀ_b¨_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

431 
__ölöe
 
	$PCI_MSIX_TABLE_BAR
(
devi˚_t
 
dev
, devi˚_à
chûd
)

433 
kobj›_t
 
_m
;

434 
rc
;

435 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msix_èbÀ_b¨
);

436 
rc
 = ((
pci_msix_èbÀ_b¨_t
 *Ë
_m
)(
dev
, 
chûd
);

437  (
rc
);

438 
	}
}

441 
kobj›_desc
 
pci_gë_id_desc
;

443 
	tpci_gë_id_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tpci_id_ty≥
 
	tty≥
,

444 
	tuöçå_t
 *
	tid
);

446 
__ölöe
 
	$PCI_GET_ID
(
devi˚_t
 
dev
, devi˚_à
chûd
,

447 
pci_id_ty≥
 
ty≥
, 
uöçå_t
 *
id
)

449 
kobj›_t
 
_m
;

450 
rc
;

451 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_id
);

452 
rc
 = ((
pci_gë_id_t
 *Ë
_m
)(
dev
, 
chûd
, 
ty≥
, 
id
);

453  (
rc
);

454 
	}
}

457 
kobj›_desc
 
pci_Æloc_devöfo_desc
;

459 
pci_devöfo
 * 
	tpci_Æloc_devöfo_t
(
	tdevi˚_t
 
	tdev
);

461 
__ölöe
 
pci_devöfo
 * 
	$PCI_ALLOC_DEVINFO
(
devi˚_t
 
dev
)

463 
kobj›_t
 
_m
;

464 
pci_devöfo
 * 
rc
;

465 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_Æloc_devöfo
);

466 
rc
 = ((
pci_Æloc_devöfo_t
 *Ë
_m
)(
dev
);

467  (
rc
);

468 
	}
}

471 
kobj›_desc
 
pci_chûd_added_desc
;

473 
	tpci_chûd_added_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

475 
__ölöe
 
	$PCI_CHILD_ADDED
(
devi˚_t
 
dev
, devi˚_à
chûd
)

477 
kobj›_t
 
_m
;

478 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_chûd_added
);

479 ((
pci_chûd_added_t
 *Ë
_m
)(
dev
, 
chûd
);

480 
	}
}

483 
kobj›_desc
 
pci_iov_©èch_desc
;

485 
	tpci_iov_©èch_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
,

486 
	tnvli°
 *
	tpf_schema
, nvli° *
	tvf_schema
,

487 c⁄° *
	t«me
);

489 
__ölöe
 
	$PCI_IOV_ATTACH
(
devi˚_t
 
dev
, devi˚_à
chûd
,

490 
nvli°
 *
pf_schema
,

491 
nvli°
 *
vf_schema
, c⁄° *
«me
)

493 
kobj›_t
 
_m
;

494 
rc
;

495 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_iov_©èch
);

496 
rc
 = ((
pci_iov_©èch_t
 *Ë
_m
)(
dev
, 
chûd
, 
pf_schema
, 
vf_schema
, 
«me
);

497  (
rc
);

498 
	}
}

501 
kobj›_desc
 
pci_iov_dëach_desc
;

503 
	tpci_iov_dëach_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

505 
__ölöe
 
	$PCI_IOV_DETACH
(
devi˚_t
 
dev
, devi˚_à
chûd
)

507 
kobj›_t
 
_m
;

508 
rc
;

509 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_iov_dëach
);

510 
rc
 = ((
pci_iov_dëach_t
 *Ë
_m
)(
dev
, 
chûd
);

511  (
rc
);

512 
	}
}

515 
kobj›_desc
 
pci_¸óã_iov_chûd_desc
;

517 
devi˚_t
 
	tpci_¸óã_iov_chûd_t
(
	tdevi˚_t
 
	tbus
, devi˚_à
	tpf
, 
	tuöt16_t
 
	trid
,

518 
	tuöt16_t
 
	tvid
, uöt16_à
	tdid
);

520 
__ölöe
 
devi˚_t
 
	$PCI_CREATE_IOV_CHILD
(
devi˚_t
 
bus
, devi˚_à
pf
,

521 
uöt16_t
 
rid
, uöt16_à
vid
,

522 
uöt16_t
 
did
)

524 
kobj›_t
 
_m
;

525 
devi˚_t
 
rc
;

526 
	`KOBJOPLOOKUP
(((
kobj_t
)
bus
)->
›s
,
pci_¸óã_iov_chûd
);

527 
rc
 = ((
pci_¸óã_iov_chûd_t
 *Ë
_m
)(
bus
, 
pf
, 
rid
, 
vid
, 
did
);

528  (
rc
);

529 
	}
}

	@src/nvidia-drm/usb_if.h

14 #i‚de‡
_usb_if_h_


15 
	#_usb_if_h_


	)

18 
kobj›_desc
 
usb_h™dÀ_ªque°_desc
;

20 
	tusb_h™dÀ_ªque°_t
(
	tdevi˚_t
 
	tdev
, c⁄° *
	tªq
,

21  **
	tµå
, 
	tuöt16_t
 *
	t∂í
, uöt16_à
	toff£t
, 
	tuöt8_t
 *
	tp°©e
);

23 
__ölöe
 
	$USB_HANDLE_REQUEST
(
devi˚_t
 
dev
, c⁄° *
ªq
,

24  **
µå
, 
uöt16_t
 *
∂í
, uöt16_à
off£t
, 
uöt8_t
 *
p°©e
)

26 
kobj›_t
 
_m
;

27 
rc
;

28 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
usb_h™dÀ_ªque°
);

29 
rc
 = ((
usb_h™dÀ_ªque°_t
 *Ë
_m
)(
dev
, 
ªq
, 
µå
, 
∂í
, 
off£t
, 
p°©e
);

30  (
rc
);

31 
	}
}

34 
kobj›_desc
 
usb_èke_c⁄åﬁÀr_desc
;

36 
	tusb_èke_c⁄åﬁÀr_t
(
	tdevi˚_t
 
	tdev
);

38 
__ölöe
 
	$USB_TAKE_CONTROLLER
(
devi˚_t
 
dev
)

40 
kobj›_t
 
_m
;

41 
rc
;

42 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
usb_èke_c⁄åﬁÀr
);

43 
rc
 = ((
usb_èke_c⁄åﬁÀr_t
 *Ë
_m
)(
dev
);

44  (
rc
);

45 
	}
}

	@src/nvidia-drm/vnode_if.h

8 
vnode›_desc
 
v›_deÁu…_desc
;

9 
	~"vnode_if_ty≥def.h
"

10 
	~"vnode_if_√w¥Ÿo.h
"

11 
	sv›_i¶ocked_¨gs
 {

12 
v›_gíîic_¨gs
 
	ma_gí
;

13 
vnode
 *
	ma_vp
;

16 
vnode›_desc
 
v›_i¶ocked_desc
;

18 
VOP_ISLOCKED_AP
(
v›_i¶ocked_¨gs
 *);

19 
VOP_ISLOCKED_APV
(
v›_ve˘‹
 *
v›
, 
v›_i¶ocked_¨gs
 *);

21 
__ölöe
 
	$VOP_ISLOCKED
(

22 
vnode
 *
vp
)

24 
v›_i¶ocked_¨gs
 
a
;

26 
a
.
a_gí
.
a_desc
 = &
v›_i¶ocked_desc
;

27 
a
.
a_vp
 = 
vp
;

28  (
	`VOP_ISLOCKED_APV
(
vp
->
v_›
, &
a
));

29 
	}
}

31 
	sv›_lookup_¨gs
 {

32 
v›_gíîic_¨gs
 
	ma_gí
;

33 
vnode
 *
	ma_dvp
;

34 
vnode
 **
	ma_vµ
;

35 
comp⁄íäame
 *
	ma_˙p
;

38 
vnode›_desc
 
v›_lookup_desc
;

40 
VOP_LOOKUP_AP
(
v›_lookup_¨gs
 *);

41 
VOP_LOOKUP_APV
(
v›_ve˘‹
 *
v›
, 
v›_lookup_¨gs
 *);

43 
__ölöe
 
	$VOP_LOOKUP
(

44 
vnode
 *
dvp
,

45 
vnode
 **
vµ
,

46 
comp⁄íäame
 *
˙p
)

48 
v›_lookup_¨gs
 
a
;

50 
a
.
a_gí
.
a_desc
 = &
v›_lookup_desc
;

51 
a
.
a_dvp
 = 
dvp
;

52 
a
.
a_vµ
 = 
vµ
;

53 
a
.
a_˙p
 = 
˙p
;

54  (
	`VOP_LOOKUP_APV
(
dvp
->
v_›
, &
a
));

55 
	}
}

57 
	sv›_ˇchedlookup_¨gs
 {

58 
v›_gíîic_¨gs
 
	ma_gí
;

59 
vnode
 *
	ma_dvp
;

60 
vnode
 **
	ma_vµ
;

61 
comp⁄íäame
 *
	ma_˙p
;

64 
vnode›_desc
 
v›_ˇchedlookup_desc
;

66 
VOP_CACHEDLOOKUP_AP
(
v›_ˇchedlookup_¨gs
 *);

67 
VOP_CACHEDLOOKUP_APV
(
v›_ve˘‹
 *
v›
, 
v›_ˇchedlookup_¨gs
 *);

69 
__ölöe
 
	$VOP_CACHEDLOOKUP
(

70 
vnode
 *
dvp
,

71 
vnode
 **
vµ
,

72 
comp⁄íäame
 *
˙p
)

74 
v›_ˇchedlookup_¨gs
 
a
;

76 
a
.
a_gí
.
a_desc
 = &
v›_ˇchedlookup_desc
;

77 
a
.
a_dvp
 = 
dvp
;

78 
a
.
a_vµ
 = 
vµ
;

79 
a
.
a_˙p
 = 
˙p
;

80  (
	`VOP_CACHEDLOOKUP_APV
(
dvp
->
v_›
, &
a
));

81 
	}
}

83 
	sv›_¸óã_¨gs
 {

84 
v›_gíîic_¨gs
 
	ma_gí
;

85 
vnode
 *
	ma_dvp
;

86 
vnode
 **
	ma_vµ
;

87 
comp⁄íäame
 *
	ma_˙p
;

88 
v©å
 *
	ma_v≠
;

91 
vnode›_desc
 
v›_¸óã_desc
;

93 
VOP_CREATE_AP
(
v›_¸óã_¨gs
 *);

94 
VOP_CREATE_APV
(
v›_ve˘‹
 *
v›
, 
v›_¸óã_¨gs
 *);

96 
__ölöe
 
	$VOP_CREATE
(

97 
vnode
 *
dvp
,

98 
vnode
 **
vµ
,

99 
comp⁄íäame
 *
˙p
,

100 
v©å
 *
v≠
)

102 
v›_¸óã_¨gs
 
a
;

104 
a
.
a_gí
.
a_desc
 = &
v›_¸óã_desc
;

105 
a
.
a_dvp
 = 
dvp
;

106 
a
.
a_vµ
 = 
vµ
;

107 
a
.
a_˙p
 = 
˙p
;

108 
a
.
a_v≠
 = 
v≠
;

109  (
	`VOP_CREATE_APV
(
dvp
->
v_›
, &
a
));

110 
	}
}

112 
	sv›_whôeout_¨gs
 {

113 
v›_gíîic_¨gs
 
	ma_gí
;

114 
vnode
 *
	ma_dvp
;

115 
comp⁄íäame
 *
	ma_˙p
;

116 
	ma_Êags
;

119 
vnode›_desc
 
v›_whôeout_desc
;

121 
VOP_WHITEOUT_AP
(
v›_whôeout_¨gs
 *);

122 
VOP_WHITEOUT_APV
(
v›_ve˘‹
 *
v›
, 
v›_whôeout_¨gs
 *);

124 
__ölöe
 
	$VOP_WHITEOUT
(

125 
vnode
 *
dvp
,

126 
comp⁄íäame
 *
˙p
,

127 
Êags
)

129 
v›_whôeout_¨gs
 
a
;

131 
a
.
a_gí
.
a_desc
 = &
v›_whôeout_desc
;

132 
a
.
a_dvp
 = 
dvp
;

133 
a
.
a_˙p
 = 
˙p
;

134 
a
.
a_Êags
 = 
Êags
;

135  (
	`VOP_WHITEOUT_APV
(
dvp
->
v_›
, &
a
));

136 
	}
}

138 
	sv›_mknod_¨gs
 {

139 
v›_gíîic_¨gs
 
	ma_gí
;

140 
vnode
 *
	ma_dvp
;

141 
vnode
 **
	ma_vµ
;

142 
comp⁄íäame
 *
	ma_˙p
;

143 
v©å
 *
	ma_v≠
;

146 
vnode›_desc
 
v›_mknod_desc
;

148 
VOP_MKNOD_AP
(
v›_mknod_¨gs
 *);

149 
VOP_MKNOD_APV
(
v›_ve˘‹
 *
v›
, 
v›_mknod_¨gs
 *);

151 
__ölöe
 
	$VOP_MKNOD
(

152 
vnode
 *
dvp
,

153 
vnode
 **
vµ
,

154 
comp⁄íäame
 *
˙p
,

155 
v©å
 *
v≠
)

157 
v›_mknod_¨gs
 
a
;

159 
a
.
a_gí
.
a_desc
 = &
v›_mknod_desc
;

160 
a
.
a_dvp
 = 
dvp
;

161 
a
.
a_vµ
 = 
vµ
;

162 
a
.
a_˙p
 = 
˙p
;

163 
a
.
a_v≠
 = 
v≠
;

164  (
	`VOP_MKNOD_APV
(
dvp
->
v_›
, &
a
));

165 
	}
}

167 
	sv›_›í_¨gs
 {

168 
v›_gíîic_¨gs
 
	ma_gí
;

169 
vnode
 *
	ma_vp
;

170 
	ma_mode
;

171 
u¸ed
 *
	ma_¸ed
;

172 
thªad
 *
	ma_td
;

173 
fûe
 *
	ma_Â
;

176 
vnode›_desc
 
v›_›í_desc
;

178 
VOP_OPEN_AP
(
v›_›í_¨gs
 *);

179 
VOP_OPEN_APV
(
v›_ve˘‹
 *
v›
, 
v›_›í_¨gs
 *);

181 
__ölöe
 
	$VOP_OPEN
(

182 
vnode
 *
vp
,

183 
mode
,

184 
u¸ed
 *
¸ed
,

185 
thªad
 *
td
,

186 
fûe
 *
Â
)

188 
v›_›í_¨gs
 
a
;

190 
a
.
a_gí
.
a_desc
 = &
v›_›í_desc
;

191 
a
.
a_vp
 = 
vp
;

192 
a
.
a_mode
 = 
mode
;

193 
a
.
a_¸ed
 = 
¸ed
;

194 
a
.
a_td
 = 
td
;

195 
a
.
a_Â
 = 
Â
;

196  (
	`VOP_OPEN_APV
(
vp
->
v_›
, &
a
));

197 
	}
}

199 
	sv›_˛o£_¨gs
 {

200 
v›_gíîic_¨gs
 
	ma_gí
;

201 
vnode
 *
	ma_vp
;

202 
	ma_fÊag
;

203 
u¸ed
 *
	ma_¸ed
;

204 
thªad
 *
	ma_td
;

207 
vnode›_desc
 
v›_˛o£_desc
;

209 
VOP_CLOSE_AP
(
v›_˛o£_¨gs
 *);

210 
VOP_CLOSE_APV
(
v›_ve˘‹
 *
v›
, 
v›_˛o£_¨gs
 *);

212 
__ölöe
 
	$VOP_CLOSE
(

213 
vnode
 *
vp
,

214 
fÊag
,

215 
u¸ed
 *
¸ed
,

216 
thªad
 *
td
)

218 
v›_˛o£_¨gs
 
a
;

220 
a
.
a_gí
.
a_desc
 = &
v›_˛o£_desc
;

221 
a
.
a_vp
 = 
vp
;

222 
a
.
a_fÊag
 = 
fÊag
;

223 
a
.
a_¸ed
 = 
¸ed
;

224 
a
.
a_td
 = 
td
;

225  (
	`VOP_CLOSE_APV
(
vp
->
v_›
, &
a
));

226 
	}
}

228 
	sv›_ac˚ss_¨gs
 {

229 
v›_gíîic_¨gs
 
	ma_gí
;

230 
vnode
 *
	ma_vp
;

231 
accmode_t
 
	ma_accmode
;

232 
u¸ed
 *
	ma_¸ed
;

233 
thªad
 *
	ma_td
;

236 
vnode›_desc
 
v›_ac˚ss_desc
;

238 
VOP_ACCESS_AP
(
v›_ac˚ss_¨gs
 *);

239 
VOP_ACCESS_APV
(
v›_ve˘‹
 *
v›
, 
v›_ac˚ss_¨gs
 *);

241 
__ölöe
 
	$VOP_ACCESS
(

242 
vnode
 *
vp
,

243 
accmode_t
 
accmode
,

244 
u¸ed
 *
¸ed
,

245 
thªad
 *
td
)

247 
v›_ac˚ss_¨gs
 
a
;

249 
a
.
a_gí
.
a_desc
 = &
v›_ac˚ss_desc
;

250 
a
.
a_vp
 = 
vp
;

251 
a
.
a_accmode
 = 
accmode
;

252 
a
.
a_¸ed
 = 
¸ed
;

253 
a
.
a_td
 = 
td
;

254  (
	`VOP_ACCESS_APV
(
vp
->
v_›
, &
a
));

255 
	}
}

257 
	sv›_ac˚ssx_¨gs
 {

258 
v›_gíîic_¨gs
 
	ma_gí
;

259 
vnode
 *
	ma_vp
;

260 
accmode_t
 
	ma_accmode
;

261 
u¸ed
 *
	ma_¸ed
;

262 
thªad
 *
	ma_td
;

265 
vnode›_desc
 
v›_ac˚ssx_desc
;

267 
VOP_ACCESSX_AP
(
v›_ac˚ssx_¨gs
 *);

268 
VOP_ACCESSX_APV
(
v›_ve˘‹
 *
v›
, 
v›_ac˚ssx_¨gs
 *);

270 
__ölöe
 
	$VOP_ACCESSX
(

271 
vnode
 *
vp
,

272 
accmode_t
 
accmode
,

273 
u¸ed
 *
¸ed
,

274 
thªad
 *
td
)

276 
v›_ac˚ssx_¨gs
 
a
;

278 
a
.
a_gí
.
a_desc
 = &
v›_ac˚ssx_desc
;

279 
a
.
a_vp
 = 
vp
;

280 
a
.
a_accmode
 = 
accmode
;

281 
a
.
a_¸ed
 = 
¸ed
;

282 
a
.
a_td
 = 
td
;

283  (
	`VOP_ACCESSX_APV
(
vp
->
v_›
, &
a
));

284 
	}
}

286 
	sv›_gë©å_¨gs
 {

287 
v›_gíîic_¨gs
 
	ma_gí
;

288 
vnode
 *
	ma_vp
;

289 
v©å
 *
	ma_v≠
;

290 
u¸ed
 *
	ma_¸ed
;

293 
vnode›_desc
 
v›_gë©å_desc
;

295 
VOP_GETATTR_AP
(
v›_gë©å_¨gs
 *);

296 
VOP_GETATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë©å_¨gs
 *);

298 
__ölöe
 
	$VOP_GETATTR
(

299 
vnode
 *
vp
,

300 
v©å
 *
v≠
,

301 
u¸ed
 *
¸ed
)

303 
v›_gë©å_¨gs
 
a
;

305 
a
.
a_gí
.
a_desc
 = &
v›_gë©å_desc
;

306 
a
.
a_vp
 = 
vp
;

307 
a
.
a_v≠
 = 
v≠
;

308 
a
.
a_¸ed
 = 
¸ed
;

309  (
	`VOP_GETATTR_APV
(
vp
->
v_›
, &
a
));

310 
	}
}

312 
	sv›_£èâr_¨gs
 {

313 
v›_gíîic_¨gs
 
	ma_gí
;

314 
vnode
 *
	ma_vp
;

315 
v©å
 *
	ma_v≠
;

316 
u¸ed
 *
	ma_¸ed
;

319 
vnode›_desc
 
v›_£èâr_desc
;

321 
VOP_SETATTR_AP
(
v›_£èâr_¨gs
 *);

322 
VOP_SETATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_£èâr_¨gs
 *);

324 
__ölöe
 
	$VOP_SETATTR
(

325 
vnode
 *
vp
,

326 
v©å
 *
v≠
,

327 
u¸ed
 *
¸ed
)

329 
v›_£èâr_¨gs
 
a
;

331 
a
.
a_gí
.
a_desc
 = &
v›_£èâr_desc
;

332 
a
.
a_vp
 = 
vp
;

333 
a
.
a_v≠
 = 
v≠
;

334 
a
.
a_¸ed
 = 
¸ed
;

335  (
	`VOP_SETATTR_APV
(
vp
->
v_›
, &
a
));

336 
	}
}

338 
	sv›_m¨k©ime_¨gs
 {

339 
v›_gíîic_¨gs
 
	ma_gí
;

340 
vnode
 *
	ma_vp
;

343 
vnode›_desc
 
v›_m¨k©ime_desc
;

345 
VOP_MARKATIME_AP
(
v›_m¨k©ime_¨gs
 *);

346 
VOP_MARKATIME_APV
(
v›_ve˘‹
 *
v›
, 
v›_m¨k©ime_¨gs
 *);

348 
__ölöe
 
	$VOP_MARKATIME
(

349 
vnode
 *
vp
)

351 
v›_m¨k©ime_¨gs
 
a
;

353 
a
.
a_gí
.
a_desc
 = &
v›_m¨k©ime_desc
;

354 
a
.
a_vp
 = 
vp
;

355  (
	`VOP_MARKATIME_APV
(
vp
->
v_›
, &
a
));

356 
	}
}

358 
	sv›_ªad_¨gs
 {

359 
v›_gíîic_¨gs
 
	ma_gí
;

360 
vnode
 *
	ma_vp
;

361 
uio
 *
	ma_uio
;

362 
	ma_ioÊag
;

363 
u¸ed
 *
	ma_¸ed
;

366 
vnode›_desc
 
v›_ªad_desc
;

368 
VOP_READ_AP
(
v›_ªad_¨gs
 *);

369 
VOP_READ_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªad_¨gs
 *);

371 
__ölöe
 
	$VOP_READ
(

372 
vnode
 *
vp
,

373 
uio
 *uio,

374 
ioÊag
,

375 
u¸ed
 *
¸ed
)

377 
v›_ªad_¨gs
 
a
;

379 
a
.
a_gí
.
a_desc
 = &
v›_ªad_desc
;

380 
a
.
a_vp
 = 
vp
;

381 
a
.
a_uio
 = 
uio
;

382 
a
.
a_ioÊag
 = 
ioÊag
;

383 
a
.
a_¸ed
 = 
¸ed
;

384  (
	`VOP_READ_APV
(
vp
->
v_›
, &
a
));

385 
	}
}

387 
	sv›_wrôe_¨gs
 {

388 
v›_gíîic_¨gs
 
	ma_gí
;

389 
vnode
 *
	ma_vp
;

390 
uio
 *
	ma_uio
;

391 
	ma_ioÊag
;

392 
u¸ed
 *
	ma_¸ed
;

395 
vnode›_desc
 
v›_wrôe_desc
;

397 
VOP_WRITE_AP
(
v›_wrôe_¨gs
 *);

398 
VOP_WRITE_APV
(
v›_ve˘‹
 *
v›
, 
v›_wrôe_¨gs
 *);

400 
__ölöe
 
	$VOP_WRITE
(

401 
vnode
 *
vp
,

402 
uio
 *uio,

403 
ioÊag
,

404 
u¸ed
 *
¸ed
)

406 
v›_wrôe_¨gs
 
a
;

408 
a
.
a_gí
.
a_desc
 = &
v›_wrôe_desc
;

409 
a
.
a_vp
 = 
vp
;

410 
a
.
a_uio
 = 
uio
;

411 
a
.
a_ioÊag
 = 
ioÊag
;

412 
a
.
a_¸ed
 = 
¸ed
;

413  (
	`VOP_WRITE_APV
(
vp
->
v_›
, &
a
));

414 
	}
}

416 
	sv›_io˘l_¨gs
 {

417 
v›_gíîic_¨gs
 
	ma_gí
;

418 
vnode
 *
	ma_vp
;

419 
u_l⁄g
 
	ma_comm™d
;

420 *
	ma_d©a
;

421 
	ma_fÊag
;

422 
u¸ed
 *
	ma_¸ed
;

423 
thªad
 *
	ma_td
;

426 
vnode›_desc
 
v›_io˘l_desc
;

428 
VOP_IOCTL_AP
(
v›_io˘l_¨gs
 *);

429 
VOP_IOCTL_APV
(
v›_ve˘‹
 *
v›
, 
v›_io˘l_¨gs
 *);

431 
__ölöe
 
	$VOP_IOCTL
(

432 
vnode
 *
vp
,

433 
u_l⁄g
 
comm™d
,

434 *
d©a
,

435 
fÊag
,

436 
u¸ed
 *
¸ed
,

437 
thªad
 *
td
)

439 
v›_io˘l_¨gs
 
a
;

441 
a
.
a_gí
.
a_desc
 = &
v›_io˘l_desc
;

442 
a
.
a_vp
 = 
vp
;

443 
a
.
a_comm™d
 = 
comm™d
;

444 
a
.
a_d©a
 = 
d©a
;

445 
a
.
a_fÊag
 = 
fÊag
;

446 
a
.
a_¸ed
 = 
¸ed
;

447 
a
.
a_td
 = 
td
;

448  (
	`VOP_IOCTL_APV
(
vp
->
v_›
, &
a
));

449 
	}
}

451 
	sv›_pﬁl_¨gs
 {

452 
v›_gíîic_¨gs
 
	ma_gí
;

453 
vnode
 *
	ma_vp
;

454 
	ma_evíts
;

455 
u¸ed
 *
	ma_¸ed
;

456 
thªad
 *
	ma_td
;

459 
vnode›_desc
 
v›_pﬁl_desc
;

461 
VOP_POLL_AP
(
v›_pﬁl_¨gs
 *);

462 
VOP_POLL_APV
(
v›_ve˘‹
 *
v›
, 
v›_pﬁl_¨gs
 *);

464 
__ölöe
 
	$VOP_POLL
(

465 
vnode
 *
vp
,

466 
evíts
,

467 
u¸ed
 *
¸ed
,

468 
thªad
 *
td
)

470 
v›_pﬁl_¨gs
 
a
;

472 
a
.
a_gí
.
a_desc
 = &
v›_pﬁl_desc
;

473 
a
.
a_vp
 = 
vp
;

474 
a
.
a_evíts
 = 
evíts
;

475 
a
.
a_¸ed
 = 
¸ed
;

476 
a
.
a_td
 = 
td
;

477  (
	`VOP_POLL_APV
(
vp
->
v_›
, &
a
));

478 
	}
}

480 
	sv›_kqfûãr_¨gs
 {

481 
v›_gíîic_¨gs
 
	ma_gí
;

482 
vnode
 *
	ma_vp
;

483 
knŸe
 *
	ma_kn
;

486 
vnode›_desc
 
v›_kqfûãr_desc
;

488 
VOP_KQFILTER_AP
(
v›_kqfûãr_¨gs
 *);

489 
VOP_KQFILTER_APV
(
v›_ve˘‹
 *
v›
, 
v›_kqfûãr_¨gs
 *);

491 
__ölöe
 
	$VOP_KQFILTER
(

492 
vnode
 *
vp
,

493 
knŸe
 *
kn
)

495 
v›_kqfûãr_¨gs
 
a
;

497 
a
.
a_gí
.
a_desc
 = &
v›_kqfûãr_desc
;

498 
a
.
a_vp
 = 
vp
;

499 
a
.
a_kn
 = 
kn
;

500  (
	`VOP_KQFILTER_APV
(
vp
->
v_›
, &
a
));

501 
	}
}

503 
	sv›_ªvoke_¨gs
 {

504 
v›_gíîic_¨gs
 
	ma_gí
;

505 
vnode
 *
	ma_vp
;

506 
	ma_Êags
;

509 
vnode›_desc
 
v›_ªvoke_desc
;

511 
VOP_REVOKE_AP
(
v›_ªvoke_¨gs
 *);

512 
VOP_REVOKE_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªvoke_¨gs
 *);

514 
__ölöe
 
	$VOP_REVOKE
(

515 
vnode
 *
vp
,

516 
Êags
)

518 
v›_ªvoke_¨gs
 
a
;

520 
a
.
a_gí
.
a_desc
 = &
v›_ªvoke_desc
;

521 
a
.
a_vp
 = 
vp
;

522 
a
.
a_Êags
 = 
Êags
;

523  (
	`VOP_REVOKE_APV
(
vp
->
v_›
, &
a
));

524 
	}
}

526 
	sv›_fsync_¨gs
 {

527 
v›_gíîic_¨gs
 
	ma_gí
;

528 
vnode
 *
	ma_vp
;

529 
	ma_waôf‹
;

530 
thªad
 *
	ma_td
;

533 
vnode›_desc
 
v›_fsync_desc
;

535 
VOP_FSYNC_AP
(
v›_fsync_¨gs
 *);

536 
VOP_FSYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_fsync_¨gs
 *);

538 
__ölöe
 
	$VOP_FSYNC
(

539 
vnode
 *
vp
,

540 
waôf‹
,

541 
thªad
 *
td
)

543 
v›_fsync_¨gs
 
a
;

545 
a
.
a_gí
.
a_desc
 = &
v›_fsync_desc
;

546 
a
.
a_vp
 = 
vp
;

547 
a
.
a_waôf‹
 = 
waôf‹
;

548 
a
.
a_td
 = 
td
;

549  (
	`VOP_FSYNC_APV
(
vp
->
v_›
, &
a
));

550 
	}
}

552 
	sv›_ªmove_¨gs
 {

553 
v›_gíîic_¨gs
 
	ma_gí
;

554 
vnode
 *
	ma_dvp
;

555 
vnode
 *
	ma_vp
;

556 
comp⁄íäame
 *
	ma_˙p
;

559 
vnode›_desc
 
v›_ªmove_desc
;

561 
VOP_REMOVE_AP
(
v›_ªmove_¨gs
 *);

562 
VOP_REMOVE_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªmove_¨gs
 *);

564 
__ölöe
 
	$VOP_REMOVE
(

565 
vnode
 *
dvp
,

566 
vnode
 *
vp
,

567 
comp⁄íäame
 *
˙p
)

569 
v›_ªmove_¨gs
 
a
;

571 
a
.
a_gí
.
a_desc
 = &
v›_ªmove_desc
;

572 
a
.
a_dvp
 = 
dvp
;

573 
a
.
a_vp
 = 
vp
;

574 
a
.
a_˙p
 = 
˙p
;

575  (
	`VOP_REMOVE_APV
(
dvp
->
v_›
, &
a
));

576 
	}
}

578 
	sv›_lök_¨gs
 {

579 
v›_gíîic_¨gs
 
	ma_gí
;

580 
vnode
 *
	ma_tdvp
;

581 
vnode
 *
	ma_vp
;

582 
comp⁄íäame
 *
	ma_˙p
;

585 
vnode›_desc
 
v›_lök_desc
;

587 
VOP_LINK_AP
(
v›_lök_¨gs
 *);

588 
VOP_LINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_lök_¨gs
 *);

590 
__ölöe
 
	$VOP_LINK
(

591 
vnode
 *
tdvp
,

592 
vnode
 *
vp
,

593 
comp⁄íäame
 *
˙p
)

595 
v›_lök_¨gs
 
a
;

597 
a
.
a_gí
.
a_desc
 = &
v›_lök_desc
;

598 
a
.
a_tdvp
 = 
tdvp
;

599 
a
.
a_vp
 = 
vp
;

600 
a
.
a_˙p
 = 
˙p
;

601  (
	`VOP_LINK_APV
(
tdvp
->
v_›
, &
a
));

602 
	}
}

604 
	sv›_ª«me_¨gs
 {

605 
v›_gíîic_¨gs
 
	ma_gí
;

606 
vnode
 *
	ma_fdvp
;

607 
vnode
 *
	ma_fvp
;

608 
comp⁄íäame
 *
	ma_f˙p
;

609 
vnode
 *
	ma_tdvp
;

610 
vnode
 *
	ma_tvp
;

611 
comp⁄íäame
 *
	ma_t˙p
;

614 
vnode›_desc
 
v›_ª«me_desc
;

616 
VOP_RENAME_AP
(
v›_ª«me_¨gs
 *);

617 
VOP_RENAME_APV
(
v›_ve˘‹
 *
v›
, 
v›_ª«me_¨gs
 *);

619 
__ölöe
 
	$VOP_RENAME
(

620 
vnode
 *
fdvp
,

621 
vnode
 *
fvp
,

622 
comp⁄íäame
 *
f˙p
,

623 
vnode
 *
tdvp
,

624 
vnode
 *
tvp
,

625 
comp⁄íäame
 *
t˙p
)

627 
v›_ª«me_¨gs
 
a
;

629 
a
.
a_gí
.
a_desc
 = &
v›_ª«me_desc
;

630 
a
.
a_fdvp
 = 
fdvp
;

631 
a
.
a_fvp
 = 
fvp
;

632 
a
.
a_f˙p
 = 
f˙p
;

633 
a
.
a_tdvp
 = 
tdvp
;

634 
a
.
a_tvp
 = 
tvp
;

635 
a
.
a_t˙p
 = 
t˙p
;

636  (
	`VOP_RENAME_APV
(
fdvp
->
v_›
, &
a
));

637 
	}
}

639 
	sv›_mkdú_¨gs
 {

640 
v›_gíîic_¨gs
 
	ma_gí
;

641 
vnode
 *
	ma_dvp
;

642 
vnode
 **
	ma_vµ
;

643 
comp⁄íäame
 *
	ma_˙p
;

644 
v©å
 *
	ma_v≠
;

647 
vnode›_desc
 
v›_mkdú_desc
;

649 
VOP_MKDIR_AP
(
v›_mkdú_¨gs
 *);

650 
VOP_MKDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_mkdú_¨gs
 *);

652 
__ölöe
 
	$VOP_MKDIR
(

653 
vnode
 *
dvp
,

654 
vnode
 **
vµ
,

655 
comp⁄íäame
 *
˙p
,

656 
v©å
 *
v≠
)

658 
v›_mkdú_¨gs
 
a
;

660 
a
.
a_gí
.
a_desc
 = &
v›_mkdú_desc
;

661 
a
.
a_dvp
 = 
dvp
;

662 
a
.
a_vµ
 = 
vµ
;

663 
a
.
a_˙p
 = 
˙p
;

664 
a
.
a_v≠
 = 
v≠
;

665  (
	`VOP_MKDIR_APV
(
dvp
->
v_›
, &
a
));

666 
	}
}

668 
	sv›_rmdú_¨gs
 {

669 
v›_gíîic_¨gs
 
	ma_gí
;

670 
vnode
 *
	ma_dvp
;

671 
vnode
 *
	ma_vp
;

672 
comp⁄íäame
 *
	ma_˙p
;

675 
vnode›_desc
 
v›_rmdú_desc
;

677 
VOP_RMDIR_AP
(
v›_rmdú_¨gs
 *);

678 
VOP_RMDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_rmdú_¨gs
 *);

680 
__ölöe
 
	$VOP_RMDIR
(

681 
vnode
 *
dvp
,

682 
vnode
 *
vp
,

683 
comp⁄íäame
 *
˙p
)

685 
v›_rmdú_¨gs
 
a
;

687 
a
.
a_gí
.
a_desc
 = &
v›_rmdú_desc
;

688 
a
.
a_dvp
 = 
dvp
;

689 
a
.
a_vp
 = 
vp
;

690 
a
.
a_˙p
 = 
˙p
;

691  (
	`VOP_RMDIR_APV
(
dvp
->
v_›
, &
a
));

692 
	}
}

694 
	sv›_symlök_¨gs
 {

695 
v›_gíîic_¨gs
 
	ma_gí
;

696 
vnode
 *
	ma_dvp
;

697 
vnode
 **
	ma_vµ
;

698 
comp⁄íäame
 *
	ma_˙p
;

699 
v©å
 *
	ma_v≠
;

700 *
	ma_èrgë
;

703 
vnode›_desc
 
v›_symlök_desc
;

705 
VOP_SYMLINK_AP
(
v›_symlök_¨gs
 *);

706 
VOP_SYMLINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_symlök_¨gs
 *);

708 
__ölöe
 
	$VOP_SYMLINK
(

709 
vnode
 *
dvp
,

710 
vnode
 **
vµ
,

711 
comp⁄íäame
 *
˙p
,

712 
v©å
 *
v≠
,

713 *
èrgë
)

715 
v›_symlök_¨gs
 
a
;

717 
a
.
a_gí
.
a_desc
 = &
v›_symlök_desc
;

718 
a
.
a_dvp
 = 
dvp
;

719 
a
.
a_vµ
 = 
vµ
;

720 
a
.
a_˙p
 = 
˙p
;

721 
a
.
a_v≠
 = 
v≠
;

722 
a
.
a_èrgë
 = 
èrgë
;

723  (
	`VOP_SYMLINK_APV
(
dvp
->
v_›
, &
a
));

724 
	}
}

726 
	sv›_ªaddú_¨gs
 {

727 
v›_gíîic_¨gs
 
	ma_gí
;

728 
vnode
 *
	ma_vp
;

729 
uio
 *
	ma_uio
;

730 
u¸ed
 *
	ma_¸ed
;

731 *
	ma_eofÊag
;

732 *
	ma_ncookõs
;

733 
u_l⁄g
 **
	ma_cookõs
;

736 
vnode›_desc
 
v›_ªaddú_desc
;

738 
VOP_READDIR_AP
(
v›_ªaddú_¨gs
 *);

739 
VOP_READDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªaddú_¨gs
 *);

741 
__ölöe
 
	$VOP_READDIR
(

742 
vnode
 *
vp
,

743 
uio
 *uio,

744 
u¸ed
 *
¸ed
,

745 *
eofÊag
,

746 *
ncookõs
,

747 
u_l⁄g
 **
cookõs
)

749 
v›_ªaddú_¨gs
 
a
;

751 
a
.
a_gí
.
a_desc
 = &
v›_ªaddú_desc
;

752 
a
.
a_vp
 = 
vp
;

753 
a
.
a_uio
 = 
uio
;

754 
a
.
a_¸ed
 = 
¸ed
;

755 
a
.
a_eofÊag
 = 
eofÊag
;

756 
a
.
a_ncookõs
 = 
ncookõs
;

757 
a
.
a_cookõs
 = 
cookõs
;

758  (
	`VOP_READDIR_APV
(
vp
->
v_›
, &
a
));

759 
	}
}

761 
	sv›_ªadlök_¨gs
 {

762 
v›_gíîic_¨gs
 
	ma_gí
;

763 
vnode
 *
	ma_vp
;

764 
uio
 *
	ma_uio
;

765 
u¸ed
 *
	ma_¸ed
;

768 
vnode›_desc
 
v›_ªadlök_desc
;

770 
VOP_READLINK_AP
(
v›_ªadlök_¨gs
 *);

771 
VOP_READLINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªadlök_¨gs
 *);

773 
__ölöe
 
	$VOP_READLINK
(

774 
vnode
 *
vp
,

775 
uio
 *uio,

776 
u¸ed
 *
¸ed
)

778 
v›_ªadlök_¨gs
 
a
;

780 
a
.
a_gí
.
a_desc
 = &
v›_ªadlök_desc
;

781 
a
.
a_vp
 = 
vp
;

782 
a
.
a_uio
 = 
uio
;

783 
a
.
a_¸ed
 = 
¸ed
;

784  (
	`VOP_READLINK_APV
(
vp
->
v_›
, &
a
));

785 
	}
}

787 
	sv›_öa˘ive_¨gs
 {

788 
v›_gíîic_¨gs
 
	ma_gí
;

789 
vnode
 *
	ma_vp
;

790 
thªad
 *
	ma_td
;

793 
vnode›_desc
 
v›_öa˘ive_desc
;

795 
VOP_INACTIVE_AP
(
v›_öa˘ive_¨gs
 *);

796 
VOP_INACTIVE_APV
(
v›_ve˘‹
 *
v›
, 
v›_öa˘ive_¨gs
 *);

798 
__ölöe
 
	$VOP_INACTIVE
(

799 
vnode
 *
vp
,

800 
thªad
 *
td
)

802 
v›_öa˘ive_¨gs
 
a
;

804 
a
.
a_gí
.
a_desc
 = &
v›_öa˘ive_desc
;

805 
a
.
a_vp
 = 
vp
;

806 
a
.
a_td
 = 
td
;

807  (
	`VOP_INACTIVE_APV
(
vp
->
v_›
, &
a
));

808 
	}
}

810 
	sv›_ª˛aim_¨gs
 {

811 
v›_gíîic_¨gs
 
	ma_gí
;

812 
vnode
 *
	ma_vp
;

813 
thªad
 *
	ma_td
;

816 
vnode›_desc
 
v›_ª˛aim_desc
;

818 
VOP_RECLAIM_AP
(
v›_ª˛aim_¨gs
 *);

819 
VOP_RECLAIM_APV
(
v›_ve˘‹
 *
v›
, 
v›_ª˛aim_¨gs
 *);

821 
__ölöe
 
	$VOP_RECLAIM
(

822 
vnode
 *
vp
,

823 
thªad
 *
td
)

825 
v›_ª˛aim_¨gs
 
a
;

827 
a
.
a_gí
.
a_desc
 = &
v›_ª˛aim_desc
;

828 
a
.
a_vp
 = 
vp
;

829 
a
.
a_td
 = 
td
;

830  (
	`VOP_RECLAIM_APV
(
vp
->
v_›
, &
a
));

831 
	}
}

833 
	sv›_lock1_¨gs
 {

834 
v›_gíîic_¨gs
 
	ma_gí
;

835 
vnode
 *
	ma_vp
;

836 
	ma_Êags
;

837 *
	ma_fûe
;

838 
	ma_löe
;

841 
vnode›_desc
 
v›_lock1_desc
;

843 
VOP_LOCK1_AP
(
v›_lock1_¨gs
 *);

844 
VOP_LOCK1_APV
(
v›_ve˘‹
 *
v›
, 
v›_lock1_¨gs
 *);

846 
__ölöe
 
	$VOP_LOCK1
(

847 
vnode
 *
vp
,

848 
Êags
,

849 *
fûe
,

850 
löe
)

852 
v›_lock1_¨gs
 
a
;

854 
a
.
a_gí
.
a_desc
 = &
v›_lock1_desc
;

855 
a
.
a_vp
 = 
vp
;

856 
a
.
a_Êags
 = 
Êags
;

857 
a
.
a_fûe
 = 
fûe
;

858 
a
.
a_löe
 = 
löe
;

859  (
	`VOP_LOCK1_APV
(
vp
->
v_›
, &
a
));

860 
	}
}

862 
	sv›_u∆ock_¨gs
 {

863 
v›_gíîic_¨gs
 
	ma_gí
;

864 
vnode
 *
	ma_vp
;

865 
	ma_Êags
;

868 
vnode›_desc
 
v›_u∆ock_desc
;

870 
VOP_UNLOCK_AP
(
v›_u∆ock_¨gs
 *);

871 
VOP_UNLOCK_APV
(
v›_ve˘‹
 *
v›
, 
v›_u∆ock_¨gs
 *);

873 
__ölöe
 
	$VOP_UNLOCK
(

874 
vnode
 *
vp
,

875 
Êags
)

877 
v›_u∆ock_¨gs
 
a
;

879 
a
.
a_gí
.
a_desc
 = &
v›_u∆ock_desc
;

880 
a
.
a_vp
 = 
vp
;

881 
a
.
a_Êags
 = 
Êags
;

882  (
	`VOP_UNLOCK_APV
(
vp
->
v_›
, &
a
));

883 
	}
}

885 
	sv›_bm≠_¨gs
 {

886 
v›_gíîic_¨gs
 
	ma_gí
;

887 
vnode
 *
	ma_vp
;

888 
daddr_t
 
	ma_bn
;

889 
bufobj
 **
	ma_b›
;

890 
daddr_t
 *
	ma_b≈
;

891 *
	ma_ru≈
;

892 *
	ma_runb
;

895 
vnode›_desc
 
v›_bm≠_desc
;

897 
VOP_BMAP_AP
(
v›_bm≠_¨gs
 *);

898 
VOP_BMAP_APV
(
v›_ve˘‹
 *
v›
, 
v›_bm≠_¨gs
 *);

900 
__ölöe
 
	$VOP_BMAP
(

901 
vnode
 *
vp
,

902 
daddr_t
 
bn
,

903 
bufobj
 **
b›
,

904 
daddr_t
 *
b≈
,

905 *
ru≈
,

906 *
runb
)

908 
v›_bm≠_¨gs
 
a
;

910 
a
.
a_gí
.
a_desc
 = &
v›_bm≠_desc
;

911 
a
.
a_vp
 = 
vp
;

912 
a
.
a_bn
 = 
bn
;

913 
a
.
a_b›
 = 
b›
;

914 
a
.
a_b≈
 = 
b≈
;

915 
a
.
a_ru≈
 = 
ru≈
;

916 
a
.
a_runb
 = 
runb
;

917  (
	`VOP_BMAP_APV
(
vp
->
v_›
, &
a
));

918 
	}
}

920 
	sv›_°øãgy_¨gs
 {

921 
v›_gíîic_¨gs
 
	ma_gí
;

922 
vnode
 *
	ma_vp
;

923 
buf
 *
	ma_bp
;

926 
vnode›_desc
 
v›_°øãgy_desc
;

928 
VOP_STRATEGY_AP
(
v›_°øãgy_¨gs
 *);

929 
VOP_STRATEGY_APV
(
v›_ve˘‹
 *
v›
, 
v›_°øãgy_¨gs
 *);

931 
__ölöe
 
	$VOP_STRATEGY
(

932 
vnode
 *
vp
,

933 
buf
 *
bp
)

935 
v›_°øãgy_¨gs
 
a
;

937 
a
.
a_gí
.
a_desc
 = &
v›_°øãgy_desc
;

938 
a
.
a_vp
 = 
vp
;

939 
a
.
a_bp
 = 
bp
;

940  (
	`VOP_STRATEGY_APV
(
vp
->
v_›
, &
a
));

941 
	}
}

943 
	sv›_gëwrôemou¡_¨gs
 {

944 
v›_gíîic_¨gs
 
	ma_gí
;

945 
vnode
 *
	ma_vp
;

946 
mou¡
 **
	ma_mµ
;

949 
vnode›_desc
 
v›_gëwrôemou¡_desc
;

951 
VOP_GETWRITEMOUNT_AP
(
v›_gëwrôemou¡_¨gs
 *);

952 
VOP_GETWRITEMOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëwrôemou¡_¨gs
 *);

954 
__ölöe
 
	$VOP_GETWRITEMOUNT
(

955 
vnode
 *
vp
,

956 
mou¡
 **
mµ
)

958 
v›_gëwrôemou¡_¨gs
 
a
;

960 
a
.
a_gí
.
a_desc
 = &
v›_gëwrôemou¡_desc
;

961 
a
.
a_vp
 = 
vp
;

962 
a
.
a_mµ
 = 
mµ
;

963  (
	`VOP_GETWRITEMOUNT_APV
(
vp
->
v_›
, &
a
));

964 
	}
}

966 
	sv›_¥öt_¨gs
 {

967 
v›_gíîic_¨gs
 
	ma_gí
;

968 
vnode
 *
	ma_vp
;

971 
vnode›_desc
 
v›_¥öt_desc
;

973 
VOP_PRINT_AP
(
v›_¥öt_¨gs
 *);

974 
VOP_PRINT_APV
(
v›_ve˘‹
 *
v›
, 
v›_¥öt_¨gs
 *);

976 
__ölöe
 
	$VOP_PRINT
(

977 
vnode
 *
vp
)

979 
v›_¥öt_¨gs
 
a
;

981 
a
.
a_gí
.
a_desc
 = &
v›_¥öt_desc
;

982 
a
.
a_vp
 = 
vp
;

983  (
	`VOP_PRINT_APV
(
vp
->
v_›
, &
a
));

984 
	}
}

986 
	sv›_∑thc⁄f_¨gs
 {

987 
v›_gíîic_¨gs
 
	ma_gí
;

988 
vnode
 *
	ma_vp
;

989 
	ma_«me
;

990 *
	ma_ªtvÆ
;

993 
vnode›_desc
 
v›_∑thc⁄f_desc
;

995 
VOP_PATHCONF_AP
(
v›_∑thc⁄f_¨gs
 *);

996 
VOP_PATHCONF_APV
(
v›_ve˘‹
 *
v›
, 
v›_∑thc⁄f_¨gs
 *);

998 
__ölöe
 
	$VOP_PATHCONF
(

999 
vnode
 *
vp
,

1000 
«me
,

1001 *
ªtvÆ
)

1003 
v›_∑thc⁄f_¨gs
 
a
;

1005 
a
.
a_gí
.
a_desc
 = &
v›_∑thc⁄f_desc
;

1006 
a
.
a_vp
 = 
vp
;

1007 
a
.
a_«me
 = 
«me
;

1008 
a
.
a_ªtvÆ
 = 
ªtvÆ
;

1009  (
	`VOP_PATHCONF_APV
(
vp
->
v_›
, &
a
));

1010 
	}
}

1012 
	sv›_advlock_¨gs
 {

1013 
v›_gíîic_¨gs
 
	ma_gí
;

1014 
vnode
 *
	ma_vp
;

1015 *
	ma_id
;

1016 
	ma_›
;

1017 
Êock
 *
	ma_Ê
;

1018 
	ma_Êags
;

1021 
vnode›_desc
 
v›_advlock_desc
;

1023 
VOP_ADVLOCK_AP
(
v›_advlock_¨gs
 *);

1024 
VOP_ADVLOCK_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlock_¨gs
 *);

1026 
__ölöe
 
	$VOP_ADVLOCK
(

1027 
vnode
 *
vp
,

1028 *
id
,

1029 
›
,

1030 
Êock
 *
Ê
,

1031 
Êags
)

1033 
v›_advlock_¨gs
 
a
;

1035 
a
.
a_gí
.
a_desc
 = &
v›_advlock_desc
;

1036 
a
.
a_vp
 = 
vp
;

1037 
a
.
a_id
 = 
id
;

1038 
a
.
a_›
 = 
›
;

1039 
a
.
a_Ê
 = 
Ê
;

1040 
a
.
a_Êags
 = 
Êags
;

1041  (
	`VOP_ADVLOCK_APV
(
vp
->
v_›
, &
a
));

1042 
	}
}

1044 
	sv›_advlockasync_¨gs
 {

1045 
v›_gíîic_¨gs
 
	ma_gí
;

1046 
vnode
 *
	ma_vp
;

1047 *
	ma_id
;

1048 
	ma_›
;

1049 
Êock
 *
	ma_Ê
;

1050 
	ma_Êags
;

1051 
èsk
 *
	ma_èsk
;

1052 **
	ma_cookõp
;

1055 
vnode›_desc
 
v›_advlockasync_desc
;

1057 
VOP_ADVLOCKASYNC_AP
(
v›_advlockasync_¨gs
 *);

1058 
VOP_ADVLOCKASYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlockasync_¨gs
 *);

1060 
__ölöe
 
	$VOP_ADVLOCKASYNC
(

1061 
vnode
 *
vp
,

1062 *
id
,

1063 
›
,

1064 
Êock
 *
Ê
,

1065 
Êags
,

1066 
èsk
 *task,

1067 **
cookõp
)

1069 
v›_advlockasync_¨gs
 
a
;

1071 
a
.
a_gí
.
a_desc
 = &
v›_advlockasync_desc
;

1072 
a
.
a_vp
 = 
vp
;

1073 
a
.
a_id
 = 
id
;

1074 
a
.
a_›
 = 
›
;

1075 
a
.
a_Ê
 = 
Ê
;

1076 
a
.
a_Êags
 = 
Êags
;

1077 
a
.
a_èsk
 = 
èsk
;

1078 
a
.
a_cookõp
 = 
cookõp
;

1079  (
	`VOP_ADVLOCKASYNC_APV
(
vp
->
v_›
, &
a
));

1080 
	}
}

1082 
	sv›_advlockpurge_¨gs
 {

1083 
v›_gíîic_¨gs
 
	ma_gí
;

1084 
vnode
 *
	ma_vp
;

1087 
vnode›_desc
 
v›_advlockpurge_desc
;

1089 
VOP_ADVLOCKPURGE_AP
(
v›_advlockpurge_¨gs
 *);

1090 
VOP_ADVLOCKPURGE_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlockpurge_¨gs
 *);

1092 
__ölöe
 
	$VOP_ADVLOCKPURGE
(

1093 
vnode
 *
vp
)

1095 
v›_advlockpurge_¨gs
 
a
;

1097 
a
.
a_gí
.
a_desc
 = &
v›_advlockpurge_desc
;

1098 
a
.
a_vp
 = 
vp
;

1099  (
	`VOP_ADVLOCKPURGE_APV
(
vp
->
v_›
, &
a
));

1100 
	}
}

1102 
	sv›_ªÆlocblks_¨gs
 {

1103 
v›_gíîic_¨gs
 
	ma_gí
;

1104 
vnode
 *
	ma_vp
;

1105 
˛u°î_ßve
 *
	ma_buÊi°
;

1108 
vnode›_desc
 
v›_ªÆlocblks_desc
;

1110 
VOP_REALLOCBLKS_AP
(
v›_ªÆlocblks_¨gs
 *);

1111 
VOP_REALLOCBLKS_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªÆlocblks_¨gs
 *);

1113 
__ölöe
 
	$VOP_REALLOCBLKS
(

1114 
vnode
 *
vp
,

1115 
˛u°î_ßve
 *
buÊi°
)

1117 
v›_ªÆlocblks_¨gs
 
a
;

1119 
a
.
a_gí
.
a_desc
 = &
v›_ªÆlocblks_desc
;

1120 
a
.
a_vp
 = 
vp
;

1121 
a
.
a_buÊi°
 = 
buÊi°
;

1122  (
	`VOP_REALLOCBLKS_APV
(
vp
->
v_›
, &
a
));

1123 
	}
}

1125 
	sv›_gë∑ges_¨gs
 {

1126 
v›_gíîic_¨gs
 
	ma_gí
;

1127 
vnode
 *
	ma_vp
;

1128 
vm_∑ge_t
 *
	ma_m
;

1129 
	ma_cou¡
;

1130 *
	ma_rbehöd
;

1131 *
	ma_øhód
;

1134 
vnode›_desc
 
v›_gë∑ges_desc
;

1136 
VOP_GETPAGES_AP
(
v›_gë∑ges_¨gs
 *);

1137 
VOP_GETPAGES_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë∑ges_¨gs
 *);

1139 
__ölöe
 
	$VOP_GETPAGES
(

1140 
vnode
 *
vp
,

1141 
vm_∑ge_t
 *
m
,

1142 
cou¡
,

1143 *
rbehöd
,

1144 *
øhód
)

1146 
v›_gë∑ges_¨gs
 
a
;

1148 
a
.
a_gí
.
a_desc
 = &
v›_gë∑ges_desc
;

1149 
a
.
a_vp
 = 
vp
;

1150 
a
.
a_m
 = 
m
;

1151 
a
.
a_cou¡
 = 
cou¡
;

1152 
a
.
a_rbehöd
 = 
rbehöd
;

1153 
a
.
a_øhód
 = 
øhód
;

1154  (
	`VOP_GETPAGES_APV
(
vp
->
v_›
, &
a
));

1155 
	}
}

1157 
	sv›_gë∑ges_async_¨gs
 {

1158 
v›_gíîic_¨gs
 
	ma_gí
;

1159 
vnode
 *
	ma_vp
;

1160 
vm_∑ge_t
 *
	ma_m
;

1161 
	ma_cou¡
;

1162 *
	ma_rbehöd
;

1163 *
	ma_øhód
;

1164 
v›_gë∑ges_iod⁄e_t
 *
	ma_iod⁄e
;

1165 *
	ma_¨g
;

1168 
vnode›_desc
 
v›_gë∑ges_async_desc
;

1170 
VOP_GETPAGES_ASYNC_AP
(
v›_gë∑ges_async_¨gs
 *);

1171 
VOP_GETPAGES_ASYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë∑ges_async_¨gs
 *);

1173 
__ölöe
 
	$VOP_GETPAGES_ASYNC
(

1174 
vnode
 *
vp
,

1175 
vm_∑ge_t
 *
m
,

1176 
cou¡
,

1177 *
rbehöd
,

1178 *
øhód
,

1179 
v›_gë∑ges_iod⁄e_t
 *
iod⁄e
,

1180 *
¨g
)

1182 
v›_gë∑ges_async_¨gs
 
a
;

1184 
a
.
a_gí
.
a_desc
 = &
v›_gë∑ges_async_desc
;

1185 
a
.
a_vp
 = 
vp
;

1186 
a
.
a_m
 = 
m
;

1187 
a
.
a_cou¡
 = 
cou¡
;

1188 
a
.
a_rbehöd
 = 
rbehöd
;

1189 
a
.
a_øhód
 = 
øhód
;

1190 
a
.
a_iod⁄e
 = 
iod⁄e
;

1191 
a
.
a_¨g
 = 
¨g
;

1192  (
	`VOP_GETPAGES_ASYNC_APV
(
vp
->
v_›
, &
a
));

1193 
	}
}

1195 
	sv›_puçages_¨gs
 {

1196 
v›_gíîic_¨gs
 
	ma_gí
;

1197 
vnode
 *
	ma_vp
;

1198 
vm_∑ge_t
 *
	ma_m
;

1199 
	ma_cou¡
;

1200 
	ma_sync
;

1201 *
	ma_πvÆs
;

1204 
vnode›_desc
 
v›_puçages_desc
;

1206 
VOP_PUTPAGES_AP
(
v›_puçages_¨gs
 *);

1207 
VOP_PUTPAGES_APV
(
v›_ve˘‹
 *
v›
, 
v›_puçages_¨gs
 *);

1209 
__ölöe
 
	$VOP_PUTPAGES
(

1210 
vnode
 *
vp
,

1211 
vm_∑ge_t
 *
m
,

1212 
cou¡
,

1213 
sync
,

1214 *
πvÆs
)

1216 
v›_puçages_¨gs
 
a
;

1218 
a
.
a_gí
.
a_desc
 = &
v›_puçages_desc
;

1219 
a
.
a_vp
 = 
vp
;

1220 
a
.
a_m
 = 
m
;

1221 
a
.
a_cou¡
 = 
cou¡
;

1222 
a
.
a_sync
 = 
sync
;

1223 
a
.
a_πvÆs
 = 
πvÆs
;

1224  (
	`VOP_PUTPAGES_APV
(
vp
->
v_›
, &
a
));

1225 
	}
}

1227 
	sv›_gëa˛_¨gs
 {

1228 
v›_gíîic_¨gs
 
	ma_gí
;

1229 
vnode
 *
	ma_vp
;

1230 
a˛_ty≥_t
 
	ma_ty≥
;

1231 
a˛
 *
	ma_a˛p
;

1232 
u¸ed
 *
	ma_¸ed
;

1233 
thªad
 *
	ma_td
;

1236 
vnode›_desc
 
v›_gëa˛_desc
;

1238 
VOP_GETACL_AP
(
v›_gëa˛_¨gs
 *);

1239 
VOP_GETACL_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëa˛_¨gs
 *);

1241 
__ölöe
 
	$VOP_GETACL
(

1242 
vnode
 *
vp
,

1243 
a˛_ty≥_t
 
ty≥
,

1244 
a˛
 *
a˛p
,

1245 
u¸ed
 *
¸ed
,

1246 
thªad
 *
td
)

1248 
v›_gëa˛_¨gs
 
a
;

1250 
a
.
a_gí
.
a_desc
 = &
v›_gëa˛_desc
;

1251 
a
.
a_vp
 = 
vp
;

1252 
a
.
a_ty≥
 = 
ty≥
;

1253 
a
.
a_a˛p
 = 
a˛p
;

1254 
a
.
a_¸ed
 = 
¸ed
;

1255 
a
.
a_td
 = 
td
;

1256  (
	`VOP_GETACL_APV
(
vp
->
v_›
, &
a
));

1257 
	}
}

1259 
	sv›_£è˛_¨gs
 {

1260 
v›_gíîic_¨gs
 
	ma_gí
;

1261 
vnode
 *
	ma_vp
;

1262 
a˛_ty≥_t
 
	ma_ty≥
;

1263 
a˛
 *
	ma_a˛p
;

1264 
u¸ed
 *
	ma_¸ed
;

1265 
thªad
 *
	ma_td
;

1268 
vnode›_desc
 
v›_£è˛_desc
;

1270 
VOP_SETACL_AP
(
v›_£è˛_¨gs
 *);

1271 
VOP_SETACL_APV
(
v›_ve˘‹
 *
v›
, 
v›_£è˛_¨gs
 *);

1273 
__ölöe
 
	$VOP_SETACL
(

1274 
vnode
 *
vp
,

1275 
a˛_ty≥_t
 
ty≥
,

1276 
a˛
 *
a˛p
,

1277 
u¸ed
 *
¸ed
,

1278 
thªad
 *
td
)

1280 
v›_£è˛_¨gs
 
a
;

1282 
a
.
a_gí
.
a_desc
 = &
v›_£è˛_desc
;

1283 
a
.
a_vp
 = 
vp
;

1284 
a
.
a_ty≥
 = 
ty≥
;

1285 
a
.
a_a˛p
 = 
a˛p
;

1286 
a
.
a_¸ed
 = 
¸ed
;

1287 
a
.
a_td
 = 
td
;

1288  (
	`VOP_SETACL_APV
(
vp
->
v_›
, &
a
));

1289 
	}
}

1291 
	sv›_a˛check_¨gs
 {

1292 
v›_gíîic_¨gs
 
	ma_gí
;

1293 
vnode
 *
	ma_vp
;

1294 
a˛_ty≥_t
 
	ma_ty≥
;

1295 
a˛
 *
	ma_a˛p
;

1296 
u¸ed
 *
	ma_¸ed
;

1297 
thªad
 *
	ma_td
;

1300 
vnode›_desc
 
v›_a˛check_desc
;

1302 
VOP_ACLCHECK_AP
(
v›_a˛check_¨gs
 *);

1303 
VOP_ACLCHECK_APV
(
v›_ve˘‹
 *
v›
, 
v›_a˛check_¨gs
 *);

1305 
__ölöe
 
	$VOP_ACLCHECK
(

1306 
vnode
 *
vp
,

1307 
a˛_ty≥_t
 
ty≥
,

1308 
a˛
 *
a˛p
,

1309 
u¸ed
 *
¸ed
,

1310 
thªad
 *
td
)

1312 
v›_a˛check_¨gs
 
a
;

1314 
a
.
a_gí
.
a_desc
 = &
v›_a˛check_desc
;

1315 
a
.
a_vp
 = 
vp
;

1316 
a
.
a_ty≥
 = 
ty≥
;

1317 
a
.
a_a˛p
 = 
a˛p
;

1318 
a
.
a_¸ed
 = 
¸ed
;

1319 
a
.
a_td
 = 
td
;

1320  (
	`VOP_ACLCHECK_APV
(
vp
->
v_›
, &
a
));

1321 
	}
}

1323 
	sv›_˛o£exèâr_¨gs
 {

1324 
v›_gíîic_¨gs
 
	ma_gí
;

1325 
vnode
 *
	ma_vp
;

1326 
	ma_commô
;

1327 
u¸ed
 *
	ma_¸ed
;

1328 
thªad
 *
	ma_td
;

1331 
vnode›_desc
 
v›_˛o£exèâr_desc
;

1333 
VOP_CLOSEEXTATTR_AP
(
v›_˛o£exèâr_¨gs
 *);

1334 
VOP_CLOSEEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_˛o£exèâr_¨gs
 *);

1336 
__ölöe
 
	$VOP_CLOSEEXTATTR
(

1337 
vnode
 *
vp
,

1338 
commô
,

1339 
u¸ed
 *
¸ed
,

1340 
thªad
 *
td
)

1342 
v›_˛o£exèâr_¨gs
 
a
;

1344 
a
.
a_gí
.
a_desc
 = &
v›_˛o£exèâr_desc
;

1345 
a
.
a_vp
 = 
vp
;

1346 
a
.
a_commô
 = 
commô
;

1347 
a
.
a_¸ed
 = 
¸ed
;

1348 
a
.
a_td
 = 
td
;

1349  (
	`VOP_CLOSEEXTATTR_APV
(
vp
->
v_›
, &
a
));

1350 
	}
}

1352 
	sv›_gëexèâr_¨gs
 {

1353 
v›_gíîic_¨gs
 
	ma_gí
;

1354 
vnode
 *
	ma_vp
;

1355 
	ma_©å«me•a˚
;

1356 c⁄° *
	ma_«me
;

1357 
uio
 *
	ma_uio
;

1358 
size_t
 *
	ma_size
;

1359 
u¸ed
 *
	ma_¸ed
;

1360 
thªad
 *
	ma_td
;

1363 
vnode›_desc
 
v›_gëexèâr_desc
;

1365 
VOP_GETEXTATTR_AP
(
v›_gëexèâr_¨gs
 *);

1366 
VOP_GETEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëexèâr_¨gs
 *);

1368 
__ölöe
 
	$VOP_GETEXTATTR
(

1369 
vnode
 *
vp
,

1370 
©å«me•a˚
,

1371 c⁄° *
«me
,

1372 
uio
 *uio,

1373 
size_t
 *
size
,

1374 
u¸ed
 *
¸ed
,

1375 
thªad
 *
td
)

1377 
v›_gëexèâr_¨gs
 
a
;

1379 
a
.
a_gí
.
a_desc
 = &
v›_gëexèâr_desc
;

1380 
a
.
a_vp
 = 
vp
;

1381 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1382 
a
.
a_«me
 = 
«me
;

1383 
a
.
a_uio
 = 
uio
;

1384 
a
.
a_size
 = 
size
;

1385 
a
.
a_¸ed
 = 
¸ed
;

1386 
a
.
a_td
 = 
td
;

1387  (
	`VOP_GETEXTATTR_APV
(
vp
->
v_›
, &
a
));

1388 
	}
}

1390 
	sv›_li°exèâr_¨gs
 {

1391 
v›_gíîic_¨gs
 
	ma_gí
;

1392 
vnode
 *
	ma_vp
;

1393 
	ma_©å«me•a˚
;

1394 
uio
 *
	ma_uio
;

1395 
size_t
 *
	ma_size
;

1396 
u¸ed
 *
	ma_¸ed
;

1397 
thªad
 *
	ma_td
;

1400 
vnode›_desc
 
v›_li°exèâr_desc
;

1402 
VOP_LISTEXTATTR_AP
(
v›_li°exèâr_¨gs
 *);

1403 
VOP_LISTEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_li°exèâr_¨gs
 *);

1405 
__ölöe
 
	$VOP_LISTEXTATTR
(

1406 
vnode
 *
vp
,

1407 
©å«me•a˚
,

1408 
uio
 *uio,

1409 
size_t
 *
size
,

1410 
u¸ed
 *
¸ed
,

1411 
thªad
 *
td
)

1413 
v›_li°exèâr_¨gs
 
a
;

1415 
a
.
a_gí
.
a_desc
 = &
v›_li°exèâr_desc
;

1416 
a
.
a_vp
 = 
vp
;

1417 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1418 
a
.
a_uio
 = 
uio
;

1419 
a
.
a_size
 = 
size
;

1420 
a
.
a_¸ed
 = 
¸ed
;

1421 
a
.
a_td
 = 
td
;

1422  (
	`VOP_LISTEXTATTR_APV
(
vp
->
v_›
, &
a
));

1423 
	}
}

1425 
	sv›_›íexèâr_¨gs
 {

1426 
v›_gíîic_¨gs
 
	ma_gí
;

1427 
vnode
 *
	ma_vp
;

1428 
u¸ed
 *
	ma_¸ed
;

1429 
thªad
 *
	ma_td
;

1432 
vnode›_desc
 
v›_›íexèâr_desc
;

1434 
VOP_OPENEXTATTR_AP
(
v›_›íexèâr_¨gs
 *);

1435 
VOP_OPENEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_›íexèâr_¨gs
 *);

1437 
__ölöe
 
	$VOP_OPENEXTATTR
(

1438 
vnode
 *
vp
,

1439 
u¸ed
 *
¸ed
,

1440 
thªad
 *
td
)

1442 
v›_›íexèâr_¨gs
 
a
;

1444 
a
.
a_gí
.
a_desc
 = &
v›_›íexèâr_desc
;

1445 
a
.
a_vp
 = 
vp
;

1446 
a
.
a_¸ed
 = 
¸ed
;

1447 
a
.
a_td
 = 
td
;

1448  (
	`VOP_OPENEXTATTR_APV
(
vp
->
v_›
, &
a
));

1449 
	}
}

1451 
	sv›_dñëìxèâr_¨gs
 {

1452 
v›_gíîic_¨gs
 
	ma_gí
;

1453 
vnode
 *
	ma_vp
;

1454 
	ma_©å«me•a˚
;

1455 c⁄° *
	ma_«me
;

1456 
u¸ed
 *
	ma_¸ed
;

1457 
thªad
 *
	ma_td
;

1460 
vnode›_desc
 
v›_dñëìxèâr_desc
;

1462 
VOP_DELETEEXTATTR_AP
(
v›_dñëìxèâr_¨gs
 *);

1463 
VOP_DELETEEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_dñëìxèâr_¨gs
 *);

1465 
__ölöe
 
	$VOP_DELETEEXTATTR
(

1466 
vnode
 *
vp
,

1467 
©å«me•a˚
,

1468 c⁄° *
«me
,

1469 
u¸ed
 *
¸ed
,

1470 
thªad
 *
td
)

1472 
v›_dñëìxèâr_¨gs
 
a
;

1474 
a
.
a_gí
.
a_desc
 = &
v›_dñëìxèâr_desc
;

1475 
a
.
a_vp
 = 
vp
;

1476 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1477 
a
.
a_«me
 = 
«me
;

1478 
a
.
a_¸ed
 = 
¸ed
;

1479 
a
.
a_td
 = 
td
;

1480  (
	`VOP_DELETEEXTATTR_APV
(
vp
->
v_›
, &
a
));

1481 
	}
}

1483 
	sv›_£ãxèâr_¨gs
 {

1484 
v›_gíîic_¨gs
 
	ma_gí
;

1485 
vnode
 *
	ma_vp
;

1486 
	ma_©å«me•a˚
;

1487 c⁄° *
	ma_«me
;

1488 
uio
 *
	ma_uio
;

1489 
u¸ed
 *
	ma_¸ed
;

1490 
thªad
 *
	ma_td
;

1493 
vnode›_desc
 
v›_£ãxèâr_desc
;

1495 
VOP_SETEXTATTR_AP
(
v›_£ãxèâr_¨gs
 *);

1496 
VOP_SETEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_£ãxèâr_¨gs
 *);

1498 
__ölöe
 
	$VOP_SETEXTATTR
(

1499 
vnode
 *
vp
,

1500 
©å«me•a˚
,

1501 c⁄° *
«me
,

1502 
uio
 *uio,

1503 
u¸ed
 *
¸ed
,

1504 
thªad
 *
td
)

1506 
v›_£ãxèâr_¨gs
 
a
;

1508 
a
.
a_gí
.
a_desc
 = &
v›_£ãxèâr_desc
;

1509 
a
.
a_vp
 = 
vp
;

1510 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1511 
a
.
a_«me
 = 
«me
;

1512 
a
.
a_uio
 = 
uio
;

1513 
a
.
a_¸ed
 = 
¸ed
;

1514 
a
.
a_td
 = 
td
;

1515  (
	`VOP_SETEXTATTR_APV
(
vp
->
v_›
, &
a
));

1516 
	}
}

1518 
	sv›_£éabñ_¨gs
 {

1519 
v›_gíîic_¨gs
 
	ma_gí
;

1520 
vnode
 *
	ma_vp
;

1521 
œbñ
 *
	ma_œbñ
;

1522 
u¸ed
 *
	ma_¸ed
;

1523 
thªad
 *
	ma_td
;

1526 
vnode›_desc
 
v›_£éabñ_desc
;

1528 
VOP_SETLABEL_AP
(
v›_£éabñ_¨gs
 *);

1529 
VOP_SETLABEL_APV
(
v›_ve˘‹
 *
v›
, 
v›_£éabñ_¨gs
 *);

1531 
__ölöe
 
	$VOP_SETLABEL
(

1532 
vnode
 *
vp
,

1533 
œbñ
 *label,

1534 
u¸ed
 *
¸ed
,

1535 
thªad
 *
td
)

1537 
v›_£éabñ_¨gs
 
a
;

1539 
a
.
a_gí
.
a_desc
 = &
v›_£éabñ_desc
;

1540 
a
.
a_vp
 = 
vp
;

1541 
a
.
a_œbñ
 = 
œbñ
;

1542 
a
.
a_¸ed
 = 
¸ed
;

1543 
a
.
a_td
 = 
td
;

1544  (
	`VOP_SETLABEL_APV
(
vp
->
v_›
, &
a
));

1545 
	}
}

1547 
	sv›_v±ofh_¨gs
 {

1548 
v›_gíîic_¨gs
 
	ma_gí
;

1549 
vnode
 *
	ma_vp
;

1550 
fid
 *
	ma_fhp
;

1553 
vnode›_desc
 
v›_v±ofh_desc
;

1555 
VOP_VPTOFH_AP
(
v›_v±ofh_¨gs
 *);

1556 
VOP_VPTOFH_APV
(
v›_ve˘‹
 *
v›
, 
v›_v±ofh_¨gs
 *);

1558 
__ölöe
 
	$VOP_VPTOFH
(

1559 
vnode
 *
vp
,

1560 
fid
 *
fhp
)

1562 
v›_v±ofh_¨gs
 
a
;

1564 
a
.
a_gí
.
a_desc
 = &
v›_v±ofh_desc
;

1565 
a
.
a_vp
 = 
vp
;

1566 
a
.
a_fhp
 = 
fhp
;

1567  (
	`VOP_VPTOFH_APV
(
vp
->
v_›
, &
a
));

1568 
	}
}

1570 
	sv›_v±o˙p_¨gs
 {

1571 
v›_gíîic_¨gs
 
	ma_gí
;

1572 
vnode
 *
	ma_vp
;

1573 
vnode
 **
	ma_vµ
;

1574 
u¸ed
 *
	ma_¸ed
;

1575 *
	ma_buf
;

1576 *
	ma_buÊí
;

1579 
vnode›_desc
 
v›_v±o˙p_desc
;

1581 
VOP_VPTOCNP_AP
(
v›_v±o˙p_¨gs
 *);

1582 
VOP_VPTOCNP_APV
(
v›_ve˘‹
 *
v›
, 
v›_v±o˙p_¨gs
 *);

1584 
__ölöe
 
	$VOP_VPTOCNP
(

1585 
vnode
 *
vp
,

1586 
vnode
 **
vµ
,

1587 
u¸ed
 *
¸ed
,

1588 *
buf
,

1589 *
buÊí
)

1591 
v›_v±o˙p_¨gs
 
a
;

1593 
a
.
a_gí
.
a_desc
 = &
v›_v±o˙p_desc
;

1594 
a
.
a_vp
 = 
vp
;

1595 
a
.
a_vµ
 = 
vµ
;

1596 
a
.
a_¸ed
 = 
¸ed
;

1597 
a
.
a_buf
 = 
buf
;

1598 
a
.
a_buÊí
 = 
buÊí
;

1599  (
	`VOP_VPTOCNP_APV
(
vp
->
v_›
, &
a
));

1600 
	}
}

1602 
	sv›_Æloˇã_¨gs
 {

1603 
v›_gíîic_¨gs
 
	ma_gí
;

1604 
vnode
 *
	ma_vp
;

1605 
off_t
 *
	ma_off£t
;

1606 
off_t
 *
	ma_Àn
;

1609 
vnode›_desc
 
v›_Æloˇã_desc
;

1611 
VOP_ALLOCATE_AP
(
v›_Æloˇã_¨gs
 *);

1612 
VOP_ALLOCATE_APV
(
v›_ve˘‹
 *
v›
, 
v›_Æloˇã_¨gs
 *);

1614 
__ölöe
 
	$VOP_ALLOCATE
(

1615 
vnode
 *
vp
,

1616 
off_t
 *
off£t
,

1617 
off_t
 *
Àn
)

1619 
v›_Æloˇã_¨gs
 
a
;

1621 
a
.
a_gí
.
a_desc
 = &
v›_Æloˇã_desc
;

1622 
a
.
a_vp
 = 
vp
;

1623 
a
.
a_off£t
 = 
off£t
;

1624 
a
.
a_Àn
 = 
Àn
;

1625  (
	`VOP_ALLOCATE_APV
(
vp
->
v_›
, &
a
));

1626 
	}
}

1628 
	sv›_advi£_¨gs
 {

1629 
v›_gíîic_¨gs
 
	ma_gí
;

1630 
vnode
 *
	ma_vp
;

1631 
off_t
 
	ma_°¨t
;

1632 
off_t
 
	ma_íd
;

1633 
	ma_advi˚
;

1636 
vnode›_desc
 
v›_advi£_desc
;

1638 
VOP_ADVISE_AP
(
v›_advi£_¨gs
 *);

1639 
VOP_ADVISE_APV
(
v›_ve˘‹
 *
v›
, 
v›_advi£_¨gs
 *);

1641 
__ölöe
 
	$VOP_ADVISE
(

1642 
vnode
 *
vp
,

1643 
off_t
 
°¨t
,

1644 
off_t
 
íd
,

1645 
advi˚
)

1647 
v›_advi£_¨gs
 
a
;

1649 
a
.
a_gí
.
a_desc
 = &
v›_advi£_desc
;

1650 
a
.
a_vp
 = 
vp
;

1651 
a
.
a_°¨t
 = 
°¨t
;

1652 
a
.
a_íd
 = 
íd
;

1653 
a
.
a_advi˚
 = 
advi˚
;

1654  (
	`VOP_ADVISE_APV
(
vp
->
v_›
, &
a
));

1655 
	}
}

1657 
	sv›_u≈_böd_¨gs
 {

1658 
v›_gíîic_¨gs
 
	ma_gí
;

1659 
vnode
 *
	ma_vp
;

1660 
u≈cb
 *
	ma_u≈cb
;

1663 
vnode›_desc
 
v›_u≈_böd_desc
;

1665 
VOP_UNP_BIND_AP
(
v›_u≈_böd_¨gs
 *);

1666 
VOP_UNP_BIND_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_böd_¨gs
 *);

1668 
__ölöe
 
	$VOP_UNP_BIND
(

1669 
vnode
 *
vp
,

1670 
u≈cb
 *unpcb)

1672 
v›_u≈_böd_¨gs
 
a
;

1674 
a
.
a_gí
.
a_desc
 = &
v›_u≈_böd_desc
;

1675 
a
.
a_vp
 = 
vp
;

1676 
a
.
a_u≈cb
 = 
u≈cb
;

1677  (
	`VOP_UNP_BIND_APV
(
vp
->
v_›
, &
a
));

1678 
	}
}

1680 
	sv›_u≈_c⁄√˘_¨gs
 {

1681 
v›_gíîic_¨gs
 
	ma_gí
;

1682 
vnode
 *
	ma_vp
;

1683 
u≈cb
 **
	ma_u≈cb
;

1686 
vnode›_desc
 
v›_u≈_c⁄√˘_desc
;

1688 
VOP_UNP_CONNECT_AP
(
v›_u≈_c⁄√˘_¨gs
 *);

1689 
VOP_UNP_CONNECT_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_c⁄√˘_¨gs
 *);

1691 
__ölöe
 
	$VOP_UNP_CONNECT
(

1692 
vnode
 *
vp
,

1693 
u≈cb
 **unpcb)

1695 
v›_u≈_c⁄√˘_¨gs
 
a
;

1697 
a
.
a_gí
.
a_desc
 = &
v›_u≈_c⁄√˘_desc
;

1698 
a
.
a_vp
 = 
vp
;

1699 
a
.
a_u≈cb
 = 
u≈cb
;

1700  (
	`VOP_UNP_CONNECT_APV
(
vp
->
v_›
, &
a
));

1701 
	}
}

1703 
	sv›_u≈_dëach_¨gs
 {

1704 
v›_gíîic_¨gs
 
	ma_gí
;

1705 
vnode
 *
	ma_vp
;

1708 
vnode›_desc
 
v›_u≈_dëach_desc
;

1710 
VOP_UNP_DETACH_AP
(
v›_u≈_dëach_¨gs
 *);

1711 
VOP_UNP_DETACH_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_dëach_¨gs
 *);

1713 
__ölöe
 
	$VOP_UNP_DETACH
(

1714 
vnode
 *
vp
)

1716 
v›_u≈_dëach_¨gs
 
a
;

1718 
a
.
a_gí
.
a_desc
 = &
v›_u≈_dëach_desc
;

1719 
a
.
a_vp
 = 
vp
;

1720  (
	`VOP_UNP_DETACH_APV
(
vp
->
v_›
, &
a
));

1721 
	}
}

1723 
	sv›_is_ãxt_¨gs
 {

1724 
v›_gíîic_¨gs
 
	ma_gí
;

1725 
vnode
 *
	ma_vp
;

1728 
vnode›_desc
 
v›_is_ãxt_desc
;

1730 
VOP_IS_TEXT_AP
(
v›_is_ãxt_¨gs
 *);

1731 
VOP_IS_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_is_ãxt_¨gs
 *);

1733 
__ölöe
 
	$VOP_IS_TEXT
(

1734 
vnode
 *
vp
)

1736 
v›_is_ãxt_¨gs
 
a
;

1738 
a
.
a_gí
.
a_desc
 = &
v›_is_ãxt_desc
;

1739 
a
.
a_vp
 = 
vp
;

1740  (
	`VOP_IS_TEXT_APV
(
vp
->
v_›
, &
a
));

1741 
	}
}

1743 
	sv›_£t_ãxt_¨gs
 {

1744 
v›_gíîic_¨gs
 
	ma_gí
;

1745 
vnode
 *
	ma_vp
;

1748 
vnode›_desc
 
v›_£t_ãxt_desc
;

1750 
VOP_SET_TEXT_AP
(
v›_£t_ãxt_¨gs
 *);

1751 
VOP_SET_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_£t_ãxt_¨gs
 *);

1753 
__ölöe
 
	$VOP_SET_TEXT
(

1754 
vnode
 *
vp
)

1756 
v›_£t_ãxt_¨gs
 
a
;

1758 
a
.
a_gí
.
a_desc
 = &
v›_£t_ãxt_desc
;

1759 
a
.
a_vp
 = 
vp
;

1760  (
	`VOP_SET_TEXT_APV
(
vp
->
v_›
, &
a
));

1761 
	}
}

1763 
	sv›_un£t_ãxt_¨gs
 {

1764 
v›_gíîic_¨gs
 
	ma_gí
;

1765 
vnode
 *
	ma_vp
;

1768 
vnode›_desc
 
v›_un£t_ãxt_desc
;

1770 
VOP_UNSET_TEXT_AP
(
v›_un£t_ãxt_¨gs
 *);

1771 
VOP_UNSET_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_un£t_ãxt_¨gs
 *);

1773 
__ölöe
 
	$VOP_UNSET_TEXT
(

1774 
vnode
 *
vp
)

1776 
v›_un£t_ãxt_¨gs
 
a
;

1778 
a
.
a_gí
.
a_desc
 = &
v›_un£t_ãxt_desc
;

1779 
a
.
a_vp
 = 
vp
;

1780  (
	`VOP_UNSET_TEXT_APV
(
vp
->
v_›
, &
a
));

1781 
	}
}

1783 
	sv›_gë_wrôecou¡_¨gs
 {

1784 
v›_gíîic_¨gs
 
	ma_gí
;

1785 
vnode
 *
	ma_vp
;

1786 *
	ma_wrôecou¡
;

1789 
vnode›_desc
 
v›_gë_wrôecou¡_desc
;

1791 
VOP_GET_WRITECOUNT_AP
(
v›_gë_wrôecou¡_¨gs
 *);

1792 
VOP_GET_WRITECOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë_wrôecou¡_¨gs
 *);

1794 
__ölöe
 
	$VOP_GET_WRITECOUNT
(

1795 
vnode
 *
vp
,

1796 *
wrôecou¡
)

1798 
v›_gë_wrôecou¡_¨gs
 
a
;

1800 
a
.
a_gí
.
a_desc
 = &
v›_gë_wrôecou¡_desc
;

1801 
a
.
a_vp
 = 
vp
;

1802 
a
.
a_wrôecou¡
 = 
wrôecou¡
;

1803  (
	`VOP_GET_WRITECOUNT_APV
(
vp
->
v_›
, &
a
));

1804 
	}
}

1806 
	sv›_add_wrôecou¡_¨gs
 {

1807 
v›_gíîic_¨gs
 
	ma_gí
;

1808 
vnode
 *
	ma_vp
;

1809 
	ma_öc
;

1812 
vnode›_desc
 
v›_add_wrôecou¡_desc
;

1814 
VOP_ADD_WRITECOUNT_AP
(
v›_add_wrôecou¡_¨gs
 *);

1815 
VOP_ADD_WRITECOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_add_wrôecou¡_¨gs
 *);

1817 
__ölöe
 
	$VOP_ADD_WRITECOUNT
(

1818 
vnode
 *
vp
,

1819 
öc
)

1821 
v›_add_wrôecou¡_¨gs
 
a
;

1823 
a
.
a_gí
.
a_desc
 = &
v›_add_wrôecou¡_desc
;

1824 
a
.
a_vp
 = 
vp
;

1825 
a
.
a_öc
 = 
öc
;

1826  (
	`VOP_ADD_WRITECOUNT_APV
(
vp
->
v_›
, &
a
));

1827 
	}
}

1829 
	sv›_fd©async_¨gs
 {

1830 
v›_gíîic_¨gs
 
	ma_gí
;

1831 
vnode
 *
	ma_vp
;

1832 
thªad
 *
	ma_td
;

1835 
vnode›_desc
 
v›_fd©async_desc
;

1837 
VOP_FDATASYNC_AP
(
v›_fd©async_¨gs
 *);

1838 
VOP_FDATASYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_fd©async_¨gs
 *);

1840 
__ölöe
 
	$VOP_FDATASYNC
(

1841 
vnode
 *
vp
,

1842 
thªad
 *
td
)

1844 
v›_fd©async_¨gs
 
a
;

1846 
a
.
a_gí
.
a_desc
 = &
v›_fd©async_desc
;

1847 
a
.
a_vp
 = 
vp
;

1848 
a
.
a_td
 = 
td
;

1849  (
	`VOP_FDATASYNC_APV
(
vp
->
v_›
, &
a
));

1850 
	}
}

1852 
	sv›_•¨e1_¨gs
 {

1853 
v›_gíîic_¨gs
 
	ma_gí
;

1854 
vnode
 *
	ma_vp
;

1857 
vnode›_desc
 
v›_•¨e1_desc
;

1859 
VOP_SPARE1_AP
(
v›_•¨e1_¨gs
 *);

1860 
VOP_SPARE1_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e1_¨gs
 *);

1862 
__ölöe
 
	$VOP_SPARE1
(

1863 
vnode
 *
vp
)

1865 
v›_•¨e1_¨gs
 
a
;

1867 
a
.
a_gí
.
a_desc
 = &
v›_•¨e1_desc
;

1868 
a
.
a_vp
 = 
vp
;

1869  (
	`VOP_SPARE1_APV
(
vp
->
v_›
, &
a
));

1870 
	}
}

1872 
	sv›_•¨e2_¨gs
 {

1873 
v›_gíîic_¨gs
 
	ma_gí
;

1874 
vnode
 *
	ma_vp
;

1877 
vnode›_desc
 
v›_•¨e2_desc
;

1879 
VOP_SPARE2_AP
(
v›_•¨e2_¨gs
 *);

1880 
VOP_SPARE2_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e2_¨gs
 *);

1882 
__ölöe
 
	$VOP_SPARE2
(

1883 
vnode
 *
vp
)

1885 
v›_•¨e2_¨gs
 
a
;

1887 
a
.
a_gí
.
a_desc
 = &
v›_•¨e2_desc
;

1888 
a
.
a_vp
 = 
vp
;

1889  (
	`VOP_SPARE2_APV
(
vp
->
v_›
, &
a
));

1890 
	}
}

1892 
	sv›_•¨e3_¨gs
 {

1893 
v›_gíîic_¨gs
 
	ma_gí
;

1894 
vnode
 *
	ma_vp
;

1897 
vnode›_desc
 
v›_•¨e3_desc
;

1899 
VOP_SPARE3_AP
(
v›_•¨e3_¨gs
 *);

1900 
VOP_SPARE3_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e3_¨gs
 *);

1902 
__ölöe
 
	$VOP_SPARE3
(

1903 
vnode
 *
vp
)

1905 
v›_•¨e3_¨gs
 
a
;

1907 
a
.
a_gí
.
a_desc
 = &
v›_•¨e3_desc
;

1908 
a
.
a_vp
 = 
vp
;

1909  (
	`VOP_SPARE3_APV
(
vp
->
v_›
, &
a
));

1910 
	}
}

1912 
	sv›_•¨e4_¨gs
 {

1913 
v›_gíîic_¨gs
 
	ma_gí
;

1914 
vnode
 *
	ma_vp
;

1917 
vnode›_desc
 
v›_•¨e4_desc
;

1919 
VOP_SPARE4_AP
(
v›_•¨e4_¨gs
 *);

1920 
VOP_SPARE4_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e4_¨gs
 *);

1922 
__ölöe
 
	$VOP_SPARE4
(

1923 
vnode
 *
vp
)

1925 
v›_•¨e4_¨gs
 
a
;

1927 
a
.
a_gí
.
a_desc
 = &
v›_•¨e4_desc
;

1928 
a
.
a_vp
 = 
vp
;

1929  (
	`VOP_SPARE4_APV
(
vp
->
v_›
, &
a
));

1930 
	}
}

1932 
	sv›_•¨e5_¨gs
 {

1933 
v›_gíîic_¨gs
 
	ma_gí
;

1934 
vnode
 *
	ma_vp
;

1937 
vnode›_desc
 
v›_•¨e5_desc
;

1939 
VOP_SPARE5_AP
(
v›_•¨e5_¨gs
 *);

1940 
VOP_SPARE5_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e5_¨gs
 *);

1942 
__ölöe
 
	$VOP_SPARE5
(

1943 
vnode
 *
vp
)

1945 
v›_•¨e5_¨gs
 
a
;

1947 
a
.
a_gí
.
a_desc
 = &
v›_•¨e5_desc
;

1948 
a
.
a_vp
 = 
vp
;

1949  (
	`VOP_SPARE5_APV
(
vp
->
v_›
, &
a
));

1950 
	}
}

	@src/nvidia-drm/vnode_if_newproto.h

9 
	sv›_ve˘‹
 {

10 
v›_ve˘‹
 *
	mv›_deÁu…
;

11 
v›_by∑ss_t
 *
	mv›_by∑ss
;

12 
v›_i¶ocked_t
 *
	mv›_i¶ocked
;

13 
v›_lookup_t
 *
	mv›_lookup
;

14 
v›_ˇchedlookup_t
 *
	mv›_ˇchedlookup
;

15 
v›_¸óã_t
 *
	mv›_¸óã
;

16 
v›_whôeout_t
 *
	mv›_whôeout
;

17 
v›_mknod_t
 *
	mv›_mknod
;

18 
v›_›í_t
 *
	mv›_›í
;

19 
v›_˛o£_t
 *
	mv›_˛o£
;

20 
v›_ac˚ss_t
 *
	mv›_ac˚ss
;

21 
v›_ac˚ssx_t
 *
	mv›_ac˚ssx
;

22 
v›_gë©å_t
 *
	mv›_gë©å
;

23 
v›_£èâr_t
 *
	mv›_£èâr
;

24 
v›_m¨k©ime_t
 *
	mv›_m¨k©ime
;

25 
v›_ªad_t
 *
	mv›_ªad
;

26 
v›_wrôe_t
 *
	mv›_wrôe
;

27 
v›_io˘l_t
 *
	mv›_io˘l
;

28 
v›_pﬁl_t
 *
	mv›_pﬁl
;

29 
v›_kqfûãr_t
 *
	mv›_kqfûãr
;

30 
v›_ªvoke_t
 *
	mv›_ªvoke
;

31 
v›_fsync_t
 *
	mv›_fsync
;

32 
v›_ªmove_t
 *
	mv›_ªmove
;

33 
v›_lök_t
 *
	mv›_lök
;

34 
v›_ª«me_t
 *
	mv›_ª«me
;

35 
v›_mkdú_t
 *
	mv›_mkdú
;

36 
v›_rmdú_t
 *
	mv›_rmdú
;

37 
v›_symlök_t
 *
	mv›_symlök
;

38 
v›_ªaddú_t
 *
	mv›_ªaddú
;

39 
v›_ªadlök_t
 *
	mv›_ªadlök
;

40 
v›_öa˘ive_t
 *
	mv›_öa˘ive
;

41 
v›_ª˛aim_t
 *
	mv›_ª˛aim
;

42 
v›_lock1_t
 *
	mv›_lock1
;

43 
v›_u∆ock_t
 *
	mv›_u∆ock
;

44 
v›_bm≠_t
 *
	mv›_bm≠
;

45 
v›_°øãgy_t
 *
	mv›_°øãgy
;

46 
v›_gëwrôemou¡_t
 *
	mv›_gëwrôemou¡
;

47 
v›_¥öt_t
 *
	mv›_¥öt
;

48 
v›_∑thc⁄f_t
 *
	mv›_∑thc⁄f
;

49 
v›_advlock_t
 *
	mv›_advlock
;

50 
v›_advlockasync_t
 *
	mv›_advlockasync
;

51 
v›_advlockpurge_t
 *
	mv›_advlockpurge
;

52 
v›_ªÆlocblks_t
 *
	mv›_ªÆlocblks
;

53 
v›_gë∑ges_t
 *
	mv›_gë∑ges
;

54 
v›_gë∑ges_async_t
 *
	mv›_gë∑ges_async
;

55 
v›_puçages_t
 *
	mv›_puçages
;

56 
v›_gëa˛_t
 *
	mv›_gëa˛
;

57 
v›_£è˛_t
 *
	mv›_£è˛
;

58 
v›_a˛check_t
 *
	mv›_a˛check
;

59 
v›_˛o£exèâr_t
 *
	mv›_˛o£exèâr
;

60 
v›_gëexèâr_t
 *
	mv›_gëexèâr
;

61 
v›_li°exèâr_t
 *
	mv›_li°exèâr
;

62 
v›_›íexèâr_t
 *
	mv›_›íexèâr
;

63 
v›_dñëìxèâr_t
 *
	mv›_dñëìxèâr
;

64 
v›_£ãxèâr_t
 *
	mv›_£ãxèâr
;

65 
v›_£éabñ_t
 *
	mv›_£éabñ
;

66 
v›_v±ofh_t
 *
	mv›_v±ofh
;

67 
v›_v±o˙p_t
 *
	mv›_v±o˙p
;

68 
v›_Æloˇã_t
 *
	mv›_Æloˇã
;

69 
v›_advi£_t
 *
	mv›_advi£
;

70 
v›_u≈_böd_t
 *
	mv›_u≈_böd
;

71 
v›_u≈_c⁄√˘_t
 *
	mv›_u≈_c⁄√˘
;

72 
v›_u≈_dëach_t
 *
	mv›_u≈_dëach
;

73 
v›_is_ãxt_t
 *
	mv›_is_ãxt
;

74 
v›_£t_ãxt_t
 *
	mv›_£t_ãxt
;

75 
v›_un£t_ãxt_t
 *
	mv›_un£t_ãxt
;

76 
v›_gë_wrôecou¡_t
 *
	mv›_gë_wrôecou¡
;

77 
v›_add_wrôecou¡_t
 *
	mv›_add_wrôecou¡
;

78 
v›_fd©async_t
 *
	mv›_fd©async
;

79 
v›_•¨e1_t
 *
	mv›_•¨e1
;

80 
v›_•¨e2_t
 *
	mv›_•¨e2
;

81 
v›_•¨e3_t
 *
	mv›_•¨e3
;

82 
v›_•¨e4_t
 *
	mv›_•¨e4
;

83 
v›_•¨e5_t
 *
	mv›_•¨e5
;

	@src/nvidia-drm/vnode_if_typedef.h

9 
	gv›_i¶ocked_¨gs
;

10 
	tv›_i¶ocked_t
(
	tv›_i¶ocked_¨gs
 *);

12 
	gv›_lookup_¨gs
;

13 
	tv›_lookup_t
(
	tv›_lookup_¨gs
 *);

15 
	gv›_ˇchedlookup_¨gs
;

16 
	tv›_ˇchedlookup_t
(
	tv›_ˇchedlookup_¨gs
 *);

18 
	gv›_¸óã_¨gs
;

19 
	tv›_¸óã_t
(
	tv›_¸óã_¨gs
 *);

21 
	gv›_whôeout_¨gs
;

22 
	tv›_whôeout_t
(
	tv›_whôeout_¨gs
 *);

24 
	gv›_mknod_¨gs
;

25 
	tv›_mknod_t
(
	tv›_mknod_¨gs
 *);

27 
	gv›_›í_¨gs
;

28 
	tv›_›í_t
(
	tv›_›í_¨gs
 *);

30 
	gv›_˛o£_¨gs
;

31 
	tv›_˛o£_t
(
	tv›_˛o£_¨gs
 *);

33 
	gv›_ac˚ss_¨gs
;

34 
	tv›_ac˚ss_t
(
	tv›_ac˚ss_¨gs
 *);

36 
	gv›_ac˚ssx_¨gs
;

37 
	tv›_ac˚ssx_t
(
	tv›_ac˚ssx_¨gs
 *);

39 
	gv›_gë©å_¨gs
;

40 
	tv›_gë©å_t
(
	tv›_gë©å_¨gs
 *);

42 
	gv›_£èâr_¨gs
;

43 
	tv›_£èâr_t
(
	tv›_£èâr_¨gs
 *);

45 
	gv›_m¨k©ime_¨gs
;

46 
	tv›_m¨k©ime_t
(
	tv›_m¨k©ime_¨gs
 *);

48 
	gv›_ªad_¨gs
;

49 
	tv›_ªad_t
(
	tv›_ªad_¨gs
 *);

51 
	gv›_wrôe_¨gs
;

52 
	tv›_wrôe_t
(
	tv›_wrôe_¨gs
 *);

54 
	gv›_io˘l_¨gs
;

55 
	tv›_io˘l_t
(
	tv›_io˘l_¨gs
 *);

57 
	gv›_pﬁl_¨gs
;

58 
	tv›_pﬁl_t
(
	tv›_pﬁl_¨gs
 *);

60 
	gv›_kqfûãr_¨gs
;

61 
	tv›_kqfûãr_t
(
	tv›_kqfûãr_¨gs
 *);

63 
	gv›_ªvoke_¨gs
;

64 
	tv›_ªvoke_t
(
	tv›_ªvoke_¨gs
 *);

66 
	gv›_fsync_¨gs
;

67 
	tv›_fsync_t
(
	tv›_fsync_¨gs
 *);

69 
	gv›_ªmove_¨gs
;

70 
	tv›_ªmove_t
(
	tv›_ªmove_¨gs
 *);

72 
	gv›_lök_¨gs
;

73 
	tv›_lök_t
(
	tv›_lök_¨gs
 *);

75 
	gv›_ª«me_¨gs
;

76 
	tv›_ª«me_t
(
	tv›_ª«me_¨gs
 *);

78 
	gv›_mkdú_¨gs
;

79 
	tv›_mkdú_t
(
	tv›_mkdú_¨gs
 *);

81 
	gv›_rmdú_¨gs
;

82 
	tv›_rmdú_t
(
	tv›_rmdú_¨gs
 *);

84 
	gv›_symlök_¨gs
;

85 
	tv›_symlök_t
(
	tv›_symlök_¨gs
 *);

87 
	gv›_ªaddú_¨gs
;

88 
	tv›_ªaddú_t
(
	tv›_ªaddú_¨gs
 *);

90 
	gv›_ªadlök_¨gs
;

91 
	tv›_ªadlök_t
(
	tv›_ªadlök_¨gs
 *);

93 
	gv›_öa˘ive_¨gs
;

94 
	tv›_öa˘ive_t
(
	tv›_öa˘ive_¨gs
 *);

96 
	gv›_ª˛aim_¨gs
;

97 
	tv›_ª˛aim_t
(
	tv›_ª˛aim_¨gs
 *);

99 
	gv›_lock1_¨gs
;

100 
	tv›_lock1_t
(
	tv›_lock1_¨gs
 *);

102 
	gv›_u∆ock_¨gs
;

103 
	tv›_u∆ock_t
(
	tv›_u∆ock_¨gs
 *);

105 
	gv›_bm≠_¨gs
;

106 
	tv›_bm≠_t
(
	tv›_bm≠_¨gs
 *);

108 
	gv›_°øãgy_¨gs
;

109 
	tv›_°øãgy_t
(
	tv›_°øãgy_¨gs
 *);

111 
	gv›_gëwrôemou¡_¨gs
;

112 
	tv›_gëwrôemou¡_t
(
	tv›_gëwrôemou¡_¨gs
 *);

114 
	gv›_¥öt_¨gs
;

115 
	tv›_¥öt_t
(
	tv›_¥öt_¨gs
 *);

117 
	gv›_∑thc⁄f_¨gs
;

118 
	tv›_∑thc⁄f_t
(
	tv›_∑thc⁄f_¨gs
 *);

120 
	gv›_advlock_¨gs
;

121 
	tv›_advlock_t
(
	tv›_advlock_¨gs
 *);

123 
	gv›_advlockasync_¨gs
;

124 
	tv›_advlockasync_t
(
	tv›_advlockasync_¨gs
 *);

126 
	gv›_advlockpurge_¨gs
;

127 
	tv›_advlockpurge_t
(
	tv›_advlockpurge_¨gs
 *);

129 
	gv›_ªÆlocblks_¨gs
;

130 
	tv›_ªÆlocblks_t
(
	tv›_ªÆlocblks_¨gs
 *);

132 
	gv›_gë∑ges_¨gs
;

133 
	tv›_gë∑ges_t
(
	tv›_gë∑ges_¨gs
 *);

135 
	gv›_gë∑ges_async_¨gs
;

136 
	tv›_gë∑ges_async_t
(
	tv›_gë∑ges_async_¨gs
 *);

138 
	gv›_puçages_¨gs
;

139 
	tv›_puçages_t
(
	tv›_puçages_¨gs
 *);

141 
	gv›_gëa˛_¨gs
;

142 
	tv›_gëa˛_t
(
	tv›_gëa˛_¨gs
 *);

144 
	gv›_£è˛_¨gs
;

145 
	tv›_£è˛_t
(
	tv›_£è˛_¨gs
 *);

147 
	gv›_a˛check_¨gs
;

148 
	tv›_a˛check_t
(
	tv›_a˛check_¨gs
 *);

150 
	gv›_˛o£exèâr_¨gs
;

151 
	tv›_˛o£exèâr_t
(
	tv›_˛o£exèâr_¨gs
 *);

153 
	gv›_gëexèâr_¨gs
;

154 
	tv›_gëexèâr_t
(
	tv›_gëexèâr_¨gs
 *);

156 
	gv›_li°exèâr_¨gs
;

157 
	tv›_li°exèâr_t
(
	tv›_li°exèâr_¨gs
 *);

159 
	gv›_›íexèâr_¨gs
;

160 
	tv›_›íexèâr_t
(
	tv›_›íexèâr_¨gs
 *);

162 
	gv›_dñëìxèâr_¨gs
;

163 
	tv›_dñëìxèâr_t
(
	tv›_dñëìxèâr_¨gs
 *);

165 
	gv›_£ãxèâr_¨gs
;

166 
	tv›_£ãxèâr_t
(
	tv›_£ãxèâr_¨gs
 *);

168 
	gv›_£éabñ_¨gs
;

169 
	tv›_£éabñ_t
(
	tv›_£éabñ_¨gs
 *);

171 
	gv›_v±ofh_¨gs
;

172 
	tv›_v±ofh_t
(
	tv›_v±ofh_¨gs
 *);

174 
	gv›_v±o˙p_¨gs
;

175 
	tv›_v±o˙p_t
(
	tv›_v±o˙p_¨gs
 *);

177 
	gv›_Æloˇã_¨gs
;

178 
	tv›_Æloˇã_t
(
	tv›_Æloˇã_¨gs
 *);

180 
	gv›_advi£_¨gs
;

181 
	tv›_advi£_t
(
	tv›_advi£_¨gs
 *);

183 
	gv›_u≈_böd_¨gs
;

184 
	tv›_u≈_böd_t
(
	tv›_u≈_böd_¨gs
 *);

186 
	gv›_u≈_c⁄√˘_¨gs
;

187 
	tv›_u≈_c⁄√˘_t
(
	tv›_u≈_c⁄√˘_¨gs
 *);

189 
	gv›_u≈_dëach_¨gs
;

190 
	tv›_u≈_dëach_t
(
	tv›_u≈_dëach_¨gs
 *);

192 
	gv›_is_ãxt_¨gs
;

193 
	tv›_is_ãxt_t
(
	tv›_is_ãxt_¨gs
 *);

195 
	gv›_£t_ãxt_¨gs
;

196 
	tv›_£t_ãxt_t
(
	tv›_£t_ãxt_¨gs
 *);

198 
	gv›_un£t_ãxt_¨gs
;

199 
	tv›_un£t_ãxt_t
(
	tv›_un£t_ãxt_¨gs
 *);

201 
	gv›_gë_wrôecou¡_¨gs
;

202 
	tv›_gë_wrôecou¡_t
(
	tv›_gë_wrôecou¡_¨gs
 *);

204 
	gv›_add_wrôecou¡_¨gs
;

205 
	tv›_add_wrôecou¡_t
(
	tv›_add_wrôecou¡_¨gs
 *);

207 
	gv›_fd©async_¨gs
;

208 
	tv›_fd©async_t
(
	tv›_fd©async_¨gs
 *);

210 
	gv›_•¨e1_¨gs
;

211 
	tv›_•¨e1_t
(
	tv›_•¨e1_¨gs
 *);

213 
	gv›_•¨e2_¨gs
;

214 
	tv›_•¨e2_t
(
	tv›_•¨e2_¨gs
 *);

216 
	gv›_•¨e3_¨gs
;

217 
	tv›_•¨e3_t
(
	tv›_•¨e3_¨gs
 *);

219 
	gv›_•¨e4_¨gs
;

220 
	tv›_•¨e4_t
(
	tv›_•¨e4_¨gs
 *);

222 
	gv›_•¨e5_¨gs
;

223 
	tv›_•¨e5_t
(
	tv›_•¨e5_¨gs
 *);

	@src/nvidia-drm/x86/_align.h

43 #i‚de‡
_X86_INCLUDE__ALIGN_H_


44 
	#_X86_INCLUDE__ALIGN_H_


	)

51 
	#_ALIGNBYTES
 ((
__ªgi°î_t
Ë- 1)

	)

52 
	#_ALIGN
(
p
Ë(((
__uöçå_t
)’Ë+ 
_ALIGNBYTES
Ë& ~_ALIGNBYTES)

	)

	@src/nvidia-drm/x86/_inttypes.h

35 #i‚de‡
_MACHINE_INTTYPES_H_


36 
	#_MACHINE_INTTYPES_H_


	)

42 #ifde‡
__LP64__


43 
	#__PRI64
 "l"

	)

44 
	#__PRI±r
 "l"

	)

46 
	#__PRI64
 "Œ"

	)

47 
	#__PRI±r


	)

52 
	#PRId8
 "d"

	)

53 
	#PRId16
 "d"

	)

54 
	#PRId32
 "d"

	)

55 
	#PRId64
 
__PRI64
"d"

	)

56 
	#PRIdLEAST8
 "d"

	)

57 
	#PRIdLEAST16
 "d"

	)

58 
	#PRIdLEAST32
 "d"

	)

59 
	#PRIdLEAST64
 
__PRI64
"d"

	)

60 
	#PRIdFAST8
 "d"

	)

61 
	#PRIdFAST16
 "d"

	)

62 
	#PRIdFAST32
 "d"

	)

63 
	#PRIdFAST64
 
__PRI64
"d"

	)

64 
	#PRIdMAX
 "jd"

	)

65 
	#PRIdPTR
 
__PRI±r
"d"

	)

67 
	#PRIi8
 "i"

	)

68 
	#PRIi16
 "i"

	)

69 
	#PRIi32
 "i"

	)

70 
	#PRIi64
 
__PRI64
"i"

	)

71 
	#PRIiLEAST8
 "i"

	)

72 
	#PRIiLEAST16
 "i"

	)

73 
	#PRIiLEAST32
 "i"

	)

74 
	#PRIiLEAST64
 
__PRI64
"i"

	)

75 
	#PRIiFAST8
 "i"

	)

76 
	#PRIiFAST16
 "i"

	)

77 
	#PRIiFAST32
 "i"

	)

78 
	#PRIiFAST64
 
__PRI64
"i"

	)

79 
	#PRIiMAX
 "ji"

	)

80 
	#PRIiPTR
 
__PRI±r
"i"

	)

84 
	#PRIo8
 "o"

	)

85 
	#PRIo16
 "o"

	)

86 
	#PRIo32
 "o"

	)

87 
	#PRIo64
 
__PRI64
"o"

	)

88 
	#PRIoLEAST8
 "o"

	)

89 
	#PRIoLEAST16
 "o"

	)

90 
	#PRIoLEAST32
 "o"

	)

91 
	#PRIoLEAST64
 
__PRI64
"o"

	)

92 
	#PRIoFAST8
 "o"

	)

93 
	#PRIoFAST16
 "o"

	)

94 
	#PRIoFAST32
 "o"

	)

95 
	#PRIoFAST64
 
__PRI64
"o"

	)

96 
	#PRIoMAX
 "jo"

	)

97 
	#PRIoPTR
 
__PRI±r
"o"

	)

99 
	#PRIu8
 "u"

	)

100 
	#PRIu16
 "u"

	)

101 
	#PRIu32
 "u"

	)

102 
	#PRIu64
 
__PRI64
"u"

	)

103 
	#PRIuLEAST8
 "u"

	)

104 
	#PRIuLEAST16
 "u"

	)

105 
	#PRIuLEAST32
 "u"

	)

106 
	#PRIuLEAST64
 
__PRI64
"u"

	)

107 
	#PRIuFAST8
 "u"

	)

108 
	#PRIuFAST16
 "u"

	)

109 
	#PRIuFAST32
 "u"

	)

110 
	#PRIuFAST64
 
__PRI64
"u"

	)

111 
	#PRIuMAX
 "ju"

	)

112 
	#PRIuPTR
 
__PRI±r
"u"

	)

114 
	#PRIx8
 "x"

	)

115 
	#PRIx16
 "x"

	)

116 
	#PRIx32
 "x"

	)

117 
	#PRIx64
 
__PRI64
"x"

	)

118 
	#PRIxLEAST8
 "x"

	)

119 
	#PRIxLEAST16
 "x"

	)

120 
	#PRIxLEAST32
 "x"

	)

121 
	#PRIxLEAST64
 
__PRI64
"x"

	)

122 
	#PRIxFAST8
 "x"

	)

123 
	#PRIxFAST16
 "x"

	)

124 
	#PRIxFAST32
 "x"

	)

125 
	#PRIxFAST64
 
__PRI64
"x"

	)

126 
	#PRIxMAX
 "jx"

	)

127 
	#PRIxPTR
 
__PRI±r
"x"

	)

129 
	#PRIX8
 "X"

	)

130 
	#PRIX16
 "X"

	)

131 
	#PRIX32
 "X"

	)

132 
	#PRIX64
 
__PRI64
"X"

	)

133 
	#PRIXLEAST8
 "X"

	)

134 
	#PRIXLEAST16
 "X"

	)

135 
	#PRIXLEAST32
 "X"

	)

136 
	#PRIXLEAST64
 
__PRI64
"X"

	)

137 
	#PRIXFAST8
 "X"

	)

138 
	#PRIXFAST16
 "X"

	)

139 
	#PRIXFAST32
 "X"

	)

140 
	#PRIXFAST64
 
__PRI64
"X"

	)

141 
	#PRIXMAX
 "jX"

	)

142 
	#PRIXPTR
 
__PRI±r
"X"

	)

146 
	#SCNd8
 "hhd"

	)

147 
	#SCNd16
 "hd"

	)

148 
	#SCNd32
 "d"

	)

149 
	#SCNd64
 
__PRI64
"d"

	)

150 
	#SCNdLEAST8
 "hhd"

	)

151 
	#SCNdLEAST16
 "hd"

	)

152 
	#SCNdLEAST32
 "d"

	)

153 
	#SCNdLEAST64
 
__PRI64
"d"

	)

154 
	#SCNdFAST8
 "d"

	)

155 
	#SCNdFAST16
 "d"

	)

156 
	#SCNdFAST32
 "d"

	)

157 
	#SCNdFAST64
 
__PRI64
"d"

	)

158 
	#SCNdMAX
 "jd"

	)

159 
	#SCNdPTR
 
__PRI±r
"d"

	)

161 
	#SCNi8
 "hhi"

	)

162 
	#SCNi16
 "hi"

	)

163 
	#SCNi32
 "i"

	)

164 
	#SCNi64
 
__PRI64
"i"

	)

165 
	#SCNiLEAST8
 "hhi"

	)

166 
	#SCNiLEAST16
 "hi"

	)

167 
	#SCNiLEAST32
 "i"

	)

168 
	#SCNiLEAST64
 
__PRI64
"i"

	)

169 
	#SCNiFAST8
 "i"

	)

170 
	#SCNiFAST16
 "i"

	)

171 
	#SCNiFAST32
 "i"

	)

172 
	#SCNiFAST64
 
__PRI64
"i"

	)

173 
	#SCNiMAX
 "ji"

	)

174 
	#SCNiPTR
 
__PRI±r
"i"

	)

178 
	#SCNo8
 "hho"

	)

179 
	#SCNo16
 "ho"

	)

180 
	#SCNo32
 "o"

	)

181 
	#SCNo64
 
__PRI64
"o"

	)

182 
	#SCNoLEAST8
 "hho"

	)

183 
	#SCNoLEAST16
 "ho"

	)

184 
	#SCNoLEAST32
 "o"

	)

185 
	#SCNoLEAST64
 
__PRI64
"o"

	)

186 
	#SCNoFAST8
 "o"

	)

187 
	#SCNoFAST16
 "o"

	)

188 
	#SCNoFAST32
 "o"

	)

189 
	#SCNoFAST64
 
__PRI64
"o"

	)

190 
	#SCNoMAX
 "jo"

	)

191 
	#SCNoPTR
 
__PRI±r
"o"

	)

193 
	#SCNu8
 "hhu"

	)

194 
	#SCNu16
 "hu"

	)

195 
	#SCNu32
 "u"

	)

196 
	#SCNu64
 
__PRI64
"u"

	)

197 
	#SCNuLEAST8
 "hhu"

	)

198 
	#SCNuLEAST16
 "hu"

	)

199 
	#SCNuLEAST32
 "u"

	)

200 
	#SCNuLEAST64
 
__PRI64
"u"

	)

201 
	#SCNuFAST8
 "u"

	)

202 
	#SCNuFAST16
 "u"

	)

203 
	#SCNuFAST32
 "u"

	)

204 
	#SCNuFAST64
 
__PRI64
"u"

	)

205 
	#SCNuMAX
 "ju"

	)

206 
	#SCNuPTR
 
__PRI±r
"u"

	)

208 
	#SCNx8
 "hhx"

	)

209 
	#SCNx16
 "hx"

	)

210 
	#SCNx32
 "x"

	)

211 
	#SCNx64
 
__PRI64
"x"

	)

212 
	#SCNxLEAST8
 "hhx"

	)

213 
	#SCNxLEAST16
 "hx"

	)

214 
	#SCNxLEAST32
 "x"

	)

215 
	#SCNxLEAST64
 
__PRI64
"x"

	)

216 
	#SCNxFAST8
 "x"

	)

217 
	#SCNxFAST16
 "x"

	)

218 
	#SCNxFAST32
 "x"

	)

219 
	#SCNxFAST64
 
__PRI64
"x"

	)

220 
	#SCNxMAX
 "jx"

	)

221 
	#SCNxPTR
 
__PRI±r
"x"

	)

	@src/nvidia-drm/x86/_limits.h

35 #i‚def 
_MACHINE__LIMITS_H_


36 
	#_MACHINE__LIMITS_H_


	)

47 
	#__CHAR_BIT
 8

	)

49 
	#__SCHAR_MAX
 0x7‡

	)

50 
	#__SCHAR_MIN
 (-0x7‡- 1Ë

	)

52 
	#__UCHAR_MAX
 0xf‡

	)

54 
	#__USHRT_MAX
 0xfff‡

	)

55 
	#__SHRT_MAX
 0x7ff‡

	)

56 
	#__SHRT_MIN
 (-0x7ff‡- 1Ë

	)

58 
	#__UINT_MAX
 0xfffffff‡

	)

59 
	#__INT_MAX
 0x7ffffff‡

	)

60 
	#__INT_MIN
 (-0x7ffffff‡- 1Ë

	)

62 #ifdef 
__LP64__


63 
	#__ULONG_MAX
 0xfffffffffffffff‡

	)

64 
	#__LONG_MAX
 0x7ffffffffffffff‡

	)

65 
	#__LONG_MIN
 (-0x7ffffffffffffff‡- 1Ë

	)

67 
	#__ULONG_MAX
 0xffffffffUL

	)

68 
	#__LONG_MAX
 0x7fffffffL

	)

69 
	#__LONG_MIN
 (-0x7fffffffL - 1)

	)

73 
	#__ULLONG_MAX
 0xffffffffffffffffULL

	)

74 
	#__LLONG_MAX
 0x7fffffffffffffffLL

	)

75 
	#__LLONG_MIN
 (-0x7fffffffffffffffLL - 1Ë

	)

77 #ifdef 
__LP64__


78 
	#__SSIZE_MAX
 
__LONG_MAX


	)

79 
	#__SIZE_T_MAX
 
__ULONG_MAX


	)

80 
	#__OFF_MAX
 
__LONG_MAX


	)

81 
	#__OFF_MIN
 
__LONG_MIN


	)

83 
	#__UQUAD_MAX
 
__ULONG_MAX


	)

84 
	#__QUAD_MAX
 
__LONG_MAX


	)

85 
	#__QUAD_MIN
 
__LONG_MIN


	)

86 
	#__LONG_BIT
 64

	)

88 
	#__SSIZE_MAX
 
__INT_MAX


	)

89 
	#__SIZE_T_MAX
 
__UINT_MAX


	)

90 
	#__OFF_MAX
 
__LLONG_MAX


	)

91 
	#__OFF_MIN
 
__LLONG_MIN


	)

92 
	#__UQUAD_MAX
 
__ULLONG_MAX


	)

93 
	#__QUAD_MAX
 
__LLONG_MAX


	)

94 
	#__QUAD_MIN
 
__LLONG_MIN


	)

95 
	#__LONG_BIT
 32

	)

98 
	#__WORD_BIT
 32

	)

101 
	#__MINSIGSTKSZ
 (512 * 4)

	)

	@src/nvidia-drm/x86/_stdint.h

42 #i‚de‡
_MACHINE__STDINT_H_


43 
	#_MACHINE__STDINT_H_


	)

45 
	~<machöe/_limôs.h
>

47 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

49 
	#INT8_C
(
c
Ë(c)

	)

50 
	#INT16_C
(
c
Ë(c)

	)

51 
	#INT32_C
(
c
Ë(c)

	)

53 
	#UINT8_C
(
c
Ë(c)

	)

54 
	#UINT16_C
(
c
Ë(c)

	)

55 
	#UINT32_C
(
c
Ë(¯## 
U
)

	)

57 #ifdef 
__LP64__


58 
	#INT64_C
(
c
Ë(¯## 
L
)

	)

59 
	#UINT64_C
(
c
Ë(¯## 
UL
)

	)

61 
	#INT64_C
(
c
Ë(¯## 
LL
)

	)

62 
	#UINT64_C
(
c
Ë(¯## 
ULL
)

	)

65 
	#INTMAX_C
(
c
Ë
	`INT64_C
(c)

	)

66 
	#UINTMAX_C
(
c
Ë
	`UINT64_C
(c)

	)

70 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

76 
	#INT8_MIN
 (-0x7f-1)

	)

77 
	#INT16_MIN
 (-0x7fff-1)

	)

78 
	#INT32_MIN
 (-0x7fffffff-1)

	)

80 
	#INT8_MAX
 0x7f

	)

81 
	#INT16_MAX
 0x7fff

	)

82 
	#INT32_MAX
 0x7fffffff

	)

84 
	#UINT8_MAX
 0xff

	)

85 
	#UINT16_MAX
 0xffff

	)

86 
	#UINT32_MAX
 0xffffffffU

	)

88 #ifde‡
__LP64__


89 
	#INT64_MIN
 (-0x7fffffffffffffff-1)

	)

90 
	#INT64_MAX
 0x7fffffffffffffff

	)

91 
	#UINT64_MAX
 0xffffffffffffffff

	)

93 
	#INT64_MIN
 (-0x7fffffffffffffffLL-1)

	)

94 
	#INT64_MAX
 0x7fffffffffffffffLL

	)

95 
	#UINT64_MAX
 0xffffffffffffffffULL

	)

103 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

104 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

105 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

106 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

109 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

110 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

111 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

112 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

115 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

116 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

117 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

118 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

125 
	#INT_FAST8_MIN
 
INT32_MIN


	)

126 
	#INT_FAST16_MIN
 
INT32_MIN


	)

127 
	#INT_FAST32_MIN
 
INT32_MIN


	)

128 
	#INT_FAST64_MIN
 
INT64_MIN


	)

131 
	#INT_FAST8_MAX
 
INT32_MAX


	)

132 
	#INT_FAST16_MAX
 
INT32_MAX


	)

133 
	#INT_FAST32_MAX
 
INT32_MAX


	)

134 
	#INT_FAST64_MAX
 
INT64_MAX


	)

137 
	#UINT_FAST8_MAX
 
UINT32_MAX


	)

138 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

139 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

140 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

146 #ifdef 
__LP64__


147 
	#INTPTR_MIN
 
INT64_MIN


	)

148 
	#INTPTR_MAX
 
INT64_MAX


	)

149 
	#UINTPTR_MAX
 
UINT64_MAX


	)

151 
	#INTPTR_MIN
 
INT32_MIN


	)

152 
	#INTPTR_MAX
 
INT32_MAX


	)

153 
	#UINTPTR_MAX
 
UINT32_MAX


	)

160 
	#INTMAX_MIN
 
INT64_MIN


	)

161 
	#INTMAX_MAX
 
INT64_MAX


	)

162 
	#UINTMAX_MAX
 
UINT64_MAX


	)

168 #ifdef 
__LP64__


170 
	#PTRDIFF_MIN
 
INT64_MIN


	)

171 
	#PTRDIFF_MAX
 
INT64_MAX


	)

174 
	#SIG_ATOMIC_MIN
 
__LONG_MIN


	)

175 
	#SIG_ATOMIC_MAX
 
__LONG_MAX


	)

178 
	#SIZE_MAX
 
UINT64_MAX


	)

180 
	#PTRDIFF_MIN
 
INT32_MIN


	)

181 
	#PTRDIFF_MAX
 
INT32_MAX


	)

182 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

183 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

184 
	#SIZE_MAX
 
UINT32_MAX


	)

188 
	#WINT_MIN
 
INT32_MIN


	)

189 
	#WINT_MAX
 
INT32_MAX


	)

	@src/nvidia-drm/x86/_types.h

41 #i‚de‡
_MACHINE__TYPES_H_


42 
	#_MACHINE__TYPES_H_


	)

44 #i‚de‡
_SYS_CDEFS_H_


45 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


48 
	~<machöe/_limôs.h
>

50 
	#__NO_STRICT_ALIGNMENT


	)

55 sig√d 
	t__öt8_t
;

56 
	t__uöt8_t
;

57 
	t__öt16_t
;

58 
	t__uöt16_t
;

59 
	t__öt32_t
;

60 
	t__uöt32_t
;

61 #ifdef 
__LP64__


62 
	t__öt64_t
;

63 
	t__uöt64_t
;

65 
__exãnsi⁄__


66 
	t__öt64_t
;

67 
__exãnsi⁄__


68 
	t__uöt64_t
;

74 #ifdef 
__LP64__


75 
__öt32_t
 
	t__˛ock_t
;

76 
__öt64_t
 
	t__¸ôiˇl_t
;

77 #i‚de‡
_STANDALONE


78 
	t__doubÀ_t
;

79 
	t__Êﬂt_t
;

81 
__öt64_t
 
	t__ötÂå_t
;

82 
__öt64_t
 
	t__öçå_t
;

84 
	t__˛ock_t
;

85 
__öt32_t
 
	t__¸ôiˇl_t
;

86 #i‚de‡
_STANDALONE


87 
	t__doubÀ_t
;

88 
	t__Êﬂt_t
;

90 
__öt32_t
 
	t__ötÂå_t
;

91 
__öt32_t
 
	t__öçå_t
;

93 
__öt64_t
 
	t__ötmax_t
;

94 
__öt32_t
 
	t__öt_Á°8_t
;

95 
__öt32_t
 
	t__öt_Á°16_t
;

96 
__öt32_t
 
	t__öt_Á°32_t
;

97 
__öt64_t
 
	t__öt_Á°64_t
;

98 
__öt8_t
 
	t__öt_Àa°8_t
;

99 
__öt16_t
 
	t__öt_Àa°16_t
;

100 
__öt32_t
 
	t__öt_Àa°32_t
;

101 
__öt64_t
 
	t__öt_Àa°64_t
;

102 #ifdef 
__LP64__


103 
__öt64_t
 
	t__±rdiff_t
;

104 
__öt64_t
 
	t__ªgi°î_t
;

105 
__öt64_t
 
	t__£gsz_t
;

106 
__uöt64_t
 
	t__size_t
;

107 
__öt64_t
 
	t__ssize_t
;

108 
__öt64_t
 
	t__time_t
;

109 
__uöt64_t
 
	t__uötÂå_t
;

110 
__uöt64_t
 
	t__uöçå_t
;

112 
__öt32_t
 
	t__±rdiff_t
;

113 
__öt32_t
 
	t__ªgi°î_t
;

114 
__öt32_t
 
	t__£gsz_t
;

115 
__uöt32_t
 
	t__size_t
;

116 
__öt32_t
 
	t__ssize_t
;

117 
__öt32_t
 
	t__time_t
;

118 
__uöt32_t
 
	t__uötÂå_t
;

119 
__uöt32_t
 
	t__uöçå_t
;

121 
__uöt64_t
 
	t__uötmax_t
;

122 
__uöt32_t
 
	t__uöt_Á°8_t
;

123 
__uöt32_t
 
	t__uöt_Á°16_t
;

124 
__uöt32_t
 
	t__uöt_Á°32_t
;

125 
__uöt64_t
 
	t__uöt_Á°64_t
;

126 
__uöt8_t
 
	t__uöt_Àa°8_t
;

127 
__uöt16_t
 
	t__uöt_Àa°16_t
;

128 
__uöt32_t
 
	t__uöt_Àa°32_t
;

129 
__uöt64_t
 
	t__uöt_Àa°64_t
;

130 #ifdef 
__LP64__


131 
__uöt64_t
 
	t__u_ªgi°î_t
;

132 
__uöt64_t
 
	t__vm_off£t_t
;

133 
__uöt64_t
 
	t__vm_∑ddr_t
;

134 
__uöt64_t
 
	t__vm_size_t
;

136 
__uöt32_t
 
	t__u_ªgi°î_t
;

137 
__uöt32_t
 
	t__vm_off£t_t
;

138 #ifde‡
PAE


139 
__uöt64_t
 
	t__vm_∑ddr_t
;

141 
__uöt32_t
 
	t__vm_∑ddr_t
;

143 
__uöt32_t
 
	t__vm_size_t
;

145 
	t___wch¨_t
;

147 
	#__WCHAR_MIN
 
__INT_MIN


	)

148 
	#__WCHAR_MAX
 
__INT_MAX


	)

	@src/nvidia-drm/x86/acpica_machdep.h

38 #i‚de‡
__ACPICA_MACHDEP_H__


39 
	#__ACPICA_MACHDEP_H__


	)

41 #ifde‡
_KERNEL


50 
	#ACPI_SYSTEM_XFACE


	)

51 
	#ACPI_EXTERNAL_XFACE


	)

52 
	#ACPI_INTERNAL_XFACE


	)

53 
	#ACPI_INTERNAL_VAR_XFACE


	)

57 
	#ACPI_ASM_MACROS


	)

58 
	#BREAKPOINT3


	)

59 
	#ACPI_DISABLE_IRQS
(Ë
	`dißbÀ_öå
()

	)

60 
	#ACPI_ENABLE_IRQS
(Ë
	`íabÀ_öå
()

	)

62 
	#ACPI_FLUSH_CPU_CACHE
(Ë
	`wbövd
()

	)

65 
a˝i_acquúe_globÆ_lock
(vﬁ©ûê
uöt32_t
 *);

66 
a˝i_ªÀa£_globÆ_lock
(vﬁ©ûê
uöt32_t
 *);

67 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acq
) do { \

68 (
Acq
Ë
	`a˝i_acquúe_globÆ_lock
(&((
GL±r
)->
GlobÆLock
)); \

69 } 0)

	)

70 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Acq
) do { \

71 (
Acq
Ë
	`a˝i_ªÀa£_globÆ_lock
(&((
GL±r
)->
GlobÆLock
)); \

72 } 0)

	)

74 
	göå_åiggî
;

75 
	göå_pﬁ¨ôy
;

77 
a˝i_SëDeÁu…I¡rModñ
(
modñ
);

78 
a˝i_˝u_c1
();

79 
a˝i_˝u_idÀ_mwaô
(
uöt32_t
 
mwaô_höt
);

80 *
a˝i_m≠_èbÀ
(
vm_∑ddr_t
 
∑
, c⁄° *
sig
);

81 
a˝i_unm≠_èbÀ
(*
èbÀ
);

82 
vm_∑ddr_t
 
a˝i_föd_èbÀ
(c⁄° *
sig
);

83 
madt_∑r£_öãºu±_vÆues
(*
íåy
,

84 
öå_åiggî
 *
åig
, 
öå_pﬁ¨ôy
 *
pﬁ
);

86 
madt_found_sci_ovîride
;

	@src/nvidia-drm/x86/apicreg.h

30 #i‚de‡
_X86_APICREG_H_


31 
	#_X86_APICREG_H_


	)

123 #i‚de‡
LOCORE


124 
	~<sys/ty≥s.h
>

126 
	#PAD3
 : 32; : 32; : 32

	)

127 
	#PAD4
 : 32; : 32; : 32; : 32

	)

129 
	sLAPIC
 {

130  
	mPAD4
;

131  
	mPAD4
;

132 
u_öt32_t
 
	mid
; 
	mPAD3
;

133 
u_öt32_t
 
	mvîsi⁄
; 
	mPAD3
;

134  
	mPAD4
;

135  
	mPAD4
;

136  
	mPAD4
;

137  
	mPAD4
;

138 
u_öt32_t
 
	mçr
; 
	mPAD3
;

139 
u_öt32_t
 
	m≠r
; 
	mPAD3
;

140 
u_öt32_t
 
	mµr
; 
	mPAD3
;

141 
u_öt32_t
 
	meoi
; 
	mPAD3
;

142  
	mPAD4
;

143 
u_öt32_t
 
	mldr
; 
	mPAD3
;

144 
u_öt32_t
 
	md‰
; 
	mPAD3
;

145 
u_öt32_t
 
	msvr
; 
	mPAD3
;

146 
u_öt32_t
 
	mi§0
; 
	mPAD3
;

147 
u_öt32_t
 
	mi§1
; 
	mPAD3
;

148 
u_öt32_t
 
	mi§2
; 
	mPAD3
;

149 
u_öt32_t
 
	mi§3
; 
	mPAD3
;

150 
u_öt32_t
 
	mi§4
; 
	mPAD3
;

151 
u_öt32_t
 
	mi§5
; 
	mPAD3
;

152 
u_öt32_t
 
	mi§6
; 
	mPAD3
;

153 
u_öt32_t
 
	mi§7
; 
	mPAD3
;

154 
u_öt32_t
 
	mtmr0
; 
	mPAD3
;

155 
u_öt32_t
 
	mtmr1
; 
	mPAD3
;

156 
u_öt32_t
 
	mtmr2
; 
	mPAD3
;

157 
u_öt32_t
 
	mtmr3
; 
	mPAD3
;

158 
u_öt32_t
 
	mtmr4
; 
	mPAD3
;

159 
u_öt32_t
 
	mtmr5
; 
	mPAD3
;

160 
u_öt32_t
 
	mtmr6
; 
	mPAD3
;

161 
u_öt32_t
 
	mtmr7
; 
	mPAD3
;

162 
u_öt32_t
 
	múr0
; 
	mPAD3
;

163 
u_öt32_t
 
	múr1
; 
	mPAD3
;

164 
u_öt32_t
 
	múr2
; 
	mPAD3
;

165 
u_öt32_t
 
	múr3
; 
	mPAD3
;

166 
u_öt32_t
 
	múr4
; 
	mPAD3
;

167 
u_öt32_t
 
	múr5
; 
	mPAD3
;

168 
u_öt32_t
 
	múr6
; 
	mPAD3
;

169 
u_öt32_t
 
	múr7
; 
	mPAD3
;

170 
u_öt32_t
 
	me§
; 
	mPAD3
;

171  
	mPAD4
;

172  
	mPAD4
;

173  
	mPAD4
;

174  
	mPAD4
;

175  
	mPAD4
;

176  
	mPAD4
;

177 
u_öt32_t
 
	mlvt_cmci
; 
	mPAD3
;

178 
u_öt32_t
 
	mi¸_lo
; 
	mPAD3
;

179 
u_öt32_t
 
	mi¸_hi
; 
	mPAD3
;

180 
u_öt32_t
 
	mlvt_timî
; 
	mPAD3
;

181 
u_öt32_t
 
	mlvt_thîmÆ
; 
	mPAD3
;

182 
u_öt32_t
 
	mlvt_pcöt
; 
	mPAD3
;

183 
u_öt32_t
 
	mlvt_löt0
; 
	mPAD3
;

184 
u_öt32_t
 
	mlvt_löt1
; 
	mPAD3
;

185 
u_öt32_t
 
	mlvt_îr‹
; 
	mPAD3
;

186 
u_öt32_t
 
	mi¸_timî
; 
	mPAD3
;

187 
u_öt32_t
 
	mc¸_timî
; 
	mPAD3
;

188  
	mPAD4
;

189  
	mPAD4
;

190  
	mPAD4
;

191  
	mPAD4
;

192 
u_öt32_t
 
	md¸_timî
; 
	mPAD3
;

193  
	mPAD4
;

196 
LAPIC
 
	tœpic_t
;

198 
	eLAPIC_REGISTERS
 {

199 
	mLAPIC_ID
 = 0x2,

200 
	mLAPIC_VERSION
 = 0x3,

201 
	mLAPIC_TPR
 = 0x8,

202 
	mLAPIC_APR
 = 0x9,

203 
	mLAPIC_PPR
 = 0xa,

204 
	mLAPIC_EOI
 = 0xb,

205 
	mLAPIC_LDR
 = 0xd,

206 
	mLAPIC_DFR
 = 0xe,

207 
	mLAPIC_SVR
 = 0xf,

208 
	mLAPIC_ISR0
 = 0x10,

209 
	mLAPIC_ISR1
 = 0x11,

210 
	mLAPIC_ISR2
 = 0x12,

211 
	mLAPIC_ISR3
 = 0x13,

212 
	mLAPIC_ISR4
 = 0x14,

213 
	mLAPIC_ISR5
 = 0x15,

214 
	mLAPIC_ISR6
 = 0x16,

215 
	mLAPIC_ISR7
 = 0x17,

216 
	mLAPIC_TMR0
 = 0x18,

217 
	mLAPIC_TMR1
 = 0x19,

218 
	mLAPIC_TMR2
 = 0x1a,

219 
	mLAPIC_TMR3
 = 0x1b,

220 
	mLAPIC_TMR4
 = 0x1c,

221 
	mLAPIC_TMR5
 = 0x1d,

222 
	mLAPIC_TMR6
 = 0x1e,

223 
	mLAPIC_TMR7
 = 0x1f,

224 
	mLAPIC_IRR0
 = 0x20,

225 
	mLAPIC_IRR1
 = 0x21,

226 
	mLAPIC_IRR2
 = 0x22,

227 
	mLAPIC_IRR3
 = 0x23,

228 
	mLAPIC_IRR4
 = 0x24,

229 
	mLAPIC_IRR5
 = 0x25,

230 
	mLAPIC_IRR6
 = 0x26,

231 
	mLAPIC_IRR7
 = 0x27,

232 
	mLAPIC_ESR
 = 0x28,

233 
	mLAPIC_LVT_CMCI
 = 0x2f,

234 
	mLAPIC_ICR_LO
 = 0x30,

235 
	mLAPIC_ICR_HI
 = 0x31,

236 
	mLAPIC_LVT_TIMER
 = 0x32,

237 
	mLAPIC_LVT_THERMAL
 = 0x33,

238 
	mLAPIC_LVT_PCINT
 = 0x34,

239 
	mLAPIC_LVT_LINT0
 = 0x35,

240 
	mLAPIC_LVT_LINT1
 = 0x36,

241 
	mLAPIC_LVT_ERROR
 = 0x37,

242 
	mLAPIC_ICR_TIMER
 = 0x38,

243 
	mLAPIC_CCR_TIMER
 = 0x39,

244 
	mLAPIC_DCR_TIMER
 = 0x3e,

245 
	mLAPIC_SELF_IPI
 = 0x3f,

246 
	mLAPIC_EXT_FEATURES
 = 0x40,

247 
	mLAPIC_EXT_CTRL
 = 0x41,

248 
	mLAPIC_EXT_SEOI
 = 0x42,

249 
	mLAPIC_EXT_IER0
 = 0x48,

250 
	mLAPIC_EXT_IER1
 = 0x49,

251 
	mLAPIC_EXT_IER2
 = 0x4a,

252 
	mLAPIC_EXT_IER3
 = 0x4b,

253 
	mLAPIC_EXT_IER4
 = 0x4c,

254 
	mLAPIC_EXT_IER5
 = 0x4d,

255 
	mLAPIC_EXT_IER6
 = 0x4e,

256 
	mLAPIC_EXT_IER7
 = 0x4f,

257 
	mLAPIC_EXT_LVT0
 = 0x50,

258 
	mLAPIC_EXT_LVT1
 = 0x51,

259 
	mLAPIC_EXT_LVT2
 = 0x52,

260 
	mLAPIC_EXT_LVT3
 = 0x53,

263 
	#LAPIC_MEM_MUL
 0x10

	)

271 
	#LAPIC_MEM_REGION
 ((
LAPIC_EXT_LVT3
 + 1Ë* 
LAPIC_MEM_MUL
)

	)

277 
	sIOAPIC
 {

278 
u_öt32_t
 
	mi‹eg£l
; 
	mPAD3
;

279 
u_öt32_t
 
	miowö
; 
	mPAD3
;

282 
IOAPIC
 
	tiﬂpic_t
;

284 #unde‡
PAD4


285 #unde‡
PAD3


299 
	#DEFAULT_APIC_BASE
 0x„e00000

	)

302 
	#APIC_ID_MASK
 0xff000000

	)

303 
	#APIC_ID_SHIFT
 24

	)

304 
	#APIC_ID_CLUSTER
 0xf0

	)

305 
	#APIC_ID_CLUSTER_ID
 0x0f

	)

306 
	#APIC_MAX_CLUSTER
 0xe

	)

307 
	#APIC_MAX_INTRACLUSTER_ID
 3

	)

308 
	#APIC_ID_CLUSTER_SHIFT
 4

	)

311 
	#APIC_VER_VERSION
 0x000000ff

	)

312 
	#APIC_VER_MAXLVT
 0x00ff0000

	)

313 
	#MAXLVTSHIFT
 16

	)

314 
	#APIC_VER_EOI_SUPPRESSION
 0x01000000

	)

315 
	#APIC_VER_AMD_EXT_SPACE
 0x80000000

	)

318 
	#APIC_LDR_RESERVED
 0x00ffffff

	)

321 
	#APIC_DFR_RESERVED
 0x0fffffff

	)

322 
	#APIC_DFR_MODEL_MASK
 0xf0000000

	)

323 
	#APIC_DFR_MODEL_FLAT
 0xf0000000

	)

324 
	#APIC_DFR_MODEL_CLUSTER
 0x00000000

	)

327 
	#APIC_SVR_VECTOR
 0x000000ff

	)

328 
	#APIC_SVR_VEC_PROG
 0x000000f0

	)

329 
	#APIC_SVR_VEC_FIX
 0x0000000f

	)

330 
	#APIC_SVR_ENABLE
 0x00000100

	)

331 
	#APIC_SVR_SWDIS
 0x00000000

	)

332 
	#APIC_SVR_SWEN
 0x00000100

	)

333 
	#APIC_SVR_FOCUS
 0x00000200

	)

334 
	#APIC_SVR_FEN
 0x00000000

	)

335 
	#APIC_SVR_FDIS
 0x00000200

	)

336 
	#APIC_SVR_EOI_SUPPRESSION
 0x00001000

	)

339 
	#APIC_TPR_PRIO
 0x000000ff

	)

340 
	#APIC_TPR_INT
 0x000000f0

	)

341 
	#APIC_TPR_SUB
 0x0000000f

	)

344 
	#APIC_ESR_SEND_CS_ERROR
 0x00000001

	)

345 
	#APIC_ESR_RECEIVE_CS_ERROR
 0x00000002

	)

346 
	#APIC_ESR_SEND_ACCEPT
 0x00000004

	)

347 
	#APIC_ESR_RECEIVE_ACCEPT
 0x00000008

	)

348 
	#APIC_ESR_SEND_ILLEGAL_VECTOR
 0x00000020

	)

349 
	#APIC_ESR_RECEIVE_ILLEGAL_VECTOR
 0x00000040

	)

350 
	#APIC_ESR_ILLEGAL_REGISTER
 0x00000080

	)

353 
	#APIC_VECTOR_MASK
 0x000000ff

	)

355 
	#APIC_DELMODE_MASK
 0x00000700

	)

356 
	#APIC_DELMODE_FIXED
 0x00000000

	)

357 
	#APIC_DELMODE_LOWPRIO
 0x00000100

	)

358 
	#APIC_DELMODE_SMI
 0x00000200

	)

359 
	#APIC_DELMODE_RR
 0x00000300

	)

360 
	#APIC_DELMODE_NMI
 0x00000400

	)

361 
	#APIC_DELMODE_INIT
 0x00000500

	)

362 
	#APIC_DELMODE_STARTUP
 0x00000600

	)

363 
	#APIC_DELMODE_RESV
 0x00000700

	)

365 
	#APIC_DESTMODE_MASK
 0x00000800

	)

366 
	#APIC_DESTMODE_PHY
 0x00000000

	)

367 
	#APIC_DESTMODE_LOG
 0x00000800

	)

369 
	#APIC_DELSTAT_MASK
 0x00001000

	)

370 
	#APIC_DELSTAT_IDLE
 0x00000000

	)

371 
	#APIC_DELSTAT_PEND
 0x00001000

	)

373 
	#APIC_RESV1_MASK
 0x00002000

	)

375 
	#APIC_LEVEL_MASK
 0x00004000

	)

376 
	#APIC_LEVEL_DEASSERT
 0x00000000

	)

377 
	#APIC_LEVEL_ASSERT
 0x00004000

	)

379 
	#APIC_TRIGMOD_MASK
 0x00008000

	)

380 
	#APIC_TRIGMOD_EDGE
 0x00000000

	)

381 
	#APIC_TRIGMOD_LEVEL
 0x00008000

	)

383 
	#APIC_RRSTAT_MASK
 0x00030000

	)

384 
	#APIC_RRSTAT_INVALID
 0x00000000

	)

385 
	#APIC_RRSTAT_INPROG
 0x00010000

	)

386 
	#APIC_RRSTAT_VALID
 0x00020000

	)

387 
	#APIC_RRSTAT_RESV
 0x00030000

	)

389 
	#APIC_DEST_MASK
 0x000c0000

	)

390 
	#APIC_DEST_DESTFLD
 0x00000000

	)

391 
	#APIC_DEST_SELF
 0x00040000

	)

392 
	#APIC_DEST_ALLISELF
 0x00080000

	)

393 
	#APIC_DEST_ALLESELF
 0x000c0000

	)

395 
	#APIC_RESV2_MASK
 0xfff00000

	)

397 
	#APIC_ICRLO_RESV_MASK
 (
APIC_RESV1_MASK
 | 
APIC_RESV2_MASK
)

	)

400 
	#APIC_LVT_VECTOR
 0x000000ff

	)

401 
	#APIC_LVT_DM
 0x00000700

	)

402 
	#APIC_LVT_DM_FIXED
 0x00000000

	)

403 
	#APIC_LVT_DM_SMI
 0x00000200

	)

404 
	#APIC_LVT_DM_NMI
 0x00000400

	)

405 
	#APIC_LVT_DM_INIT
 0x00000500

	)

406 
	#APIC_LVT_DM_EXTINT
 0x00000700

	)

407 
	#APIC_LVT_DS
 0x00001000

	)

408 
	#APIC_LVT_IIPP
 0x00002000

	)

409 
	#APIC_LVT_IIPP_INTALO
 0x00002000

	)

410 
	#APIC_LVT_IIPP_INTAHI
 0x00000000

	)

411 
	#APIC_LVT_RIRR
 0x00004000

	)

412 
	#APIC_LVT_TM
 0x00008000

	)

413 
	#APIC_LVT_M
 0x00010000

	)

417 
	#APIC_LVTT_VECTOR
 0x000000ff

	)

418 
	#APIC_LVTT_DS
 0x00001000

	)

419 
	#APIC_LVTT_M
 0x00010000

	)

420 
	#APIC_LVTT_TM
 0x00060000

	)

421 
	#APIC_LVTT_TM_ONE_SHOT
 0x00000000

	)

422 
	#APIC_LVTT_TM_PERIODIC
 0x00020000

	)

423 
	#APIC_LVTT_TM_TSCDLT
 0x00040000

	)

424 
	#APIC_LVTT_TM_RSRV
 0x00060000

	)

427 
	#APIC_TIMER_MAX_COUNT
 0xffffffff

	)

430 
	#APIC_TDCR_2
 0x00

	)

431 
	#APIC_TDCR_4
 0x01

	)

432 
	#APIC_TDCR_8
 0x02

	)

433 
	#APIC_TDCR_16
 0x03

	)

434 
	#APIC_TDCR_32
 0x08

	)

435 
	#APIC_TDCR_64
 0x09

	)

436 
	#APIC_TDCR_128
 0x0a

	)

437 
	#APIC_TDCR_1
 0x0b

	)

440 
	#APIC_EXTF_ELVT_MASK
 0x00ff0000

	)

441 
	#APIC_EXTF_ELVT_SHIFT
 16

	)

442 
	#APIC_EXTF_EXTID_CAP
 0x00000004

	)

443 
	#APIC_EXTF_SEIO_CAP
 0x00000002

	)

444 
	#APIC_EXTF_IER_CAP
 0x00000001

	)

447 
	#APIC_LVT_LINT0
 0

	)

448 
	#APIC_LVT_LINT1
 1

	)

449 
	#APIC_LVT_TIMER
 2

	)

450 
	#APIC_LVT_ERROR
 3

	)

451 
	#APIC_LVT_PMC
 4

	)

452 
	#APIC_LVT_THERMAL
 5

	)

453 
	#APIC_LVT_CMCI
 6

	)

454 
	#APIC_LVT_MAX
 
APIC_LVT_CMCI


	)

457 
	#APIC_ELVT_IBS
 0

	)

458 
	#APIC_ELVT_MCA
 1

	)

459 
	#APIC_ELVT_DEI
 2

	)

460 
	#APIC_ELVT_SBI
 3

	)

461 
	#APIC_ELVT_MAX
 
APIC_ELVT_SBI


	)

468 
	#DEFAULT_IO_APIC_BASE
 0x„c00000

	)

471 
	#IOAPIC_WINDOW
 0x10

	)

472 
	#IOAPIC_EOIR
 0x40

	)

474 
	#IOAPIC_WND_SIZE
 0x50

	)

477 
	#IOAPIC_ID
 0x00

	)

478 
	#IOAPIC_VER
 0x01

	)

479 
	#IOAPIC_ARB
 0x02

	)

480 
	#IOAPIC_REDTBL
 0x10

	)

481 
	#IOAPIC_REDTBL0
 
IOAPIC_REDTBL


	)

482 
	#IOAPIC_REDTBL1
 (
IOAPIC_REDTBL
+0x02)

	)

483 
	#IOAPIC_REDTBL2
 (
IOAPIC_REDTBL
+0x04)

	)

484 
	#IOAPIC_REDTBL3
 (
IOAPIC_REDTBL
+0x06)

	)

485 
	#IOAPIC_REDTBL4
 (
IOAPIC_REDTBL
+0x08)

	)

486 
	#IOAPIC_REDTBL5
 (
IOAPIC_REDTBL
+0x0a)

	)

487 
	#IOAPIC_REDTBL6
 (
IOAPIC_REDTBL
+0x0c)

	)

488 
	#IOAPIC_REDTBL7
 (
IOAPIC_REDTBL
+0x0e)

	)

489 
	#IOAPIC_REDTBL8
 (
IOAPIC_REDTBL
+0x10)

	)

490 
	#IOAPIC_REDTBL9
 (
IOAPIC_REDTBL
+0x12)

	)

491 
	#IOAPIC_REDTBL10
 (
IOAPIC_REDTBL
+0x14)

	)

492 
	#IOAPIC_REDTBL11
 (
IOAPIC_REDTBL
+0x16)

	)

493 
	#IOAPIC_REDTBL12
 (
IOAPIC_REDTBL
+0x18)

	)

494 
	#IOAPIC_REDTBL13
 (
IOAPIC_REDTBL
+0x1a)

	)

495 
	#IOAPIC_REDTBL14
 (
IOAPIC_REDTBL
+0x1c)

	)

496 
	#IOAPIC_REDTBL15
 (
IOAPIC_REDTBL
+0x1e)

	)

497 
	#IOAPIC_REDTBL16
 (
IOAPIC_REDTBL
+0x20)

	)

498 
	#IOAPIC_REDTBL17
 (
IOAPIC_REDTBL
+0x22)

	)

499 
	#IOAPIC_REDTBL18
 (
IOAPIC_REDTBL
+0x24)

	)

500 
	#IOAPIC_REDTBL19
 (
IOAPIC_REDTBL
+0x26)

	)

501 
	#IOAPIC_REDTBL20
 (
IOAPIC_REDTBL
+0x28)

	)

502 
	#IOAPIC_REDTBL21
 (
IOAPIC_REDTBL
+0x2a)

	)

503 
	#IOAPIC_REDTBL22
 (
IOAPIC_REDTBL
+0x2c)

	)

504 
	#IOAPIC_REDTBL23
 (
IOAPIC_REDTBL
+0x2e)

	)

507 
	#IOART_VER_VERSION
 0x000000ff

	)

508 
	#IOART_VER_MAXREDIR
 0x00ff0000

	)

509 
	#MAXREDIRSHIFT
 16

	)

514 
	#IOART_DEST
 
APIC_ID_MASK


	)

516 
	#IOART_RESV
 0x00„0000

	)

518 
	#IOART_INTMASK
 0x00010000

	)

519 
	#IOART_INTMCLR
 0x00000000

	)

520 
	#IOART_INTMSET
 0x00010000

	)

522 
	#IOART_TRGRMOD
 0x00008000

	)

523 
	#IOART_TRGREDG
 0x00000000

	)

524 
	#IOART_TRGRLVL
 0x00008000

	)

526 
	#IOART_REM_IRR
 0x00004000

	)

528 
	#IOART_INTPOL
 0x00002000

	)

529 
	#IOART_INTAHI
 0x00000000

	)

530 
	#IOART_INTALO
 0x00002000

	)

532 
	#IOART_DELIVS
 0x00001000

	)

534 
	#IOART_DESTMOD
 0x00000800

	)

535 
	#IOART_DESTPHY
 0x00000000

	)

536 
	#IOART_DESTLOG
 0x00000800

	)

538 
	#IOART_DELMOD
 0x00000700

	)

539 
	#IOART_DELFIXED
 0x00000000

	)

540 
	#IOART_DELLOPRI
 0x00000100

	)

541 
	#IOART_DELSMI
 0x00000200

	)

542 
	#IOART_DELRSV1
 0x00000300

	)

543 
	#IOART_DELNMI
 0x00000400

	)

544 
	#IOART_DELINIT
 0x00000500

	)

545 
	#IOART_DELRSV2
 0x00000600

	)

546 
	#IOART_DELEXINT
 0x00000700

	)

548 
	#IOART_INTVEC
 0x000000f‡

	)

	@src/nvidia-drm/x86/apicvar.h

31 #i‚de‡
_X86_APICVAR_H_


32 
	#_X86_APICVAR_H_


	)

79 
	#xAPIC_MAX_APIC_ID
 0x„

	)

80 
	#xAPIC_ID_ALL
 0xff

	)

81 
	#MAX_APIC_ID
 0x200

	)

82 
	#APIC_ID_ALL
 0xffffffff

	)

84 
	#IOAPIC_MAX_ID
 
xAPIC_MAX_APIC_ID


	)

87 
	#APIC_IO_INTS
 (
IDT_IO_INTS
 + 16)

	)

88 
	#APIC_NUM_IOINTS
 191

	)

91 
	#APIC_TIMER_INT
 (
APIC_IO_INTS
 + 
APIC_NUM_IOINTS
)

	)

109 
	#APIC_LOCAL_INTS
 240

	)

110 
	#APIC_ERROR_INT
 
APIC_LOCAL_INTS


	)

111 
	#APIC_THERMAL_INT
 (
APIC_LOCAL_INTS
 + 1)

	)

112 
	#APIC_CMC_INT
 (
APIC_LOCAL_INTS
 + 2)

	)

113 
	#APIC_IPI_INTS
 (
APIC_LOCAL_INTS
 + 3)

	)

115 
	#IPI_RENDEZVOUS
 (
APIC_IPI_INTS
Ë

	)

116 
	#IPI_INVLTLB
 (
APIC_IPI_INTS
 + 1Ë

	)

117 
	#IPI_INVLPG
 (
APIC_IPI_INTS
 + 2)

	)

118 
	#IPI_INVLRNG
 (
APIC_IPI_INTS
 + 3)

	)

119 
	#IPI_INVLCACHE
 (
APIC_IPI_INTS
 + 4)

	)

121 
	#IPI_BITMAP_VECTOR
 (
APIC_IPI_INTS
 + 5)

	)

124 
	#IPI_AST
 0

	)

125 
	#IPI_PREEMPT
 1

	)

126 
	#IPI_HARDCLOCK
 2

	)

127 
	#IPI_BITMAP_LAST
 
IPI_HARDCLOCK


	)

128 
	#IPI_IS_BITMAPED
(
x
Ë((xË<
IPI_BITMAP_LAST
)

	)

130 
	#IPI_STOP
 (
APIC_IPI_INTS
 + 6Ë

	)

131 
	#IPI_SUSPEND
 (
APIC_IPI_INTS
 + 7Ë

	)

132 
	#IPI_DYN_FIRST
 (
APIC_IPI_INTS
 + 8)

	)

133 
	#IPI_DYN_LAST
 (253Ë

	)

139 
	#IPI_NMI_FIRST
 254

	)

140 
	#IPI_TRACE
 254

	)

141 
	#IPI_STOP_HARD
 255

	)

147 
	#APIC_SPURIOUS_INT
 255

	)

149 #i‚de‡
LOCORE


151 
	#APIC_IPI_DEST_SELF
 -1

	)

152 
	#APIC_IPI_DEST_ALL
 -2

	)

153 
	#APIC_IPI_DEST_OTHERS
 -3

	)

155 
	#APIC_BUS_UNKNOWN
 -1

	)

156 
	#APIC_BUS_ISA
 0

	)

157 
	#APIC_BUS_EISA
 1

	)

158 
	#APIC_BUS_PCI
 2

	)

159 
	#APIC_BUS_MAX
 
APIC_BUS_PCI


	)

161 
	#IRQ_EXTINT
 -1

	)

162 
	#IRQ_NMI
 -2

	)

163 
	#IRQ_SMI
 -3

	)

164 
	#IRQ_DISABLED
 -4

	)

170 
	s≠ic_íumî©‹
 {

171 c⁄° *
	m≠ic_«me
;

172 (*
	m≠ic_¥obe
)();

173 (*
	m≠ic_¥obe_˝us
)();

174 (*
	m≠ic_£tup_loˇl
)();

175 (*
	m≠ic_£tup_io
)();

176 
SLIST_ENTRY
(
≠ic_íumî©‹
Ë
	m≠ic_√xt
;

179 
öth™d_t


180 
IDTVEC
(
≠ic_i§1
), IDTVEC(
≠ic_i§2
), IDTVEC(
≠ic_i§3
),

181 
IDTVEC
(
≠ic_i§4
), IDTVEC(
≠ic_i§5
), IDTVEC(
≠ic_i§6
),

182 
IDTVEC
(
≠ic_i§7
), IDTVEC(
cmcöt
), IDTVEC(
îr‹öt
),

183 
IDTVEC
(
•uriousöt
), IDTVEC(
timîöt
),

184 
IDTVEC
(
≠ic_i§1_±i
), IDTVEC(
≠ic_i§2_±i
), IDTVEC(
≠ic_i§3_±i
),

185 
IDTVEC
(
≠ic_i§4_±i
), IDTVEC(
≠ic_i§5_±i
), IDTVEC(
≠ic_i§6_±i
),

186 
IDTVEC
(
≠ic_i§7_±i
), IDTVEC(
cmcöt_±i
), IDTVEC(
îr‹öt_±i
),

187 
IDTVEC
(
•uriousöt_±i
), IDTVEC(
timîöt_±i
);

189 
vm_∑ddr_t
 
œpic_∑ddr
;

190 *
≠ic_˝uids
;

192 
≠ic_ªgi°î_íumî©‹
(
≠ic_íumî©‹
 *
íumî©‹
);

193 *
iﬂpic_¸óã
(
vm_∑ddr_t
 
addr
, 
öt32_t
 
≠ic_id
, 
ötba£
);

194 
iﬂpic_dißbÀ_pö
(*
cookõ
, 
u_öt
 
pö
);

195 
iﬂpic_gë_ve˘‹
(*
cookõ
, 
u_öt
 
pö
);

196 
iﬂpic_ªgi°î
(*
cookõ
);

197 
iﬂpic_ªm≠_ve˘‹
(*
cookõ
, 
u_öt
 
pö
, 
ve˘‹
);

198 
iﬂpic_£t_bus
(*
cookõ
, 
u_öt
 
pö
, 
bus_ty≥
);

199 
iﬂpic_£t_extöt
(*
cookõ
, 
u_öt
 
pö
);

200 
iﬂpic_£t_nmi
(*
cookõ
, 
u_öt
 
pö
);

201 
iﬂpic_£t_pﬁ¨ôy
(*
cookõ
, 
u_öt
 
pö
, 
öå_pﬁ¨ôy
 
pﬁ
);

202 
iﬂpic_£t_åiggîmode
(*
cookõ
, 
u_öt
 
pö
,

203 
öå_åiggî
 
åiggî
);

204 
iﬂpic_£t_smi
(*
cookõ
, 
u_öt
 
pö
);

210 
	s≠ic_›s
 {

211 (*
	m¸óã
)(
	mu_öt
, );

212 (*
	möô
)(
	mvm_∑ddr_t
);

213 (*
	mx≠ic_mode
)();

214 
boﬁ
 (*
is_x2≠ic
)();

215 (*
	m£tup
)();

216 (*
	mdump
)(const *);

217 (*
	mdißbÀ
)();

218 (*
	meoi
)();

219 (*
	mid
)();

220 (*
	möå_≥ndög
)(
	mu_öt
);

221 (*
	m£t_logiˇl_id
)(
	mu_öt
, u_int, u_int);

222 
u_öt
 (*
˝uid
)(
	mu_öt
);

225 
u_öt
 (*
Æloc_ve˘‹
)(
	mu_öt
, u_int);

226 
u_öt
 (*
Æloc_ve˘‹s
)(
	mu_öt
, u_int *, u_int, u_int);

227 (*
	míabÀ_ve˘‹
)(
	mu_öt
, u_int);

228 (*
	mdißbÀ_ve˘‹
)(
	mu_öt
, u_int);

229 (*
	m‰ì_ve˘‹
)(
	mu_öt
, u_int, u_int);

233 (*
	míabÀ_pmc
)();

234 (*
	mdißbÀ_pmc
)();

235 (*
	mªíabÀ_pmc
)();

238 (*
	míabÀ_cmc
)();

241 (*
	míabÀ_mˇ_ñvt
)();

244 (*
	mùi_øw
)(
	mªgi°î_t
, 
	mu_öt
);

245 (*
	mùi_ve˘‹ed
)(
	mu_öt
, );

246 (*
	mùi_waô
)();

247 (*
	mùi_Æloc
)(
öth™d_t
 *
	mùifunc
);

248 (*
	mùi_‰ì
)(
	mve˘‹
);

251 (*
	m£t_lvt_mask
)(
	mu_öt
, u_öt, 
	mu_ch¨
);

252 (*
	m£t_lvt_mode
)(
	mu_öt
, u_öt, 
	mu_öt32_t
);

253 (*
	m£t_lvt_pﬁ¨ôy
)(
	mu_öt
, u_öt, 
	möå_pﬁ¨ôy
);

254 (*
	m£t_lvt_åiggîmode
)(
	mu_öt
, u_öt, 
	möå_åiggî
);

257 
≠ic_›s
ápic_ops;

259 
ölöe
 

260 
	$œpic_¸óã
(
u_öt
 
≠ic_id
, 
boŸ_˝u
)

263 
≠ic_›s
.
	`¸óã
(
≠ic_id
, 
boŸ_˝u
);

264 
	}
}

266 
ölöe
 

267 
	$œpic_öô
(
vm_∑ddr_t
 
addr
)

270 
≠ic_›s
.
	`öô
(
addr
);

271 
	}
}

273 
ölöe
 

274 
	$œpic_x≠ic_mode
()

277 
≠ic_›s
.
	`x≠ic_mode
();

278 
	}
}

280 
ölöe
 
boﬁ


281 
	$œpic_is_x2≠ic
()

284  (
≠ic_›s
.
	`is_x2≠ic
());

285 
	}
}

287 
ölöe
 

288 
	$œpic_£tup
(
boŸ
)

291 
≠ic_›s
.
	`£tup
(
boŸ
);

292 
	}
}

294 
ölöe
 

295 
	$œpic_dump
(c⁄° *
°r
)

298 
≠ic_›s
.
	`dump
(
°r
);

299 
	}
}

301 
ölöe
 

302 
	$œpic_dißbÀ
()

305 
≠ic_›s
.
	`dißbÀ
();

306 
	}
}

308 
ölöe
 

309 
	$œpic_eoi
()

312 
≠ic_›s
.
	`eoi
();

313 
	}
}

315 
ölöe
 

316 
	$œpic_id
()

319  (
≠ic_›s
.
	`id
());

320 
	}
}

322 
ölöe
 

323 
	$œpic_öå_≥ndög
(
u_öt
 
ve˘‹
)

326  (
≠ic_›s
.
	`öå_≥ndög
(
ve˘‹
));

327 
	}
}

330 
ölöe
 

331 
	$œpic_£t_logiˇl_id
(
u_öt
 
≠ic_id
, u_öà
˛u°î
, u_öà
˛u°î_id
)

334 
≠ic_›s
.
	`£t_logiˇl_id
(
≠ic_id
, 
˛u°î
, 
˛u°î_id
);

335 
	}
}

337 
ölöe
 
u_öt


338 
	$≠ic_˝uid
(
u_öt
 
≠ic_id
)

341  (
≠ic_›s
.
	`˝uid
(
≠ic_id
));

342 
	}
}

344 
ölöe
 
u_öt


345 
	$≠ic_Æloc_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
úq
)

348  (
≠ic_›s
.
	`Æloc_ve˘‹
(
≠ic_id
, 
úq
));

349 
	}
}

351 
ölöe
 
u_öt


352 
	$≠ic_Æloc_ve˘‹s
(
u_öt
 
≠ic_id
, u_öà*
úqs
, u_öà
cou¡
, u_öà
Æign
)

355  (
≠ic_›s
.
	`Æloc_ve˘‹s
(
≠ic_id
, 
úqs
, 
cou¡
, 
Æign
));

356 
	}
}

358 
ölöe
 

359 
	$≠ic_íabÀ_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
ve˘‹
)

362 
≠ic_›s
.
	`íabÀ_ve˘‹
(
≠ic_id
, 
ve˘‹
);

363 
	}
}

365 
ölöe
 

366 
	$≠ic_dißbÀ_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
ve˘‹
)

369 
≠ic_›s
.
	`dißbÀ_ve˘‹
(
≠ic_id
, 
ve˘‹
);

370 
	}
}

372 
ölöe
 

373 
	$≠ic_‰ì_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
ve˘‹
, u_öà
úq
)

376 
≠ic_›s
.
	`‰ì_ve˘‹
(
≠ic_id
, 
ve˘‹
, 
úq
);

377 
	}
}

379 
ölöe
 

380 
	$œpic_íabÀ_pmc
()

383  (
≠ic_›s
.
	`íabÀ_pmc
());

384 
	}
}

386 
ölöe
 

387 
	$œpic_dißbÀ_pmc
()

390 
≠ic_›s
.
	`dißbÀ_pmc
();

391 
	}
}

393 
ölöe
 

394 
	$œpic_ªíabÀ_pmc
()

397 
≠ic_›s
.
	`ªíabÀ_pmc
();

398 
	}
}

400 
ölöe
 

401 
	$œpic_íabÀ_cmc
()

404 
≠ic_›s
.
	`íabÀ_cmc
();

405 
	}
}

407 
ölöe
 

408 
	$œpic_íabÀ_mˇ_ñvt
()

411  (
≠ic_›s
.
	`íabÀ_mˇ_ñvt
());

412 
	}
}

414 
ölöe
 

415 
	$œpic_ùi_øw
(
ªgi°î_t
 
i¸lo
, 
u_öt
 
de°
)

418 
≠ic_›s
.
	`ùi_øw
(
i¸lo
, 
de°
);

419 
	}
}

421 
ölöe
 

422 
	$œpic_ùi_ve˘‹ed
(
u_öt
 
ve˘‹
, 
de°
)

425 
≠ic_›s
.
	`ùi_ve˘‹ed
(
ve˘‹
, 
de°
);

426 
	}
}

428 
ölöe
 

429 
	$œpic_ùi_waô
(
dñay
)

432  (
≠ic_›s
.
	`ùi_waô
(
dñay
));

433 
	}
}

435 
ölöe
 

436 
	$œpic_ùi_Æloc
(
öth™d_t
 *
ùifunc
)

439  (
≠ic_›s
.
	`ùi_Æloc
(
ùifunc
));

440 
	}
}

442 
ölöe
 

443 
	$œpic_ùi_‰ì
(
ve˘‹
)

446  (
≠ic_›s
.
	`ùi_‰ì
(
ve˘‹
));

447 
	}
}

449 
ölöe
 

450 
	$œpic_£t_lvt_mask
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
u_ch¨
 
masked
)

453  (
≠ic_›s
.
	`£t_lvt_mask
(
≠ic_id
, 
lvt
, 
masked
));

454 
	}
}

456 
ölöe
 

457 
	$œpic_£t_lvt_mode
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
u_öt32_t
 
mode
)

460  (
≠ic_›s
.
	`£t_lvt_mode
(
≠ic_id
, 
lvt
, 
mode
));

461 
	}
}

463 
ölöe
 

464 
	$œpic_£t_lvt_pﬁ¨ôy
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
öå_pﬁ¨ôy
 
pﬁ
)

467  (
≠ic_›s
.
	`£t_lvt_pﬁ¨ôy
(
≠ic_id
, 
lvt
, 
pﬁ
));

468 
	}
}

470 
ölöe
 

471 
	$œpic_£t_lvt_åiggîmode
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
öå_åiggî
 
åiggî
)

474  (
≠ic_›s
.
	`£t_lvt_åiggîmode
(
≠ic_id
, 
lvt
, 
åiggî
));

475 
	}
}

477 
œpic_h™dÀ_cmc
();

478 
œpic_h™dÀ_îr‹
();

479 
œpic_h™dÀ_öå
(
ve˘‹
, 
å≠‰ame
 *
‰ame
);

480 
œpic_h™dÀ_timî
(
å≠‰ame
 *
‰ame
);

482 
iﬂpic_gë_rid
(
u_öt
 
≠ic_id
, 
uöt16_t
 *
ridp
);

484 
x2≠ic_mode
;

485 
œpic_eoi_suµªssi⁄
;

487 #ifde‡
_SYS_SYSCTL_H_


488 
SYSCTL_DECL
(
_hw_≠ic
);

	@src/nvidia-drm/x86/apm_bios.h

18 #i‚de‡
_X86_APM_BIOS_H_


19 
	#_X86_APM_BIOS_H_


	)

21 #i‚de‡
_KERNEL


22 
	~<sys/ty≥s.h
>

24 
	~<sys/ioccom.h
>

27 
	#APM_BIOS
 0x53

	)

28 
	#APM_INT
 0x15

	)

31 
	#APM_16BIT_SUPPORT
 0x01

	)

32 
	#APM_32BIT_SUPPORT
 0x02

	)

33 
	#APM_CPUIDLE_SLOW
 0x04

	)

34 
	#APM_DISABLED
 0x08

	)

35 
	#APM_DISENGAGED
 0x10

	)

38 
	#APM_OURADDR
 0x00080000

	)

41 
	#APM_INSTCHECK
 0x00

	)

42 
	#APM_REALCONNECT
 0x01

	)

43 
	#APM_PROT16CONNECT
 0x02

	)

44 
	#APM_PROT32CONNECT
 0x03

	)

45 
	#APM_DISCONNECT
 0x04

	)

46 
	#APM_CPUIDLE
 0x05

	)

47 
	#APM_CPUBUSY
 0x06

	)

48 
	#APM_SETPWSTATE
 0x07

	)

49 
	#APM_ENABLEDISABLEPM
 0x08

	)

50 
	#APM_RESTOREDEFAULT
 0x09

	)

51 
	#APM_GETPWSTATUS
 0x0a

	)

52 
	#APM_GETPMEVENT
 0x0b

	)

53 
	#APM_GETPWSTATE
 0x0c

	)

54 
	#APM_ENABLEDISABLEDPM
 0x0d

	)

55 
	#APM_DRVVERSION
 0x0e

	)

56 
	#APM_ENGAGEDISENGAGEPM
 0x0f

	)

57 
	#APM_GETCAPABILITIES
 0x10

	)

58 
	#APM_RESUMETIMER
 0x11

	)

59 
	#APM_RESUMEONRING
 0x12

	)

60 
	#APM_TIMERREQUESTS
 0x13

	)

61 
	#APM_OEMFUNC
 0x80

	)

64 
	#APME_OK
 0x00

	)

65 
	#APME_PMDISABLED
 0x01

	)

66 
	#APME_REALESTABLISHED
 0x02

	)

67 
	#APME_NOTCONNECTED
 0x03

	)

68 
	#APME_PROT16ESTABLISHED
 0x05

	)

69 
	#APME_PROT16NOTSUPPORTED
 0x06

	)

70 
	#APME_PROT32ESTABLISHED
 0x07

	)

71 
	#APME_PROT32NOTDUPPORTED
 0x08

	)

72 
	#APME_UNKNOWNDEVICEID
 0x09

	)

73 
	#APME_OUTOFRANGE
 0x0a

	)

74 
	#APME_NOTENGAGED
 0x0b

	)

75 
	#APME_CANTENTERSTATE
 0x60

	)

76 
	#APME_NOPMEVENT
 0x80

	)

77 
	#APME_NOAPMPRESENT
 0x86

	)

81 
	#PMDV_APMBIOS
 0x0000

	)

82 
	#PMDV_ALLDEV
 0x0001

	)

83 
	#PMDV_DISP0
 0x0100

	)

84 
	#PMDV_DISP1
 0x0101

	)

85 
	#PMDV_DISPALL
 0x01ff

	)

86 
	#PMDV_2NDSTORAGE0
 0x0200

	)

87 
	#PMDV_2NDSTORAGE1
 0x0201

	)

88 
	#PMDV_2NDSTORAGE2
 0x0202

	)

89 
	#PMDV_2NDSTORAGE3
 0x0203

	)

90 
	#PMDV_PARALLEL0
 0x0300

	)

91 
	#PMDV_PARALLEL1
 0x0301

	)

92 
	#PMDV_SERIAL0
 0x0400

	)

93 
	#PMDV_SERIAL1
 0x0401

	)

94 
	#PMDV_SERIAL2
 0x0402

	)

95 
	#PMDV_SERIAL3
 0x0403

	)

96 
	#PMDV_SERIAL4
 0x0404

	)

97 
	#PMDV_SERIAL5
 0x0405

	)

98 
	#PMDV_SERIAL6
 0x0406

	)

99 
	#PMDV_SERIAL7
 0x0407

	)

100 
	#PMDV_NET0
 0x0500

	)

101 
	#PMDV_NET1
 0x0501

	)

102 
	#PMDV_NET2
 0x0502

	)

103 
	#PMDV_NET3
 0x0503

	)

104 
	#PMDV_PCMCIA0
 0x0600

	)

105 
	#PMDV_PCMCIA1
 0x0601

	)

106 
	#PMDV_PCMCIA2
 0x0602

	)

107 
	#PMDV_PCMCIA3
 0x0603

	)

109 
	#PMDV_BATT_BASE
 0x8000

	)

110 
	#PMDV_BATT0
 0x8001

	)

111 
	#PMDV_BATT1
 0x8002

	)

112 
	#PMDV_BATT_ALL
 0x80ff

	)

118 
	#PMST_APMENABLED
 0x0000

	)

119 
	#PMST_STANDBY
 0x0001

	)

120 
	#PMST_SUSPEND
 0x0002

	)

121 
	#PMST_OFF
 0x0003

	)

122 
	#PMST_LASTREQNOTIFY
 0x0004

	)

123 
	#PMST_LASTREQREJECT
 0x0005

	)

129 #i‡!
deföed
(
ASSEMBLER
Ë&& !deföed(
INITIALIZER
)

132 
	s≠mhook
 {

133 
≠mhook
 *
	mah_√xt
;

134 (*
	mah_fun
)(*
	mah_¨g
);

135 *
	mah_¨g
;

136 c⁄° *
	mah_«me
;

137 
	mah_‹dî
;

139 
	#APM_HOOK_NONE
 (-1)

	)

140 
	#APM_HOOK_SUSPEND
 0

	)

141 
	#APM_HOOK_RESUME
 1

	)

142 
	#NAPM_HOOK
 2

	)

144 #ifde‡
_KERNEL


146 
≠m_su•íd
(
°©e
);

147 
≠mhook
 *
≠m_hook_e°ablish
 (
≠mh
, apmhook *);

148 
≠m_hook_di£°ablish
 (
≠mh
, 
≠mhook
 *);

149 
≠m_˝u_idÀ
();

150 
≠m_˝u_busy
();

156 
	#APM_MIN_ORDER
 0x00

	)

157 
	#APM_MID_ORDER
 0x80

	)

158 
	#APM_MAX_ORDER
 0xff

	)

161 
	#PMEV_NOEVENT
 0x0000

	)

162 
	#PMEV_STANDBYREQ
 0x0001

	)

163 
	#PMEV_SUSPENDREQ
 0x0002

	)

164 
	#PMEV_NORMRESUME
 0x0003

	)

165 
	#PMEV_CRITRESUME
 0x0004

	)

166 
	#PMEV_BATTERYLOW
 0x0005

	)

167 
	#PMEV_POWERSTATECHANGE
 0x0006

	)

168 
	#PMEV_UPDATETIME
 0x0007

	)

169 
	#PMEV_CRITSUSPEND
 0x0008

	)

170 
	#PMEV_USERSTANDBYREQ
 0x0009

	)

171 
	#PMEV_USERSUSPENDREQ
 0x000a

	)

172 
	#PMEV_STANDBYRESUME
 0x000b

	)

173 
	#PMEV_CAPABILITIESCHANGE
 0x000c

	)

178 
	#PMEV_DEFAULT
 0xfffffff‡

	)

180 #i‡!
deföed
(
ASSEMBLER
Ë&& !deföed(
INITIALIZER
)

186 
	s≠m_öfo_ﬁd
 {

187 
u_öt
 
	mai_maj‹
;

188 
u_öt
 
	mai_mö‹
;

189 
u_öt
 
	mai_a˛öe
;

190 
u_öt
 
	mai_b©t_°©
;

191 
u_öt
 
	mai_b©t_li„
;

192 
u_öt
 
	mai_°©us
;

193 } *
	t≠m_öfo_ﬁd_t
;

201 
	s≠m_öfo
 {

202 
u_öt
 
	mai_öfovîsi⁄
;

203 
u_öt
 
	mai_maj‹
;

204 
u_öt
 
	mai_mö‹
;

205 
u_öt
 
	mai_a˛öe
;

206 
u_öt
 
	mai_b©t_°©
;

207 
u_öt
 
	mai_b©t_li„
;

208 
	mai_b©t_time
;

209 
u_öt
 
	mai_°©us
;

210 
u_öt
 
	mai_b©ãrõs
;

211 
u_öt
 
	mai_ˇ∑bûôõs
;

212 
u_öt
 
	mai_•¨e
[6];

213 } *
	t≠m_öfo_t
;

216 
	#APM_BATT_HIGH
 0x01

	)

217 
	#APM_BATT_LOW
 0x02

	)

218 
	#APM_BATT_CRITICAL
 0x04

	)

219 
	#APM_BATT_CHARGING
 0x08

	)

220 
	#APM_BATT_NOT_PRESENT
 0x10

	)

221 
	#APM_BATT_NO_SYSTEM
 0x80

	)

223 
	s≠m_pw°©us
 {

224 
u_öt
 
	m≠_devi˚
;

225 
u_öt
 
	m≠_a˛öe
;

226 
u_öt
 
	m≠_b©t_°©
;

227 
u_öt
 
	m≠_b©t_Êag
;

228 
u_öt
 
	m≠_b©t_li„
;

229 
	m≠_b©t_time
;

230 } *
	t≠m_pw°©us_t
;

232 
	s≠m_bios_¨g
 {

233 
uöt32_t
 
	móx
;

234 
uöt32_t
 
	mebx
;

235 
uöt32_t
 
	mecx
;

236 
uöt32_t
 
	medx
;

237 
uöt32_t
 
	mesi
;

238 
uöt32_t
 
	medi
;

241 
	s≠m_evít_öfo
 {

242 
u_öt
 
	mty≥
;

243 
u_öt
 
	mödex
;

244 
u_öt
 
	m•¨e
[8];

247 
	#APMIO_SUSPEND
 
	`_IO
('P', 1)

	)

248 
	#APMIO_GETINFO_OLD
 
	`_IOR
('P', 2, 
≠m_öfo_ﬁd
)

	)

249 
	#APMIO_ENABLE
 
	`_IO
('P', 5)

	)

250 
	#APMIO_DISABLE
 
	`_IO
('P', 6)

	)

251 
	#APMIO_HALTCPU
 
	`_IO
('P', 7)

	)

252 
	#APMIO_NOTHALTCPU
 
	`_IO
('P', 8)

	)

253 
	#APMIO_DISPLAY
 
	`_IOW
('P', 9, )

	)

254 
	#APMIO_BIOS
 
	`_IOWR
('P', 10, 
≠m_bios_¨g
)

	)

255 
	#APMIO_GETINFO
 
	`_IOR
('P', 11, 
≠m_öfo
)

	)

256 
	#APMIO_STANDBY
 
	`_IO
('P', 12)

	)

257 
	#APMIO_GETPWSTATUS
 
	`_IOWR
('P', 13, 
≠m_pw°©us
)

	)

259 
	#APMIO_NEXTEVENT
 
	`_IOR
('A', 100, 
≠m_evít_öfo
)

	)

260 
	#APMIO_REJECTLASTREQ
 
	`_IO
('P', 101)

	)

	@src/nvidia-drm/x86/bus.h

99 #i‚de‡
_X86_BUS_H_


100 
	#_X86_BUS_H_


	)

102 
	~<machöe/_bus.h
>

103 
	~<machöe/˝ufunc.h
>

105 #i‚de‡
__GNUCLIKE_ASM


112 
	#X86_BUS_SPACE_IO
 0

	)

113 
	#X86_BUS_SPACE_MEM
 1

	)

115 
	#BUS_SPACE_MAXSIZE_24BIT
 0xFFFFFF

	)

116 
	#BUS_SPACE_MAXSIZE_32BIT
 0xFFFFFFFF

	)

117 
	#BUS_SPACE_MAXSIZE
 0xFFFFFFFF

	)

118 
	#BUS_SPACE_MAXADDR_24BIT
 0xFFFFFF

	)

119 
	#BUS_SPACE_MAXADDR_32BIT
 0xFFFFFFFF

	)

120 #i‡
deföed
(
__amd64__
Ë|| deföed(
PAE
)

121 
	#BUS_SPACE_MAXADDR_48BIT
 0xFFFFFFFFFFFFULL

	)

122 
	#BUS_SPACE_MAXADDR
 0xFFFFFFFFFFFFFFFFULL

	)

124 
	#BUS_SPACE_MAXADDR
 0xFFFFFFFF

	)

127 
	#BUS_SPACE_INVALID_DATA
 (~0)

	)

128 
	#BUS_SPACE_UNRESTRICTED
 (~0)

	)

134 
bus_•a˚_m≠
(
bus_•a˚_èg_t
 
èg
, 
bus_addr_t
 
addr
, 
bus_size_t
 
size
,

135 
Êags
, 
bus_•a˚_h™dÀ_t
 *
bshp
);

141 
bus_•a˚_unm≠
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

142 
bus_size_t
 
size
);

148 
__ölöe
 
bus_•a˚_subªgi⁄
(
bus_•a˚_èg_t
 
t
,

149 
bus_•a˚_h™dÀ_t
 
bsh
,

150 
bus_size_t
 
off£t
, bus_size_à
size
,

151 
bus_•a˚_h™dÀ_t
 *
nbshp
);

153 
__ölöe
 

154 
	$bus_•a˚_subªgi⁄
(
bus_•a˚_èg_t
 
t
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
,

155 
bus_size_t
 
off£t
, bus_size_à
size
 
__unu£d
,

156 
bus_•a˚_h™dÀ_t
 *
nbshp
)

159 *
nbshp
 = 
bsh
 + 
off£t
;

161 
	}
}

167 
bus_•a˚_Æloc
(
bus_•a˚_èg_t
 
t
, 
bus_addr_t
 
r°¨t
,

168 
bus_addr_t
 
ªnd
, 
bus_size_t
 
size
, bus_size_à
Æign
,

169 
bus_size_t
 
bound¨y
, 
Êags
, 
bus_addr_t
 *
addΩ
,

170 
bus_•a˚_h™dÀ_t
 *
bshp
);

176 
__ölöe
 
bus_•a˚_‰ì
(
bus_•a˚_èg_t
 
t
, 
bus_•a˚_h™dÀ_t
 
bsh
,

177 
bus_size_t
 
size
);

179 
__ölöe
 

180 
	$bus_•a˚_‰ì
(
bus_•a˚_èg_t
 
t
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
 __unused,

181 
bus_size_t
 
size
 
__unu£d
)

183 
	}
}

190 
__ölöe
 
u_öt8_t
 
bus_•a˚_ªad_1
(
bus_•a˚_èg_t
 
èg
,

191 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

192 
bus_size_t
 
off£t
);

194 
__ölöe
 
u_öt16_t
 
bus_•a˚_ªad_2
(
bus_•a˚_èg_t
 
èg
,

195 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

196 
bus_size_t
 
off£t
);

198 
__ölöe
 
u_öt32_t
 
bus_•a˚_ªad_4
(
bus_•a˚_èg_t
 
èg
,

199 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

200 
bus_size_t
 
off£t
);

202 #ifde‡
__amd64__


203 
__ölöe
 
uöt64_t
 
bus_•a˚_ªad_8
(
bus_•a˚_èg_t
 
èg
,

204 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

205 
bus_size_t
 
off£t
);

208 
__ölöe
 
u_öt8_t


209 
	$bus_•a˚_ªad_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

210 
bus_size_t
 
off£t
)

213 i‡(
èg
 =
X86_BUS_SPACE_IO
)

214  (
	`öb
(
h™dÀ
 + 
off£t
));

215  (*(vﬁ©ûê
u_öt8_t
 *)(
h™dÀ
 + 
off£t
));

216 
	}
}

218 
__ölöe
 
u_öt16_t


219 
	$bus_•a˚_ªad_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

220 
bus_size_t
 
off£t
)

223 i‡(
èg
 =
X86_BUS_SPACE_IO
)

224  (
	`öw
(
h™dÀ
 + 
off£t
));

225  (*(vﬁ©ûê
u_öt16_t
 *)(
h™dÀ
 + 
off£t
));

226 
	}
}

228 
__ölöe
 
u_öt32_t


229 
	$bus_•a˚_ªad_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

230 
bus_size_t
 
off£t
)

233 i‡(
èg
 =
X86_BUS_SPACE_IO
)

234  (
	`öl
(
h™dÀ
 + 
off£t
));

235  (*(vﬁ©ûê
u_öt32_t
 *)(
h™dÀ
 + 
off£t
));

236 
	}
}

238 #ifde‡
__amd64__


239 
__ölöe
 
uöt64_t


240 
	$bus_•a˚_ªad_8
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

241 
bus_size_t
 
off£t
)

244 i‡(
èg
 =
X86_BUS_SPACE_IO
)

245  (
BUS_SPACE_INVALID_DATA
);

246  (*(vﬁ©ûê
uöt64_t
 *)(
h™dÀ
 + 
off£t
));

247 
	}
}

254 
__ölöe
 
bus_•a˚_ªad_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

255 
bus_•a˚_h™dÀ_t
 
bsh
,

256 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
,

257 
size_t
 
cou¡
);

259 
__ölöe
 
bus_•a˚_ªad_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

260 
bus_•a˚_h™dÀ_t
 
bsh
,

261 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
,

262 
size_t
 
cou¡
);

264 
__ölöe
 
bus_•a˚_ªad_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

265 
bus_•a˚_h™dÀ_t
 
bsh
,

266 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
,

267 
size_t
 
cou¡
);

269 
__ölöe
 

270 
	$bus_•a˚_ªad_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

271 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

274 i‡(
èg
 =
X86_BUS_SPACE_IO
)

275 
	`ösb
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

277 #ifde‡
__GNUCLIKE_ASM


278 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movb (%2),%%al \n\
 \n\
 1b" :

283 "=D" (
addr
), "=c" (
cou¡
) :

284 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

288 
	}
}

290 
__ölöe
 

291 
	$bus_•a˚_ªad_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

292 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

295 i‡(
èg
 =
X86_BUS_SPACE_IO
)

296 
	`ösw
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

298 #ifde‡
__GNUCLIKE_ASM


299 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movw (%2),%%ax \n\
 \n\
 1b" :

304 "=D" (
addr
), "=c" (
cou¡
) :

305 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

309 
	}
}

311 
__ölöe
 

312 
	$bus_•a˚_ªad_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

313 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

316 i‡(
èg
 =
X86_BUS_SPACE_IO
)

317 
	`ö¶
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

319 #ifde‡
__GNUCLIKE_ASM


320 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movl (%2),%%eax \n\
 \n\
 1b" :

325 "=D" (
addr
), "=c" (
cou¡
) :

326 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

330 
	}
}

333 
	#bus_•a˚_ªad_mu…i_8
 !!! 
bus_•a˚_ªad_mu…i_8
 
unim∂emíãd
 !!!

	)

341 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

342 
bus_•a˚_h™dÀ_t
 
bsh
,

343 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
,

344 
size_t
 
cou¡
);

346 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

347 
bus_•a˚_h™dÀ_t
 
bsh
,

348 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
,

349 
size_t
 
cou¡
);

351 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

352 
bus_•a˚_h™dÀ_t
 
bsh
,

353 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
,

354 
size_t
 
cou¡
);

357 
__ölöe
 

358 
	$bus_•a˚_ªad_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

359 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

362 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

363 
_p‹t_
 = 
bsh
 + 
off£t
;

364 #ifde‡
__GNUCLIKE_ASM


365 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inb %w2,%%al \n\
 \n\
 %2 \n\
 1b" :

371 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

372 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

376 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

377 #ifde‡
__GNUCLIKE_ASM


378 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

382 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

383 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

387 
	}
}

389 
__ölöe
 

390 
	$bus_•a˚_ªad_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

391 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

394 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

395 
_p‹t_
 = 
bsh
 + 
off£t
;

396 #ifde‡
__GNUCLIKE_ASM


397 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inw %w2,%%ax \n\
 \n\
 $2,%2 \n\
 1b" :

403 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

404 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

408 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

409 #ifde‡
__GNUCLIKE_ASM


410 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

414 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

415 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

419 
	}
}

421 
__ölöe
 

422 
	$bus_•a˚_ªad_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

423 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

426 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

427 
_p‹t_
 = 
bsh
 + 
off£t
;

428 #ifde‡
__GNUCLIKE_ASM


429 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inl %w2,%%eax \n\
 \n\
 $4,%2 \n\
 1b" :

435 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

436 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

440 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

441 #ifde‡
__GNUCLIKE_ASM


442 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

446 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

447 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

451 
	}
}

454 
	#bus_•a˚_ªad_ªgi⁄_8
 !!! 
bus_•a˚_ªad_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

462 
__ölöe
 
bus_•a˚_wrôe_1
(
bus_•a˚_èg_t
 
èg
,

463 
bus_•a˚_h™dÀ_t
 
bsh
,

464 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
);

466 
__ölöe
 
bus_•a˚_wrôe_2
(
bus_•a˚_èg_t
 
èg
,

467 
bus_•a˚_h™dÀ_t
 
bsh
,

468 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
);

470 
__ölöe
 
bus_•a˚_wrôe_4
(
bus_•a˚_èg_t
 
èg
,

471 
bus_•a˚_h™dÀ_t
 
bsh
,

472 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
);

474 #ifde‡
__amd64__


475 
__ölöe
 
bus_•a˚_wrôe_8
(
bus_•a˚_èg_t
 
èg
,

476 
bus_•a˚_h™dÀ_t
 
bsh
,

477 
bus_size_t
 
off£t
, 
uöt64_t
 
vÆue
);

480 
__ölöe
 

481 
	$bus_•a˚_wrôe_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

482 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
)

485 i‡(
èg
 =
X86_BUS_SPACE_IO
)

486 
	`outb
(
bsh
 + 
off£t
, 
vÆue
);

488 *(vﬁ©ûê
u_öt8_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

489 
	}
}

491 
__ölöe
 

492 
	$bus_•a˚_wrôe_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

493 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
)

496 i‡(
èg
 =
X86_BUS_SPACE_IO
)

497 
	`outw
(
bsh
 + 
off£t
, 
vÆue
);

499 *(vﬁ©ûê
u_öt16_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

500 
	}
}

502 
__ölöe
 

503 
	$bus_•a˚_wrôe_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

504 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
)

507 i‡(
èg
 =
X86_BUS_SPACE_IO
)

508 
	`oué
(
bsh
 + 
off£t
, 
vÆue
);

510 *(vﬁ©ûê
u_öt32_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

511 
	}
}

513 #ifde‡
__amd64__


514 
__ölöe
 

515 
	$bus_•a˚_wrôe_8
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

516 
bus_size_t
 
off£t
, 
uöt64_t
 
vÆue
)

519 i‡(
èg
 =
X86_BUS_SPACE_IO
)

522 *(vﬁ©ûê
uöt64_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

523 
	}
}

531 
__ölöe
 
bus_•a˚_wrôe_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

532 
bus_•a˚_h™dÀ_t
 
bsh
,

533 
bus_size_t
 
off£t
,

534 c⁄° 
u_öt8_t
 *
addr
,

535 
size_t
 
cou¡
);

536 
__ölöe
 
bus_•a˚_wrôe_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

537 
bus_•a˚_h™dÀ_t
 
bsh
,

538 
bus_size_t
 
off£t
,

539 c⁄° 
u_öt16_t
 *
addr
,

540 
size_t
 
cou¡
);

542 
__ölöe
 
bus_•a˚_wrôe_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

543 
bus_•a˚_h™dÀ_t
 
bsh
,

544 
bus_size_t
 
off£t
,

545 c⁄° 
u_öt32_t
 *
addr
,

546 
size_t
 
cou¡
);

548 
__ölöe
 

549 
	$bus_•a˚_wrôe_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

550 
bus_size_t
 
off£t
, c⁄° 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

553 i‡(
èg
 =
X86_BUS_SPACE_IO
)

554 
	`outsb
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

556 #ifde‡
__GNUCLIKE_ASM


557 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsb \n\
 %%al,(%2) \n\
 1b" :

562 "=S" (
addr
), "=c" (
cou¡
) :

563 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

567 
	}
}

569 
__ölöe
 

570 
	$bus_•a˚_wrôe_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

571 
bus_size_t
 
off£t
, c⁄° 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

574 i‡(
èg
 =
X86_BUS_SPACE_IO
)

575 
	`outsw
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

577 #ifde‡
__GNUCLIKE_ASM


578 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsw \n\
 %%ax,(%2) \n\
 1b" :

583 "=S" (
addr
), "=c" (
cou¡
) :

584 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

588 
	}
}

590 
__ölöe
 

591 
	$bus_•a˚_wrôe_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

592 
bus_size_t
 
off£t
, c⁄° 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

595 i‡(
èg
 =
X86_BUS_SPACE_IO
)

596 
	`out¶
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

598 #ifde‡
__GNUCLIKE_ASM


599 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsl \n\
 %%eax,(%2) \n\
 1b" :

604 "=S" (
addr
), "=c" (
cou¡
) :

605 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

609 
	}
}

612 
	#bus_•a˚_wrôe_mu…i_8
(
t
, 
h
, 
o
, 
a
, 
c
) \

613 !!! 
bus_•a˚_wrôe_mu…i_8
 
unim∂emíãd
 !!!

	)

621 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

622 
bus_•a˚_h™dÀ_t
 
bsh
,

623 
bus_size_t
 
off£t
,

624 c⁄° 
u_öt8_t
 *
addr
,

625 
size_t
 
cou¡
);

626 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

627 
bus_•a˚_h™dÀ_t
 
bsh
,

628 
bus_size_t
 
off£t
,

629 c⁄° 
u_öt16_t
 *
addr
,

630 
size_t
 
cou¡
);

631 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

632 
bus_•a˚_h™dÀ_t
 
bsh
,

633 
bus_size_t
 
off£t
,

634 c⁄° 
u_öt32_t
 *
addr
,

635 
size_t
 
cou¡
);

637 
__ölöe
 

638 
	$bus_•a˚_wrôe_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

639 
bus_size_t
 
off£t
, c⁄° 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

642 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

643 
_p‹t_
 = 
bsh
 + 
off£t
;

644 #ifde‡
__GNUCLIKE_ASM


645 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsb \n\
 %%al,%w0 \n\
 %0 \n\
 1b" :

651 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

652 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

656 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

657 #ifde‡
__GNUCLIKE_ASM


658 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

662 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

663 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

667 
	}
}

669 
__ölöe
 

670 
	$bus_•a˚_wrôe_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

671 
bus_size_t
 
off£t
, c⁄° 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

674 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

675 
_p‹t_
 = 
bsh
 + 
off£t
;

676 #ifde‡
__GNUCLIKE_ASM


677 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsw \n\
 %%ax,%w0 \n\
 $2,%0 \n\
 1b" :

683 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

684 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

688 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

689 #ifde‡
__GNUCLIKE_ASM


690 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

694 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

695 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

699 
	}
}

701 
__ölöe
 

702 
	$bus_•a˚_wrôe_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

703 
bus_size_t
 
off£t
, c⁄° 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

706 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

707 
_p‹t_
 = 
bsh
 + 
off£t
;

708 #ifde‡
__GNUCLIKE_ASM


709 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsl \n\
 %%eax,%w0 \n\
 $4,%0 \n\
 1b" :

715 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

716 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

720 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

721 #ifde‡
__GNUCLIKE_ASM


722 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

726 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

727 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

731 
	}
}

734 
	#bus_•a˚_wrôe_ªgi⁄_8
 \

735 !!! 
bus_•a˚_wrôe_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

743 
__ölöe
 
bus_•a˚_£t_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

744 
bus_•a˚_h™dÀ_t
 
bsh
,

745 
bus_size_t
 
off£t
,

746 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
);

747 
__ölöe
 
bus_•a˚_£t_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

748 
bus_•a˚_h™dÀ_t
 
bsh
,

749 
bus_size_t
 
off£t
,

750 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
);

751 
__ölöe
 
bus_•a˚_£t_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

752 
bus_•a˚_h™dÀ_t
 
bsh
,

753 
bus_size_t
 
off£t
,

754 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
);

756 
__ölöe
 

757 
	$bus_•a˚_£t_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

758 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
)

760 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

762 i‡(
èg
 =
X86_BUS_SPACE_IO
)

763 
cou¡
--)

764 
	`outb
(
addr
, 
vÆue
);

766 
cou¡
--)

767 *(vﬁ©ûê
u_öt8_t
 *)(
addr
Ë
vÆue
;

768 
	}
}

770 
__ölöe
 

771 
	$bus_•a˚_£t_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

772 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
)

774 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

776 i‡(
èg
 =
X86_BUS_SPACE_IO
)

777 
cou¡
--)

778 
	`outw
(
addr
, 
vÆue
);

780 
cou¡
--)

781 *(vﬁ©ûê
u_öt16_t
 *)(
addr
Ë
vÆue
;

782 
	}
}

784 
__ölöe
 

785 
	$bus_•a˚_£t_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

786 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
)

788 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

790 i‡(
èg
 =
X86_BUS_SPACE_IO
)

791 
cou¡
--)

792 
	`oué
(
addr
, 
vÆue
);

794 
cou¡
--)

795 *(vﬁ©ûê
u_öt32_t
 *)(
addr
Ë
vÆue
;

796 
	}
}

799 
	#bus_•a˚_£t_mu…i_8
 !!! 
bus_•a˚_£t_mu…i_8
 
unim∂emíãd
 !!!

	)

807 
__ölöe
 
bus_•a˚_£t_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

808 
bus_•a˚_h™dÀ_t
 
bsh
,

809 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
,

810 
size_t
 
cou¡
);

811 
__ölöe
 
bus_•a˚_£t_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

812 
bus_•a˚_h™dÀ_t
 
bsh
,

813 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
,

814 
size_t
 
cou¡
);

815 
__ölöe
 
bus_•a˚_£t_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

816 
bus_•a˚_h™dÀ_t
 
bsh
,

817 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
,

818 
size_t
 
cou¡
);

820 
__ölöe
 

821 
	$bus_•a˚_£t_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

822 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
)

824 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

826 i‡(
èg
 =
X86_BUS_SPACE_IO
)

827 ; 
cou¡
 !0; cou¡--, 
addr
++)

828 
	`outb
(
addr
, 
vÆue
);

830 ; 
cou¡
 !0; cou¡--, 
addr
++)

831 *(vﬁ©ûê
u_öt8_t
 *)(
addr
Ë
vÆue
;

832 
	}
}

834 
__ölöe
 

835 
	$bus_•a˚_£t_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

836 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
)

838 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

840 i‡(
èg
 =
X86_BUS_SPACE_IO
)

841 ; 
cou¡
 !0; cou¡--, 
addr
 += 2)

842 
	`outw
(
addr
, 
vÆue
);

844 ; 
cou¡
 !0; cou¡--, 
addr
 += 2)

845 *(vﬁ©ûê
u_öt16_t
 *)(
addr
Ë
vÆue
;

846 
	}
}

848 
__ölöe
 

849 
	$bus_•a˚_£t_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

850 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
)

852 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

854 i‡(
èg
 =
X86_BUS_SPACE_IO
)

855 ; 
cou¡
 !0; cou¡--, 
addr
 += 4)

856 
	`oué
(
addr
, 
vÆue
);

858 ; 
cou¡
 !0; cou¡--, 
addr
 += 4)

859 *(vﬁ©ûê
u_öt32_t
 *)(
addr
Ë
vÆue
;

860 
	}
}

863 
	#bus_•a˚_£t_ªgi⁄_8
 !!! 
bus_•a˚_£t_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

871 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

872 
bus_•a˚_h™dÀ_t
 
bsh1
,

873 
bus_size_t
 
off1
,

874 
bus_•a˚_h™dÀ_t
 
bsh2
,

875 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

877 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

878 
bus_•a˚_h™dÀ_t
 
bsh1
,

879 
bus_size_t
 
off1
,

880 
bus_•a˚_h™dÀ_t
 
bsh2
,

881 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

883 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

884 
bus_•a˚_h™dÀ_t
 
bsh1
,

885 
bus_size_t
 
off1
,

886 
bus_•a˚_h™dÀ_t
 
bsh2
,

887 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

889 
__ölöe
 

890 
	$bus_•a˚_c›y_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

891 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

892 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

894 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

895 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

897 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

898 i‡(
addr1
 >
addr2
) {

900 ; 
cou¡
 !0; cou¡--, 
addr1
++, 
addr2
++)

901 
	`outb
(
addr2
, 
	`öb
(
addr1
));

904 
addr1
 +(
cou¡
 - 1), 
addr2
 += (count - 1);

905 
cou¡
 !0; cou¡--, 
addr1
--, 
addr2
--)

906 
	`outb
(
addr2
, 
	`öb
(
addr1
));

909 i‡(
addr1
 >
addr2
) {

911 ; 
cou¡
 !0; cou¡--, 
addr1
++, 
addr2
++)

912 *(vﬁ©ûê
u_öt8_t
 *)(
addr2
) =

913 *(vﬁ©ûê
u_öt8_t
 *)(
addr1
);

916 
addr1
 +(
cou¡
 - 1), 
addr2
 += (count - 1);

917 
cou¡
 !0; cou¡--, 
addr1
--, 
addr2
--)

918 *(vﬁ©ûê
u_öt8_t
 *)(
addr2
) =

919 *(vﬁ©ûê
u_öt8_t
 *)(
addr1
);

922 
	}
}

924 
__ölöe
 

925 
	$bus_•a˚_c›y_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

926 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

927 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

929 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

930 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

932 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

933 i‡(
addr1
 >
addr2
) {

935 ; 
cou¡
 !0; cou¡--, 
addr1
 +2, 
addr2
 += 2)

936 
	`outw
(
addr2
, 
	`öw
(
addr1
));

939 
addr1
 +2 * (
cou¡
 - 1), 
addr2
 += 2 * (count - 1);

940 
cou¡
 !0; cou¡--, 
addr1
 -2, 
addr2
 -= 2)

941 
	`outw
(
addr2
, 
	`öw
(
addr1
));

944 i‡(
addr1
 >
addr2
) {

946 ; 
cou¡
 !0; cou¡--, 
addr1
 +2, 
addr2
 += 2)

947 *(vﬁ©ûê
u_öt16_t
 *)(
addr2
) =

948 *(vﬁ©ûê
u_öt16_t
 *)(
addr1
);

951 
addr1
 +2 * (
cou¡
 - 1), 
addr2
 += 2 * (count - 1);

952 
cou¡
 !0; cou¡--, 
addr1
 -2, 
addr2
 -= 2)

953 *(vﬁ©ûê
u_öt16_t
 *)(
addr2
) =

954 *(vﬁ©ûê
u_öt16_t
 *)(
addr1
);

957 
	}
}

959 
__ölöe
 

960 
	$bus_•a˚_c›y_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

961 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

962 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

964 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

965 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

967 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

968 i‡(
addr1
 >
addr2
) {

970 ; 
cou¡
 !0; cou¡--, 
addr1
 +4, 
addr2
 += 4)

971 
	`oué
(
addr2
, 
	`öl
(
addr1
));

974 
addr1
 +4 * (
cou¡
 - 1), 
addr2
 += 4 * (count - 1);

975 
cou¡
 !0; cou¡--, 
addr1
 -4, 
addr2
 -= 4)

976 
	`oué
(
addr2
, 
	`öl
(
addr1
));

979 i‡(
addr1
 >
addr2
) {

981 ; 
cou¡
 !0; cou¡--, 
addr1
 +4, 
addr2
 += 4)

982 *(vﬁ©ûê
u_öt32_t
 *)(
addr2
) =

983 *(vﬁ©ûê
u_öt32_t
 *)(
addr1
);

986 
addr1
 +4 * (
cou¡
 - 1), 
addr2
 += 4 * (count - 1);

987 
cou¡
 !0; cou¡--, 
addr1
 -4, 
addr2
 -= 4)

988 *(vﬁ©ûê
u_öt32_t
 *)(
addr2
) =

989 *(vﬁ©ûê
u_öt32_t
 *)(
addr1
);

992 
	}
}

995 
	#bus_•a˚_c›y_ªgi⁄_8
 !!! 
bus_•a˚_c›y_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

1009 
	#BUS_SPACE_BARRIER_READ
 0x01

	)

1010 
	#BUS_SPACE_BARRIER_WRITE
 0x02

	)

1012 
__ölöe
 

1013 
	$bus_•a˚_b¨rõr
(
bus_•a˚_èg_t
 
èg
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
 __unused,

1014 
bus_size_t
 
off£t
 
__unu£d
, bus_size_à
Àn
 __unu£d, 
Êags
)

1016 #ifde‡
__GNUCLIKE_ASM


1017 i‡(
Êags
 & 
BUS_SPACE_BARRIER_READ
)

1018 #ifde‡
__amd64__


1019 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,0(%%rsp)" : : : "memory");

1021 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,0(%%esp)" : : : "memory");

1024 
	`__compûî_memb¨
();

1026 
	}
}

1028 #ifde‡
BUS_SPACE_NO_LEGACY


1029 #unde‡
öb


1030 #unde‡
outb


1031 
	#öb
(
a
Ë
compûî_îr‹


	)

1032 
	#öw
(
a
Ë
compûî_îr‹


	)

1033 
	#öl
(
a
Ë
compûî_îr‹


	)

1034 
	#outb
(
a
, 
b
Ë
compûî_îr‹


	)

1035 
	#outw
(
a
, 
b
Ë
compûî_îr‹


	)

1036 
	#oué
(
a
, 
b
Ë
compûî_îr‹


	)

1039 
	~<machöe/bus_dma.h
>

1045 
	#bus_•a˚_ªad_°ªam_1
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_1
(—), (h), (o))

	)

1046 
	#bus_•a˚_ªad_°ªam_2
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_2
(—), (h), (o))

	)

1047 
	#bus_•a˚_ªad_°ªam_4
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_4
(—), (h), (o))

	)

1049 
	#bus_•a˚_ªad_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1050 
	`bus_•a˚_ªad_mu…i_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1051 
	#bus_•a˚_ªad_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1052 
	`bus_•a˚_ªad_mu…i_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1053 
	#bus_•a˚_ªad_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1054 
	`bus_•a˚_ªad_mu…i_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1056 
	#bus_•a˚_wrôe_°ªam_1
(
t
, 
h
, 
o
, 
v
) \

1057 
	`bus_•a˚_wrôe_1
((
t
), (
h
), (
o
), (
v
))

	)

1058 
	#bus_•a˚_wrôe_°ªam_2
(
t
, 
h
, 
o
, 
v
) \

1059 
	`bus_•a˚_wrôe_2
((
t
), (
h
), (
o
), (
v
))

	)

1060 
	#bus_•a˚_wrôe_°ªam_4
(
t
, 
h
, 
o
, 
v
) \

1061 
	`bus_•a˚_wrôe_4
((
t
), (
h
), (
o
), (
v
))

	)

1063 
	#bus_•a˚_wrôe_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1064 
	`bus_•a˚_wrôe_mu…i_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1065 
	#bus_•a˚_wrôe_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1066 
	`bus_•a˚_wrôe_mu…i_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1067 
	#bus_•a˚_wrôe_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1068 
	`bus_•a˚_wrôe_mu…i_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1070 
	#bus_•a˚_£t_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
v
, 
c
) \

1071 
	`bus_•a˚_£t_mu…i_1
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1072 
	#bus_•a˚_£t_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
v
, 
c
) \

1073 
	`bus_•a˚_£t_mu…i_2
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1074 
	#bus_•a˚_£t_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
v
, 
c
) \

1075 
	`bus_•a˚_£t_mu…i_4
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1077 
	#bus_•a˚_ªad_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1078 
	`bus_•a˚_ªad_ªgi⁄_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1079 
	#bus_•a˚_ªad_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1080 
	`bus_•a˚_ªad_ªgi⁄_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1081 
	#bus_•a˚_ªad_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1082 
	`bus_•a˚_ªad_ªgi⁄_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1084 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1085 
	`bus_•a˚_wrôe_ªgi⁄_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1086 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1087 
	`bus_•a˚_wrôe_ªgi⁄_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1088 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1089 
	`bus_•a˚_wrôe_ªgi⁄_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1091 
	#bus_•a˚_£t_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
v
, 
c
) \

1092 
	`bus_•a˚_£t_ªgi⁄_1
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1093 
	#bus_•a˚_£t_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
v
, 
c
) \

1094 
	`bus_•a˚_£t_ªgi⁄_2
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1095 
	#bus_•a˚_£t_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
v
, 
c
) \

1096 
	`bus_•a˚_£t_ªgi⁄_4
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1098 
	#bus_•a˚_c›y_ªgi⁄_°ªam_1
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1099 
	`bus_•a˚_c›y_ªgi⁄_1
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

1100 
	#bus_•a˚_c›y_ªgi⁄_°ªam_2
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1101 
	`bus_•a˚_c›y_ªgi⁄_2
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

1102 
	#bus_•a˚_c›y_ªgi⁄_°ªam_4
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1103 
	`bus_•a˚_c›y_ªgi⁄_4
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

	@src/nvidia-drm/x86/bus_dma.h

29 #i‚de‡
_X86_BUS_DMA_H_


30 
	#_X86_BUS_DMA_H_


	)

32 
	#WANT_INLINE_DMAMAP


	)

33 
	~<sys/bus_dma.h
>

34 
	~<sys/_nuŒ.h
>

36 
	~<x86/busdma_im∂.h
>

42 
ölöe
 

43 
	$bus_dmam≠_¸óã
(
bus_dma_èg_t
 
dm©
, 
Êags
, 
bus_dmam≠_t
 *
m≠p
)

45 
bus_dma_èg_comm⁄
 *
tc
;

47 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

48  (
tc
->
im∂
->
	`m≠_¸óã
(
dm©
, 
Êags
, 
m≠p
));

49 
	}
}

55 
ölöe
 

56 
	$bus_dmam≠_de°roy
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
)

58 
bus_dma_èg_comm⁄
 *
tc
;

60 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

61  (
tc
->
im∂
->
	`m≠_de°roy
(
dm©
, 
m≠
));

62 
	}
}

69 
ölöe
 

70 
	$bus_dmamem_Æloc
(
bus_dma_èg_t
 
dm©
, ** 
vaddr
, 
Êags
,

71 
bus_dmam≠_t
 *
m≠p
)

73 
bus_dma_èg_comm⁄
 *
tc
;

75 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

76  (
tc
->
im∂
->
	`mem_Æloc
(
dm©
, 
vaddr
, 
Êags
, 
m≠p
));

77 
	}
}

83 
ölöe
 

84 
	$bus_dmamem_‰ì
(
bus_dma_èg_t
 
dm©
, *
vaddr
, 
bus_dmam≠_t
 
m≠
)

86 
bus_dma_èg_comm⁄
 *
tc
;

88 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

89 
tc
->
im∂
->
	`mem_‰ì
(
dm©
, 
vaddr
, 
m≠
);

90 
	}
}

95 
ölöe
 

96 
	$bus_dmam≠_u∆ﬂd
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
)

98 
bus_dma_èg_comm⁄
 *
tc
;

100 i‡(
m≠
 !
NULL
) {

101 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

102 
tc
->
im∂
->
	`m≠_u∆ﬂd
(
dm©
, 
m≠
);

104 
	}
}

106 
ölöe
 

107 
	$bus_dmam≠_sync
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
bus_dmasync_›_t
 
›
)

109 
bus_dma_èg_comm⁄
 *
tc
;

111 i‡(
m≠
 !
NULL
) {

112 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

113 
tc
->
im∂
->
	`m≠_sync
(
dm©
, 
m≠
, 
›
);

115 
	}
}

121 
ölöe
 

122 
	$_bus_dmam≠_lﬂd_phys
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
vm_∑ddr_t
 
buf
,

123 
bus_size_t
 
buÊí
, 
Êags
, 
bus_dma_£gmít_t
 *
£gs
, *
£gp
)

125 
bus_dma_èg_comm⁄
 *
tc
;

127 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

128  (
tc
->
im∂
->
	`lﬂd_phys
(
dm©
, 
m≠
, 
buf
, 
buÊí
, 
Êags
, 
£gs
,

129 
£gp
));

130 
	}
}

132 
ölöe
 

133 
	$_bus_dmam≠_lﬂd_ma
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
vm_∑ge
 **
ma
,

134 
bus_size_t
 
éí
, 
ma_offs
, 
Êags
, 
bus_dma_£gmít_t
 *
£gs
,

135 *
£gp
)

137 
bus_dma_èg_comm⁄
 *
tc
;

139 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

140  (
tc
->
im∂
->
	`lﬂd_ma
(
dm©
, 
m≠
, 
ma
, 
éí
, 
ma_offs
, 
Êags
,

141 
£gs
, 
£gp
));

142 
	}
}

148 
ölöe
 

149 
	$_bus_dmam≠_lﬂd_buf„r
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, *
buf
,

150 
bus_size_t
 
buÊí
, 
pm≠
 *pm≠, 
Êags
, 
bus_dma_£gmít_t
 *
£gs
,

151 *
£gp
)

153 
bus_dma_èg_comm⁄
 *
tc
;

155 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

156  (
tc
->
im∂
->
	`lﬂd_buf„r
(
dm©
, 
m≠
, 
buf
, 
buÊí
, 
pm≠
, 
Êags
, 
£gs
,

157 
£gp
));

158 
	}
}

160 
ölöe
 

161 
	$_bus_dmam≠_waôok
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

162 
memdesc
 *
mem
, 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
, *
ˇŒback_¨g
)

164 
bus_dma_èg_comm⁄
 *
tc
;

166 i‡(
m≠
 !
NULL
) {

167 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

168 
tc
->
im∂
->
	`m≠_waôok
(
dm©
, 
m≠
, 
mem
, 
ˇŒback
, 
ˇŒback_¨g
);

170 
	}
}

172 
ölöe
 
bus_dma_£gmít_t
 *

173 
	$_bus_dmam≠_com∂ëe
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

174 
bus_dma_£gmít_t
 *
£gs
, 
n£gs
, 
îr‹
)

176 
bus_dma_èg_comm⁄
 *
tc
;

178 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

179  (
tc
->
im∂
->
	`m≠_com∂ëe
(
dm©
, 
m≠
, 
£gs
, 
n£gs
, 
îr‹
));

180 
	}
}

	@src/nvidia-drm/x86/busdma_impl.h

34 #i‚def 
__X86_BUSDMA_IMPL_H


35 
	#__X86_BUSDMA_IMPL_H


	)

37 
	sbus_dma_èg_comm⁄
 {

38 
bus_dma_im∂
 *
	mim∂
;

39 
bus_dma_èg_comm⁄
 *
	m∑ª¡
;

40 
bus_size_t
 
	mÆignmít
;

41 
bus_addr_t
 
	mbound¨y
;

42 
bus_addr_t
 
	mlowaddr
;

43 
bus_addr_t
 
	mhighaddr
;

44 
bus_dma_fûãr_t
 *
	mfûãr
;

45 *
	mfûãørg
;

46 
bus_size_t
 
	mmaxsize
;

47 
u_öt
 
	mn£gmíts
;

48 
bus_size_t
 
	mmax£gsz
;

49 
	mÊags
;

50 
bus_dma_lock_t
 *
	mlockfunc
;

51 *
	mlockfunˇrg
;

52 
	mªf_cou¡
;

53 
	mdomaö
;

56 
	sbus_dma_im∂
 {

57 (*
	mèg_¸óã
)(
bus_dma_èg_t
 
	m∑ª¡
,

58 
bus_size_t
 
	mÆignmít
, 
bus_addr_t
 
	mbound¨y
, bus_addr_à
	mlowaddr
,

59 
bus_addr_t
 
	mhighaddr
, 
bus_dma_fûãr_t
 *
	mfûãr
,

60 *
	mfûãørg
, 
bus_size_t
 
	mmaxsize
, 
	mn£gmíts
,

61 
bus_size_t
 
	mmax£gsz
, 
	mÊags
, 
bus_dma_lock_t
 *
	mlockfunc
,

62 *
	mlockfunˇrg
, 
bus_dma_èg_t
 *
	mdm©
);

63 (*
	mèg_de°roy
)(
bus_dma_èg_t
 
	mdm©
);

64 (*
	mèg_£t_domaö
)(
	mbus_dma_èg_t
);

65 (*
	mm≠_¸óã
)(
bus_dma_èg_t
 
	mdm©
, 
	mÊags
, 
bus_dmam≠_t
 *
	mm≠p
);

66 (*
	mm≠_de°roy
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
);

67 (*
	mmem_Æloc
)(
bus_dma_èg_t
 
	mdm©
, ** 
	mvaddr
, 
	mÊags
,

68 
bus_dmam≠_t
 *
	mm≠p
);

69 (*
	mmem_‰ì
)(
bus_dma_èg_t
 
	mdm©
, *
	mvaddr
, 
bus_dmam≠_t
 
	mm≠
);

70 (*
	mlﬂd_ma
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

71 
vm_∑ge
 **
	mma
, 
bus_size_t
 
	méí
, 
	mma_offs
, 
	mÊags
,

72 
bus_dma_£gmít_t
 *
	m£gs
, *
	m£gp
);

73 (*
	mlﬂd_phys
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

74 
vm_∑ddr_t
 
	mbuf
, 
bus_size_t
 
	mbuÊí
, 
	mÊags
,

75 
bus_dma_£gmít_t
 *
	m£gs
, *
	m£gp
);

76 (*
	mlﬂd_buf„r
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

77 *
	mbuf
, 
bus_size_t
 
	mbuÊí
, 
pm≠
 *
	mpm≠
, 
	mÊags
,

78 
bus_dma_£gmít_t
 *
	m£gs
, *
	m£gp
);

79 (*
	mm≠_waôok
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

80 
memdesc
 *
	mmem
, 
bus_dmam≠_ˇŒback_t
 *
	mˇŒback
,

81 *
	mˇŒback_¨g
);

82 
	mbus_dma_£gmít_t
 *(*
	mm≠_com∂ëe
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

83 
bus_dma_£gmít_t
 *
	m£gs
, 
	mn£gs
, 
	mîr‹
);

84 (*
	mm≠_u∆ﬂd
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
);

85 (*
	mm≠_sync
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

86 
bus_dmasync_›_t
 
	m›
);

89 
bus_dma_dÊt_lock
(*
¨g
, 
bus_dma_lock_›_t
 
›
);

90 
bus_dma_run_fûãr
(
bus_dma_èg_comm⁄
 *
dm©
, 
bus_addr_t
 
∑ddr
);

91 
comm⁄_bus_dma_èg_¸óã
(
bus_dma_èg_comm⁄
 *
∑ª¡
,

92 
bus_size_t
 
Æignmít
,

93 
bus_addr_t
 
bound¨y
, bus_addr_à
lowaddr
, bus_addr_à
highaddr
,

94 
bus_dma_fûãr_t
 *
fûãr
, *
fûãørg
, 
bus_size_t
 
maxsize
,

95 
n£gmíts
, 
bus_size_t
 
max£gsz
, 
Êags
, 
bus_dma_lock_t
 *
lockfunc
,

96 *
lockfunˇrg
, 
size_t
 
sz
, **
dm©
);

98 
bus_dma_im∂
 
bus_dma_boun˚_im∂
;

	@src/nvidia-drm/x86/cputypes.h

30 #i‚de‡
_X86_CPUTYPES_H_


31 
	#_X86_CPUTYPES_H_


	)

36 
	#CPU_VENDOR_NSC
 0x100b

	)

37 
	#CPU_VENDOR_IBM
 0x1014

	)

38 
	#CPU_VENDOR_AMD
 0x1022

	)

39 
	#CPU_VENDOR_SIS
 0x1039

	)

40 
	#CPU_VENDOR_UMC
 0x1060

	)

41 
	#CPU_VENDOR_NEXGEN
 0x1074

	)

42 
	#CPU_VENDOR_CYRIX
 0x1078

	)

43 
	#CPU_VENDOR_IDT
 0x111d

	)

44 
	#CPU_VENDOR_TRANSMETA
 0x1279

	)

45 
	#CPU_VENDOR_INTEL
 0x8086

	)

46 
	#CPU_VENDOR_RISE
 0xdód2bad

	)

47 
	#CPU_VENDOR_CENTAUR
 
CPU_VENDOR_IDT


	)

	@src/nvidia-drm/x86/dump.h

30 #i‚de‡
_MACHINE_DUMP_H_


31 
	#_MACHINE_DUMP_H_


	)

33 #ifde‡
__amd64__


34 
	#KERNELDUMP_ARCH_VERSION
 
KERNELDUMP_AMD64_VERSION


	)

35 
	#EM_VALUE
 
EM_X86_64


	)

37 
	#KERNELDUMP_ARCH_VERSION
 
KERNELDUMP_I386_VERSION


	)

38 
	#EM_VALUE
 
EM_386


	)

42 
	#DUMPSYS_MD_PA_NPAIRS
 10

	)

43 
	#DUMPSYS_NUM_AUX_HDRS
 0

	)

45 
ölöe
 

46 
	$dumpsys_∑_öô
()

49 
	`dumpsys_gí_∑_öô
();

50 
	}
}

52 
ölöe
 
dump_∑
 *

53 
	$dumpsys_∑_√xt
(
dump_∑
 *
p
)

56  (
	`dumpsys_gí_∑_√xt
(
p
));

57 
	}
}

59 
ölöe
 

60 
	$dumpsys_wböv_Æl
()

63 
	`dumpsys_gí_wböv_Æl
();

64 
	}
}

66 
ölöe
 

67 
	$dumpsys_unm≠_chunk
(
vm_∑ddr_t
 
∑
, 
size_t
 
s
, *
va
)

70 
	`dumpsys_gí_unm≠_chunk
(
∑
, 
s
, 
va
);

71 
	}
}

73 
ölöe
 

74 
	$dumpsys_wrôe_aux_hódîs
(
dum≥röfo
 *
di
)

77  (
	`dumpsys_gí_wrôe_aux_hódîs
(
di
));

78 
	}
}

80 
ölöe
 

81 
	$dumpsys
(
dum≥röfo
 *
di
)

84  (
	`dumpsys_gíîic
(
di
));

85 
	}
}

	@src/nvidia-drm/x86/elf.h

31 #i‚de‡
_MACHINE_ELF_H_


32 
	#_MACHINE_ELF_H_
 1

	)

34 #i‡
deföed
(
__i386__
Ë|| deföed(
_MACHINE_ELF_WANT_32BIT
)

40 
	~<sys/ñf32.h
>

41 #i‡
deföed
(
__ELF_WORD_SIZE
) && __ELF_WORD_SIZE == 64

42 
	~<sys/ñf64.h
>

45 #i‚de‡
__ELF_WORD_SIZE


46 
	#__ELF_WORD_SIZE
 32

	)

49 
	~<sys/ñf_gíîic.h
>

51 
	#ELF_ARCH
 
EM_386


	)

53 
	#ELF_MACHINE_OK
(
x
Ë((xË=
EM_386
 || (xË=
EM_486
)

	)

63 
	ma_ty≥
;

65 
	ma_vÆ
;

66 *
	ma_±r
;

67 (*
	ma_f˙
)();

68 } 
	ma_un
;

69 } 
	tElf32_Auxöfo
;

71 #i‡
__ELF_WORD_SIZE
 == 64

74 
	mÁke
;

75 } 
	tElf64_Auxöfo
;

78 
__ElfTy≥
(
Auxöfo
);

81 
	#AT_NULL
 0

	)

82 
	#AT_IGNORE
 1

	)

83 
	#AT_EXECFD
 2

	)

84 
	#AT_PHDR
 3

	)

85 
	#AT_PHENT
 4

	)

86 
	#AT_PHNUM
 5

	)

87 
	#AT_PAGESZ
 6

	)

88 
	#AT_BASE
 7

	)

89 
	#AT_FLAGS
 8

	)

90 
	#AT_ENTRY
 9

	)

91 
	#AT_NOTELF
 10

	)

92 
	#AT_UID
 11

	)

93 
	#AT_EUID
 12

	)

94 
	#AT_GID
 13

	)

95 
	#AT_EGID
 14

	)

96 
	#AT_EXECPATH
 15

	)

97 
	#AT_CANARY
 16

	)

98 
	#AT_CANARYLEN
 17

	)

99 
	#AT_OSRELDATE
 18

	)

100 
	#AT_NCPUS
 19

	)

101 
	#AT_PAGESIZES
 20

	)

102 
	#AT_PAGESIZESLEN
 21

	)

103 
	#AT_TIMEKEEP
 22

	)

104 
	#AT_STACKPROT
 23

	)

105 
	#AT_EHDRFLAGS
 24

	)

106 
	#AT_HWCAP
 25

	)

107 
	#AT_HWCAP2
 26

	)

109 
	#AT_COUNT
 27

	)

115 
	#R_386_COUNT
 38

	)

118 
	#ELF_TARG_CLASS
 
ELFCLASS32


	)

119 
	#ELF_TARG_DATA
 
ELFDATA2LSB


	)

120 
	#ELF_TARG_MACH
 
EM_386


	)

121 
	#ELF_TARG_VER
 1

	)

123 
	#ET_DYN_LOAD_ADDR
 0x01001000

	)

125 #ñi‡
deföed
(
__amd64__
)

131 #i‚de‡
__ELF_WORD_SIZE


132 
	#__ELF_WORD_SIZE
 64

	)

134 
	~<sys/ñf32.h
>

135 
	~<sys/ñf64.h
>

136 
	~<sys/ñf_gíîic.h
>

138 
	#ELF_ARCH
 
EM_X86_64


	)

139 
	#ELF_ARCH32
 
EM_386


	)

141 
	#ELF_MACHINE_OK
(
x
Ë((xË=
EM_X86_64
)

	)

150 
	ma_ty≥
;

152 
	ma_vÆ
;

153 } 
	ma_un
;

154 } 
	tElf32_Auxöfo
;

158 
	ma_ty≥
;

160 
	ma_vÆ
;

161 *
	ma_±r
;

162 (*
	ma_f˙
)();

163 } 
	ma_un
;

164 } 
	tElf64_Auxöfo
;

166 
__ElfTy≥
(
Auxöfo
);

169 
	#AT_NULL
 0

	)

170 
	#AT_IGNORE
 1

	)

171 
	#AT_EXECFD
 2

	)

172 
	#AT_PHDR
 3

	)

173 
	#AT_PHENT
 4

	)

174 
	#AT_PHNUM
 5

	)

175 
	#AT_PAGESZ
 6

	)

176 
	#AT_BASE
 7

	)

177 
	#AT_FLAGS
 8

	)

178 
	#AT_ENTRY
 9

	)

179 
	#AT_NOTELF
 10

	)

180 
	#AT_UID
 11

	)

181 
	#AT_EUID
 12

	)

182 
	#AT_GID
 13

	)

183 
	#AT_EGID
 14

	)

184 
	#AT_EXECPATH
 15

	)

185 
	#AT_CANARY
 16

	)

186 
	#AT_CANARYLEN
 17

	)

187 
	#AT_OSRELDATE
 18

	)

188 
	#AT_NCPUS
 19

	)

189 
	#AT_PAGESIZES
 20

	)

190 
	#AT_PAGESIZESLEN
 21

	)

191 
	#AT_TIMEKEEP
 22

	)

192 
	#AT_STACKPROT
 23

	)

193 
	#AT_EHDRFLAGS
 24

	)

194 
	#AT_HWCAP
 25

	)

195 
	#AT_HWCAP2
 26

	)

197 
	#AT_COUNT
 27

	)

203 
	#R_X86_64_COUNT
 24

	)

206 #i‡
__ELF_WORD_SIZE
 == 32

207 
	#ELF_TARG_CLASS
 
ELFCLASS32


	)

209 
	#ELF_TARG_CLASS
 
ELFCLASS64


	)

211 
	#ELF_TARG_DATA
 
ELFDATA2LSB


	)

212 
	#ELF_TARG_MACH
 
EM_X86_64


	)

213 
	#ELF_TARG_VER
 1

	)

215 #i‡
__ELF_WORD_SIZE
 == 32

216 
	#ET_DYN_LOAD_ADDR
 0x01001000

	)

218 
	#ET_DYN_LOAD_ADDR
 0x01021000

	)

	@src/nvidia-drm/x86/endian.h

35 #i‚de‡
_MACHINE_ENDIAN_H_


36 
	#_MACHINE_ENDIAN_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/_ty≥s.h
>

44 
	#_QUAD_HIGHWORD
 1

	)

45 
	#_QUAD_LOWWORD
 0

	)

51 
	#_LITTLE_ENDIAN
 1234

	)

52 
	#_BIG_ENDIAN
 4321

	)

53 
	#_PDP_ENDIAN
 3412

	)

55 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

61 #i‡
__BSD_VISIBLE


62 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

63 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

64 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

65 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

68 
	#__bsw≠16_gí
(
x
Ë(
__uöt16_t
)((xË<< 8 | (xË>> 8)

	)

69 
	#__bsw≠32_gí
(
x
) \

70 (((
__uöt32_t
)
	`__bsw≠16
((
x
Ë& 0xffffË<< 16Ë| __bsw≠16((xË>> 16))

	)

71 
	#__bsw≠64_gí
(
x
) \

72 (((
__uöt64_t
)
	`__bsw≠32
((
x
Ë& 0xffffffffË<< 32Ë| __bsw≠32((xË>> 32))

	)

74 #ifde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


75 
	#__bsw≠16
(
x
) \

76 ((
__uöt16_t
)(
	`__buûtö_c⁄°™t_p
(
x
) ? \

77 
	`__bsw≠16_gí
((
__uöt16_t
)(
x
)Ë: 
	`__bsw≠16_v¨
(x)))

	)

78 
	#__bsw≠32
(
x
) \

79 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

80 
	`__bsw≠32_gí
((
__uöt32_t
)(
x
)Ë: 
	`__bsw≠32_v¨
(x))

	)

81 
	#__bsw≠64
(
x
) \

82 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

83 
	`__bsw≠64_gí
((
__uöt64_t
)(
x
)Ë: 
	`__bsw≠64_v¨
(x))

	)

86 
	#__bsw≠16
(
x
Ë
	`__bsw≠16_v¨
(x)

	)

87 
	#__bsw≠32
(
x
Ë
	`__bsw≠32_v¨
(x)

	)

88 
	#__bsw≠64
(
x
Ë
	`__bsw≠64_v¨
(x)

	)

93 
__ölöe
 
__uöt16_t


94 
	$__bsw≠16_v¨
(
__uöt16_t
 
_x
)

97  (
	`__bsw≠16_gí
(
_x
));

98 
	}
}

100 
__ölöe
 
__uöt32_t


101 
	$__bsw≠32_v¨
(
__uöt32_t
 
_x
)

104 #ifde‡
__GNUCLIKE_ASM


105 
	`__asm
("bsw≠ %0" : "+r" (
_x
));

106  (
_x
);

108  (
	`__bsw≠32_gí
(
_x
));

110 
	}
}

112 
__ölöe
 
__uöt64_t


113 
	$__bsw≠64_v¨
(
__uöt64_t
 
_x
)

116 #i‡
	`deföed
(
__amd64__
Ë&& deföed(
__GNUCLIKE_ASM
)

117 
	`__asm
("bsw≠ %0" : "+r" (
_x
));

118  (
_x
);

124  (
	`__bsw≠64_gí
(
_x
));

126 
	}
}

128 
	#__ht⁄l
(
x
Ë
	`__bsw≠32
(x)

	)

129 
	#__ht⁄s
(
x
Ë
	`__bsw≠16
(x)

	)

130 
	#__¡ohl
(
x
Ë
	`__bsw≠32
(x)

	)

131 
	#__¡ohs
(
x
Ë
	`__bsw≠16
(x)

	)

	@src/nvidia-drm/x86/fdt.h

31 #i‚de‡
_MACHINE_FDT_H_


32 
	#_MACHINE_FDT_H_


	)

34 
__BEGIN_DECLS


35 
x86_öô_fdt
();

36 
	g__END_DECLS


	@src/nvidia-drm/x86/float.h

35 #i‚de‡
_MACHINE_FLOAT_H_


36 
	#_MACHINE_FLOAT_H_
 1

	)

38 
	~<sys/cdefs.h
>

40 
__BEGIN_DECLS


41 
__Êt_rounds
();

42 
	g__END_DECLS


44 
	#FLT_RADIX
 2

	)

45 
	#FLT_ROUNDS
 
	`__Êt_rounds
()

	)

46 #i‡
__ISO_C_VISIBLE
 >= 1999

47 #ifde‡
__LP64__


48 
	#FLT_EVAL_METHOD
 0

	)

50 
	#FLT_EVAL_METHOD
 (-1Ë

	)

52 
	#DECIMAL_DIG
 21

	)

55 
	#FLT_MANT_DIG
 24

	)

56 
	#FLT_EPSILON
 1.19209290E-07F

	)

57 
	#FLT_DIG
 6

	)

58 
	#FLT_MIN_EXP
 (-125Ë

	)

59 
	#FLT_MIN
 1.17549435E-38F

	)

60 
	#FLT_MIN_10_EXP
 (-37Ë

	)

61 
	#FLT_MAX_EXP
 128

	)

62 
	#FLT_MAX
 3.40282347E+38F

	)

63 
	#FLT_MAX_10_EXP
 38

	)

64 #i‡
__ISO_C_VISIBLE
 >= 2011

65 
	#FLT_TRUE_MIN
 1.40129846E-45F

	)

66 
	#FLT_DECIMAL_DIG
 9

	)

67 
	#FLT_HAS_SUBNORM
 1

	)

70 
	#DBL_MANT_DIG
 53

	)

71 
	#DBL_EPSILON
 2.2204460492503131E-16

	)

72 
	#DBL_DIG
 15

	)

73 
	#DBL_MIN_EXP
 (-1021)

	)

74 
	#DBL_MIN
 2.2250738585072014E-308

	)

75 
	#DBL_MIN_10_EXP
 (-307)

	)

76 
	#DBL_MAX_EXP
 1024

	)

77 
	#DBL_MAX
 1.7976931348623157E+308

	)

78 
	#DBL_MAX_10_EXP
 308

	)

79 #i‡
__ISO_C_VISIBLE
 >= 2011

80 
	#DBL_TRUE_MIN
 4.9406564584124654E-324

	)

81 
	#DBL_DECIMAL_DIG
 17

	)

82 
	#DBL_HAS_SUBNORM
 1

	)

85 
	#LDBL_MANT_DIG
 64

	)

86 
	#LDBL_EPSILON
 1.0842021724855044340E-19L

	)

87 
	#LDBL_DIG
 18

	)

88 
	#LDBL_MIN_EXP
 (-16381)

	)

89 
	#LDBL_MIN
 3.3621031431120935063E-4932L

	)

90 
	#LDBL_MIN_10_EXP
 (-4931)

	)

91 
	#LDBL_MAX_EXP
 16384

	)

92 
	#LDBL_MAX
 1.1897314953572317650E+4932L

	)

93 
	#LDBL_MAX_10_EXP
 4932

	)

94 #i‡
__ISO_C_VISIBLE
 >= 2011

95 
	#LDBL_TRUE_MIN
 3.6451995318824746025E-4951L

	)

96 
	#LDBL_DECIMAL_DIG
 21

	)

97 
	#LDBL_HAS_SUBNORM
 1

	)

	@src/nvidia-drm/x86/fpu.h

41 #i‚de‡
_X86_FPU_H_


42 
	#_X86_FPU_H_


	)

45 
	sív87
 {

46 
öt32_t
 
	mí_cw
;

47 
öt32_t
 
	mí_sw
;

48 
öt32_t
 
	mí_tw
;

49 
öt32_t
 
	mí_fù
;

50 
uöt16_t
 
	mí_fcs
;

51 
uöt16_t
 
	mí_›code
;

52 
öt32_t
 
	mí_foo
;

53 
öt32_t
 
	mí_fos
;

57 
	sÂacc87
 {

58 
uöt8_t
 
	mÂ_byãs
[10];

62 
	sßve87
 {

63 
ív87
 
	msv_ív
;

64 
Âacc87
 
	msv_ac
[8];

65 
uöt8_t
 
	msv_∑d0
[4];

66 
uöt8_t
 
	msv_∑d
[64];

70 
	sxmmacc
 {

71 
uöt8_t
 
	mxmm_byãs
[16];

75 
	symmacc
 {

76 
uöt8_t
 
	mymm_byãs
[16];

80 #ifde‡
__i386__


81 
	#__ívxmm32
 
ívxmm


	)

83 
	#__ívxmm32
 
ívxmm32


	)

84 
	#__ívxmm64
 
ívxmm


	)

87 
	s__ívxmm32
 {

88 
uöt16_t
 
	mí_cw
;

89 
uöt16_t
 
	mí_sw
;

90 
uöt16_t
 
	mí_tw
;

91 
uöt16_t
 
	mí_›code
;

92 
uöt32_t
 
	mí_fù
;

93 
uöt16_t
 
	mí_fcs
;

94 
uöt16_t
 
	mí_∑d0
;

95 
uöt32_t
 
	mí_foo
;

96 
uöt16_t
 
	mí_fos
;

97 
uöt16_t
 
	mí_∑d1
;

98 
uöt32_t
 
	mí_mxc§
;

99 
uöt32_t
 
	mí_mxc§_mask
;

102 
	s__ívxmm64
 {

103 
uöt16_t
 
	mí_cw
;

104 
uöt16_t
 
	mí_sw
;

105 
uöt8_t
 
	mí_tw
;

106 
uöt8_t
 
	mí_zîo
;

107 
uöt16_t
 
	mí_›code
;

108 
uöt64_t
 
	mí_rù
;

109 
uöt64_t
 
	mí_rdp
;

110 
uöt32_t
 
	mí_mxc§
;

111 
uöt32_t
 
	mí_mxc§_mask
;

115 
	sßvexmm
 {

116 
__ívxmm32
 
	msv_ív
;

118 
Âacc87
 
	mÂ_acc
;

119 
uöt8_t
 
	mÂ_∑d
[6];

120 } 
	msv_Â
[8];

121 
xmmacc
 
	msv_xmm
[8];

122 
uöt8_t
 
	msv_∑d
[224];

123 } 
__Æig√d
(16);

125 #ifde‡
__i386__


126 
	ußveÂu
 {

127 
ßve87
 
	msv_87
;

128 
ßvexmm
 
	msv_xmm
;

132 
	sßveÂu
 {

133 
__ívxmm64
 
	msv_ív
;

135 
Âacc87
 
	mÂ_acc
;

136 
uöt8_t
 
	mÂ_∑d
[6];

137 } 
	msv_Â
[8];

138 
xmmacc
 
	msv_xmm
[16];

139 
uöt8_t
 
	msv_∑d
[96];

140 } 
__Æig√d
(16);

143 
	sx°©e_hdr
 {

144 
uöt64_t
 
	mx°©e_bv
;

145 
uöt64_t
 
	mx°©e_xcomp_bv
;

146 
uöt8_t
 
	mx°©e_r§v0
[8];

147 
uöt8_t
 
	mx°©e_r§v
[40];

149 
	#XSTATE_XCOMP_BV_COMPACT
 (1ULL << 63)

	)

151 
	sßvexmm_x°©e
 {

152 
x°©e_hdr
 
	msx_hd
;

153 
ymmacc
 
	msx_ymm
[16];

156 
	sßvexmm_ymm
 {

157 
__ívxmm32
 
	msv_ív
;

159 
Âacc87
 
	mÂ_acc
;

160 
öt8_t
 
	mÂ_∑d
[6];

161 } 
	msv_Â
[8];

162 
xmmacc
 
	msv_xmm
[16];

163 
uöt8_t
 
	msv_∑d
[96];

164 
ßvexmm_x°©e
 
	msv_x°©e
;

165 } 
__Æig√d
(64);

167 
	sßveÂu_x°©e
 {

168 
x°©e_hdr
 
	msx_hd
;

169 
ymmacc
 
	msx_ymm
[16];

172 
	sßveÂu_ymm
 {

173 
__ívxmm64
 
	msv_ív
;

175 
Âacc87
 
	mÂ_acc
;

176 
öt8_t
 
	mÂ_∑d
[6];

177 } 
	msv_Â
[8];

178 
xmmacc
 
	msv_xmm
[16];

179 
uöt8_t
 
	msv_∑d
[96];

180 
ßveÂu_x°©e
 
	msv_x°©e
;

181 } 
__Æig√d
(64);

183 #unde‡
__ívxmm32


184 #unde‡
__ívxmm64


204 
	#__INITIAL_FPUCW__
 0x037F

	)

205 
	#__INITIAL_FPUCW_I386__
 0x127F

	)

206 
	#__INITIAL_NPXCW__
 
__INITIAL_FPUCW_I386__


	)

207 
	#__INITIAL_MXCSR__
 0x1F80

	)

208 
	#__INITIAL_MXCSR_MASK__
 0xFFBF

	)

215 
	#X86_XSTATE_XCR0_OFFSET
 464

	)

	@src/nvidia-drm/x86/frame.h

39 #i‚de‡
_MACHINE_FRAME_H_


40 
	#_MACHINE_FRAME_H_
 1

	)

46 #ifde‡
__i386__


51 
	så≠‰ame
 {

52 
	mtf_fs
;

53 
	mtf_es
;

54 
	mtf_ds
;

55 
	mtf_edi
;

56 
	mtf_esi
;

57 
	mtf_ebp
;

58 
	mtf_i•
;

59 
	mtf_ebx
;

60 
	mtf_edx
;

61 
	mtf_ecx
;

62 
	mtf_óx
;

63 
	mtf_å≠no
;

65 
	mtf_îr
;

66 
	mtf_eù
;

67 
	mtf_cs
;

68 
	mtf_eÊags
;

70 
	mtf_e•
;

71 
	mtf_ss
;

76 
	så≠‰ame_vm86
 {

77 
	mtf_fs
;

78 
	mtf_es
;

79 
	mtf_ds
;

80 
	mtf_edi
;

81 
	mtf_esi
;

82 
	mtf_ebp
;

83 
	mtf_i•
;

84 
	mtf_ebx
;

85 
	mtf_edx
;

86 
	mtf_ecx
;

87 
	mtf_óx
;

88 
	mtf_å≠no
;

90 
	mtf_îr
;

91 
	mtf_eù
;

92 
	mtf_cs
;

93 
	mtf_eÊags
;

95 
	mtf_e•
;

96 
	mtf_ss
;

98 
	mtf_vm86_es
;

99 
	mtf_vm86_ds
;

100 
	mtf_vm86_fs
;

101 
	mtf_vm86_gs
;

111 
	#TF_HAS_STACKREGS
(
tf
Ë
	`TRAPF_USERMODE
—f)

	)

114 #ifde‡
__amd64__


122 
	så≠‰ame
 {

123 
ªgi°î_t
 
	mtf_rdi
;

124 
ªgi°î_t
 
	mtf_rsi
;

125 
ªgi°î_t
 
	mtf_rdx
;

126 
ªgi°î_t
 
	mtf_rcx
;

127 
ªgi°î_t
 
	mtf_r8
;

128 
ªgi°î_t
 
	mtf_r9
;

129 
ªgi°î_t
 
	mtf_øx
;

130 
ªgi°î_t
 
	mtf_rbx
;

131 
ªgi°î_t
 
	mtf_rbp
;

132 
ªgi°î_t
 
	mtf_r10
;

133 
ªgi°î_t
 
	mtf_r11
;

134 
ªgi°î_t
 
	mtf_r12
;

135 
ªgi°î_t
 
	mtf_r13
;

136 
ªgi°î_t
 
	mtf_r14
;

137 
ªgi°î_t
 
	mtf_r15
;

138 
uöt32_t
 
	mtf_å≠no
;

139 
uöt16_t
 
	mtf_fs
;

140 
uöt16_t
 
	mtf_gs
;

141 
ªgi°î_t
 
	mtf_addr
;

142 
uöt32_t
 
	mtf_Êags
;

143 
uöt16_t
 
	mtf_es
;

144 
uöt16_t
 
	mtf_ds
;

146 
ªgi°î_t
 
	mtf_îr
;

147 
ªgi°î_t
 
	mtf_rù
;

148 
ªgi°î_t
 
	mtf_cs
;

149 
ªgi°î_t
 
	mtf_rÊags
;

151 
ªgi°î_t
 
	mtf_r•
;

152 
ªgi°î_t
 
	mtf_ss
;

155 
	#TF_HASSEGS
 0x1

	)

156 
	#TF_HASBASES
 0x2

	)

157 
	#TF_HASFPXSTATE
 0x4

	)

	@src/nvidia-drm/x86/ifunc.h

32 #i‚de‡
__X86_IFUNC_H


33 
	#__X86_IFUNC_H


	)

35 
	#DEFINE_IFUNC
(
quÆ
, 
ªt_ty≥
, 
«me
, 
¨gs
, 
ªsﬁvî_quÆ
) \

36 
ªsﬁvî_quÆ
 
	`ªt_ty≥
 (*
«me
##
	`_ªsﬁvî
())
¨gs
 
__u£d
; \

37 
quÆ
 
ªt_ty≥
 
«me
 
¨gs
 
	`__©åibuã__
((
	`ifunc
(#name "_resolver"))); \

38 
ªsﬁvî_quÆ
 
	`ªt_ty≥
 (*
«me
##
	`_ªsﬁvî
())
¨gs


	)

40 
	#DEFINE_UIFUNC
(
quÆ
, 
ªt_ty≥
, 
«me
, 
¨gs
, 
ªsﬁvî_quÆ
) \

41 
ªsﬁvî_quÆ
 
	`ªt_ty≥
 (*
«me
##
	`_ªsﬁvî
(
uöt32_t
, uint32_t, \

42 
uöt32_t
, uöt32_t))
¨gs
 
__u£d
; \

43 
quÆ
 
ªt_ty≥
 
«me
 
¨gs
 
	`__©åibuã__
((
	`ifunc
(#name "_resolver"))); \

44 
ªsﬁvî_quÆ
 
	`ªt_ty≥
 (*
«me
##
	`_ªsﬁvî
( \

45 
uöt32_t
 
˝u_„©uª
 
__unu£d
, \

46 
uöt32_t
 
˝u_„©uª2
 
__unu£d
, \

47 
uöt32_t
 
˝u_°dext_„©uª
 
__unu£d
, \

48 
uöt32_t
 
˝u_°dext_„©uª2
 
__unu£d
))
¨gs


	)

	@src/nvidia-drm/x86/init.h

31 #i‚de‡
__X86_INIT_H__


32 
	#__X86_INIT_H__


	)

39 
	söô_›s
 {

40 
ˇddr_t
 (*
∑r£_¥ñﬂd_d©a
)(
	mu_öt64_t
);

41 (*
	móæy_˛ock_sour˚_öô
)();

42 (*
	móæy_dñay
)();

43 (*
	m∑r£_memm≠
)(
	mˇddr_t
, 
	mvm_∑ddr_t
 *, *);

44 (*
	mmp_boŸaddªss
)(
	mvm_∑ddr_t
 *, *);

45 (*
	m°¨t_Æl_≠s
)();

46 (*
	mmsi_öô
)();

49 
öô_›s
 init_ops;

52 
boﬁ
 
a˝i_˝u_dißbÀd
;

55 
boﬁ
 
a˝i_h≥t_dißbÀd
;

58 
boﬁ
 
a˝i_timî_dißbÀd
;

	@src/nvidia-drm/x86/intr_machdep.h

31 #i‚de‡
__X86_INTR_MACHDEP_H__


32 
	#__X86_INTR_MACHDEP_H__


	)

34 #ifde‡
_KERNEL


61 
	#NUM_MSI_INTS
 512

	)

62 
	#MINIMUM_MSI_INT
 256

	)

64 
u_öt
 
fú°_msi_úq
;

65 
u_öt
 
num_io_úqs
;

70 
	#MSI_INTEL_ADDR_BASE
 0x„e00000

	)

72 #i‚de‡
LOCORE


74 
	töth™d_t
();

76 
	#IDTVEC
(
«me
Ë
	`__CONCAT
(
X
,«me)

	)

78 
	göt§c
;

85 
	spic
 {

86 (*
	mpic_ªgi°î_sour˚s
)(
	mpic
 *);

87 (*
	mpic_íabÀ_sour˚
)(
	möt§c
 *);

88 (*
	mpic_dißbÀ_sour˚
)(
	möt§c
 *, );

89 (*
	mpic_eoi_sour˚
)(
	möt§c
 *);

90 (*
	mpic_íabÀ_öå
)(
	möt§c
 *);

91 (*
	mpic_dißbÀ_öå
)(
	möt§c
 *);

92 (*
	mpic_ve˘‹
)(
	möt§c
 *);

93 (*
	mpic_sour˚_≥ndög
)(
	möt§c
 *);

94 (*
	mpic_su•íd
)(
	mpic
 *);

95 (*
	mpic_ªsume
)(
	mpic
 *, 
boﬁ
 
	msu•íd_ˇn˚Œed
);

96 (*
	mpic_c⁄fig_öå
)(
	möt§c
 *, 
	möå_åiggî
,

97 
	möå_pﬁ¨ôy
);

98 (*
	mpic_assign_˝u
)(
	möt§c
 *, 
u_öt
 
	m≠ic_id
);

99 (*
	mpic_ª¥ogøm_pö
)(
	möt§c
 *);

100 
TAILQ_ENTRY
(
pic
Ë
	mpics
;

105 
	mPIC_EOI
,

106 
	mPIC_NO_EOI
,

115 
	söt§c
 {

116 
pic
 *
	mis_pic
;

117 
öå_evít
 *
	mis_evít
;

118 
u_l⁄g
 *
	mis_cou¡
;

119 
u_l⁄g
 *
	mis_°øycou¡
;

120 
u_öt
 
	mis_ödex
;

121 
u_öt
 
	mis_h™dÀrs
;

122 
u_öt
 
	mis_domaö
;

123 
u_öt
 
	mis_˝u
;

126 
	gå≠‰ame
;

128 #ifde‡
SMP


129 
˝u£t_t
 
öå_˝us
;

131 
mtx
 
icu_lock
;

132 
ñ¸_found
;

133 #ifde‡
SMP


134 
msix_dißbÀ_migøti⁄
;

137 #i‚de‡
DEV_ATPIC


138 
©pic_ª£t
();

141 
ñ¸_¥obe
();

142 
öå_åiggî
 
ñ¸_ªad_åiggî
(
u_öt
 
úq
);

143 
ñ¸_ªsume
();

144 
ñ¸_wrôe_åiggî
(
u_öt
 
úq
, 
öå_åiggî
 
åiggî
);

145 #ifde‡
SMP


146 
öå_add_˝u
(
u_öt
 
˝u
);

148 
öå_add_h™dÀr
(c⁄° *
«me
, 
ve˘‹
, 
drivî_fûãr_t
 
fûãr
,

149 
drivî_öå_t
 
h™dÀr
, *
¨g
, 
öå_ty≥
 
Êags
, **
cookõp
,

150 
domaö
);

151 #ifde‡
SMP


152 
öå_böd
(
u_öt
 
ve˘‹
, 
u_ch¨
 
˝u
);

154 
öå_c⁄fig_öå
(
ve˘‹
, 
öå_åiggî
 
åig
,

155 
öå_pﬁ¨ôy
 
pﬁ
);

156 
öå_des¸ibe
(
u_öt
 
ve˘‹
, *
ih
, c⁄° *
des¸
);

157 
öå_execuã_h™dÀrs
(
öt§c
 *
i§c
, 
å≠‰ame
 *
‰ame
);

158 
u_öt
 
öå_√xt_˝u
(
domaö
);

159 
öt§c
 *
öå_lookup_sour˚
(
ve˘‹
);

160 
öå_ªgi°î_pic
(
pic
 *pic);

161 
öå_ªgi°î_sour˚
(
öt§c
 *
i§c
);

162 
öå_ªmove_h™dÀr
(*
cookõ
);

163 
öå_ªsume
(
boﬁ
 
su•íd_ˇn˚Œed
);

164 
öå_su•íd
();

165 
öå_ª¥ogøm
();

166 
öå˙t_add
(c⁄° *
«me
, 
u_l⁄g
 **
cou¡p
);

167 
√xus_add_úq
(
u_l⁄g
 
úq
);

168 
msi_Æloc
(
devi˚_t
 
dev
, 
cou¡
, 
maxcou¡
, *
úqs
);

169 
msi_öô
();

170 
msi_m≠
(
úq
, 
uöt64_t
 *
addr
, 
uöt32_t
 *
d©a
);

171 
msi_ªÀa£
(*
úqs
, 
cou¡
);

172 
msix_Æloc
(
devi˚_t
 
dev
, *
úq
);

173 
msix_ªÀa£
(
úq
);

174 #ifde‡
XENHVM


175 
xí_öå_Æloc_úqs
();

	@src/nvidia-drm/x86/legacyvar.h

31 #i‚de‡
_X86_LEGACYVAR_H_


32 
	#_X86_LEGACYVAR_H_


	)

34 
	eÀgacy_devi˚_iv¨s
 {

35 
	mLEGACY_IVAR_PCIDOMAIN
,

36 
	mLEGACY_IVAR_PCIBUS
,

37 
	mLEGACY_IVAR_PCISLOT
,

38 
	mLEGACY_IVAR_PCIFUNC


41 
	#LEGACY_ACCESSOR
(
v¨
, 
iv¨
, 
ty≥
) \

42 
	`__BUS_ACCESSOR
(
Àgacy
, 
v¨
, 
LEGACY
, 
iv¨
, 
ty≥
)

	)

44 
	$LEGACY_ACCESSOR
(
pcidomaö
, 
PCIDOMAIN
, 
uöt32_t
)

45 
	$LEGACY_ACCESSOR
(
pcibus
, 
PCIBUS
, 
uöt32_t
)

46 
	$LEGACY_ACCESSOR
(
pci¶Ÿ
, 
PCISLOT
, )

47 
	$LEGACY_ACCESSOR
(
pcifunc
, 
PCIFUNC
, )

49 #unde‡
LEGACY_ACCESSOR


51 
	`Àgacy_pcib_max¶Ÿs
(
devi˚_t
 
dev
);

52 
uöt32_t
 
	`Àgacy_pcib_ªad_c⁄fig
(
devi˚_t
 
dev
, 
u_öt
 
bus
, u_öà
¶Ÿ
,

53 
u_öt
 
func
, u_öà
ªg
, 
byãs
);

54 
	`Àgacy_pcib_ªad_iv¨
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
which
,

55 
uöçå_t
 *
ªsu…
);

56 
	`Àgacy_pcib_wrôe_c⁄fig
(
devi˚_t
 
dev
, 
u_öt
 
bus
, u_öà
¶Ÿ
,

57 
u_öt
 
func
, u_öà
ªg
, 
uöt32_t
 
d©a
, 
byãs
);

58 
	`Àgacy_pcib_wrôe_iv¨
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
which
,

59 
uöçå_t
 
vÆue
);

60 
ªsour˚
 *
	`Àgacy_pcib_Æloc_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
,

61 
ty≥
, *
rid
, 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
,Ñm™_ªs_à
cou¡
,

62 
u_öt
 
Êags
);

63 
	`Àgacy_pcib_adju°_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

64 
ªsour˚
 *
r
, 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
);

65 
	`Àgacy_pcib_ªÀa£_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

66 
rid
, 
ªsour˚
 *
r
);

67 
	`Àgacy_pcib_Æloc_msi
(
devi˚_t
 
pcib
, devi˚_à
dev
, 
cou¡
,

68 
maxcou¡
, *
úqs
);

69 
	`Àgacy_pcib_Æloc_msix
(
devi˚_t
 
pcib
, devi˚_à
dev
, *
úq
);

70 
	`Àgacy_pcib_m≠_msi
(
devi˚_t
 
pcib
, devi˚_à
dev
, 
úq
,

71 
uöt64_t
 *
addr
, 
uöt32_t
 *
d©a
);

	@src/nvidia-drm/x86/mca.h

32 #i‚de‡
__X86_MCA_H__


33 
	#__X86_MCA_H__


	)

35 
	smˇ_ªc‹d
 {

36 
uöt64_t
 
	mmr_°©us
;

37 
uöt64_t
 
	mmr_addr
;

38 
uöt64_t
 
	mmr_misc
;

39 
uöt64_t
 
	mmr_tsc
;

40 
	mmr_≠ic_id
;

41 
	mmr_b™k
;

42 
uöt64_t
 
	mmr_mcg_ˇp
;

43 
uöt64_t
 
	mmr_mcg_°©us
;

44 
	mmr_˝u_id
;

45 
	mmr_˝u_víd‹_id
;

46 
	mmr_˝u
;

49 #ifde‡
_KERNEL


51 
cmc_öå
();

52 
mˇ_öô
();

53 
mˇ_öå
();

54 
mˇ_ªsume
();

	@src/nvidia-drm/x86/metadata.h

29 #i‚de‡
_MACHINE_METADATA_H_


30 
	#_MACHINE_METADATA_H_


	)

32 
	#MODINFOMD_SMAP
 0x1001

	)

33 
	#MODINFOMD_SMAP_XATTR
 0x1002

	)

34 
	#MODINFOMD_DTBP
 0x1003

	)

35 
	#MODINFOMD_EFI_MAP
 0x1004

	)

36 
	#MODINFOMD_EFI_FB
 0x1005

	)

37 
	#MODINFOMD_MODULEP
 0x1006

	)

39 
	sefi_m≠_hódî
 {

40 
uöt64_t
 
	mmem‹y_size
;

41 
uöt64_t
 
	mdes¸ùt‹_size
;

42 
uöt32_t
 
	mdes¸ùt‹_vîsi⁄
;

45 
	sefi_fb
 {

46 
uöt64_t
 
	mfb_addr
;

47 
uöt64_t
 
	mfb_size
;

48 
uöt32_t
 
	mfb_height
;

49 
uöt32_t
 
	mfb_width
;

50 
uöt32_t
 
	mfb_°ride
;

51 
uöt32_t
 
	mfb_mask_ªd
;

52 
uöt32_t
 
	mfb_mask_gªí
;

53 
uöt32_t
 
	mfb_mask_blue
;

54 
uöt32_t
 
	mfb_mask_ª£rved
;

	@src/nvidia-drm/x86/mptable.h

30 #i‚de‡
__MACHINE_MPTABLE_H__


31 
	#__MACHINE_MPTABLE_H__


	)

33 
	ebusTy≥s
 {

34 
	mNOBUS
 = 0,

35 
	mCBUS
 = 1,

36 
	mCBUSII
 = 2,

37 
	mEISA
 = 3,

38 
	mISA
 = 6,

39 
	mMCA
 = 9,

40 
	mPCI
 = 13,

41 
	mXPRESS
 = 18,

42 
	mMAX_BUSTYPE
 = 18,

43 
	mUNKNOWN_BUSTYPE
 = 0xff

47 
	sMPFPS
 {

48 
uöt8_t
 
	msig«tuª
[4];

49 
uöt32_t
 
	m∑p
;

50 
uöt8_t
 
	mÀngth
;

51 
uöt8_t
 
	m•ec_ªv
;

52 
uöt8_t
 
	mchecksum
;

53 
uöt8_t
 
	mc⁄fig_ty≥
;

54 
uöt8_t
 
	mmpfb2
;

55 
uöt8_t
 
	mmpfb3
;

56 
uöt8_t
 
	mmpfb4
;

57 
uöt8_t
 
	mmpfb5
;

58 } 
	t__∑cked
 *
	tmpÂs_t
;

60 
	#MPFB2_IMCR_PRESENT
 0x80

	)

61 
	#MPFB2_MUL_CLK_SRCS
 0x40

	)

64 
	sMPCTH
 {

65 
uöt8_t
 
	msig«tuª
[4];

66 
uöt16_t
 
	mba£_èbÀ_Àngth
;

67 
uöt8_t
 
	m•ec_ªv
;

68 
uöt8_t
 
	mchecksum
;

69 
uöt8_t
 
	m€m_id
[8];

70 
uöt8_t
 
	m¥odu˘_id
[12];

71 
uöt32_t
 
	m€m_èbÀ_poöãr
;

72 
uöt16_t
 
	m€m_èbÀ_size
;

73 
uöt16_t
 
	míåy_cou¡
;

74 
uöt32_t
 
	m≠ic_addªss
;

75 
uöt16_t
 
	mexãnded_èbÀ_Àngth
;

76 
uöt8_t
 
	mexãnded_èbÀ_checksum
;

77 
uöt8_t
 
	mª£rved
;

78 } 
	t__∑cked
 *
	tmp˘h_t
;

82 
	#MPCT_ENTRY_PROCESSOR
 0

	)

83 
	#MPCT_ENTRY_BUS
 1

	)

84 
	#MPCT_ENTRY_IOAPIC
 2

	)

85 
	#MPCT_ENTRY_INT
 3

	)

86 
	#MPCT_ENTRY_LOCAL_INT
 4

	)

88 
	sPROCENTRY
 {

89 
uöt8_t
 
	mty≥
;

90 
uöt8_t
 
	m≠ic_id
;

91 
uöt8_t
 
	m≠ic_vîsi⁄
;

92 
uöt8_t
 
	m˝u_Êags
;

93 
uöt32_t
 
	m˝u_sig«tuª
;

94 
uöt32_t
 
	m„©uª_Êags
;

95 
uöt32_t
 
	mª£rved1
;

96 
uöt32_t
 
	mª£rved2
;

97 } 
	t__∑cked
 *
	t¥oc_íåy_±r
;

99 
	#PROCENTRY_FLAG_EN
 0x01

	)

100 
	#PROCENTRY_FLAG_BP
 0x02

	)

102 
	sBUSENTRY
 {

103 
uöt8_t
 
	mty≥
;

104 
uöt8_t
 
	mbus_id
;

105 
uöt8_t
 
	mbus_ty≥
[6];

106 } 
	t__∑cked
 *
	tbus_íåy_±r
;

108 
	sIOAPICENTRY
 {

109 
uöt8_t
 
	mty≥
;

110 
uöt8_t
 
	m≠ic_id
;

111 
uöt8_t
 
	m≠ic_vîsi⁄
;

112 
uöt8_t
 
	m≠ic_Êags
;

113 
uöt32_t
 
	m≠ic_addªss
;

114 } 
	t__∑cked
 *
	tio_≠ic_íåy_±r
;

116 
	#IOAPICENTRY_FLAG_EN
 0x01

	)

118 
	sINTENTRY
 {

119 
uöt8_t
 
	mty≥
;

120 
uöt8_t
 
	möt_ty≥
;

121 
uöt16_t
 
	möt_Êags
;

122 
uöt8_t
 
	m§c_bus_id
;

123 
uöt8_t
 
	m§c_bus_úq
;

124 
uöt8_t
 
	md°_≠ic_id
;

125 
uöt8_t
 
	md°_≠ic_öt
;

126 } 
	t__∑cked
 *
	töt_íåy_±r
;

128 
	#INTENTRY_TYPE_INT
 0

	)

129 
	#INTENTRY_TYPE_NMI
 1

	)

130 
	#INTENTRY_TYPE_SMI
 2

	)

131 
	#INTENTRY_TYPE_EXTINT
 3

	)

133 
	#INTENTRY_FLAGS_POLARITY
 0x3

	)

134 
	#INTENTRY_FLAGS_POLARITY_CONFORM
 0x0

	)

135 
	#INTENTRY_FLAGS_POLARITY_ACTIVEHI
 0x1

	)

136 
	#INTENTRY_FLAGS_POLARITY_ACTIVELO
 0x3

	)

137 
	#INTENTRY_FLAGS_TRIGGER
 0xc

	)

138 
	#INTENTRY_FLAGS_TRIGGER_CONFORM
 0x0

	)

139 
	#INTENTRY_FLAGS_TRIGGER_EDGE
 0x4

	)

140 
	#INTENTRY_FLAGS_TRIGGER_LEVEL
 0xc

	)

144 
	sEXTENTRY
 {

145 
uöt8_t
 
	mty≥
;

146 
uöt8_t
 
	mÀngth
;

147 } 
	t__∑cked
 *
	text_íåy_±r
;

149 
	#MPCT_EXTENTRY_SAS
 0x80

	)

150 
	#MPCT_EXTENTRY_BHD
 0x81

	)

151 
	#MPCT_EXTENTRY_CBASM
 0x82

	)

153 
	sSASENTRY
 {

154 
uöt8_t
 
	mty≥
;

155 
uöt8_t
 
	mÀngth
;

156 
uöt8_t
 
	mbus_id
;

157 
uöt8_t
 
	maddªss_ty≥
;

158 
uöt64_t
 
	maddªss_ba£
;

159 
uöt64_t
 
	maddªss_Àngth
;

160 } 
	t__∑cked
 *
	tßs_íåy_±r
;

162 
	#SASENTRY_TYPE_IO
 0

	)

163 
	#SASENTRY_TYPE_MEMORY
 1

	)

164 
	#SASENTRY_TYPE_PREFETCH
 2

	)

166 
	sBHDENTRY
 {

167 
uöt8_t
 
	mty≥
;

168 
uöt8_t
 
	mÀngth
;

169 
uöt8_t
 
	mbus_id
;

170 
uöt8_t
 
	mbus_öfo
;

171 
uöt8_t
 
	m∑ª¡_bus
;

172 
uöt8_t
 
	mª£rved
[3];

173 } 
	t__∑cked
 *
	tbhd_íåy_±r
;

175 
	#BHDENTRY_INFO_SUBTRACTIVE_DECODE
 0x1

	)

177 
	sCBASMENTRY
 {

178 
uöt8_t
 
	mty≥
;

179 
uöt8_t
 
	mÀngth
;

180 
uöt8_t
 
	mbus_id
;

181 
uöt8_t
 
	maddªss_mod
;

182 
uöt32_t
 
	m¥edeföed_ønge
;

183 } 
	t__∑cked
 *
	tcbasm_íåy_±r
;

185 
	#CBASMENTRY_ADDRESS_MOD_ADD
 0x0

	)

186 
	#CBASMENTRY_ADDRESS_MOD_SUBTRACT
 0x1

	)

188 
	#CBASMENTRY_RANGE_ISA_IO
 0

	)

189 
	#CBASMENTRY_RANGE_VGA_IO
 1

	)

191 #ifde‡
_KERNEL


192 
	sm±abÀ_ho°b_so·c
 {

193 #ifde‡
NEW_PCIB


194 
pcib_ho°_ªsour˚s
 
	msc_ho°_ªs
;

195 
	msc_decodes_vga_io
;

196 
	msc_decodes_iß_io
;

200 #ifde‡
NEW_PCIB


201 
m±abÀ_pci_ho°_ªs_öô
(
devi˚_t
 
pcib
);

203 
m±abÀ_pci_¥obe_èbÀ
(
bus
);

204 
m±abÀ_pci_rouã_öãºu±
(
devi˚_t
 
pcib
, devi˚_à
dev
, 
pö
);

	@src/nvidia-drm/x86/ofw_machdep.h

31 #i‚de‡
_MACHINE_OFW_MACHDEP_H_


32 
	#_MACHINE_OFW_MACHDEP_H_


	)

34 
	~<machöe/bus.h
>

35 
	~<vm/vm.h
>

37 
uöt32_t
 
	t˚Œ_t
;

39 
	smem_ªgi⁄
 {

40 
vm_off£t_t
 
	mmr_°¨t
;

41 
vm_size_t
 
	mmr_size
;

	@src/nvidia-drm/x86/pci_cfgreg.h

32 #i‚de‡
__X86_PCI_CFGREG_H__


33 
	#__X86_PCI_CFGREG_H__


	)

35 
	#CONF1_ADDR_PORT
 0x0cf8

	)

36 
	#CONF1_DATA_PORT
 0x0cfc

	)

38 
	#CONF1_ENABLE
 0x80000000ul

	)

39 
	#CONF1_ENABLE_CHK
 0x80000000ul

	)

40 
	#CONF1_ENABLE_MSK
 0x7f000000ul

	)

41 
	#CONF1_ENABLE_CHK1
 0xff000001ul

	)

42 
	#CONF1_ENABLE_MSK1
 0x80000001ul

	)

43 
	#CONF1_ENABLE_RES1
 0x80000000ul

	)

45 
	#CONF2_ENABLE_PORT
 0x0cf8

	)

46 
	#CONF2_FORWARD_PORT
 0x0cÁ

	)

48 
	#CONF2_ENABLE_CHK
 0x0e

	)

49 
	#CONF2_ENABLE_RES
 0x0e

	)

51 
rm™_ªs_t
 
ho°b_Æloc_°¨t
(
ty≥
,Ñm™_ªs_à
°¨t
,Ñm™_ªs_à
íd
,Ñm™_ªs_à
cou¡
);

52 
pcõ_cfgªg›í
(
uöt64_t
 
ba£
, 
uöt8_t
 
möbus
, uöt8_à
maxbus
);

53 
pci_cfgªg›í
();

54 
u_öt32_t
 
pci_cfgªgªad
(
bus
, 
¶Ÿ
, 
func
, 
ªg
, 
byãs
);

55 
pci_cfgªgwrôe
(
bus
, 
¶Ÿ
, 
func
, 
ªg
, 
u_öt32_t
 
d©a
, 
byãs
);

56 #ifde‡
__HAVE_PIR


57 
pci_pú_›í
();

58 
pci_pú_¥obe
(
bus
, 
ªquúe_∑r£
);

59 
pci_pú_rouã_öãºu±
(
bus
, 
devi˚
, 
func
, 
pö
);

	@src/nvidia-drm/x86/psl.h

38 #i‚de‡
_MACHINE_PSL_H_


39 
	#_MACHINE_PSL_H_


	)

44 
	#PSL_C
 0x00000001

	)

45 
	#PSL_PF
 0x00000004

	)

46 
	#PSL_AF
 0x00000010

	)

47 
	#PSL_Z
 0x00000040

	)

48 
	#PSL_N
 0x00000080

	)

49 
	#PSL_T
 0x00000100

	)

50 
	#PSL_I
 0x00000200

	)

51 
	#PSL_D
 0x00000400

	)

52 
	#PSL_V
 0x00000800

	)

53 
	#PSL_IOPL
 0x00003000

	)

54 
	#PSL_NT
 0x00004000

	)

55 
	#PSL_RF
 0x00010000

	)

56 
	#PSL_VM
 0x00020000

	)

57 
	#PSL_AC
 0x00040000

	)

58 
	#PSL_VIF
 0x00080000

	)

59 
	#PSL_VIP
 0x00100000

	)

60 
	#PSL_ID
 0x00200000

	)

67 
	#PSL_RESERVED_DEFAULT
 0x00000002

	)

73 
	#PSL_KERNEL
 
PSL_RESERVED_DEFAULT


	)

74 
	#PSL_USER
 (
PSL_RESERVED_DEFAULT
 | 
PSL_I
)

	)

91 
	#PSL_USERCHANGE
 (
PSL_C
 | 
PSL_PF
 | 
PSL_AF
 | 
PSL_Z
 | 
PSL_N
 | 
PSL_T
 \

92 | 
PSL_D
 | 
PSL_V
 | 
PSL_NT
 | 
PSL_RF
 | 
PSL_AC
 | 
PSL_ID
)

	)

	@src/nvidia-drm/x86/ptrace.h

35 #i‚de‡
_MACHINE_PTRACE_H_


36 
	#_MACHINE_PTRACE_H_


	)

38 
	#__HAVE_PTRACE_MACHDEP


	)

45 #ifde‡
__i386__


46 
	#PT_GETXMMREGS
 (
PT_FIRSTMACH
 + 0)

	)

47 
	#PT_SETXMMREGS
 (
PT_FIRSTMACH
 + 1)

	)

49 #ifde‡
_KERNEL


50 
	#PT_GETXSTATE_OLD
 (
PT_FIRSTMACH
 + 2)

	)

51 
	#PT_SETXSTATE_OLD
 (
PT_FIRSTMACH
 + 3)

	)

53 
	#PT_GETXSTATE_INFO
 (
PT_FIRSTMACH
 + 4)

	)

54 
	#PT_GETXSTATE
 (
PT_FIRSTMACH
 + 5)

	)

55 
	#PT_SETXSTATE
 (
PT_FIRSTMACH
 + 6)

	)

56 
	#PT_GETFSBASE
 (
PT_FIRSTMACH
 + 7)

	)

57 
	#PT_SETFSBASE
 (
PT_FIRSTMACH
 + 8)

	)

58 
	#PT_GETGSBASE
 (
PT_FIRSTMACH
 + 9)

	)

59 
	#PT_SETGSBASE
 (
PT_FIRSTMACH
 + 10)

	)

62 
	s±ø˚_x°©e_öfo
 {

63 
uöt64_t
 
	mxßve_mask
;

64 
uöt32_t
 
	mxßve_Àn
;

	@src/nvidia-drm/x86/pvclock.h

29 #i‚de‡
X86_PVCLOCK


30 
	#X86_PVCLOCK


	)

32 
	spv˛ock_v˝u_time_öfo
 {

33 
uöt32_t
 
	mvîsi⁄
;

34 
uöt32_t
 
	m∑d0
;

35 
uöt64_t
 
	mtsc_time°amp
;

36 
uöt64_t
 
	msy°em_time
;

37 
uöt32_t
 
	mtsc_to_sy°em_mul
;

38 
öt8_t
 
	mtsc_shi·
;

39 
uöt8_t
 
	mÊags
;

40 
uöt8_t
 
	m∑d
[2];

43 
	#PVCLOCK_FLAG_TSC_STABLE
 0x01

	)

44 
	#PVCLOCK_FLAG_GUEST_PASUED
 0x02

	)

46 
	spv˛ock_wÆl_˛ock
 {

47 
uöt32_t
 
	mvîsi⁄
;

48 
uöt32_t
 
	m£c
;

49 
uöt32_t
 
	mn£c
;

52 
pv˛ock_ªsume
();

53 
uöt64_t
 
pv˛ock_gë_œ°_cy˛es
();

54 
uöt64_t
 
pv˛ock_tsc_‰eq
(
pv˛ock_v˝u_time_öfo
 *
ti
);

55 
uöt64_t
 
pv˛ock_gë_timecou¡
(
pv˛ock_v˝u_time_öfo
 *
ti
);

56 
pv˛ock_gë_wÆl˛ock
(
pv˛ock_wÆl_˛ock
 *
wc
,

57 
time•ec
 *
ts
);

	@src/nvidia-drm/x86/reg.h

39 #i‚de‡
_MACHINE_REG_H_


40 
	#_MACHINE_REG_H_


	)

42 
	~<machöe/_ty≥s.h
>

44 #ifde‡
__i386__


56 
	#tFS
 (0)

	)

57 
	#tES
 (1)

	)

58 
	#tDS
 (2)

	)

59 
	#tEDI
 (3)

	)

60 
	#tESI
 (4)

	)

61 
	#tEBP
 (5)

	)

62 
	#tISP
 (6)

	)

63 
	#tEBX
 (7)

	)

64 
	#tEDX
 (8)

	)

65 
	#tECX
 (9)

	)

66 
	#tEAX
 (10)

	)

67 
	#tERR
 (12)

	)

68 
	#tEIP
 (13)

	)

69 
	#tCS
 (14)

	)

70 
	#tEFLAGS
 (15)

	)

71 
	#tESP
 (16)

	)

72 
	#tSS
 (17)

	)

81 
	#tGS
 (18)

	)

85 #ifdef 
__i386__


86 
	#__ªg32
 
ªg


	)

87 
	#__Âªg32
 
Âªg


	)

88 
	#__dbªg32
 
dbªg


	)

90 
	#__ªg32
 
ªg32


	)

91 
	#__ªg64
 
ªg


	)

92 
	#__Âªg32
 
Âªg32


	)

93 
	#__Âªg64
 
Âªg


	)

94 
	#__dbªg32
 
dbªg32


	)

95 
	#__dbªg64
 
dbªg


	)

96 
	#__HAVE_REG32


	)

102 
	s__ªg32
 {

103 
__uöt32_t
 
	mr_fs
;

104 
__uöt32_t
 
	mr_es
;

105 
__uöt32_t
 
	mr_ds
;

106 
__uöt32_t
 
	mr_edi
;

107 
__uöt32_t
 
	mr_esi
;

108 
__uöt32_t
 
	mr_ebp
;

109 
__uöt32_t
 
	mr_i•
;

110 
__uöt32_t
 
	mr_ebx
;

111 
__uöt32_t
 
	mr_edx
;

112 
__uöt32_t
 
	mr_ecx
;

113 
__uöt32_t
 
	mr_óx
;

114 
__uöt32_t
 
	mr_å≠no
;

115 
__uöt32_t
 
	mr_îr
;

116 
__uöt32_t
 
	mr_eù
;

117 
__uöt32_t
 
	mr_cs
;

118 
__uöt32_t
 
	mr_eÊags
;

119 
__uöt32_t
 
	mr_e•
;

120 
__uöt32_t
 
	mr_ss
;

121 
__uöt32_t
 
	mr_gs
;

124 
	s__ªg64
 {

125 
__öt64_t
 
	mr_r15
;

126 
__öt64_t
 
	mr_r14
;

127 
__öt64_t
 
	mr_r13
;

128 
__öt64_t
 
	mr_r12
;

129 
__öt64_t
 
	mr_r11
;

130 
__öt64_t
 
	mr_r10
;

131 
__öt64_t
 
	mr_r9
;

132 
__öt64_t
 
	mr_r8
;

133 
__öt64_t
 
	mr_rdi
;

134 
__öt64_t
 
	mr_rsi
;

135 
__öt64_t
 
	mr_rbp
;

136 
__öt64_t
 
	mr_rbx
;

137 
__öt64_t
 
	mr_rdx
;

138 
__öt64_t
 
	mr_rcx
;

139 
__öt64_t
 
	mr_øx
;

140 
__uöt32_t
 
	mr_å≠no
;

141 
__uöt16_t
 
	mr_fs
;

142 
__uöt16_t
 
	mr_gs
;

143 
__uöt32_t
 
	mr_îr
;

144 
__uöt16_t
 
	mr_es
;

145 
__uöt16_t
 
	mr_ds
;

146 
__öt64_t
 
	mr_rù
;

147 
__öt64_t
 
	mr_cs
;

148 
__öt64_t
 
	mr_rÊags
;

149 
__öt64_t
 
	mr_r•
;

150 
__öt64_t
 
	mr_ss
;

160 
	s__Âªg32
 {

161 
__uöt32_t
 
	mÂr_ív
[7];

162 
__uöt8_t
 
	mÂr_acc
[8][10];

163 
__uöt32_t
 
	mÂr_ex_sw
;

164 
__uöt8_t
 
	mÂr_∑d
[64];

167 
	s__Âªg64
 {

168 
__uöt64_t
 
	mÂr_ív
[4];

169 
__uöt8_t
 
	mÂr_acc
[8][16];

170 
__uöt8_t
 
	mÂr_xacc
[16][16];

171 
__uöt64_t
 
	mÂr_•¨e
[12];

177 
	sxmmªg
 {

183 
__uöt32_t
 
	mxmm_ív
[8];

184 
__uöt8_t
 
	mxmm_acc
[8][16];

185 
__uöt8_t
 
	mxmm_ªg
[8][16];

186 
__uöt8_t
 
	mxmm_∑d
[224];

192 
	s__dbªg32
 {

193 
__uöt32_t
 
	mdr
[8];

200 
	s__dbªg64
 {

201 
__uöt64_t
 
	mdr
[16];

209 
	#DBREG_DR6_RESERVED1
 0xffff0ff0

	)

210 
	#DBREG_DR6_BMASK
 0x000f

	)

211 
	#DBREG_DR6_B
(
i
Ë(1 << (i))

	)

212 
	#DBREG_DR6_BD
 0x2000

	)

213 
	#DBREG_DR6_BS
 0x4000

	)

214 
	#DBREG_DR6_BT
 0x8000

	)

216 
	#DBREG_DR7_RESERVED1
 0x0400

	)

217 
	#DBREG_DR7_LOCAL_ENABLE
 0x01

	)

218 
	#DBREG_DR7_GLOBAL_ENABLE
 0x02

	)

219 
	#DBREG_DR7_LEN_1
 0x00

	)

220 
	#DBREG_DR7_LEN_2
 0x01

	)

221 
	#DBREG_DR7_LEN_4
 0x03

	)

222 
	#DBREG_DR7_LEN_8
 0x02

	)

223 
	#DBREG_DR7_EXEC
 0x00

	)

224 
	#DBREG_DR7_WRONLY
 0x01

	)

225 
	#DBREG_DR7_RDWR
 0x03

	)

226 
	#DBREG_DR7_MASK
(
i
) \

227 ((
__u_ªgi°î_t
)(0xfË<< ((
i
Ë* 4 + 16Ë| 0x3 << (iË* 2)

	)

228 
	#DBREG_DR7_SET
(
i
, 
Àn
, 
ac˚ss
, 
íabÀ
) \

229 ((
__u_ªgi°î_t
)((
Àn
Ë<< 2 | (
ac˚ss
)Ë<< ((
i
) * 4 + 16) | \

230 (
íabÀ
Ë<< (
i
Ë* 2)

	)

231 
	#DBREG_DR7_GD
 0x2000

	)

232 
	#DBREG_DR7_ENABLED
(
d
, 
i
Ë(((dË& 0x3 << (iË* 2Ë!0)

	)

233 
	#DBREG_DR7_ACCESS
(
d
, 
i
Ë((dË>> ((iË* 4 + 16Ë& 0x3)

	)

234 
	#DBREG_DR7_LEN
(
d
, 
i
Ë((dË>> ((iË* 4 + 18Ë& 0x3)

	)

236 
	#DBREG_DRX
(
d
,
x
Ë((d)->
dr
[(x)]Ë

	)

239 #unde‡
__ªg32


240 #unde‡
__ªg64


241 #unde‡
__Âªg32


242 #unde‡
__Âªg64


243 #unde‡
__dbªg32


244 #unde‡
__dbªg64


246 #ifde‡
_KERNEL


247 
	gthªad
;

252 
fûl_ªgs
(
thªad
 *, 
ªg
 *);

253 
fûl_‰ame_ªgs
(
å≠‰ame
 *, 
ªg
 *);

254 
£t_ªgs
(
thªad
 *, 
ªg
 *);

255 
fûl_Âªgs
(
thªad
 *, 
Âªg
 *);

256 
£t_Âªgs
(
thªad
 *, 
Âªg
 *);

257 
fûl_dbªgs
(
thªad
 *, 
dbªg
 *);

258 
£t_dbªgs
(
thªad
 *, 
dbªg
 *);

259 #ifde‡
COMPAT_FREEBSD32


260 
fûl_ªgs32
(
thªad
 *, 
ªg32
 *);

261 
£t_ªgs32
(
thªad
 *, 
ªg32
 *);

262 
fûl_Âªgs32
(
thªad
 *, 
Âªg32
 *);

263 
£t_Âªgs32
(
thªad
 *, 
Âªg32
 *);

264 
fûl_dbªgs32
(
thªad
 *, 
dbªg32
 *);

265 
£t_dbªgs32
(
thªad
 *, 
dbªg32
 *);

	@src/nvidia-drm/x86/segments.h

39 #i‚de‡
_X86_SEGMENTS_H_


40 
	#_X86_SEGMENTS_H_


	)

49 
	#SEL_RPL_MASK
 3

	)

50 
	#ISPL
(
s
Ë((s)&3Ë

	)

51 
	#SEL_KPL
 0

	)

52 
	#SEL_UPL
 3

	)

53 
	#ISLDT
(
s
Ë((s)&
SEL_LDT
Ë

	)

54 
	#SEL_LDT
 4

	)

55 
	#IDXSEL
(
s
Ë(((s)>>3Ë& 0x1fffË

	)

56 
	#LSEL
(
s
,
r
Ë(((s)<<3Ë| 
SEL_LDT
 |ÑË

	)

57 
	#GSEL
(
s
,
r
Ë(((s)<<3Ë|ÑË

	)

64 
	s£gmít_des¸ùt‹
 {

65 
	msd_lﬁimô
:16;

66 
	msd_loba£
:24;

67 
	msd_ty≥
:5;

68 
	msd_d∂
:2;

69 
	msd_p
:1;

70 
	msd_hûimô
:4;

71 
	msd_xx
:2;

72 
	msd_def32
:1;

73 
	msd_gøn
:1;

74 
	msd_hiba£
:8;

75 } 
	g__∑cked
;

77 
	su£r_£gmít_des¸ùt‹
 {

78 
	msd_lﬁimô
:16;

79 
	msd_loba£
:24;

80 
	msd_ty≥
:5;

81 
	msd_d∂
:2;

82 
	msd_p
:1;

83 
	msd_hûimô
:4;

84 
	msd_xx
:1;

85 
	msd_l⁄g
:1;

86 
	msd_def32
:1;

87 
	msd_gøn
:1;

88 
	msd_hiba£
:8;

89 } 
	g__∑cked
;

91 
	#USD_GETBASE
(
sd
Ë(((sd)->
sd_loba£
Ë| (sd)->
sd_hiba£
 << 24)

	)

92 
	#USD_SETBASE
(
sd
, 
b
Ë(sd)->
sd_loba£
 = (b); \

93 (
sd
)->
sd_hiba£
 = ((
b
Ë>> 24);

	)

94 
	#USD_GETLIMIT
(
sd
Ë(((sd)->
sd_lﬁimô
Ë| (sd)->
sd_hûimô
 << 16)

	)

95 
	#USD_SETLIMIT
(
sd
, 
l
Ë(sd)->
sd_lﬁimô
 = (l); \

96 (
sd
)->
sd_hûimô
 = ((
l
Ë>> 16);

	)

98 #ifde‡
__i386__


102 
	sg©e_des¸ùt‹
 {

103 
	mgd_looff£t
:16;

104 
	mgd_£À˘‹
:16;

105 
	mgd_°k˝y
:5;

106 
	mgd_xx
:3;

107 
	mgd_ty≥
:5;

108 
	mgd_d∂
:2;

109 
	mgd_p
:1;

110 
	mgd_hioff£t
:16;

111 } 
	g__∑cked
;

116 
	udes¸ùt‹
 {

117 
£gmít_des¸ùt‹
 
	msd
;

118 
g©e_des¸ùt‹
 
	mgd
;

125 
	sg©e_des¸ùt‹
 {

126 
uöt64_t
 
	mgd_looff£t
:16;

127 
uöt64_t
 
	mgd_£À˘‹
:16;

128 
uöt64_t
 
	mgd_i°
:3;

129 
uöt64_t
 
	mgd_xx
:5;

130 
uöt64_t
 
	mgd_ty≥
:5;

131 
uöt64_t
 
	mgd_d∂
:2;

132 
uöt64_t
 
	mgd_p
:1;

133 
uöt64_t
 
	mgd_hioff£t
:48;

134 
uöt64_t
 
	msd_xx1
:32;

135 } 
	g__∑cked
;

140 
	udes¸ùt‹
 {

141 
u£r_£gmít_des¸ùt‹
 
	msd
;

142 
g©e_des¸ùt‹
 
	mgd
;

147 
	#SDT_SYSNULL
 0

	)

148 
	#SDT_SYS286TSS
 1

	)

149 
	#SDT_SYSLDT
 2

	)

150 
	#SDT_SYS286BSY
 3

	)

151 
	#SDT_SYS286CGT
 4

	)

152 
	#SDT_SYSTASKGT
 5

	)

153 
	#SDT_SYS286IGT
 6

	)

154 
	#SDT_SYS286TGT
 7

	)

155 
	#SDT_SYSNULL2
 8

	)

156 
	#SDT_SYS386TSS
 9

	)

157 
	#SDT_SYSTSS
 9

	)

158 
	#SDT_SYSNULL3
 10

	)

159 
	#SDT_SYS386BSY
 11

	)

160 
	#SDT_SYSBSY
 11

	)

161 
	#SDT_SYS386CGT
 12

	)

162 
	#SDT_SYSCGT
 12

	)

163 
	#SDT_SYSNULL4
 13

	)

164 
	#SDT_SYS386IGT
 14

	)

165 
	#SDT_SYSIGT
 14

	)

166 
	#SDT_SYS386TGT
 15

	)

167 
	#SDT_SYSTGT
 15

	)

170 
	#SDT_MEMRO
 16

	)

171 
	#SDT_MEMROA
 17

	)

172 
	#SDT_MEMRW
 18

	)

173 
	#SDT_MEMRWA
 19

	)

174 
	#SDT_MEMROD
 20

	)

175 
	#SDT_MEMRODA
 21

	)

176 
	#SDT_MEMRWD
 22

	)

177 
	#SDT_MEMRWDA
 23

	)

178 
	#SDT_MEME
 24

	)

179 
	#SDT_MEMEA
 25

	)

180 
	#SDT_MEMER
 26

	)

181 
	#SDT_MEMERA
 27

	)

182 
	#SDT_MEMEC
 28

	)

183 
	#SDT_MEMEAC
 29

	)

184 
	#SDT_MEMERC
 30

	)

185 
	#SDT_MEMERAC
 31

	)

190 
	#NIDT
 256

	)

191 
	#NRSVIDT
 32

	)

196 
	#IDT_DE
 0

	)

197 
	#IDT_DB
 1

	)

198 
	#IDT_NMI
 2

	)

199 
	#IDT_BP
 3

	)

200 
	#IDT_OF
 4

	)

201 
	#IDT_BR
 5

	)

202 
	#IDT_UD
 6

	)

203 
	#IDT_NM
 7

	)

204 
	#IDT_DF
 8

	)

205 
	#IDT_FPUGP
 9

	)

206 
	#IDT_TS
 10

	)

207 
	#IDT_NP
 11

	)

208 
	#IDT_SS
 12

	)

209 
	#IDT_GP
 13

	)

210 
	#IDT_PF
 14

	)

211 
	#IDT_MF
 16

	)

212 
	#IDT_AC
 17

	)

213 
	#IDT_MC
 18

	)

214 
	#IDT_XF
 19

	)

215 
	#IDT_IO_INTS
 
NRSVIDT


	)

216 
	#IDT_SYSCALL
 0x80

	)

217 
	#IDT_DTRACE_RET
 0x92

	)

218 
	#IDT_EVTCHN
 0x93

	)

220 #i‡
deföed
(
__i386__
)

226 
	#GNULL_SEL
 0

	)

227 
	#GPRIV_SEL
 1

	)

228 
	#GUFS_SEL
 2

	)

229 
	#GUGS_SEL
 3

	)

230 
	#GCODE_SEL
 4

	)

231 
	#GDATA_SEL
 5

	)

232 
	#GUCODE_SEL
 6

	)

233 
	#GUDATA_SEL
 7

	)

234 
	#GBIOSLOWMEM_SEL
 8

	)

235 
	#GPROC0_SEL
 9

	)

236 
	#GLDT_SEL
 10

	)

237 
	#GUSERLDT_SEL
 11

	)

238 
	#GPANIC_SEL
 12

	)

239 
	#GBIOSCODE32_SEL
 13

	)

240 
	#GBIOSCODE16_SEL
 14

	)

241 
	#GBIOSDATA_SEL
 15

	)

242 
	#GBIOSUTIL_SEL
 16

	)

243 
	#GBIOSARGS_SEL
 17

	)

244 
	#GNDIS_SEL
 18

	)

245 
	#NGDT
 19

	)

250 
	#LSYS5CALLS_SEL
 0

	)

251 
	#LSYS5SIGR_SEL
 1

	)

252 
	#LUCODE_SEL
 3

	)

253 
	#LUDATA_SEL
 5

	)

254 
	#NLDT
 (
LUDATA_SEL
 + 1)

	)

260 
	#GNULL_SEL
 0

	)

261 
	#GNULL2_SEL
 1

	)

262 
	#GUFS32_SEL
 2

	)

263 
	#GUGS32_SEL
 3

	)

264 
	#GCODE_SEL
 4

	)

265 
	#GDATA_SEL
 5

	)

266 
	#GUCODE32_SEL
 6

	)

267 
	#GUDATA_SEL
 7

	)

268 
	#GUCODE_SEL
 8

	)

269 
	#GPROC0_SEL
 9

	)

271 
	#GUSERLDT_SEL
 11

	)

273 
	#NGDT
 13

	)

	@src/nvidia-drm/x86/setjmp.h

34 #i‚de‡
_MACHINE_SETJMP_H_


35 
	#_MACHINE_SETJMP_H_


	)

37 
	~<sys/cdefs.h
>

39 
	#_JBLEN
 12

	)

46 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


47 
	s_sigjmp_buf
 { 
	m_sjb
[
_JBLEN
]; } 
	tsigjmp_buf
[1];

50 
	s_jmp_buf
 { 
	m_jb
[
_JBLEN
]; } 
	tjmp_buf
[1];

	@src/nvidia-drm/x86/sigframe.h

33 #i‚de‡
_X86_SIGFRAME_H_


34 
	#_X86_SIGFRAME_H_


	)

40 #ifde‡
__i386__


41 
	ssig‰ame
 {

49 
ªgi°î_t
 
	msf_signum
;

50 
ªgi°î_t
 
	msf_sigöfo
;

51 
ªgi°î_t
 
	msf_uc⁄ãxt
;

52 
ªgi°î_t
 
	msf_addr
;

55 
__sigöfoh™dÀr_t
 *
	msf_a˘i⁄
;

56 
__sigh™dÀr_t
 *
	msf_h™dÀr
;

57 } 
	msf_ahu
;

58 
uc⁄ãxt_t
 
	msf_uc
;

59 
sigöfo_t
 
	msf_si
;

63 #ifde‡
__amd64__


64 
	ssig‰ame
 {

66 
__sigöfoh™dÀr_t
 *
	msf_a˘i⁄
;

67 
__sigh™dÀr_t
 *
	msf_h™dÀr
;

68 } 
	msf_ahu
;

69 
uc⁄ãxt_t
 
	msf_uc
;

70 
sigöfo_t
 
	msf_si
;

	@src/nvidia-drm/x86/signal.h

36 #i‚de‡
_X86_SIGNAL_H


37 
	#_X86_SIGNAL_H
 1

	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_sig£t.h
>

46 #ifde‡
__i386__


47 
	tsig_©omic_t
;

49 #i‡
__BSD_VISIBLE


50 
	ssigc⁄ãxt
 {

51 
__sig£t
 
	msc_mask
;

52 
	msc_⁄°ack
;

53 
	msc_gs
;

54 
	msc_fs
;

55 
	msc_es
;

56 
	msc_ds
;

57 
	msc_edi
;

58 
	msc_esi
;

59 
	msc_ebp
;

60 
	msc_i•
;

61 
	msc_ebx
;

62 
	msc_edx
;

63 
	msc_ecx
;

64 
	msc_óx
;

65 
	msc_å≠no
;

66 
	msc_îr
;

67 
	msc_eù
;

68 
	msc_cs
;

69 
	msc_eÊ
;

70 
	msc_e•
;

71 
	msc_ss
;

72 
	msc_Àn
;

77 
	msc_Âf‹m©
;

78 
	msc_ow√dÂ
;

79 
	msc_Êags
;

80 
	msc_Â°©e
[128] 
__Æig√d
(16);

82 
	msc_fsba£
;

83 
	msc_gsba£
;

85 
	msc_xÂu°©e
;

86 
	msc_xÂu°©e_Àn
;

88 
	msc_•¨e2
[4];

91 
	#sc_•
 
sc_e•


	)

92 
	#sc_Â
 
sc_ebp


	)

93 
	#sc_pc
 
sc_eù


	)

94 
	#sc_ps
 
sc_eÊ


	)

95 
	#sc_eÊags
 
sc_eÊ


	)

100 #ifde‡
__amd64__


101 
	tsig_©omic_t
;

103 #i‡
__BSD_VISIBLE


114 
	ssigc⁄ãxt
 {

115 
__sig£t
 
	msc_mask
;

116 
	msc_⁄°ack
;

117 
	msc_rdi
;

118 
	msc_rsi
;

119 
	msc_rdx
;

120 
	msc_rcx
;

121 
	msc_r8
;

122 
	msc_r9
;

123 
	msc_øx
;

124 
	msc_rbx
;

125 
	msc_rbp
;

126 
	msc_r10
;

127 
	msc_r11
;

128 
	msc_r12
;

129 
	msc_r13
;

130 
	msc_r14
;

131 
	msc_r15
;

132 
	msc_å≠no
;

133 
	msc_fs
;

134 
	msc_gs
;

135 
	msc_addr
;

136 
	msc_Êags
;

137 
	msc_es
;

138 
	msc_ds
;

139 
	msc_îr
;

140 
	msc_rù
;

141 
	msc_cs
;

142 
	msc_rÊags
;

143 
	msc_r•
;

144 
	msc_ss
;

145 
	msc_Àn
;

150 
	msc_Âf‹m©
;

151 
	msc_ow√dÂ
;

152 
	msc_Â°©e
[64] 
__Æig√d
(16);

154 
	msc_fsba£
;

155 
	msc_gsba£
;

157 
	msc_xÂu°©e
;

158 
	msc_xÂu°©e_Àn
;

160 
	msc_•¨e
[4];

	@src/nvidia-drm/x86/specialreg.h

35 #i‚de‡
_MACHINE_SPECIALREG_H_


36 
	#_MACHINE_SPECIALREG_H_


	)

41 
	#CR0_PE
 0x00000001

	)

42 
	#CR0_MP
 0x00000002

	)

43 
	#CR0_EM
 0x00000004

	)

44 
	#CR0_TS
 0x00000008

	)

45 
	#CR0_PG
 0x80000000

	)

50 
	#CR0_NE
 0x00000020

	)

51 
	#CR0_WP
 0x00010000

	)

53 
	#CR0_AM
 0x00040000

	)

54 
	#CR0_NW
 0x20000000

	)

55 
	#CR0_CD
 0x40000000

	)

57 
	#CR3_PCID_SAVE
 0x8000000000000000

	)

58 
	#CR3_PCID_MASK
 0xfff

	)

63 
	#CR4_VME
 0x00000001

	)

64 
	#CR4_PVI
 0x00000002

	)

65 
	#CR4_TSD
 0x00000004

	)

66 
	#CR4_DE
 0x00000008

	)

67 
	#CR4_PSE
 0x00000010

	)

68 
	#CR4_PAE
 0x00000020

	)

69 
	#CR4_MCE
 0x00000040

	)

70 
	#CR4_PGE
 0x00000080

	)

71 
	#CR4_PCE
 0x00000100

	)

72 
	#CR4_FXSR
 0x00000200

	)

73 
	#CR4_XMM
 0x00000400

	)

74 
	#CR4_VMXE
 0x00002000

	)

75 
	#CR4_FSGSBASE
 0x00010000

	)

76 
	#CR4_PCIDE
 0x00020000

	)

77 
	#CR4_XSAVE
 0x00040000

	)

78 
	#CR4_SMEP
 0x00100000

	)

79 
	#CR4_SMAP
 0x00200000

	)

84 
	#EFER_SCE
 0x000000001

	)

85 
	#EFER_LME
 0x000000100

	)

86 
	#EFER_LMA
 0x000000400

	)

87 
	#EFER_NXE
 0x000000800

	)

88 
	#EFER_SVM
 0x000001000

	)

89 
	#EFER_LMSLE
 0x000002000

	)

90 
	#EFER_FFXSR
 0x000004000

	)

91 
	#EFER_TCE
 0x000008000

	)

96 
	#XCR0
 0

	)

98 
	#XFEATURE_ENABLED_X87
 0x00000001

	)

99 
	#XFEATURE_ENABLED_SSE
 0x00000002

	)

100 
	#XFEATURE_ENABLED_YMM_HI128
 0x00000004

	)

101 
	#XFEATURE_ENABLED_AVX
 
XFEATURE_ENABLED_YMM_HI128


	)

102 
	#XFEATURE_ENABLED_BNDREGS
 0x00000008

	)

103 
	#XFEATURE_ENABLED_BNDCSR
 0x00000010

	)

104 
	#XFEATURE_ENABLED_OPMASK
 0x00000020

	)

105 
	#XFEATURE_ENABLED_ZMM_HI256
 0x00000040

	)

106 
	#XFEATURE_ENABLED_HI16_ZMM
 0x00000080

	)

108 
	#XFEATURE_AVX
 \

109 (
XFEATURE_ENABLED_X87
 | 
XFEATURE_ENABLED_SSE
 | 
XFEATURE_ENABLED_AVX
)

	)

110 
	#XFEATURE_AVX512
 \

111 (
XFEATURE_ENABLED_OPMASK
 | 
XFEATURE_ENABLED_ZMM_HI256
 | \

112 
XFEATURE_ENABLED_HI16_ZMM
)

	)

113 
	#XFEATURE_MPX
 \

114 (
XFEATURE_ENABLED_BNDREGS
 | 
XFEATURE_ENABLED_BNDCSR
)

	)

119 
	#CPUID_FPU
 0x00000001

	)

120 
	#CPUID_VME
 0x00000002

	)

121 
	#CPUID_DE
 0x00000004

	)

122 
	#CPUID_PSE
 0x00000008

	)

123 
	#CPUID_TSC
 0x00000010

	)

124 
	#CPUID_MSR
 0x00000020

	)

125 
	#CPUID_PAE
 0x00000040

	)

126 
	#CPUID_MCE
 0x00000080

	)

127 
	#CPUID_CX8
 0x00000100

	)

128 
	#CPUID_APIC
 0x00000200

	)

129 
	#CPUID_B10
 0x00000400

	)

130 
	#CPUID_SEP
 0x00000800

	)

131 
	#CPUID_MTRR
 0x00001000

	)

132 
	#CPUID_PGE
 0x00002000

	)

133 
	#CPUID_MCA
 0x00004000

	)

134 
	#CPUID_CMOV
 0x00008000

	)

135 
	#CPUID_PAT
 0x00010000

	)

136 
	#CPUID_PSE36
 0x00020000

	)

137 
	#CPUID_PSN
 0x00040000

	)

138 
	#CPUID_CLFSH
 0x00080000

	)

139 
	#CPUID_B20
 0x00100000

	)

140 
	#CPUID_DS
 0x00200000

	)

141 
	#CPUID_ACPI
 0x00400000

	)

142 
	#CPUID_MMX
 0x00800000

	)

143 
	#CPUID_FXSR
 0x01000000

	)

144 
	#CPUID_SSE
 0x02000000

	)

145 
	#CPUID_XMM
 0x02000000

	)

146 
	#CPUID_SSE2
 0x04000000

	)

147 
	#CPUID_SS
 0x08000000

	)

148 
	#CPUID_HTT
 0x10000000

	)

149 
	#CPUID_TM
 0x20000000

	)

150 
	#CPUID_IA64
 0x40000000

	)

151 
	#CPUID_PBE
 0x80000000

	)

153 
	#CPUID2_SSE3
 0x00000001

	)

154 
	#CPUID2_PCLMULQDQ
 0x00000002

	)

155 
	#CPUID2_DTES64
 0x00000004

	)

156 
	#CPUID2_MON
 0x00000008

	)

157 
	#CPUID2_DS_CPL
 0x00000010

	)

158 
	#CPUID2_VMX
 0x00000020

	)

159 
	#CPUID2_SMX
 0x00000040

	)

160 
	#CPUID2_EST
 0x00000080

	)

161 
	#CPUID2_TM2
 0x00000100

	)

162 
	#CPUID2_SSSE3
 0x00000200

	)

163 
	#CPUID2_CNXTID
 0x00000400

	)

164 
	#CPUID2_SDBG
 0x00000800

	)

165 
	#CPUID2_FMA
 0x00001000

	)

166 
	#CPUID2_CX16
 0x00002000

	)

167 
	#CPUID2_XTPR
 0x00004000

	)

168 
	#CPUID2_PDCM
 0x00008000

	)

169 
	#CPUID2_PCID
 0x00020000

	)

170 
	#CPUID2_DCA
 0x00040000

	)

171 
	#CPUID2_SSE41
 0x00080000

	)

172 
	#CPUID2_SSE42
 0x00100000

	)

173 
	#CPUID2_X2APIC
 0x00200000

	)

174 
	#CPUID2_MOVBE
 0x00400000

	)

175 
	#CPUID2_POPCNT
 0x00800000

	)

176 
	#CPUID2_TSCDLT
 0x01000000

	)

177 
	#CPUID2_AESNI
 0x02000000

	)

178 
	#CPUID2_XSAVE
 0x04000000

	)

179 
	#CPUID2_OSXSAVE
 0x08000000

	)

180 
	#CPUID2_AVX
 0x10000000

	)

181 
	#CPUID2_F16C
 0x20000000

	)

182 
	#CPUID2_RDRAND
 0x40000000

	)

183 
	#CPUID2_HV
 0x80000000

	)

189 
	#CPUTPM1_SENSOR
 0x00000001

	)

190 
	#CPUTPM1_TURBO
 0x00000002

	)

191 
	#CPUTPM1_ARAT
 0x00000004

	)

192 
	#CPUTPM2_EFFREQ
 0x00000001

	)

197 
	#CPUPT_CR3
 (1 << 0Ë

	)

198 
	#CPUPT_PSB
 (1 << 1Ë

	)

199 
	#CPUPT_IPF
 (1 << 2Ë

	)

200 
	#CPUPT_MTC
 (1 << 3Ë

	)

201 
	#CPUPT_PRW
 (1 << 4Ë

	)

202 
	#CPUPT_PWR
 (1 << 5Ë

	)

205 
	#CPUPT_TOPA
 (1 << 0Ë

	)

206 
	#CPUPT_TOPA_MULTI
 (1 << 1Ë

	)

207 
	#CPUPT_SINGLE
 (1 << 2Ë

	)

208 
	#CPUPT_TT_OUT
 (1 << 3Ë

	)

209 
	#CPUPT_LINEAR_IP
 (1 << 31Ë

	)

212 
	#CPUPT_NADDR_S
 0

	)

213 
	#CPUPT_NADDR_M
 (0x7 << 
CPUPT_NADDR_S
)

	)

214 
	#CPUPT_MTC_BITMAP_S
 16

	)

215 
	#CPUPT_MTC_BITMAP_M
 (0xfff‡<< 
CPUPT_MTC_BITMAP_S
)

	)

218 
	#CPUPT_CT_BITMAP_S
 0

	)

219 
	#CPUPT_CT_BITMAP_M
 (0xfff‡<< 
CPUPT_CT_BITMAP_S
)

	)

220 
	#CPUPT_PFE_BITMAP_S
 16

	)

221 
	#CPUPT_PFE_BITMAP_M
 (0xfff‡<< 
CPUPT_PFE_BITMAP_S
)

	)

226 
	#AMDID_SYSCALL
 0x00000800

	)

227 
	#AMDID_MP
 0x00080000

	)

228 
	#AMDID_NX
 0x00100000

	)

229 
	#AMDID_EXT_MMX
 0x00400000

	)

230 
	#AMDID_FFXSR
 0x02000000

	)

231 
	#AMDID_PAGE1GB
 0x04000000

	)

232 
	#AMDID_RDTSCP
 0x08000000

	)

233 
	#AMDID_LM
 0x20000000

	)

234 
	#AMDID_EXT_3DNOW
 0x40000000

	)

235 
	#AMDID_3DNOW
 0x80000000

	)

237 
	#AMDID2_LAHF
 0x00000001

	)

238 
	#AMDID2_CMP
 0x00000002

	)

239 
	#AMDID2_SVM
 0x00000004

	)

240 
	#AMDID2_EXT_APIC
 0x00000008

	)

241 
	#AMDID2_CR8
 0x00000010

	)

242 
	#AMDID2_ABM
 0x00000020

	)

243 
	#AMDID2_SSE4A
 0x00000040

	)

244 
	#AMDID2_MAS
 0x00000080

	)

245 
	#AMDID2_PREFETCH
 0x00000100

	)

246 
	#AMDID2_OSVW
 0x00000200

	)

247 
	#AMDID2_IBS
 0x00000400

	)

248 
	#AMDID2_XOP
 0x00000800

	)

249 
	#AMDID2_SKINIT
 0x00001000

	)

250 
	#AMDID2_WDT
 0x00002000

	)

251 
	#AMDID2_LWP
 0x00008000

	)

252 
	#AMDID2_FMA4
 0x00010000

	)

253 
	#AMDID2_TCE
 0x00020000

	)

254 
	#AMDID2_NODE_ID
 0x00080000

	)

255 
	#AMDID2_TBM
 0x00200000

	)

256 
	#AMDID2_TOPOLOGY
 0x00400000

	)

257 
	#AMDID2_PCXC
 0x00800000

	)

258 
	#AMDID2_PNXC
 0x01000000

	)

259 
	#AMDID2_DBE
 0x04000000

	)

260 
	#AMDID2_PTSC
 0x08000000

	)

261 
	#AMDID2_PTSCEL2I
 0x10000000

	)

262 
	#AMDID2_MWAITX
 0x20000000

	)

267 
	#CPUID_STEPPING
 0x0000000f

	)

268 
	#CPUID_MODEL
 0x000000f0

	)

269 
	#CPUID_FAMILY
 0x00000f00

	)

270 
	#CPUID_EXT_MODEL
 0x000f0000

	)

271 
	#CPUID_EXT_FAMILY
 0x0ff00000

	)

272 #ifde‡
__i386__


273 
	#CPUID_TO_MODEL
(
id
) \

274 ((((
id
Ë& 
CPUID_MODEL
) >> 4) | \

275 ((((
id
Ë& 
CPUID_FAMILY
) >= 0x600) ? \

276 (((
id
Ë& 
CPUID_EXT_MODEL
Ë>> 12Ë: 0))

	)

277 
	#CPUID_TO_FAMILY
(
id
) \

278 ((((
id
Ë& 
CPUID_FAMILY
) >> 8) + \

279 ((((
id
Ë& 
CPUID_FAMILY
) == 0xf00) ? \

280 (((
id
Ë& 
CPUID_EXT_FAMILY
Ë>> 20Ë: 0))

	)

282 
	#CPUID_TO_MODEL
(
id
) \

283 ((((
id
Ë& 
CPUID_MODEL
) >> 4) | \

284 (((
id
Ë& 
CPUID_EXT_MODEL
Ë>> 12))

	)

285 
	#CPUID_TO_FAMILY
(
id
) \

286 ((((
id
Ë& 
CPUID_FAMILY
) >> 8) + \

287 (((
id
Ë& 
CPUID_EXT_FAMILY
Ë>> 20))

	)

293 
	#CPUID_BRAND_INDEX
 0x000000ff

	)

294 
	#CPUID_CLFUSH_SIZE
 0x0000ff00

	)

295 
	#CPUID_HTT_CORES
 0x00ff0000

	)

296 
	#CPUID_LOCAL_APIC_ID
 0xff000000

	)

301 
	#CPUID5_MON_MIN_SIZE
 0x0000fff‡

	)

302 
	#CPUID5_MON_MAX_SIZE
 0x0000fff‡

	)

303 
	#CPUID5_MON_MWAIT_EXT
 0x00000001

	)

304 
	#CPUID5_MWAIT_INTRBREAK
 0x00000002

	)

309 
	#MWAIT_C0
 0xf0

	)

310 
	#MWAIT_C1
 0x00

	)

311 
	#MWAIT_C2
 0x10

	)

312 
	#MWAIT_C3
 0x20

	)

313 
	#MWAIT_C4
 0x30

	)

319 
	#MWAIT_INTRBREAK
 0x00000001

	)

324 
	#CPUID_PERF_STAT
 0x00000001

	)

325 
	#CPUID_PERF_BIAS
 0x00000008

	)

330 
	#CPUID_TYPE_INVAL
 0

	)

331 
	#CPUID_TYPE_SMT
 1

	)

332 
	#CPUID_TYPE_CORE
 2

	)

337 
	#CPUID_EXTSTATE_XSAVEOPT
 0x00000001

	)

338 
	#CPUID_EXTSTATE_XSAVEC
 0x00000002

	)

339 
	#CPUID_EXTSTATE_XINUSE
 0x00000004

	)

340 
	#CPUID_EXTSTATE_XSAVES
 0x00000008

	)

345 
	#AMDRAS_MCA_OF_RECOV
 0x00000001

	)

346 
	#AMDRAS_SUCCOR
 0x00000002

	)

347 
	#AMDRAS_HW_ASSERT
 0x00000004

	)

348 
	#AMDRAS_SCALABLE_MCA
 0x00000008

	)

349 
	#AMDRAS_PFEH_SUPPORT
 0x00000010

	)

354 
	#AMDPM_TS
 0x00000001

	)

355 
	#AMDPM_FID
 0x00000002

	)

356 
	#AMDPM_VID
 0x00000004

	)

357 
	#AMDPM_TTP
 0x00000008

	)

358 
	#AMDPM_TM
 0x00000010

	)

359 
	#AMDPM_STC
 0x00000020

	)

360 
	#AMDPM_100MHZ_STEPS
 0x00000040

	)

361 
	#AMDPM_HW_PSTATE
 0x00000080

	)

362 
	#AMDPM_TSC_INVARIANT
 0x00000100

	)

363 
	#AMDPM_CPB
 0x00000200

	)

368 
	#AMDFEID_CLZERO
 0x00000001

	)

369 
	#AMDFEID_IRPERF
 0x00000002

	)

370 
	#AMDFEID_XSAVEERPTR
 0x00000004

	)

375 
	#AMDID_CMP_CORES
 0x000000ff

	)

376 
	#AMDID_COREID_SIZE
 0x0000f000

	)

377 
	#AMDID_COREID_SIZE_SHIFT
 12

	)

382 
	#CPUID_STDEXT_FSGSBASE
 0x00000001

	)

383 
	#CPUID_STDEXT_TSC_ADJUST
 0x00000002

	)

384 
	#CPUID_STDEXT_SGX
 0x00000004

	)

385 
	#CPUID_STDEXT_BMI1
 0x00000008

	)

386 
	#CPUID_STDEXT_HLE
 0x00000010

	)

387 
	#CPUID_STDEXT_AVX2
 0x00000020

	)

388 
	#CPUID_STDEXT_FDP_EXC
 0x00000040

	)

389 
	#CPUID_STDEXT_SMEP
 0x00000080

	)

390 
	#CPUID_STDEXT_BMI2
 0x00000100

	)

391 
	#CPUID_STDEXT_ERMS
 0x00000200

	)

392 
	#CPUID_STDEXT_INVPCID
 0x00000400

	)

393 
	#CPUID_STDEXT_RTM
 0x00000800

	)

394 
	#CPUID_STDEXT_PQM
 0x00001000

	)

395 
	#CPUID_STDEXT_NFPUSG
 0x00002000

	)

396 
	#CPUID_STDEXT_MPX
 0x00004000

	)

397 
	#CPUID_STDEXT_PQE
 0x00008000

	)

398 
	#CPUID_STDEXT_AVX512F
 0x00010000

	)

399 
	#CPUID_STDEXT_AVX512DQ
 0x00020000

	)

400 
	#CPUID_STDEXT_RDSEED
 0x00040000

	)

401 
	#CPUID_STDEXT_ADX
 0x00080000

	)

402 
	#CPUID_STDEXT_SMAP
 0x00100000

	)

403 
	#CPUID_STDEXT_AVX512IFMA
 0x00200000

	)

404 
	#CPUID_STDEXT_PCOMMIT
 0x00400000

	)

405 
	#CPUID_STDEXT_CLFLUSHOPT
 0x00800000

	)

406 
	#CPUID_STDEXT_CLWB
 0x01000000

	)

407 
	#CPUID_STDEXT_PROCTRACE
 0x02000000

	)

408 
	#CPUID_STDEXT_AVX512PF
 0x04000000

	)

409 
	#CPUID_STDEXT_AVX512ER
 0x08000000

	)

410 
	#CPUID_STDEXT_AVX512CD
 0x10000000

	)

411 
	#CPUID_STDEXT_SHA
 0x20000000

	)

412 
	#CPUID_STDEXT_AVX512BW
 0x40000000

	)

413 
	#CPUID_STDEXT_AVX512VL
 0x80000000

	)

418 
	#CPUID_STDEXT2_PREFETCHWT1
 0x00000001

	)

419 
	#CPUID_STDEXT2_UMIP
 0x00000004

	)

420 
	#CPUID_STDEXT2_PKU
 0x00000008

	)

421 
	#CPUID_STDEXT2_OSPKE
 0x00000010

	)

422 
	#CPUID_STDEXT2_RDPID
 0x00400000

	)

423 
	#CPUID_STDEXT2_SGXLC
 0x40000000

	)

428 
	#CPUID_STDEXT3_IBPB
 0x04000000

	)

429 
	#CPUID_STDEXT3_STIBP
 0x08000000

	)

430 
	#CPUID_STDEXT3_L1D_FLUSH
 0x10000000

	)

431 
	#CPUID_STDEXT3_ARCH_CAP
 0x20000000

	)

432 
	#CPUID_STDEXT3_SSBD
 0x80000000

	)

435 
	#IA32_ARCH_CAP_RDCL_NO
 0x00000001

	)

436 
	#IA32_ARCH_CAP_IBRS_ALL
 0x00000002

	)

437 
	#IA32_ARCH_CAP_RSBA
 0x00000004

	)

438 
	#IA32_ARCH_CAP_SKIP_L1DFL_VMENTRY
 0x00000008

	)

439 
	#IA32_ARCH_CAP_SSB_NO
 0x00000010

	)

444 
	#AMD_VENDOR_ID
 "AuthíticAMD"

	)

445 
	#CENTAUR_VENDOR_ID
 "CíèurHauls"

	)

446 
	#CYRIX_VENDOR_ID
 "CyrixIn°ód"

	)

447 
	#INTEL_VENDOR_ID
 "GíuöeI¡ñ"

	)

448 
	#NEXGEN_VENDOR_ID
 "NexGíDriví"

	)

449 
	#NSC_VENDOR_ID
 "Geodêby NSC"

	)

450 
	#RISE_VENDOR_ID
 "Ri£Ri£Ri£"

	)

451 
	#SIS_VENDOR_ID
 "SiS SiS SiS "

	)

452 
	#TRANSMETA_VENDOR_ID
 "GíuöeTMx86"

	)

453 
	#UMC_VENDOR_ID
 "UMC UMC UMC "

	)

458 
	#MSR_P5_MC_ADDR
 0x000

	)

459 
	#MSR_P5_MC_TYPE
 0x001

	)

460 
	#MSR_TSC
 0x010

	)

461 
	#MSR_P5_CESR
 0x011

	)

462 
	#MSR_P5_CTR0
 0x012

	)

463 
	#MSR_P5_CTR1
 0x013

	)

464 
	#MSR_IA32_PLATFORM_ID
 0x017

	)

465 
	#MSR_APICBASE
 0x01b

	)

466 
	#MSR_EBL_CR_POWERON
 0x02a

	)

467 
	#MSR_TEST_CTL
 0x033

	)

468 
	#MSR_IA32_FEATURE_CONTROL
 0x03a

	)

469 
	#MSR_IA32_SPEC_CTRL
 0x048

	)

470 
	#MSR_IA32_PRED_CMD
 0x049

	)

471 
	#MSR_BIOS_UPDT_TRIG
 0x079

	)

472 
	#MSR_BBL_CR_D0
 0x088

	)

473 
	#MSR_BBL_CR_D1
 0x089

	)

474 
	#MSR_BBL_CR_D2
 0x08a

	)

475 
	#MSR_BIOS_SIGN
 0x08b

	)

476 
	#MSR_PERFCTR0
 0x0c1

	)

477 
	#MSR_PERFCTR1
 0x0c2

	)

478 
	#MSR_PLATFORM_INFO
 0x0˚

	)

479 
	#MSR_MPERF
 0x0e7

	)

480 
	#MSR_APERF
 0x0e8

	)

481 
	#MSR_IA32_EXT_CONFIG
 0x0ì

	)

482 
	#MSR_MTRRˇp
 0x0„

	)

483 
	#MSR_IA32_ARCH_CAP
 0x10a

	)

484 
	#MSR_IA32_FLUSH_CMD
 0x10b

	)

485 
	#MSR_BBL_CR_ADDR
 0x116

	)

486 
	#MSR_BBL_CR_DECC
 0x118

	)

487 
	#MSR_BBL_CR_CTL
 0x119

	)

488 
	#MSR_BBL_CR_TRIG
 0x11a

	)

489 
	#MSR_BBL_CR_BUSY
 0x11b

	)

490 
	#MSR_BBL_CR_CTL3
 0x11e

	)

491 
	#MSR_SYSENTER_CS_MSR
 0x174

	)

492 
	#MSR_SYSENTER_ESP_MSR
 0x175

	)

493 
	#MSR_SYSENTER_EIP_MSR
 0x176

	)

494 
	#MSR_MCG_CAP
 0x179

	)

495 
	#MSR_MCG_STATUS
 0x17a

	)

496 
	#MSR_MCG_CTL
 0x17b

	)

497 
	#MSR_EVNTSEL0
 0x186

	)

498 
	#MSR_EVNTSEL1
 0x187

	)

499 
	#MSR_THERM_CONTROL
 0x19a

	)

500 
	#MSR_THERM_INTERRUPT
 0x19b

	)

501 
	#MSR_THERM_STATUS
 0x19c

	)

502 
	#MSR_IA32_MISC_ENABLE
 0x1a0

	)

503 
	#MSR_IA32_TEMPERATURE_TARGET
 0x1a2

	)

504 
	#MSR_TURBO_RATIO_LIMIT
 0x1ad

	)

505 
	#MSR_TURBO_RATIO_LIMIT1
 0x1´

	)

506 
	#MSR_DEBUGCTLMSR
 0x1d9

	)

507 
	#MSR_LASTBRANCHFROMIP
 0x1db

	)

508 
	#MSR_LASTBRANCHTOIP
 0x1dc

	)

509 
	#MSR_LASTINTFROMIP
 0x1dd

	)

510 
	#MSR_LASTINTTOIP
 0x1de

	)

511 
	#MSR_ROB_CR_BKUPTMPDR6
 0x1e0

	)

512 
	#MSR_MTRRV¨Ba£
 0x200

	)

513 
	#MSR_MTRR64kBa£
 0x250

	)

514 
	#MSR_MTRR16kBa£
 0x258

	)

515 
	#MSR_MTRR4kBa£
 0x268

	)

516 
	#MSR_PAT
 0x277

	)

517 
	#MSR_MC0_CTL2
 0x280

	)

518 
	#MSR_MTRRdefTy≥
 0x2ff

	)

519 
	#MSR_MC0_CTL
 0x400

	)

520 
	#MSR_MC0_STATUS
 0x401

	)

521 
	#MSR_MC0_ADDR
 0x402

	)

522 
	#MSR_MC0_MISC
 0x403

	)

523 
	#MSR_MC1_CTL
 0x404

	)

524 
	#MSR_MC1_STATUS
 0x405

	)

525 
	#MSR_MC1_ADDR
 0x406

	)

526 
	#MSR_MC1_MISC
 0x407

	)

527 
	#MSR_MC2_CTL
 0x408

	)

528 
	#MSR_MC2_STATUS
 0x409

	)

529 
	#MSR_MC2_ADDR
 0x40a

	)

530 
	#MSR_MC2_MISC
 0x40b

	)

531 
	#MSR_MC3_CTL
 0x40c

	)

532 
	#MSR_MC3_STATUS
 0x40d

	)

533 
	#MSR_MC3_ADDR
 0x40e

	)

534 
	#MSR_MC3_MISC
 0x40f

	)

535 
	#MSR_MC4_CTL
 0x410

	)

536 
	#MSR_MC4_STATUS
 0x411

	)

537 
	#MSR_MC4_ADDR
 0x412

	)

538 
	#MSR_MC4_MISC
 0x413

	)

539 
	#MSR_RAPL_POWER_UNIT
 0x606

	)

540 
	#MSR_PKG_ENERGY_STATUS
 0x611

	)

541 
	#MSR_DRAM_ENERGY_STATUS
 0x619

	)

542 
	#MSR_PP0_ENERGY_STATUS
 0x639

	)

543 
	#MSR_PP1_ENERGY_STATUS
 0x641

	)

544 
	#MSR_TSC_DEADLINE
 0x6e0

	)

549 
	#MSR_VMX_BASIC
 0x480

	)

550 
	#MSR_VMX_PINBASED_CTLS
 0x481

	)

551 
	#MSR_VMX_PROCBASED_CTLS
 0x482

	)

552 
	#MSR_VMX_EXIT_CTLS
 0x483

	)

553 
	#MSR_VMX_ENTRY_CTLS
 0x484

	)

554 
	#MSR_VMX_CR0_FIXED0
 0x486

	)

555 
	#MSR_VMX_CR0_FIXED1
 0x487

	)

556 
	#MSR_VMX_CR4_FIXED0
 0x488

	)

557 
	#MSR_VMX_CR4_FIXED1
 0x489

	)

558 
	#MSR_VMX_PROCBASED_CTLS2
 0x48b

	)

559 
	#MSR_VMX_EPT_VPID_CAP
 0x48c

	)

560 
	#MSR_VMX_TRUE_PINBASED_CTLS
 0x48d

	)

561 
	#MSR_VMX_TRUE_PROCBASED_CTLS
 0x48e

	)

562 
	#MSR_VMX_TRUE_EXIT_CTLS
 0x48f

	)

563 
	#MSR_VMX_TRUE_ENTRY_CTLS
 0x490

	)

569 
	#MSR_APIC_000
 0x800

	)

570 
	#MSR_APIC_ID
 0x802

	)

571 
	#MSR_APIC_VERSION
 0x803

	)

572 
	#MSR_APIC_TPR
 0x808

	)

573 
	#MSR_APIC_EOI
 0x80b

	)

574 
	#MSR_APIC_LDR
 0x80d

	)

575 
	#MSR_APIC_SVR
 0x80f

	)

576 
	#MSR_APIC_ISR0
 0x810

	)

577 
	#MSR_APIC_ISR1
 0x811

	)

578 
	#MSR_APIC_ISR2
 0x812

	)

579 
	#MSR_APIC_ISR3
 0x813

	)

580 
	#MSR_APIC_ISR4
 0x814

	)

581 
	#MSR_APIC_ISR5
 0x815

	)

582 
	#MSR_APIC_ISR6
 0x816

	)

583 
	#MSR_APIC_ISR7
 0x817

	)

584 
	#MSR_APIC_TMR0
 0x818

	)

585 
	#MSR_APIC_IRR0
 0x820

	)

586 
	#MSR_APIC_ESR
 0x828

	)

587 
	#MSR_APIC_LVT_CMCI
 0x82F

	)

588 
	#MSR_APIC_ICR
 0x830

	)

589 
	#MSR_APIC_LVT_TIMER
 0x832

	)

590 
	#MSR_APIC_LVT_THERMAL
 0x833

	)

591 
	#MSR_APIC_LVT_PCINT
 0x834

	)

592 
	#MSR_APIC_LVT_LINT0
 0x835

	)

593 
	#MSR_APIC_LVT_LINT1
 0x836

	)

594 
	#MSR_APIC_LVT_ERROR
 0x837

	)

595 
	#MSR_APIC_ICR_TIMER
 0x838

	)

596 
	#MSR_APIC_CCR_TIMER
 0x839

	)

597 
	#MSR_APIC_DCR_TIMER
 0x83e

	)

598 
	#MSR_APIC_SELF_IPI
 0x83f

	)

600 
	#MSR_IA32_XSS
 0xda0

	)

605 
	#MSR_IA32_RTIT_OUTPUT_BASE
 0x560

	)

606 
	#MSR_IA32_RTIT_OUTPUT_MASK_PTRS
 0x561

	)

607 
	#MSR_IA32_RTIT_CTL
 0x570

	)

608 
	#RTIT_CTL_TRACEEN
 (1 << 0)

	)

609 
	#RTIT_CTL_CYCEN
 (1 << 1)

	)

610 
	#RTIT_CTL_OS
 (1 << 2)

	)

611 
	#RTIT_CTL_USER
 (1 << 3)

	)

612 
	#RTIT_CTL_PWREVTEN
 (1 << 4)

	)

613 
	#RTIT_CTL_FUPONPTW
 (1 << 5)

	)

614 
	#RTIT_CTL_FABRICEN
 (1 << 6)

	)

615 
	#RTIT_CTL_CR3FILTER
 (1 << 7)

	)

616 
	#RTIT_CTL_TOPA
 (1 << 8)

	)

617 
	#RTIT_CTL_MTCEN
 (1 << 9)

	)

618 
	#RTIT_CTL_TSCEN
 (1 << 10)

	)

619 
	#RTIT_CTL_DISRETC
 (1 << 11)

	)

620 
	#RTIT_CTL_PTWEN
 (1 << 12)

	)

621 
	#RTIT_CTL_BRANCHEN
 (1 << 13)

	)

622 
	#RTIT_CTL_MTC_FREQ_S
 14

	)

623 
	#RTIT_CTL_MTC_FREQ
(
n
Ë(“Ë<< 
RTIT_CTL_MTC_FREQ_S
)

	)

624 
	#RTIT_CTL_MTC_FREQ_M
 (0x‡<< 
RTIT_CTL_MTC_FREQ_S
)

	)

625 
	#RTIT_CTL_CYC_THRESH_S
 19

	)

626 
	#RTIT_CTL_CYC_THRESH_M
 (0x‡<< 
RTIT_CTL_CYC_THRESH_S
)

	)

627 
	#RTIT_CTL_PSB_FREQ_S
 24

	)

628 
	#RTIT_CTL_PSB_FREQ_M
 (0x‡<< 
RTIT_CTL_PSB_FREQ_S
)

	)

629 
	#RTIT_CTL_ADDR_CFG_S
(
n
Ë(32 + (nË* 4)

	)

630 
	#RTIT_CTL_ADDR0_CFG_S
 32

	)

631 
	#RTIT_CTL_ADDR0_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR0_CFG_S
)

	)

632 
	#RTIT_CTL_ADDR1_CFG_S
 36

	)

633 
	#RTIT_CTL_ADDR1_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR1_CFG_S
)

	)

634 
	#RTIT_CTL_ADDR2_CFG_S
 40

	)

635 
	#RTIT_CTL_ADDR2_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR2_CFG_S
)

	)

636 
	#RTIT_CTL_ADDR3_CFG_S
 44

	)

637 
	#RTIT_CTL_ADDR3_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR3_CFG_S
)

	)

638 
	#MSR_IA32_RTIT_STATUS
 0x571

	)

639 
	#RTIT_STATUS_FILTEREN
 (1 << 0)

	)

640 
	#RTIT_STATUS_CONTEXTEN
 (1 << 1)

	)

641 
	#RTIT_STATUS_TRIGGEREN
 (1 << 2)

	)

642 
	#RTIT_STATUS_ERROR
 (1 << 4)

	)

643 
	#RTIT_STATUS_STOPPED
 (1 << 5)

	)

644 
	#RTIT_STATUS_PACKETBYTECNT_S
 32

	)

645 
	#RTIT_STATUS_PACKETBYTECNT_M
 (0x1ffffULL << 
RTIT_STATUS_PACKETBYTECNT_S
)

	)

646 
	#MSR_IA32_RTIT_CR3_MATCH
 0x572

	)

647 
	#MSR_IA32_RTIT_ADDR_A
(
n
Ë(0x580 + (nË* 2)

	)

648 
	#MSR_IA32_RTIT_ADDR_B
(
n
Ë(0x581 + (nË* 2)

	)

649 
	#MSR_IA32_RTIT_ADDR0_A
 0x580

	)

650 
	#MSR_IA32_RTIT_ADDR0_B
 0x581

	)

651 
	#MSR_IA32_RTIT_ADDR1_A
 0x582

	)

652 
	#MSR_IA32_RTIT_ADDR1_B
 0x583

	)

653 
	#MSR_IA32_RTIT_ADDR2_A
 0x584

	)

654 
	#MSR_IA32_RTIT_ADDR2_B
 0x585

	)

655 
	#MSR_IA32_RTIT_ADDR3_A
 0x586

	)

656 
	#MSR_IA32_RTIT_ADDR3_B
 0x587

	)

659 
	#TOPA_SIZE_S
 6

	)

660 
	#TOPA_SIZE_M
 (0x‡<< 
TOPA_SIZE_S
)

	)

661 
	#TOPA_SIZE_4K
 (0 << 
TOPA_SIZE_S
)

	)

662 
	#TOPA_SIZE_8K
 (1 << 
TOPA_SIZE_S
)

	)

663 
	#TOPA_SIZE_16K
 (2 << 
TOPA_SIZE_S
)

	)

664 
	#TOPA_SIZE_32K
 (3 << 
TOPA_SIZE_S
)

	)

665 
	#TOPA_SIZE_64K
 (4 << 
TOPA_SIZE_S
)

	)

666 
	#TOPA_SIZE_128K
 (5 << 
TOPA_SIZE_S
)

	)

667 
	#TOPA_SIZE_256K
 (6 << 
TOPA_SIZE_S
)

	)

668 
	#TOPA_SIZE_512K
 (7 << 
TOPA_SIZE_S
)

	)

669 
	#TOPA_SIZE_1M
 (8 << 
TOPA_SIZE_S
)

	)

670 
	#TOPA_SIZE_2M
 (9 << 
TOPA_SIZE_S
)

	)

671 
	#TOPA_SIZE_4M
 (10 << 
TOPA_SIZE_S
)

	)

672 
	#TOPA_SIZE_8M
 (11 << 
TOPA_SIZE_S
)

	)

673 
	#TOPA_SIZE_16M
 (12 << 
TOPA_SIZE_S
)

	)

674 
	#TOPA_SIZE_32M
 (13 << 
TOPA_SIZE_S
)

	)

675 
	#TOPA_SIZE_64M
 (14 << 
TOPA_SIZE_S
)

	)

676 
	#TOPA_SIZE_128M
 (15 << 
TOPA_SIZE_S
)

	)

677 
	#TOPA_STOP
 (1 << 4)

	)

678 
	#TOPA_INT
 (1 << 2)

	)

679 
	#TOPA_END
 (1 << 0)

	)

684 
	#APICBASE_RESERVED
 0x000002ff

	)

685 
	#APICBASE_BSP
 0x00000100

	)

686 
	#APICBASE_X2APIC
 0x00000400

	)

687 
	#APICBASE_ENABLED
 0x00000800

	)

688 
	#APICBASE_ADDRESS
 0xfffff000

	)

691 
	#IA32_FEATURE_CONTROL_LOCK
 0x01

	)

692 
	#IA32_FEATURE_CONTROL_SMX_EN
 0x02

	)

693 
	#IA32_FEATURE_CONTROL_VMX_EN
 0x04

	)

696 
	#IA32_MISC_EN_FASTSTR
 0x0000000000000001ULL

	)

697 
	#IA32_MISC_EN_ATCCE
 0x0000000000000008ULL

	)

698 
	#IA32_MISC_EN_PERFMON
 0x0000000000000080ULL

	)

699 
	#IA32_MISC_EN_PEBSU
 0x0000000000001000ULL

	)

700 
	#IA32_MISC_EN_ESSTE
 0x0000000000010000ULL

	)

701 
	#IA32_MISC_EN_MONE
 0x0000000000040000ULL

	)

702 
	#IA32_MISC_EN_LIMCPUID
 0x0000000000400000ULL

	)

703 
	#IA32_MISC_EN_xTPRD
 0x0000000000800000ULL

	)

704 
	#IA32_MISC_EN_XDD
 0x0000000400000000ULL

	)

711 
	#IA32_SPEC_CTRL_IBRS
 0x00000001

	)

712 
	#IA32_SPEC_CTRL_STIBP
 0x00000002

	)

713 
	#IA32_SPEC_CTRL_SSBD
 0x00000004

	)

716 
	#IA32_PRED_CMD_IBPB_BARRIER
 0x0000000000000001ULL

	)

719 
	#IA32_FLUSH_CMD_L1D
 0x00000001

	)

724 
	#PAT_UNCACHEABLE
 0x00

	)

725 
	#PAT_WRITE_COMBINING
 0x01

	)

726 
	#PAT_WRITE_THROUGH
 0x04

	)

727 
	#PAT_WRITE_PROTECTED
 0x05

	)

728 
	#PAT_WRITE_BACK
 0x06

	)

729 
	#PAT_UNCACHED
 0x07

	)

730 
	#PAT_VALUE
(
i
, 
m
Ë(()(mË<< (8 * (i)))

	)

731 
	#PAT_MASK
(
i
Ë
	`PAT_VALUE
(i, 0xff)

	)

736 
	#MTRR_UNCACHEABLE
 0x00

	)

737 
	#MTRR_WRITE_COMBINING
 0x01

	)

738 
	#MTRR_WRITE_THROUGH
 0x04

	)

739 
	#MTRR_WRITE_PROTECTED
 0x05

	)

740 
	#MTRR_WRITE_BACK
 0x06

	)

741 
	#MTRR_N64K
 8

	)

742 
	#MTRR_N16K
 16

	)

743 
	#MTRR_N4K
 64

	)

744 
	#MTRR_CAP_WC
 0x0000000000000400

	)

745 
	#MTRR_CAP_FIXED
 0x0000000000000100

	)

746 
	#MTRR_CAP_VCNT
 0x00000000000000ff

	)

747 
	#MTRR_DEF_ENABLE
 0x0000000000000800

	)

748 
	#MTRR_DEF_FIXED_ENABLE
 0x0000000000000400

	)

749 
	#MTRR_DEF_TYPE
 0x00000000000000ff

	)

750 
	#MTRR_PHYSBASE_PHYSBASE
 0x000ffffffffff000

	)

751 
	#MTRR_PHYSBASE_TYPE
 0x00000000000000ff

	)

752 
	#MTRR_PHYSMASK_PHYSMASK
 0x000ffffffffff000

	)

753 
	#MTRR_PHYSMASK_VALID
 0x0000000000000800

	)

758 
	#CCR0
 0xc0

	)

759 
	#CCR0_NC0
 0x01

	)

761 
	#CCR0_NC1
 0x02

	)

762 
	#CCR0_A20M
 0x04

	)

763 
	#CCR0_KEN
 0x08

	)

764 
	#CCR0_FLUSH
 0x10

	)

765 
	#CCR0_BARB
 0x20

	)

767 
	#CCR0_CO
 0x40

	)

769 
	#CCR0_SUSPEND
 0x80

	)

771 
	#CCR1
 0xc1

	)

772 
	#CCR1_RPL
 0x01

	)

773 
	#CCR1_SMI
 0x02

	)

774 
	#CCR1_SMAC
 0x04

	)

775 
	#CCR1_MMAC
 0x08

	)

776 
	#CCR1_NO_LOCK
 0x10

	)

777 
	#CCR1_SM3
 0x80

	)

779 
	#CCR2
 0xc2

	)

780 
	#CCR2_WB
 0x02

	)

781 
	#CCR2_SADS
 0x02

	)

782 
	#CCR2_LOCK_NW
 0x04

	)

783 
	#CCR2_SUSP_HLT
 0x08

	)

784 
	#CCR2_WT1
 0x10

	)

785 
	#CCR2_WPR1
 0x10

	)

786 
	#CCR2_BARB
 0x20

	)

788 
	#CCR2_BWRT
 0x40

	)

789 
	#CCR2_USE_SUSP
 0x80

	)

791 
	#CCR3
 0xc3

	)

792 
	#CCR3_SMILOCK
 0x01

	)

793 
	#CCR3_NMI
 0x02

	)

794 
	#CCR3_LINBRST
 0x04

	)

795 
	#CCR3_SMMMODE
 0x08

	)

796 
	#CCR3_MAPEN0
 0x10

	)

797 
	#CCR3_MAPEN1
 0x20

	)

798 
	#CCR3_MAPEN2
 0x40

	)

799 
	#CCR3_MAPEN3
 0x80

	)

801 
	#CCR4
 0xe8

	)

802 
	#CCR4_IOMASK
 0x07

	)

803 
	#CCR4_MEM
 0x08

	)

804 
	#CCR4_DTE
 0x10

	)

805 
	#CCR4_FASTFPE
 0x20

	)

806 
	#CCR4_CPUID
 0x80

	)

808 
	#CCR5
 0xe9

	)

809 
	#CCR5_WT_ALLOC
 0x01

	)

810 
	#CCR5_SLOP
 0x02

	)

811 
	#CCR5_LBR1
 0x10

	)

812 
	#CCR5_ARREN
 0x20

	)

814 
	#CCR6
 0xó

	)

816 
	#CCR7
 0xeb

	)

819 
	#PCR0
 0x20

	)

820 
	#PCR0_RSTK
 0x01

	)

821 
	#PCR0_BTB
 0x02

	)

822 
	#PCR0_LOOP
 0x04

	)

823 
	#PCR0_AIS
 0x08

	)

825 
	#PCR0_MLR
 0x10

	)

826 
	#PCR0_BTBRT
 0x40

	)

827 
	#PCR0_LSSER
 0x80

	)

830 
	#DIR0
 0x„

	)

831 
	#DIR1
 0xff

	)

836 
	#MCG_CAP_COUNT
 0x000000ff

	)

837 
	#MCG_CAP_CTL_P
 0x00000100

	)

838 
	#MCG_CAP_EXT_P
 0x00000200

	)

839 
	#MCG_CAP_CMCI_P
 0x00000400

	)

840 
	#MCG_CAP_TES_P
 0x00000800

	)

841 
	#MCG_CAP_EXT_CNT
 0x00ff0000

	)

842 
	#MCG_CAP_SER_P
 0x01000000

	)

843 
	#MCG_STATUS_RIPV
 0x00000001

	)

844 
	#MCG_STATUS_EIPV
 0x00000002

	)

845 
	#MCG_STATUS_MCIP
 0x00000004

	)

846 
	#MCG_CTL_ENABLE
 0xffffffffffffffff

	)

847 
	#MCG_CTL_DISABLE
 0x0000000000000000

	)

848 
	#MSR_MC_CTL
(
x
Ë(
MSR_MC0_CTL
 + (xË* 4)

	)

849 
	#MSR_MC_STATUS
(
x
Ë(
MSR_MC0_STATUS
 + (xË* 4)

	)

850 
	#MSR_MC_ADDR
(
x
Ë(
MSR_MC0_ADDR
 + (xË* 4)

	)

851 
	#MSR_MC_MISC
(
x
Ë(
MSR_MC0_MISC
 + (xË* 4)

	)

852 
	#MSR_MC_CTL2
(
x
Ë(
MSR_MC0_CTL2
 + (x)Ë

	)

853 
	#MC_STATUS_MCA_ERROR
 0x000000000000ffff

	)

854 
	#MC_STATUS_MODEL_ERROR
 0x00000000ffff0000

	)

855 
	#MC_STATUS_OTHER_INFO
 0x01ffffff00000000

	)

856 
	#MC_STATUS_COR_COUNT
 0x001fffc000000000

	)

857 
	#MC_STATUS_TES_STATUS
 0x0060000000000000

	)

858 
	#MC_STATUS_AR
 0x0080000000000000

	)

859 
	#MC_STATUS_S
 0x0100000000000000

	)

860 
	#MC_STATUS_PCC
 0x0200000000000000

	)

861 
	#MC_STATUS_ADDRV
 0x0400000000000000

	)

862 
	#MC_STATUS_MISCV
 0x0800000000000000

	)

863 
	#MC_STATUS_EN
 0x1000000000000000

	)

864 
	#MC_STATUS_UC
 0x2000000000000000

	)

865 
	#MC_STATUS_OVER
 0x4000000000000000

	)

866 
	#MC_STATUS_VAL
 0x8000000000000000

	)

867 
	#MC_MISC_RA_LSB
 0x000000000000003‡

	)

868 
	#MC_MISC_ADDRESS_MODE
 0x00000000000001c0

	)

869 
	#MC_CTL2_THRESHOLD
 0x0000000000007fff

	)

870 
	#MC_CTL2_CMCI_EN
 0x0000000040000000

	)

871 
	#MC_AMDNB_BANK
 4

	)

872 
	#MC_MISC_AMD_VAL
 0x8000000000000000

	)

873 
	#MC_MISC_AMD_CNTP
 0x4000000000000000

	)

874 
	#MC_MISC_AMD_LOCK
 0x2000000000000000

	)

875 
	#MC_MISC_AMD_INTP
 0x1000000000000000

	)

876 
	#MC_MISC_AMD_LVT_MASK
 0x00f0000000000000

	)

877 
	#MC_MISC_AMD_LVT_SHIFT
 52

	)

878 
	#MC_MISC_AMD_CNTEN
 0x0008000000000000

	)

879 
	#MC_MISC_AMD_INT_MASK
 0x0006000000000000

	)

880 
	#MC_MISC_AMD_INT_LVT
 0x0002000000000000

	)

881 
	#MC_MISC_AMD_INT_SMI
 0x0004000000000000

	)

882 
	#MC_MISC_AMD_OVERFLOW
 0x0001000000000000

	)

883 
	#MC_MISC_AMD_CNT_MASK
 0x00000fff00000000

	)

884 
	#MC_MISC_AMD_CNT_SHIFT
 32

	)

885 
	#MC_MISC_AMD_CNT_MAX
 0xfff

	)

886 
	#MC_MISC_AMD_PTR_MASK
 0x00000000ff000000

	)

887 
	#MC_MISC_AMD_PTR_SHIFT
 24

	)

900 
	#NCR1
 0xc4

	)

901 
	#NCR2
 0xc7

	)

902 
	#NCR3
 0xˇ

	)

903 
	#NCR4
 0xcd

	)

905 
	#NCR_SIZE_0K
 0

	)

906 
	#NCR_SIZE_4K
 1

	)

907 
	#NCR_SIZE_8K
 2

	)

908 
	#NCR_SIZE_16K
 3

	)

909 
	#NCR_SIZE_32K
 4

	)

910 
	#NCR_SIZE_64K
 5

	)

911 
	#NCR_SIZE_128K
 6

	)

912 
	#NCR_SIZE_256K
 7

	)

913 
	#NCR_SIZE_512K
 8

	)

914 
	#NCR_SIZE_1M
 9

	)

915 
	#NCR_SIZE_2M
 10

	)

916 
	#NCR_SIZE_4M
 11

	)

917 
	#NCR_SIZE_8M
 12

	)

918 
	#NCR_SIZE_16M
 13

	)

919 
	#NCR_SIZE_32M
 14

	)

920 
	#NCR_SIZE_4G
 15

	)

930 
	#ARR0
 0xc4

	)

931 
	#ARR1
 0xc7

	)

932 
	#ARR2
 0xˇ

	)

933 
	#ARR3
 0xcd

	)

934 
	#ARR4
 0xd0

	)

935 
	#ARR5
 0xd3

	)

936 
	#ARR6
 0xd6

	)

937 
	#ARR7
 0xd9

	)

939 
	#ARR_SIZE_0K
 0

	)

940 
	#ARR_SIZE_4K
 1

	)

941 
	#ARR_SIZE_8K
 2

	)

942 
	#ARR_SIZE_16K
 3

	)

943 
	#ARR_SIZE_32K
 4

	)

944 
	#ARR_SIZE_64K
 5

	)

945 
	#ARR_SIZE_128K
 6

	)

946 
	#ARR_SIZE_256K
 7

	)

947 
	#ARR_SIZE_512K
 8

	)

948 
	#ARR_SIZE_1M
 9

	)

949 
	#ARR_SIZE_2M
 10

	)

950 
	#ARR_SIZE_4M
 11

	)

951 
	#ARR_SIZE_8M
 12

	)

952 
	#ARR_SIZE_16M
 13

	)

953 
	#ARR_SIZE_32M
 14

	)

954 
	#ARR_SIZE_4G
 15

	)

960 
	#RCR0
 0xdc

	)

961 
	#RCR1
 0xdd

	)

962 
	#RCR2
 0xde

	)

963 
	#RCR3
 0xdf

	)

964 
	#RCR4
 0xe0

	)

965 
	#RCR5
 0xe1

	)

966 
	#RCR6
 0xe2

	)

967 
	#RCR7
 0xe3

	)

969 
	#RCR_RCD
 0x01

	)

970 
	#RCR_RCE
 0x01

	)

971 
	#RCR_WWO
 0x02

	)

972 
	#RCR_WL
 0x04

	)

973 
	#RCR_WG
 0x08

	)

974 
	#RCR_WT
 0x10

	)

975 
	#RCR_NLB
 0x20

	)

978 
	#AMD_WT_ALLOC_TME
 0x40000

	)

979 
	#AMD_WT_ALLOC_PRE
 0x20000

	)

980 
	#AMD_WT_ALLOC_FRE
 0x10000

	)

983 
	#MSR_EFER
 0xc0000080

	)

984 
	#MSR_STAR
 0xc0000081

	)

985 
	#MSR_LSTAR
 0xc0000082

	)

986 
	#MSR_CSTAR
 0xc0000083

	)

987 
	#MSR_SF_MASK
 0xc0000084

	)

988 
	#MSR_FSBASE
 0xc0000100

	)

989 
	#MSR_GSBASE
 0xc0000101

	)

990 
	#MSR_KGSBASE
 0xc0000102

	)

991 
	#MSR_PERFEVSEL0
 0xc0010000

	)

992 
	#MSR_PERFEVSEL1
 0xc0010001

	)

993 
	#MSR_PERFEVSEL2
 0xc0010002

	)

994 
	#MSR_PERFEVSEL3
 0xc0010003

	)

995 
	#MSR_K7_PERFCTR0
 0xc0010004

	)

996 
	#MSR_K7_PERFCTR1
 0xc0010005

	)

997 
	#MSR_K7_PERFCTR2
 0xc0010006

	)

998 
	#MSR_K7_PERFCTR3
 0xc0010007

	)

999 
	#MSR_SYSCFG
 0xc0010010

	)

1000 
	#MSR_HWCR
 0xc0010015

	)

1001 
	#MSR_IORRBASE0
 0xc0010016

	)

1002 
	#MSR_IORRMASK0
 0xc0010017

	)

1003 
	#MSR_IORRBASE1
 0xc0010018

	)

1004 
	#MSR_IORRMASK1
 0xc0010019

	)

1005 
	#MSR_TOP_MEM
 0xc001001®

	)

1006 
	#MSR_TOP_MEM2
 0xc001001d

	)

1007 
	#MSR_NB_CFG1
 0xc001001‡

	)

1008 
	#MSR_K8_UCODE_UPDATE
 0xc0010020

	)

1009 
	#MSR_MC0_CTL_MASK
 0xc0010044

	)

1010 
	#MSR_P_STATE_LIMIT
 0xc0010061

	)

1011 
	#MSR_P_STATE_CONTROL
 0xc0010062

	)

1012 
	#MSR_P_STATE_STATUS
 0xc0010063

	)

1013 
	#MSR_P_STATE_CONFIG
(
n
Ë(0xc0010064 + (n)Ë

	)

1014 
	#MSR_SMM_ADDR
 0xc0010112

	)

1015 
	#MSR_SMM_MASK
 0xc0010113

	)

1016 
	#MSR_VM_CR
 0xc0010114

	)

1017 
	#MSR_VM_HSAVE_PA
 0xc0010117

	)

1018 
	#MSR_AMD_CPUID07
 0xc0011002

	)

1019 
	#MSR_EXTFEATURES
 0xc0011005

	)

1020 
	#MSR_IC_CFG
 0xc0011021

	)

1023 
	#VM_CR_SVMDIS
 0x10

	)

1026 
	#VIA_HAS_RNG
 1

	)

1029 
	#VIA_HAS_AES
 1

	)

1030 
	#VIA_HAS_SHA
 2

	)

1031 
	#VIA_HAS_MM
 4

	)

1032 
	#VIA_HAS_AESCTR
 8

	)

1035 
	#VIA_CPUID_HAS_RNG
 0x000004

	)

1036 
	#VIA_CPUID_DO_RNG
 0x000008

	)

1037 
	#VIA_CPUID_HAS_ACE
 0x000040

	)

1038 
	#VIA_CPUID_DO_ACE
 0x000080

	)

1039 
	#VIA_CPUID_HAS_ACE2
 0x000100

	)

1040 
	#VIA_CPUID_DO_ACE2
 0x000200

	)

1041 
	#VIA_CPUID_HAS_PHE
 0x000400

	)

1042 
	#VIA_CPUID_DO_PHE
 0x000800

	)

1043 
	#VIA_CPUID_HAS_PMM
 0x001000

	)

1044 
	#VIA_CPUID_DO_PMM
 0x002000

	)

1047 
	#VIA_CRYPT_CWLO_ROUND_M
 0x0000000f

	)

1048 
	#VIA_CRYPT_CWLO_ALG_M
 0x00000070

	)

1049 
	#VIA_CRYPT_CWLO_ALG_AES
 0x00000000

	)

1050 
	#VIA_CRYPT_CWLO_KEYGEN_M
 0x00000080

	)

1051 
	#VIA_CRYPT_CWLO_KEYGEN_HW
 0x00000000

	)

1052 
	#VIA_CRYPT_CWLO_KEYGEN_SW
 0x00000080

	)

1053 
	#VIA_CRYPT_CWLO_NORMAL
 0x00000000

	)

1054 
	#VIA_CRYPT_CWLO_INTERMEDIATE
 0x00000100

	)

1055 
	#VIA_CRYPT_CWLO_ENCRYPT
 0x00000000

	)

1056 
	#VIA_CRYPT_CWLO_DECRYPT
 0x00000200

	)

1057 
	#VIA_CRYPT_CWLO_KEY128
 0x0000000®

	)

1058 
	#VIA_CRYPT_CWLO_KEY192
 0x0000040¯

	)

1059 
	#VIA_CRYPT_CWLO_KEY256
 0x0000080ê

	)

	@src/nvidia-drm/x86/stack.h

29 #i‚de‡
_X86_STACK_H


30 
	#_X86_STACK_H


	)

36 #ifde‡
__i386__


37 
	si386_‰ame
 {

38 
i386_‰ame
 *
	mf_‰ame
;

39 
u_öt
 
	mf_ªèddr
;

40 
u_öt
 
	mf_¨g0
;

44 #ifde‡
__amd64__


45 
	samd64_‰ame
 {

46 
amd64_‰ame
 *
	mf_‰ame
;

47 
u_l⁄g
 
	mf_ªèddr
;

50 
	si386_‰ame
 {

51 
uöt32_t
 
	mf_‰ame
;

52 
uöt32_t
 
	mf_ªèddr
;

53 
uöt32_t
 
	mf_¨g0
;

57 #ifde‡
_KERNEL


58 
°ack_nmi_h™dÀr
(
å≠‰ame
 *);

	@src/nvidia-drm/x86/stdarg.h

30 #i‚de‡
_MACHINE_STDARG_H_


31 
	#_MACHINE_STDARG_H_


	)

33 
	~<sys/_°d¨g.h
>

35 #i‚de‡
va_°¨t


36 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


	@src/nvidia-drm/x86/sysarch.h

37 #i‚de‡
_MACHINE_SYSARCH_H_


38 
	#_MACHINE_SYSARCH_H_


	)

40 
	~<sys/cdefs.h
>

42 
	#I386_GET_LDT
 0

	)

43 
	#I386_SET_LDT
 1

	)

44 
	#LDT_AUTO_ALLOC
 0xffffffff

	)

46 
	#I386_GET_IOPERM
 3

	)

47 
	#I386_SET_IOPERM
 4

	)

49 
	#I386_VM86
 6

	)

50 
	#I386_GET_FSBASE
 7

	)

51 
	#I386_SET_FSBASE
 8

	)

52 
	#I386_GET_GSBASE
 9

	)

53 
	#I386_SET_GSBASE
 10

	)

54 
	#I386_GET_XFPUSTATE
 11

	)

57 
	#AMD64_GET_FSBASE
 128

	)

58 
	#AMD64_SET_FSBASE
 129

	)

59 
	#AMD64_GET_GSBASE
 130

	)

60 
	#AMD64_SET_GSBASE
 131

	)

61 
	#AMD64_GET_XFPUSTATE
 132

	)

63 
	si386_i›îm_¨gs
 {

64 
	m°¨t
;

65 
	mÀngth
;

66 
	míabÀ
;

69 #ifde‡
__i386__


70 
	si386_ldt_¨gs
 {

71 
	m°¨t
;

72 
des¸ùt‹
 *
	mdescs
;

73 
	mnum
;

76 
	si386_vm86_¨gs
 {

77 
	msub_›
;

78 *
	msub_¨gs
;

81 
	si386_gë_xÂu°©e
 {

82 *
	maddr
;

83 
	mÀn
;

86 
	si386_ldt_¨gs
 {

87 
	m°¨t
;

88 
u£r_£gmít_des¸ùt‹
 *
descs
 
	m__∑cked
;

89 
	mnum
;

92 
	si386_gë_xÂu°©e
 {

93 
	maddr
;

94 
	mÀn
;

97 
	samd64_gë_xÂu°©e
 {

98 *
	maddr
;

99 
	mÀn
;

103 #i‚de‡
_KERNEL


104 
	gdes¸ùt‹
;

105 
	gdbªg
;

107 
__BEGIN_DECLS


108 
i386_gë_ldt
(, 
des¸ùt‹
 *, );

109 
i386_£t_ldt
(, 
des¸ùt‹
 *, );

110 
i386_gë_i›îm
(, *, *);

111 
i386_£t_i›îm
(, , );

112 
i386_vm86
(, *);

113 
i386_gë_fsba£
(**);

114 
i386_gë_gsba£
(**);

115 
i386_£t_fsba£
(*);

116 
i386_£t_gsba£
(*);

117 
i386_£t_w©ch
(, , , , 
dbªg
 *);

118 
i386_˛r_w©ch
(, 
dbªg
 *);

119 
amd64_gë_fsba£
(**);

120 
amd64_gë_gsba£
(**);

121 
amd64_£t_fsba£
(*);

122 
amd64_£t_gsba£
(*);

123 
syßrch
(, *);

124 
	g__END_DECLS


126 
	gthªad
;

127 
	gdes¸ùt‹
;

129 
i386_gë_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *);

130 
i386_£t_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *, 
des¸ùt‹
 *);

131 
i386_gë_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

132 
i386_£t_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

133 
amd64_gë_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *);

134 
amd64_£t_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *,

135 
u£r_£gmít_des¸ùt‹
 *);

136 
amd64_gë_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

137 
amd64_£t_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

	@src/nvidia-drm/x86/trap.h

38 #i‚de‡
_MACHINE_TRAP_H_


39 
	#_MACHINE_TRAP_H_


	)

46 
	#T_PRIVINFLT
 1

	)

47 
	#T_BPTFLT
 3

	)

48 
	#T_ARITHTRAP
 6

	)

49 
	#T_PROTFLT
 9

	)

50 
	#T_TRCTRAP
 10

	)

51 
	#T_PAGEFLT
 12

	)

52 
	#T_ALIGNFLT
 14

	)

54 
	#T_DIVIDE
 18

	)

55 
	#T_NMI
 19

	)

56 
	#T_OFLOW
 20

	)

57 
	#T_BOUND
 21

	)

58 
	#T_DNA
 22

	)

59 
	#T_DOUBLEFLT
 23

	)

60 
	#T_FPOPFLT
 24

	)

61 
	#T_TSSFLT
 25

	)

62 
	#T_SEGNPFLT
 26

	)

63 
	#T_STKFLT
 27

	)

64 
	#T_MCHK
 28

	)

65 
	#T_XMMFLT
 29

	)

66 
	#T_RESERVED
 30

	)

67 
	#T_DTRACE_RET
 32

	)

70 
	#T_USER
 0x100

	)

	@src/nvidia-drm/x86/ucode.h

33 #i‚de‡
_MACHINE_UCODE_H_


34 
	#_MACHINE_UCODE_H_


	)

36 
	sucode_öãl_hódî
 {

37 
uöt32_t
 
	mhódî_vîsi⁄
;

38 
öt32_t
 
	mupd©e_ªvisi⁄
;

39 
uöt32_t
 
	md©
;

40 
uöt32_t
 
	m¥o˚ss‹_sig«tuª
;

41 
uöt32_t
 
	mchecksum
;

42 
uöt32_t
 
	mlﬂdî_ªvisi⁄
;

43 
uöt32_t
 
	m¥o˚ss‹_Êags
;

44 
	#UCODE_INTEL_DEFAULT_DATA_SIZE
 2000

	)

45 
uöt32_t
 
	md©a_size
;

46 
uöt32_t
 
	mtŸÆ_size
;

47 
uöt32_t
 
	mª£rved
[3];

50 
	sucode_öãl_extsig_èbÀ
 {

51 
uöt32_t
 
	msig«tuª_cou¡
;

52 
uöt32_t
 
	msig«tuª_èbÀ_checksum
;

53 
uöt32_t
 
	mª£rved
[3];

54 
	sucode_öãl_extsig
 {

55 
uöt32_t
 
	m¥o˚ss‹_sig«tuª
;

56 
uöt32_t
 
	m¥o˚ss‹_Êags
;

57 
uöt32_t
 
	mchecksum
;

58 } 
	míåõs
[0];

61 
ucode_öãl_lﬂd
(*
d©a
, 
boﬁ
 
unß„
,

62 
uöt64_t
 *
ƒevp
, uöt64_à*
‹evp
);

63 
size_t
 
ucode_lﬂd_b•
(
uöçå_t
 
‰ì
);

64 
ucode_lﬂd_≠
(
˝u
);

65 
ucode_ªlﬂd
();

66 * 
ucode_upd©e
(*
d©a
);

	@src/nvidia-drm/x86/ucontext.h

34 #i‚de‡
_X86_UCONTEXT_H_


35 
	#_X86_UCONTEXT_H_


	)

37 #ifde‡
__i386__


39 
	#_MC_HASSEGS
 0x1

	)

40 
	#_MC_HASBASES
 0x2

	)

41 
	#_MC_HASFPXSTATE
 0x4

	)

42 
	#_MC_FLAG_MASK
 (
_MC_HASSEGS
 | 
_MC_HASBASES
 | 
_MC_HASFPXSTATE
)

	)

44 
	s__mc⁄ãxt
 {

51 
__ªgi°î_t
 
	mmc_⁄°ack
;

52 
__ªgi°î_t
 
	mmc_gs
;

53 
__ªgi°î_t
 
	mmc_fs
;

54 
__ªgi°î_t
 
	mmc_es
;

55 
__ªgi°î_t
 
	mmc_ds
;

56 
__ªgi°î_t
 
	mmc_edi
;

57 
__ªgi°î_t
 
	mmc_esi
;

58 
__ªgi°î_t
 
	mmc_ebp
;

59 
__ªgi°î_t
 
	mmc_i•
;

60 
__ªgi°î_t
 
	mmc_ebx
;

61 
__ªgi°î_t
 
	mmc_edx
;

62 
__ªgi°î_t
 
	mmc_ecx
;

63 
__ªgi°î_t
 
	mmc_óx
;

64 
__ªgi°î_t
 
	mmc_å≠no
;

65 
__ªgi°î_t
 
	mmc_îr
;

66 
__ªgi°î_t
 
	mmc_eù
;

67 
__ªgi°î_t
 
	mmc_cs
;

68 
__ªgi°î_t
 
	mmc_eÊags
;

69 
__ªgi°î_t
 
	mmc_e•
;

70 
__ªgi°î_t
 
	mmc_ss
;

72 
	mmc_Àn
;

73 
	#_MC_FPFMT_NODEV
 0x10000

	)

74 
	#_MC_FPFMT_387
 0x10001

	)

75 
	#_MC_FPFMT_XMM
 0x10002

	)

76 
	mmc_Âf‹m©
;

77 
	#_MC_FPOWNED_NONE
 0x20000

	)

78 
	#_MC_FPOWNED_FPU
 0x20001

	)

79 
	#_MC_FPOWNED_PCB
 0x20002

	)

80 
	mmc_ow√dÂ
;

81 
__ªgi°î_t
 
	mmc_Êags
;

85 
	mmc_Â°©e
[128] 
__Æig√d
(16);

87 
__ªgi°î_t
 
	mmc_fsba£
;

88 
__ªgi°î_t
 
	mmc_gsba£
;

90 
__ªgi°î_t
 
	mmc_xÂu°©e
;

91 
__ªgi°î_t
 
	mmc_xÂu°©e_Àn
;

93 
	mmc_•¨e2
[4];

94 } 
	tmc⁄ãxt_t
;

97 #ifde‡
__amd64__


101 
	#_MC_HASSEGS
 0x1

	)

102 
	#_MC_HASBASES
 0x2

	)

103 
	#_MC_HASFPXSTATE
 0x4

	)

104 
	#_MC_FLAG_MASK
 (
_MC_HASSEGS
 | 
_MC_HASBASES
 | 
_MC_HASFPXSTATE
)

	)

106 
	s__mc⁄ãxt
 {

113 
__ªgi°î_t
 
	mmc_⁄°ack
;

114 
__ªgi°î_t
 
	mmc_rdi
;

115 
__ªgi°î_t
 
	mmc_rsi
;

116 
__ªgi°î_t
 
	mmc_rdx
;

117 
__ªgi°î_t
 
	mmc_rcx
;

118 
__ªgi°î_t
 
	mmc_r8
;

119 
__ªgi°î_t
 
	mmc_r9
;

120 
__ªgi°î_t
 
	mmc_øx
;

121 
__ªgi°î_t
 
	mmc_rbx
;

122 
__ªgi°î_t
 
	mmc_rbp
;

123 
__ªgi°î_t
 
	mmc_r10
;

124 
__ªgi°î_t
 
	mmc_r11
;

125 
__ªgi°î_t
 
	mmc_r12
;

126 
__ªgi°î_t
 
	mmc_r13
;

127 
__ªgi°î_t
 
	mmc_r14
;

128 
__ªgi°î_t
 
	mmc_r15
;

129 
__uöt32_t
 
	mmc_å≠no
;

130 
__uöt16_t
 
	mmc_fs
;

131 
__uöt16_t
 
	mmc_gs
;

132 
__ªgi°î_t
 
	mmc_addr
;

133 
__uöt32_t
 
	mmc_Êags
;

134 
__uöt16_t
 
	mmc_es
;

135 
__uöt16_t
 
	mmc_ds
;

136 
__ªgi°î_t
 
	mmc_îr
;

137 
__ªgi°î_t
 
	mmc_rù
;

138 
__ªgi°î_t
 
	mmc_cs
;

139 
__ªgi°î_t
 
	mmc_rÊags
;

140 
__ªgi°î_t
 
	mmc_r•
;

141 
__ªgi°î_t
 
	mmc_ss
;

143 
	mmc_Àn
;

145 
	#_MC_FPFMT_NODEV
 0x10000

	)

146 
	#_MC_FPFMT_XMM
 0x10002

	)

147 
	mmc_Âf‹m©
;

148 
	#_MC_FPOWNED_NONE
 0x20000

	)

149 
	#_MC_FPOWNED_FPU
 0x20001

	)

150 
	#_MC_FPOWNED_PCB
 0x20002

	)

151 
	mmc_ow√dÂ
;

155 
	mmc_Â°©e
[64] 
__Æig√d
(16);

157 
__ªgi°î_t
 
	mmc_fsba£
;

158 
__ªgi°î_t
 
	mmc_gsba£
;

160 
__ªgi°î_t
 
	mmc_xÂu°©e
;

161 
__ªgi°î_t
 
	mmc_xÂu°©e_Àn
;

163 
	mmc_•¨e
[4];

164 } 
	tmc⁄ãxt_t
;

	@src/nvidia-drm/x86/vdso.h

34 #i‚de‡
_X86_VDSO_H


35 
	#_X86_VDSO_H


	)

37 
	#VDSO_TIMEHANDS_MD
 \

38 
uöt32_t
 
th_x86_shi·
; \

39 
uöt32_t
 
th_x86_h≥t_idx
; \

40 
uöt32_t
 
th_ªs
[6];

	)

42 
	#VDSO_TH_ALGO_X86_TSC
 
VDSO_TH_ALGO_1


	)

43 
	#VDSO_TH_ALGO_X86_HPET
 
VDSO_TH_ALGO_2


	)

44 
	#VDSO_TH_ALGO_X86_HVTSC
 
VDSO_TH_ALGO_3


	)

46 #ifde‡
_KERNEL


47 #ifde‡
COMPAT_FREEBSD32


49 
	#VDSO_TIMEHANDS_MD32
 
VDSO_TIMEHANDS_MD


	)

	@src/nvidia-drm/x86/vmware.h

29 #i‚de‡
_X86_VMWARE_H_


30 
	#_X86_VMWARE_H_


	)

32 
	#VMW_HVMAGIC
 0x564d5868

	)

33 
	#VMW_HVPORT
 0x5658

	)

35 
	#VMW_HVCMD_GETVERSION
 10

	)

36 
	#VMW_HVCMD_GETHZ
 45

	)

37 
	#VMW_HVCMD_GETVCPU_INFO
 68

	)

39 
	#VMW_VCPUINFO_LEGACY_X2APIC
 (1 << 3)

	)

40 
	#VMW_VCPUINFO_VCPU_RESERVED
 (1 << 31)

	)

42 
__ölöe
 

43 
	$vmw¨e_hvˇŒ
(
u_öt
 
cmd
, u_öà*
p
)

46 
__asm
 
	`__vﬁ©ûe
("inl %w3, %0"

47 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

48 : "0" (
VMW_HVMAGIC
), "1" (
UINT_MAX
), "2" (
cmd
), "3" (
VMW_HVPORT
)

50 
	}
}

	@src/nvidia-drm/x86/x86_smp.h

15 #i‚de‡
_X86_X86_SMP_H_


16 
	#_X86_X86_SMP_H_


	)

18 
	~<sys/bus.h
>

19 
	~<machöe/‰ame.h
>

20 
	~<machöe/öå_machdï.h
>

21 
	~<x86/≠icv¨.h
>

22 
	~<machöe/pcb.h
>

24 
	gpm≠
;

27 
mp_«ps
;

28 
boŸ_˝u_id
;

29 
pcb
 
°›pcbs
[];

30 
˝u_≠ic_ids
[];

31 
boŸAP
;

32 *
dp˝u
;

33 *
boŸSTK
;

34 *
boŸ°acks
[];

35 
boŸ_addªss
;

36 
boŸMP_size
;

37 vﬁ©ûê
u_öt
 
˝u_ùi_≥ndög
[];

38 vﬁ©ûê
≠s_ªady
;

39 
mtx
 
≠_boŸ_mtx
;

40 
˝u_logiˇl
;

41 
˝u_c‹es
;

42 vﬁ©ûê
uöt32_t
 
smp_éb_gíî©i⁄
;

43 
pm≠
 *
smp_éb_pm≠
;

44 
vm_off£t_t
 
smp_éb_addr1
, 
smp_éb_addr2
;

45 
u_öt
 
xhôs_gbl
[];

46 
u_öt
 
xhôs_pg
[];

47 
u_öt
 
xhôs_∫g
[];

48 
u_öt
 
ùi_globÆ
;

49 
u_öt
 
ùi_∑ge
;

50 
u_öt
 
ùi_ønge
;

51 
u_öt
 
ùi_ønge_size
;

53 
nmi_kdb_lock
;

54 
nmi_is_brﬂdˇ°
;

56 
	s˝u_öfo
 {

57 
	m˝u_¥e£¡
:1;

58 
	m˝u_b•
:1;

59 
	m˝u_dißbÀd
:1;

60 
	m˝u_hy≥πhªad
:1;

62 
˝u_öfo
 *cpu_info;

64 #ifde‡
COUNT_IPIS


65 
u_l⁄g
 *
ùi_öv…lb_cou¡s
[
MAXCPU
];

66 
u_l⁄g
 *
ùi_övÃng_cou¡s
[
MAXCPU
];

67 
u_l⁄g
 *
ùi_övÕg_cou¡s
[
MAXCPU
];

68 
u_l⁄g
 *
ùi_övlˇche_cou¡s
[
MAXCPU
];

69 
u_l⁄g
 *
ùi_ªndezvous_cou¡s
[
MAXCPU
];

73 
öth™d_t


74 
IDTVEC
(
öv…lb
),

75 
IDTVEC
(
övÕg
),

76 
IDTVEC
(
övÃng
),

77 
IDTVEC
(
övlˇche
),

78 
IDTVEC
(
ùi_öå_bôm≠_h™dÀr
),

79 
IDTVEC
(
˝u°›
),

80 
IDTVEC
(
˝usu•íd
),

81 
IDTVEC
(
ªndezvous
);

84 
assign_˝u_ids
();

85 
˝u_add
(
u_öt
 
≠ic_id
, 
boŸ_˝u
);

86 
˝u°›_h™dÀr
();

87 
˝usu•íd_h™dÀr
();

88 
Æloc_≠_åampﬁöe
(
vm_∑ddr_t
 *
physm≠
, *
physm≠_idx
);

89 
öô_£c⁄d¨y_èû
();

90 
öv…lb_h™dÀr
();

91 
övÕg_h™dÀr
();

92 
övÃng_h™dÀr
();

93 
övlˇche_h™dÀr
();

94 
öô_£c⁄d¨y
();

95 
ùi_°¨tup
(
≠ic_id
, 
ve˘‹
);

96 
ùi_Æl_but_£lf
(
u_öt
 
ùi
);

97 
ùi_bôm≠_h™dÀr
(
å≠‰ame
 
‰ame
);

98 
ùi_˝u
(
˝u
, 
u_öt
 
ùi
);

99 
ùi_nmi_h™dÀr
();

100 
ùi_£À˘ed
(
˝u£t_t
 
˝us
, 
u_öt
 
ùi
);

101 
£t_öãºu±_≠ic_ids
();

102 
smp_ˇche_Êush
();

103 
smp_masked_övÕg
(
˝u£t_t
 
mask
, 
vm_off£t_t
 
addr
, 
pm≠
 *pmap);

104 
smp_masked_övÕg_ønge
(
˝u£t_t
 
mask
, 
vm_off£t_t
 
°¨tva
,

105 
vm_off£t_t
 
ídva
, 
pm≠
 *pmap);

106 
smp_masked_öv…lb
(
˝u£t_t
 
mask
, 
pm≠
 *pmap);

107 
mem_ønge_AP_öô
();

108 
t›o_¥obe
();

109 
ùi_£nd_˝u
(
˝u
, 
u_öt
 
ùi
);

	@src/nvidia-drm/x86/x86_var.h

32 #i‚de‡
_X86_X86_VAR_H_


33 
	#_X86_X86_VAR_H_


	)

39 
Maxmem
;

40 
u_öt
 
ba£mem
;

41 
busdma_swi_≥ndög
;

42 
u_öt
 
˝u_exthigh
;

43 
u_öt
 
˝u_„©uª
;

44 
u_öt
 
˝u_„©uª2
;

45 
u_öt
 
amd_„©uª
;

46 
u_öt
 
amd_„©uª2
;

47 
u_öt
 
amd_øsˇp
;

48 
u_öt
 
amd_pmöfo
;

49 
u_öt
 
amd_exãnded_„©uª_exãnsi⁄s
;

50 
u_öt
 
vü_„©uª_∫g
;

51 
u_öt
 
vü_„©uª_x¸y±
;

52 
u_öt
 
˝u_˛Êush_löe_size
;

53 
u_öt
 
˝u_°dext_„©uª
;

54 
u_öt
 
˝u_°dext_„©uª2
;

55 
u_öt
 
˝u_°dext_„©uª3
;

56 
uöt64_t
 
˝u_ü32_¨ch_ˇps
;

57 
u_öt
 
˝u_fx§
;

58 
u_öt
 
˝u_high
;

59 
u_öt
 
˝u_id
;

60 
u_öt
 
˝u_max_ext_°©e_size
;

61 
u_öt
 
˝u_mxc§_mask
;

62 
u_öt
 
˝u_¥ocöfo
;

63 
u_öt
 
˝u_¥ocöfo2
;

64 
˝u_víd‹
[];

65 
u_öt
 
˝u_víd‹_id
;

66 
u_öt
 
˝u_m⁄_mwaô_Êags
;

67 
u_öt
 
˝u_m⁄_mö_size
;

68 
u_öt
 
˝u_m⁄_max_size
;

69 
u_öt
 
˝u_maxphyaddr
;

70 
˘x_swôch_xßve
[];

71 
u_öt
 
hv_high
;

72 
hv_víd‹
[];

73 
k°ack
[];

74 
sigcode
[];

75 
szsigcode
;

76 
vm_∑ge_dump_size
;

77 
w‹k¨ound_îøtum383
;

78 
_ud©a£l
;

79 
_ucode£l
;

80 
_ucode32£l
;

81 
_ufs£l
;

82 
_ugs£l
;

83 
u£_xßve
;

84 
uöt64_t
 
xßve_mask
;

85 
u_öt
 
max_≠ic_id
;

86 
±i
;

87 
hw_ibrs_a˘ive
;

88 
hw_ssb_a˘ive
;

90 
	gpcb
;

91 
	gthªad
;

92 
	gªg
;

93 
	gÂªg
;

94 
	gdbªg
;

95 
	gdum≥röfo
;

96 
	gå≠‰ame
;

103 
	tÆüs_f‹_öth™d_t
();

109 
__ölöe
 
vm_∑ddr_t


110 
	$˝u_gëmaxphyaddr
()

112 #i‡
	`deföed
(
__i386__
Ë&& !deföed(
PAE
)

115  ((1ULL << 
˝u_maxphyaddr
) - 1);

117 
	}
}

119 
boﬁ
 
a˝i_gë_Ádt_boŸÊags
(
uöt16_t
 *
Êag•
);

120 *
Æloc_Âußve
(
Êags
);

121 
busdma_swi
();

122 
boﬁ
 
˝u_mwaô_ußbÀ
();

123 
˝u_¥obe_amdc1e
();

124 
˝u_£åegs
();

125 
boﬁ
 
dißbÀ_wp
();

126 
ª°‹e_wp
(
boﬁ
 
ﬁd_wp
);

127 
dump_add_∑ge
(
vm_∑ddr_t
);

128 
dump_dr›_∑ge
(
vm_∑ddr_t
);

129 
föishidít˝u
();

130 
idítify_˝u1
();

131 
idítify_˝u2
();

132 
idítify_hy≥rvis‹
();

133 
öôülize˝u
();

134 
öôülize˝uˇche
();

135 
boﬁ
 
fix_˝uid
();

136 
fûlw
(
∑t
, *
ba£
, 
size_t
 
˙t
);

137 
is_physiˇl_mem‹y
(
vm_∑ddr_t
 
addr
);

138 
iß_nmi
(
cd
);

139 
h™dÀ_ibrs_íåy
();

140 
h™dÀ_ibrs_exô
();

141 
hw_ibrs_ªˇlcuœã
();

142 
hw_ssb_ªˇlcuœã
(
boﬁ
 
Æl_˝us
);

143 
nmi_ˇŒ_kdb
(
u_öt
 
˝u
, u_öà
ty≥
, 
å≠‰ame
 *
‰ame
);

144 
nmi_ˇŒ_kdb_smp
(
u_öt
 
ty≥
, 
å≠‰ame
 *
‰ame
);

145 
nmi_h™dÀ_öå
(
u_öt
 
ty≥
, 
å≠‰ame
 *
‰ame
);

146 
∑gec›y
(*
‰om
, *
to
);

147 
¥öt˝uöfo
();

148 
±i_gë_deÁu…
();

149 
u£r_dbªg_å≠
(
ªgi°î_t
 
dr6
);

150 
möidumpsys
(
dum≥röfo
 *);

151 
pcb
 *
gë_pcb_td
(
thªad
 *
td
);

	@src/nvidia-drm/x86/xen/xen-os.h

30 #i‚de‡
_MACHINE_X86_XEN_XEN_OS_H_


31 
	#_MACHINE_X86_XEN_XEN_OS_H_


	)

34 #i‚de‡
__ASSEMBLY__


	@src/nvidia-modeset/nvidia-modeset-freebsd.c

11 
	~<sys/ty≥s.h
>

12 
	~<sys/moduÀ.h
>

13 
	~<sys/î∫o.h
>

14 
	~<sys/∑øm.h
>

15 
	~<sys/kî√l.h
>

16 
	~<sys/mÆloc.h
>

17 
	~<sys/ioccom.h
>

18 
	~<sys/libkîn.h
>

19 
	~<sys/lock.h
>

20 
	~<sys/sx.h
>

21 
	~<sys/c⁄f.h
>

22 
	~<sys/sy¶og.h
>

23 
	~<sys/queue.h
>

24 
	~<sys/èskqueue.h
>

25 
	~<sys/£löfo.h
>

26 
	~<sys/pﬁl.h
>

27 
	~<sys/fûe.h
>

28 
	~<sys/¥oc.h
>

30 
	~"nvkms-io˘l.h
"

31 
	~"nvidü-mode£t-os-öãrÁ˚.h
"

32 
	~"nvkms.h
"

33 
	~"nv-mode£t-öãrÁ˚.h
"

41 
	#NVKMS_SUPPORT_LINUX_COMPAT


	)

43 #i‡
deföed
(
NVKMS_SUPPORT_LINUX_COMPAT
)

44 #i‡
deföed
(
NVCPU_X86
)

45 
	~"löux/löux.h
"

46 
	~"löux/löux_¥Ÿo.h
"

47 #ñi‡
deföed
(
NVCPU_X86_64
)

48 
	~"löux32/löux.h
"

49 
	~"löux32/löux32_¥Ÿo.h
"

51 
	~<com∑t/löux/löux_io˘l.h
>

55 
	#NVKMS_LOG_PREFIX
 "nvidü-mode£t: "

	)

57 
	#NVKMS_CDEV_MINOR
 254

	)

59 
	#NVKMS_USECS_TO_TICKS
(
u£c
Ë((u£cË* 
hz
 / 1000000)

	)

61 
MALLOC_DEFINE
(
M_NVIDIA_MODESET
,

64 
nvkms_˛o£
(*
¨g
);

71 
sx
 
	gnvkms_lock
;

78 
sx
 
	mlock
;

79 
	m˛õ¡_cou¡î
;

80 
NvBoﬁ
 
	mis_u∆ﬂdög
;

81 } 
	gnvkms_moduÀ
;

88 
	snvkms_≥r_›í
 {

89 *
	md©a
;

92 
mtx
 
	mlock
;

93 
uöt32_t
 
	mavaûabÀ
;

94 
£löfo
 
	m£À˘
;

95 } 
	mevíts
;

98 
mtx
 
	mlock
;

99 
èsk
 
	mèsk
;

100 } 
	mèsks
;

109 * 
NVKMS_API_CALL
 
	$nvkms_Æloc
(
size_t
 
size
, 
NvBoﬁ
 
zîo
)

112 *
ªt
 = 
	`mÆloc
(
size
, 
M_NVIDIA_MODESET
, 
M_WAITOK
 | (
zîo
 ? 
M_ZERO
 : 0));

114  
ªt
;

115 
	}
}

117 
NVKMS_API_CALL
 
	$nvkms_‰ì
(*
±r
, 
size_t
 
size
)

120 
	`‰ì
(
±r
, 
M_NVIDIA_MODESET
);

121 
	}
}

123 * 
NVKMS_API_CALL
 
	$nvkms_mem£t
(*
±r
, 
NvU8
 
c
, 
size_t
 
size
)

126  
	`mem£t
(
±r
, 
c
, 
size
);

127 
	}
}

129 * 
NVKMS_API_CALL
 
	$nvkms_mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
)

132  
	`mem˝y
(
de°
, 
§c
, 
n
);

133 
	}
}

135 * 
NVKMS_API_CALL
 
	$nvkms_memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
n
)

138  
	`memmove
(
de°
, 
§c
, 
n
);

139 
	}
}

141 
NVKMS_API_CALL
 
	$nvkms_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

144  
	`memcmp
(
s1
, 
s2
, 
n
);

145 
	}
}

147 
size_t
 
NVKMS_API_CALL
 
	$nvkms_°æí
(c⁄° *
s
)

150  
	`°æí
(
s
);

151 
	}
}

153 
NVKMS_API_CALL
 
	$nvkms_°rcmp
(c⁄° *
s1
, c⁄° *
s2
)

156  
	`°rcmp
(
s1
, 
s2
);

157 
	}
}

159 * 
NVKMS_API_CALL
 
	$nvkms_°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
n
)

162  
	`°∫˝y
(
de°
, 
§c
, 
n
);

163 
	}
}

165 
NVKMS_API_CALL
 
	$nvkms_u¶ìp
(
NvU64
 
u£c
)

168 
	`DELAY
(
u£c
);

169 
	}
}

171 
NvU64
 
NVKMS_API_CALL
 
	$nvkms_gë_u£c
()

173 
timevÆ
 
tv
;

175 
	`gëmi¸Ÿime
(&
tv
);

178  (((
NvU64
)
tv
.
tv_£c
Ë* 1000000Ë+Åv.
tv_u£c
;

179 
	}
}

181 
NVKMS_API_CALL
 
	$nvkms_c›yö
(*
k±r
, 
NvU64
 
uaddr
, 
size_t
 
n
)

183 i‡(!
	`nvKmsNvU64AddªssIsSa„
(
uaddr
)) {

184  
EINVAL
;

187 
ªt
 = 
	`c›yö
(
	`nvKmsNvU64ToPoöãr
(
uaddr
), 
k±r
, 
n
);

188  
ªt
;

189 
	}
}

191 
NVKMS_API_CALL
 
	$nvkms_c›yout
(
NvU64
 
uaddr
, c⁄° *
k±r
, 
size_t
 
n
)

193 i‡(!
	`nvKmsNvU64AddªssIsSa„
(
uaddr
)) {

194  
EINVAL
;

197 
ªt
 = 
	`c›yout
(
k±r
, 
	`nvKmsNvU64ToPoöãr
(
uaddr
), 
n
);

198  
ªt
;

199 
	}
}

201 
NVKMS_API_CALL
 
	$nvkms_yõld
()

203 
	`∑u£
("yield", 1 );

204 
	}
}

206 
NVKMS_API_CALL
 
	$nvkms_¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

208 
ªt
;

209 
va_li°
 
≠
;

211 
	`va_°¨t
(
≠
, 
f‹m©
);

212 
ªt
 = 
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
≠
);

213 
	`va_íd
(
≠
);

215  
ªt
;

216 
	}
}

218 
NVKMS_API_CALL
 
	$nvkms_v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

220  
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
≠
);

221 
	}
}

223 
NVKMS_API_CALL
 
	$nvkms_log
(c⁄° 
Àvñ
, c⁄° *
gpuPªfix
, c⁄° *
msg
)

225 
¥i‹ôy
;

226 c⁄° *
ÀvñPªfix
;

228 
Àvñ
) {

230 
NVKMS_LOG_LEVEL_INFO
:

231 
ÀvñPªfix
 = "";

232 
¥i‹ôy
 = 
LOG_INFO
;

234 
NVKMS_LOG_LEVEL_WARN
:

235 
ÀvñPªfix
 = "WARNING: ";

236 
¥i‹ôy
 = 
LOG_WARNING
;

238 
NVKMS_LOG_LEVEL_ERROR
:

239 
ÀvñPªfix
 = "ERROR: ";

240 
¥i‹ôy
 = 
LOG_ERR
;

244 
	`log
(
¥i‹ôy
, "%s%s%s%s\n", 
NVKMS_LOG_PREFIX
, 
ÀvñPªfix
, 
gpuPªfix
, 
msg
);

245 
	}
}

247 
NVKMS_API_CALL


248 
	$nvkms_evít_queue_ch™ged
(
nvkms_≥r_›í_h™dÀ_t
 *
pO≥nKî√l
,

249 
NvBoﬁ
 
evítsAvaûabÀ
)

253 
nvkms_≥r_›í
 *
p›í
 = 
pO≥nKî√l
;

255 
	`mtx_lock
(&
p›í
->
evíts
.
lock
);

257 
p›í
->
evíts
.
avaûabÀ
 = 
evítsAvaûabÀ
;

259 
	`£lwakeup
(&
p›í
->
evíts
.
£À˘
);

261 
	`mtx_u∆ock
(&
p›í
->
evíts
.
lock
);

262 
	}
}

268 
	snvkms_ªf_±r
 {

269 
mtx
 
	mlock
;

270 
	mªf˙t
;

272 *
	m±r
;

275 
nvkms_ªf_±r
* 
NVKMS_API_CALL
 
	$nvkms_Æloc_ªf_±r
(*
±r
)

278 
nvkms_ªf_±r
 *
ªf_±r
 = 
	`nvkms_Æloc
((*ªf_±r), 
NV_FALSE
);

279 i‡(
ªf_±r
) {

280 
	`mtx_öô
(&
ªf_±r
->
lock
, "nvkms-ªf-±r-lock", 
NULL
, 
MTX_SPIN
);

282 
ªf_±r
->
ªf˙t
 = 1;

283 
ªf_±r
->
±r
 =Ötr;

286  
ªf_±r
;

287 
	}
}

289 
NVKMS_API_CALL
 
	$nvkms_‰ì_ªf_±r
(
nvkms_ªf_±r
 *
ªf_±r
)

292 i‡(
ªf_±r
) {

293 
ªf_±r
->
±r
 = 
NULL
;

295 
	`nvkms_dec_ªf
(
ªf_±r
);

297 
	}
}

299 
NVKMS_API_CALL
 
	$nvkms_öc_ªf
(
nvkms_ªf_±r
 *
ªf_±r
)

302 
	`mtx_lock_•ö
(&
ªf_±r
->
lock
);

303 
ªf_±r
->
ªf˙t
++;

304 
	`mtx_u∆ock_•ö
(&
ªf_±r
->
lock
);

305 
	}
}

307 * 
NVKMS_API_CALL
 
	$nvkms_dec_ªf
(
nvkms_ªf_±r
 *
ªf_±r
)

309 *
±r
 = 
ªf_±r
->ptr;

312 
	`mtx_lock_•ö
(&
ªf_±r
->
lock
);

313 i‡(--
ªf_±r
->
ªf˙t
 == 0) {

314 
	`mtx_de°roy
(&
ªf_±r
->
lock
);

315 
	`nvkms_‰ì
(
ªf_±r
, (*ref_ptr));

317 
	`mtx_u∆ock_•ö
(&
ªf_±r
->
lock
);

321  
±r
;

322 
	}
}

348 
TASKQUEUE_DEFINE_THREAD
(
nvkms
);

350 
	snvkms_timî_t
 {

351 
ˇŒout
 
	mˇŒout
;

352 
èsk
 
	mèsk
;

353 
NvBoﬁ
 
	mˇn˚l
;

354 
NvBoﬁ
 
	mcom∂ëe
;

355 
NvBoﬁ
 
	misRefPå
;

356 
NvBoﬁ
 
	mˇŒout_¸óãd
;

357 
nvkms_timî_¥oc_t
 *
	m¥oc
;

358 *
	md©aPå
;

359 
NvU32
 
	md©aU32
;

360 
LIST_ENTRY
(
nvkms_timî_t
Ë
	mtimîs_li°
;

367 
sx
 
	mlock
;

368 
LIST_HEAD
(
nvkms_timîs_hód
, 
nvkms_timî_t
Ë
	mli°
;

369 } 
	gnvkms_timîs
;

371 
	$nvkms_èskqueue_ˇŒback
(*
¨g
, 
≥ndög
)

373 
nvkms_timî_t
 *
timî
 = 
¨g
;

374 *
d©aPå
;

380 
	`sx_xlock
(&
nvkms_timîs
.
lock
);

381 
	`LIST_REMOVE
(
timî
, 
timîs_li°
);

382 
	`sx_xu∆ock
(&
nvkms_timîs
.
lock
);

390 i‡(
timî
->
ˇŒout_¸óãd
) {

391 
	`ˇŒout_døö
(&
timî
->
ˇŒout
);

394 
	`sx_xlock
(&
nvkms_lock
);

396 i‡(
timî
->
isRefPå
) {

399 
d©aPå
 = 
	`nvkms_dec_ªf
(
timî
->dataPtr);

400 i‡(!
d©aPå
) {

401 
timî
->
ˇn˚l
 = 
NV_TRUE
;

404 
d©aPå
 = 
timî
->dataPtr;

407 i‡(!
timî
->
ˇn˚l
) {

408 
timî
->
	`¥oc
(
d©aPå
,Åimî->
d©aU32
);

409 
timî
->
com∂ëe
 = 
NV_TRUE
;

412 i‡(
timî
->
ˇn˚l
 ||Åimî->
isRefPå
) {

413 
	`nvkms_‰ì
(
timî
, (*timer));

416 
	`sx_xu∆ock
(&
nvkms_lock
);

417 
	}
}

419 
	$nvkms_ˇŒout_ˇŒback
(*
¨g
)

421 
nvkms_timî_t
 *
timî
 = 
¨g
;

424 
	`èskqueue_íqueue
(
èskqueue_nvkms
, &
timî
->
èsk
);

425 
	}
}

428 
	$nvkms_öô_timî
(
nvkms_timî_t
 *
timî
, 
nvkms_timî_¥oc_t
 *
¥oc
,

429 *
d©aPå
, 
NvU32
 
d©aU32
, 
NvBoﬁ
 
isRefPå
, 
NvU64
 
u£c
)

431 
timî
->
ˇn˚l
 = 
NV_FALSE
;

432 
timî
->
com∂ëe
 = 
NV_FALSE
;

433 
timî
->
isRefPå
 = isRefPtr;

435 
timî
->
¥oc
 =Öroc;

436 
timî
->
d©aPå
 = dataPtr;

437 
timî
->
d©aU32
 = dataU32;

439 
	`TASK_INIT
(&
timî
->
èsk
,

441 
nvkms_èskqueue_ˇŒback
, (*)
timî
);

450 
	`sx_xlock
(&
nvkms_timîs
.
lock
);

451 
	`LIST_INSERT_HEAD
(&
nvkms_timîs
.
li°
, 
timî
, 
timîs_li°
);

453 i‡(
u£c
 == 0) {

454 
timî
->
ˇŒout_¸óãd
 = 
NV_FALSE
;

455 
	`èskqueue_íqueue
(
èskqueue_nvkms
, &
timî
->
èsk
);

458 
	`ˇŒout_öô
(&
timî
->
ˇŒout
, 
CALLOUT_MPSAFE
);

459 
timî
->
ˇŒout_¸óãd
 = 
NV_TRUE
;

460 
	`ˇŒout_ª£t
(&
timî
->
ˇŒout
,

461 
	`NVKMS_USECS_TO_TICKS
(
u£c
),

462 
nvkms_ˇŒout_ˇŒback
, (*Ë
timî
);

464 
	`sx_xu∆ock
(&
nvkms_timîs
.
lock
);

465 
	}
}

467 
nvkms_timî_h™dÀ_t
*

468 
NVKMS_API_CALL
 
	$nvkms_Æloc_timî
(
nvkms_timî_¥oc_t
 *
¥oc
,

469 *
d©aPå
, 
NvU32
 
d©aU32
,

470 
NvU64
 
u£c
)

473 
nvkms_timî_t
 *
timî
 = 
	`nvkms_Æloc
((*timî), 
NV_TRUE
);

474 i‡(
timî
) {

475 
	`nvkms_öô_timî
(
timî
, 
¥oc
, 
d©aPå
, 
d©aU32
, 
NV_FALSE
, 
u£c
);

477  
timî
;

478 
	}
}

480 
NvBoﬁ
 
NVKMS_API_CALL


481 
	$nvkms_Æloc_timî_wôh_ªf_±r
(
nvkms_timî_¥oc_t
 *
¥oc
,

482 
nvkms_ªf_±r
 *
ªf_±r
,

483 
NvU32
 
d©aU32
, 
NvU64
 
u£c
)

488 
nvkms_timî_t
 *
timî
 = 
	`mÆloc
((*timî), 
M_NVIDIA_MODESET
,

489 
M_NOWAIT
 | 
M_ZERO
);

490 i‡(
timî
) {

493 
	`nvkms_öc_ªf
(
ªf_±r
);

494 
	`nvkms_öô_timî
(
timî
, 
¥oc
, 
ªf_±r
, 
d©aU32
, 
NV_TRUE
, 
u£c
);

497  
timî
 !
NULL
;

498 
	}
}

500 
NVKMS_API_CALL
 
	$nvkms_‰ì_timî
(
nvkms_timî_h™dÀ_t
 *
h™dÀ
)

502 
nvkms_timî_t
 *
timî
 = 
h™dÀ
;

504 i‡(
timî
 =
NULL
) {

508 i‡(
timî
->
com∂ëe
) {

509 
	`nvkms_‰ì
(
timî
, (*timer));

513 
timî
->
ˇn˚l
 = 
NV_TRUE
;

514 
	}
}

516 
	$nvkms_su•íd
(
NvU32
 
gpuId
)

518 
	`sx_xlock
(&
nvkms_lock
);

519 
	`nvKmsSu•íd
(
gpuId
);

520 
	`sx_xu∆ock
(&
nvkms_lock
);

521 
	}
}

523 
	$nvkms_ªsume
(
NvU32
 
gpuId
)

525 
	`sx_xlock
(&
nvkms_lock
);

526 
	`nvKmsResume
(
gpuId
);

527 
	`sx_xu∆ock
(&
nvkms_lock
);

528 
	}
}

538 
nvidü_mode£t_rm_›s_t
 
	g__rm_›s
 = { 0 };

539 
nvidü_mode£t_°ack_±r
 
	gnvkms_nvidü_°ack
 = 
NULL
;

540 
nvidü_mode£t_ˇŒbacks_t
 
	gnvkms_rm_ˇŒbacks
 = {

541 
nvkms_su•íd
,

542 
nvkms_ªsume


545 
	$nvkms_Æloc_rm
()

547 
NV_STATUS
 
nv°©us
;

548 
ªt
;

550 
	`¥ötf
("nvkms_alloc_rm: \n");

551 
__rm_›s
.
vîsi⁄_°rög
 = 
NV_VERSION_STRING
;

553 
nv°©us
 = 
	`nvidü_gë_rm_›s
(&
__rm_›s
);

555 i‡(
nv°©us
 !
NV_OK
) {

556 
	`¥ötf
(
NVKMS_LOG_PREFIX
 "Version mismatch: "

558 
__rm_›s
.
vîsi⁄_°rög
, 
NV_VERSION_STRING
);

559  
EINVAL
;

562 
ªt
 = 
__rm_›s
.
	`£t_ˇŒbacks
(&
nvkms_rm_ˇŒbacks
);

563 i‡(
ªt
 < 0) {

564 
	`¥ötf
(
NVKMS_LOG_PREFIX
 "FailedÅoÑegister callbacks\n");

565  
ªt
;

568 
ªt
 = 
__rm_›s
.
	`Æloc_°ack
(&
nvkms_nvidü_°ack
);

569 
	`¥ötf
("nvkms_Æloc_rm:ªtu∫: %d \n", 
ªt
);

570  
ªt
;

571 
	}
}

573 
	$nvkms_‰ì_rm
()

575 
	`¥ötf
("nvkms_free_rm:return:\n");

576 
__rm_›s
.
	`£t_ˇŒbacks
(
NULL
);

577 i‡(
__rm_›s
.
‰ì_°ack
 !
NULL
) {

578 
__rm_›s
.
	`‰ì_°ack
(
nvkms_nvidü_°ack
);

580 
	}
}

582 
NVKMS_API_CALL
 
	$nvkms_ˇŒ_rm
(*
›s
)

585 
__rm_›s
.
	`›
(
nvkms_nvidü_°ack
, 
›s
);

586 
	}
}

588 
NVKMS_API_CALL
 
	$nvkms_gë_øndom
(*
±r
, 
size_t
 
size
)

590 
	`¨c4ønd
(
±r
, 
size
, 0);

591 
	}
}

596 #i‡
__FªeBSD_vîsi⁄
 >= 900000

597 
	#NV_FGET_HAS_CAP_RIGHTS_T_ARG
 1

	)

599 
	#NV_FGET_HAS_CAP_RIGHTS_T_ARG
 0

	)

602 #i‡
NV_FGET_HAS_CAP_RIGHTS_T_ARG


603 
	~<sys/ˇ¥ights.h
>

604 #i‡
__FªeBSD_vîsi⁄
 >= 1100012

605 
	~<sys/ˇpsicum.h
>

607 
	~<sys/ˇ∑bûôy.h
>

622 
	#NV_KERNEL_HAS_DEVFS_GET_CDEVPRIV_FROM_FILE
 0

	)

624 #i‡!
NV_KERNEL_HAS_DEVFS_GET_CDEVPRIV_FROM_FILE


625 
	~<fs/devfs/devfs_öt.h
>

628 * 
NVKMS_API_CALL
 
	$nvkms_gë_≥r_›í_d©a
(
fd
)

630 
fûe
 *
Â
 = 
NULL
;

631 
nvkms_≥r_›í
 *
p›í
 = 
NULL
;

632 
°©us
;

633 *
d©a
 = 
NULL
;

635 #i‡
NV_FGET_HAS_CAP_RIGHTS_T_ARG


636 
ˇp_rights_t
 
rights
;

637 
°©us
 = 
	`fgë
(
cuπhªad
, 
fd
, 
	`ˇp_rights_öô
(&
rights
, 
CAP_IOCTL
), &
Â
);

639 
°©us
 = 
	`fgë
(
cuπhªad
, 
fd
, &
Â
);

642 i‡(
°©us
 != 0) {

643  
NULL
;

646 #i‡
NV_KERNEL_HAS_DEVFS_GET_CDEVPRIV_FROM_FILE


647 
°©us
 = 
	`devfs_gë_cdev¥iv_‰om_fûe
(&
p›í
, 
Â
);

649 i‡(
°©us
 != 0) {

650 
d⁄e
;

654 
cdev_¥ivd©a
 *
p
 = 
Â
->
f_cdev¥iv
;

661 i‡((
p
 =
NULL
Ë|| (p->
cdpd_då
 !
nvkms_˛o£
)) {

662 
d⁄e
;

665 
p›í
 = 
p
->
cdpd_d©a
;

669 i‡(
p›í
 =
NULL
) {

670 
d⁄e
;

673 
d©a
 = 
p›í
->data;

675 
d⁄e
:

688 
	`fdr›
(
Â
, 
cuπhªad
);

690  
d©a
;

691 
	}
}

693 
NvBoﬁ
 
NVKMS_API_CALL
 
	$nvkms_›í_gpu
(
NvU32
 
gpuId
)

695 
	`¥ötf
("__rm_›s.›í_gpu = 0x%x\n", ()
__rm_›s
.
›í_gpu
);

696 
ªt
 = 
__rm_›s
.
	`›í_gpu
(
gpuId
, 
nvkms_nvidü_°ack
);

697 
	`¥ötf
("nvkms_›í_gpu:ªtu∫: %d\n", 
ªt
);

698  
ªt
 == 0;

699 
	}
}

701 
NVKMS_API_CALL
 
	$nvkms_˛o£_gpu
(
NvU32
 
gpuId
)

703 
	`¥ötf
("nvkms_close_gpu:\n");

704 
__rm_›s
.
	`˛o£_gpu
(
gpuId
, 
nvkms_nvidü_°ack
);

705 
	}
}

707 
NvU32
 
NVKMS_API_CALL
 
	$nvkms_íumî©e_gpus
(
nv_gpu_öfo_t
 *
gpu_öfo
)

709 
ªt
 = 
__rm_›s
.
	`íumî©e_gpus
(
gpu_öfo
);

710 
	`¥ötf
("nvkms_íumî©e_gpus:ªtu∫: %d\n", 
ªt
);

711  
ªt
;

712 
	}
}

714 
NvBoﬁ
 
NVKMS_API_CALL
 
	$nvkms_Ælow_wrôe_comböög
()

716 
	`¥ötf
("nvkms_allow_write_combining:\n");

717  
__rm_›s
.
sy°em_öfo
.
Ælow_wrôe_comböög
;

718 
	}
}

724 
	$nvkms_k≠i_èsk_ˇŒback
(*
¨g
, 
≥ndög
 
__unu£d
)

726 
NvKmsK≠iDevi˚
 *
devi˚
 = 
¨g
;

728 
	`¥ötf
("nvkms_k≠i_èsk_ˇŒback: devi˚ = 0x%lx\n", ()
devi˚
);

729 
	`nvKmsK≠iH™dÀEvítQueueCh™ge
(
devi˚
);

730 
	}
}

738 
nvkms_≥r_›í
 *
	$nvkms_›í_comm⁄
(
NvKmsClõ¡Ty≥
 
ty≥
,

739 
NvKmsK≠iDevi˚
 *
devi˚
,

740 *
°©us
)

742 
nvkms_≥r_›í
 *
p›í
 = 
NULL
;

744 
	`¥ötf
("nvkms_open_common:\n");

745 
p›í
 = 
	`nvkms_Æloc
((*p›í), 
NV_TRUE
);

747 i‡(
p›í
 =
NULL
) {

748 *
°©us
 = -
ENOMEM
;

749 
	`¥ötf
("nvkms_open_common:Çvkms_alloc failed\n");

750 
Áûed
;

753 
	`mtx_öô
(&
p›í
->
èsks
.
lock
, "nvidü-mode£t-èsks", 
NULL
, 
MTX_DEF
);

755 
	`sx_xlock
(&
nvkms_lock
);

756 
p›í
->
d©a
 = 
	`nvKmsO≥n
(
cuΩroc
->
p_pid
, 
ty≥
,Öopen);

757 
	`sx_xu∆ock
(&
nvkms_lock
);

759 i‡(
p›í
->
d©a
 =
NULL
) {

760 *
°©us
 = -
EPERM
;

761 
	`¥ötf
("nvkms_open_common:ÇvKmsOpen failed\n");

762 
Áûed
;

766 
	`TASK_INIT
(&
p›í
->
èsks
.
èsk
, 0,

767 
nvkms_k≠i_èsk_ˇŒback
, (*)
devi˚
);

768 
	`èskqueue_íqueue
(
èskqueue_thªad
, &
p›í
->
èsks
.
èsk
);

770 *
°©us
 = 0;

772 
	`¥ötf
("nvkms_›í_comm⁄:Ñëu∫ 0x%x\n", ()
p›í
);

773  
p›í
;

775 
Áûed
:

777 
	`nvkms_‰ì
(
p›í
, (*popen));

779  
NULL
;

780 
	}
}

782 
NVKMS_API_CALL
 
	$nvkms_˛o£_comm⁄
(
nvkms_≥r_›í
 *
p›í
)

784 
	`¥ötf
("nvkms_close_common:\n");

785 
	`sx_xlock
(&
nvkms_lock
);

787 
	`nvKmsClo£
(
p›í
->
d©a
);

789 
p›í
->
d©a
 = 
NULL
;

791 
	`sx_xu∆ock
(&
nvkms_lock
);

808 
	`èskqueue_døö
(
èskqueue_thªad
, &
p›í
->
èsks
.
èsk
);

809 
	`mtx_de°roy
(&
p›í
->
èsks
.
lock
);

811 
	`nvkms_‰ì
(
p›í
, (*popen));

812 
	}
}

814 
NVKMS_API_CALL
 
	gnvkms_io˘l_comm⁄


816 
nvkms_≥r_›í
 *
	gp›í
,

817 
NvU32
 
	gcmd
, 
NvU64
 
	gaddªss
, c⁄° 
size_t
 
	gsize


820 
NvBoﬁ
 
	gªt
;

822 
¥ötf
("nvkms_ioctl_common: \n");

823 
sx_xlock
(&
nvkms_lock
);

825 i‡(
	gp›í
 &&Ö›í->
	gd©a
) {

826 
	gªt
 = 
nvKmsIo˘l
(
p›í
->
d©a
, 
cmd
, 
addªss
, 
size
);

828 
	gªt
 = 
NV_FALSE
;

831 
sx_xu∆ock
(&
nvkms_lock
);

833 
¥ötf
("nvkms_io˘l_comm⁄:Ñëu∫ 0x%x\n", 
ªt
);

834  
	gªt
 ? 0 : -
EPERM
;

841 
nvkms_≥r_›í
* 
NVKMS_API_CALL
 
	gnvkms_›í_‰om_k≠i


843 
NvKmsK≠iDevi˚
 *
	gdevi˚


846 
¥ötf
("nvkms_open_from_kapi: \n");

847 
	g°©us
 = 0;

848 
nvkms_≥r_›í
 *
	gªt
 = 
nvkms_›í_comm⁄
(
NVKMS_CLIENT_KERNEL_SPACE
, 
devi˚
, &
°©us
);

849 
¥ötf
("nvkms_›í_‰om_k≠i:ªtu∫: 0x%x\n", ()
ªt
);

850  
	gªt
;

853 
NVKMS_API_CALL
 
	$nvkms_˛o£_‰om_k≠i
(
nvkms_≥r_›í
 *
p›í
)

855 
	`¥ötf
("nvkms_close_from_kapi: \n");

856 
	`nvkms_˛o£_comm⁄
(
p›í
);

857 
	}
}

859 
NvBoﬁ
 
NVKMS_API_CALL
 
	gnvkms_io˘l_‰om_k≠i


861 
nvkms_≥r_›í
 *
	gp›í
,

862 
NvU32
 
	gcmd
, *
	g∑øms_addªss
, c⁄° 
size_t
 
	g∑øms_size


865 
¥ötf
("nvkms_ioctl_from_kapi: \n");

866  
nvkms_io˘l_comm⁄
(
p›í
,

867 
cmd
,

868 (
NvU64
)(
NvUPå
)
∑øms_addªss
, 
∑øms_size
) == 0;

876 
	snvkms_£ma_t
 {

877 
mtx
 
	mnvs_muãx
;

880 
nvkms_£ma_h™dÀ_t
* 
NVKMS_API_CALL
 
	$nvkms_£ma_Æloc
()

882 
	`¥ötf
("nvkms_sema_alloc:\n");

883 
nvkms_£ma_h™dÀ_t
 *
£ma
 = 
	`nvkms_Æloc
(“vkms_£ma_h™dÀ_t), 
NV_TRUE
);

884 i‡(
£ma
) {

885 
	`¥ötf
("nvkms_sema_alloc: creating mutex\n");

886 
	`mtx_öô
(&(
£ma
->
nvs_muãx
), "NVIDIA Muãx", 
NULL
, 
MTX_DEF
);

889 
	`¥ötf
("nvkms_£ma_Æloc:ªtu∫: 0x%x\n", ()
£ma
);

890  
£ma
;

891 
	}
}

893 
NVKMS_API_CALL
 
	$nvkms_£ma_‰ì
(
nvkms_£ma_h™dÀ_t
 *
£ma
)

895 
	`¥ötf
("nvkms_sema_free:\n");

896 
	`mtx_de°roy
(&
£ma
->
nvs_muãx
);

897 
	`nvkms_‰ì
(
£ma
, (*sema));

898 
	}
}

900 
NVKMS_API_CALL
 
	$nvkms_£ma_down
(
nvkms_£ma_h™dÀ_t
 *
£ma
)

902 
	`¥ötf
("nvkms_sema_down:\n");

903 
	`mtx_lock
(&
£ma
->
nvs_muãx
);

904 
	}
}

906 
NVKMS_API_CALL
 
	$nvkms_£ma_up
(
nvkms_£ma_h™dÀ_t
 *
£ma
)

908 
	`¥ötf
("nvkms_sema_up:\n");

909 
	`mtx_u∆ock
(&
£ma
->
nvs_muãx
);

910 
	}
}

916 
NvBoﬁ
 
NVKMS_KAPI_CALL
 
	gnvKmsK≠iGëFun˘i⁄sTabÀ


918 
NvKmsK≠iFun˘i⁄sTabÀ
 *
	gfuncsTabÀ


921 
¥ötf
("nvKmsKapiGetFunctionsTable:\n");

922  
nvKmsK≠iGëFun˘i⁄sTabÀI¡î«l
(
funcsTabÀ
);

929 
	$nvkms_˛o£
(*
¨g
)

931 
nvkms_≥r_›í
 *
p›í
 = 
¨g
;

933 
	`sx_xlock
(&
nvkms_lock
);

934 
	`nvKmsClo£
(
p›í
->
d©a
);

935 
	`sx_xu∆ock
(&
nvkms_lock
);

937 
	`mtx_de°roy
(&
p›í
->
evíts
.
lock
);

939 
	`nvkms_‰ì
(
p›í
, (*popen));

941 
	`sx_xlock
(&
nvkms_moduÀ
.
lock
);

942 
nvkms_moduÀ
.
˛õ¡_cou¡î
 -= 1;

943 
	`sx_xu∆ock
(&
nvkms_moduÀ
.
lock
);

944 
	}
}

946 
	$nvkms_io˘l
(

947 
cdev
 *
dev
,

948 
u_l⁄g
 
cmd
,

949 
ˇddr_t
 
d©a
,

950 
fÊag
,

951 
thªad
 *
td


954 
u_l⁄g
 
ƒ
, 
size
;

955 
NvBoﬁ
 
ªt
;

956 
NvKmsIo˘lP¨ams
 *
∑øms
;

957 
nvkms_≥r_›í
 *
p›í
;

958 
°©us
;

960 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
p›í
);

961 i‡(
°©us
 != 0) {

962  
°©us
;

965 
size
 = 
	`IOCPARM_LEN
(
cmd
);

966 
ƒ
 = 
cmd
 & 0xFF;

970 i‡((
ƒ
 !
NVKMS_IOCTL_CMD
Ë|| (
size
 !(
NvKmsIo˘lP¨ams
))) {

971  
EINVAL
;

976 
∑øms
 = (
NvKmsIo˘lP¨ams
*Ë
d©a
;

978 
	`sx_xlock
(&
nvkms_lock
);

979 
ªt
 = 
	`nvKmsIo˘l
(
p›í
->
d©a
,

980 
∑øms
->
cmd
,

981 
∑øms
->
addªss
,

982 
∑øms
->
size
);

983 
	`sx_xu∆ock
(&
nvkms_lock
);

985  
ªt
 ? 0 : 
EPERM
;

986 
	}
}

988 
	$nvkms_›í
(

989 
cdev
 *
dev
,

990 
oÊags
,

991 
devty≥
,

992 
thªad
 *
td


995 
	`¥ötf
("nvkms_open:\n");

996 
nvkms_≥r_›í
 *
p›í
;

997 
°©us
;

999 
	`sx_xlock
(&
nvkms_moduÀ
.
lock
);

1001 i‡(
nvkms_moduÀ
.
is_u∆ﬂdög
) {

1002 
	`sx_xu∆ock
(&
nvkms_moduÀ
.
lock
);

1003 
	`¥ötf
("nvkms_open:return ENXIO\n");

1004  
ENXIO
;

1007 
nvkms_moduÀ
.
˛õ¡_cou¡î
 += 1;

1008 
	`sx_xu∆ock
(&
nvkms_moduÀ
.
lock
);

1010 
p›í
 = 
	`nvkms_Æloc
((*p›í), 
NV_TRUE
);

1011 i‡(
p›í
 =
NULL
) {

1012 
	`¥ötf
("nvkms_open:return ENNOMEM\n");

1013  
ENOMEM
;

1021 
°©us
 = 
	`devfs_£t_cdev¥iv
(
p›í
, 
nvkms_˛o£
);

1022 i‡(
°©us
 != 0) {

1023 
	`nvkms_‰ì
(
p›í
, (*popen));

1024 
	`¥ötf
("nvkms_›í:ªtu∫ sètu†%d\n", 
°©us
);

1025  
°©us
;

1028 
	`mtx_öô
(&
p›í
->
evíts
.
lock
, "nvkms-evíts-lock", 
NULL
, 0);

1030 
	`sx_xlock
(&
nvkms_lock
);

1031 
p›í
->
d©a
 = 
	`nvKmsO≥n
(
cuΩroc
->
p_pid
, 
NVKMS_CLIENT_USER_SPACE
,Öopen);

1032 
	`sx_xu∆ock
(&
nvkms_lock
);

1038 
	`¥ötf
("nvkms_›í:ªtu∫: %d\n", (
p›í
->
d©a
 =
NULL
Ë? 
EPERM
 : 0);

1039  (
p›í
->
d©a
 =
NULL
Ë? 
EPERM
 : 0;

1040 
	}
}

1042 
	$nvkms_pﬁl
(

1043 
cdev
 *
dev
,

1044 
evíts
,

1045 
thªad
 *
td


1048 
nvkms_≥r_›í
 *
p›í
;

1049 
°©us
;

1050 
mask
 = 0;

1052 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
p›í
);

1053 i‡(
°©us
 != 0) {

1057 
	`mtx_lock
(&
p›í
->
evíts
.
lock
);

1059 i‡(!
p›í
->
evíts
.
avaûabÀ
) {

1060 
	`£Ãec‹d
(
td
, &
p›í
->
evíts
.
£À˘
);

1062 
mask
 = (
evíts
 & (
POLLIN
 | 
POLLPRI
 | 
POLLRDNORM
));

1065 
	`mtx_u∆ock
(&
p›í
->
evíts
.
lock
);

1067  
mask
;

1068 
	}
}

1078 #i‡
deföed
(
NVKMS_SUPPORT_LINUX_COMPAT
)

1080 
	$nvkms_löux_io˘l_fun˘i⁄
(

1081 
thªad
 *
td
,

1082 
löux_io˘l_¨gs
 *
¨gs


1085 
fûe
 *
Â
;

1086 
°©us
;

1087 
u_l⁄g
 
cmd
;

1089 #i‡
NV_FGET_HAS_CAP_RIGHTS_T_ARG


1090 
ˇp_rights_t
 
rights
;

1091 
°©us
 = 
	`fgë
(
td
, 
¨gs
->
fd
, 
	`ˇp_rights_öô
(&
rights
, 
CAP_IOCTL
), &
Â
);

1093 
°©us
 = 
	`fgë
(
td
, 
¨gs
->
fd
, &
Â
);

1096 i‡(
°©us
 != 0) {

1097  
°©us
;

1100 
cmd
 = 
¨gs
->cmd;

1102 
°©us
 = 
	`fo_io˘l
(
Â
, 
cmd
, (
ˇddr_t
)
¨gs
->
¨g
, 
td
->
td_u¸ed
,Åd);

1103 
	`fdr›
(
Â
, 
td
);

1105  
°©us
;

1106 
	}
}

1108 
	#NVKMS_LINUX_IOCTL_MIN
 
	`_IOC
(0, 
NVKMS_IOCTL_MAGIC
, 
NVKMS_IOCTL_CMD
, 0)

	)

1109 
	#NVKMS_LINUX_IOCTL_MAX
 
NVKMS_LINUX_IOCTL_MIN


	)

1111 
löux_io˘l_h™dÀr
 
	gnvkms_löux_io˘l_h™dÀr
 = {

1112 
nvkms_löux_io˘l_fun˘i⁄
,

1113 
NVKMS_LINUX_IOCTL_MIN
,

1114 
NVKMS_LINUX_IOCTL_MAX
,

1118 
	$nvkms_löux_com∑t_lﬂd
()

1120 #i‡
	`deföed
(
NVKMS_SUPPORT_LINUX_COMPAT
)

1121 
	`löux_io˘l_ªgi°î_h™dÀr
(&
nvkms_löux_io˘l_h™dÀr
);

1123 
	}
}

1125 
	$nvkms_löux_com∑t_u∆ﬂd
()

1127 #i‡
	`deföed
(
NVKMS_SUPPORT_LINUX_COMPAT
)

1128 
	`löux_io˘l_uƒegi°î_h™dÀr
(&
nvkms_löux_io˘l_h™dÀr
);

1130 
	}
}

1136 
cdevsw
 
	gnvkms_cdevsw
 = {

1137 .
d_›í
 = 
nvkms_›í
,

1138 .
	gd_io˘l
 = 
nvkms_io˘l
,

1139 .
	gd_pﬁl
 = 
nvkms_pﬁl
,

1140 .
	gd_«me
 = "nvidia-modeset",

1141 .
	gd_vîsi⁄
 = 
D_VERSION
,

1145 
	$nvidü_mode£t_lﬂdî
(
moduÀ
 *
m
, 
wh©
, *
¨g
)

1147 
ªt
;

1154 
cdev
 *
nvkms_dev
;

1161 
NvBoﬁ
 
nvkms_moduÀ_lﬂded
 = 
NV_FALSE
;

1162 
nvkms_timî_t
 *
timî
, *
tmp
;

1164 
wh©
) {

1165 
MOD_LOAD
:

1166 
ªt
 = 
	`nvkms_Æloc_rm
();

1168 i‡(
ªt
 != 0) {

1169  
ªt
;

1172 
	`sx_öô
(&
nvkms_lock
, "nvidia-modesetÜock");

1173 
	`sx_öô
(&
nvkms_moduÀ
.
lock
, "nvidia-modeset module dataÜock");

1174 
nvkms_moduÀ
.
˛õ¡_cou¡î
 = 0;

1175 
nvkms_moduÀ
.
is_u∆ﬂdög
 = 
NV_FALSE
;

1177 
	`LIST_INIT
(&
nvkms_timîs
.
li°
);

1178 
	`sx_öô
(&
nvkms_timîs
.
lock
, "nvidia-modesetÅimerÜock");

1180 
nvkms_dev
 = 
	`make_dev
(&
nvkms_cdevsw
,

1181 
NVKMS_CDEV_MINOR
,

1182 
UID_ROOT
, 
GID_WHEEL
, 0666,

1185 i‡(
nvkms_dev
 =
NULL
) {

1186 
	`sx_de°roy
(&
nvkms_moduÀ
.
lock
);

1187 
	`sx_de°roy
(&
nvkms_timîs
.
lock
);

1188 
	`sx_de°roy
(&
nvkms_lock
);

1190 
	`nvkms_‰ì_rm
();

1191  
ENOMEM
;

1195 
nvkms_moduÀ_lﬂded
 = 
NV_TRUE
;

1197 
	`sx_xlock
(&
nvkms_lock
);

1198 
	`nvKmsModuÀLﬂd
();

1199 
	`sx_xu∆ock
(&
nvkms_lock
);

1201 
	`nvkms_löux_com∑t_lﬂd
();

1205 
MOD_QUIESCE
:

1206 i‡(!
nvkms_moduÀ_lﬂded
) {

1210 
	`sx_xlock
(&
nvkms_moduÀ
.
lock
);

1212 i‡(
nvkms_moduÀ
.
˛õ¡_cou¡î
 > 0) {

1213 
	`sx_xu∆ock
(&
nvkms_moduÀ
.
lock
);

1214  
EBUSY
;

1217 
	`sx_xu∆ock
(&
nvkms_moduÀ
.
lock
);

1221 
MOD_UNLOAD
:

1222 
MOD_SHUTDOWN
:

1223 i‡(!
nvkms_moduÀ_lﬂded
) {

1227 
	`sx_xlock
(&
nvkms_moduÀ
.
lock
);

1229 i‡(
nvkms_moduÀ
.
˛õ¡_cou¡î
 > 0) {

1230 
	`sx_xu∆ock
(&
nvkms_moduÀ
.
lock
);

1231  
EBUSY
;

1234 
nvkms_moduÀ
.
is_u∆ﬂdög
 = 
NV_TRUE
;

1236 
	`sx_xu∆ock
(&
nvkms_moduÀ
.
lock
);

1238 
	`nvkms_löux_com∑t_u∆ﬂd
();

1240 
	`sx_xlock
(&
nvkms_lock
);

1241 
	`nvKmsModuÀU∆ﬂd
();

1242 
	`sx_xu∆ock
(&
nvkms_lock
);

1250 
	`sx_xlock
(&
nvkms_timîs
.
lock
);

1252 
	`LIST_FOREACH_SAFE
(
timî
, &
nvkms_timîs
.
li°
, 
timîs_li°
, 
tmp
) {

1253 i‡(
timî
->
ˇŒout_¸óãd
) {

1261 i‡(
	`ˇŒout_døö
(&
timî
->
ˇŒout
) > 0) {

1263 
	`LIST_REMOVE
(
timî
, 
timîs_li°
);

1264 i‡(
timî
->
isRefPå
) {

1265 
	`nvkms_dec_ªf
(
timî
->
d©aPå
);

1267 
	`nvkms_‰ì
(
timî
, (*timer));

1272 
	`sx_xu∆ock
(&
nvkms_timîs
.
lock
);

1274 
	`èskqueue_run
(
èskqueue_nvkms
);

1276 
	`de°roy_dev
(
nvkms_dev
);

1277 
nvkms_dev
 = 
NULL
;

1279 
	`sx_de°roy
(&
nvkms_moduÀ
.
lock
);

1280 
	`sx_de°roy
(&
nvkms_timîs
.
lock
);

1281 
	`sx_de°roy
(&
nvkms_lock
);

1283 
	`nvkms_‰ì_rm
();

1290  
EOPNOTSUPP
;

1291 
	}
}

1293 
moduÀd©a_t
 
	gnvidü_mode£t_moduÀd©a
 = {

1295 
nvidü_mode£t_lﬂdî
,

1296 
NULL


1299 
DECLARE_MODULE
(
nvidü_mode£t
,

1300 
nvidü_mode£t_moduÀd©a
,

1301 
SI_SUB_DRIVERS
,

1302 
SI_ORDER_ANY
);

1304 
MODULE_VERSION
(
nvidü_mode£t
, 1);

1306 
MODULE_DEPEND
(
nvidü_mode£t
,

1307 
nvidü
,

1310 #i‡
deföed
(
NVKMS_SUPPORT_LINUX_COMPAT
)

1311 
MODULE_DEPEND
(
nvidü_mode£t
,

1312 
löux
,

	@src/nvidia-modeset/nvidia-modeset-os-interface.h

16 #i‡!
deföed
(
_NVIDIA_MODESET_OS_INTERFACE_H_
)

17 
	#_NVIDIA_MODESET_OS_INTERFACE_H_


	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	~"nvty≥s.h
"

24 
	~"nvkms.h
"

26 
NVKMS_API_CALL
 
nvkms_ˇŒ_rm
 (*
›s
);

27 * 
NVKMS_API_CALL
 
nvkms_Æloc
 (
size_t
 
size
,

28 
NvBoﬁ
 
zîo
);

29 
NVKMS_API_CALL
 
nvkms_‰ì
 (*
±r
,

30 
size_t
 
size
);

31 * 
NVKMS_API_CALL
 
nvkms_mem£t
 (*
±r
,

32 
NvU8
 
c
,

33 
size_t
 
size
);

34 * 
NVKMS_API_CALL
 
nvkms_mem˝y
 (*
de°
,

35 c⁄° *
§c
,

36 
size_t
 
n
);

37 * 
NVKMS_API_CALL
 
nvkms_memmove
 (*
de°
,

38 c⁄° *
§c
,

39 
size_t
 
n
);

40 
NVKMS_API_CALL
 
nvkms_memcmp
 (c⁄° *
s1
,

41 c⁄° *
s2
,

42 
size_t
 
n
);

43 
size_t
 
NVKMS_API_CALL
 
nvkms_°æí
 (c⁄° *
s
);

44 
NVKMS_API_CALL
 
nvkms_°rcmp
 (c⁄° *
s1
,

45 c⁄° *
s2
);

46 * 
NVKMS_API_CALL
 
nvkms_°∫˝y
 (*
de°
,

47 c⁄° *
§c
,

48 
size_t
 
n
);

49 
NVKMS_API_CALL
 
nvkms_u¶ìp
 (
NvU64
 
u£c
);

50 
NvU64
 
NVKMS_API_CALL
 
nvkms_gë_u£c
 ();

51 
NVKMS_API_CALL
 
nvkms_c›yö
 (*
k±r
,

52 
NvU64
 
uaddr
,

53 
size_t
 
n
);

54 
NVKMS_API_CALL
 
nvkms_c›yout
 (
NvU64
 
uaddr
,

55 c⁄° *
k±r
,

56 
size_t
 
n
);

57 
NVKMS_API_CALL
 
nvkms_yõld
 ();

58 
NVKMS_API_CALL
 
	$nvkms_¢¥ötf
 (*
°r
,

59 
size_t
 
size
,

60 c⁄° *
f‹m©
, ...)

61 
	`__©åibuã__
((
	`f‹m©
 (
¥ötf
, 3, 4)));

63 
NVKMS_API_CALL
 
	`nvkms_v¢¥ötf
 (*
°r
,

64 
size_t
 
size
,

65 c⁄° *
f‹m©
,

66 
va_li°
 
≠
);

68 
	#NVKMS_LOG_LEVEL_INFO
 0

	)

69 
	#NVKMS_LOG_LEVEL_WARN
 1

	)

70 
	#NVKMS_LOG_LEVEL_ERROR
 2

	)

72 
NVKMS_API_CALL
 
	`nvkms_log
 (c⁄° 
Àvñ
,

73 c⁄° *
gpuPªfix
,

74 c⁄° *
msg
);

89 
nvkms_ªf_±r
;

97 
nvkms_ªf_±r
* 
NVKMS_API_CALL
 
	`nvkms_Æloc_ªf_±r
(*
±r
);

109 
NVKMS_API_CALL
 
	`nvkms_‰ì_ªf_±r
(
nvkms_ªf_±r
 *
ªf_±r
);

120 
NVKMS_API_CALL
 
	`nvkms_öc_ªf
(
nvkms_ªf_±r
 *
ªf_±r
);

130 * 
NVKMS_API_CALL
 
	`nvkms_dec_ªf
(
nvkms_ªf_±r
 *
ªf_±r
);

132 
	tNVKMS_API_CALL
 
	tnvkms_timî_¥oc_t
(*
	td©aPå
, 
	tNvU32
 
	td©aU32
);

133 
nvkms_timî_t
 
	tnvkms_timî_h™dÀ_t
;

154 
nvkms_timî_h™dÀ_t
*

155 
NVKMS_API_CALL
 
	`nvkms_Æloc_timî
 (
nvkms_timî_¥oc_t
 *
¥oc
,

156 *
d©aPå
, 
NvU32
 
d©aU32
,

157 
NvU64
 
u£c
);

167 
NvBoﬁ
 
NVKMS_API_CALL


168 
	`nvkms_Æloc_timî_wôh_ªf_±r
(
nvkms_timî_¥oc_t
 *
¥oc
,

169 
nvkms_ªf_±r
 *
ªf_±r
,

170 
NvU32
 
d©aU32
, 
NvU64
 
u£c
);

179 
NVKMS_API_CALL
 
	`nvkms_‰ì_timî
 (
nvkms_timî_h™dÀ_t
 *
h™dÀ
);

194 
NVKMS_API_CALL


195 
	`nvkms_evít_queue_ch™ged
(
nvkms_≥r_›í_h™dÀ_t
 *
pO≥nKî√l
,

196 
NvBoﬁ
 
evítsAvaûabÀ
);

201 
NVKMS_API_CALL
 
	`nvkms_gë_øndom
(*
±r
, 
size_t
 
size
);

208 * 
NVKMS_API_CALL
 
	`nvkms_gë_≥r_›í_d©a
(
fd
);

214 
NvBoﬁ
 
NVKMS_API_CALL
 
	`nvkms_›í_gpu
(
NvU32
 
gpuId
);

215 
NVKMS_API_CALL
 
	`nvkms_˛o£_gpu
(
NvU32
 
gpuId
);

222 
NvU32
 
NVKMS_API_CALL
 
	`nvkms_íumî©e_gpus
(
nv_gpu_öfo_t
 *
gpu_öfo
);

228 
NvBoﬁ
 
NVKMS_API_CALL
 
	`nvkms_Ælow_wrôe_comböög
();

234 
nvkms_≥r_›í
;

236 
nvkms_≥r_›í
* 
NVKMS_API_CALL
 
nvkms_›í_‰om_k≠i


238 
NvKmsK≠iDevi˚
 *
devi˚


241 
NVKMS_API_CALL
 
	`nvkms_˛o£_‰om_k≠i
(
nvkms_≥r_›í
 *
p›í
);

243 
NvBoﬁ
 
NVKMS_API_CALL
 
nvkms_io˘l_‰om_k≠i


245 
nvkms_≥r_›í
 *
p›í
,

246 
NvU32
 
cmd
, *
∑øms_addªss
, c⁄° 
size_t
 
∑øms_size


253 
nvkms_£ma_t
 
	tnvkms_£ma_h™dÀ_t
;

255 
nvkms_£ma_h™dÀ_t
*

256 
NVKMS_API_CALL
 
	`nvkms_£ma_Æloc
 ();

257 
NVKMS_API_CALL
 
	`nvkms_£ma_‰ì
 (
nvkms_£ma_h™dÀ_t
 *
£ma
);

258 
NVKMS_API_CALL
 
	`nvkms_£ma_down
 (
nvkms_£ma_h™dÀ_t
 *
£ma
);

259 
NVKMS_API_CALL
 
	`nvkms_£ma_up
 (
nvkms_£ma_h™dÀ_t
 *
£ma
);

261 
nvkms_≥r_›í
 *
	`nvkms_›í_comm⁄
(
NvKmsClõ¡Ty≥
,

262 
NvKmsK≠iDevi˚
 *,

264 
NVKMS_API_CALL
 
	`nvkms_˛o£_comm⁄
(
nvkms_≥r_›í
 *);

265 
NVKMS_API_CALL
 
	`nvkms_io˘l_comm⁄
(
nvkms_≥r_›í
 *,

266 
NvU32
, 
NvU64
, c⁄° 
size_t
);

	@src/nvidia-modeset/nvkms-ioctl.h

8 #i‡!
deföed
(
NVKMS_IOCTL_H
)

9 
	#NVKMS_IOCTL_H


	)

11 
	~"nvty≥s.h
"

22 
	sNvKmsIo˘lP¨ams
 {

23 
NvU32
 
	mcmd
;

24 
NvU32
 
	msize
;

25 
NvU64
 
addªss
 
NV_ALIGN_BYTES
(8);

28 
	#NVKMS_IOCTL_MAGIC
 'm'

	)

29 
	#NVKMS_IOCTL_CMD
 0

	)

31 
	#NVKMS_IOCTL_IOWR
 \

32 
	`_IOWR
(
NVKMS_IOCTL_MAGIC
, 
NVKMS_IOCTL_CMD
, 
NvKmsIo˘lP¨ams
)

	)

42 
ölöe
 *
	$nvKmsNvU64ToPoöãr
(
NvU64
 
vÆue
)

44  (*)(
NvUPå
)
vÆue
;

45 
	}
}

52 
ölöe
 
NvBoﬁ
 
	$nvKmsNvU64AddªssIsSa„
(
NvU64
 
addªss
)

54  
addªss
 =(
NvU64
)(
NvUPå
)address;

55 
	}
}

	@src/nvidia-modeset/nvkms.h

8 #i‚de‡
__NV_KMS_H__


9 
	#__NV_KMS_H__


	)

11 
	~"nvty≥s.h
"

12 
	~<°ddef.h
>

14 
	~"nvkms-k≠i.h
"

21 #i‡
NVCPU_IS_X86


22 
	#NVKMS_API_CALL
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

24 
	#NVKMS_API_CALL


	)

27 
nvkms_≥r_›í
 
	tnvkms_≥r_›í_h™dÀ_t
;

29 
	tNVKMS_API_CALL
 
	tnvkms_¥ocfs_out_°rög_func_t
(*
	td©a
,

30 c⁄° *
	t°r
);

32 
	tNVKMS_API_CALL
 
	tnvkms_¥ocfs_¥oc_t
(*
	td©a
,

33 *
	tbuf„r
, 
	tsize_t
 
	tsize
,

34 
	tnvkms_¥ocfs_out_°rög_func_t
 *
	toutSåög
);

37 c⁄° *
	m«me
;

38 
nvkms_¥ocfs_¥oc_t
 *
	mfunc
;

39 } 
	tnvkms_¥ocfs_fûe_t
;

41 
	eNvKmsClõ¡Ty≥
 {

42 
	mNVKMS_CLIENT_USER_SPACE
,

43 
	mNVKMS_CLIENT_KERNEL_SPACE
,

46 
NvBoﬁ
 
NVKMS_API_CALL
 
nvKmsIo˘l
(

47 *
pO≥nVoid
,

48 
NvU32
 
cmd
,

49 
NvU64
 
∑ømsAddªss
,

50 c⁄° 
size_t
 
∑ømSize
);

52 
NVKMS_API_CALL
 
nvKmsClo£
(*
pO≥nVoid
);

54 * 
NVKMS_API_CALL
 
nvKmsO≥n
(

55 
NvU32
 
pid
,

56 
NvKmsClõ¡Ty≥
 
˛õ¡Ty≥
,

57 
nvkms_≥r_›í_h™dÀ_t
 *
pO≥nKî√l
);

59 
NVKMS_API_CALL
 
nvKmsModuÀLﬂd
();

61 
NVKMS_API_CALL
 
nvKmsModuÀU∆ﬂd
();

63 
NVKMS_API_CALL
 
nvKmsSu•íd
(
NvU32
 
gpuId
);

64 
NVKMS_API_CALL
 
nvKmsResume
(
NvU32
 
gpuId
);

66 
NVKMS_API_CALL
 
nvKmsGëProcFûes
(c⁄° 
nvkms_¥ocfs_fûe_t
 **
µProcFûes
);

68 
NVKMS_API_CALL
 
	gnvKmsK≠iH™dÀEvítQueueCh™ge


70 
NvKmsK≠iDevi˚
 *
	gdevi˚


73 
NvBoﬁ
 
NVKMS_API_CALL
 
	gnvKmsK≠iGëFun˘i⁄sTabÀI¡î«l


75 
NvKmsK≠iFun˘i⁄sTabÀ
 *
	gfuncsTabÀ


	@src/nvidia/acpi_if.h

14 #i‚de‡
_a˝i_if_h_


15 
	#_a˝i_if_h_


	)

18 
	$ACPI_STATUS
 (*
	ta˝i_sˇn_cb_t
)(
	tACPI_HANDLE
 
	th
, 
	tdevi˚_t
 *
	tdev
,

19 
	tÀvñ
, *
	t¨g
);

21 
a˝i_bif
;

22 
a˝i_b°
;

25 
kobj›_desc
 
a˝i_id_¥obe_desc
;

27 * 
	ta˝i_id_¥obe_t
(
	tdevi˚_t
 
	tbus
, devi˚_à
	tdev
, **
	tids
);

29 
__ölöe
 * 
	$ACPI_ID_PROBE
(
devi˚_t
 
bus
, devi˚_à
dev
, **
ids
)

31 
kobj›_t
 
_m
;

32 * 
rc
;

33 
	`KOBJOPLOOKUP
(((
kobj_t
)
bus
)->
›s
,
a˝i_id_¥obe
);

34 
rc
 = ((
a˝i_id_¥obe_t
 *Ë
_m
)(
bus
, 
dev
, 
ids
);

35  (
rc
);

36 
	}
}

39 
kobj›_desc
 
a˝i_evÆu©e_obje˘_desc
;

41 
ACPI_STATUS
 
	ta˝i_evÆu©e_obje˘_t
(
	tdevi˚_t
 
	tbus
, devi˚_à
	tdev
,

42 
	tACPI_STRING
 
	t∑th«me
,

43 
	tACPI_OBJECT_LIST
 *
	t∑ømëîs
,

44 
	tACPI_BUFFER
 *
	tªt
);

46 
__ölöe
 
ACPI_STATUS
 
	$ACPI_EVALUATE_OBJECT
(
devi˚_t
 
bus
, devi˚_à
dev
,

47 
ACPI_STRING
 
∑th«me
,

48 
ACPI_OBJECT_LIST
 *
∑ømëîs
,

49 
ACPI_BUFFER
 *
ªt
)

51 
kobj›_t
 
_m
;

52 
ACPI_STATUS
 
rc
;

53 
	`KOBJOPLOOKUP
(((
kobj_t
)
bus
)->
›s
,
a˝i_evÆu©e_obje˘
);

54 
rc
 = ((
a˝i_evÆu©e_obje˘_t
 *Ë
_m
)(
bus
, 
dev
, 
∑th«me
, 
∑ømëîs
, 
ªt
);

55  (
rc
);

56 
	}
}

59 
kobj›_desc
 
a˝i_pwr_f‹_¶ìp_desc
;

61 
	ta˝i_pwr_f‹_¶ìp_t
(
	tdevi˚_t
 
	tbus
, devi˚_à
	tdev
, *
	td°©e
);

63 
__ölöe
 
	$ACPI_PWR_FOR_SLEEP
(
devi˚_t
 
bus
, devi˚_à
dev
, *
d°©e
)

65 
kobj›_t
 
_m
;

66 
rc
;

67 
	`KOBJOPLOOKUP
(((
kobj_t
)
bus
)->
›s
,
a˝i_pwr_f‹_¶ìp
);

68 
rc
 = ((
a˝i_pwr_f‹_¶ìp_t
 *Ë
_m
)(
bus
, 
dev
, 
d°©e
);

69  (
rc
);

70 
	}
}

73 
kobj›_desc
 
a˝i_sˇn_chûdªn_desc
;

75 
ACPI_STATUS
 
	ta˝i_sˇn_chûdªn_t
(
	tdevi˚_t
 
	tbus
, devi˚_à
	tdev
,

76 
	tmax_dïth
, 
	ta˝i_sˇn_cb_t
 
	tu£r_‚
,

77 *
	t¨g
);

79 
__ölöe
 
ACPI_STATUS
 
	$ACPI_SCAN_CHILDREN
(
devi˚_t
 
bus
, devi˚_à
dev
,

80 
max_dïth
,

81 
a˝i_sˇn_cb_t
 
u£r_‚
,

82 *
¨g
)

84 
kobj›_t
 
_m
;

85 
ACPI_STATUS
 
rc
;

86 
	`KOBJOPLOOKUP
(((
kobj_t
)
bus
)->
›s
,
a˝i_sˇn_chûdªn
);

87 
rc
 = ((
a˝i_sˇn_chûdªn_t
 *Ë
_m
)(
bus
, 
dev
, 
max_dïth
, 
u£r_‚
, 
¨g
);

88  (
rc
);

89 
	}
}

92 
kobj›_desc
 
a˝i_gë_„©uªs_desc
;

94 
	ta˝i_gë_„©uªs_t
(
	tdrivî_t
 *
	tdrivî
, 
	tu_öt
 *
	t„©uªs
);

96 
__ölöe
 
	$ACPI_GET_FEATURES
(
drivî_t
 *
drivî
, 
u_öt
 *
„©uªs
)

98 
kobj›_t
 
_m
;

99 
rc
;

100 
	`KOBJOPLOOKUP
(
drivî
->
›s
,
a˝i_gë_„©uªs
);

101 
rc
 = ((
a˝i_gë_„©uªs_t
 *Ë
_m
)(
drivî
, 
„©uªs
);

102  (
rc
);

103 
	}
}

106 
kobj›_desc
 
a˝i_ec_ªad_desc
;

108 
	ta˝i_ec_ªad_t
(
	tdevi˚_t
 
	tdev
, 
	tu_öt
 
	taddr
, 
	tUINT64
 *
	tvÆ
, 
	twidth
);

110 
__ölöe
 
	$ACPI_EC_READ
(
devi˚_t
 
dev
, 
u_öt
 
addr
, 
UINT64
 *
vÆ
,

111 
width
)

113 
kobj›_t
 
_m
;

114 
rc
;

115 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
a˝i_ec_ªad
);

116 
rc
 = ((
a˝i_ec_ªad_t
 *Ë
_m
)(
dev
, 
addr
, 
vÆ
, 
width
);

117  (
rc
);

118 
	}
}

121 
kobj›_desc
 
a˝i_ec_wrôe_desc
;

123 
	ta˝i_ec_wrôe_t
(
	tdevi˚_t
 
	tdev
, 
	tu_öt
 
	taddr
, 
	tUINT64
 
	tvÆ
, 
	twidth
);

125 
__ölöe
 
	$ACPI_EC_WRITE
(
devi˚_t
 
dev
, 
u_öt
 
addr
, 
UINT64
 
vÆ
,

126 
width
)

128 
kobj›_t
 
_m
;

129 
rc
;

130 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
a˝i_ec_wrôe
);

131 
rc
 = ((
a˝i_ec_wrôe_t
 *Ë
_m
)(
dev
, 
addr
, 
vÆ
, 
width
);

132  (
rc
);

133 
	}
}

136 
kobj›_desc
 
a˝i_b©t_gë_öfo_desc
;

138 
	ta˝i_b©t_gë_öfo_t
(
	tdevi˚_t
 
	tdev
, 
	ta˝i_bif
 *
	tbif
);

140 
__ölöe
 
	$ACPI_BATT_GET_INFO
(
devi˚_t
 
dev
, 
a˝i_bif
 *
bif
)

142 
kobj›_t
 
_m
;

143 
rc
;

144 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
a˝i_b©t_gë_öfo
);

145 
rc
 = ((
a˝i_b©t_gë_öfo_t
 *Ë
_m
)(
dev
, 
bif
);

146  (
rc
);

147 
	}
}

150 
kobj›_desc
 
a˝i_b©t_gë_°©us_desc
;

152 
	ta˝i_b©t_gë_°©us_t
(
	tdevi˚_t
 
	tdev
, 
	ta˝i_b°
 *
	tb°
);

154 
__ölöe
 
	$ACPI_BATT_GET_STATUS
(
devi˚_t
 
dev
, 
a˝i_b°
 *
b°
)

156 
kobj›_t
 
_m
;

157 
rc
;

158 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
a˝i_b©t_gë_°©us
);

159 
rc
 = ((
a˝i_b©t_gë_°©us_t
 *Ë
_m
)(
dev
, 
b°
);

160  (
rc
);

161 
	}
}

	@src/nvidia/bus_if.h

20 #i‚de‡
_bus_if_h_


21 
	#_bus_if_h_


	)

24 
kobj›_desc
 
bus_¥öt_chûd_desc
;

26 
	tbus_¥öt_chûd_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

42 
__ölöe
 
	$BUS_PRINT_CHILD
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

44 
kobj›_t
 
_m
;

45 
rc
;

46 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_¥öt_chûd
);

47 
rc
 = ((
bus_¥öt_chûd_t
 *Ë
_m
)(
_dev
, 
_chûd
);

48  (
rc
);

49 
	}
}

52 
kobj›_desc
 
bus_¥obe_nom©ch_desc
;

54 
	tbus_¥obe_nom©ch_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

65 
__ölöe
 
	$BUS_PROBE_NOMATCH
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

67 
kobj›_t
 
_m
;

68 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_¥obe_nom©ch
);

69 ((
bus_¥obe_nom©ch_t
 *Ë
_m
)(
_dev
, 
_chûd
);

70 
	}
}

73 
kobj›_desc
 
bus_ªad_iv¨_desc
;

75 
	tbus_ªad_iv¨_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ödex
,

76 
	tuöçå_t
 *
	t_ªsu…
);

105 
__ölöe
 
	$BUS_READ_IVAR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ödex
,

106 
uöçå_t
 *
_ªsu…
)

108 
kobj›_t
 
_m
;

109 
rc
;

110 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªad_iv¨
);

111 
rc
 = ((
bus_ªad_iv¨_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ödex
, 
_ªsu…
);

112  (
rc
);

113 
	}
}

116 
kobj›_desc
 
bus_wrôe_iv¨_desc
;

118 
	tbus_wrôe_iv¨_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ödx
,

119 
	tuöçå_t
 
	t_vÆue
);

138 
__ölöe
 
	$BUS_WRITE_IVAR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ödx
,

139 
uöçå_t
 
_vÆue
)

141 
kobj›_t
 
_m
;

142 
rc
;

143 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_wrôe_iv¨
);

144 
rc
 = ((
bus_wrôe_iv¨_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ödx
, 
_vÆue
);

145  (
rc
);

146 
	}
}

149 
kobj›_desc
 
bus_chûd_dñëed_desc
;

151 
	tbus_chûd_dñëed_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

162 
__ölöe
 
	$BUS_CHILD_DELETED
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

164 
kobj›_t
 
_m
;

165 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_dñëed
);

166 ((
bus_chûd_dñëed_t
 *Ë
_m
)(
_dev
, 
_chûd
);

167 
	}
}

170 
kobj›_desc
 
bus_chûd_dëached_desc
;

172 
	tbus_chûd_dëached_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

183 
__ölöe
 
	$BUS_CHILD_DETACHED
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

185 
kobj›_t
 
_m
;

186 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_dëached
);

187 ((
bus_chûd_dëached_t
 *Ë
_m
)(
_dev
, 
_chûd
);

188 
	}
}

191 
kobj›_desc
 
bus_drivî_added_desc
;

193 
	tbus_drivî_added_t
(
	tdevi˚_t
 
	t_dev
, 
	tdrivî_t
 *
	t_drivî
);

206 
__ölöe
 
	$BUS_DRIVER_ADDED
(
devi˚_t
 
_dev
, 
drivî_t
 *
_drivî
)

208 
kobj›_t
 
_m
;

209 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_drivî_added
);

210 ((
bus_drivî_added_t
 *Ë
_m
)(
_dev
, 
_drivî
);

211 
	}
}

214 
kobj›_desc
 
bus_add_chûd_desc
;

216 
devi˚_t
 
	tbus_add_chûd_t
(
	tdevi˚_t
 
	t_dev
, 
	tu_öt
 
	t_‹dî
, c⁄° *
	t_«me
,

217 
	t_unô
);

240 
__ölöe
 
devi˚_t
 
	$BUS_ADD_CHILD
(
devi˚_t
 
_dev
, 
u_öt
 
_‹dî
,

241 c⁄° *
_«me
, 
_unô
)

243 
kobj›_t
 
_m
;

244 
devi˚_t
 
rc
;

245 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_add_chûd
);

246 
rc
 = ((
bus_add_chûd_t
 *Ë
_m
)(
_dev
, 
_‹dî
, 
_«me
, 
_unô
);

247  (
rc
);

248 
	}
}

251 
kobj›_desc
 
bus_ªsˇn_desc
;

253 
	tbus_ªsˇn_t
(
	tdevi˚_t
 
	t_dev
);

264 
__ölöe
 
	$BUS_RESCAN
(
devi˚_t
 
_dev
)

266 
kobj›_t
 
_m
;

267 
rc
;

268 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªsˇn
);

269 
rc
 = ((
bus_ªsˇn_t
 *Ë
_m
)(
_dev
);

270  (
rc
);

271 
	}
}

274 
kobj›_desc
 
bus_Æloc_ªsour˚_desc
;

276 
ªsour˚
 * 
	tbus_Æloc_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

277 
	t_ty≥
, *
	t_rid
,

278 
	trm™_ªs_t
 
	t_°¨t
,

279 
	trm™_ªs_t
 
	t_íd
,

280 
	trm™_ªs_t
 
	t_cou¡
, 
	tu_öt
 
	t_Êags
);

310 
__ölöe
 
ªsour˚
 * 
	$BUS_ALLOC_RESOURCE
(
devi˚_t
 
_dev
,

311 
devi˚_t
 
_chûd
, 
_ty≥
,

312 *
_rid
,

313 
rm™_ªs_t
 
_°¨t
,

314 
rm™_ªs_t
 
_íd
,

315 
rm™_ªs_t
 
_cou¡
,

316 
u_öt
 
_Êags
)

318 
kobj›_t
 
_m
;

319 
ªsour˚
 * 
rc
;

320 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_Æloc_ªsour˚
);

321 
rc
 = ((
bus_Æloc_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨t
, 
_íd
, 
_cou¡
, 
_Êags
);

322  (
rc
);

323 
	}
}

326 
kobj›_desc
 
bus_a˘iv©e_ªsour˚_desc
;

328 
	tbus_a˘iv©e_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

329 
	t_rid
, 
	tªsour˚
 *
	t_r
);

345 
__ölöe
 
	$BUS_ACTIVATE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

346 
_ty≥
, 
_rid
,

347 
ªsour˚
 *
_r
)

349 
kobj›_t
 
_m
;

350 
rc
;

351 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_a˘iv©e_ªsour˚
);

352 
rc
 = ((
bus_a˘iv©e_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_r
);

353  (
rc
);

354 
	}
}

357 
kobj›_desc
 
bus_m≠_ªsour˚_desc
;

359 
	tbus_m≠_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

360 
	tªsour˚
 *
	t_r
,

361 
	tªsour˚_m≠_ªque°
 *
	t_¨gs
,

362 
	tªsour˚_m≠
 *
	t_m≠
);

378 
__ölöe
 
	$BUS_MAP_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

379 
ªsour˚
 *
_r
,

380 
ªsour˚_m≠_ªque°
 *
_¨gs
,

381 
ªsour˚_m≠
 *
_m≠
)

383 
kobj›_t
 
_m
;

384 
rc
;

385 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_m≠_ªsour˚
);

386 
rc
 = ((
bus_m≠_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_r
, 
_¨gs
, 
_m≠
);

387  (
rc
);

388 
	}
}

391 
kobj›_desc
 
bus_unm≠_ªsour˚_desc
;

393 
	tbus_unm≠_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

394 
	tªsour˚
 *
	t_r
,

395 
	tªsour˚_m≠
 *
	t_m≠
);

410 
__ölöe
 
	$BUS_UNMAP_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

411 
_ty≥
, 
ªsour˚
 *
_r
,

412 
ªsour˚_m≠
 *
_m≠
)

414 
kobj›_t
 
_m
;

415 
rc
;

416 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_unm≠_ªsour˚
);

417 
rc
 = ((
bus_unm≠_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_r
, 
_m≠
);

418  (
rc
);

419 
	}
}

422 
kobj›_desc
 
bus_dó˘iv©e_ªsour˚_desc
;

424 
	tbus_dó˘iv©e_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

425 
	t_rid
, 
	tªsour˚
 *
	t_r
);

439 
__ölöe
 
	$BUS_DEACTIVATE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

440 
_ty≥
, 
_rid
,

441 
ªsour˚
 *
_r
)

443 
kobj›_t
 
_m
;

444 
rc
;

445 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_dó˘iv©e_ªsour˚
);

446 
rc
 = ((
bus_dó˘iv©e_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_r
);

447  (
rc
);

448 
	}
}

451 
kobj›_desc
 
bus_adju°_ªsour˚_desc
;

453 
	tbus_adju°_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

454 
	tªsour˚
 *
	t_ªs
, 
	trm™_ªs_t
 
	t_°¨t
,

455 
	trm™_ªs_t
 
	t_íd
);

472 
__ölöe
 
	$BUS_ADJUST_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

473 
_ty≥
, 
ªsour˚
 *
_ªs
,

474 
rm™_ªs_t
 
_°¨t
,Ñm™_ªs_à
_íd
)

476 
kobj›_t
 
_m
;

477 
rc
;

478 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_adju°_ªsour˚
);

479 
rc
 = ((
bus_adju°_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_ªs
, 
_°¨t
, 
_íd
);

480  (
rc
);

481 
	}
}

484 
kobj›_desc
 
bus_ªÀa£_ªsour˚_desc
;

486 
	tbus_ªÀa£_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

487 
	t_rid
, 
	tªsour˚
 *
	t_ªs
);

502 
__ölöe
 
	$BUS_RELEASE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

503 
_ty≥
, 
_rid
,

504 
ªsour˚
 *
_ªs
)

506 
kobj›_t
 
_m
;

507 
rc
;

508 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªÀa£_ªsour˚
);

509 
rc
 = ((
bus_ªÀa£_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_ªs
);

510  (
rc
);

511 
	}
}

514 
kobj›_desc
 
bus_£tup_öå_desc
;

516 
	tbus_£tup_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

517 
	tªsour˚
 *
	t_úq
, 
	t_Êags
,

518 
	tdrivî_fûãr_t
 *
	t_fûãr
, 
	tdrivî_öå_t
 *
	t_öå
,

519 *
	t_¨g
, **
	t_cookõp
);

544 
__ölöe
 
	$BUS_SETUP_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

545 
ªsour˚
 *
_úq
, 
_Êags
,

546 
drivî_fûãr_t
 *
_fûãr
,

547 
drivî_öå_t
 *
_öå
, *
_¨g
,

548 **
_cookõp
)

550 
kobj›_t
 
_m
;

551 
rc
;

552 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_£tup_öå
);

553 
rc
 = ((
bus_£tup_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_Êags
, 
_fûãr
, 
_öå
, 
_¨g
, 
_cookõp
);

554  (
rc
);

555 
	}
}

558 
kobj›_desc
 
bus_ã¨down_öå_desc
;

560 
	tbus_ã¨down_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

561 
	tªsour˚
 *
	t_úq
, *
	t_cookõ
);

576 
__ölöe
 
	$BUS_TEARDOWN_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

577 
ªsour˚
 *
_úq
, *
_cookõ
)

579 
kobj›_t
 
_m
;

580 
rc
;

581 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ã¨down_öå
);

582 
rc
 = ((
bus_ã¨down_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_cookõ
);

583  (
rc
);

584 
	}
}

587 
kobj›_desc
 
bus_£t_ªsour˚_desc
;

589 
	tbus_£t_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

590 
	t_rid
, 
	trm™_ªs_t
 
	t_°¨t
,Ñm™_ªs_à
	t_cou¡
);

609 
__ölöe
 
	$BUS_SET_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

610 
_rid
, 
rm™_ªs_t
 
_°¨t
,

611 
rm™_ªs_t
 
_cou¡
)

613 
kobj›_t
 
_m
;

614 
rc
;

615 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_£t_ªsour˚
);

616 
rc
 = ((
bus_£t_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨t
, 
_cou¡
);

617  (
rc
);

618 
	}
}

621 
kobj›_desc
 
bus_gë_ªsour˚_desc
;

623 
	tbus_gë_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

624 
	t_rid
, 
	trm™_ªs_t
 *
	t_°¨ç
,

625 
	trm™_ªs_t
 *
	t_cou¡p
);

642 
__ölöe
 
	$BUS_GET_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

643 
_rid
, 
rm™_ªs_t
 *
_°¨ç
,

644 
rm™_ªs_t
 *
_cou¡p
)

646 
kobj›_t
 
_m
;

647 
rc
;

648 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_ªsour˚
);

649 
rc
 = ((
bus_gë_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨ç
, 
_cou¡p
);

650  (
rc
);

651 
	}
}

654 
kobj›_desc
 
bus_dñëe_ªsour˚_desc
;

656 
	tbus_dñëe_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

657 
	t_rid
);

670 
__ölöe
 
	$BUS_DELETE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

671 
_ty≥
, 
_rid
)

673 
kobj›_t
 
_m
;

674 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_dñëe_ªsour˚
);

675 ((
bus_dñëe_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
);

676 
	}
}

679 
kobj›_desc
 
bus_gë_ªsour˚_li°_desc
;

681 
ªsour˚_li°
 * 
	tbus_gë_ªsour˚_li°_t
(
	tdevi˚_t
 
	t_dev
,

682 
	tdevi˚_t
 
	t_chûd
);

694 
__ölöe
 
ªsour˚_li°
 * 
	$BUS_GET_RESOURCE_LIST
(
devi˚_t
 
_dev
,

695 
devi˚_t
 
_chûd
)

697 
kobj›_t
 
_m
;

698 
ªsour˚_li°
 * 
rc
;

699 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_ªsour˚_li°
);

700 
rc
 = ((
bus_gë_ªsour˚_li°_t
 *Ë
_m
)(
_dev
, 
_chûd
);

701  (
rc
);

702 
	}
}

705 
kobj›_desc
 
bus_chûd_¥e£¡_desc
;

707 
	tbus_chûd_¥e£¡_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

724 
__ölöe
 
	$BUS_CHILD_PRESENT
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

726 
kobj›_t
 
_m
;

727 
rc
;

728 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_¥e£¡
);

729 
rc
 = ((
bus_chûd_¥e£¡_t
 *Ë
_m
)(
_dev
, 
_chûd
);

730  (
rc
);

731 
	}
}

734 
kobj›_desc
 
bus_chûd_≤pöfo_°r_desc
;

736 
	tbus_chûd_≤pöfo_°r_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_buf
,

737 
	tsize_t
 
	t_buÊí
);

758 
__ölöe
 
	$BUS_CHILD_PNPINFO_STR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

759 *
_buf
, 
size_t
 
_buÊí
)

761 
kobj›_t
 
_m
;

762 
rc
;

763 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_≤pöfo_°r
);

764 
rc
 = ((
bus_chûd_≤pöfo_°r_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_buf
, 
_buÊí
);

765  (
rc
);

766 
	}
}

769 
kobj›_desc
 
bus_chûd_loˇti⁄_°r_desc
;

771 
	tbus_chûd_loˇti⁄_°r_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_buf
,

772 
	tsize_t
 
	t_buÊí
);

793 
__ölöe
 
	$BUS_CHILD_LOCATION_STR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

794 *
_buf
, 
size_t
 
_buÊí
)

796 
kobj›_t
 
_m
;

797 
rc
;

798 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_loˇti⁄_°r
);

799 
rc
 = ((
bus_chûd_loˇti⁄_°r_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_buf
, 
_buÊí
);

800  (
rc
);

801 
	}
}

804 
kobj›_desc
 
bus_böd_öå_desc
;

806 
	tbus_böd_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

807 
	tªsour˚
 *
	t_úq
, 
	t_˝u
);

818 
__ölöe
 
	$BUS_BIND_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

819 
ªsour˚
 *
_úq
, 
_˝u
)

821 
kobj›_t
 
_m
;

822 
rc
;

823 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_böd_öå
);

824 
rc
 = ((
bus_böd_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_˝u
);

825  (
rc
);

826 
	}
}

829 
kobj›_desc
 
bus_c⁄fig_öå_desc
;

831 
	tbus_c⁄fig_öå_t
(
	tdevi˚_t
 
	t_dev
, 
	t_úq
, 
	töå_åiggî
 
	t_åig
,

832 
	töå_pﬁ¨ôy
 
	t_pﬁ
);

843 
__ölöe
 
	$BUS_CONFIG_INTR
(
devi˚_t
 
_dev
, 
_úq
,

844 
öå_åiggî
 
_åig
,

845 
öå_pﬁ¨ôy
 
_pﬁ
)

847 
kobj›_t
 
_m
;

848 
rc
;

849 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_c⁄fig_öå
);

850 
rc
 = ((
bus_c⁄fig_öå_t
 *Ë
_m
)(
_dev
, 
_úq
, 
_åig
, 
_pﬁ
);

851  (
rc
);

852 
	}
}

855 
kobj›_desc
 
bus_des¸ibe_öå_desc
;

857 
	tbus_des¸ibe_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

858 
	tªsour˚
 *
	t_úq
, *
	t_cookõ
,

859 c⁄° *
	t_des¸
);

872 
__ölöe
 
	$BUS_DESCRIBE_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

873 
ªsour˚
 *
_úq
, *
_cookõ
,

874 c⁄° *
_des¸
)

876 
kobj›_t
 
_m
;

877 
rc
;

878 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_des¸ibe_öå
);

879 
rc
 = ((
bus_des¸ibe_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_cookõ
, 
_des¸
);

880  (
rc
);

881 
	}
}

884 
kobj›_desc
 
bus_höãd_chûd_desc
;

886 
	tbus_höãd_chûd_t
(
	tdevi˚_t
 
	t_dev
, c⁄° *
	t_d«me
, 
	t_dunô
);

904 
__ölöe
 
	$BUS_HINTED_CHILD
(
devi˚_t
 
_dev
, c⁄° *
_d«me
,

905 
_dunô
)

907 
kobj›_t
 
_m
;

908 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_höãd_chûd
);

909 ((
bus_höãd_chûd_t
 *Ë
_m
)(
_dev
, 
_d«me
, 
_dunô
);

910 
	}
}

913 
kobj›_desc
 
bus_gë_dma_èg_desc
;

915 
bus_dma_èg_t
 
	tbus_gë_dma_èg_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

923 
__ölöe
 
bus_dma_èg_t
 
	$BUS_GET_DMA_TAG
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

925 
kobj›_t
 
_m
;

926 
bus_dma_èg_t
 
rc
;

927 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_dma_èg
);

928 
rc
 = ((
bus_gë_dma_èg_t
 *Ë
_m
)(
_dev
, 
_chûd
);

929  (
rc
);

930 
	}
}

933 
kobj›_desc
 
bus_gë_bus_èg_desc
;

935 
bus_•a˚_èg_t
 
	tbus_gë_bus_èg_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

943 
__ölöe
 
bus_•a˚_èg_t
 
	$BUS_GET_BUS_TAG
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

945 
kobj›_t
 
_m
;

946 
bus_•a˚_èg_t
 
rc
;

947 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_bus_èg
);

948 
rc
 = ((
bus_gë_bus_èg_t
 *Ë
_m
)(
_dev
, 
_chûd
);

949  (
rc
);

950 
	}
}

953 
kobj›_desc
 
bus_höt_devi˚_unô_desc
;

955 
	tbus_höt_devi˚_unô_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

956 c⁄° *
	t_«me
, *
	t_unôp
);

966 
__ölöe
 
	$BUS_HINT_DEVICE_UNIT
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

967 c⁄° *
_«me
, *
_unôp
)

969 
kobj›_t
 
_m
;

970 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_höt_devi˚_unô
);

971 ((
bus_höt_devi˚_unô_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_«me
, 
_unôp
);

972 
	}
}

975 
kobj›_desc
 
bus_√w_∑ss_desc
;

977 
	tbus_√w_∑ss_t
(
	tdevi˚_t
 
	t_dev
);

984 
__ölöe
 
	$BUS_NEW_PASS
(
devi˚_t
 
_dev
)

986 
kobj›_t
 
_m
;

987 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_√w_∑ss
);

988 ((
bus_√w_∑ss_t
 *Ë
_m
)(
_dev
);

989 
	}
}

992 
kobj›_desc
 
bus_ªm≠_öå_desc
;

994 
	tbus_ªm≠_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	tu_öt
 
	t_úq
);

1003 
__ölöe
 
	$BUS_REMAP_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
u_öt
 
_úq
)

1005 
kobj›_t
 
_m
;

1006 
rc
;

1007 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªm≠_öå
);

1008 
rc
 = ((
bus_ªm≠_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
);

1009  (
rc
);

1010 
	}
}

1013 
kobj›_desc
 
bus_su•íd_chûd_desc
;

1015 
	tbus_su•íd_chûd_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

1023 
__ölöe
 
	$BUS_SUSPEND_CHILD
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

1025 
kobj›_t
 
_m
;

1026 
rc
;

1027 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_su•íd_chûd
);

1028 
rc
 = ((
bus_su•íd_chûd_t
 *Ë
_m
)(
_dev
, 
_chûd
);

1029  (
rc
);

1030 
	}
}

1033 
kobj›_desc
 
bus_ªsume_chûd_desc
;

1035 
	tbus_ªsume_chûd_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

1043 
__ölöe
 
	$BUS_RESUME_CHILD
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

1045 
kobj›_t
 
_m
;

1046 
rc
;

1047 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªsume_chûd
);

1048 
rc
 = ((
bus_ªsume_chûd_t
 *Ë
_m
)(
_dev
, 
_chûd
);

1049  (
rc
);

1050 
	}
}

1053 
kobj›_desc
 
bus_gë_domaö_desc
;

1055 
	tbus_gë_domaö_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_domaö
);

1064 
__ölöe
 
	$BUS_GET_DOMAIN
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, *
_domaö
)

1066 
kobj›_t
 
_m
;

1067 
rc
;

1068 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_domaö
);

1069 
rc
 = ((
bus_gë_domaö_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_domaö
);

1070  (
rc
);

1071 
	}
}

1074 
kobj›_desc
 
bus_gë_˝us_desc
;

1076 
	tbus_gë_˝us_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t˝u_£ts
 
	t_›
,

1077 
	tsize_t
 
	t_£tsize
, 
	t˝u£t_t
 *
	t_˝u£t
);

1089 
__ölöe
 
	$BUS_GET_CPUS
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

1090 
˝u_£ts
 
_›
, 
size_t
 
_£tsize
,

1091 
˝u£t_t
 *
_˝u£t
)

1093 
kobj›_t
 
_m
;

1094 
rc
;

1095 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_˝us
);

1096 
rc
 = ((
bus_gë_˝us_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_›
, 
_£tsize
, 
_˝u£t
);

1097  (
rc
);

1098 
	}
}

	@src/nvidia/device_if.h

23 #i‚de‡
_devi˚_if_h_


24 
	#_devi˚_if_h_


	)

27 
	~<sys/t¶og.h
>

30 
kobj›_desc
 
devi˚_¥obe_desc
;

32 
	tdevi˚_¥obe_t
(
	tdevi˚_t
 
	tdev
);

107 
__ölöe
 
	$DEVICE_PROBE
(
devi˚_t
 
dev
)

109 
kobj›_t
 
_m
;

110 
rc
;

112 
	`TSENTER2
(
	`devi˚_gë_«me
(
dev
));

114 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_¥obe
);

115 
rc
 = ((
devi˚_¥obe_t
 *Ë
_m
)(
dev
);

117 
	`TSEXIT2
(
	`devi˚_gë_«me
(
dev
));

119  (
rc
);

120 
	}
}

123 
kobj›_desc
 
devi˚_idítify_desc
;

125 
	tdevi˚_idítify_t
(
	tdrivî_t
 *
	tdrivî
, 
	tdevi˚_t
 
	t∑ª¡
);

152 
__ölöe
 
	$DEVICE_IDENTIFY
(
drivî_t
 *
drivî
, 
devi˚_t
 
∑ª¡
)

154 
kobj›_t
 
_m
;

155 
	`KOBJOPLOOKUP
(
drivî
->
›s
,
devi˚_idítify
);

156 ((
devi˚_idítify_t
 *Ë
_m
)(
drivî
, 
∑ª¡
);

157 
	}
}

160 
kobj›_desc
 
devi˚_©èch_desc
;

162 
	tdevi˚_©èch_t
(
	tdevi˚_t
 
	tdev
);

187 
__ölöe
 
	$DEVICE_ATTACH
(
devi˚_t
 
dev
)

189 
kobj›_t
 
_m
;

190 
rc
;

192 
	`TSENTER2
(
	`devi˚_gë_«me
(
dev
));

194 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_©èch
);

195 
rc
 = ((
devi˚_©èch_t
 *Ë
_m
)(
dev
);

197 
	`TSEXIT2
(
	`devi˚_gë_«me
(
dev
));

199  (
rc
);

200 
	}
}

203 
kobj›_desc
 
devi˚_dëach_desc
;

205 
	tdevi˚_dëach_t
(
	tdevi˚_t
 
	tdev
);

229 
__ölöe
 
	$DEVICE_DETACH
(
devi˚_t
 
dev
)

231 
kobj›_t
 
_m
;

232 
rc
;

233 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_dëach
);

234 
rc
 = ((
devi˚_dëach_t
 *Ë
_m
)(
dev
);

235  (
rc
);

236 
	}
}

239 
kobj›_desc
 
devi˚_shutdown_desc
;

241 
	tdevi˚_shutdown_t
(
	tdevi˚_t
 
	tdev
);

257 
__ölöe
 
	$DEVICE_SHUTDOWN
(
devi˚_t
 
dev
)

259 
kobj›_t
 
_m
;

260 
rc
;

261 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_shutdown
);

262 
rc
 = ((
devi˚_shutdown_t
 *Ë
_m
)(
dev
);

263  (
rc
);

264 
	}
}

267 
kobj›_desc
 
devi˚_su•íd_desc
;

269 
	tdevi˚_su•íd_t
(
	tdevi˚_t
 
	tdev
);

294 
__ölöe
 
	$DEVICE_SUSPEND
(
devi˚_t
 
dev
)

296 
kobj›_t
 
_m
;

297 
rc
;

298 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_su•íd
);

299 
rc
 = ((
devi˚_su•íd_t
 *Ë
_m
)(
dev
);

300  (
rc
);

301 
	}
}

304 
kobj›_desc
 
devi˚_ªsume_desc
;

306 
	tdevi˚_ªsume_t
(
	tdevi˚_t
 
	tdev
);

326 
__ölöe
 
	$DEVICE_RESUME
(
devi˚_t
 
dev
)

328 
kobj›_t
 
_m
;

329 
rc
;

330 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_ªsume
);

331 
rc
 = ((
devi˚_ªsume_t
 *Ë
_m
)(
dev
);

332  (
rc
);

333 
	}
}

336 
kobj›_desc
 
devi˚_quõs˚_desc
;

338 
	tdevi˚_quõs˚_t
(
	tdevi˚_t
 
	tdev
);

362 
__ölöe
 
	$DEVICE_QUIESCE
(
devi˚_t
 
dev
)

364 
kobj›_t
 
_m
;

365 
rc
;

366 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_quõs˚
);

367 
rc
 = ((
devi˚_quõs˚_t
 *Ë
_m
)(
dev
);

368  (
rc
);

369 
	}
}

372 
kobj›_desc
 
devi˚_ªgi°î_desc
;

374 * 
	tdevi˚_ªgi°î_t
(
	tdevi˚_t
 
	tdev
);

393 
__ölöe
 * 
	$DEVICE_REGISTER
(
devi˚_t
 
dev
)

395 
kobj›_t
 
_m
;

396 * 
rc
;

397 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_ªgi°î
);

398 
rc
 = ((
devi˚_ªgi°î_t
 *Ë
_m
)(
dev
);

399  (
rc
);

400 
	}
}

	@src/nvidia/export_nvswitch.h

24 #i‚de‡
_NVSWITCH_EXPORT_H_


25 
	#_NVSWITCH_EXPORT_H_


	)

27 #ifde‡
__˝lu•lus


31 
	~"nvlök_comm⁄.h
"

33 
	#NVSWITCH_DRIVER_NAME
 "nvidü-nvswôch"

	)

35 
	#NVSWITCH_MAX_BARS
 1

	)

37 
	#NVSWITCH_DEVICE_INSTANCE_MAX
 64

	)

39 
	#PCI_CLASS_BRIDGE_NVSWITCH
 0x0680

	)

41 
	#PCI_DEVICE_ID_SV10_INT
 0x10F5:0x10F5

	)

42 
	#PCI_DEVICE_ID_SV10
 0x1ACF:0x1AC0

	)

48 #i‚de‡
PCI_VENDOR_ID_NVIDIA


49 
	#PCI_VENDOR_ID_NVIDIA
 0x10DE

	)

52 
	#PCI_REVISION_ID_SV10
 0x0

	)

54 
	#PCI_ADDR_OFFSET_VENDOR
 0

	)

55 
	#PCI_ADDR_OFFSET_DEVID
 2

	)

57 
	#NVSWITCH_NSEC_PER_SEC
 1000000000ULL

	)

59 
	#NVSWITCH_DBG_LEVEL_MMIO
 0x0

	)

60 
	#NVSWITCH_DBG_LEVEL_INFO
 0x1

	)

61 
	#NVSWITCH_DBG_LEVEL_SETUP
 0x2

	)

62 
	#NVSWITCH_DBG_LEVEL_WARN
 0x3

	)

63 
	#NVSWITCH_DBG_LEVEL_ERROR
 0x4

	)

65 
nvswôch_devi˚
 
	tnvswôch_devi˚
;

91 
NvlSètus
 
NVLINK_API_CALL


92 
nvswôch_lib_check_≠i_vîsi⁄


94 
NvU32
 
u£r_maj‹
,

95 
NvU32
 
u£r_mö‹
,

96 
NvU32
 *
kî√l_maj‹
,

97 
NvU32
 *
kî√l_mö‹


119 
NvlSètus
 
NVLINK_API_CALL


120 
nvswôch_lib_ªgi°î_devi˚


122 
NvU16
 
pci_domaö
,

123 
NvU8
 
pci_bus
,

124 
NvU8
 
pci_devi˚
,

125 
NvU8
 
pci_func
,

126 
NvU16
 
devi˚_id
,

127 *
os_h™dÀ
,

128 
NvU32
 
os_ö°™˚
,

129 
nvswôch_devi˚
 **
devi˚


141 
NVLINK_API_CALL


142 
nvswôch_lib_uƒegi°î_devi˚


144 
nvswôch_devi˚
 *
devi˚


158 
NvlSètus
 
NVLINK_API_CALL


159 
nvswôch_lib_öôülize_devi˚


161 
nvswôch_devi˚
 *
devi˚


175 
NvlSètus
 
NVLINK_API_CALL


176 
nvswôch_lib_shutdown_devi˚


178 
nvswôch_devi˚
 *
devi˚


195 
NvlSètus
 
NVLINK_API_CALL
 
nvswôch_lib_˘æ


197 
nvswôch_devi˚
 *
devi˚
,

198 
NvU32
 
cmd
,

199 *
∑øms
,

200 
NvU64
 
size


211 
NVLINK_API_CALL
 
nvswôch_lib_gë_devi˚_öfo


213 
nvswôch_devi˚
 *
lib_h™dÀ
,

214 
nvlök_pci_öfo
 **
pciInfo


227 
NVLINK_API_CALL


228 
nvswôch_lib_íabÀ_öãºu±s


230 
nvswôch_devi˚
 *
devi˚


243 
NVLINK_API_CALL


244 
nvswôch_lib_dißbÀ_öãºu±s


246 
nvswôch_devi˚
 *
devi˚


261 
NvlSètus
 
NVLINK_API_CALL


262 
nvswôch_lib_check_öãºu±s


264 
nvswôch_devi˚
 *
devi˚


279 
NvlSètus
 
NVLINK_API_CALL


280 
nvswôch_lib_£rvi˚_öãºu±s


282 
nvswôch_devi˚
 *
devi˚


298 
NvlSètus
 
NVLINK_API_CALL


299 
nvswôch_lib_gë_log_cou¡


301 
nvswôch_devi˚
 *
devi˚
,

302 
NvU32
 *
Áèl
, NvU32 *
n⁄Áèl


319 
NvU64
 
NVLINK_API_CALL


320 
nvswôch_lib_de„ºed_èsk_di•©chî


322 
nvswôch_devi˚
 *
devi˚


328 
NvU32
 
NVLINK_API_CALL


329 
nvswôch_os_gë_devi˚_cou¡


338 
NvU64
 
NVLINK_API_CALL


339 
nvswôch_os_gë_∂©f‹m_time


347 
NVLINK_API_CALL


348 
__©åibuã__
 ((
f‹m©
 (
¥ötf
, 2, 3)))

349 
nvswôch_os_¥öt


351 
log_Àvñ
,

352 c⁄° *
pF‹m©
,

359 
NvlSètus
 
NVLINK_API_CALL


360 
nvswôch_os_ªad_ªgi°ry_dw‹d


362 *
os_h™dÀ
,

363 c⁄° *
«me
,

364 
NvU32
 *
d©a


371 
NVLINK_API_CALL


372 
nvswôch_os_ovîride_∂©f‹m


374 *
os_h™dÀ
,

375 
NvBoﬁ
 *
πlsim


378 #ifde‡
__˝lu•lus


	@src/nvidia/freebsd_nvswitch.c

30 
	~"nvlök_comm⁄.h
"

31 
	~"exp‹t_nvswôch.h
"

33 
NvU64
 
NVLINK_API_CALL


34 
	gnvswôch_os_gë_∂©f‹m_time


42 
NVLINK_API_CALL


43 
	gnvswôch_os_¥öt


45 c⁄° 
	glog_Àvñ
,

46 c⁄° *
	gfmt
,

53 
NvlSètus
 
NVLINK_API_CALL


54 
	gnvswôch_os_ªad_ªgi°ry_dw‹d


56 *
	gos_h™dÀ
,

57 c⁄° *
	g«me
,

58 
NvU32
 *
	gd©a


64 
NVLINK_API_CALL


65 
	gnvswôch_os_ovîride_∂©f‹m


67 *
	gos_h™dÀ
,

68 
NvBoﬁ
 *
	gπlsim


74 
NvU32
 
NVLINK_API_CALL


75 
	gnvswôch_os_gë_devi˚_cou¡


	@src/nvidia/ioctl_nvswitch.h

23 #i‚de‡
_IOCTL_NVSWITCH_H_


24 
	#_IOCTL_NVSWITCH_H_


	)

26 #ifde‡
__˝lu•lus


36 
	#NVSWITCH_DEV_IO_TYPE
 'd'

	)

37 
	#NVSWITCH_CTL_IO_TYPE
 'c'

	)

46 
NvU32
 
maj‹
;

47 
NvU32
 
mö‹
;

49 } 
	tNVSWITCH_VERSION
;

66 
NVSWITCH_VERSION
 
u£r
;

67 
NVSWITCH_VERSION
 
kî√l
;

68 
NvBoﬁ
 
is_com∑tibÀ
;

70 } 
	tNVSWITCH_CHECK_VERSION_PARAMS
;

77 
	#NVSWITCH_MAX_DEVICES
 64

	)

91 
NvU32
 
devi˚In°™˚
;

92 
NvU32
 
pciDomaö
;

93 
NvU32
 
pciBus
;

94 
NvU32
 
pciDevi˚
;

95 
NvU32
 
pciFun˘i⁄
;

97 } 
	tNVSWITCH_DEVICE_INSTANCE_INFO
;

101 
NvU32
 
devi˚Cou¡
;

102 
NVSWITCH_DEVICE_INSTANCE_INFO
 
öfo
[
NVSWITCH_MAX_DEVICES
];

104 } 
	tNVSWITCH_GET_DEVICES_PARAMS
;

106 
	#CTRL_NVSWITCH_GET_DEVICES
 0x01

	)

107 
	#CTRL_NVSWITCH_CHECK_VERSION
 0x02

	)

113 
	#IOCTL_NVSWITCH_GET_DEVICES
 \

114 
	`_IOR
(
NVSWITCH_CTL_IO_TYPE
, 
CTRL_NVSWITCH_GET_DEVICES
, 
NVSWITCH_GET_DEVICES_PARAMS
)

	)

115 
	#IOCTL_NVSWITCH_CHECK_VERSION
 \

116 
	`_IOWR
(
NVSWITCH_CTL_IO_TYPE
, 
CTRL_NVSWITCH_CHECK_VERSION
, 
NVSWITCH_CHECK_VERSION_PARAMS
)

	)

118 #ifde‡
__˝lu•lus


	@src/nvidia/nv-freebsd.h

11 #i‚de‡
__NV_FREEBSD_H__


12 
	#__NV_FREEBSD_H__


	)

14 #ifde‡
TRUE


15 #unde‡
TRUE


18 #ifde‡
FALSE


19 #unde‡
FALSE


22 
	~<sys/∑øm.h
>

24 #i‡
__FªeBSD_vîsi⁄
 >= 1300000

25 #îr‹ 
This
 
drivî
 
d€s
 
nŸ
 
suµ‹t
 
FªeBSD
 13.x/-
CURRENT
!

27 #i‡
__FªeBSD_vîsi⁄
 >= 1200000 && __FreeBSD_version < 1200086

28 #îr‹ 
This
 
drivî
 
ªquúes
 
FªeBSD
 12.0-
RC3
 
‹
 
œãr
!

30 #i‡
__FªeBSD_vîsi⁄
 >= 1100000 && __FreeBSD_version < 1100122

31 #îr‹ 
This
 
drivî
 
ªquúes
 
FªeBSD
 11.0 
‹
 
œãr
!

33 #i‡
__FªeBSD_vîsi⁄
 >= 1000000 && __FreeBSD_version < 1000510

34 #îr‹ 
This
 
drivî
 
ªquúes
 
FªeBSD
 10.0 
‹
 
œãr
!

36 #i‡
__FªeBSD_vîsi⁄
 >= 900000 && __FreeBSD_version < 900044

37 #îr‹ 
This
 
drivî
 
ªquúes
 
FªeBSD
 9.0 
‹
 
œãr
!

39 #i‡
__FªeBSD_vîsi⁄
 >= 800000 && __FreeBSD_version < 800107

40 #îr‹ 
This
 
drivî
 
ªquúes
 
FªeBSD
 8.0 
‹
 
œãr
!

42 #i‡
__FªeBSD_vîsi⁄
 < 702106

43 #îr‹ 
This
 
drivî
 
ªquúes
 
FªeBSD
 7.3 
‹
 
œãr
!

46 
	~<sys/sy°m.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<sys/queue.h
>

49 
	~<sys/pciio.h
>

50 
	~<sys/vnode.h
>

52 
	~<sys/kî√l.h
>

53 
	~<sys/moduÀ.h
>

54 
	~<sys/ioccom.h
>

55 
	~<sys/mÆloc.h
>

56 
	~<sys/sockë.h
>

57 
	~<sys/sy£¡.h
>

58 
	~<sys/˘y≥.h
>

59 
	~<sys/sys˘l.h
>

61 
	~<machöe/˝u.h
>

62 
	~<machöe/ªsour˚.h
>

63 
	~<machöe/˛ock.h
>

64 
	~<machöe/bus.h
>

65 
	~<machöe/•ecüÃeg.h
>

67 
	~<sys/c⁄f.h
>

68 
	~<sys/rm™.h
>

69 
	~<sys/¥oc.h
>

70 
	~<sys/lock.h
>

71 
	~<sys/mm™.h
>

72 
	~<sys/fûe.h
>

73 
	~<sys/pﬁl.h
>

74 
	~<sys/rwlock.h
>

76 
	~<sys/sysˇŒ.h
>

77 
	~<sys/bus.h
>

78 
	~<sys/memønge.h
>

79 
	~<sys/sy•rŸo.h
>

80 
	~<sys/sig«lv¨.h
>

82 
	~<vm/vm.h
>

83 
	~<vm/vm_∑øm.h
>

84 
	~<vm/vm_kîn.h
>

85 
	~<vm/vm_∑ge.h
>

86 
	~<vm/vm_exã∫.h
>

87 
	~<vm/vm_obje˘.h
>

88 
	~<vm/pm≠.h
>

89 
	~<vm/vm_m≠.h
>

90 
	~<vm/vm_∑gî.h
>

91 
	~<vm/uma.h
>

93 
	~<sys/smp.h
>

94 
	~<dev/pci/pcúeg.h
>

95 
	~<dev/pci/pciv¨.h
>

96 
	~<sys/kdb.h
>

97 
	~<sys/fûedesc.h
>

99 
	~<sys/¥iv.h
>

100 
	~<sys/lock.h
>

101 
	~<sys/muãx.h
>

102 
	~<sys/sx.h
>

103 
	~<sys/c⁄dv¨.h
>

104 
	~<sys/sgli°.h
>

105 
	~<sys/èskqueue.h
>

107 
	~<fs/devfs/devfs_öt.h
>

109 
	#CURTHREAD
 
cuπhªad


	)

111 #i‡
__FªeBSD_vîsi⁄
 >= 800049

112 
	#su£r
(
_td
Ë
	`¥iv_check
((_td), 
PRIV_DRIVER
)

	)

115 #i‡
__FªeBSD_vîsi⁄
 >= 1100012

116 
	~<sys/ˇpsicum.h
>

117 #ñi‡
__FªeBSD_vîsi⁄
 >= 900041

118 
	~<sys/ˇ∑bûôy.h
>

119 #i‡
__FªeBSD_vîsi⁄
 < 1000053

120 
	#ˇp_rights_öô
(
rights
, 
ˇp
Ë(ˇp)

	)

123 
	#fgë
(
td
, 
fd
, 
rights
, 
Â
Ë
	`fgë
—d, fd, fp)

	)

126 
	#__NV_ITHREAD
(Ë(
cuπhªad
->
td_pÊags
 & 
TDP_ITHREAD
)

	)

134 
MALLOC_DECLARE
(
M_NVIDIA
);

143 
	#NV_SUPPORT_LINUX_COMPAT


	)

150 #i‡
__FªeBSD_vîsi⁄
 >= 900044

151 
	#NV_SUPPORT_ACPI


	)

153 #unde‡
NV_SUPPORT_ACPI


160 
	#NV_SUPPORT_ACPI_PM


	)

168 #unde‡
NV_USE_WBINVD


171 
	snvidü_±e
 {

172 
vm_off£t_t
 
	mvútuÆ_addªss
;

173 
uöt64_t
 
	mphysiˇl_addªss
;

174 } 
	tnvidü_±e_t
;

177 
	snvidü_Æloc
 {

178 
SLIST_ENTRY
(
nvidü_Æloc
Ë
	mli°
;

179 
vm_mem©å_t
 
	m©å
;

180 
uöt32_t
 
	msize
;

181 
	mÆloc_ty≥_c⁄tiguous
;

182 
nvidü_±e
 *
	m±e_¨øy
;

183 
sgli°
 *
	msg_li°
;

184 
vm_obje˘_t
 
	mobje˘
;

185 } 
	tnvidü_Æloc_t
;

188 
	snvidü_evít
 {

189 
STAILQ_ENTRY
(
nvidü_evít
Ë
	mqueue
;

190 
nv_evít_t
 
	mevít
;

191 } 
	tnvidü_evít_t
;

194 
	snvidü_fûï
 {

195 
nv_°©e_t
 *
	mnv
;

196 
STAILQ_HEAD
(
evít_queue
, 
nvidü_evít
Ë
	mevít_queue
;

197 
	mevít_≥ndög
;

198 
mtx
 
	mevít_mtx
;

199 
£löfo
 
	mevít_r£l
;

200 
nv_Æloc_m≠pög_c⁄ãxt_t
 
	mmm≠_c⁄ãxt
;

201 } 
	tnvidü_fûï_t
;

204 
	snvidü_w‹k
 {

205 
èsk
 
	mèsk
;

206 *
	md©a
;

207 } 
	tnvidü_w‹k_t
;

210 
	envidü_so·c_dev_°ack
 {

211 
	mNV_DEV_STACK_API
,

212 
	mNV_DEV_STACK_PCI_CFGCHK
,

213 
	mNV_DEV_STACK_ISR
,

214 
	mNV_DEV_STACK_TIMER
,

215 
	mNV_DEV_STACK_COUNT


216 } 
	tnvidü_so·c_dev_°ack_t
;

219 
	snvidü_so·c
 {

220 
devi˚_t
 
	mdev
;

222 
sgli°
 *
	mUD_sg_li°
;

223 
vm_obje˘_t
 
	mUD_obje˘
;

225 
ªsour˚
 *
	mBAR_ªcs
[
NV_GPU_NUM_BARS
];

226 
	mBAR_rids
[
NV_GPU_NUM_BARS
];

227 
sgli°
 *
	mBAR_sg_li°s
[
NV_GPU_NUM_BARS
];

228 
vm_obje˘_t
 
	mBAR_obje˘s
[
NV_GPU_NUM_BARS
];

230 
ªsour˚
 *
	múq
;

231 *
	múq_ih
;

232 
	múq_rid
;

235 
nvidü_°ack_t
 *
	m©èch_•
;

238 
nvidü_°ack_t
 *
	m•
[
NV_DEV_STACK_COUNT
];

240 
ªsour˚
 *
	mi›
;

241 
	mi›_rid
;

243 
bus_•a˚_h™dÀ_t
 
	mbs_h™dÀ
;

244 
bus_•a˚_èg_t
 
	mbs_èg
;

246 
cdev
 *
	mcdev
;

247 
nv_°©e_t
 *
	mnv_°©e
;

249 
sys˘l_˘x_li°
 
	msys˘l_˘x
;

251 
ˇŒout
 
	mtimî
;

253 
uöt64_t
 
	mdma_mask
;

256 
SLIST_HEAD
(
Æloc_li°
, 
nvidü_Æloc
Ë
	mÆloc_li°
;

258 
uöt32_t
 
	mªf˙t
;

260 
sx
 
	m≠i_sx
;

262 } 
	tnvidü_so·c_t
;

264 
	#CDEV_CTL_MINOR
 255

	)

266 
dev˛ass_t
 
nvidü_dev˛ass
;

268 
nvidü_so·c
 
nvidü_˘l_sc
;

269 
nv_°©e_t
 
nvidü_˘l_°©e
;

271 
	#PCIR_CAP_LIST_ID
 0x00

	)

272 
	#PCIR_CAP_LIST_NEXT
 0x01

	)

273 
	#PCIR_CAP_ID_AGP
 0x02

	)

274 
	#PCIR_CAP_ID_EXP
 0x10

	)

276 #i‡!
deföed
(
PCIS_DISPLAY_3D
)

277 
	#PCIS_DISPLAY_3D
 0x002

	)

279 #i‡!
deföed
(
PCIM_CMD_INTXDIS
)

280 
	#PCIM_CMD_INTXDIS
 0x400

	)

283 #i‡!
deföed
(
VM_MEMATTR_WEAK_UNCACHEABLE
)

284 
	#VM_MEMATTR_WEAK_UNCACHEABLE
 
VM_MEMATTR_UNCACHED


	)

287 #i‡!
deföed
(
PAT_UNCACHEABLE
)

288 
	#PAT_UNCACHEABLE
 0x00

	)

290 #i‡!
deföed
(
PAT_WRITE_COMBINING
)

291 
	#PAT_WRITE_COMBINING
 0x01

	)

293 #i‡!
deföed
(
PAT_WRITE_BACK
)

294 
	#PAT_WRITE_BACK
 0x06

	)

305 
	#__NV_IOC_TYPE
(
_cmd
Ë(((_cmdË>> 8Ë& 0xff)

	)

306 
	#__NV_IOC_NR
(
_cmd
Ë(((_cmdË>> 0Ë& 0xff)

	)

307 
	#__NV_IOC_SIZE
(
_cmd
Ë(((_cmdË>> 16Ë& 0x1fff)

	)

309 
uma_z⁄e_t
 
nvidü_°ack_t_z⁄e
;

311 
	#NV_UMA_ZONE_ALLOC_STACK
(
±r
) \

313 (
±r
Ë
	`uma_zÆloc
(
nvidü_°ack_t_z⁄e
, 
M_WAITOK
); \

314 i‡((
±r
Ë!
NULL
) \

316 (
±r
)->
size
 = (’å)->
°ack
); \

317 (
±r
)->
t›
 = (±r)->
°ack
 + (±r)->
size
; \

319 }

	)

321 
	#NV_UMA_ZONE_FREE_STACK
(
±r
) \

323 
	`uma_z‰ì
(
nvidü_°ack_t_z⁄e
, (
±r
)); \

324 (
±r
Ë
NULL
; \

325 }

	)

328 
nvidü_dev_©èch
 (
nvidü_so·c
 *);

329 
nvidü_dev_dëach
 (
nvidü_so·c
 *);

332 
nvidü_˘l_©èch
 ();

333 
nvidü_˘l_dëach
 ();

336 
nvidü_pci_ßve_c⁄fig_•a˚
 (
nvidü_°ack_t
 *, 
devi˚_t
 
dev
);

337 
nvidü_pci_ª°‹e_c⁄fig_•a˚
(
nvidü_°ack_t
 *, 
devi˚_t
 
dev
);

338 
nvidü_pci_check_c⁄fig_•a˚
 (
nvidü_°ack_t
 *, 
devi˚_t
 
dev
, 
BOOL
, BOOL, BOOL);

339 
nvidü_pci_£tup_öå
 (
devi˚_t
 
dev
);

340 
nvidü_pci_ã¨down_öå
 (
devi˚_t
 
dev
);

341 
NvU8
 
nvidü_pci_föd_ˇ∑bûôy
 (
devi˚_t
 
dev
, NvU8);

343 
	#NV_SHUTDOWN_ADAPTER
(
•
,
nv
) \

345 
	`rm_dißbÀ_ad≠ãr
(
•
, 
nv
); \

346 
	`rm_shutdown_ad≠ãr
(
•
, 
nv
); \

347 }

	)

349 
	#NV_PCI_CHECK_CONFIG_SPACE
(
•
,
nv
,
cb
,
as
,
mb
) \

351 
nvidü_so·c
 *
__sc
; \

352 i‡((((
nv
)->
Êags
 & 
NV_FLAG_CONTROL
) == 0) && \

353 (((
nv
)->
Êags
 & 
NV_FLAG_SKIP_CFG_CHECK
) == 0)) { \

354 
__sc
 = (
nv
)->
os_°©e
; \

355 
	`nvidü_pci_check_c⁄fig_•a˚
(
•
, 
__sc
->
dev
, 
cb
, 
as
, 
mb
); \

357 }

	)

360 
nvidü_©èch
 (
devi˚_t
);

361 
nvidü_dëach
 (
devi˚_t
);

362 
nvidü_su•íd
 (
devi˚_t
);

363 
nvidü_ªsume
 (
devi˚_t
);

364 
nvidü_Æloc_h¨dw¨e
 (
devi˚_t
);

365 
nvidü_‰ì_h¨dw¨e
 (
devi˚_t
);

366 
nvidü_öå
 (*);

367 
nvidü_modevít
 (
moduÀ_t
, , *);

369 
nvidü_rc_timî
 (*);

371 
nv_lock_≠i
 (
nv_°©e_t
 *);

372 
nv_u∆ock_≠i
 (
nv_°©e_t
 *);

374 
NvS32
 
nv_Æloc_c⁄tig_∑ges
 (
nv_°©e_t
 *, 
NvU32
, NvU32, 
NvBoﬁ
, 
NvU64
 *, **);

375 
NvS32
 
nv_‰ì_c⁄tig_∑ges
 (
nv_°©e_t
 *, *);

376 
NvS32
 
nv_Æloc_sy°em_∑ges
 (
nv_°©e_t
 *, 
NvU32
, NvU32, 
NvBoﬁ
, 
NvU64
 *, **);

377 
NvS32
 
nv_‰ì_sy°em_∑ges
 (
nv_°©e_t
 *, *);

379 
	#NV_SGLIST_FREE
(
sgl
) \

381 
	`sgli°_‰ì
(
sgl
); \

382 (
sgl
Ë
NULL
; \

383 }

	)

385 
	#NV_VM_OBJECT_DEALLOCATE
(
obj
) \

387 
	`vm_obje˘_dóŒoˇã
(
obj
); \

388 (
obj
Ë
NULL
; \

389 }

	)

391 #i‡
__FªeBSD_vîsi⁄
 < 1000030

392 
	#VM_OBJECT_WLOCK
(
obje˘
Ë
	`VM_OBJECT_LOCK
(obje˘)

	)

393 
	#VM_OBJECT_WUNLOCK
(
obje˘
Ë
	`VM_OBJECT_UNLOCK
(obje˘)

	)

396 #i‡
__FªeBSD_vîsi⁄
 < 1000055

397 
	#vm_m≠_föd
(
m≠
, 
obje˘
, 
off£t
, 
addr
, 
Àngth
, \

398 
max_addr
, 
föd_•a˚
, 
¥Ÿ
, 
max
, 
cow
) \

399 
	`vm_m≠_föd
(
m≠
, 
obje˘
, 
off£t
, 
addr
, 
Àngth
, 
föd_•a˚
, 
¥Ÿ
, 
max
, 
cow
)

	)

402 #i‡
__FªeBSD_vîsi⁄
 < 1000042

403 
	#kmem_¨ía
 
kî√l_m≠


	)

406 #i‡
__FªeBSD_vîsi⁄
 >= 1200083

407 
	#NV_KMEM_ALLOC_CONTIG
(
size
, 
Êags
, 
low
, 
high
, 
Æign
, 
bound¨y
, 
mem©å
) \

408 
	`kmem_Æloc_c⁄tig
(
size
, 
Êags
, 
low
, 
high
, 
Æign
, 
bound¨y
, 
mem©å
)

	)

410 
	#NV_KMEM_FREE
(
addªss
, 
size
) \

411 
	`kmem_‰ì
(
addªss
, 
size
)

	)

414 
	#NV_KMEM_ALLOC_CONTIG
(
size
, 
Êags
, 
low
, 
high
, 
Æign
, 
bound¨y
, 
mem©å
) \

415 
	`kmem_Æloc_c⁄tig
(
kmem_¨ía
, 
size
, 
Êags
, 
low
, 
high
, 
Æign
, 
bound¨y
, 
mem©å
)

	)

417 
	#NV_KMEM_FREE
(
addªss
, 
size
) \

418 
	`kmem_‰ì
(
kmem_¨ía
, 
addªss
, 
size
)

	)

421 #i‡
__FªeBSD_vîsi⁄
 >= 800000

422 
	#NV_VM_PAGER_ALLOCATE
(
ty≥
, 
h™dÀ
, 
size
, 
¥Ÿ
, 
off
, 
¸ed
) \

423 
	`vm_∑gî_Æloˇã
(
ty≥
, 
h™dÀ
, 
size
, 
¥Ÿ
, 
off
, 
¸ed
)

	)

425 
	#NV_VM_PAGER_ALLOCATE
(
ty≥
, 
h™dÀ
, 
size
, 
¥Ÿ
, 
off
, 
¸ed
) \

426 
	`vm_∑gî_Æloˇã
(
ty≥
, 
h™dÀ
, 
size
, 
¥Ÿ
, 
off
)

	)

429 #i‡
__FªeBSD_vîsi⁄
 >= 800000

430 
	#NV_KDB_ENTER
(
why
,
msg
Ë
	`kdb_íãr
(why, msg)

	)

432 
	#NV_KDB_ENTER
(
why
,
msg
Ë
	`kdb_íãr
(msg)

	)

436 
nvidü_sys˘l_öô
 ();

437 
nvidü_sys˘l_exô
 ();

439 
nvidü_sys˘l_gpu_modñ
 (
SYSCTL_HANDLER_ARGS
);

440 
nvidü_sys˘l_gpu_uuid
 (
SYSCTL_HANDLER_ARGS
);

441 
nvidü_sys˘l_gpu_vbios
 (
SYSCTL_HANDLER_ARGS
);

442 
nvidü_sys˘l_bus_ty≥
 (
SYSCTL_HANDLER_ARGS
);

444 
nvidü_sys˘l_ªgi°ry_key
 (
SYSCTL_HANDLER_ARGS
);

445 
nvidü_sys˘l_ªgi°ry_dw‹ds
 (
SYSCTL_HANDLER_ARGS
);

447 
nv_sys˘l_öô
 (
nv_°©e_t
 *);

448 
nv_sys˘l_exô
 (
nv_°©e_t
 *);

451 
nvidü_löux_öô
 ();

452 
nvidü_löux_exô
 ();

456 
nvidü_upd©e_ªgi°ry
 (*);

459 
nvidü_gë_ˇrd_öfo
 (*, );

460 
nvidü_h™dÀ_io˘l
 (
nv_°©e_t
 *, 
nvidü_fûï
 *, 
u_l⁄g
, 
ˇddr_t
);

463 
nvidü_›í_˘l
 (
nv_°©e_t
 *, 
nvidü_fûï
 *);

464 
nvidü_›í_dev
 (
nv_°©e_t
 *, 
nvidü_fûï
 *);

465 
nvidü_›í_dev_kî√l
(
NvU32
 
gpu_id
, 
nvidü_°ack_t
 *
•
);

466 
nvidü_˛o£_˘l
 (
nv_°©e_t
 *, 
nvidü_fûï
 *);

467 
nvidü_˛o£_dev
 (
nv_°©e_t
 *, 
nvidü_fûï
 *);

468 
nvidü_˛o£_dev_kî√l
(
NvU32
 
gpu_id
, 
nvidü_°ack_t
 *
•
);

469 
nvidü_mm≠_˘l_sögÀ
(
nv_°©e_t
 *, 
nvidü_fûï
 *, 
vm_ooff£t_t
 *,

470 
vm_size_t
, 
vm_obje˘_t
 *);

471 
nvidü_mm≠_dev_sögÀ
(
nv_°©e_t
 *, 
nvidü_fûï
 *, 
vm_ooff£t_t
 *,

472 
vm_size_t
, 
vm_obje˘_t
 *);

475 
nvidü_mode£t_su•íd
(
NvU32
 
gpu_id
);

476 
nvidü_mode£t_ªsume
 (
NvU32
 
gpu_id
);

478 
ölöe
 
NvBoﬁ
 
	$nvidü_lock_öô_locks
(
nvidü_°ack_t
 *
•
, 
nv_°©e_t
 *
nv
)

480  
	`rm_öô_evít_locks
(
•
, 
nv
);

481 
	}
}

483 
ölöe
 
	$nvidü_lock_de°roy_locks
(
nvidü_°ack_t
 *
•
, 
nv_°©e_t
 *
nv
)

485 
	`rm_de°roy_evít_locks
(
•
, 
nv
);

486 
	}
}

488 
nvidü_˘l_dt‹
(*
¨g
);

489 
nvidü_dev_dt‹
(*
¨g
);

	@src/nvidia/nv-kernel-interface-api.h

11 #i‚de‡
_NV_KERNEL_INTERFACE_API_H


12 
	#_NV_KERNEL_INTERFACE_API_H


	)

22 #i‡(
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
) >= 40600

23 
	#__ALTSTACK_ATTRIBUTE_ARG__
 0

	)

25 
	#__ALTSTACK_ATTRIBUTE_ARG__
 
Ál£


	)

28 #i‡
deföed
(
NV_UNIX
)

29 #i‡
deföed
(
NVCPU_X86
)

30 #i‡
deföed
(
__u£_Æt°ack__
)

31 
	#NV_API_CALL
 
	`__©åibuã__
((
	`ªg∑rm
(0),
	`Æt°ack
(
__ALTSTACK_ATTRIBUTE_ARG__
)))

	)

33 
	#NV_API_CALL
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

35 #ñi‡
deföed
(
NVCPU_X86_64
Ë&& deföed(
__u£_Æt°ack__
)

36 
	#NV_API_CALL
 
	`__©åibuã__
((
	`Æt°ack
(
__ALTSTACK_ATTRIBUTE_ARG__
)))

	)

38 
	#NV_API_CALL


	)

41 
	#NV_API_CALL


	)

	@src/nvidia/nv-misc.h

11 #i‚de‡
_NV_MISC_H_


12 
	#_NV_MISC_H_


	)

14 
	~"nvty≥s.h
"

15 
	~"nv°©us.h
"

17 #i‚de‡
BOOL


18 
	#BOOL
 
NvS32


	)

20 #i‚de‡
TRUE


21 
	#TRUE
 1L

	)

23 #i‚de‡
FALSE


24 
	#FALSE
 0L

	)

26 #i‚de‡
NULL


27 
	#NULL
 0L

	)

	@src/nvidia/nv-reg.h

12 #i‚de‡
_RM_REG_H_


13 
	#_RM_REG_H_


	)

15 
	~"nvty≥s.h
"

21 
	#__NV_REG_STRING
(
ªgkey
Ë#ªgkey

	)

22 
	#NV_REG_STRING
(
ªgkey
Ë
	`__NV_REG_STRING
‘egkey)

	)

29 
	#__NV_REG_VAR
(
ªgkey
Ë
NVªg_
##
	)
ªgkey

31 #i‡
deföed
(
NV_MODULE_PARAMETER
)

32 
	#NV_DEFINE_REG_ENTRY
(
ªgkey
, 
deÁu…_vÆue
) \

33 
NvU32
 
	`__NV_REG_VAR
(
ªgkey
Ë(
deÁu…_vÆue
); \

34 
	`NV_MODULE_PARAMETER
(
	`__NV_REG_VAR
(
ªgkey
))

	)

35 
	#NV_DEFINE_REG_ENTRY_GLOBAL
(
ªgkey
, 
deÁu…_vÆue
) \

36 
NvU32
 
	`__NV_REG_VAR
(
ªgkey
Ë(
deÁu…_vÆue
); \

37 
	`NV_MODULE_PARAMETER
(
	`__NV_REG_VAR
(
ªgkey
))

	)

39 
	#NV_DEFINE_REG_ENTRY
(
ªgkey
, 
deÁu…_vÆue
) \

40 
NvU32
 
	`__NV_REG_VAR
(
ªgkey
Ë(
deÁu…_vÆue
)

	)

41 
	#NV_DEFINE_REG_ENTRY_GLOBAL
(
ªgkey
, 
deÁu…_vÆue
) \

42 
NvU32
 
	`__NV_REG_VAR
(
ªgkey
Ë(
deÁu…_vÆue
)

	)

45 #i‡
deföed
(
NV_MODULE_STRING_PARAMETER
)

46 
	#NV_DEFINE_REG_STRING_ENTRY
(
ªgkey
, 
deÁu…_vÆue
) \

47 *
	`__NV_REG_VAR
(
ªgkey
Ë(
deÁu…_vÆue
); \

48 
	`NV_MODULE_STRING_PARAMETER
(
	`__NV_REG_VAR
(
ªgkey
))

	)

50 
	#NV_DEFINE_REG_STRING_ENTRY
(
ªgkey
, 
deÁu…_vÆue
) \

51 *
	`__NV_REG_VAR
(
ªgkey
Ë(
deÁu…_vÆue
)

	)

54 
	#NV_DEFINE_PARAMS_TABLE_ENTRY
(
ªgkey
) \

55 { "NVªg", 
	`NV_REG_STRING
(
ªgkey
), &
	`__NV_REG_VAR
‘egkeyË}

	)

83 
	#__NV_MOBILE
 
Mobûe


	)

84 
	#NV_REG_MOBILE
 
	`NV_REG_STRING
(
__NV_MOBILE
)

	)

101 
	#__NV_MODIFY_DEVICE_FILES
 
ModifyDevi˚Fûes


	)

102 
	#NV_REG_MODIFY_DEVICE_FILES
 
	`NV_REG_STRING
(
__NV_MODIFY_DEVICE_FILES
)

	)

116 
	#__NV_DEVICE_FILE_UID
 
Devi˚FûeUID


	)

117 
	#NV_REG_DEVICE_FILE_UID
 
	`NV_REG_STRING
(
__NV_DEVICE_FILE_UID
)

	)

131 
	#__NV_DEVICE_FILE_GID
 
Devi˚FûeGID


	)

132 
	#NV_REG_DEVICE_FILE_GID
 
	`NV_REG_STRING
(
__NV_DEVICE_FILE_GID
)

	)

146 
	#__NV_DEVICE_FILE_MODE
 
Devi˚FûeMode


	)

147 
	#NV_REG_DEVICE_FILE_MODE
 
	`NV_REG_STRING
(
__NV_DEVICE_FILE_MODE
)

	)

155 
	#__NV_RESMAN_DEBUG_LEVEL
 
Resm™DebugLevñ


	)

156 
	#NV_REG_RESMAN_DEBUG_LEVEL
 
	`NV_REG_STRING
(
__NV_RESMAN_DEBUG_LEVEL
)

	)

164 
	#__NV_RM_LOGON_RC
 
RmLog⁄RC


	)

165 
	#NV_REG_RM_LOGON_RC
 
	`NV_REG_STRING
(
__NV_RM_LOGON_RC
)

	)

196 
	#__NV_UPDATE_MEMORY_TYPES
 
Upd©eMem‹yTy≥s


	)

197 
	#NV_REG_UPDATE_MEMORY_TYPES
 
	`NV_REG_STRING
(
__NV_UPDATE_MEMORY_TYPES
)

	)

219 
	#__NV_INITIALIZE_SYSTEM_MEMORY_ALLOCATIONS
 \

220 
InôülizeSy°emMem‹yAŒoˇti⁄s


	)

221 
	#NV_REG_INITIALIZE_SYSTEM_MEMORY_ALLOCATIONS
 \

222 
	`NV_REG_STRING
(
__NV_INITIALIZE_SYSTEM_MEMORY_ALLOCATIONS
)

	)

240 
	#__NV_REGISTRY_DWORDS
 
Regi°ryDw‹ds


	)

241 
	#NV_REG_REGISTRY_DWORDS
 
	`NV_REG_STRING
(
__NV_REGISTRY_DWORDS
)

	)

273 
	#__NV_REGISTRY_DWORDS_PER_DEVICE
 
Regi°ryDw‹dsPîDevi˚


	)

274 
	#NV_REG_REGISTRY_DWORDS_PER_DEVICE
 
	`NV_REG_STRING
(
__NV_REGISTRY_DWORDS_PER_DEVICE
)

	)

276 
	#__NV_RM_MSG
 
RmMsg


	)

277 
	#NV_RM_MSG
 
	`NV_REG_STRING
(
__NV_RM_MSG
)

	)

306 
	#__NV_USE_PAGE_ATTRIBUTE_TABLE
 
U£PageAâribuãTabÀ


	)

307 
	#NV_USE_PAGE_ATTRIBUTE_TABLE
 
	`NV_REG_STRING
(
__NV_USE_PAGE_ATTRIBUTE_TABLE
)

	)

325 
	#__NV_ENABLE_MSI
 
E«bÀMSI


	)

326 
	#NV_REG_ENABLE_MSI
 
	`NV_REG_STRING
(
__NV_ENABLE_MSI
)

	)

343 
	#__NV_MAP_REGISTERS_EARLY
 
M≠Regi°îsE¨ly


	)

344 
	#NV_REG_MAP_REGISTERS_EARLY
 
	`NV_REG_STRING
(
__NV_MAP_REGISTERS_EARLY
)

	)

360 
	#__NV_REGISTER_FOR_ACPI_EVENTS
 
Regi°îF‹ACPIEvíts


	)

361 
	#NV_REG_REGISTER_FOR_ACPI_EVENTS
 
	`NV_REG_STRING
(
__NV_REGISTER_FOR_ACPI_EVENTS
)

	)

384 
	#__NV_CHECK_PCI_CONFIG_SPACE
 
CheckPCIC⁄figS∑˚


	)

385 
	#NV_REG_CHECK_PCI_CONFIG_SPACE
 
	`NV_REG_STRING
(
__NV_CHECK_PCI_CONFIG_SPACE
)

	)

387 
	#NV_CHECK_PCI_CONFIG_SPACE_DISABLED
 0

	)

388 
	#NV_CHECK_PCI_CONFIG_SPACE_ENABLED
 1

	)

389 
	#NV_CHECK_PCI_CONFIG_SPACE_INIT
 0xFFFFFFFF

	)

406 
	#__NV_ASSIGN_GPUS
 
AssignGpus


	)

407 
	#NV_REG_ASSIGN_GPUS
 
	`NV_REG_STRING
(
__NV_ASSIGN_GPUS
)

	)

429 
	#__NV_ENABLE_PCIE_GEN3
 
E«bÀPCIeGí3


	)

430 
	#NV_REG_ENABLE_PCIE_GEN3
 
	`NV_REG_STRING
(
__NV_ENABLE_PCIE_GEN3
)

	)

443 
	#__NV_MEMORY_POOL_SIZE
 
Mem‹yPoﬁSize


	)

444 
	#NV_REG_MEMORY_POOL_SIZE
 
	`NV_REG_STRING
(
__NV_MEMORY_POOL_SIZE
)

	)

457 
	#__NV_KMALLOC_HEAP_MAX_SIZE
 
KMÆlocHópMaxSize


	)

458 
	#NV_KMALLOC_HEAP_MAX_SIZE
 
	`NV_REG_STRING
(
__NV_KMALLOC_HEAP_MAX_SIZE
)

	)

471 
	#__NV_VMALLOC_HEAP_MAX_SIZE
 
VMÆlocHópMaxSize


	)

472 
	#NV_VMALLOC_HEAP_MAX_SIZE
 
	`NV_REG_STRING
(
__NV_VMALLOC_HEAP_MAX_SIZE
)

	)

486 
	#__NV_IGNORE_MMIO_CHECK
 
Ign‹eMMIOCheck


	)

487 
	#NV_REG_IGNORE_MMIO_CHECK
 
	`NV_REG_STRING
(
__NV_IGNORE_MMIO_CHECK
)

	)

508 
	#__NV_TCE_BYPASS_MODE
 
TCEBy∑ssMode


	)

509 
	#NV_REG_TCE_BYPASS_MODE
 
	`NV_REG_STRING
(
__NV_TCE_BYPASS_MODE
)

	)

511 
	#NV_TCE_BYPASS_MODE_DEFAULT
 0

	)

512 
	#NV_TCE_BYPASS_MODE_ENABLE
 1

	)

513 
	#NV_TCE_BYPASS_MODE_DISABLE
 2

	)

534 
	#__NV_USE_THREADED_INTERRUPTS
 
U£ThªadedI¡îru±s


	)

535 
	#NV_REG_USE_THREADED_INTERRUPTS
 
	`NV_REG_STRING
(
__NV_USE_THREADED_INTERRUPTS
)

	)

556 
	#__NV_PCI_DEVICE_BDF
 
pci


	)

557 
	#NV_REG_PCI_DEVICE_BDF
 
	`NV_REG_STRING
(
__NV_PCI_DEVICE_BDF
)

	)

577 
	#__NV_ENABLE_STREAM_MEMOPS
 
E«bÀSåómMemOPs


	)

578 
	#NV_REG_ENABLE_STREAM_MEMOPS
 
	`NV_REG_STRING
(
__NV_ENABLE_STREAM_MEMOPS
)

	)

596 
	#__NV_ENABLE_BACKLIGHT_HANDLER
 
E«bÀBacklightH™dÀr


	)

597 
	#NV_REG_ENABLE_BACKLIGHT_HANDLER
 
	`NV_REG_STRING
(
__NV_ENABLE_BACKLIGHT_HANDLER
)

	)

617 
	#__NV_ENABLE_USER_NUMA_MANAGEMENT
 
E«bÀU£rNUMAM™agemít


	)

618 
	#NV_REG_ENABLE_USER_NUMA_MANAGEMENT
 
	`NV_REG_STRING
(
__NV_ENABLE_USER_NUMA_MANAGEMENT
)

	)

630 
	#__NV_GPU_BLACKLIST
 
GpuBœckli°


	)

631 
	#NV_REG_GPU_BLACKLIST
 
	`NV_REG_STRING
(
__NV_GPU_BLACKLIST
)

	)

633 #i‡
deföed
(
NV_DEFINE_REGISTRY_KEY_TABLE
)

639 
NV_DEFINE_REG_ENTRY
(
__NV_MOBILE
, ~0);

640 
NV_DEFINE_REG_ENTRY
(
__NV_RESMAN_DEBUG_LEVEL
, ~0);

641 
NV_DEFINE_REG_ENTRY
(
__NV_RM_LOGON_RC
, 1);

642 
NV_DEFINE_REG_ENTRY
(
__NV_MODIFY_DEVICE_FILES
, 1);

643 
NV_DEFINE_REG_ENTRY
(
__NV_DEVICE_FILE_UID
, 0);

644 
NV_DEFINE_REG_ENTRY
(
__NV_DEVICE_FILE_GID
, 0);

645 
NV_DEFINE_REG_ENTRY
(
__NV_DEVICE_FILE_MODE
, 0666);

646 
NV_DEFINE_REG_ENTRY
(
__NV_UPDATE_MEMORY_TYPES
, ~0);

647 
NV_DEFINE_REG_ENTRY
(
__NV_INITIALIZE_SYSTEM_MEMORY_ALLOCATIONS
, 1);

648 
NV_DEFINE_REG_ENTRY
(
__NV_USE_PAGE_ATTRIBUTE_TABLE
, ~0);

649 
NV_DEFINE_REG_ENTRY
(
__NV_MAP_REGISTERS_EARLY
, 0);

650 
NV_DEFINE_REG_ENTRY
(
__NV_REGISTER_FOR_ACPI_EVENTS
, 1);

651 
NV_DEFINE_REG_ENTRY
(
__NV_CHECK_PCI_CONFIG_SPACE
, 
NV_CHECK_PCI_CONFIG_SPACE_INIT
);

652 
NV_DEFINE_REG_ENTRY
(
__NV_ENABLE_PCIE_GEN3
, 0);

653 
NV_DEFINE_REG_ENTRY
(
__NV_ENABLE_MSI
, 1);

654 
NV_DEFINE_REG_ENTRY
(
__NV_TCE_BYPASS_MODE
, 
NV_TCE_BYPASS_MODE_DEFAULT
);

655 
NV_DEFINE_REG_ENTRY
(
__NV_USE_THREADED_INTERRUPTS
, 1);

656 
NV_DEFINE_REG_ENTRY
(
__NV_ENABLE_STREAM_MEMOPS
, 0);

657 
NV_DEFINE_REG_ENTRY
(
__NV_ENABLE_BACKLIGHT_HANDLER
, 1);

658 
NV_DEFINE_REG_ENTRY_GLOBAL
(
__NV_ENABLE_USER_NUMA_MANAGEMENT
, 1);

659 
NV_DEFINE_REG_ENTRY_GLOBAL
(
__NV_MEMORY_POOL_SIZE
, 0);

660 
NV_DEFINE_REG_ENTRY_GLOBAL
(
__NV_KMALLOC_HEAP_MAX_SIZE
, 0);

661 
NV_DEFINE_REG_ENTRY_GLOBAL
(
__NV_VMALLOC_HEAP_MAX_SIZE
, 0);

662 
NV_DEFINE_REG_ENTRY_GLOBAL
(
__NV_IGNORE_MMIO_CHECK
, 0);

664 
NV_DEFINE_REG_STRING_ENTRY
(
__NV_REGISTRY_DWORDS
, 
NULL
);

665 
NV_DEFINE_REG_STRING_ENTRY
(
__NV_REGISTRY_DWORDS_PER_DEVICE
, 
NULL
);

666 
NV_DEFINE_REG_STRING_ENTRY
(
__NV_RM_MSG
, 
NULL
);

667 
NV_DEFINE_REG_STRING_ENTRY
(
__NV_GPU_BLACKLIST
, 
NULL
);

669 #i‡!
deföed
(
NV_VMWARE
)

670 
NV_DEFINE_REG_STRING_ENTRY
(
__NV_ASSIGN_GPUS
, 
NULL
);

684 
nv_∑rm_t
 
	gnv_∑rms
[] = {

685 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_MOBILE
),

686 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_RESMAN_DEBUG_LEVEL
),

687 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_RM_LOGON_RC
),

688 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_MODIFY_DEVICE_FILES
),

689 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_DEVICE_FILE_UID
),

690 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_DEVICE_FILE_GID
),

691 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_DEVICE_FILE_MODE
),

692 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_UPDATE_MEMORY_TYPES
),

693 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_INITIALIZE_SYSTEM_MEMORY_ALLOCATIONS
),

694 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_USE_PAGE_ATTRIBUTE_TABLE
),

695 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_ENABLE_MSI
),

696 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_MAP_REGISTERS_EARLY
),

697 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_REGISTER_FOR_ACPI_EVENTS
),

698 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_CHECK_PCI_CONFIG_SPACE
),

699 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_ENABLE_PCIE_GEN3
),

700 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_MEMORY_POOL_SIZE
),

701 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_KMALLOC_HEAP_MAX_SIZE
),

702 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_VMALLOC_HEAP_MAX_SIZE
),

703 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_IGNORE_MMIO_CHECK
),

704 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_TCE_BYPASS_MODE
),

705 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_USE_THREADED_INTERRUPTS
),

706 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_ENABLE_STREAM_MEMOPS
),

707 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_ENABLE_BACKLIGHT_HANDLER
),

708 
NV_DEFINE_PARAMS_TABLE_ENTRY
(
__NV_ENABLE_USER_NUMA_MANAGEMENT
),

709 {
NULL
, NULL, NULL}

712 #ñi‡
deföed
(
NVRM
)

714 
nv_∑rm_t
 
nv_∑rms
[];

	@src/nvidia/nv.h

12 #i‚de‡
_NV_H_


13 
	#_NV_H_


	)

15 
	~<nvlimôs.h
>

16 
	~<nvty≥s.h
>

17 
	~<nvCpuUuid.h
>

18 
	~<°d¨g.h
>

19 
	~<nv-kî√l-öãrÁ˚-≠i.h
>

21 #i‡!
deföed
(
NV_MIN
)

22 
	#NV_MIN
(
_a
,
_b
Ë((_aË< (_bË? (_aË: (_b))

	)

24 #i‡!
deföed
(
NV_MAX
)

25 
	#NV_MAX
(
_a
,
_b
Ë((_aË> (_bË? (_aË: (_b))

	)

29 
	#NV_MAJOR_DEVICE_NUMBER
 195

	)

31 
	#GPU_UUID_LEN
 (16)

	)

37 
	#GPU_UUID_ASCII_LEN
 (
GPU_UUID_LEN
 * 2 + 9)

	)

40 
NvU32
 
	mdomaö
;

41 
NvU8
 
	mbus
;

42 
NvU8
 
	m¶Ÿ
;

43 
NvU8
 
	mfun˘i⁄
;

44 
NvU16
 
	mvíd‹_id
;

45 
NvU16
 
	mdevi˚_id
;

46 
NvBoﬁ
 
	mvÆid
;

47 } 
	tnv_pci_öfo_t
;

50 
	#NV_IOCTL_MAGIC
 'F'

	)

51 
	#NV_IOCTL_BASE
 200

	)

52 
	#NV_ESC_CARD_INFO
 (
NV_IOCTL_BASE
 + 0)

	)

53 
	#NV_ESC_ENV_INFO
 (
NV_IOCTL_BASE
 + 2)

	)

54 
	#NV_ESC_ALLOC_OS_EVENT
 (
NV_IOCTL_BASE
 + 6)

	)

55 
	#NV_ESC_FREE_OS_EVENT
 (
NV_IOCTL_BASE
 + 7)

	)

56 
	#NV_ESC_STATUS_CODE
 (
NV_IOCTL_BASE
 + 9)

	)

57 
	#NV_ESC_CHECK_VERSION_STR
 (
NV_IOCTL_BASE
 + 10)

	)

58 
	#NV_ESC_IOCTL_XFER_CMD
 (
NV_IOCTL_BASE
 + 11)

	)

59 
	#NV_ESC_ATTACH_GPUS_TO_FD
 (
NV_IOCTL_BASE
 + 12)

	)

60 
	#NV_ESC_QUERY_DEVICE_INTR
 (
NV_IOCTL_BASE
 + 13)

	)

61 
	#NV_ESC_SYS_PARAMS
 (
NV_IOCTL_BASE
 + 14)

	)

62 
	#NV_ESC_NUMA_INFO
 (
NV_IOCTL_BASE
 + 15)

	)

63 
	#NV_ESC_SET_NUMA_STATUS
 (
NV_IOCTL_BASE
 + 16)

	)

69 
	#NV_ABSOLUTE_MAX_IOCTL_SIZE
 16384

	)

76 
	#__NV_IOWR_ASSERT
(
ty≥
Ë((—y≥Ë<
NV_PLATFORM_MAX_IOCTL_SIZE
Ë? 1 : -1)

	)

77 
	#__NV_IOWR
(
ƒ
, 
ty≥
) ({ \

78 
	t__NV_IOWR_TYPE_SIZE_ASSERT
[
	`__NV_IOWR_ASSERT
(
ty≥
)]; \

79 
	`_IOWR
(
NV_IOCTL_MAGIC
, (
ƒ
), 
ty≥
); \

80 })

	)

89 
	snv_io˘l_x„r


91 
NvU32
 
	mcmd
;

92 
NvU32
 
	msize
;

93 
NvP64
 
±r
 
NV_ALIGN_BYTES
(8);

94 } 
	tnv_io˘l_x„r_t
;

96 
	snv_io˘l_ˇrd_öfo


98 
NvU16
 
	mÊags
;

99 
nv_pci_öfo_t
 
	mpci_öfo
;

100 
NvU32
 
	mgpu_id
;

101 
NvU16
 
	möãºu±_löe
;

102 
NvU64
 
ªg_addªss
 
NV_ALIGN_BYTES
(8);

103 
NvU64
 
ªg_size
 
NV_ALIGN_BYTES
(8);

104 
NvU64
 
fb_addªss
 
NV_ALIGN_BYTES
(8);

105 
NvU64
 
fb_size
 
NV_ALIGN_BYTES
(8);

106 
NvU32
 
	mmö‹_numbî
;

107 
NvU8
 
	mdev_«me
[10];

108 } 
	tnv_io˘l_ˇrd_öfo_t
;

110 
	#NV_IOCTL_CARD_INFO_BUS_TYPE_PCI
 0x0001

	)

111 
	#NV_IOCTL_CARD_INFO_BUS_TYPE_AGP
 0x0002

	)

112 
	#NV_IOCTL_CARD_INFO_BUS_TYPE_PCI_EXPRESS
 0x0003

	)

114 
	#NV_IOCTL_CARD_INFO_FLAG_PRESENT
 0x0001

	)

116 
	#SIM_ENV_GPU
 0

	)

117 
	#SIM_ENV_IKOS
 1

	)

118 
	#SIM_ENV_CSIM
 2

	)

120 
	#NV_SLI_DISABLED
 0

	)

121 
	#NV_SLI_ENABLED
 1

	)

123 
	snv_io˘l_ív_öfo


125 
NvU32
 
	m∑t_suµ‹ãd
;

126 } 
	tnv_io˘l_ív_öfo_t
;

136 
	snv_io˘l_rm_≠i_ﬁd_vîsi⁄


138 
NvU32
 
	mmagic
;

139 
NvU32
 
	mmaj‹
;

140 
NvU32
 
	mmö‹
;

141 
NvU32
 
	m∑tch
;

142 } 
	tnv_io˘l_rm_≠i_ﬁd_vîsi⁄_t
;

144 
	#NV_RM_API_OLD_VERSION_MAGIC_REQ
 0x0197Áde

	)

145 
	#NV_RM_API_OLD_VERSION_MAGIC_REP
 0xbód2929

	)

146 
	#NV_RM_API_OLD_VERSION_MAGIC_LAX_REQ
 (
NV_RM_API_OLD_VERSION_MAGIC_REQ
 ^ '1')

	)

147 
	#NV_RM_API_OLD_VERSION_MAGIC_OVERRIDE_REQ
 (
NV_RM_API_OLD_VERSION_MAGIC_REQ
 ^ '2')

	)

148 
	#NV_RM_API_OLD_VERSION_MAGIC_IGNORE
 0xffffffff

	)

151 
	mNV_CPU_TYPE_UNKNOWN
 = 0,

152 
	mNV_CPU_TYPE_ARM_A9


153 } 
	tnv_˝u_ty≥_t
;

156 
	snv_io˘l_Æloc_os_evít


158 
NvH™dÀ
 
	mhClõ¡
;

159 
NvH™dÀ
 
	mhDevi˚
;

160 
NvH™dÀ
 
	mhOsEvít
;

161 
NvU32
 
	mfd
;

162 
NvU32
 
	mSètus
;

163 } 
	tnv_io˘l_Æloc_os_evít_t
;

166 
	snv_io˘l_‰ì_os_evít


168 
NvH™dÀ
 
	mhClõ¡
;

169 
NvH™dÀ
 
	mhDevi˚
;

170 
NvU32
 
	mfd
;

171 
NvU32
 
	mSètus
;

172 } 
	tnv_io˘l_‰ì_os_evít_t
;

174 
	#NV_PCI_DEV_FMT
 "%04x:%02x:%02x.%x"

	)

175 
	#NV_PCI_DEV_FMT_ARGS
(
nv
Ë“v)->
pci_öfo
.
domaö
, (nv)->pci_öfo.
bus
, \

176 (
nv
)->
pci_öfo
.
¶Ÿ
, (nv)->pci_öfo.
fun˘i⁄


	)

179 
	snv_io˘l_°©us_code


181 
NvU32
 
	mdomaö
;

182 
NvU8
 
	mbus
;

183 
NvU8
 
	m¶Ÿ
;

184 
NvU32
 
	m°©us
;

185 } 
	tnv_io˘l_°©us_code_t
;

188 
	#NV_RM_API_VERSION_STRING_LENGTH
 64

	)

190 
	snv_io˘l_rm_≠i_vîsi⁄


192 
NvU32
 
	mcmd
;

193 
NvU32
 
	mª∂y
;

194 
	mvîsi⁄Såög
[
NV_RM_API_VERSION_STRING_LENGTH
];

195 } 
	tnv_io˘l_rm_≠i_vîsi⁄_t
;

197 
	#NV_RM_API_VERSION_CMD_STRICT
 0

	)

198 
	#NV_RM_API_VERSION_CMD_RELAXED
 '1'

	)

199 
	#NV_RM_API_VERSION_CMD_OVERRIDE
 '2'

	)

201 
	#NV_RM_API_VERSION_REPLY_UNRECOGNIZED
 0

	)

202 
	#NV_RM_API_VERSION_REPLY_RECOGNIZED
 1

	)

204 
	snv_io˘l_quîy_devi˚_öå


206 
NvU32
 
öåSètus
 
NV_ALIGN_BYTES
(4);

207 
NvU32
 
	m°©us
;

208 } 
	tnv_io˘l_quîy_devi˚_öå
;

210 
	#NV_RM_DEVICE_INTR_ADDRESS
 0x100

	)

214 
	snv_io˘l_sys_∑øms


216 
NvU64
 
memblock_size
 
NV_ALIGN_BYTES
(8);

217 } 
	tnv_io˘l_sys_∑øms_t
;

219 
	#NV_IOCTL_NUMA_INFO_MAX_BLACKLIST_ADDRESSES
 64

	)

220 
	sbœckli°_addªs£s


222 
NvU64
 
	maddªs£s
[
NV_IOCTL_NUMA_INFO_MAX_BLACKLIST_ADDRESSES
] 
NV_ALIGN_BYTES
(8);

223 
NvU32
 
	mnumE¡rõs
;

224 } 
	tnv_bœckli°_addªs£s_t
;

228 
	snv_io˘l_numa_öfo


230 
NvS32
 
	mnid
;

231 
NvS32
 
	m°©us
;

232 
NvU64
 
memblock_size
 
NV_ALIGN_BYTES
(8);

233 
NvU64
 
numa_mem_addr
 
NV_ALIGN_BYTES
(8);

234 
NvU64
 
numa_mem_size
 
NV_ALIGN_BYTES
(8);

235 
nv_bœckli°_addªs£s_t
 
bœckli°_addªs£s
 
NV_ALIGN_BYTES
(8);

236 } 
	tnv_io˘l_numa_öfo_t
;

239 
	snv_io˘l_£t_numa_°©us


241 
NvS32
 
	m°©us
;

242 } 
	tnv_io˘l_£t_numa_°©us_t
;

244 
	#NV_IOCTL_NUMA_STATUS_DISABLED
 0

	)

245 
	#NV_IOCTL_NUMA_STATUS_OFFLINE
 1

	)

246 
	#NV_IOCTL_NUMA_STATUS_ONLINE_IN_PROGRESS
 2

	)

247 
	#NV_IOCTL_NUMA_STATUS_ONLINE
 3

	)

248 
	#NV_IOCTL_NUMA_STATUS_ONLINE_FAILED
 4

	)

249 
	#NV_IOCTL_NUMA_STATUS_OFFLINE_IN_PROGRESS
 5

	)

250 
	#NV_IOCTL_NUMA_STATUS_OFFLINE_FAILED
 6

	)

252 #ifde‡
NVRM


254 c⁄° *
pNVRM_ID
;

262 vﬁ©ûê
NvV8
 
	mReg008
[1];

263 vﬁ©ûê
NvV16
 
	mReg016
[1];

264 vﬁ©ûê
NvV32
 
	mReg032
[1];

265 } 
	tnv_hwªg_t
, * 
	tnv_phwªg_t
;

268 
	#NVRM_PCICFG_NUM_BARS
 6

	)

269 
	#NVRM_PCICFG_BAR_OFFSET
(
i
Ë(0x10 + (iË* 4)

	)

270 
	#NVRM_PCICFG_BAR_REQTYPE_MASK
 0x00000001

	)

271 
	#NVRM_PCICFG_BAR_REQTYPE_MEMORY
 0x00000000

	)

272 
	#NVRM_PCICFG_BAR_MEMTYPE_MASK
 0x00000006

	)

273 
	#NVRM_PCICFG_BAR_MEMTYPE_64BIT
 0x00000004

	)

274 
	#NVRM_PCICFG_BAR_ADDR_MASK
 0xfffffff0

	)

276 
	#NVRM_PCICFG_NUM_DWORDS
 16

	)

278 
	#NV_GPU_NUM_BARS
 3

	)

279 
	#NV_GPU_BAR_INDEX_REGS
 0

	)

280 
	#NV_GPU_BAR_INDEX_FB
 1

	)

281 
	#NV_GPU_BAR_INDEX_IMEM
 2

	)

285 
NvU64
 
	m˝u_addªss
;

286 
NvU64
 
	mbus_addªss
;

287 
NvU64
 
	m°øµed_size
;

288 
NvU64
 
	msize
;

289 
NvU32
 
	moff£t
;

290 
NvU32
 *
	mm≠
;

291 
nv_phwªg_t
 
	mm≠_u
;

292 } 
	tnv_≠îtuª_t
;

296 *
	mnode
;

297 *
	m«me
;

298 
NvU32
 *
	md©a
;

299 } 
	tnv_∑rm_t
;

301 
	#NV_RM_PAGE_SHIFT
 12

	)

302 
	#NV_RM_PAGE_SIZE
 (1 << 
NV_RM_PAGE_SHIFT
)

	)

303 
	#NV_RM_PAGE_MASK
 (
NV_RM_PAGE_SIZE
 - 1)

	)

305 
	#NV_RM_TO_OS_PAGE_SHIFT
 (
OS_PAGE_SHIFT
 - 
NV_RM_PAGE_SHIFT
)

	)

306 
	#NV_RM_PAGES_PER_OS_PAGE
 (1U << 
NV_RM_TO_OS_PAGE_SHIFT
)

	)

307 
	#NV_RM_PAGES_TO_OS_PAGES
(
cou¡
) \

308 ((((
NvUPå
)(
cou¡
)Ë>> 
NV_RM_TO_OS_PAGE_SHIFT
) + \

309 ((((
cou¡
Ë& ((1 << 
NV_RM_TO_OS_PAGE_SHIFT
Ë- 1)Ë!0Ë? 1 : 0))

	)

311 #i‡
deföed
(
NVCPU_X86_64
)

312 
	#NV_STACK_SIZE
 (
NV_RM_PAGE_SIZE
 * 3)

	)

314 
	#NV_STACK_SIZE
 (
NV_RM_PAGE_SIZE
 * 2)

	)

317 
	snvidü_°ack_s


319 
NvU32
 
	msize
;

320 *
	mt›
;

321 
NvU8
 
	m°ack
[
NV_STACK_SIZE
-16] 
__©åibuã__
 ((
Æig√d
(16)));

322 } 
	tnvidü_°ack_t
;

327 
nvidü_°ack_t
 
	tnv_°ack_t
;

334 
	snv_evít_s


336 
NvH™dÀ
 
	mhP¨ít
;

337 
NvH™dÀ
 
	mhObje˘
;

338 
NvU32
 
	mödex
;

339 *
	mfûe
;

340 
NvH™dÀ
 
	mh™dÀ
;

341 
NvU32
 
	mfd
;

342 
nv_evít_s
 *
	m√xt
;

343 } 
	tnv_evít_t
;

345 
	snv_kîn_m≠pög_s


347 *
	maddr
;

348 
NvU64
 
	msize
;

349 
NvU32
 
	mmodeFœg
;

350 
nv_kîn_m≠pög_s
 *
	m√xt
;

351 } 
	tnv_kîn_m≠pög_t
;

353 
	snv_u£rm≠_ac˚ss_∑øms_s


355 
NvU64
 
	maddr
;

356 
NvU64
 
	msize
;

357 
NvU64
 
	moff£t
;

358 
NvU64
 *
	m∑ge_¨øy
;

359 
NvU64
 
	mnum_∑ges
;

360 
NvU64
 
	mmm≠_°¨t
;

361 
NvU64
 
	mmm≠_size
;

362 
NvU64
 
	mac˚ss_°¨t
;

363 
NvU64
 
	mac˚ss_size
;

364 
NvU64
 
	mªm≠_¥Ÿ_exåa
;

365 
NvBoﬁ
 
	mc⁄tig
;

366 } 
	tnv_u£rm≠_ac˚ss_∑øms_t
;

371 
	snv_Æloc_m≠pög_c⁄ãxt_s
 {

372 *
	mÆloc
;

373 
NvU64
 
	m∑ge_ödex
;

374 
NvU64
 *
	m∑ge_¨øy
;

375 
NvU64
 
	mnum_∑ges
;

376 
NvU64
 
	mmm≠_°¨t
;

377 
NvU64
 
	mmm≠_size
;

378 
NvU64
 
	mac˚ss_°¨t
;

379 
NvU64
 
	mac˚ss_size
;

380 
NvU64
 
	mªm≠_¥Ÿ_exåa
;

381 
NvU32
 
	m¥Ÿ
;

382 
NvBoﬁ
 
	mvÆid
;

383 } 
	tnv_Æloc_m≠pög_c⁄ãxt_t
;

391 *
	m¥iv
;

392 *
	mos_°©e
;

394 
	mÊags
;

397 
nv_pci_öfo_t
 
	mpci_öfo
;

398 
NvU16
 
	msubsy°em_id
;

399 
NvU16
 
	msubsy°em_víd‹
;

400 
NvU32
 
	mgpu_id
;

401 
NvU32
 
	miova•a˚_id
;

404 
NvBoﬁ
 
	mvÆid
;

405 
NvU8
 
	muuid
[
GPU_UUID_LEN
];

406 } 
	mnv_uuid_ˇche
;

407 *
	mh™dÀ
;

409 
NvU32
 
	mpci_cfg_•a˚
[
NVRM_PCICFG_NUM_DWORDS
];

412 
nv_≠îtuª_t
 
	mb¨s
[
NV_GPU_NUM_BARS
];

413 
nv_≠îtuª_t
 *
	mªgs
;

414 
nv_≠îtuª_t
 *
	mfb
, 
	mud
;

416 
NvU32
 
	möãºu±_löe
;

418 
NvBoﬁ
 
	m¥im¨y_vga
;

420 
NvU32
 
	msim_ív
;

422 
NvU32
 
	mrc_timî_íabÀd
;

425 
nv_evít_t
 *
	mevít_li°
;

428 *
	mevít_•ölock
;

430 
nv_kîn_m≠pög_t
 *
	mkîn_m≠pögs
;

433 
NvU64
 
	mdma_addªsßbÀ_°¨t
;

434 
NvU64
 
	mdma_addªsßbÀ_limô
;

436 
NvBoﬁ
 
	mnvlök_sysmem_löks_íabÀd
;

437 } 
	tnv_°©e_t
;

440 
gpuSessi⁄
 *
	tnvgpuSessi⁄H™dÀ_t
;

441 
gpuAddªssS∑˚
 *
	tnvgpuAddªssS∑˚H™dÀ_t
;

442 
gpuCh™√l
 *
	tnvgpuCh™√lH™dÀ_t
;

443 
gpuObje˘
 *
	tnvgpuObje˘H™dÀ_t
;

444 
UvmGpuCh™√lPoöãrs_èg
 *
	tnvgpuCh™√lInfo_t
;

445 
UvmGpuCh™√lAŒocP¨ams_èg
 
	tnvgpuCh™√lAŒocP¨ams_t
;

446 
UvmGpuC≠s_èg
 *
	tnvgpuC≠s_t
;

447 
UvmGpuC›yEngöesC≠s_èg
 *
	tnvgpuCesC≠s_t
;

448 
UvmGpuAddªssS∑˚Info_èg
 *
	tnvgpuAddªssS∑˚Info_t
;

449 
UvmGpuAŒocInfo_èg
 *
	tnvgpuAŒocInfo_t
;

450 
UvmGpuP2PC≠sP¨ams_èg
 *
	tnvgpuP2PC≠sP¨ams_t
;

451 
gpuVaAŒocInfo
 *
	tnvgpuVaAŒocInfo_t
;

452 
gpuM≠Info
 *
	tnvgpuM≠Info_t
;

453 
UvmGpuFbInfo_èg
 *
	tnvgpuFbInfo_t
;

454 
UvmGpuFau…Info_èg
 *
	tnvgpuFau…Info_t
;

455 
UvmGpuAc˚ssC¡rInfo_èg
 *
	tnvgpuAc˚ssC¡rInfo_t
;

456 
UvmGpuAc˚ssC¡rC⁄fig_èg
 *
	tnvgpuAc˚ssC¡rC⁄fig_t
;

457 
UvmGpuInfo_èg
 *
	tnvgpuInfo_t
;

458 
gpuPmaAŒoˇti⁄O±i⁄s
 *
	tnvgpuPmaAŒoˇti⁄O±i⁄s_t
;

459 
UvmGpuMem‹yInfo_èg
 *
	tnvgpuMem‹yInfo_t
;

460 
UvmGpuExã∫ÆM≠pögInfo_èg
 *
	tnvgpuExã∫ÆM≠pögInfo_t
;

461 
UvmGpuCh™√lResour˚Info_èg
 *
	tnvgpuCh™√lResour˚Info_t
;

462 
UvmGpuCh™√lIn°™˚Info_èg
 *
	tnvgpuCh™√lIn°™˚Info_t
;

463 
UvmGpuCh™√lResour˚BödP¨ams_èg
 *
	tnvgpuCh™√lResour˚BödP¨ams_t
;

464 
	$NV_STATUS
 (*
	tnvPmaEvi˘PagesCÆlback
)(*, 
	tNvU32
, 
	tNvU64
 *, NvU32, NvU64, NvU64);

465 
	$NV_STATUS
 (*
	tnvPmaEvi˘R™geCÆlback
)(*, 
	tNvU64
, NvU64);

471 
	#NV_FLAG_OPEN
 0x0001

	)

472 
	#NV_FLAG_BLACKLIST
 0x0002

	)

473 
	#NV_FLAG_CONTROL
 0x0004

	)

474 
	#NV_FLAG_MAP_REGS_EARLY
 0x0008

	)

475 
	#NV_FLAG_USE_BAR0_CFG
 0x0010

	)

476 
	#NV_FLAG_USES_MSI
 0x0020

	)

477 
	#NV_FLAG_USES_MSIX
 0x0040

	)

478 
	#NV_FLAG_PASSTHRU
 0x0080

	)

479 
	#NV_FLAG_GVI_IN_SUSPEND
 0x0100

	)

480 
	#NV_FLAG_GVI
 0x0200

	)

481 
	#NV_FLAG_GVI_INTR_EN
 0x0400

	)

482 
	#NV_FLAG_PERSISTENT_SW_STATE
 0x0800

	)

483 
	#NV_FLAG_IN_RECOVERY
 0x1000

	)

484 
	#NV_FLAG_SKIP_CFG_CHECK
 0x2000

	)

485 
	#NV_FLAG_UNBIND_LOCK
 0x4000

	)

487 
	#NV_FLAG_IN_SURPRISE_REMOVAL
 0x8000

	)

489 
	#NV_PM_ACPI_HIBERNATE
 0x0001

	)

490 
	#NV_PM_ACPI_STANDBY
 0x0002

	)

491 
	#NV_PM_ACPI_RESUME
 0x0003

	)

493 
	#NV_PRIMARY_VGA
(
nv
Ë(“v)->
¥im¨y_vga
)

	)

495 
	#NV_IS_GVI_DEVICE
(
nv
Ë(“v)->
Êags
 & 
NV_FLAG_GVI
)

	)

496 
	#NV_IS_CTL_DEVICE
(
nv
Ë(“v)->
Êags
 & 
NV_FLAG_CONTROL
)

	)

498 
	#NV_IS_DEVICE_IN_SURPRISE_REMOVAL
(
nv
) \

499 (((
nv
)->
Êags
 & 
NV_FLAG_IN_SURPRISE_REMOVAL
Ë!0)

	)

509 
	#ACPI_DISPLAY_DEVICE_CHANGE_EVENT
 0x80

	)

510 
	#NVIF_NOTIFY_DISPLAY_DETECT
 0xCB

	)

511 
	#NVIF_DISPLAY_DEVICE_CHANGE_EVENT
 
NVIF_NOTIFY_DISPLAY_DETECT


	)

517 
	#NV_SYSTEM_ACPI_DISPLAY_SWITCH_EVENT
 0x8001

	)

518 
	#NV_SYSTEM_ACPI_BATTERY_POWER_EVENT
 0x8002

	)

519 
	#NV_SYSTEM_ACPI_DOCK_EVENT
 0x8003

	)

524 
	#NV_HOTKEY_STATUS_DISPLAY_ENABLE_LCD
 0x01

	)

525 
	#NV_HOTKEY_STATUS_DISPLAY_ENABLE_CRT
 0x02

	)

526 
	#NV_HOTKEY_STATUS_DISPLAY_ENABLE_TV
 0x04

	)

527 
	#NV_HOTKEY_STATUS_DISPLAY_ENABLE_DFP
 0x08

	)

533 
	#NV_SYSTEM_ACPI_EVENT_VALUE_DISPLAY_SWITCH_DEFAULT
 0

	)

534 
	#NV_SYSTEM_ACPI_EVENT_VALUE_POWER_EVENT_AC
 0

	)

535 
	#NV_SYSTEM_ACPI_EVENT_VALUE_POWER_EVENT_BATTERY
 1

	)

536 
	#NV_SYSTEM_ACPI_EVENT_VALUE_DOCK_EVENT_UNDOCKED
 0

	)

537 
	#NV_SYSTEM_ACPI_EVENT_VALUE_DOCK_EVENT_DOCKED
 1

	)

539 
	#NV_ACPI_NVIF_HANDLE_PRESENT
 0x01

	)

540 
	#NV_ACPI_DSM_HANDLE_PRESENT
 0x02

	)

541 
	#NV_ACPI_WMMX_HANDLE_PRESENT
 0x04

	)

542 
	#NV_ACPI_MXMI_HANDLE_PRESENT
 0x08

	)

543 
	#NV_ACPI_MXMS_HANDLE_PRESENT
 0x10

	)

545 
	#NV_EVAL_ACPI_METHOD_NVIF
 0x01

	)

546 
	#NV_EVAL_ACPI_METHOD_WMMX
 0x02

	)

547 
	#NV_EVAL_ACPI_METHOD_MXMI
 0x03

	)

548 
	#NV_EVAL_ACPI_METHOD_MXMS
 0x04

	)

550 
	#NV_I2C_CMD_READ
 1

	)

551 
	#NV_I2C_CMD_WRITE
 2

	)

552 
	#NV_I2C_CMD_SMBUS_READ
 3

	)

553 
	#NV_I2C_CMD_SMBUS_WRITE
 4

	)

554 
	#NV_I2C_CMD_SMBUS_QUICK_WRITE
 5

	)

555 
	#NV_I2C_CMD_SMBUS_QUICK_READ
 6

	)

556 
	#NV_I2C_CMD_SMBUS_BLOCK_READ
 7

	)

557 
	#NV_I2C_CMD_SMBUS_BLOCK_WRITE
 8

	)

560 
	#NV_ALLOC_PAGES_NODE_NONE
 0x0

	)

561 
	#NV_ALLOC_PAGES_NODE_SCRUB_ON_ALLOC
 0x1

	)

562 
	#NV_ALLOC_PAGES_NODE_FORCE_ALLOC
 0x2

	)

567 
	#NV_SET_NV_STATE
(
pgpu
,
p
Ë(’gpu)->
pOsHwInfo
 = (p))

	)

568 
	#NV_GET_NV_STATE
(
pGpu
) \

569 (
nv_°©e_t
 *)((
pGpu
Ë? (pGpu)->
pOsHwInfo
 : 
NULL
)

	)

571 
	#IS_DMA_ADDRESSABLE
(
nv
, 
off£t
) \

572 (((
off£t
Ë>(
nv
)->
dma_addªsßbÀ_°¨t
) && \

573 ((
off£t
Ë<(
nv
)->
dma_addªsßbÀ_limô
))

	)

575 
	#IS_REG_OFFSET
(
nv
, 
off£t
, 
Àngth
) \

576 (((
off£t
Ë>(
nv
)->
ªgs
->
˝u_addªss
) && \

577 (((
off£t
Ë+ ((
Àngth
)-1)) <= \

578 (
nv
)->
ªgs
->
˝u_addªss
 + (“v)->ªgs->
size
-1)))

	)

580 
	#IS_FB_OFFSET
(
nv
, 
off£t
, 
Àngth
) \

581 (((
off£t
Ë>(
nv
)->
fb
->
˝u_addªss
) && \

582 (((
off£t
Ë+ ((
Àngth
)-1)Ë<(
nv
)->
fb
->
˝u_addªss
 + (“v)->fb->
size
-1)))

	)

584 
	#IS_UD_OFFSET
(
nv
, 
off£t
, 
Àngth
) \

585 (((
nv
)->
ud
.
˝u_addªss
 !0Ë&& (“v)->ud.
size
 != 0) && \

586 ((
off£t
Ë>(
nv
)->
ud
.
˝u_addªss
) && \

587 (((
off£t
Ë+ ((
Àngth
)-1)Ë<(
nv
)->
ud
.
˝u_addªss
 + (“v)->ud.
size
-1)))

	)

589 
	#IS_IMEM_OFFSET
(
nv
, 
off£t
, 
Àngth
) \

590 (((
nv
)->
b¨s
[
NV_GPU_BAR_INDEX_IMEM
].
˝u_addªss
 != 0) && \

591 ((
nv
)->
b¨s
[
NV_GPU_BAR_INDEX_IMEM
].
size
 != 0) && \

592 ((
off£t
Ë>(
nv
)->
b¨s
[
NV_GPU_BAR_INDEX_IMEM
].
˝u_addªss
) && \

593 (((
off£t
Ë+ ((
Àngth
) - 1)) <= \

594 (
nv
)->
b¨s
[
NV_GPU_BAR_INDEX_IMEM
].
˝u_addªss
 + \

595 ((
nv
)->
b¨s
[
NV_GPU_BAR_INDEX_IMEM
].
size
 - 1)))

	)

597 
	#NV_RM_MAX_MSIX_LINES
 8

	)

601 
	#NV_DEVICE_NAME_LENGTH
 40

	)

603 
	#NV_MAX_ISR_DELAY_US
 20000

	)

604 
	#NV_MAX_ISR_DELAY_MS
 (
NV_MAX_ISR_DELAY_US
 / 1000)

	)

606 
	#NV_TIMERCMP
(
a
, 
b
, 
CMP
) \

607 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

608 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_u£cË: (◊)->
tv_£c
 CMP (b)->tv_£c))

	)

610 
	#NV_TIMERADD
(
a
, 
b
, 
ªsu…
) \

612 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

613 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

614 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

616 ++(
ªsu…
)->
tv_£c
; \

617 (
ªsu…
)->
tv_u£c
 -= 1000000; \

619 
	}

	)
}

621 
	#NV_TIMERSUB
(
a
, 
b
, 
ªsu…
) \

623 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

624 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

625 i‡((
ªsu…
)->
tv_u£c
 < 0) \

627 --(
ªsu…
)->
tv_£c
; \

628 (
ªsu…
)->
tv_u£c
 += 1000000; \

630 }

	)

632 
	#NV_TIMEVAL_TO_US
(
tv
Ë((
NvU64
)—v).
tv_£c
 * 1000000 + (tv).
tv_u£c
)

	)

634 #i‚de‡
NV_ALIGN_UP


635 
	#NV_ALIGN_UP
(
v
,
g
Ë(((vË+ ((gË- 1)Ë& ~((gË- 1))

	)

637 #i‚de‡
NV_ALIGN_DOWN


638 
	#NV_ALIGN_DOWN
(
v
,
g
Ë((vË& ~((gË- 1))

	)

645 #i‚de‡
NVWATCH


655 * 
NV_API_CALL
 
nv_Æloc_kî√l_m≠pög
 (
nv_°©e_t
 *, *, 
NvU64
, 
NvU32
, NvU64, **);

656 
NV_STATUS
 
NV_API_CALL
 
nv_‰ì_kî√l_m≠pög
 (
nv_°©e_t
 *, *, *, *);

657 
NV_STATUS
 
NV_API_CALL
 
nv_Æloc_u£r_m≠pög
 (
nv_°©e_t
 *, *, 
NvU64
, 
NvU32
, NvU64, NvU32, NvU64 *, **);

658 
NV_STATUS
 
NV_API_CALL
 
nv_‰ì_u£r_m≠pög
 (
nv_°©e_t
 *, *, 
NvU64
, *);

659 
NV_STATUS
 
NV_API_CALL
 
nv_add_m≠pög_c⁄ãxt_to_fûe
 (
nv_°©e_t
 *, 
nv_u£rm≠_ac˚ss_∑øms_t
*, 
NvU32
, *, 
NvU64
, NvU32);

661 
NvU64
 
NV_API_CALL
 
nv_gë_kîn_phys_addªss
 (NvU64);

662 
NvU64
 
NV_API_CALL
 
nv_gë_u£r_phys_addªss
 (NvU64);

663 
nv_°©e_t
* 
NV_API_CALL
 
nv_gë_ad≠ãr_°©e
 (
NvU32
, 
NvU8
, NvU8);

664 
nv_°©e_t
* 
NV_API_CALL
 
nv_gë_˘l_°©e
 ();

666 
NV_API_CALL
 
nv_£t_dma_addªss_size
 (
nv_°©e_t
 *, 
NvU32
 );

668 
NV_STATUS
 
NV_API_CALL
 
nv_Æüs_∑ges
 (
nv_°©e_t
 *, 
NvU32
, NvU32, NvU32, 
NvU64
, NvU64 *, **);

669 
NV_STATUS
 
NV_API_CALL
 
nv_Æloc_∑ges
 (
nv_°©e_t
 *, 
NvU32
, 
NvBoﬁ
, NvU32, NvBoﬁ, 
NvU64
 *, **);

670 
NV_STATUS
 
NV_API_CALL
 
nv_‰ì_∑ges
 (
nv_°©e_t
 *, 
NvU32
, 
NvBoﬁ
, NvU32, *);

672 
NV_STATUS
 
NV_API_CALL
 
nv_ªgi°î_u£r_∑ges
 (
nv_°©e_t
 *, 
NvU64
, NvU64 *, **);

673 
NV_STATUS
 
NV_API_CALL
 
nv_uƒegi°î_u£r_∑ges
 (
nv_°©e_t
 *, 
NvU64
, **);

675 
NV_STATUS
 
NV_API_CALL
 
nv_ªgi°î_≥î_io_mem
 (
nv_°©e_t
 *, 
NvU64
 *, NvU64, **);

676 
NV_API_CALL
 
nv_uƒegi°î_≥î_io_mem
(
nv_°©e_t
 *, *);

678 
NV_STATUS
 
NV_API_CALL
 
nv_ªgi°î_phys_∑ges
 (
nv_°©e_t
 *, 
NvU64
 *, NvU64, **);

679 
NV_API_CALL
 
nv_uƒegi°î_phys_∑ges
 (
nv_°©e_t
 *, *);

681 
NV_STATUS
 
NV_API_CALL
 
nv_dma_m≠_∑ges
 (
nv_°©e_t
 *, 
NvU64
, NvU64 *, 
NvBoﬁ
, **);

682 
NV_STATUS
 
NV_API_CALL
 
nv_dma_unm≠_∑ges
 (
nv_°©e_t
 *, 
NvU64
, NvU64 *, **);

684 
NV_STATUS
 
NV_API_CALL
 
nv_dma_m≠_Æloc
 (
nv_°©e_t
 *, 
NvU64
, NvU64 *, 
NvBoﬁ
, **);

685 
NV_STATUS
 
NV_API_CALL
 
nv_dma_unm≠_Æloc
 (
nv_°©e_t
 *, 
NvU64
, NvU64 *, **);

687 
NV_STATUS
 
NV_API_CALL
 
nv_dma_m≠_≥î
 (
nv_°©e_t
 *,Çv_°©e_à*, 
NvU8
, 
NvU64
, NvU64 *);

688 
NV_API_CALL
 
nv_dma_unm≠_≥î
 (
nv_°©e_t
 *, 
NvU64
, NvU64);

690 
NV_STATUS
 
NV_API_CALL
 
nv_dma_m≠_mmio
 (
nv_°©e_t
 *, 
NvU64
, NvU64 *);

691 
NV_API_CALL
 
nv_dma_unm≠_mmio
 (
nv_°©e_t
 *, 
NvU64
, NvU64);

693 
NvS32
 
NV_API_CALL
 
nv_°¨t_rc_timî
 (
nv_°©e_t
 *);

694 
NvS32
 
NV_API_CALL
 
nv_°›_rc_timî
 (
nv_°©e_t
 *);

696 
NV_API_CALL
 
nv_po°_evít
 (
nv_°©e_t
 *, 
nv_evít_t
 *, 
NvH™dÀ
, 
NvU32
, 
NvBoﬁ
);

697 
NvS32
 
NV_API_CALL
 
nv_gë_evít
 (
nv_°©e_t
 *, *, 
nv_evít_t
 *, 
NvU32
 *);

699 
NV_API_CALL
 
nv_vîify_pci_c⁄fig
 (
nv_°©e_t
 *, 
BOOL
);

701 * 
NV_API_CALL
 
nv_i2c_add_ad≠ãr
 (
nv_°©e_t
 *, 
NvU32
);

702 
BOOL
 
NV_API_CALL
 
nv_i2c_dñ_ad≠ãr
 (
nv_°©e_t
 *, *);

704 
NV_API_CALL
 
nv_a˝i_mëhods_öô
 (
NvU32
 *);

705 
NV_API_CALL
 
nv_a˝i_mëhods_unöô
 ();

707 
NV_STATUS
 
NV_API_CALL
 
nv_a˝i_mëhod
 (
NvU32
, NvU32, NvU32, *, 
NvU16
, NvU32 *, *, NvU16 *);

708 
NV_STATUS
 
NV_API_CALL
 
nv_a˝i_dsm_mëhod
 (
nv_°©e_t
 *, 
NvU8
 *, 
NvU32
, NvU32, *, 
NvU16
, NvU32 *, *, NvU16 *);

709 
NV_STATUS
 
NV_API_CALL
 
nv_a˝i_ddc_mëhod
 (
nv_°©e_t
 *, *, 
NvU32
 *);

710 
NV_STATUS
 
NV_API_CALL
 
nv_a˝i_dod_mëhod
 (
nv_°©e_t
 *, 
NvU32
 *, NvU32 *);

711 
NV_STATUS
 
NV_API_CALL
 
nv_a˝i_rom_mëhod
 (
nv_°©e_t
 *, 
NvU32
 *, NvU32 *);

712 
NV_STATUS
 
NV_API_CALL
 
nv_log_îr‹
 (
nv_°©e_t
 *, 
NvU32
, c⁄° *, 
va_li°
);

714 
NvU64
 
NV_API_CALL
 
nv_gë_dma_°¨t_addªss
 (
nv_°©e_t
 *);

715 
NV_STATUS
 
NV_API_CALL
 
nv_£t_¥im¨y_vga_°©us
(
nv_°©e_t
 *);

716 
NV_STATUS
 
NV_API_CALL
 
nv_pci_åiggî_ªcovîy
 (
nv_°©e_t
 *);

717 
NvBoﬁ
 
NV_API_CALL
 
nv_ªquúes_dma_ªm≠
 (
nv_°©e_t
 *);

719 #i‡
deföed
(
NVCPU_X86
Ë|| deföed(
NVCPU_X86_64
)

720 
NvBoﬁ
 
NV_API_CALL
 
nv_is_vútuÆized_sy°em
 (
nv_°ack_t
 *);

723 
NV_STATUS
 
NV_API_CALL
 
nv_exp‹t_rm_obje˘_to_fd
 (
NvH™dÀ
, 
NvS32
);

724 
NV_STATUS
 
NV_API_CALL
 
nv_imp‹t_rm_obje˘_‰om_fd
 (
NvS32
, 
NvH™dÀ
 *);

726 
NV_STATUS
 
NV_API_CALL
 
nv_gë_devi˚_mem‹y_c⁄fig
(
nv_°©e_t
 *, 
NvU32
 *, NvU32 *, NvU32 *, NvU32 *, 
NvS32
 *);

728 
NV_STATUS
 
NV_API_CALL
 
nv_gë_ibm≈u_gíªg_öfo
(
nv_°©e_t
 *, 
NvU64
 *, NvU64 *, **);

729 
NV_STATUS
 
NV_API_CALL
 
nv_gë_ibm≈u_ªœxed_‹dîög_mode
(
nv_°©e_t
 *
nv
, 
NvBoﬁ
 *
mode
);

731 
NV_API_CALL
 
nv_waô_f‹_ibm≈u_rsync
(
nv_°©e_t
 *
nv
);

733 #i‡
deföed
(
NVCPU_PPC64LE
)

734 
NV_STATUS
 
NV_API_CALL
 
nv_gë_nvlök_löe_øã
 (
nv_°©e_t
 *, 
NvU32
 *);

737 
NV_API_CALL
 
nv_ªgi°î_backlight
 (
nv_°©e_t
 *, 
NvU32
, NvU32);

738 
NV_API_CALL
 
nv_uƒegi°î_backlight
 (
nv_°©e_t
 *);

747 
BOOL
 
NV_API_CALL
 
rm_öô_rm
 (
nvidü_°ack_t
 *);

748 
BOOL
 
NV_API_CALL
 
rm_shutdown_rm
 (
nvidü_°ack_t
 *);

749 
BOOL
 
NV_API_CALL
 
rm_öô_¥iv©e_°©e
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

750 
BOOL
 
NV_API_CALL
 
rm_‰ì_¥iv©e_°©e
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

751 
BOOL
 
NV_API_CALL
 
rm_öô_ad≠ãr
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

752 
BOOL
 
NV_API_CALL
 
rm_dißbÀ_ad≠ãr
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

753 
BOOL
 
NV_API_CALL
 
rm_shutdown_ad≠ãr
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

754 
NV_STATUS
 
NV_API_CALL
 
rm_bœckli°_ad≠ãr
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

755 
NV_STATUS
 
NV_API_CALL
 
rm_vÆid©e_mm≠_ªque°
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, *, 
NvU64
, NvU64, 
NvU32
 *, **, NvU64 *);

756 
NV_STATUS
 
NV_API_CALL
 
rm_acquúe_≠i_lock
 (
nvidü_°ack_t
 *);

757 
NV_STATUS
 
NV_API_CALL
 
rm_ªÀa£_≠i_lock
 (
nvidü_°ack_t
 *);

758 
NV_STATUS
 
NV_API_CALL
 
rm_io˘l
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, *, 
NvU32
, *, NvU32);

759 
BOOL
 
NV_API_CALL
 
rm_i§
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
 *);

760 
NV_API_CALL
 
rm_i§_bh
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

761 
NV_API_CALL
 
rm_i§_bh_u∆ocked
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

762 
NV_STATUS
 
NV_API_CALL
 
rm_powî_m™agemít
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
, NvU32);

763 
NV_STATUS
 
NV_API_CALL
 
rm_ßve_low_ªs_mode
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

764 
NV_STATUS
 
NV_API_CALL
 
rm_gë_vbios_vîsi⁄
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
 *, NvU32 *, NvU32 *, NvU32 *, NvU32 *);

765 
NV_STATUS
 
NV_API_CALL
 
rm_gë_gpu_uuid
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 **, 
NvU32
 *);

766 
NV_STATUS
 
NV_API_CALL
 
rm_gë_gpu_uuid_øw
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 **, 
NvU32
 *);

767 
NV_API_CALL
 
rm_‰ì_unu£d_˛õ¡s
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, *);

768 
NV_API_CALL
 
rm_unböd_lock
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

769 
NV_API_CALL
 
rm_‰ì_exp‹ãd_obje˘
 (
nvidü_°ack_t
 *, 
NvH™dÀ
);

770 
NV_STATUS
 
NV_API_CALL
 
rm_ªad_ªgi°ry_dw‹d
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, NvU8 *, 
NvU32
 *);

771 
NV_STATUS
 
NV_API_CALL
 
rm_wrôe_ªgi°ry_dw‹d
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, NvU8 *, 
NvU32
);

772 
NV_STATUS
 
NV_API_CALL
 
rm_ªad_ªgi°ry_bö¨y
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, NvU8 *, NvU8 *, 
NvU32
 *);

773 
NV_STATUS
 
NV_API_CALL
 
rm_wrôe_ªgi°ry_bö¨y
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, NvU8 *, NvU8 *, 
NvU32
);

774 
NV_STATUS
 
NV_API_CALL
 
rm_wrôe_ªgi°ry_°rög
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, NvU8 *, c⁄° *, 
NvU32
);

775 
NV_API_CALL
 
rm_∑r£_›ti⁄_°rög
 (
nvidü_°ack_t
 *, const *);

776 * 
NV_API_CALL
 
rm_ªmove_•a˚s
 (const *);

777 * 
NV_API_CALL
 
rm_°rög_tokí
 (**, const );

779 
NV_STATUS
 
NV_API_CALL
 
rm_run_rc_ˇŒback
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

780 
NV_API_CALL
 
rm_execuã_w‹k_ôem
 (
nvidü_°ack_t
 *, *);

781 
NV_STATUS
 
NV_API_CALL
 
rm_gë_devi˚_«me
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU16
, NvU16, NvU16, 
NvU32
, 
NvU8
 *);

783 
NvU64
 
NV_API_CALL
 
nv_rdtsc
 ();

785 
NV_API_CALL
 
rm_ªgi°î_com∑tibÀ_io˘ls
 (
nvidü_°ack_t
 *);

786 
NV_API_CALL
 
rm_uƒegi°î_com∑tibÀ_io˘ls
 (
nvidü_°ack_t
 *);

788 
BOOL
 
NV_API_CALL
 
rm_is_Àgacy_devi˚
 (
nvidü_°ack_t
 *, 
NvU16
, NvU16, NvU16, BOOL);

789 
NV_STATUS
 
NV_API_CALL
 
rm_is_suµ‹ãd_devi˚
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

791 
NV_API_CALL
 
rm_check_pci_c⁄fig_•a˚
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *
nv
, 
BOOL
, BOOL, BOOL);

793 
NV_STATUS
 
NV_API_CALL
 
rm_i2c_ªmove_ad≠ãrs
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

794 
NvBoﬁ
 
NV_API_CALL
 
rm_i2c_is_smbus_ˇ∑bÀ
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, *);

795 
NV_STATUS
 
NV_API_CALL
 
rm_i2c_å™s„r
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, *, 
NvU8
, NvU8, NvU8, 
NvU32
, NvU8 *);

797 
NV_STATUS
 
NV_API_CALL
 
rm_≥rf‹m_vîsi⁄_check
 (
nvidü_°ack_t
 *, *, 
NvU32
);

799 
NV_STATUS
 
NV_API_CALL
 
rm_sy°em_evít
 (
nvidü_°ack_t
 *, 
NvU32
, NvU32);

801 
NV_API_CALL
 
rm_dißbÀ_gpu_°©e_≥rsi°í˚
 (
nvidü_°ack_t
 *
•
, 
nv_°©e_t
 *);

802 
NV_STATUS
 
NV_API_CALL
 
rm_p2p_öô_m≠pög
 (
nvidü_°ack_t
 *, 
NvU64
, NvU64 *, NvU64 *, NvU64 *, NvU64 *, NvU64, NvU64, NvU64, NvU64, (*)(*), *);

803 
NV_STATUS
 
NV_API_CALL
 
	`rm_p2p_de°roy_m≠pög
 (
nvidü_°ack_t
 *, 
NvU64
);

804 
NV_STATUS
 
NV_API_CALL
 
	`rm_p2p_gë_∑ges
 (
nvidü_°ack_t
 *, 
NvU64
, 
NvU32
, NvU64, NvU64, NvU64 *, NvU32 *, NvU32 *, NvU32 *, 
NvU8
 **, *, (*)(*), *);

805 
NV_STATUS
 
NV_API_CALL
 
	`rm_p2p_put_∑ges
 (
nvidü_°ack_t
 *, 
NvU64
, 
NvU32
, NvU64, *);

806 
NV_STATUS
 
NV_API_CALL
 
	`rm_p2p_dma_m≠_∑ges
 (
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, 
NvU32
, NvU32, 
NvU64
 *, **);

807 
NV_STATUS
 
NV_API_CALL
 
	`rm_gë_˝u_ty≥
 (
nvidü_°ack_t
 *, 
nv_˝u_ty≥_t
 *);

808 
NV_STATUS
 
NV_API_CALL
 
	`rm_log_gpu_¸ash
 (
nv_°ack_t
 *, 
nv_°©e_t
 *);

810 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_¸óã_£ssi⁄
 (
nvidü_°ack_t
 *, 
nvgpuSessi⁄H™dÀ_t
 *);

811 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_de°roy_£ssi⁄
 (
nvidü_°ack_t
 *, 
nvgpuSessi⁄H™dÀ_t
);

812 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_addªss_•a˚_¸óã
(
nvidü_°ack_t
 *, 
nvgpuSessi⁄H™dÀ_t
, c⁄° 
NvPro˚ss‹Uuid
 *, , , 
nvgpuAddªssS∑˚H™dÀ_t
 *, 
nvgpuAddªssS∑˚Info_t
);

813 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_dup_addªss_•a˚
(
nvidü_°ack_t
 *, 
nvgpuSessi⁄H™dÀ_t
, c⁄° 
NvPro˚ss‹Uuid
 *, 
NvH™dÀ
, NvH™dÀ, 
nvgpuAddªssS∑˚H™dÀ_t
 *, 
nvgpuAddªssS∑˚Info_t
);

814 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_addªss_•a˚_de°roy
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
);

815 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_mem‹y_Æloc_fb
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvLígth
, 
NvU64
 *, 
nvgpuAŒocInfo_t
);

817 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_pma_Æloc_∑ges
(
nvidü_°ack_t
 *, *, 
NvLígth
, 
NvU32
 , 
nvgpuPmaAŒoˇti⁄O±i⁄s_t
, 
NvU64
 *);

818 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_pma_‰ì_∑ges
(
nvidü_°ack_t
 *, *, 
NvU64
 *, 
NvLígth
 , 
NvU32
, NvU32);

819 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_pma_pö_∑ges
(
nvidü_°ack_t
 *, *, 
NvU64
 *, 
NvLígth
 , 
NvU32
, NvU32);

820 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_pma_u≈ö_∑ges
(
nvidü_°ack_t
 *, *, 
NvU64
 *, 
NvLígth
 , 
NvU32
);

821 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_gë_pma_obje˘
(
nvidü_°ack_t
 *, c⁄° 
NvPro˚ss‹Uuid
 *, **);

822 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_pma_ªgi°î_ˇŒbacks
(
nvidü_°ack_t
 *
•
, *, 
nvPmaEvi˘PagesCÆlback
, 
nvPmaEvi˘R™geCÆlback
, *);

823 
NV_API_CALL
 
	`rm_gpu_›s_pma_uƒegi°î_ˇŒbacks
(
nvidü_°ack_t
 *
•
, *);

825 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_mem‹y_Æloc_sys
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvLígth
, 
NvU64
 *, 
nvgpuAŒocInfo_t
);

827 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_gë_p2p_ˇps
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
,ÇvgpuAddªssS∑˚H™dÀ_t, 
nvgpuP2PC≠sP¨ams_t
);

829 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_mem‹y_˝u_m≠
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvU64
, 
NvLígth
, **, 
NvU32
);

830 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_mem‹y_˝u_umm≠
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, *);

831 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_ch™√l_Æloˇã
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuCh™√lH™dÀ_t
 *, c⁄° 
nvgpuCh™√lAŒocP¨ams_t
 *, 
nvgpuCh™√lInfo_t
);

832 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_ch™√l_de°roy
(
nvidü_°ack_t
 *, 
nvgpuCh™√lH™dÀ_t
);

833 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_c›y_ígöe_Æloc
(
nvidü_°ack_t
 *, 
nvgpuCh™√lH™dÀ_t
, 
NvU32
, 
nvgpuObje˘H™dÀ_t
 *, 
nvgpuCh™√lInfo_t
);

834 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_mem‹y_‰ì
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvU64
);

835 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_quîy_ˇps
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuC≠s_t
);

836 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_quîy_˚s_ˇps
(
nvidü_°ack_t
 *
•
, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuCesC≠s_t
);

837 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_gë_gpu_öfo
(
nvidü_°ack_t
 *, c⁄° 
NvPro˚ss‹Uuid
 *
pUuid
, 
nvgpuInfo_t
);

838 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_£rvi˚_devi˚_öãºu±s_rm
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
);

839 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_dup_Æloˇti⁄
(
nvidü_°ack_t
 *, 
NvH™dÀ
, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvU64
,ÇvgpuAddªssS∑˚H™dÀ_t, NvU64*, 
NvBoﬁ
);

841 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_dup_mem‹y
 (
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvH™dÀ
, NvH™dÀ, NvH™dÀ *, 
nvgpuMem‹yInfo_t
);

843 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_‰ì_du≥d_h™dÀ
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvH™dÀ
);

844 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_gë_fb_öfo
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuFbInfo_t
);

845 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_own_∑ge_Áu…_öå
(
nvidü_°ack_t
 *, c⁄° 
NvPro˚ss‹Uuid
 *, 
NvBoﬁ
);

846 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_öô_Áu…_öfo
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuFau…Info_t
);

847 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_de°roy_Áu…_öfo
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuFau…Info_t
);

848 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_gë_n⁄_ª∂ayabÀ_Áu…s
(
nvidü_°ack_t
 *, 
nvgpuFau…Info_t
, *, 
NvU32
 *);

849 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_has_≥ndög_n⁄_ª∂ayabÀ_Áu…s
(
nvidü_°ack_t
 *, 
nvgpuFau…Info_t
, 
NvBoﬁ
 *);

850 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_öô_ac˚ss_˙å_öfo
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuAc˚ssC¡rInfo_t
);

851 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_de°roy_ac˚ss_˙å_öfo
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuAc˚ssC¡rInfo_t
);

852 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_own_ac˚ss_˙å_öå
(
nvidü_°ack_t
 *, 
nvgpuSessi⁄H™dÀ_t
, 
nvgpuAc˚ssC¡rInfo_t
, 
NvBoﬁ
);

853 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_íabÀ_ac˚ss_˙å
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuAc˚ssC¡rInfo_t
, 
nvgpuAc˚ssC¡rC⁄fig_t
);

854 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_dißbÀ_ac˚ss_˙å
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
nvgpuAc˚ssC¡rInfo_t
);

855 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_£t_∑ge_dúe˘‹y
 (
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvU64
, , 
NvBoﬁ
);

856 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_un£t_∑ge_dúe˘‹y
 (
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
);

857 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_p2p_obje˘_¸óã
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
,ÇvgpuAddªssS∑˚H™dÀ_t, 
NvH™dÀ
 *);

858 
NV_API_CALL
 
	`rm_gpu_›s_p2p_obje˘_de°roy
(
nvidü_°ack_t
 *, 
nvgpuSessi⁄H™dÀ_t
, 
NvH™dÀ
);

859 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_gë_exã∫Æ_Æloc_±es
(
nvidü_°ack_t
*, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvH™dÀ
, 
NvU64
, NvU64, 
nvgpuExã∫ÆM≠pögInfo_t
);

860 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_ªèö_ch™√l
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvH™dÀ
, NvH™dÀ, **, 
nvgpuCh™√lIn°™˚Info_t
);

861 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_ªèö_ch™√l_ªsour˚s
(
nvidü_°ack_t
 *, *, 
nvgpuCh™√lResour˚Info_t
);

862 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_böd_ch™√l_ªsour˚s
(
nvidü_°ack_t
 *, *, 
nvgpuCh™√lResour˚BödP¨ams_t
);

863 
NV_API_CALL
 
	`rm_gpu_›s_ªÀa£_ch™√l
(
nvidü_°ack_t
 *, *);

864 
NV_API_CALL
 
	`rm_gpu_›s_ªÀa£_ch™√l_ªsour˚s
(
nvidü_°ack_t
 *, 
NvP64
*, 
NvU32
);

865 
NV_API_CALL
 
	`rm_gpu_›s_°›_ch™√l
(
nvidü_°ack_t
 *, *, 
NvBoﬁ
);

866 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_gë_ch™√l_ªsour˚_±es
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, 
NvP64
, 
NvU64
, NvU64, 
nvgpuExã∫ÆM≠pögInfo_t
);

867 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_›s_ªp‹t_n⁄_ª∂ayabÀ_Áu…
(
nvidü_°ack_t
 *, 
nvgpuAddªssS∑˚H™dÀ_t
, const *);

868 
NV_API_CALL
 
	`rm_kî√l_rm≠i_›
(
nvidü_°ack_t
 *
•
, *
›s_cmd
);

869 
NvBoﬁ
 
NV_API_CALL
 
	`rm_gë_devi˚_ªmove_Êag
(
nvidü_°ack_t
 *
•
, 
NvU32
 
gpu_id
);

870 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_c›y_mmu_Áu…s
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
 *);

871 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_c›y_mmu_Áu…s_u∆ocked
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
 *);

872 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_√ed_4k_∑ge_isﬁ©i⁄
(
nv_°©e_t
 *, 
NvBoﬁ
 *);

873 
NvBoﬁ
 
NV_API_CALL
 
	`rm_is_chù£t_io_cohîít
(
nv_°ack_t
 *);

874 
NvBoﬁ
 
NV_API_CALL
 
	`rm_öô_evít_locks
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

875 
NV_API_CALL
 
	`rm_de°roy_evít_locks
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

876 
NV_STATUS
 
NV_API_CALL
 
	`rm_gë_gpu_numa_öfo
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvS32
 *, 
NvU64
 *, NvU64 *, 
nv_bœckli°_addªs£s_t
 *);

877 
NV_STATUS
 
NV_API_CALL
 
	`rm_£t_backlight
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
, NvU32);

878 
NV_STATUS
 
NV_API_CALL
 
	`rm_gë_backlight
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
, NvU32 *);

879 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_numa_⁄löe
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

880 
NV_STATUS
 
NV_API_CALL
 
	`rm_gpu_numa_ofÊöe
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

881 
NV_API_CALL
 
	`rm_check_f‹_gpu_suΩri£_ªmovÆ
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *);

883 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_¸óã_ªque°
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, 
NvU32
, 
NvU16
 *, NvU32);

884 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_dñëe
(
nvidü_°ack_t
 *, 
NvU8
 *, 
NvU16
);

885 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_gë_ty≥_ids
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
 *, NvU32 **);

886 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_gë_ty≥_öfo
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU32
, 
NvU8
 *, );

887 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_gë_b¨_öfo
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, 
NvU64
 *, 
NvU32
, *, **);

888 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_°¨t
(
nvidü_°ack_t
 *, 
NvU8
 *, *, 
NvS32
 *, NvU8 *, 
NvU32
, NvU8 *);

889 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_gë_•¨£_mm≠
(
nvidü_°ack_t
 *, 
nv_°©e_t
 *, 
NvU8
 *, 
NvU64
 **, NvU64 **, 
NvU32
 *);

890 
NV_STATUS
 
NV_API_CALL
 
	`nv_vgpu_upd©e_ªque°
(
nvidü_°ack_t
 *, 
NvU8
 *, 
NvU32
);

891 
NV_STATUS
 
NV_API_CALL
 
	`nv_gpu_böd_evít
(
nvidü_°ack_t
 *);

893 
NV_STATUS
 
NV_API_CALL
 
	`nv_gë_u£rm≠_ac˚ss_∑øms
(
nv_°©e_t
*, 
nv_u£rm≠_ac˚ss_∑øms_t
*);

896 
ölöe
 c⁄° 
NvU8
 *
	$nv_gë_ˇched_uuid
(
nv_°©e_t
 *
nv
)

898  
nv
->
nv_uuid_ˇche
.
vÆid
 ?Çv->nv_uuid_ˇche.
uuid
 : 
NULL
;

899 
	}
}

903 
ölöe
 
	$nv_cou¡_bôs
(
NvU64
 
w‹d
)

905 
NvU64
 
bôs
;

907 
bôs
 = (
w‹d
 & 0x5555555555555555ULL) + ((word >> 1) & 0x5555555555555555ULL);

908 
bôs
 = (bits & 0x3333333333333333ULL) + ((bits >> 2) & 0x3333333333333333ULL);

909 
bôs
 = (bits & 0x0f0f0f0f0f0f0f0fULL) + ((bits >> 4) & 0x0f0f0f0f0f0f0f0fULL);

910 
bôs
 = (bits & 0x00ff00ff00ff00ffULL) + ((bits >> 8) & 0x00ff00ff00ff00ffULL);

911 
bôs
 = (bits & 0x0000ffff0000ffffULL) + ((bits >> 16) & 0x0000ffff0000ffffULL);

912 
bôs
 = (bits & 0x00000000ffffffffULL) + ((bits >> 32) & 0x00000000ffffffffULL);

914  ()(
bôs
);

915 
	}
}

	@src/nvidia/nvidia_acpi.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 #i‡
deföed
(
NV_SUPPORT_ACPI
)

18 
	~<c⁄åib/dev/a˝iˇ/ö˛ude/a˝i.h
>

19 
	~<c⁄åib/dev/a˝iˇ/ö˛ude/accomm⁄.h
>

20 
	~<dev/a˝iˇ/a˝iv¨.h
>

22 
	$nvidü_a˝i_lookup_bus
(
devi˚_t
 
dev
, devi˚_à*
bus
)

25 
dev
 = 
	`devi˚_gë_∑ª¡
(dev);

26 i‡(
dev
 =
NULL
)

28 } 
	`°rcmp
(
	`devi˚_gë_«me
(
dev
), "acpi") != 0);

30 *
bus
 = 
dev
;

31  ((
dev
 !
NULL
Ë? 0 : 
ENODEV
);

32 
	}
}

34 
NV_STATUS
 
	$nvidü_a˝i_exåa˘_öãgî
(

35 c⁄° 
a˝i_obje˘
 *acpi_object,

36 *
buf„r
,

37 
NvU32
 
buf„r_size
,

38 
NvU32
 *
d©a_size


41 i‡(
a˝i_obje˘
->
Ty≥
 !
ACPI_TYPE_INTEGER
)

42  
NV_ERR_INVALID_ARGUMENT
;

44 i‡(
a˝i_obje˘
->
I¡egî
.
VÆue
 & ~0xffffffffULL)

45 *
d©a_size
 = (
a˝i_obje˘
->
I¡egî
.
VÆue
);

47 *
d©a_size
 = (
NvU32
);

49 i‡((
buf„r_size
 < (
NvU32
)) ||

50 ((
buf„r_size
 < (
a˝i_obje˘
->
I¡egî
.
VÆue
)) &&

51 (
a˝i_obje˘
->
I¡egî
.
VÆue
 & ~0xffffffffULL)))

53  
NV_ERR_BUFFER_TOO_SMALL
;

56 
	`mem˝y
(
buf„r
, &
a˝i_obje˘
->
I¡egî
.
VÆue
, *
d©a_size
);

58  
NV_OK
;

59 
	}
}

61 
NV_STATUS
 
	$nvidü_a˝i_exåa˘_buf„r
(

62 c⁄° 
a˝i_obje˘
 *acpi_object,

63 *
buf„r
,

64 
NvU32
 
buf„r_size
,

65 
NvU32
 *
d©a_size


68 i‡(
a˝i_obje˘
->
Ty≥
 !
ACPI_TYPE_BUFFER
)

69  
NV_ERR_INVALID_ARGUMENT
;

71 *
d©a_size
 = 
a˝i_obje˘
->
Buf„r
.
Lígth
;

73 i‡(
buf„r_size
 < 
a˝i_obje˘
->
Buf„r
.
Lígth
)

74  
NV_ERR_BUFFER_TOO_SMALL
;

76 
	`mem˝y
(
buf„r
, 
a˝i_obje˘
->
Buf„r
.
Poöãr
, *
d©a_size
);

78  
NV_OK
;

79 
	}
}

81 
NV_STATUS


82 
nvidü_a˝i_exåa˘_obje˘
(c⁄° 
a˝i_obje˘
 *, *, 
NvU32
, NvU32 *);

84 
NV_STATUS
 
	$nvidü_a˝i_exåa˘_∑ckage
(

85 c⁄° 
a˝i_obje˘
 *acpi_object,

86 *
buf„r
,

87 
NvU32
 
buf„r_size
,

88 
NvU32
 *
d©a_size


91 
NV_STATUS
 
°©us
 = 
NV_OK
;

92 
NvU32
 
i
, 
ñemít_size
 = 0;

94 i‡(
a˝i_obje˘
->
Ty≥
 !
ACPI_TYPE_PACKAGE
)

95  
NV_ERR_INVALID_ARGUMENT
;

97 *
d©a_size
 = 0;

98 
i
 = 0; i < 
a˝i_obje˘
->
Package
.
Cou¡
; i++)

100 
buf„r
 = ((*)buf„∏+ 
ñemít_size
);

101 
buf„r_size
 -
ñemít_size
;

103 
°©us
 = 
	`nvidü_a˝i_exåa˘_obje˘
(&
a˝i_obje˘
->
Package
.
EÀmíts
[
i
],

104 
buf„r
, 
buf„r_size
, &
ñemít_size
);

105 i‡(
°©us
 !
NV_OK
)

108 *
d©a_size
 +
ñemít_size
;

111  
°©us
;

112 
	}
}

114 
NV_STATUS
 
	$nvidü_a˝i_exåa˘_obje˘
(

115 c⁄° 
a˝i_obje˘
 *acpi_object,

116 *
buf„r
,

117 
NvU32
 
buf„r_size
,

118 
NvU32
 *
d©a_size


121 
NV_STATUS
 
°©us
;

123 
a˝i_obje˘
->
Ty≥
)

125 
ACPI_TYPE_INTEGER
:

126 
°©us
 = 
	`nvidü_a˝i_exåa˘_öãgî
(
a˝i_obje˘
, 
buf„r
,

127 
buf„r_size
, 
d©a_size
);

130 
ACPI_TYPE_BUFFER
:

131 
°©us
 = 
	`nvidü_a˝i_exåa˘_buf„r
(
a˝i_obje˘
, 
buf„r
,

132 
buf„r_size
, 
d©a_size
);

135 
ACPI_TYPE_PACKAGE
:

136 
°©us
 = 
	`nvidü_a˝i_exåa˘_∑ckage
(
a˝i_obje˘
, 
buf„r
,

137 
buf„r_size
, 
d©a_size
);

141 
°©us
 = 
NV_ERR_NOT_SUPPORTED
;

144  
°©us
;

145 
	}
}

147 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_dsm_mëhod
(

148 
nv_°©e_t
 *
nv
,

149 
NvU8
 *
pA˝iDsmGuid
,

150 
NvU32
 
a˝iDsmRev
,

151 
NvU32
 
a˝iDsmSubFun˘i⁄
,

152 *
pInP¨ams
,

153 
NvU16
 
öP¨amSize
,

154 
NvU32
 *
pOutSètus
,

155 *
pOutD©a
,

156 
NvU16
 *
pSize


159 
devi˚_t
 
bus
, 
dev
;

160 
NV_STATUS
 
rmSètus
 = 
NV_OK
;

161 
ACPI_STATUS
 
°©us
;

162 
a˝i_buf„r
 
ouçut
 = { 
ACPI_ALLOCATE_BUFFER
, 
NULL
 };

163 
a˝i_obje˘
 *
dsm
;

164 
a˝i_obje˘
 
dsm_öput
[4];

165 
a˝i_obje˘_li°
 
öput
 = { 4, 
dsm_öput
 };

166 
uöt32_t
 
d©a_size
;

168 
dev
 = 
	`devi˚_gë_∑ª¡
(
nv
->
h™dÀ
);

170 i‡(
	`nvidü_a˝i_lookup_bus
(
dev
, &
bus
) != 0)

171  
NV_ERR_NOT_SUPPORTED
;

173 
dsm_öput
[0].
Buf„r
.
Ty≥
 = 
ACPI_TYPE_BUFFER
;

174 
dsm_öput
[0].
Buf„r
.
Lígth
 = 0x10;

175 
dsm_öput
[0].
Buf„r
.
Poöãr
 = 
pA˝iDsmGuid
;

176 
dsm_öput
[1].
I¡egî
.
Ty≥
 = 
ACPI_TYPE_INTEGER
;

177 
dsm_öput
[1].
I¡egî
.
VÆue
 = 
a˝iDsmRev
;

178 
dsm_öput
[2].
I¡egî
.
Ty≥
 = 
ACPI_TYPE_INTEGER
;

179 
dsm_öput
[2].
I¡egî
.
VÆue
 = 
a˝iDsmSubFun˘i⁄
;

180 
dsm_öput
[3].
Buf„r
.
Ty≥
 = 
ACPI_TYPE_BUFFER
;

181 
dsm_öput
[3].
Buf„r
.
Lígth
 = 
öP¨amSize
;

182 
dsm_öput
[3].
Buf„r
.
Poöãr
 = 
pInP¨ams
;

184 
°©us
 = 
	`ACPI_EVALUATE_OBJECT
(
bus
, 
dev
, "_DSM", &
öput
, &
ouçut
);

185 i‡(
	`ACPI_FAILURE
(
°©us
)) {

186 
	`nv_¥ötf
(
NV_DBG_INFO
,

187 "NVRM: %s: faûedÅÿevÆu©ê_DSM mëhod!\n", 
__FUNCTION__
);

188  
NV_ERR_GENERIC
;

191 i‡(
ouçut
.
Poöãr
 =
NULL
)

192  
NV_ERR_GENERIC
;

194 
dsm
 = 
ouçut
.
Poöãr
;

196 i‡(
pOutSètus
 !
NULL
) {

197 *
pOutSètus
 = ((
dsm
->
Buf„r
.
Poöãr
[3] << 24) |

198 (
dsm
->
Buf„r
.
Poöãr
[2] << 16) |

199 (
dsm
->
Buf„r
.
Poöãr
[1] << 8) |

200 
dsm
->
Buf„r
.
Poöãr
[2]);

203 
rmSètus
 = 
	`nvidü_a˝i_exåa˘_obje˘
(
dsm
, 
pOutD©a
, *
pSize
, &
d©a_size
);

204 i‡(
rmSètus
 !
NV_OK
) {

205 
	`nv_¥ötf
(
NV_DBG_INFO
,

206 "NVRM: %s:Ñe˚ived invÆid _DSM d©a!\n", 
__FUNCTION__
);

207 
rmSètus
 = 
NV_ERR_GENERIC
;

210 *
pSize
 = 
d©a_size
;

211 
	`‰ì
(
ouçut
.
Poöãr
, 
M_TEMP
);

213  
rmSètus
;

214 
	}
}

216 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_dod_mëhod
(

217 
nv_°©e_t
 *
nv
,

218 
NvU32
 *
pOutD©a
,

219 
NvU32
 *
pSize


222 
devi˚_t
 
bus
, 
dev
;

223 
NV_STATUS
 
rmSètus
 = 
NV_OK
;

224 
ACPI_STATUS
 
°©us
;

225 
a˝i_buf„r
 
ouçut
 = { 
ACPI_ALLOCATE_BUFFER
, 
NULL
 };

226 
a˝i_obje˘
 *
dod
;

227 
uöt32_t
 
i
, 
cou¡
 = (*
pSize
 / (
NvU32
));

229 
dev
 = 
	`devi˚_gë_∑ª¡
(
nv
->
h™dÀ
);

231 i‡(
	`nvidü_a˝i_lookup_bus
(
dev
, &
bus
) != 0)

232  
NV_ERR_NOT_SUPPORTED
;

234 
°©us
 = 
	`ACPI_EVALUATE_OBJECT
(
bus
, 
dev
, "_DOD", 
NULL
, &
ouçut
);

235 i‡(
	`ACPI_FAILURE
(
°©us
)) {

236 
	`nv_¥ötf
(
NV_DBG_INFO
,

237 "NVRM: %s: faûedÅÿevÆu©ê_DOD mëhod!\n", 
__FUNCTION__
);

238  
NV_ERR_GENERIC
;

241 i‡(
ouçut
.
Poöãr
 =
NULL
)

242  
NV_ERR_GENERIC
;

244 
dod
 = 
ouçut
.
Poöãr
;

245 *
pSize
 = 0;

247 i‡((
dod
->
Ty≥
 =
ACPI_TYPE_PACKAGE
) &&

248 (
dod
->
Package
.
Cou¡
 <
cou¡
)) {

249 
i
 = 0; i < 
dod
->
Package
.
Cou¡
; i++) {

250 i‡(
dod
->
Package
.
EÀmíts
[
i
].
Ty≥
 !
ACPI_TYPE_INTEGER
) {

251 
	`nv_¥ötf
(
NV_DBG_INFO
,

252 "NVRM: %s:Ñe˚ived invÆid _DODÉ¡ry!\n", 
__FUNCTION__
);

253 
rmSètus
 = 
NV_ERR_GENERIC
;

256 
pOutD©a
[
i
] = 
dod
->
Package
.
EÀmíts
[i].
I¡egî
.
VÆue
;

257 *
pSize
 +(
NvU32
);

261 
	`nv_¥ötf
(
NV_DBG_INFO
,

262 "NVRM: %s: foundÅoÿm™y _DODÉ¡rõs!\n", 
__FUNCTION__
);

263 
rmSètus
 = 
NV_ERR_GENERIC
;

266 
	`‰ì
(
ouçut
.
Poöãr
, 
M_TEMP
);

268  
rmSètus
;

269 
	}
}

271 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_rom_mëhod
(

272 
nv_°©e_t
 *
nv
,

273 
NvU32
 *
pInD©a
,

274 
NvU32
 *
pOutD©a


277 
devi˚_t
 
bus
, 
dev
;

278 
NV_STATUS
 
rmSètus
 = 
NV_OK
;

279 
ACPI_STATUS
 
°©us
;

280 
a˝i_buf„r
 
ouçut
 = { 
ACPI_ALLOCATE_BUFFER
, 
NULL
 };

281 
a˝i_obje˘
 *
rom
;

282 
a˝i_obje˘
 
rom_öput
[2];

283 
a˝i_obje˘_li°
 
öput
 = { 2, 
rom_öput
 };

284 
uöt32_t
 
off£t
, 
Àngth
;

286 
dev
 = 
	`devi˚_gë_∑ª¡
(
nv
->
h™dÀ
);

288 i‡(
	`nvidü_a˝i_lookup_bus
(
dev
, &
bus
) != 0)

289  
NV_ERR_NOT_SUPPORTED
;

291 
off£t
 = 
pInD©a
[0];

292 
Àngth
 = 
pInD©a
[1];

294 
rom_öput
[0].
Ty≥
 = 
ACPI_TYPE_INTEGER
;

295 
rom_öput
[0].
I¡egî
.
VÆue
 = 
off£t
;

296 
rom_öput
[1].
Ty≥
 = 
ACPI_TYPE_INTEGER
;

297 
rom_öput
[1].
I¡egî
.
VÆue
 = 
Àngth
;

299 
°©us
 = 
	`ACPI_EVALUATE_OBJECT
(
bus
, 
dev
, "_ROM", &
öput
, &
ouçut
);

300 i‡(
	`ACPI_FAILURE
(
°©us
)) {

301 
	`nv_¥ötf
(
NV_DBG_INFO
,

302 "NVRM: %s: faûedÅÿevÆu©ê_ROM mëhod!\n", 
__FUNCTION__
);

303  
NV_ERR_GENERIC
;

306 i‡(
ouçut
.
Poöãr
 =
NULL
)

307  
NV_ERR_GENERIC
;

309 
rom
 = 
ouçut
.
Poöãr
;

311 i‡((
rom
->
Ty≥
 =
ACPI_TYPE_BUFFER
) &&

312 (
rom
->
Buf„r
.
Lígth
 >
Àngth
)) {

313 
	`mem˝y
(
pOutD©a
, 
rom
->
Buf„r
.
Poöãr
, 
Àngth
);

315 
	`nv_¥ötf
(
NV_DBG_INFO
,

316 "NVRM: %s:Ñe˚ived invÆid _ROM d©a!\n", 
__FUNCTION__
);

317 
rmSètus
 = 
NV_ERR_GENERIC
;

320 
	`‰ì
(
ouçut
.
Poöãr
, 
M_TEMP
);

322  
rmSètus
;

323 
	}
}

327 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_dsm_mëhod
(

328 
nv_°©e_t
 *
nv
,

329 
NvU8
 *
pA˝iDsmGuid
,

330 
NvU32
 
a˝iDsmRev
,

331 
NvU32
 
a˝iDsmSubFun˘i⁄
,

332 *
pInP¨ams
,

333 
NvU16
 
öP¨amSize
,

334 
NvU32
 *
pOutSètus
,

335 *
pOutD©a
,

336 
NvU16
 *
pSize


339  
NV_ERR_NOT_SUPPORTED
;

340 
	}
}

342 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_dod_mëhod
(

343 
nv_°©e_t
 *
nv
,

344 
NvU32
 *
pOutD©a
,

345 
NvU32
 *
pSize


348  
NV_ERR_NOT_SUPPORTED
;

349 
	}
}

351 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_rom_mëhod
(

352 
nv_°©e_t
 *
nv
,

353 
NvU32
 *
pInD©a
,

354 
NvU32
 *
pOutD©a


357  
NV_ERR_NOT_SUPPORTED
;

358 
	}
}

362 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_ddc_mëhod
(

363 
nv_°©e_t
 *
nv
,

364 *
pEdidBuf„r
,

365 
NvU32
 *
pSize


368  
NV_ERR_NOT_SUPPORTED
;

369 
	}
}

371 
NV_STATUS
 
NV_API_CALL
 
	$nv_a˝i_mëhod
(

372 
NvU32
 
a˝i_mëhod
,

373 
NvU32
 
fun˘i⁄
,

374 
NvU32
 
subFun˘i⁄
,

375 *
öP¨ams
,

376 
NvU16
 
öP¨amSize
,

377 
NvU32
 *
outSètus
,

378 *
outD©a
,

379 
NvU16
 *
outD©aSize


382  
NV_ERR_NOT_SUPPORTED
;

383 
	}
}

385 
NV_API_CALL
 
	$nv_a˝i_mëhods_öô
(
NvU32
 *
h™dÀsPª£¡
)

387 *
h™dÀsPª£¡
 = 0;

388 
	}
}

390 
NV_API_CALL
 
	$nv_a˝i_mëhods_unöô
()

392 
	}
}

	@src/nvidia/nvidia_ctl.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 
d_›í_t
 
	gnvidü_˘l_›í
;

17 
d_io˘l_t
 
	gnvidü_˘l_io˘l
;

18 
d_pﬁl_t
 
	gnvidü_˘l_pﬁl
;

19 
d_mm≠_sögÀ_t
 
	gnvidü_˘l_mm≠_sögÀ
;

21 
cdevsw
 
	gnvidü_˘l_cdevsw
 = {

22 .
d_›í
 = 
nvidü_˘l_›í
,

23 .
	gd_io˘l
 = 
nvidü_˘l_io˘l
,

24 .
	gd_pﬁl
 = 
nvidü_˘l_pﬁl
,

25 .
	gd_mm≠_sögÀ
 = 
nvidü_˘l_mm≠_sögÀ
,

26 .
	gd_«me
 = "nvidiactl",

27 .
	gd_vîsi⁄
 = 
D_VERSION
,

30 
cdev
 *
	gnvidü_˘l_cdev
 = 
NULL
;

31 
nvidü_so·c
 
	gnvidü_˘l_sc
;

33 
	gnvidü_cou¡
 = 0;

35 
	$nvidü_˘l_›í
(

36 
cdev
 *
dev
,

37 
oÊags
,

38 
devty≥
,

39 
thªad
 *
td


42 
°©us
;

43 
nv_°©e_t
 *
nv
 = &
nvidü_˘l_°©e
;

44 
nvidü_fûï
 *
fûï
;

46 
fûï
 = 
	`mÆloc
((
nvidü_fûï_t
), 
M_NVIDIA
, (
M_WAITOK
 | 
M_ZERO
));

47 i‡(
fûï
 =
NULL
)

48  
ENOMEM
;

50 
°©us
 = 
	`devfs_£t_cdev¥iv
(
fûï
, 
nvidü_˘l_dt‹
);

51 i‡(
°©us
 != 0) {

52 
	`‰ì
(
fûï
, 
M_NVIDIA
);

53  
°©us
;

56 
fûï
->
nv
 =Çv;

57 
	`mtx_öô
(&
fûï
->
evít_mtx
, "evít_mtx", 
NULL
, (
MTX_DEF
 | 
MTX_RECURSE
));

58 
	`STAILQ_INIT
(&
fûï
->
evít_queue
);

60 
	`nv_lock_≠i
(
nv
);

61 
°©us
 = 
	`nvidü_›í_˘l
(
nv
, 
fûï
);

62 
	`nv_u∆ock_≠i
(
nv
);

64  
°©us
;

65 
	}
}

67 
	$nvidü_˘l_dt‹
(*
¨g
)

69 
°©us
;

70 
nvidü_fûï
 *
fûï
 = 
¨g
;

71 
nvidü_evít
 *
ë
;

72 
nv_°©e_t
 *
nv
 = 
fûï
->nv;

74 
	`nv_lock_≠i
(
nv
);

75 
°©us
 = 
	`nvidü_˛o£_˘l
(
nv
, 
fûï
);

76 
	`nv_u∆ock_≠i
(
nv
);

78 (
ë
 = 
	`STAILQ_FIRST
(&
fûï
->
evít_queue
))) {

79 
	`STAILQ_REMOVE
(&
fûï
->
evít_queue
, 
ë
, 
nvidü_evít
, 
queue
);

80 
	`‰ì
(
ë
, 
M_NVIDIA
);

82 
	`mtx_de°roy
(&
fûï
->
evít_mtx
);

84 
	`‰ì
(
fûï
, 
M_NVIDIA
);

85 
	}
}

87 
	$nvidü_˘l_io˘l
(

88 
cdev
 *
dev
,

89 
u_l⁄g
 
cmd
,

90 
ˇddr_t
 
d©a
,

91 
fÊag
,

92 
thªad
 *
td


95 
°©us
;

96 
nv_°©e_t
 *
nv
 = &
nvidü_˘l_°©e
;

97 
nvidü_fûï
 *
fûï
;

99 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
fûï
);

100 i‡(
°©us
 != 0)

101  
°©us
;

103 i‡(
	`__NV_IOC_TYPE
(
cmd
Ë!
NV_IOCTL_MAGIC
)

104  
ENOTTY
;

106 
	`nv_lock_≠i
(
nv
);

107 
°©us
 = 
	`nvidü_h™dÀ_io˘l
(
nv
, 
fûï
, 
cmd
, 
d©a
);

108 
	`nv_u∆ock_≠i
(
nv
);

110  
°©us
;

111 
	}
}

113 
	$nvidü_˘l_pﬁl
(

114 
cdev
 *
dev
,

115 
evíts
,

116 
thªad
 *
td


119 
nvidü_fûï
 *
fûï
;

120 
°©us
, 
mask
 = 0;

122 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
fûï
);

123 i‡(
°©us
 != 0)

126 
	`mtx_lock
(&
fûï
->
evít_mtx
);

128 i‡(
	`STAILQ_EMPTY
(&
fûï
->
evít_queue
Ë&& !fûï->
evít_≥ndög
)

129 
	`£Ãec‹d
(
td
, &
fûï
->
evít_r£l
);

131 
mask
 = (
evíts
 & (
POLLIN
 | 
POLLPRI
 | 
POLLRDNORM
));

132 
fûï
->
evít_≥ndög
 = 
FALSE
;

135 
	`mtx_u∆ock
(&
fûï
->
evít_mtx
);

137  
mask
;

138 
	}
}

140 
	$nvidü_˘l_mm≠_sögÀ
(

141 
cdev
 *
dev
,

142 
vm_ooff£t_t
 *
off£t
,

143 
vm_size_t
 
size
,

144 
vm_obje˘_t
 *
obje˘
,

145 
≈rŸ


148 
°©us
;

149 
nvidü_fûï
 *
fûï
;

150 
nv_°©e_t
 *
nv
;

152 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
fûï
);

153 i‡(
°©us
 != 0)

154  
°©us
;

155 
nv
 = 
fûï
->nv;

157 
	`nv_lock_≠i
(
nv
);

158 
°©us
 = 
	`nvidü_mm≠_˘l_sögÀ
(
nv
, 
fûï
, 
off£t
, 
size
, 
obje˘
);

159 
	`nv_u∆ock_≠i
(
nv
);

161  
°©us
;

162 
	}
}

164 
	$nvidü_˘l_©èch
()

166 i‡(
nvidü_cou¡
 == 0) {

167 
nvidü_˘l_cdev
 = 
	`make_dev
(&
nvidü_˘l_cdevsw
,

168 
CDEV_CTL_MINOR
,

169 
UID_ROOT
, 
GID_WHEEL
, 0666,

170 "%s", 
nvidü_˘l_cdevsw
.
d_«me
);

171 i‡(
nvidü_˘l_cdev
 =
NULL
)

172  
ENOMEM
;

175 
nvidü_cou¡
++;

177 
	}
}

179 
	$nvidü_˘l_dëach
()

181 
nvidü_so·c
 *
sc
;

183 
sc
 = &
nvidü_˘l_sc
;

184 
nvidü_cou¡
--;

186 i‡(
nvidü_cou¡
 == 0)

187 
	`de°roy_dev
(
nvidü_˘l_cdev
);

190 
	}
}

	@src/nvidia/nvidia_dev.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 
d_›í_t
 
	gnvidü_dev_›í
;

17 
d_io˘l_t
 
	gnvidü_dev_io˘l
;

18 
d_pﬁl_t
 
	gnvidü_dev_pﬁl
;

19 
d_mm≠_sögÀ_t
 
	gnvidü_dev_mm≠_sögÀ
;

21 
cdevsw
 
	gnvidü_dev_cdevsw
 = {

22 .
d_›í
 = 
nvidü_dev_›í
,

23 .
	gd_io˘l
 = 
nvidü_dev_io˘l
,

24 .
	gd_pﬁl
 = 
nvidü_dev_pﬁl
,

25 .
	gd_mm≠_sögÀ
 = 
nvidü_dev_mm≠_sögÀ
,

26 .
	gd_«me
 = "nvidia",

27 .
	gd_vîsi⁄
 = 
D_VERSION
,

28 .
	gd_Êags
 = 
D_MEM


31 
	$nvidü_dev_›í
(

32 
cdev
 *
dev
,

33 
oÊags
,

34 
devty≥
,

35 
thªad
 *
td


38 
°©us
;

39 
nvidü_so·c
 *
sc
 = 
dev
->
si_drv1
;

40 
nv_°©e_t
 *
nv
 = 
sc
->
nv_°©e
;

41 
nvidü_fûï
 *
fûï
;

43 
fûï
 = 
	`mÆloc
((
nvidü_fûï_t
), 
M_NVIDIA
, (
M_WAITOK
 | 
M_ZERO
));

44 i‡(
fûï
 =
NULL
)

45  
ENOMEM
;

47 
fûï
->
nv
 =Çv;

48 
	`mtx_öô
(&
fûï
->
evít_mtx
, "evít_mtx", 
NULL
, (
MTX_DEF
 | 
MTX_RECURSE
));

49 
	`STAILQ_INIT
(&
fûï
->
evít_queue
);

51 
	`nv_lock_≠i
(
nv
);

52 
°©us
 = 
	`nvidü_›í_dev
(
nv
, 
fûï
);

53 
	`nv_u∆ock_≠i
(
nv
);

55 i‡(
°©us
 != 0) {

56 
	`‰ì
(
fûï
, 
M_NVIDIA
);

57  
°©us
;

60 
°©us
 = 
	`devfs_£t_cdev¥iv
(
fûï
, 
nvidü_dev_dt‹
);

61 i‡(
°©us
 != 0) {

62 
	`‰ì
(
fûï
, 
M_NVIDIA
);

63  
°©us
;

67 
	}
}

69 
	$nvidü_dev_dt‹
(*
¨g
)

71 
°©us
;

72 
nvidü_fûï
 *
fûï
 = 
¨g
;

73 
nvidü_evít
 *
ë
;

74 
nv_°©e_t
 *
nv
 = 
fûï
->nv;

76 
	`nv_lock_≠i
(
nv
);

77 
°©us
 = 
	`nvidü_˛o£_dev
(
nv
, 
fûï
);

78 
	`nv_u∆ock_≠i
(
nv
);

80 (
ë
 = 
	`STAILQ_FIRST
(&
fûï
->
evít_queue
))) {

81 
	`STAILQ_REMOVE
(&
fûï
->
evít_queue
, 
ë
, 
nvidü_evít
, 
queue
);

82 
	`‰ì
(
ë
, 
M_NVIDIA
);

84 
	`mtx_de°roy
(&
fûï
->
evít_mtx
);

86 
	`‰ì
(
fûï
, 
M_NVIDIA
);

87 
	}
}

89 
	$nvidü_dev_io˘l
(

90 
cdev
 *
dev
,

91 
u_l⁄g
 
cmd
,

92 
ˇddr_t
 
d©a
,

93 
fÊag
,

94 
thªad
 *
td


97 
°©us
;

98 
nvidü_fûï
 *
fûï
;

99 
nv_°©e_t
 *
nv
;

101 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
fûï
);

102 i‡(
°©us
 != 0)

103  
°©us
;

104 
nv
 = 
fûï
->nv;

106 i‡(
	`__NV_IOC_TYPE
(
cmd
Ë!
NV_IOCTL_MAGIC
)

107  
ENOTTY
;

109 
	`nv_lock_≠i
(
nv
);

110 
°©us
 = 
	`nvidü_h™dÀ_io˘l
(
nv
, 
fûï
, 
cmd
, 
d©a
);

111 
	`nv_u∆ock_≠i
(
nv
);

113  
°©us
;

114 
	}
}

116 
	$nvidü_dev_pﬁl
(

117 
cdev
 *
dev
,

118 
evíts
,

119 
thªad
 *
td


122 
nvidü_fûï
 *
fûï
;

123 
°©us
, 
mask
 = 0;

125 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
fûï
);

126 i‡(
°©us
 != 0)

129 
	`mtx_lock
(&
fûï
->
evít_mtx
);

131 i‡(
	`STAILQ_EMPTY
(&
fûï
->
evít_queue
Ë&& !fûï->
evít_≥ndög
)

132 
	`£Ãec‹d
(
td
, &
fûï
->
evít_r£l
);

134 
mask
 = (
evíts
 & (
POLLIN
 | 
POLLPRI
 | 
POLLRDNORM
));

135 
fûï
->
evít_≥ndög
 = 
FALSE
;

138 
	`mtx_u∆ock
(&
fûï
->
evít_mtx
);

140  
mask
;

141 
	}
}

143 
	$nvidü_dev_mm≠_sögÀ
(

144 
cdev
 *
dev
,

145 
vm_ooff£t_t
 *
off£t
,

146 
vm_size_t
 
size
,

147 
vm_obje˘_t
 *
obje˘
,

148 
≈rŸ


151 
°©us
;

152 
nvidü_fûï
 *
fûï
;

153 
nv_°©e_t
 *
nv
;

155 
°©us
 = 
	`devfs_gë_cdev¥iv
((**)&
fûï
);

156 i‡(
°©us
 != 0)

157  
°©us
;

158 
nv
 = 
fûï
->nv;

160 
	`nv_lock_≠i
(
nv
);

161 
°©us
 = 
	`nvidü_mm≠_dev_sögÀ
(
nv
, 
fûï
, 
off£t
, 
size
, 
obje˘
);

162 
	`nv_u∆ock_≠i
(
nv
);

164  
°©us
;

165 
	}
}

167 
	$nvidü_dev_©èch
(
nvidü_so·c
 *
sc
)

169 
sc
->
cdev
 = 
	`make_dev
(&
nvidü_dev_cdevsw
,

170 
	`devi˚_gë_unô
(
sc
->
dev
),

171 
UID_ROOT
, 
GID_WHEEL
, 0666,

172 "%s%d", 
nvidü_dev_cdevsw
.
d_«me
,

173 
	`devi˚_gë_unô
(
sc
->
dev
));

174 i‡(
sc
->
cdev
 =
NULL
)

175  
ENOMEM
;

177 
sc
->
cdev
->
si_drv1
 = sc;

180 
	}
}

182 
	$nvidü_dev_dëach
(
nvidü_so·c
 *
sc
)

184 
	`de°roy_dev
(
sc
->
cdev
);

186 
	}
}

	@src/nvidia/nvidia_i2c.c

1 
	~"nv-misc.h
"

2 
	~"os-öãrÁ˚.h
"

3 
	~"nv.h
"

5 * 
NV_API_CALL
 
	$nv_i2c_add_ad≠ãr
(
nv_°©e_t
 *
nv
, 
NvU32
 
p‹t
)

7  
FALSE
;

8 
	}
}

10 
BOOL
 
NV_API_CALL
 
	$nv_i2c_dñ_ad≠ãr
(
nv_°©e_t
 *
nv
, *
d©a
)

12  
NULL
;

13 
	}
}

	@src/nvidia/nvidia_linux.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 #ifde‡
NV_SUPPORT_LINUX_COMPAT


18 
	#LINUX_IOCTL_NVIDIA_MIN
 0x4600

	)

19 
	#LINUX_IOCTL_NVIDIA_MAX
 0x46ff

	)

21 #i‡
deföed
(
NVCPU_X86
)

22 
	~"löux/löux.h
"

23 
	~"löux/löux_¥Ÿo.h
"

24 #ñi‡
deföed
(
NVCPU_X86_64
)

25 
	~"löux32/löux.h
"

26 
	~"löux32/löux32_¥Ÿo.h
"

29 
	~<com∑t/löux/löux_io˘l.h
>

31 
löux_io˘l_nvidü
(
thªad
 *, 
löux_io˘l_¨gs
 *);

33 
	$löux_io˘l_nvidü
(

34 
thªad
 *
td
,

35 
löux_io˘l_¨gs
 *
¨gs


38 
fûe
 *
Â
;

39 
îr‹
;

40 #i‡
__FªeBSD_vîsi⁄
 >= 1000053

41 
ˇp_rights_t
 
rights
;

43 
u_l⁄g
 
cmd
;

45 
îr‹
 = 
	`fgë
(
td
, 
¨gs
->
fd
, 
	`ˇp_rights_öô
(&
rights
, 
CAP_IOCTL
), &
Â
);

46 i‡(
îr‹
 != 0)

47  
îr‹
;

49 
cmd
 = 
¨gs
->cmd;

51 
îr‹
 = 
	`fo_io˘l
(
Â
, 
cmd
, (
ˇddr_t
)
¨gs
->
¨g
, 
td
->
td_u¸ed
,Åd);

52 
	`fdr›
(
Â
, 
td
);

54  
îr‹
;

55 
	}
}

57 
löux_io˘l_h™dÀr
 
	gnvidü_h™dÀr
 = {

58 
löux_io˘l_nvidü
,

59 
LINUX_IOCTL_NVIDIA_MIN
,

60 
LINUX_IOCTL_NVIDIA_MAX


65 
	$nvidü_löux_öô
()

67 #ifde‡
NV_SUPPORT_LINUX_COMPAT


68 
	`löux_io˘l_ªgi°î_h™dÀr
(&
nvidü_h™dÀr
);

70 
	}
}

72 
	$nvidü_löux_exô
()

74 #ifde‡
NV_SUPPORT_LINUX_COMPAT


75 
	`löux_io˘l_uƒegi°î_h™dÀr
(&
nvidü_h™dÀr
);

77 
	}
}

	@src/nvidia/nvidia_modeset_interface.c

11 
	~"nv-mode£t-öãrÁ˚.h
"

13 
	~"nv-misc.h
"

14 
	~"os-öãrÁ˚.h
"

15 
	~"nv°©us.h
"

16 
	~"nv.h
"

17 
	~"nv-‰ìbsd.h
"

19 c⁄° 
nvidü_mode£t_ˇŒbacks_t
 *
	gnv_mode£t_ˇŒbacks
;

21 
	$nvidü_mode£t_rm_›s_Æloc_°ack
(
nvidü_°ack_t
 **
•
)

23 
	`NV_UMA_ZONE_ALLOC_STACK
(*
•
);

24  (*
•
 =
NULL
Ë? 
ENOMEM
 : 0;

25 
	}
}

27 
	$nvidü_mode£t_rm_›s_‰ì_°ack
(
nvidü_°ack_t
 *
•
)

29 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

30 
	}
}

32 
	$nvidü_mode£t_£t_ˇŒbacks
(c⁄° 
nvidü_mode£t_ˇŒbacks_t
 *
cb
)

34 i‡((
nv_mode£t_ˇŒbacks
 !
NULL
 && 
cb
 != NULL) ||

35 (
nv_mode£t_ˇŒbacks
 =
NULL
 && 
cb
 == NULL))

37  -
EINVAL
;

40 
nv_mode£t_ˇŒbacks
 = 
cb
;

42 
	}
}

44 
	$nvidü_mode£t_su•íd
(
NvU32
 
gpuId
)

46 i‡(
nv_mode£t_ˇŒbacks
)

48 
nv_mode£t_ˇŒbacks
->
	`su•íd
(
gpuId
);

50 
	}
}

52 
	$nvidü_mode£t_ªsume
(
NvU32
 
gpuId
)

54 i‡(
nv_mode£t_ˇŒbacks
)

56 
nv_mode£t_ˇŒbacks
->
	`ªsume
(
gpuId
);

58 
	}
}

60 
NV_STATUS
 
	$nvidü_gë_rm_›s
(
nvidü_mode£t_rm_›s_t
 *
rm_›s
)

62 c⁄° 
nvidü_mode£t_rm_›s_t
 
loˇl_rm_›s
 = {

63 .
vîsi⁄_°rög
 = 
NV_VERSION_STRING
,

64 .
sy°em_öfo
 = {

65 .
Ælow_wrôe_comböög
 = 
NV_FALSE
,

67 .
Æloc_°ack
 = 
nvidü_mode£t_rm_›s_Æloc_°ack
,

68 .
‰ì_°ack
 = 
nvidü_mode£t_rm_›s_‰ì_°ack
,

69 .
íumî©e_gpus
 = 
NULL
,

70 .
›í_gpu
 = 
nvidü_›í_dev_kî√l
,

71 .
˛o£_gpu
 = 
nvidü_˛o£_dev_kî√l
,

72 .
›
 = 
rm_kî√l_rm≠i_›
,

73 .
£t_ˇŒbacks
 = 
nvidü_mode£t_£t_ˇŒbacks
,

76 i‡(
	`°rcmp
(
rm_›s
->
vîsi⁄_°rög
, 
NV_VERSION_STRING
) != 0)

78 
rm_›s
->
vîsi⁄_°rög
 = 
NV_VERSION_STRING
;

79  
NV_ERR_GENERIC
;

82 *
rm_›s
 = 
loˇl_rm_›s
;

84  
NV_OK
;

85 
	}
}

	@src/nvidia/nvidia_os.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 
	~<sys/c⁄sio.h
>

17 
	~<sys/fbio.h
>

18 
	~<sys/lökî.h
>

19 
	~<sys/timex.h
>

20 
	~<dev/sysc⁄s/sysc⁄s.h
>

25 
	#NV_HAVE_EFI_FB
 (
__FªeBSD_vîsi⁄
 >1001000)

	)

26 
	#MODINFOMD_EFI_FB
 0x1005

	)

27 
	sefi_fb
 {

28 
uöt64_t
 
	mfb_addr
;

29 
uöt64_t
 
	mfb_size
;

30 
uöt32_t
 
	mfb_height
;

31 
uöt32_t
 
	mfb_width
;

32 
uöt32_t
 
	mfb_°ride
;

33 
uöt32_t
 
	mfb_mask_ªd
;

34 
uöt32_t
 
	mfb_mask_gªí
;

35 
uöt32_t
 
	mfb_mask_blue
;

36 
uöt32_t
 
	mfb_mask_ª£rved
;

39 
MALLOC_DEFINE
(
M_NVIDIA
, "nvidia", "NVIDIA memoryállocations");

40 
TASKQUEUE_DEFINE_THREAD
(
nvidü
);

42 
NV_STATUS
 
NV_API_CALL
 
	$os_Æloc_mem
(

43 **
addªss
,

44 
NvU64
 
size


47 
Æloc_size
;

53 
Æloc_size
 = 
size
;

55 i‡(
Æloc_size
 !
size
)

56  
NV_ERR_INVALID_PARAMETER
;

59 *
addªss
 = 
	`mÆloc
(
Æloc_size
, 
M_NVIDIA
, 
M_NOWAIT
 | 
M_ZERO
);

60  *
addªss
 ? 
NV_OK
 : 
NV_ERR_NO_MEMORY
;

61 
	}
}

63 
NV_API_CALL
 
	$os_‰ì_mem
(*
addªss
)

65 
	`‰ì
(
addªss
, 
M_NVIDIA
);

66 
	}
}

68 
	#NV_MSECS_PER_TICK
 (1000 / 
hz
)

	)

69 
	#NV_MSECS_TO_TICKS
(
ms
Ë((msË* 
hz
 / 1000)

	)

70 
	#NV_USECS_PER_TICK
 (1000000 / 
hz
)

	)

71 
	#NV_USECS_TO_TICKS
(
us
Ë((usË* 
hz
 / 1000000)

	)

73 
NV_STATUS
 
NV_API_CALL
 
	$os_dñay
(
NvU32
 
MûliSec⁄ds
)

75 
Mi¸oSec⁄ds
;

76 
ticks
;

77 
timevÆ
 
tv_íd
, 
tv_aux
;

79 
	`gëmi¸Ÿime
(&
tv_aux
);

81 i‡(
	`__NV_ITHREAD
(Ë&& (
MûliSec⁄ds
 > 
NV_MAX_ISR_DELAY_MS
))

82  
NV_ERR_GENERIC
;

84 i‡(
	`__NV_ITHREAD
()) {

85 
	`DELAY
(
MûliSec⁄ds
 * 1000);

86  
NV_OK
;

89 
Mi¸oSec⁄ds
 = 
MûliSec⁄ds
 * 1000;

90 
tv_íd
.
tv_u£c
 = 
Mi¸oSec⁄ds
;

91 
tv_íd
.
tv_£c
 = 0;

93 
	`NV_TIMERADD
(&
tv_aux
, &
tv_íd
, &tv_end);

95 
ticks
 = 
	`NV_USECS_TO_TICKS
(
Mi¸oSec⁄ds
);

97 i‡(
ticks
 > 0) {

99 
	`t¶ìp
((*)
os_dñay
, 
PUSER
 | 
PCATCH
, "dñay", 
ticks
);

100 
	`gëmi¸Ÿime
(&
tv_aux
);

101 i‡(
	`NV_TIMERCMP
(&
tv_aux
, &
tv_íd
, <)) {

103 
	`NV_TIMERSUB
(&
tv_íd
, &
tv_aux
, &tv_aux);

104 
Mi¸oSec⁄ds
 = 
tv_aux
.
tv_u£c
 + (tv_aux.
tv_£c
 * 1000000);

106 
Mi¸oSec⁄ds
 = 0;

107 } (
ticks
 = 
	`NV_USECS_TO_TICKS
(
Mi¸oSec⁄ds
)) > 0);

110 i‡(
Mi¸oSec⁄ds
 > 0)

111 
	`DELAY
(
Mi¸oSec⁄ds
);

113  
NV_OK
;

114 
	}
}

116 
NV_STATUS
 
NV_API_CALL
 
	$os_dñay_us
(
NvU32
 
Mi¸oSec⁄ds
)

118 i‡(
	`__NV_ITHREAD
(Ë&& (
Mi¸oSec⁄ds
 > 
NV_MAX_ISR_DELAY_US
))

119  
NV_ERR_GENERIC
;

120 
	`DELAY
(
Mi¸oSec⁄ds
);

121  
NV_OK
;

122 
	}
}

124 
NvU64
 
NV_API_CALL
 
	$os_gë_˝u_‰equícy
()

127  (
tsc_‰eq
 + 4999);

128 
	}
}

130 
NvU32
 
NV_API_CALL
 
	$os_gë_cuºít_¥o˚ss
()

132  
cuΩroc
->
p_pid
;

133 
	}
}

135 
NV_API_CALL
 
	$os_gë_cuºít_¥o˚ss_«me
(*
buf
, 
NvU32
 
Àn
)

138 
buf
[0] = '\0';

139 
	}
}

141 
NvU32
 
NV_API_CALL
 
	$os_gë_cuºít_∑sid
()

145 
	}
}

147 
NV_STATUS
 
NV_API_CALL
 
	$os_gë_cuºít_thªad
(
NvU64
 *
thªadId
)

149 i‡(
	`__NV_ITHREAD
())

150 *
thªadId
 = 0;

152 *
thªadId
 = (
NvU64
Ë
CURTHREAD
->
td_tid
;

154  
NV_OK
;

155 
	}
}

157 
NV_STATUS
 
NV_API_CALL
 
	$os_gë_cuºít_time
(

158 
NvU32
 *
£c
,

159 
NvU32
 *
u£c


162 
timevÆ
 
tv
;

164 
	`gëmi¸Ÿime
(&
tv
);

166 *
£c
 = 
tv
.
tv_£c
;

167 *
u£c
 = 
tv
.
tv_u£c
;

169  
NV_OK
;

170 
	}
}

172 
	#NANOSECOND_PER_USEC
 1000

	)

174 
NV_API_CALL
 
	$os_gë_cuºít_tick
(
NvU64
 *
n£c
)

176 
NvU32
 
£c
, 
u£c
;

179 (Ë
	`os_gë_cuºít_time
(&
£c
, &
u£c
);

181 *
n£c
 = (
NvU64
)
£c
 * 
NANOSECOND
 + (NvU64)
u£c
 * 
NANOSECOND_PER_USEC
;

182 
	}
}

184 
BOOL
 
NV_API_CALL
 
	$os_is_admöi°øt‹
()

186  
	`su£r
(
CURTHREAD
Ë? 
FALSE
 : 
TRUE
;

187 
	}
}

189 
NvU8
 
NV_API_CALL
 
	$os_io_ªad_byã
(

190 
NvU32
 
addªss


194  
	`öb
(
addªss
);

195 
	}
}

197 
NV_API_CALL
 
	$os_io_wrôe_byã
(

198 
NvU32
 
addªss
,

199 
NvU8
 
vÆue


203 
	`outb
(
addªss
, 
vÆue
);

204 
	}
}

206 
NvU16
 
NV_API_CALL
 
	$os_io_ªad_w‹d
(

207 
NvU32
 
addªss


211  
	`öw
(
addªss
);

212 
	}
}

214 
NV_API_CALL
 
	$os_io_wrôe_w‹d
(

215 
NvU32
 
addªss
,

216 
NvU16
 
vÆue


220  
	`outw
(
addªss
, 
vÆue
);

221 
	}
}

223 
NvU32
 
NV_API_CALL
 
	$os_io_ªad_dw‹d
(

224 
NvU32
 
addªss


228  
	`öl
(
addªss
);

229 
	}
}

231 
NV_API_CALL
 
	$os_io_wrôe_dw‹d
(

232 
NvU32
 
addªss
,

233 
NvU32
 
vÆue


237 
	`oué
(
addªss
, 
vÆue
);

238 
	}
}

240 * 
NV_API_CALL
 
	$os_m≠_kî√l_•a˚
(

241 
NvU64
 
°¨t
,

242 
NvU64
 
size
,

243 
NvU32
 
mode
,

244 
NvU32
 
memTy≥


247 
m≠_mode
;

249 #i‡
	`deföed
(
NVCPU_X86
Ë&& !deföed(
PAE
)

250 i‡(
°¨t
 > 0xffffffffULL)

251  
NULL
;

254 
mode
) {

255 
NV_MEMORY_CACHED
:

256 
m≠_mode
 = 
PAT_WRITE_BACK
;

258 
NV_MEMORY_WRITECOMBINED
:

259 
m≠_mode
 = 
PAT_WRITE_COMBINING
;

261 
NV_MEMORY_UNCACHED
:

262 
NV_MEMORY_DEFAULT
:

263 
m≠_mode
 = 
PAT_UNCACHEABLE
;

266 
	`nv_¥ötf
(
NV_DBG_ERRORS
,

268  
NULL
;

271  
	`pm≠_m≠dev_©å
(
°¨t
, 
size
, 
m≠_mode
);

272 
	}
}

274 
NV_API_CALL
 
	$os_unm≠_kî√l_•a˚
(

275 *
addªss
,

276 
NvU64
 
size


279 
	`pm≠_unm≠dev
((
vm_off£t_t
)
addªss
, 
size
);

280 
	}
}

282 * 
NV_API_CALL
 
	$os_m≠_u£r_•a˚
(

283 
NvU64
 
°¨t
,

284 
NvU64
 
size_byãs
,

285 
NvU32
 
mode
,

286 
NvU32
 
¥Ÿe˘
,

287 **
¥iv_d©a


290  (*)(
NvUPå
)
°¨t
;

291 
	}
}

293 
NV_API_CALL
 
	$os_unm≠_u£r_•a˚
(

294 *
addªss
,

295 
NvU64
 
size
,

296 *
¥iv_d©a


299 
	}
}

307 
NvU32
 
	gcur_debugÀvñ
 = 0xffffffff;

309 
NV_API_CALL
 
	$os_dbg_öô
()

311 
NvU32
 
√w_debugÀvñ
;

312 
nvidü_°ack_t
 *
•
;

314 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

315 i‡(
•
 =
NULL
)

318 i‡(
	`rm_ªad_ªgi°ry_dw‹d
(
•
, 
NULL
, "NVreg", "ResmanDebugLevel",

319 &
√w_debugÀvñ
Ë=
NV_OK
) {

320 i‡(
√w_debugÀvñ
 != 0xffffffff)

321 
cur_debugÀvñ
 = 
√w_debugÀvñ
;

324 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

325 
	}
}

327 
NV_STATUS
 
NV_API_CALL
 
	$os_scheduÀ
()

329 
ªt
 = 
	`∑u£
("sched", 1 );

331 
ªt
)

334 
EWOULDBLOCK
:

335  
NV_OK
;

337  
NV_ERR_OPERATING_SYSTEM
;

339 
	}
}

341 
	$os_execuã_w‹k_ôem
(*
c⁄ãxt
, 
≥ndög
)

343 
nvidü_w‹k_t
 *
w‹k
 = (nvidü_w‹k_à*)
c⁄ãxt
;

344 
nvidü_°ack_t
 *
•
 = 
NULL
;

346 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

347 i‡(
•
 =
NULL
) {

348 
	`nv_¥ötf
(
NV_DBG_ERRORS
, "NVRM: failedÅoállocate stack!\n");

352 
	`rm_execuã_w‹k_ôem
(
•
, 
w‹k
->
d©a
);

353 
	`os_‰ì_mem
((*)
w‹k
);

355 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

356 
	}
}

358 
NV_STATUS
 
NV_API_CALL
 
	$os_queue_w‹k_ôem
(*
d©a
)

360 
NV_STATUS
 
°©us
;

361 
nvidü_w‹k_t
 *
w‹k
;

363 
°©us
 = 
	`os_Æloc_mem
((**)&
w‹k
, (
nvidü_w‹k_t
));

364 i‡(
°©us
 !
NV_OK
)

365  
°©us
;

367 
w‹k
->
d©a
 = data;

369 
	`TASK_INIT
(&
w‹k
->
èsk
, 0, 
os_execuã_w‹k_ôem
, (*)work);

370 
	`èskqueue_íqueue
(
èskqueue_nvidü
, &
w‹k
->
èsk
);

372  
NV_OK
;

373 
	}
}

375 
NV_STATUS
 
NV_API_CALL
 
	$os_Êush_w‹k_queue
()

377 
	`èskqueue_run
(
èskqueue_nvidü
);

378  
NV_OK
;

379 
	}
}

381 
NV_API_CALL
 
	$os_dbg_£t_Àvñ
(
NvU32
 
√w_debugÀvñ
)

383 
cur_debugÀvñ
 = 
√w_debugÀvñ
;

384 
	}
}

386 
NV_API_CALL
 
	$os_dbg_bªakpoöt
()

388 #ifde‡
DEBUG


389 
	`NV_KDB_ENTER
("breakpoint", "DEBUG breakpoint");

391 
	}
}

393 
	#MAX_ERROR_STRING
 512

	)

394 
	gnv_îr‹_°rög
[
MAX_ERROR_STRING
];

399 
NV_API_CALL
 
	$out_°rög
(c⁄° *
mesßge
)

401 
	`¥ötf
("%s", 
mesßge
);

402 
	}
}

404 
NV_API_CALL
 
	$nv_¥ötf
(
NvU32
 
debugÀvñ
, c⁄° *
f‹m©
, ...)

406 *
mesßge
 = 
nv_îr‹_°rög
;

407 
va_li°
 
¨gli°
;

408 
ch¨s_wrôãn
 = 0;

410 i‡(
debugÀvñ
 >((
cur_debugÀvñ
 >> 4) & 3)) {

411 
	`va_°¨t
(
¨gli°
, 
f‹m©
);

412 
ch¨s_wrôãn
 = 
	`v¢¥ötf
(
mesßge
, (
nv_îr‹_°rög
), 
f‹m©
, 
¨gli°
);

413 
	`va_íd
(
¨gli°
);

414 
	`¥ötf
("%s", 
mesßge
);

417  
ch¨s_wrôãn
;

418 
	}
}

420 
NvS32
 
NV_API_CALL
 
	$os_¢¥ötf
(*
buf
, 
NvU32
 
size
, c⁄° *
fmt
, ...)

422 
va_li°
 
¨gli°
;

423 
ch¨s_wrôãn
;

425 
	`va_°¨t
(
¨gli°
, 
fmt
);

426 
ch¨s_wrôãn
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gli°
);

427 
	`va_íd
(
¨gli°
);

429  
ch¨s_wrôãn
;

430 
	}
}

432 
NV_API_CALL
 
	$os_log_îr‹
(c⁄° *
fmt
, 
va_li°
 
≠
)

434 
	`v¢¥ötf
(
nv_îr‹_°rög
, 
MAX_ERROR_STRING
, 
fmt
, 
≠
);

435 
	`¥ötf
("%s", 
nv_îr‹_°rög
);

436 
	}
}

438 
NvS32
 
NV_API_CALL
 
	$os_mem_cmp
(

439 c⁄° 
NvU8
 *
buf0
,

440 c⁄° 
NvU8
 *
buf1
,

441 
NvU32
 
Àngth


444  
	`memcmp
(
buf0
, 
buf1
, 
Àngth
);

445 
	}
}

447 
NvU8
* 
NV_API_CALL
 
	$os_mem_c›y
(

448 
NvU8
 *
d°
,

449 c⁄° 
NvU8
 *
§c
,

450 
NvU32
 
Àngth


453 
NvU8
 *
ªt
 = 
d°
;

454 
NvU32
 
dw‹ds
, 
byãs
 = 
Àngth
;

456 i‡((
Àngth
 >= 128) &&

457 (((
NvUPå
)
d°
 & 3Ë=0Ë& (((NvUPå)
§c
 & 3) == 0))

459 
dw‹ds
 = (
Àngth
 / (
NvU32
));

460 
byãs
 = (
Àngth
 % (
NvU32
));

462 
dw‹ds
 != 0)

464 *(
NvU32
 *)
d°
 = *(c⁄° NvU32 *)
§c
;

465 
d°
 +(
NvU32
);

466 
§c
 +(
NvU32
);

467 
dw‹ds
--;

471 
byãs
 != 0)

473 *
d°
 = *
§c
;

474 
d°
++;

475 
§c
++;

476 
byãs
--;

479  
ªt
;

480 
	}
}

482 
NV_STATUS
 
NV_API_CALL
 
	$os_mem˝y_‰om_u£r
(

483 *
d°
,

484 c⁄° *
§c
,

485 
NvU32
 
Àngth


488  
	`c›yö
(
§c
, 
d°
, 
Àngth
Ë? 
NV_ERR_INVALID_POINTER
 : 
NV_OK
;

489 
	}
}

491 
NV_STATUS
 
NV_API_CALL
 
	$os_mem˝y_to_u£r
(

492 *
d°
,

493 c⁄° *
§c
,

494 
NvU32
 
Àngth


497  
	`c›yout
(
§c
, 
d°
, 
Àngth
Ë? 
NV_ERR_INVALID_POINTER
 : 
NV_OK
;

498 
	}
}

500 * 
NV_API_CALL
 
	$os_mem_£t
(

501 *
d°
,

502 
NvU8
 
c
,

503 
NvU32
 
Àngth


506 
NvU8
 *
ªt
 = 
d°
;

507 
NvU32
 
byãs
 = 
Àngth
;

509 
byãs
 != 0)

511 *(
NvU8
 *)
d°
 = 
c
;

512 
d°
 = ((
NvU8
 *)dst + 1);

513 
byãs
--;

516  
ªt
;

517 
	}
}

519 * 
NV_API_CALL
 
	$os_°rög_c›y
(

520 *
d°
,

521 c⁄° *
§c


524  
	`°r˝y
(
d°
, 
§c
);

525 
	}
}

527 
NvU32
 
NV_API_CALL
 
	$os_°rög_Àngth
(c⁄° * 
s
)

529  
	`°æí
(
s
);

530 
	}
}

532 
NvU32
 
NV_API_CALL
 
	$os_°πoul
(c⁄° *
°r
, **
ídp
, 
NvU32
 
ba£
)

534  (
NvU32
)
	`°πoul
(
°r
, 
ídp
, 
ba£
);

535 
	}
}

537 
NvS32
 
NV_API_CALL
 
	$os_°rög_com∑ª
(c⁄° *
°r1
, c⁄° *
°r2
)

539  
	`°rcmp
(
°r1
, 
°r2
);

540 
	}
}

542 
NvU32
 
NV_API_CALL
 
	$os_gë_∑ge_size
()

544  
PAGE_SIZE
;

545 
	}
}

547 
NvU64
 
NV_API_CALL
 
	$os_gë_∑ge_mask
()

549  ~
PAGE_MASK
;

550 
	}
}

552 
NvU8
 
NV_API_CALL
 
	$os_gë_∑ge_shi·
()

554  
PAGE_SHIFT
;

555 
	}
}

557 
NvU64
 
NV_API_CALL
 
	$os_gë_num_phys_∑ges
()

559  (
NvU64
)
physmem
;

560 
	}
}

562 
NvU32
 
NV_API_CALL
 
	$os_gë_˝u_cou¡
()

564  
mp_n˝us
;

565 
	}
}

567 
NvU32
 
NV_API_CALL
 
	$os_gë_˝u_numbî
()

569  
cur˝u
;

570 
	}
}

572 #ifde‡
NV_USE_WBINVD


573 
	$wbövd_a˘i⁄_func
(*
¨g
)

575 
__asm__
 
	`__vﬁ©ûe__
("wbinvd": : :"memory");

576 
	}
}

578 
NV_STATUS
 
NV_API_CALL
 
	$os_Êush_˝u_ˇche
()

580 
	`smp_ªndezvous
(
NULL
, 
wbövd_a˘i⁄_func
, NULL, NULL);

581 
	`wbövd_a˘i⁄_func
(
NULL
);

582  
NV_OK
;

583 
	}
}

585 
NV_STATUS
 
NV_API_CALL
 
	$os_Êush_˝u_ˇche
()

587 
	`pm≠_övÆid©e_ˇche
();

588  
NV_OK
;

589 
	}
}

592 
NV_STATUS
 
NV_API_CALL
 
	$os_Êush_u£r_ˇche
(

593 
NvU64
 
°¨t
,

594 
NvU64
 
íd
,

595 
NvU64
 
physSèπ
,

596 
NvU64
 
physEnd
,

597 
NvU32
 
Êags


600  
NV_ERR_NOT_SUPPORTED
;

601 
	}
}

603 
NV_STATUS
 
NV_API_CALL
 
	$os_Êush_˝u_ˇche_Æl
()

605  
NV_ERR_NOT_SUPPORTED
;

606 
	}
}

608 
	$s„n˚_a˘i⁄_func
(*
¨g
)

610 
__asm__
 
	`__vﬁ©ûe__
("sfence": : :"memory");

611 
	}
}

613 
NV_API_CALL
 
	$os_Êush_˝u_wrôe_comböe_buf„r
()

615 
	`smp_ªndezvous
(
NULL
, 
s„n˚_a˘i⁄_func
, NULL, NULL);

616 
	`s„n˚_a˘i⁄_func
(
NULL
);

617 
	}
}

619 
NV_STATUS
 
NV_API_CALL
 
	$os_Æloc_muãx
(**
muãx
)

621 
NV_STATUS
 
°©us
;

622 
sx
 *sx;

624 
°©us
 = 
	`os_Æloc_mem
((**)&
sx
, (sx));

625 i‡(
°©us
 !
NV_OK
)

626  
°©us
;

628 
	`sx_öô
(
sx
, "os.lock_sx");

629 *
muãx
 = (*)
sx
;

631  
NV_OK
;

632 
	}
}

634 
NV_API_CALL
 
	$os_‰ì_muãx
(*
muãx
)

636 
sx
 *sx = 
muãx
;

638 i‡(
sx
 !
NULL
) {

639 
	`sx_de°roy
(
sx
);

640 
	`os_‰ì_mem
(
sx
);

642 
	}
}

644 
NV_STATUS
 
NV_API_CALL
 
	$os_acquúe_muãx
(*
muãx
)

646 
sx
 *sx = 
muãx
;

648 i‡(
	`__NV_ITHREAD
())

649  
NV_ERR_INVALID_REQUEST
;

651 
	`sx_xlock
(
sx
);

653  
NV_OK
;

654 
	}
}

656 
NV_STATUS
 
NV_API_CALL
 
	$os_c⁄d_acquúe_muãx
(*
muãx
)

658 
sx
 *sx = 
muãx
;

660 i‡(
	`__NV_ITHREAD
())

661  
NV_ERR_INVALID_REQUEST
;

663 i‡(
	`sx_åy_xlock
(
sx
) == 0)

664  
NV_ERR_TIMEOUT_RETRY
;

666  
NV_OK
;

667 
	}
}

669 
NV_API_CALL
 
	$os_ªÀa£_muãx
(*
muãx
)

671 
sx
 *sx = 
muãx
;

673 
	`sx_xu∆ock
(
sx
);

674 
	}
}

676 
	sos_£m≠h‹e
 {

677 
mtx
 
	mmuãx_mtx
;

678 
cv
 
	mmuãx_cv
;

679 
NvS32
 
	mcou¡
;

682 * 
NV_API_CALL
 
	$os_Æloc_£m≠h‹e
(
NvU32
 
öôülVÆue
)

684 
NV_STATUS
 
°©us
;

685 
os_£m≠h‹e
 *
os_£ma
;

687 
°©us
 = 
	`os_Æloc_mem
((**)&
os_£ma
, (
os_£m≠h‹e
));

688 i‡(
°©us
 !
NV_OK
) {

689 
	`nv_¥ötf
(
NV_DBG_ERRORS
, "NVRM: failedÅoállocate semaphore!\n");

690  
NULL
;

693 
	`mtx_öô
(&
os_£ma
->
muãx_mtx
, "os.£ma_mtx", 
NULL
, 
MTX_DEF
);

694 
	`cv_öô
(&
os_£ma
->
muãx_cv
, "os.sema_cv");

696 
os_£ma
->
cou¡
 = 
öôülVÆue
;

698  (*)
os_£ma
;

699 
	}
}

701 
NV_API_CALL
 
	$os_‰ì_£m≠h‹e
(*
£m≠h‹e
)

703 
os_£m≠h‹e
 *
os_£ma
 = (os_£m≠h‹ê*)
£m≠h‹e
;

705 
	`mtx_de°roy
(&
os_£ma
->
muãx_mtx
);

706 
	`cv_de°roy
(&
os_£ma
->
muãx_cv
);

708 
	`os_‰ì_mem
(
os_£ma
);

709 
	}
}

711 
NV_STATUS
 
NV_API_CALL
 
	$os_acquúe_£m≠h‹e
(*
£m≠h‹e
)

713 
os_£m≠h‹e
 *
os_£ma
 = (os_£m≠h‹ê*)
£m≠h‹e
;

715 
	`mtx_lock
(&
os_£ma
->
muãx_mtx
);

716 
os_£ma
->
cou¡
--;

717 i‡(
os_£ma
->
cou¡
 < 0)

718 
	`cv_waô_u∆ock
(&
os_£ma
->
muãx_cv
, &os_£ma->
muãx_mtx
);

720 
	`mtx_u∆ock
(&
os_£ma
->
muãx_mtx
);

722  
NV_OK
;

723 
	}
}

725 
NV_STATUS
 
NV_API_CALL
 
	$os_ªÀa£_£m≠h‹e
(*
£m≠h‹e
)

727 
os_£m≠h‹e
 *
os_£ma
 = (os_£m≠h‹ê*)
£m≠h‹e
;

729 
	`mtx_lock
(&
os_£ma
->
muãx_mtx
);

730 i‡(
os_£ma
->
cou¡
 < 0) {

731 
	`cv_sig«l
(&
os_£ma
->
muãx_cv
);

733 
os_£ma
->
cou¡
++;

734 
	`mtx_u∆ock
(&
os_£ma
->
muãx_mtx
);

736  
NV_OK
;

737 
	}
}

739 
BOOL
 
NV_API_CALL
 
	$os_£m≠h‹e_may_¶ìp
()

741  (!
	`__NV_ITHREAD
());

742 
	}
}

744 
BOOL
 
NV_API_CALL
 
	$os_is_i§
()

746  (
	`__NV_ITHREAD
());

747 
	}
}

749 
BOOL
 
NV_API_CALL
 
	$os_∑t_suµ‹ãd
()

751  
TRUE
;

752 
	}
}

754 
BOOL
 
NV_API_CALL
 
	$os_is_efi_íabÀd
()

756  
FALSE
;

757 
	}
}

759 
BOOL
 
NV_API_CALL
 
	$os_iommu_is_¢o›ög_íabÀd
()

761  
TRUE
;

762 
	}
}

764 
NV_API_CALL
 
	$os_gë_s¸ìn_öfo
(

765 
NvU64
 *
pPhysiˇlAddªss
,

766 
NvU16
 *
pFbWidth
,

767 
NvU16
 *
pFbHeight
,

768 
NvU16
 *
pFbDïth
,

769 
NvU16
 *
pFbPôch


772 #i‡
NV_HAVE_EFI_FB


779 
ˇddr_t
 
kmdp
 = 
	`¥ñﬂd_£¨ch_by_ty≥
("elf kernel") ?:

780 
	`¥ñﬂd_£¨ch_by_ty≥
("elf64 kernel");

782 i‡(
kmdp
 !
NULL
)

784 c⁄° 
efi_fb
 *
efifb
 =

785 (c⁄° 
efi_fb
 *)
	`¥ñﬂd_£¨ch_öfo
(
kmdp
, 
MODINFO_METADATA
 |

786 
MODINFOMD_EFI_FB
);

787 i‡(
efifb
 !
NULL
)

789 
dïth
 = 
	`Ês
(
efifb
->
fb_mask_ªd
 |Éfifb->
fb_mask_gªí
 |

790 
efifb
->
fb_mask_blue
 |Éfifb->
fb_mask_ª£rved
);

791 
bµ
 = 
	`roundup2
(
dïth
, 
NBBY
);

793 *
pPhysiˇlAddªss
 = 
efifb
->
fb_addr
;

794 *
pFbWidth
 = 
efifb
->
fb_width
;

795 *
pFbHeight
 = 
efifb
->
fb_height
;

796 *
pFbDïth
 = 
dïth
;

798 *
pFbPôch
 = 
efifb
->
fb_°ride
 * (
bµ
 / 
NBBY
);

804 c⁄° 
sc_so·c_t
 *
sc
 = 
	`sc_gë_so·c
(0, 
SC_KERNEL_CONSOLE
);

806 i‡(
sc
)

808 c⁄° 
video_ad≠ãr_t
 *
adp
 = 
sc
->adp;

810 i‡(
adp
)

812 c⁄° 
video_öfo
 *
vi
 = &
adp
->
va_öfo
;

814 i‡(
vi
 && (vi->
vi_Êags
 & 
V_INFO_LINEAR
))

816 *
pPhysiˇlAddªss
 = 
vi
->
vi_buf„r
;

817 *
pFbWidth
 = 
vi
->
vi_width
;

818 *
pFbHeight
 = 
vi
->
vi_height
;

819 *
pFbDïth
 = 
vi
->
vi_dïth
;

820 *
pFbPôch
 = 
adp
->
va_löe_width
;

827 *
pPhysiˇlAddªss
 = 0;

828 *
pFbWidth
 = *
pFbHeight
 = *
pFbDïth
 = *
pFbPôch
 = 0;

829 
	}
}

831 
NV_API_CALL
 
	$os_ªgi°î_com∑tibÀ_io˘l
(

832 
NvU32
 
cmd
,

833 
NvU32
 
size


836 
	}
}

838 
NV_API_CALL
 
	$os_uƒegi°î_com∑tibÀ_io˘l
(

839 
NvU32
 
cmd
,

840 
NvU32
 
size


843 
	}
}

845 
NV_STATUS
 
NV_API_CALL
 
	$os_dißbÀ_c⁄sﬁe_ac˚ss
()

847  
NV_OK
;

848 
	}
}

850 
NV_STATUS
 
NV_API_CALL
 
	$os_íabÀ_c⁄sﬁe_ac˚ss
()

852  
NV_OK
;

853 
	}
}

855 
NV_STATUS
 
NV_API_CALL
 
	$os_Æloc_•ölock
(**
lock
)

857 
NV_STATUS
 
°©us
;

858 
mtx
 *mtx;

860 
°©us
 = 
	`os_Æloc_mem
((**)&
mtx
, (mtx));

861 i‡(
°©us
 !
NV_OK
)

862  
°©us
;

864 
	`mtx_öô
(
mtx
, "os.lock_mtx", 
NULL
, 
MTX_DEF
);

866 *
lock
 = (*)
mtx
;

868  
NV_OK
;

869 
	}
}

871 
NV_API_CALL
 
	$os_‰ì_•ölock
(*
lock
)

873 
mtx
 *mtx = 
lock
;

875 i‡(
mtx
 !
NULL
) {

876 
	`mtx_as£π
(
mtx
, 
MA_OWNED
);

877 
	`mtx_de°roy
(
mtx
);

878 
	`os_‰ì_mem
(
mtx
);

880 
	}
}

882 
NvU64
 
NV_API_CALL
 
	$os_acquúe_•ölock
(*
lock
)

884 
mtx
 *mtx = 
lock
;

886 
	`mtx_lock
(
mtx
);

889 
	}
}

891 
NV_API_CALL
 
	$os_ªÀa£_•ölock
(*
lock
, 
NvU64
 
ﬁdIrql
)

893 
mtx
 *mtx = 
lock
;

895 
	`mtx_u∆ock
(
mtx
);

896 
	}
}

898 
NV_STATUS
 
NV_API_CALL
 
	$os_gë_addªss_•a˚_öfo
(

899 
NvU64
 *
u£rSèπAddªss
,

900 
NvU64
 *
u£rEndAddªss
,

901 
NvU64
 *
kî√lSèπAddªss
,

902 
NvU64
 *
kî√lEndAddªss


905  
NV_ERR_NOT_SUPPORTED
;

906 
	}
}

908 
NV_STATUS
 
NV_API_CALL
 
	$os_gë_vîsi⁄_öfo
(
os_vîsi⁄_öfo
 * 
pOsVîsi⁄Info
)

910  
NV_ERR_NOT_SUPPORTED
;

911 
	}
}

913 
NvBoﬁ
 
NV_API_CALL
 
	$os_is_xí_dom0
()

915  
FALSE
;

916 
	}
}

918 
NvBoﬁ
 
NV_API_CALL
 
	$os_is_vgx_hy≥r
()

920  
FALSE
;

921 
	}
}

923 
NV_STATUS
 
NV_API_CALL
 
	$os_öje˘_vgx_msi
(
NvU16
 
gue°ID
, 
NvU64
 
msiAddr
, 
NvU32
 
msiD©a
)

925  
NV_ERR_NOT_SUPPORTED
;

926 
	}
}

928 
NvBoﬁ
 
NV_API_CALL
 
	$os_is_grid_suµ‹ãd
()

930  
FALSE
;

931 
	}
}

933 
NV_API_CALL
 
	$os_bug_check
(
NvU32
 
bugCode
, c⁄° *
bugCodeSå
)

935 
	}
}

937 
NV_STATUS
 
NV_API_CALL
 
	$os_lock_u£r_∑ges
(

938 *
addªss
,

939 
NvU64
 
∑ge_cou¡
,

940 **
∑ge_¨øy


943  
NV_ERR_NOT_SUPPORTED
;

944 
	}
}

946 
NV_STATUS
 
NV_API_CALL
 
	$os_u∆ock_u£r_∑ges
(

947 
NvU64
 
∑ge_cou¡
,

948 *
∑ge_¨øy


951  
NV_ERR_NOT_SUPPORTED
;

952 
	}
}

954 
NV_STATUS
 
NV_API_CALL
 
	$os_lookup_u£r_io_mem‹y
(

955 *
addªss
,

956 
NvU64
 
∑ge_cou¡
,

957 
NvU64
 **
±e_¨øy


960  
NV_ERR_NOT_SUPPORTED
;

961 
	}
}

963 
NV_STATUS
 
NV_API_CALL
 
	$os_m©ch_mm≠_off£t
(

964 *
pAŒocPriv©e
,

965 
NvU64
 
off£t
,

966 
NvU64
 *
pPageIndex


969 
nvidü_Æloc
 *
©
 = 
pAŒocPriv©e
;

970 
NvU64
 
i
;

972 
i
 = 0; i < (
©
->
size
 / 
PAGE_SIZE
); i++) {

973 i‡(
©
->
Æloc_ty≥_c⁄tiguous
) {

974 i‡(
off£t
 =(
©
->
±e_¨øy
[0].
physiˇl_addªss
 + (
i
 * 
PAGE_SIZE
))) {

975 *
pPageIndex
 = 
i
;

976  
NV_OK
;

979 i‡(
off£t
 =
©
->
±e_¨øy
[
i
].
physiˇl_addªss
) {

980 *
pPageIndex
 = 
i
;

981  
NV_OK
;

986  
NV_ERR_OBJECT_NOT_FOUND
;

987 
	}
}

989 
NV_STATUS
 
NV_API_CALL
 
	$os_gë_euid
(
NvU32
 *
pSecTokí
)

991 *
pSecTokí
 = (
NvU32
)
CURTHREAD
->
td_u¸ed
->
¸_uid
;

992  
NV_OK
;

993 
	}
}

995 
NV_STATUS
 
NV_API_CALL
 
	$os_gë_smbios_hódî
(
NvU64
 *
pSmbsAddr
)

997  
NV_ERR_NOT_SUPPORTED
;

998 
	}
}

1000 
NV_STATUS
 
NV_API_CALL
 
	gos_gë_a˝i_rsdp_‰om_uefi


1002 
NvU32
 *
	gpRsdpAddr


1005  
	gNV_ERR_NOT_SUPPORTED
;

1008 
NV_API_CALL
 
	$os_add_ªc‹d_f‹_¸ashLog
(*
pbuf„r
, 
NvU32
 
size
)

1010 
	}
}

1012 
NV_API_CALL
 
	$os_dñëe_ªc‹d_f‹_¸ashLog
(*
pbuf„r
)

1014 
	}
}

1016 
NV_STATUS
 
NV_API_CALL
 
	$os_ˇŒ_vgpu_vfio
(*
pvgpu_vfio_öfo
, 
NvU32
 
cmd_ty≥
)

1018  
NV_ERR_NOT_SUPPORTED
;

1019 
	}
}

1021 
NV_STATUS
 
NV_API_CALL
 
	$os_numa_memblock_size
(
NvU64
 *
memblock_size
)

1023  
NV_ERR_NOT_SUPPORTED
;

1024 
	}
}

1026 
NV_STATUS
 
NV_API_CALL
 
	gos_Æloc_∑ges_node


1028 
NvS32
 
	gnid
,

1029 
NvU32
 
	gsize
,

1030 
NvU32
 
	gÊag
,

1031 
NvU64
 *
	gpAddªss


1034  
	gNV_ERR_NOT_SUPPORTED
;

1037 
NV_STATUS
 
NV_API_CALL
 
	gos_gë_∑ge


1039 
NvU64
 
	gaddªss


1042  
	gNV_ERR_NOT_SUPPORTED
;

1045 
NV_STATUS
 
NV_API_CALL
 
	gos_put_∑ge


1047 
NvU64
 
	gaddªss


1050  
	gNV_ERR_NOT_SUPPORTED
;

1053 
NvU32
 
NV_API_CALL
 
	gos_gë_∑ge_ªfcou¡


1055 
NvU64
 
	gaddªss


1061 
NvU32
 
NV_API_CALL
 
	gos_cou¡_èû_∑ges


1063 
NvU64
 
	gaddªss


1069 
NV_API_CALL
 
	gos_‰ì_∑ges_phys


1071 
NvU64
 
	gaddªss
,

1072 
NvU32
 
	gsize


1077 
NV_STATUS
 
NV_API_CALL
 
	$os_ùmi_c⁄√˘
(
NvU32
 
devIndex
, 
NvU8
 
myAddr
, **
µOsPriv
)

1079  
NV_ERR_NOT_SUPPORTED
;

1080 
	}
}

1082 
NV_API_CALL
 
	$os_ùmi_disc⁄√˘
(*
pOsPriv
)

1084 
	}
}

1086 
NV_STATUS
 
NV_API_CALL
 
	$os_ùmi_£nd_ª˚ive_cmd
(*
pOsPriv
, 
nvùmi_ªq_ª•_t
 *
pReq
)

1088  
NV_ERR_NOT_SUPPORTED
;

1089 
	}
}

1091 
NV_STATUS
 
NV_API_CALL
 
	$os_ˇŒ_nv_vmbus
(
NvU32
 
vmbus_cmd
, *
öput
)

1093  
NV_ERR_NOT_SUPPORTED
;

1094 
	}
}

	@src/nvidia/nvidia_os_pci.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 * 
NV_API_CALL
 
	$os_pci_öô_h™dÀ
(

17 
NvU32
 
domaö
,

18 
NvU8
 
bus
,

19 
NvU8
 
¶Ÿ
,

20 
NvU8
 
fun˘i⁄
,

21 
NvU16
 *
víd‹
,

22 
NvU16
 *
devi˚


25 
devi˚_t
 
dev
;

33 
dev
 = 
	`pci_föd_dbsf
(
domaö
, 
bus
, 
¶Ÿ
, 
fun˘i⁄
);

35 i‡(
dev
 !
NULL
) {

36 i‡(
víd‹
)

37 *
víd‹
 = 
	`pci_gë_víd‹
(
dev
);

38 i‡(
devi˚
)

39 *
devi˚
 = 
	`pci_gë_devi˚
(
dev
);

42  (*Ë
dev
;

43 
	}
}

45 
NV_STATUS
 
NV_API_CALL
 
	$os_pci_ªad_byã
(

46 *
h™dÀ
,

47 
NvU32
 
off£t
,

48 
NvU8
 *
vÆue


51 i‡(
off£t
 >= 0x100) {

52 *
vÆue
 = 0xff;

53  
NV_ERR_NOT_SUPPORTED
;

55 *
vÆue
 = 
	`pci_ªad_c⁄fig
((
devi˚_t
Ë
h™dÀ
, 
off£t
, 1);

56  
NV_OK
;

57 
	}
}

59 
NV_STATUS
 
NV_API_CALL
 
	$os_pci_ªad_w‹d
(

60 *
h™dÀ
,

61 
NvU32
 
off£t
,

62 
NvU16
 *
vÆue


65 i‡(
off£t
 >= 0x100) {

66 *
vÆue
 = 0xffff;

67  
NV_ERR_NOT_SUPPORTED
;

69 *
vÆue
 = 
	`pci_ªad_c⁄fig
((
devi˚_t
Ë
h™dÀ
, 
off£t
, 2);

70  
NV_OK
;

71 
	}
}

73 
NV_STATUS
 
NV_API_CALL
 
	$os_pci_ªad_dw‹d
(

74 *
h™dÀ
,

75 
NvU32
 
off£t
,

76 
NvU32
 *
vÆue


79 i‡(
off£t
 >= 0x100) {

80 *
vÆue
 = 0xffffffff;

81  
NV_ERR_NOT_SUPPORTED
;

83 *
vÆue
 = 
	`pci_ªad_c⁄fig
((
devi˚_t
Ë
h™dÀ
, 
off£t
, 4);

84  
NV_OK
;

85 
	}
}

87 
NV_STATUS
 
NV_API_CALL
 
	$os_pci_wrôe_byã
(

88 *
h™dÀ
,

89 
NvU32
 
off£t
,

90 
NvU8
 
vÆue


93 i‡(
off£t
 >= 0x100)

94  
NV_ERR_NOT_SUPPORTED
;

96 
	`pci_wrôe_c⁄fig
((
devi˚_t
Ë
h™dÀ
, 
off£t
, 
vÆue
, 1);

97  
NV_OK
;

98 
	}
}

100 
NV_STATUS
 
NV_API_CALL
 
	$os_pci_wrôe_w‹d
(

101 *
h™dÀ
,

102 
NvU32
 
off£t
,

103 
NvU16
 
vÆue


106 i‡(
off£t
 >= 0x100)

107  
NV_ERR_NOT_SUPPORTED
;

109 
	`pci_wrôe_c⁄fig
((
devi˚_t
Ë
h™dÀ
, 
off£t
, 
vÆue
, 2);

110  
NV_OK
;

111 
	}
}

113 
NV_STATUS
 
NV_API_CALL
 
	$os_pci_wrôe_dw‹d
(

114 *
h™dÀ
,

115 
NvU32
 
off£t
,

116 
NvU32
 
vÆue


119 i‡(
off£t
 >= 0x100)

120  
NV_ERR_NOT_SUPPORTED
;

122 
	`pci_wrôe_c⁄fig
((
devi˚_t
Ë
h™dÀ
, 
off£t
, 
vÆue
, 4);

123  
NV_OK
;

124 
	}
}

126 
NV_API_CALL
 
	$os_pci_ªmove
(

127 *
h™dÀ


131 
	}
}

133 
NvBoﬁ
 
NV_API_CALL
 
	$os_pci_ªmove_suµ‹ãd
()

135  
NV_FALSE
;

136 
	}
}

	@src/nvidia/nvidia_os_registry.c

11 
	#NV_DEFINE_REGISTRY_KEY_TABLE


	)

13 
	~"nv-misc.h
"

14 
	~"os-öãrÁ˚.h
"

15 
	~"nv.h
"

16 
	~"nv-‰ìbsd.h
"

17 
	~"nv-ªg.h
"

19 
	$nvidü_upd©e_ªgi°ry
(*
√w_›ti⁄_°rög
)

21 
nv_∑rm_t
 *
íåy
;

22 
nvidü_°ack_t
 *
•
;

23 *
›ti⁄_°rög
 = 
NULL
;

24 *
±r
;

25 *
tokí
;

26 *
«me
, *
vÆue
;

27 
NvU32
 
i
, 
d©a
;

29 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

30 i‡(
•
 =
NULL
)

33 i‡((
›ti⁄_°rög
 = 
	`rm_ªmove_•a˚s
(
√w_›ti⁄_°rög
)Ë=
NULL
)

38 
±r
 = 
›ti⁄_°rög
;

40 (
tokí
 = 
	`°r£p
(&
±r
, ";")Ë!
NULL
) {

41 i‡(!(
«me
 = 
	`°r£p
(&
tokí
, "=")Ë|| !
	`°æí
(name))

43 i‡(!(
vÆue
 = 
	`°r£p
(&
tokí
, "=")Ë|| !
	`°æí
(value))

45 i‡(
	`°r£p
(&
tokí
, "="Ë!
NULL
)

48 
d©a
 = (
NvU32
)
	`°πoul
(
vÆue
, 
NULL
, 0);

50 
i
 = 0; (
íåy
 = &
nv_∑rms
[i])->
«me
 !
NULL
; i++) {

51 i‡(
	`°rcmp
(
íåy
->
«me
,Çame) == 0) {

52 *
íåy
->
d©a
 = data;

57 
	`rm_wrôe_ªgi°ry_dw‹d
(
•
, 
NULL
, "NVªg", 
«me
, 
d©a
);

60 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

63 
	`os_‰ì_mem
(
›ti⁄_°rög
);

64 
	}
}

66 
	#NV_TUNABLE_MAX_STRLEN
 128

	)

68 
	$nvidü_tu«bÀ_öô
()

70 
nv_∑rm_t
 *
íåy
;

71 
NvU32
 
i
;

72 *
tu«bÀ
;

74 
tu«bÀ
 = 
	`mÆloc
(
NV_TUNABLE_MAX_STRLEN
, 
M_NVIDIA
, 
M_WAITOK
);

75 i‡(
tu«bÀ
 =
NULL
)

78 
i
 = 0; (
íåy
 = &
nv_∑rms
[i])->
«me
 !
NULL
; i++) {

79 
	`¢¥ötf
(
tu«bÀ
, 
NV_TUNABLE_MAX_STRLEN
, "hw.nvidia.registry.%s",

80 
íåy
->
«me
);

81 
	`TUNABLE_INT_FETCH
(
tu«bÀ
, 
íåy
->
d©a
);

84 
	`‰ì
(
tu«bÀ
, 
M_NVIDIA
);

85 
	}
}

87 
NV_STATUS
 
NV_API_CALL
 
	$os_ªgi°ry_öô
()

89 
nv_∑rm_t
 *
íåy
;

90 
NvU32
 
i
;

91 
nvidü_°ack_t
 *
•
;

93 
	`nvidü_tu«bÀ_öô
();

95 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

96 i‡(
•
 =
NULL
)

97  
NV_ERR_NO_MEMORY
;

99 
i
 = 0; (
íåy
 = &
nv_∑rms
[i])->
«me
 !
NULL
; i++)

100 
	`rm_wrôe_ªgi°ry_dw‹d
(
•
, 
NULL
, 
íåy
->
node
,É¡ry->
«me
, *íåy->
d©a
);

102 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

104  
NV_OK
;

105 
	}
}

	@src/nvidia/nvidia_pci.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 
nvidü_pci_idítify
 (
drivî_t
 *, 
devi˚_t
);

17 
nvidü_pci_¥obe
 (
devi˚_t
);

18 
nvidü_pci_©èch
 (
devi˚_t
);

19 
nvidü_pci_dëach
 (
devi˚_t
);

21 
nvidü_pci_dißbÀ_£º
 (
devi˚_t
 
dev
);

22 
nvidü_pci_íabÀ_ötx
 (
devi˚_t
 
dev
);

24 
	$nvidü_pci_idítify
(
drivî_t
 *
drivî
, 
devi˚_t
 
∑ª¡
)

26 i‡(
	`devi˚_föd_chûd
(
∑ª¡
, "nvidü", -1Ë=
NULL
)

27 
	`devi˚_add_chûd
(
∑ª¡
, "nvidia", -1);

28 
	}
}

30 
	$nvidü_pci_¥obe
(
devi˚_t
 
dev
)

32 
NvU16
 
devi˚
;

33 
«me
[
NV_DEVICE_NAME_LENGTH
];

34 
nvidü_°ack_t
 *
•
;

35 
NvU16
 
subvíd‹
, 
subdevi˚
;

37 
devi˚
 = 
	`pci_gë_devi˚
(
dev
);

39 i‡((
	`pci_gë_˛ass
(
dev
Ë!
PCIC_DISPLAY
) ||

40 ((
	`pci_gë_sub˛ass
(
dev
Ë!
PCIS_DISPLAY_VGA
) &&

41 (
	`pci_gë_sub˛ass
(
dev
Ë!
PCIS_DISPLAY_3D
)) ||

42 (
	`pci_gë_víd‹
(
dev
) != 0x10de) ||

43 (
devi˚
 < 0x0020)) {

44  
ENXIO
;

47 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

48 i‡(
•
 =
NULL
)

49  
ENOMEM
;

51 
subvíd‹
 = 
	`pci_gë_subvíd‹
(
dev
);

52 
subdevi˚
 = 
	`pci_gë_subdevi˚
(
dev
);

54 i‡(
	`rm_is_Àgacy_devi˚
(
•
, 
devi˚
, 
subvíd‹
, 
subdevi˚
, 
TRUE
))

56 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

57  
ENXIO
;

60 i‡(
	`rm_gë_devi˚_«me
(
•
, 
NULL
, 
devi˚
, 
subvíd‹
, 
subdevi˚
,

61 
NV_DEVICE_NAME_LENGTH
, 
«me
)

62 !
NV_OK
) {

63 
	`°r˝y
(
«me
, "Unknown");

66 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

68 
	`devi˚_£t_desc_c›y
(
dev
, 
«me
);

71 
	}
}

73 
	$nvidü_pci_£tup_öå
(
devi˚_t
 
dev
)

75 
°©us
, 
Êags
;

76 
nvidü_so·c
 *
sc
;

78 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

81 
Êags
 = (
INTR_TYPE_AV
 | 
INTR_MPSAFE
);

83 
°©us
 = 
	`bus_£tup_öå
(
dev
, 
sc
->
úq
, 
Êags
, 
NULL
, 
nvidü_öå
, sc,

84 &
sc
->
úq_ih
);

85 i‡(
°©us
) {

86 
	`devi˚_¥ötf
(
dev
, "NVRM: HW ISR setup failed.\n");

87 
Áû
;

90 
Áû
:

91  
°©us
;

92 
	}
}

94 
	$nvidü_pci_ã¨down_öå
(
devi˚_t
 
dev
)

96 
°©us
;

97 
nvidü_so·c
 *
sc
;

99 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

101 
°©us
 = 
	`bus_ã¨down_öå
(
dev
, 
sc
->
úq
, sc->
úq_ih
);

102 i‡(
°©us
) {

103 
	`devi˚_¥ötf
(
dev
, "NVRM: HW ISRÅeardown failed.\n");

104 
Áû
;

107 
Áû
:

108  
°©us
;

109 
	}
}

111 
	$nvidü_pci_dißbÀ_£º
(
devi˚_t
 
dev
)

113 
NvU16
 
w‹d
;

114 
	`os_pci_ªad_w‹d
(
dev
, 
PCIR_COMMAND
, &
w‹d
);

115 
w‹d
 &~
PCIM_CMD_SERRESPEN
;

116 
	`os_pci_wrôe_w‹d
(
dev
, 
PCIR_COMMAND
, 
w‹d
);

117 
	}
}

119 
	$nvidü_pci_íabÀ_ötx
(
devi˚_t
 
dev
)

121 
NvU16
 
w‹d
;

122 
	`os_pci_ªad_w‹d
(
dev
, 
PCIR_COMMAND
, &
w‹d
);

123 
w‹d
 &~
PCIM_CMD_INTXDIS
;

124 
	`os_pci_wrôe_w‹d
(
dev
, 
PCIR_COMMAND
, 
w‹d
);

125 
	}
}

127 
	$nvidü_pci_ßve_c⁄fig_•a˚
(

128 
nvidü_°ack_t
 *
•
,

129 
devi˚_t
 
dev


132 
nvidü_so·c
 *
sc
 = 
	`devi˚_gë_so·c
(
dev
);

133 
nv_°©e_t
 *
nv
 = 
sc
->
nv_°©e
;

134 
NvS16
 
i
;

136 
i
 = 0; i < 
NVRM_PCICFG_NUM_DWORDS
; i++)

138 
	`os_pci_ªad_dw‹d
(
dev
, (
i
 << 2), &
nv
->
pci_cfg_•a˚
[i]);

140 
	}
}

142 
	$nvidü_pci_ª°‹e_c⁄fig_•a˚
(

143 
nvidü_°ack_t
 *
•
,

144 
devi˚_t
 
dev


147 
nvidü_so·c
 *
sc
 = 
	`devi˚_gë_so·c
(
dev
);

148 
nv_°©e_t
 *
nv
 = 
sc
->
nv_°©e
;

149 
NvS16
 
i
;

150 
NvU32
 
dw‹d
;

152 
i
 = 
NVRM_PCICFG_NUM_DWORDS
 - 1; i >= 0; i--)

154 
	`os_pci_ªad_dw‹d
(
dev
, (
i
 << 2), &
dw‹d
);

155 i‡(
dw‹d
 !
nv
->
pci_cfg_•a˚
[
i
]) {

156 
	`os_pci_wrôe_dw‹d
(
dev
, (
i
 << 2), 
nv
->
pci_cfg_•a˚
[i]);

159 
	}
}

161 
	$nvidü_pci_check_c⁄fig_•a˚
(

162 
nvidü_°ack_t
 *
•
,

163 
devi˚_t
 
dev
,

164 
BOOL
 
check_the_b¨s
,

165 
BOOL
 
acquúe_£m≠h‹e
,

166 
BOOL
 
may_block


169 
NvU32
 
BAR_low
, 
BAR_high
;

170 
NvU16
 
w‹d
, 
i
;

171 
nvidü_so·c
 *
sc
 = 
	`devi˚_gë_so·c
(
dev
);

172 
nv_°©e_t
 *
nv
 = 
sc
->
nv_°©e
;

174 i‡(
nv
->
Êags
 & 
NV_FLAG_USE_BAR0_CFG
) {

175 
	`rm_check_pci_c⁄fig_•a˚
(
•
, 
nv
, 
check_the_b¨s
,

176 
acquúe_£m≠h‹e
, 
may_block
);

180 
	`os_pci_ªad_w‹d
(
dev
, 
PCIR_COMMAND
, &
w‹d
);

182 i‡((
w‹d
 & 
PCIM_CMD_BUSMASTEREN
) == 0)

183 
	`pci_íabÀ_busma°î
(
dev
);

185 i‡((
w‹d
 & 
PCIM_CMD_MEMEN
) == 0)

186 
	`pci_íabÀ_io
(
dev
, 
SYS_RES_MEMORY
);

188 i‡((
w‹d
 & 
PCIM_CMD_SERRESPEN
) != 0)

189 
	`nvidü_pci_dißbÀ_£º
(
dev
);

191 i‡((
w‹d
 & 
PCIM_CMD_INTXDIS
) != 0)

192 
	`nvidü_pci_íabÀ_ötx
(
dev
);

194 i‡(
check_the_b¨s
)

196 
i
 = 0; i < 
NV_GPU_NUM_BARS
; i++) {

197 
BAR_low
 = 
BAR_high
 = 0;

198 
nv_≠îtuª_t
 *
BAR
 = &
nv
->
b¨s
[
i
];

199 i‡(
BAR
->
off£t
 == 0) ;

201 
	`os_pci_ªad_dw‹d
(
dev
, 
BAR
->
off£t
, &
BAR_low
);

202 i‡((
BAR_low
 & 
NVRM_PCICFG_BAR_ADDR_MASK
) !=

203 
	`NvU64_LO32
(
BAR
->
bus_addªss
)) {

204 
	`os_pci_wrôe_dw‹d
(
dev
, 
BAR
->
off£t
,

205 
	`NvU64_LO32
(
BAR
->
bus_addªss
));

208 i‡((
BAR_low
 & 
NVRM_PCICFG_BAR_MEMTYPE_MASK
)

209 !
NVRM_PCICFG_BAR_MEMTYPE_64BIT
)

212 
	`os_pci_ªad_dw‹d
(
dev
, 
BAR
->
off£t
 + 4, &
BAR_high
);

213 i‡((
BAR_low
 & 
NVRM_PCICFG_BAR_ADDR_MASK
Ë=
BAR
->
bus_addªss


214 && 
BAR_high
 == 0)

217 i‡(
BAR_high
 !
	`NvU64_HI32
(
BAR
->
bus_addªss
)) {

218 
	`os_pci_wrôe_dw‹d
(
dev
, 
BAR
->
off£t
 + 4,

219 
	`NvU64_HI32
(
BAR
->
bus_addªss
));

223 
	}
}

225 
NvU8
 
	$nvidü_pci_föd_ˇ∑bûôy
(
devi˚_t
 
dev
, 
NvU8
 
ˇ∑bûôy
)

227 
NvU16
 
°©us
;

228 
NvU8
 
ˇp_±r
, 
ˇp_id
;

230 
°©us
 = 
	`pci_ªad_c⁄fig
(
dev
, 
PCIR_STATUS
, 2);

231 
°©us
 &
PCIM_STATUS_CAPPRESENT
;

232 i‡(!
°©us
)

233 
Áûed
;

235 
	`pci_gë_˛ass
(
dev
)) {

236 
PCIC_DISPLAY
:

237 
PCIC_BRIDGE
:

238 
ˇp_±r
 = 
	`pci_ªad_c⁄fig
(
dev
, 
PCIR_CAP_PTR
, 1);

241 
Áûed
;

245 
ˇp_±r
 &= 0xfc;

246 
ˇp_id
 = 
	`pci_ªad_c⁄fig
(
dev
, 
ˇp_±r
 + 
PCIR_CAP_LIST_ID
, 1);

247 i‡(
ˇp_id
 =
ˇ∑bûôy
) {

248  
ˇp_±r
;

250 
ˇp_±r
 = 
	`pci_ªad_c⁄fig
(
dev
, c≠_±∏+ 
PCIR_CAP_LIST_NEXT
, 1);

251 } 
ˇp_±r
 && 
ˇp_id
 != 0xff);

253 
Áûed
:

255 
	}
}

257 
	$nvidü_pci_©èch
(
devi˚_t
 
dev
)

259 
°©us
;

260 
nvidü_so·c
 *
sc
;

261 
NvU16
 
w‹d
, 
i
, 
j
;

262 
NvU32
 
BAR_low
, 
ªq
;

263 
NvU64
 
BAR_high
;

264 
nvidü_°ack_t
 *
•
;

266 i‡(
	`devi˚_gë_unô
(
dev
Ë>
NV_MAX_DEVICES
) {

267 
	`devi˚_¥ötf
(
dev
, "NVRM: maximum deviceÇumberÉxceeded.\n");

268  
ENXIO
;

271 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

272 
	`bzîo
(
sc
, (
nvidü_so·c_t
));

274 
sc
->
nv_°©e
 = 
	`mÆloc
((
nv_°©e_t
), 
M_NVIDIA
, 
M_WAITOK
 | 
M_ZERO
);

275 i‡(
sc
->
nv_°©e
 =
NULL
)

276  
ENOMEM
;

278 
	`pci_íabÀ_busma°î
(
dev
);

279 
w‹d
 = 
	`pci_ªad_c⁄fig
(
dev
, 
PCIR_COMMAND
, 2);

281 i‡((
w‹d
 & 
PCIM_CMD_BUSMASTEREN
) == 0) {

282 
	`devi˚_¥ötf
(
dev
, "NVRM: PCI busmasterÉnable failed.\n");

283  
ENXIO
;

286 
	`pci_íabÀ_io
(
dev
, 
SYS_RES_MEMORY
);

287 
w‹d
 = 
	`pci_ªad_c⁄fig
(
dev
, 
PCIR_COMMAND
, 2);

289 i‡((
w‹d
 & 
PCIM_CMD_MEMEN
) == 0) {

290 
	`devi˚_¥ötf
(
dev
, "NVRM: PCI memoryÉnable failed.\n");

291  
ENXIO
;

294 
i
 = 0, 
j
 = 0; i < 
NVRM_PCICFG_NUM_BARS
 && j < 
NV_GPU_NUM_BARS
; i++) {

295 
NvU8
 
off£t
 = 
	`NVRM_PCICFG_BAR_OFFSET
(
i
);

296 
	`os_pci_ªad_dw‹d
(
dev
, 
off£t
, &
BAR_low
);

297 
	`os_pci_wrôe_dw‹d
(
dev
, 
off£t
, 0xffffffff);

298 
	`os_pci_ªad_dw‹d
(
dev
, 
off£t
, &
ªq
);

299 i‡((
ªq
 !0Ë && (ªq & 
NVRM_PCICFG_BAR_REQTYPE_MASK
)

300 =
NVRM_PCICFG_BAR_REQTYPE_MEMORY
) {

301 
sc
->
nv_°©e
->
b¨s
[
j
].
off£t
 = offset;

302 
sc
->
BAR_rids
[
j
] = 
off£t
;

303 
sc
->
nv_°©e
->
b¨s
[
j
].
bus_addªss
 = 
BAR_low
 & 
NVRM_PCICFG_BAR_ADDR_MASK
;

304 i‡((
ªq
 & 
NVRM_PCICFG_BAR_MEMTYPE_MASK
Ë=
NVRM_PCICFG_BAR_MEMTYPE_64BIT
) {

305 
	`os_pci_ªad_dw‹d
(
dev
, 
off£t
 + 4, (
NvU32
 *)&
BAR_high
);

306 
sc
->
nv_°©e
->
b¨s
[
j
].
bus_addªss
 |(
BAR_high
 << 32);

307 
i
++;

309 
j
++;

311 
	`os_pci_wrôe_dw‹d
(
dev
, 
off£t
, 
BAR_low
);

314 
sc
->
úq_rid
 = 0;

315 
sc
->
i›_rid
 = 0;

317 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

318 i‡(
•
 =
NULL
) {

319 
	`‰ì
(
sc
->
nv_°©e
, 
M_NVIDIA
);

320  
ENOMEM
;

323 
sc
->
©èch_•
 = 
•
;

325 
°©us
 = 
	`nvidü_Æloc_h¨dw¨e
(
dev
);

326 i‡(
°©us
) {

327 
	`devi˚_¥ötf
(
dev
, "NVRM: NVIDIA hardwareálloc failed.\n");

328 
Áû
;

331 
°©us
 = 
	`nvidü_©èch
(
dev
);

332 i‡(
°©us
) {

333 
	`devi˚_¥ötf
(
dev
, "NVRM: NVIDIA driveráttach failed.\n");

334 
Áû
;

337 
°©us
 = 
	`nvidü_pci_£tup_öå
(
dev
);

338 i‡(
°©us
) {

339 
	`devi˚_¥ötf
(
dev
, "NVRM: NVIDIA driver interrupt setup failed.\n");

340 
	`nvidü_dëach
(
dev
);

341 
Áû
;

344 i‡(!
	`rm_öô_¥iv©e_°©e
(
•
, 
sc
->
nv_°©e
)) {

345 
	`nvidü_pci_ã¨down_öå
(
dev
);

346 
	`devi˚_¥ötf
(
dev
, "NVRM:Ñm_init_private_state() failed.\n");

347 
	`nvidü_dëach
(
dev
);

348 
°©us
 = 
ENOMEM
;

349 
Áû
;

352 i‡(!
	`nvidü_lock_öô_locks
(
•
, 
sc
->
nv_°©e
)) {

353 
	`rm_‰ì_¥iv©e_°©e
(
•
, 
sc
->
nv_°©e
);

354 
	`nvidü_pci_ã¨down_öå
(
dev
);

355 
	`nvidü_dëach
(
dev
);

356 
°©us
 = 
ENOMEM
;

357 
Áû
;

360 
	`ˇŒout_öô
(&
sc
->
timî
, 
CALLOUT_MPSAFE
);

361 
	`sx_öô
(&
sc
->
≠i_sx
, "dev.api_sx");

365 
Áû
:

366 
	`nvidü_‰ì_h¨dw¨e
(
dev
);

368 
sc
->
©èch_•
 = 
NULL
;

369 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

371 
	`‰ì
(
sc
->
nv_°©e
, 
M_NVIDIA
);

373  
°©us
;

374 
	}
}

376 
	$nvidü_pci_dëach
(
devi˚_t
 
dev
)

378 
°©us
;

379 
nvidü_°ack_t
 *
•
;

380 
nvidü_so·c
 *
sc
;

381 
nv_°©e_t
 *
nv
;

388 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

389 
nv
 = 
sc
->
nv_°©e
;

391 
	`nv_lock_≠i
(
nv
);

393 i‡(
sc
->
ªf˙t
 != 0) {

394 
	`nv_u∆ock_≠i
(
nv
);

395  
EBUSY
;

398 
	`nv_u∆ock_≠i
(
nv
);

399 
	`sx_de°roy
(&
sc
->
≠i_sx
);

401 
°©us
 = 
	`nvidü_pci_ã¨down_öå
(
dev
);

402 i‡(
°©us
)

403 
Áû
;

405 
°©us
 = 
	`nvidü_dëach
(
dev
);

406 i‡(
°©us
) {

407 
	`devi˚_¥ötf
(
dev
, "NVRM: NVIDIA driver detach failed.\n");

408 
Áû
;

411 
•
 = 
sc
->
©èch_•
;

413 
	`nvidü_lock_de°roy_locks
(
•
, 
sc
->
nv_°©e
);

415 
	`rm_‰ì_¥iv©e_°©e
(
•
, 
sc
->
nv_°©e
);

416 
	`nvidü_‰ì_h¨dw¨e
(
dev
);

418 
sc
->
©èch_•
 = 
NULL
;

419 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

421 
	`‰ì
(
sc
->
nv_°©e
, 
M_NVIDIA
);

423 
Áû
:

425  
°©us
;

426 
	}
}

428 
devi˚_mëhod_t
 
	gnvidü_pci_mëhods
[] = {

429 
DEVMETHOD
–
devi˚_idítify
, 
nvidü_pci_idítify
 ),

430 
DEVMETHOD
–
devi˚_¥obe
, 
nvidü_pci_¥obe
 ),

431 
DEVMETHOD
–
devi˚_©èch
, 
nvidü_pci_©èch
 ),

432 
DEVMETHOD
–
devi˚_dëach
, 
nvidü_pci_dëach
 ),

433 #ifde‡
NV_SUPPORT_ACPI_PM


434 
DEVMETHOD
–
devi˚_su•íd
, 
nvidü_su•íd
 ),

435 
DEVMETHOD
–
devi˚_ªsume
, 
nvidü_ªsume
 ),

440 
drivî_t
 
	gnvidü_pci_drivî
 = {

442 
nvidü_pci_mëhods
,

443 (
nvidü_so·c
)

446 
DRIVER_MODULE
(
nvidü
, 
vg≠ci
, 
nvidü_pci_drivî
, 
nvidü_dev˛ass
, 
nvidü_modevít
, 0);

447 
MODULE_VERSION
(
nvidü
, 1);

449 
MODULE_DEPEND
(
nvidü
, 
mem
, 1, 1, 1);

450 
MODULE_DEPEND
(
nvidü
, 
io
, 1, 1, 1);

452 #ifde‡
NV_SUPPORT_LINUX_COMPAT


453 
MODULE_DEPEND
(
nvidü
, 
löux
, 1, 1, 1);

	@src/nvidia/nvidia_subr.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

16 #i‡
deföed
(
NVCPU_X86
Ë&& deföed(
NV_USE_OS_VM86_INT10CALL
)

17 
	~<machöe/vm86.h
>

20 
uma_z⁄e_t
 
	gnvidü_°ack_t_z⁄e
;

21 
nvidü_°ack_t
 *
	g__nvidü_öô_•
 = 
NULL
;

23 
dev˛ass_t
 
	gnvidü_dev˛ass
;

24 
nv_°©e_t
 
	gnvidü_˘l_°©e
;

26 
	$nvidü_©èch
(
devi˚_t
 
dev
)

28 
NV_STATUS
 
°©us
;

29 
NvU32
 
i
;

30 
nvidü_so·c
 *
sc
;

31 
nv_°©e_t
 *
nv
;

33 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

34 
nv
 = 
sc
->
nv_°©e
;

36 
nv
->
os_°©e
 = 
sc
;

37 
nv
->
Êags
 = 0;

38 
nv
->
pci_öfo
.
domaö
 = 
	`pci_gë_domaö
(
dev
);

39 
nv
->
pci_öfo
.
bus
 = 
	`pci_gë_bus
(
dev
);

40 
nv
->
pci_öfo
.
¶Ÿ
 = 
	`pci_gë_¶Ÿ
(
dev
);

41 
nv
->
pci_öfo
.
víd‹_id
 = 
	`pci_gë_víd‹
(
dev
);

42 
nv
->
pci_öfo
.
devi˚_id
 = 
	`pci_gë_devi˚
(
dev
);

43 
nv
->
h™dÀ
 = 
dev
;

45 
i
 = 0; i < 
NV_GPU_NUM_BARS
; i++) {

46 i‡(
sc
->
BAR_ªcs
[
i
] !
NULL
) {

47 
nv
->
b¨s
[
i
].
˝u_addªss
 = 
	`rm™_gë_°¨t
(
sc
->
BAR_ªcs
[i]);

48 
nv
->
b¨s
[
i
].
°øµed_size
 = 
	`rm™_gë_size
(
sc
->
BAR_ªcs
[i]);

49 
nv
->
b¨s
[
i
].
size
 =Çv->b¨s[i].
°øµed_size
;

53 
nv
->
fb
 = &nv->
b¨s
[
NV_GPU_BAR_INDEX_FB
];

54 
nv
->
ªgs
 = &nv->
b¨s
[
NV_GPU_BAR_INDEX_REGS
];

56 
	`pci_íabÀ_io
(
dev
, 
SYS_RES_MEMORY
);

58 i‡((
	`rm_is_suµ‹ãd_devi˚
(
sc
->
©èch_•
, 
nv
)Ë!
NV_OK
)

59  
ENXIO
;

61 
i
 = 0; i < 
NV_GPU_NUM_BARS
; i++) {

62 i‡(
sc
->
BAR_ªcs
[
i
] !
NULL
) {

63 
sc
->
BAR_sg_li°s
[
i
] = 
	`sgli°_Æloc
(1, 
M_WAITOK
);

64 i‡(!
sc
->
BAR_sg_li°s
[
i
])

65 
Áûed
;

67 
	`sgli°_≠≥nd_phys
(
sc
->
BAR_sg_li°s
[
i
],

68 
nv
->
b¨s
[
i
].
˝u_addªss
,Çv->b¨s[i].
size
);

70 
sc
->
BAR_obje˘s
[
i
] = 
	`NV_VM_PAGER_ALLOCATE
(
OBJT_SG
,

71 
sc
->
BAR_sg_li°s
[
i
],

72 
nv
->
b¨s
[
i
].
size
, (
VM_PROT_READ
 | 
VM_PROT_WRITE
),

73 0, 
NULL
);

74 i‡(!
sc
->
BAR_obje˘s
[
i
])

75 
Áûed
;

77 
	`VM_OBJECT_WLOCK
(
sc
->
BAR_obje˘s
[
i
]);

78 
i
) {

79 
NV_GPU_BAR_INDEX_FB
:

80 
	`vm_obje˘_£t_mem©å
(
sc
->
BAR_obje˘s
[
i
],

81 
VM_MEMATTR_WRITE_COMBINING
);

83 
NV_GPU_BAR_INDEX_REGS
:

85 
	`vm_obje˘_£t_mem©å
(
sc
->
BAR_obje˘s
[
i
],

86 
VM_MEMATTR_UNCACHEABLE
);

89 
	`VM_OBJECT_WUNLOCK
(
sc
->
BAR_obje˘s
[
i
]);

93 
sc
->
dma_mask
 = 0xffffffffULL;

95 i‡((
°©us
 = 
	`nvidü_dev_©èch
(
sc
)) != 0)

96  
°©us
;

98 i‡((
°©us
 = 
	`nvidü_˘l_©èch
()) != 0)

99  
°©us
;

101 
nv
->
öãºu±_löe
 = 
	`rm™_gë_°¨t
(
sc
->
úq
);

103 
	`nv_sys˘l_öô
(
nv
);

107 
Áûed
:

108 
i
 = 0; i < 
NV_GPU_NUM_BARS
; i++) {

109 i‡(
sc
->
BAR_ªcs
[
i
] !
NULL
) {

110 i‡(
sc
->
BAR_obje˘s
[
i
])

111 
	`NV_VM_OBJECT_DEALLOCATE
(
sc
->
BAR_obje˘s
[
i
]);

112 i‡(
sc
->
BAR_sg_li°s
[
i
])

113 
	`NV_SGLIST_FREE
(
sc
->
BAR_sg_li°s
[
i
]);

117  
ENOMEM
;

118 
	}
}

120 
	$nvidü_dëach
(
devi˚_t
 
dev
)

122 
°©us
;

123 
nvidü_so·c
 *
sc
;

124 
uöt32_t
 
i
;

126 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

127 
	`nv_sys˘l_exô
(
sc
->
nv_°©e
);

129 
°©us
 = 
	`nvidü_dev_dëach
(
sc
);

130 i‡(
°©us
) {

131 
	`devi˚_¥ötf
(
dev
, "NVRM: NVIDIA driver DEV detach failed.\n");

132 
Áûed
;

135 
°©us
 = 
	`nvidü_˘l_dëach
();

136 i‡(
°©us
) {

137 
	`devi˚_¥ötf
(
dev
, "NVRM: NVIDIA driver CTL detach failed.\n");

138 
Áûed
;

141 
i
 = 0; i < 
NV_GPU_NUM_BARS
; i++) {

142 i‡(
sc
->
BAR_ªcs
[
i
] !
NULL
) {

143 i‡(
sc
->
BAR_obje˘s
[
i
])

144 
	`NV_VM_OBJECT_DEALLOCATE
(
sc
->
BAR_obje˘s
[
i
]);

145 i‡(
sc
->
BAR_sg_li°s
[
i
])

146 
	`NV_SGLIST_FREE
(
sc
->
BAR_sg_li°s
[
i
]);

150 
Áûed
:

152  
°©us
;

153 
	}
}

156 #ifde‡
NV_SUPPORT_ACPI_PM


157 
	$nvidü_su•íd
(
devi˚_t
 
dev
)

159 
nvidü_°ack_t
 *
•
;

160 
nvidü_so·c
 *
sc
;

161 
nv_°©e_t
 *
nv
;

162 
°©us
;

165 i‡(
	`dev˛ass_gë_so·c
(
	`dev˛ass_föd
("a˝i"), 0Ë=
NULL
)

166  
ENODEV
;

168 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

169 i‡(
•
 =
NULL
)

170  
ENOMEM
;

172 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

173 
nv
 = 
sc
->
nv_°©e
;

175 
	`nvidü_mode£t_su•íd
(
nv
->
gpu_id
);

177 
	`NV_PCI_CHECK_CONFIG_SPACE
(
•
, 
nv
, 
TRUE
, TRUE, TRUE);

178 
°©us
 = 
	`rm_powî_m™agemít
(
•
, 
nv
, 0, 
NV_PM_ACPI_STANDBY
);

180 
	`nvidü_pci_ßve_c⁄fig_•a˚
(
•
, 
dev
);

182 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

184  (
°©us
 =
NV_OK
Ë? 0 : 
EIO
;

185 
	}
}

187 
	$nvidü_ªsume
(
devi˚_t
 
dev
)

189 
nvidü_°ack_t
 *
•
;

190 
nvidü_so·c
 *
sc
;

191 
nv_°©e_t
 *
nv
;

192 
°©us
;

194 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

195 i‡(
•
 =
NULL
)

196  
ENOMEM
;

198 
	`nvidü_pci_ª°‹e_c⁄fig_•a˚
(
•
, 
dev
);

200 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

201 
nv
 = 
sc
->
nv_°©e
;

203 
	`NV_PCI_CHECK_CONFIG_SPACE
(
•
, 
nv
, 
TRUE
, TRUE, TRUE);

204 
°©us
 = 
	`rm_powî_m™agemít
(
•
, 
nv
, 0, 
NV_PM_ACPI_RESUME
);

206 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

208 i‡(
°©us
 =
NV_OK
)

210 
	`nvidü_mode£t_ªsume
(
nv
->
gpu_id
);

213  (
°©us
 =
NV_OK
Ë? 0 : 
EIO
;

214 
	}
}

218 
	$nvidü_Æloc_h¨dw¨e
(
devi˚_t
 
dev
)

220 
°©us
 = 0;

221 
nvidü_so·c
 *
sc
;

222 
NvU32
 
Êags
, 
i
;

223 
NvU32
 
íabÀ_msi
 = 0;

224 
cou¡
;

225 
nvidü_°ack_t
 *
•
;

227 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

228 i‡(
•
 =
NULL
)

229  
ENOMEM
;

231 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

232 
sc
->
dev
 = dev;

234 
Êags
 = 0;

235 
i
 = 0; i < 
NV_GPU_NUM_BARS
 && 
sc
->
BAR_rids
[i] != 0; i++) {

236 
ªsour˚
 *
ªs
;

237 
ªs
 = 
	`bus_Æloc_ªsour˚_™y
(
dev
, 
SYS_RES_MEMORY
, &
sc
->
BAR_rids
[
i
], 
Êags
);

238 i‡(
ªs
 =
NULL
) {

249 
	`devi˚_¥ötf
(
dev
,

251 
i
, 
sc
->
nv_°©e
->
b¨s
[i].
off£t
);

252 
°©us
 = 
ENXIO
;

253 
Áûed
;

255 
sc
->
BAR_ªcs
[
i
] = 
ªs
;

258 i‡((
	`rm_ªad_ªgi°ry_dw‹d
(
•
, 
NULL
, "NVreg",

259 "E«bÀMSI", &
íabÀ_msi
Ë=
NV_OK
) && (enable_msi != 0)) {

260 
cou¡
 = 
	`pci_msi_cou¡
(
dev
);

261 i‡((
cou¡
 =1Ë&& (
	`pci_Æloc_msi
(
dev
, &count) == 0))

262 
sc
->
úq_rid
 = 1;

264 
Êags
 = 
RF_SHAREABLE
 | 
RF_ACTIVE
;

265 
sc
->
úq
 = 
	`bus_Æloc_ªsour˚_™y
(
dev
, 
SYS_RES_IRQ
, &sc->
úq_rid
, 
Êags
);

266 i‡(
sc
->
úq
 =
NULL
) {

267 
	`devi˚_¥ötf
(
dev
, "NVRM: NVIDIA IRQÑesourceálloc failed.\n");

268 
°©us
 = 
ENXIO
;

269 
Áûed
;

272 
Áûed
:

273 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

274  
°©us
;

275 
	}
}

277 
	$nvidü_‰ì_h¨dw¨e
(
devi˚_t
 
dev
)

279 
nvidü_so·c
 *
sc
;

280 
NvU32
 
i
;

282 
sc
 = 
	`devi˚_gë_so·c
(
dev
);

284 
i
 = 0; i < 
NV_GPU_NUM_BARS
 && 
sc
->
BAR_ªcs
[i] !
NULL
; i++)

285 
	`bus_ªÀa£_ªsour˚
(
dev
, 
SYS_RES_MEMORY
, 
sc
->
BAR_rids
[
i
], sc->
BAR_ªcs
[i]);

286 i‡(
sc
->
úq
 !
NULL
)

287 
	`bus_ªÀa£_ªsour˚
(
dev
, 
SYS_RES_IRQ
, 
sc
->
úq_rid
, sc->
úq
);

288 i‡(
sc
->
úq_rid
 != 0)

289 
	`pci_ªÀa£_msi
(
dev
);

290 i‡(
sc
->
i›
 !
NULL
)

291 
	`bus_ªÀa£_ªsour˚
(
dev
, 
SYS_RES_IOPORT
, 
sc
->
i›_rid
, sc->
i›
);

292 
	}
}

294 
	$nvidü_öå
(*
xsc
)

296 
nvidü_so·c
 *
sc
;

297 
nv_°©e_t
 *
nv
;

298 
NvU32
 
run_bŸtom_hÆf
 = 0;

299 
nvidü_°ack_t
 *
•
;

300 
NvU32
 
Áu…sC›õd
 = 0;

302 
sc
 = (
nvidü_so·c
 *Ë
xsc
;

303 
nv
 = 
sc
->
nv_°©e
;

305 
•
 = 
sc
->•[
NV_DEV_STACK_ISR
];

307 i‡(
•
 =
NULL
)

310 
	`NV_PCI_CHECK_CONFIG_SPACE
(
•
, 
nv
, 
TRUE
, TRUE, 
FALSE
);

311 
	`rm_i§
(
•
, 
nv
, &
run_bŸtom_hÆf
);

313 i‡(
run_bŸtom_hÆf
) {

320 
	`rm_gpu_c›y_mmu_Áu…s
(
•
, 
nv
, &
Áu…sC›õd
);

323 
	`rm_i§_bh
(
•
, 
nv
);

325 
	}
}

327 
	$nvidü_gë_ˇrd_öfo
(*
¨gs
, 
size
)

329 
nv_io˘l_ˇrd_öfo
 *
ci
;

330 
nv_io˘l_rm_≠i_ﬁd_vîsi⁄
 *
av
;

331 
i
;

332 
nvidü_so·c
 *
sc
;

333 
nv_°©e_t
 *
nv
;

335 i‡(
size
 < ((*
ci
Ë* 
NV_MAX_DEVICES
))

336  
EINVAL
;

338 
av
 = 
¨gs
;

339 
av
->
magic
) {

340 
NV_RM_API_OLD_VERSION_MAGIC_OVERRIDE_REQ
:

341 
NV_RM_API_OLD_VERSION_MAGIC_LAX_REQ
:

342 
NV_RM_API_OLD_VERSION_MAGIC_REQ
:

347 
	`nv_¥ötf
(
NV_DBG_ERRORS
,

352 
av
->
maj‹
,áv->
mö‹
,áv->
∑tch
,

353 
NV_VERSION_STRING
);

354  
EINVAL
;

355 
NV_RM_API_OLD_VERSION_MAGIC_IGNORE
:

363  
EINVAL
;

366 
ci
 = 
¨gs
;

367 
	`mem£t
(
ci
, 0, 
size
);

369 
i
 = 0; i < 
NV_MAX_DEVICES
; i++) {

370 
sc
 = 
	`dev˛ass_gë_so·c
(
nvidü_dev˛ass
, 
i
);

371 i‡(!
sc
)

373 
nv
 = 
sc
->
nv_°©e
;

375 
ci
[
i
].
Êags
 = 
NV_IOCTL_CARD_INFO_FLAG_PRESENT
;

376 
ci
[
i
].
pci_öfo
.
domaö
 = 
nv
->pci_info.domain;

377 
ci
[
i
].
pci_öfo
.
bus
 = 
nv
->pci_info.bus;

378 
ci
[
i
].
pci_öfo
.
¶Ÿ
 = 
nv
->pci_info.slot;

379 
ci
[
i
].
pci_öfo
.
víd‹_id
 = 
nv
->pci_info.vendor_id;

380 
ci
[
i
].
pci_öfo
.
devi˚_id
 = 
nv
->pci_info.device_id;

381 
ci
[
i
].
gpu_id
 = 
nv
->gpu_id;

382 
ci
[
i
].
öãºu±_löe
 = 
nv
->interrupt_line;

383 
ci
[
i
].
fb_addªss
 = 
nv
->
fb
->
˝u_addªss
;

384 
ci
[
i
].
fb_size
 = 
nv
->
fb
->
size
;

385 
ci
[
i
].
ªg_addªss
 = 
nv
->
ªgs
->
˝u_addªss
;

386 
ci
[
i
].
ªg_size
 = 
nv
->
ªgs
->
size
;

387 
ci
[
i
].
mö‹_numbî
 = i;

391 
	}
}

393 
	$nvidü_h™dÀ_io˘l
(

394 
nv_°©e_t
 *
nv
,

395 
nvidü_fûï
 *
fûï
,

396 
u_l⁄g
 
cmd
,

397 
ˇddr_t
 
d©a


400 
nvidü_so·c
 *
sc
;

401 
nvidü_°ack_t
 *
•
;

402 *
¨gs
;

403 
nv_io˘l_x„r_t
 *
x„r
 = 
NULL
;

404 
°©us
;

405 
ƒ
, 
size
;

407 
sc
 = 
nv
->
os_°©e
;

408 
•
 = 
sc
->•[
NV_DEV_STACK_API
];

410 
size
 = 
	`__NV_IOC_SIZE
(
cmd
);

411 
ƒ
 = 
	`__NV_IOC_NR
(
cmd
);

413 
¨gs
 = (*)
d©a
;

415 i‡(
ƒ
 =
NV_ESC_IOCTL_XFER_CMD
) {

416 i‡(
	`__NV_IOC_SIZE
(
cmd
Ë!(
nv_io˘l_x„r_t
))

417  
EINVAL
;

419 
x„r
 = 
¨gs
;

420 
size
 = 
x„r
->size;

422 i‡(
size
 > 
NV_ABSOLUTE_MAX_IOCTL_SIZE
)

423  
EINVAL
;

425 
¨gs
 = 
	`mÆloc
(
size
, 
M_NVIDIA
, 
M_WAITOK
);

426 i‡(
¨gs
 =
NULL
)

427  
ENOMEM
;

429 i‡(
	`c›yö
(
	`NvP64_VALUE
(
x„r
->
±r
), 
¨gs
, 
size
) != 0) {

430 
	`‰ì
(
¨gs
, 
M_NVIDIA
);

431  
EFAULT
;

434 
ƒ
 = 
x„r
->
cmd
;

437 
	`NV_PCI_CHECK_CONFIG_SPACE
(
•
, 
nv
, 
TRUE
, TRUE, TRUE);

439 
ƒ
) {

440 
NV_ESC_CHECK_VERSION_STR
:

441 
°©us
 = ((
	`rm_≥rf‹m_vîsi⁄_check
(
•
,

442 
¨gs
, 
size
Ë=
NV_OK
Ë? 0 : 
EINVAL
);

445 
NV_ESC_CARD_INFO
:

446 
°©us
 = 
	`nvidü_gë_ˇrd_öfo
(
¨gs
, 
size
);

450 
°©us
 = ((
	`rm_io˘l
(
•
, 
nv
, 
fûï
, 
ƒ
,

451 
¨gs
, 
size
Ë=
NV_OK
Ë? 0 : 
EINVAL
);

455 i‡(
¨gs
 !(*)
d©a
) {

456 i‡(
	`c›yout
(
¨gs
, 
	`NvP64_VALUE
(
x„r
->
±r
), 
size
) != 0)

457 
°©us
 = 
EFAULT
;

458 
	`‰ì
(
¨gs
, 
M_NVIDIA
);

461  
°©us
;

462 
	}
}

464 
	$nvidü_›í_˘l
(

465 
nv_°©e_t
 *
nv
,

466 
nvidü_fûï
 *
fûï


469 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

471 i‡(
sc
->
ªf˙t
 == 0) {

472 
	`NV_UMA_ZONE_ALLOC_STACK
(
sc
->
•
[
NV_DEV_STACK_API
]);

473 i‡(
sc
->
•
[
NV_DEV_STACK_API
] =
NULL
)

474  
ENOMEM
;

475 
nv
->
Êags
 |(
NV_FLAG_OPEN
 | 
NV_FLAG_CONTROL
);

478 
sc
->
ªf˙t
++;

481 
	}
}

483 
	$nvidü_˛o£_˘l
(

484 
nv_°©e_t
 *
nv
,

485 
nvidü_fûï
 *
fûï


488 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

489 
nvidü_°ack_t
 *
•
;

491 
•
 = 
sc
->•[
NV_DEV_STACK_API
];

492 
	`rm_‰ì_unu£d_˛õ¡s
(
•
, 
nv
, 
fûï
);

494 i‡(--
sc
->
ªf˙t
 == 0) {

495 
	`NV_UMA_ZONE_FREE_STACK
(
sc
->
•
[
NV_DEV_STACK_API
]);

496 
nv
->
Êags
 &~
NV_FLAG_OPEN
;

500 
	}
}

502 
	$nv_dev_‰ì_°acks
(
nvidü_so·c_t
 *
sc
)

504 
NvU32
 
i
;

505 
i
 = 0; i < 
NV_DEV_STACK_COUNT
; i++)

507 i‡(
sc
->
•
[
i
])

508 
	`NV_UMA_ZONE_FREE_STACK
(
sc
->
•
[
i
]);

510 
	}
}

512 
	$nv_dev_Æloc_°acks
(
nvidü_so·c_t
 *
sc
)

514 
NvU32
 
i
;

515 
i
 = 0; i < 
NV_DEV_STACK_COUNT
; i++)

517 
	`NV_UMA_ZONE_ALLOC_STACK
(
sc
->
•
[
i
]);

518 i‡(
sc
->
•
[
i
] =
NULL
)

520 
	`nv_dev_‰ì_°acks
(
sc
);

521  
ENOMEM
;

525 
	}
}

527 
nv_°©e_t
 *
	$nvidü_föd_°©e
(
NvU32
 
gpu_id
)

529 
i
;

530 
i
 = 0; i < 
NV_MAX_DEVICES
; i++) {

531 
nv_°©e_t
 *
nv
;

532 
nvidü_so·c
 *
sc
 = 
	`dev˛ass_gë_so·c
(
nvidü_dev˛ass
, 
i
);

533 i‡(
sc
 =
NULL
) {

536 
nv
 = 
sc
->
nv_°©e
;

538 i‡(
nv
->
gpu_id
 == gpu_id) {

539  
nv
;

543  
NULL
;

544 
	}
}

546 
	$nvidü_›í_dev
(

547 
nv_°©e_t
 *
nv
,

548 
nvidü_fûï
 *
fûï


551 
	`¥ötf
("nvidia_open_dev:\n");

552 
°©us
 = 
ENOMEM
;

553 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

554 
nvidü_°ack_t
 *
•
 = 
NULL
;

556 i‡(
sc
->
ªf˙t
 == 0) {

557 
°©us
 = 
	`nv_dev_Æloc_°acks
(
sc
);

558 i‡(
°©us
)

559 
Áûed
;

562 
•
 = 
sc
->•[
NV_DEV_STACK_API
];

563 
	`NV_PCI_CHECK_CONFIG_SPACE
(
•
, 
nv
, 
TRUE
, TRUE, TRUE);

565 i‡(
sc
->
ªf˙t
 == 0) {

566 i‡(!
	`rm_öô_ad≠ãr
(
•
, 
nv
)) {

567 
	`devi˚_¥ötf
(
sc
->
dev
, "NVRM:Ñm_init_adapter() failed!\n");

568 
°©us
 = 
EIO
;

569 
Áûed
;

572 i‡(
nv
->
ud
.
size
 != 0) {

573 
sc
->
UD_sg_li°
 = 
	`sgli°_Æloc
(1, 
M_WAITOK
);

574 i‡(!
sc
->
UD_sg_li°
)

575 
Áûed
;

577 
	`sgli°_≠≥nd_phys
(
sc
->
UD_sg_li°
, 
nv
->
ud
.
˝u_addªss
,Çv->ud.
size
);

579 
sc
->
UD_obje˘
 = 
	`NV_VM_PAGER_ALLOCATE
(
OBJT_SG
, sc->
UD_sg_li°
,

580 
nv
->
ud
.
size
, (
VM_PROT_READ
 | 
VM_PROT_WRITE
),

581 0, 
NULL
);

582 i‡(!
sc
->
UD_obje˘
)

583 
Áûed
;

585 
	`VM_OBJECT_WLOCK
(
sc
->
UD_obje˘
);

586 
	`vm_obje˘_£t_mem©å
(
sc
->
UD_obje˘
, 
VM_MEMATTR_UNCACHEABLE
);

587 
	`VM_OBJECT_WUNLOCK
(
sc
->
UD_obje˘
);

590 
nv
->
Êags
 |
NV_FLAG_OPEN
;

593 
sc
->
ªf˙t
++;

597 
Áûed
:

598 i‡(
sc
->
ªf˙t
 == 0) {

599 i‡(
sc
->
UD_obje˘
 !
NULL
)

600 
	`NV_VM_OBJECT_DEALLOCATE
(
sc
->
UD_obje˘
);

601 i‡(
sc
->
UD_sg_li°
 !
NULL
)

602 
	`NV_SGLIST_FREE
(
sc
->
UD_sg_li°
);

604 i‡(
°©us
 !
EIO
)

605 
	`NV_SHUTDOWN_ADAPTER
(
•
, 
nv
);

607 
	`nv_dev_‰ì_°acks
(
sc
);

610 
	`¥ötf
("nvidü_›í_dev:ªtu∫: %d\n", 
°©us
);

611  
°©us
;

612 
	}
}

614 
	$nvidü_›í_dev_kî√l
(

615 
NvU32
 
gpu_id
,

616 
nvidü_°ack_t
 *
•


619 
°©us
;

620 
nv_°©e_t
 *
nv
 = 
	`nvidü_föd_°©e
(
gpu_id
);

622 
	`¥ötf
("nvidia_open_dev_kernel:\n");

623 i‡(
nv
 =
NULL
) {

624 
	`¥ötf
("nvidia_open_dev_kernel: FailedÅo findÅheÇvidia state\n");

625  
EINVAL
;

628 
	`nv_lock_≠i
(
nv
);

629 
°©us
 = 
	`nvidü_›í_dev
(
nv
, 
NULL
 );

630 
	`nv_u∆ock_≠i
(
nv
);

632 
	`¥ötf
("nvidü_›í_dev_kî√l:Çvidü_›í_dev sètu†%d\n", 
°©us
);

633  
°©us
;

634 
	}
}

636 
	$nvidü_˛o£_dev
(

637 
nv_°©e_t
 *
nv
,

638 
nvidü_fûï
 *
fûï


641 
nvidü_so·c
 *
sc
;

642 
nvidü_°ack_t
 *
•
;

644 
sc
 = 
nv
->
os_°©e
;

645 
•
 = 
sc
->•[
NV_DEV_STACK_API
];

647 
	`NV_PCI_CHECK_CONFIG_SPACE
(
•
, 
nv
, 
TRUE
, TRUE, TRUE);

648 i‡(
fûï
 !
NULL
) {

649 
	`rm_‰ì_unu£d_˛õ¡s
(
•
, 
nv
, 
fûï
);

652 i‡(--
sc
->
ªf˙t
 == 0) {

653 i‡(
sc
->
UD_obje˘
 !
NULL
)

654 
	`NV_VM_OBJECT_DEALLOCATE
(
sc
->
UD_obje˘
);

655 i‡(
sc
->
UD_sg_li°
 !
NULL
)

656 
	`NV_SGLIST_FREE
(
sc
->
UD_sg_li°
);

658 
	`NV_SHUTDOWN_ADAPTER
(
•
, 
nv
);

660 
	`nv_dev_‰ì_°acks
(
sc
);

662 
nv
->
Êags
 &~
NV_FLAG_OPEN
;

666 
	}
}

668 
	$nvidü_˛o£_dev_kî√l
(

669 
NvU32
 
gpu_id
,

670 
nvidü_°ack_t
 *
•


673 
nv_°©e_t
 *
nv
 = 
	`nvidü_föd_°©e
(
gpu_id
);

675 i‡(
nv
 =
NULL
) {

679 
	`nv_lock_≠i
(
nv
);

680 
	`nvidü_˛o£_dev
(
nv
, 
NULL
 );

681 
	`nv_u∆ock_≠i
(
nv
);

682 
	}
}

684 
	$nvidü_modevít
(

685 
moduÀ_t
 
mod
,

686 
wh©
,

687 *
¨g


690 
nv_°©e_t
 *
nv
;

691 
nvidü_so·c
 *
sc
;

692 
nvidü_°ack_t
 *
•
;

694 
wh©
) {

695 
MOD_LOAD
:

702 
sc
 = &
nvidü_˘l_sc
;

704 
nvidü_°ack_t_z⁄e
 = 
	`uma_z¸óã
("nvidü_°ack_t", (
nvidü_°ack_t
),

705 
NULL
, NULL, NULL, NULL, 
UMA_ALIGN_PTR
, 0);

706 i‡(
nvidü_°ack_t_z⁄e
 =
NULL
)

707  
ENOMEM
;

709 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

710 i‡(
•
 =
NULL
) {

711 
	`uma_zde°roy
(
nvidü_°ack_t_z⁄e
);

712  
ENOMEM
;

715 
	`bzîo
(
sc
, (
nvidü_so·c_t
));

717 i‡(!
	`rm_öô_rm
(
•
)) {

718 
	`¥ötf
("NVRM:Ñm_init_rm() failed!\n");

719 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

720 
	`uma_zde°roy
(
nvidü_°ack_t_z⁄e
);

721  
EIO
;

724 
__nvidü_öô_•
 = 
•
;

726 i‡(!
	`nvidü_lock_öô_locks
(
•
, &
nvidü_˘l_°©e
)) {

727 
	`rm_shutdown_rm
(
•
);

728 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

729 
	`uma_zde°roy
(
nvidü_°ack_t_z⁄e
);

730  
ENOMEM
;

733 
	`ˇŒout_öô
(&
sc
->
timî
, 
CALLOUT_MPSAFE
);

734 
	`sx_öô
(&
sc
->
≠i_sx
, "ctl.api_sx");

736 
nvidü_˘l_°©e
.
os_°©e
 = 
sc
;

737 
sc
->
nv_°©e
 = (*)&
nvidü_˘l_°©e
;

739 
	`nvidü_sys˘l_öô
();

740 
	`nvidü_löux_öô
();

744 
MOD_UNLOAD
:

750 
nv
 = &
nvidü_˘l_°©e
;

751 
sc
 = 
nv
->
os_°©e
;

753 
	`nv_lock_≠i
(
nv
);

755 i‡(
sc
->
ªf˙t
 != 0) {

756 
	`nv_u∆ock_≠i
(
nv
);

757  
EBUSY
;

760 
	`nv_u∆ock_≠i
(
nv
);

761 
	`sx_de°roy
(&
sc
->
≠i_sx
);

763 
•
 = 
__nvidü_öô_•
;

765 
	`nvidü_lock_de°roy_locks
(
•
, 
nv
);

767 
	`rm_shutdown_rm
(
•
);

769 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

771 
	`nvidü_sys˘l_exô
();

772 
	`nvidü_löux_exô
();

774 
	`uma_zde°roy
(
nvidü_°ack_t_z⁄e
);

783 
	}
}

785 
	$nv_lock_≠i
(
nv_°©e_t
 *
nv
)

787 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

788 
	`sx_xlock
(&
sc
->
≠i_sx
);

789 
	}
}

791 
	$nv_u∆ock_≠i
(
nv_°©e_t
 *
nv
)

793 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

794 
	`sx_xu∆ock
(&
sc
->
≠i_sx
);

795 
	}
}

797 
NV_STATUS
 
NV_API_CALL
 
	$nv_exp‹t_rm_obje˘_to_fd
(

798 
NvH™dÀ
 
hExp‹ãdRmObje˘
,

799 
NvS32
 
fd


802  
NV_ERR_NOT_SUPPORTED
;

803 
	}
}

805 
NV_STATUS
 
NV_API_CALL
 
	$nv_imp‹t_rm_obje˘_‰om_fd
(

806 
NvS32
 
fd
,

807 
NvH™dÀ
 *
pExp‹ãdObje˘


810  
NV_ERR_NOT_SUPPORTED
;

811 
	}
}

813 
NV_API_CALL
 
	$nv_po°_evít
(

814 
nv_°©e_t
 *
nv
,

815 
nv_evít_t
 *
evít
,

816 
NvH™dÀ
 
hObje˘
,

817 
NvU32
 
ödex
,

818 
NvBoﬁ
 
d©a_vÆid


821 
nvidü_fûï
 *
fûï
 = 
evít
->
fûe
;

822 
nvidü_evít
 *
ë
;

824 
	`mtx_lock
(&
fûï
->
evít_mtx
);

826 i‡(
d©a_vÆid
) {

827 
ë
 = 
	`mÆloc
((
nvidü_evít_t
), 
M_NVIDIA
, 
M_NOWAIT
);

828 i‡(
ë
 =
NULL
) {

829 
	`mtx_u∆ock
(&
fûï
->
evít_mtx
);

833 
ë
->
evít
 = *event;

834 
ë
->
evít
.
hObje˘
 = hObject;

835 
ë
->
evít
.
ödex
 = index;

837 
	`STAILQ_INSERT_TAIL
(&
fûï
->
evít_queue
, 
ë
, 
queue
);

840 
fûï
->
evít_≥ndög
 = 
TRUE
;

841 
	`mtx_u∆ock
(&
fûï
->
evít_mtx
);

843 
	`£lwakeup
(&
fûï
->
evít_r£l
);

844 
	}
}

846 
NvS32
 
NV_API_CALL
 
	$nv_gë_evít
(

847 
nv_°©e_t
 *
nv
,

848 *
fûe
,

849 
nv_evít_t
 *
evít
,

850 
NvU32
 *
≥ndög


853 
nvidü_fûï
 *
fûï
 = 
fûe
;

854 
nvidü_evít
 *
ë
;

856 
	`mtx_lock
(&
fûï
->
evít_mtx
);

858 
ë
 = 
	`STAILQ_FIRST
(&
fûï
->
evít_queue
);

859 i‡(
ë
 =
NULL
) {

860 
	`mtx_u∆ock
(&
fûï
->
evít_mtx
);

861  
NV_ERR_GENERIC
;

864 *
evít
 = 
ë
->event;

866 
	`STAILQ_REMOVE
(&
fûï
->
evít_queue
, 
ë
, 
nvidü_evít
, 
queue
);

868 *
≥ndög
 = !
	`STAILQ_EMPTY
(&
fûï
->
evít_queue
);

870 
	`mtx_u∆ock
(&
fûï
->
evít_mtx
);

872 
	`‰ì
(
ë
, 
M_NVIDIA
);

874  
NV_OK
;

875 
	}
}

877 * 
NV_API_CALL
 
	$nv_Æloc_kî√l_m≠pög
(

878 
nv_°©e_t
 *
nv
,

879 *
pAŒocPriv©e
,

880 
NvU64
 
∑geIndex
,

881 
NvU32
 
∑geOff£t
,

882 
NvU64
 
size
,

883 **
µPriv©e


886 
nvidü_Æloc
 *
©
 = 
pAŒocPriv©e
;

887 
vm_off£t_t
 
vútuÆ_addªss
;

888 
°©us
;

890 i‡(
©
->
Æloc_ty≥_c⁄tiguous
) {

891 *
µPriv©e
 = 
NULL
;

892  (*)(
NvUPå
)(
©
->
±e_¨øy
[0].
vútuÆ_addªss
 +

893 (
∑geIndex
 * 
PAGE_SIZE
Ë+ 
∑geOff£t
);

896 
size
 = (sizê+ 
PAGE_MASK
) & ~PAGE_MASK;

898 
	`vm_obje˘_ª„ªn˚
(
©
->
obje˘
);

899 
vútuÆ_addªss
 = 
	`vm_m≠_mö
(
kî√l_m≠
);

901 
°©us
 = 
	`vm_m≠_föd
(
kî√l_m≠
, 
©
->
obje˘
, (
∑geIndex
 * 
PAGE_SIZE
),

902 &
vútuÆ_addªss
, 
size
, 0, 
VMFS_ANY_SPACE
,

903 (
VM_PROT_READ
 | 
VM_PROT_WRITE
),

904 (
VM_PROT_READ
 | 
VM_PROT_WRITE
), 0);

905 i‡(
°©us
 !
KERN_SUCCESS
) {

906 
	`NV_VM_OBJECT_DEALLOCATE
(
©
->
obje˘
);

907  
NULL
;

910 
°©us
 = 
	`vm_m≠_wúe
(
kî√l_m≠
, 
vútuÆ_addªss
,

911 (
vútuÆ_addªss
 + 
size
),

912 (
VM_MAP_WIRE_SYSTEM
 | 
VM_MAP_WIRE_NOHOLES
));

913 i‡(
°©us
 !
KERN_SUCCESS
) {

914 
	`vm_m≠_ªmove
(
kî√l_m≠
, 
vútuÆ_addªss
,

915 (
vútuÆ_addªss
 + 
size
));

916  
NULL
;

919 *
µPriv©e
 = (*)(
NvUPå
)
size
;

921  (*)(
vútuÆ_addªss
 + 
∑geOff£t
);

922 
	}
}

924 
NV_STATUS
 
NV_API_CALL
 
	$nv_‰ì_kî√l_m≠pög
(

925 
nv_°©e_t
 *
nv
,

926 *
pAŒocPriv©e
,

927 *
addªss
,

928 *
pPriv©e


931 
vm_off£t_t
 
vútuÆ_addªss
;

932 
uöt32_t
 
size
;

934 i‡(
pPriv©e
 !
NULL
) {

935 
vútuÆ_addªss
 = (
vm_off£t_t
)
addªss
 & ~
PAGE_MASK
;

936 
size
 = (
NvUPå
)
pPriv©e
;

937 
	`vm_m≠_ªmove
(
kî√l_m≠
, 
vútuÆ_addªss
,

938 (
vútuÆ_addªss
 + 
size
));

941  
NV_OK
;

942 
	}
}

944 
nvidü_fûï_t
* 
	$nv_gë_fûe_¥iv©e
(
NvU32
 
fd
, 
nv_°©e_t
 *
nv
)

946 
fûe
 *
pFûe
 = 
NULL
;

947 
NV_STATUS
 
°©us
 = 
EINVAL
;

948 
nvidü_fûï_t
 *
nvÂ
 = 
NULL
;

949 
cdev_¥ivd©a
 *
p
;

951 #i‡
__FªeBSD_vîsi⁄
 >= 1000053

952 
ˇp_rights_t
 
rights
;

954 
thªad
 *
td
;

956 
td
 = 
cuπhªad
;

958 
°©us
 = 
	`fgë
(
td
, 
fd
, 
	`ˇp_rights_öô
(&
rights
, 
CAP_READ
), &
pFûe
);

959 i‡(
°©us
 != 0)

960  
NULL
;

962 
p
 = 
pFûe
->
f_cdev¥iv
;

963 if(!
p
)

964 
d⁄e
;

966 i‡(
	`NV_IS_CTL_DEVICE
(
nv
))

968 i‡(
p
->
cdpd_då
 !
nvidü_˘l_dt‹
)

969 
d⁄e
;

973 i‡(
p
->
cdpd_då
 !
nvidü_dev_dt‹
)

974 
d⁄e
;

977 
nvÂ
 = (
nvidü_fûï_t
*)
p
->
cdpd_d©a
;

979 
d⁄e
:

989 
	`fdr›
(
pFûe
, 
td
);

991  
nvÂ
;

992 
	}
}

994 
NV_STATUS
 
NV_API_CALL
 
	$nv_add_m≠pög_c⁄ãxt_to_fûe
(

995 
nv_°©e_t
 *
nv
,

996 
nv_u£rm≠_ac˚ss_∑øms_t
* 
nvu≠
,

997 
NvU32
 
¥Ÿ
,

998 *
pAŒocPriv
,

999 
NvU64
 
∑geIndex
,

1000 
NvU32
 
fd


1003 
nv_Æloc_m≠pög_c⁄ãxt_t
 *
nvamc
 = 
NULL
;

1004 
nvidü_fûï_t
 *
nvÂ
 = 
NULL
;

1007 
nvÂ
 = 
	`nv_gë_fûe_¥iv©e
(
fd
, 
nv
);

1008 i‡(
nvÂ
 =
NULL
)

1009  
NV_ERR_INVALID_ARGUMENT
;

1011 
nvamc
 = &
nvÂ
->
mm≠_c⁄ãxt
;

1013 i‡(
nvamc
->
vÆid
)

1014  
NV_ERR_STATE_IN_USE
;

1016 i‡(
	`NV_IS_CTL_DEVICE
(
nv
))

1018 
nvamc
->
Æloc
 = 
pAŒocPriv
;

1019 
nvamc
->
∑ge_ödex
 = 
∑geIndex
;

1023 
nvamc
->
mm≠_°¨t
 = 
nvu≠
->mmap_start;

1024 
nvamc
->
mm≠_size
 = 
nvu≠
->mmap_size;

1025 
nvamc
->
ac˚ss_°¨t
 = 
nvu≠
->access_start;

1026 
nvamc
->
ac˚ss_size
 = 
nvu≠
->access_size;

1027 
nvamc
->
ªm≠_¥Ÿ_exåa
 = 
nvu≠
->remap_prot_extra;

1030 
nvamc
->
¥Ÿ
 =Örot;

1031 
nvamc
->
vÆid
 = 
NV_TRUE
;

1033  
NV_OK
;

1034 
	}
}

1036 
NV_STATUS
 
NV_API_CALL
 
	$nv_Æloc_u£r_m≠pög
(

1037 
nv_°©e_t
 *
nv
,

1038 *
pAŒocPriv©e
,

1039 
NvU64
 
∑geIndex
,

1040 
NvU32
 
∑geOff£t
,

1041 
NvU64
 
size
,

1042 
NvU32
 
¥Ÿe˘
,

1043 
NvU64
 *
pU£rAddªss
,

1044 **
µPriv©e


1047 
nvidü_Æloc
 *
©
 = 
pAŒocPriv©e
;

1049 i‡(
©
->
Æloc_ty≥_c⁄tiguous
)

1050 *
pU£rAddªss
 = (
©
->
±e_¨øy
[0].
physiˇl_addªss
 + (
∑geIndex
 * 
PAGE_SIZE
Ë+ 
∑geOff£t
);

1052 *
pU£rAddªss
 = (
©
->
±e_¨øy
[
∑geIndex
].
physiˇl_addªss
 + 
∑geOff£t
);

1054  
NV_OK
;

1055 
	}
}

1057 
NV_STATUS
 
NV_API_CALL
 
	$nv_‰ì_u£r_m≠pög
(

1058 
nv_°©e_t
 *
nv
,

1059 *
pAŒocPriv©e
,

1060 
NvU64
 
u£rAddªss
,

1061 *
pPriv©e


1064  
NV_OK
;

1065 
	}
}

1067 
NvS32
 
	$nv_Æloc_c⁄tig_∑ges
(

1068 
nv_°©e_t
 *
nv
,

1069 
NvU32
 
cou¡
,

1070 
NvU32
 
ˇche_ty≥
,

1071 
NvBoﬁ
 
zîo
,

1072 
NvU64
 *
±e_¨øy
,

1073 **
¥iv©e


1076 
nvidü_Æloc
 *
©
;

1077 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1078 
vm_mem©å_t
 
©å
;

1079 
vm_off£t_t
 
addªss
;

1080 
NvU32
 
size
 = (
cou¡
 * 
PAGE_SIZE
);

1081 
Êags
 = (
zîo
 ? 
M_ZERO
 : 0);

1082 
°©us
;

1084 
ˇche_ty≥
) {

1085 
NV_MEMORY_UNCACHED
:

1086 
©å
 = 
VM_MEMATTR_UNCACHEABLE
;

1088 
NV_MEMORY_DEFAULT
:

1089 
NV_MEMORY_CACHED
:

1090 
©å
 = 
VM_MEMATTR_WRITE_BACK
;

1092 
NV_MEMORY_UNCACHED_WEAK
:

1093 
©å
 = 
VM_MEMATTR_WEAK_UNCACHEABLE
;

1095 
NV_MEMORY_WRITECOMBINED
:

1096 
©å
 = 
VM_MEMATTR_WRITE_COMBINING
;

1099 
	`nv_¥ötf
(
NV_DBG_ERRORS
,

1101  
EINVAL
;

1104 
©
 = 
	`mÆloc
((
nvidü_Æloc_t
), 
M_NVIDIA
, (
M_WAITOK
 | 
M_ZERO
));

1105 i‡(!
©
)

1106  
ENOMEM
;

1108 
©
->
size
 = size;

1109 
©
->
Æloc_ty≥_c⁄tiguous
 = 1;

1110 
©
->
©å
 =áttr;

1112 
©
->
±e_¨øy
 = 
	`mÆloc
((
nvidü_±e_t
), 
M_NVIDIA
,

1113 (
M_WAITOK
 | 
M_ZERO
));

1114 i‡(!
©
->
±e_¨øy
) {

1115 
	`‰ì
(
©
, 
M_NVIDIA
);

1116  
ENOMEM
;

1119 
addªss
 = 
	`NV_KMEM_ALLOC_CONTIG
(
size
, 
Êags
, 0,

1120 
sc
->
dma_mask
, 
PAGE_SIZE
, 0, 
©å
);

1121 i‡(!
addªss
) {

1122 
°©us
 = 
ENOMEM
;

1123 
Áûed
;

1125 
	`mÆloc_ty≥_Æloˇãd
(
M_NVIDIA
, 
size
);

1127 i‡(
©å
 !
VM_MEMATTR_WRITE_BACK
)

1128 
	`os_Êush_˝u_ˇche
();

1130 
©
->
±e_¨øy
[0].
vútuÆ_addªss
 = 
addªss
;

1131 
©
->
±e_¨øy
[0].
physiˇl_addªss
 = (
NvU64
)
	`vt›hys
(
addªss
);

1133 
©
->
sg_li°
 = 
	`sgli°_Æloc
(1, 
M_WAITOK
);

1134 i‡(!
©
->
sg_li°
) {

1135 
°©us
 = 
ENOMEM
;

1136 
Áûed
;

1139 
±e_¨øy
[0] = 
©
->±e_¨øy[0].
physiˇl_addªss
;

1140 
	`sgli°_≠≥nd_phys
(
©
->
sg_li°
, 
±e_¨øy
[0], 
size
);

1142 
©
->
obje˘
 = 
	`NV_VM_PAGER_ALLOCATE
(
OBJT_SG
,át->
sg_li°
, 
size
,

1143 (
VM_PROT_READ
 | 
VM_PROT_WRITE
), 0, 
NULL
);

1144 i‡(!
©
->
obje˘
) {

1145 
°©us
 = 
ENOMEM
;

1146 
Áûed
;

1149 
	`VM_OBJECT_WLOCK
(
©
->
obje˘
);

1150 
	`vm_obje˘_£t_mem©å
(
©
->
obje˘
, 
©å
);

1151 
	`VM_OBJECT_WUNLOCK
(
©
->
obje˘
);

1153 *
¥iv©e
 = 
©
;

1154 
	`SLIST_INSERT_HEAD
(&
sc
->
Æloc_li°
, 
©
, 
li°
);

1158 
Áûed
:

1159 i‡(
©
->
obje˘
)

1160 
	`NV_VM_OBJECT_DEALLOCATE
(
©
->
obje˘
);

1161 i‡(
©
->
sg_li°
)

1162 
	`NV_SGLIST_FREE
(
©
->
sg_li°
);

1164 i‡(
©å
 !
VM_MEMATTR_WRITE_BACK
)

1165 
	`os_Êush_˝u_ˇche
();

1167 i‡(
©
->
±e_¨øy
[0].
vútuÆ_addªss
 !
NULL
) {

1168 
	`NV_KMEM_FREE
(
©
->
±e_¨øy
[0].
vútuÆ_addªss
,át->
size
);

1169 
	`mÆloc_ty≥_‰ìd
(
M_NVIDIA
, 
©
->
size
);

1172 
	`‰ì
(
©
->
±e_¨øy
, 
M_NVIDIA
);

1173 
	`‰ì
(
©
, 
M_NVIDIA
);

1175  
°©us
;

1176 
	}
}

1178 
NvS32
 
	$nv_‰ì_c⁄tig_∑ges
(

1179 
nv_°©e_t
 *
nv
,

1180 *
¥iv©e


1183 
nvidü_Æloc
 *
©
 = 
¥iv©e
;

1184 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1186 
	`SLIST_REMOVE
(&
sc
->
Æloc_li°
, 
©
, 
nvidü_Æloc
, 
li°
);

1188 
	`NV_VM_OBJECT_DEALLOCATE
(
©
->
obje˘
);

1189 
	`NV_SGLIST_FREE
(
©
->
sg_li°
);

1191 i‡(
©
->
©å
 !
VM_MEMATTR_WRITE_BACK
)

1192 
	`os_Êush_˝u_ˇche
();

1194 
	`NV_KMEM_FREE
(
©
->
±e_¨øy
[0].
vútuÆ_addªss
,át->
size
);

1195 
	`mÆloc_ty≥_‰ìd
(
M_NVIDIA
, 
©
->
size
);

1197 
	`‰ì
(
©
->
±e_¨øy
, 
M_NVIDIA
);

1198 
	`‰ì
(
©
, 
M_NVIDIA
);

1201 
	}
}

1203 
NvS32
 
	$nv_Æloc_sy°em_∑ges
(

1204 
nv_°©e_t
 *
nv
,

1205 
NvU32
 
cou¡
,

1206 
NvU32
 
ˇche_ty≥
,

1207 
NvBoﬁ
 
zîo
,

1208 
NvU64
 *
±e_¨øy
,

1209 **
¥iv©e


1212 
nvidü_Æloc
 *
©
;

1213 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1214 
vm_off£t_t
 
addªss
;

1215 
uöt32_t
 
i
;

1216 
vm_mem©å_t
 
©å
;

1217 
uöt32_t
 
size
 = (
cou¡
 * 
PAGE_SIZE
);

1218 
Êags
 = (
zîo
 ? 
M_ZERO
 : 0);

1219 
°©us
;

1221 
ˇche_ty≥
) {

1222 
NV_MEMORY_UNCACHED
:

1223 
©å
 = 
VM_MEMATTR_UNCACHEABLE
;

1225 
NV_MEMORY_DEFAULT
:

1226 
NV_MEMORY_CACHED
:

1227 
©å
 = 
VM_MEMATTR_WRITE_BACK
;

1229 
NV_MEMORY_UNCACHED_WEAK
:

1230 
©å
 = 
VM_MEMATTR_WEAK_UNCACHEABLE
;

1232 
NV_MEMORY_WRITECOMBINED
:

1233 
©å
 = 
VM_MEMATTR_WRITE_COMBINING
;

1236 
	`nv_¥ötf
(
NV_DBG_ERRORS
,

1238  
EINVAL
;

1241 
©
 = 
	`mÆloc
((
nvidü_Æloc_t
), 
M_NVIDIA
, (
M_WAITOK
 | 
M_ZERO
));

1242 i‡(!
©
)

1243  
ENOMEM
;

1245 
©
->
size
 = size;

1246 
©
->
Æloc_ty≥_c⁄tiguous
 = 0;

1247 
©
->
©å
 =áttr;

1249 
©
->
±e_¨øy
 = 
	`mÆloc
(((
nvidü_±e_t
Ë* 
cou¡
),

1250 
M_NVIDIA
, (
M_WAITOK
 | 
M_ZERO
));

1251 i‡(!
©
->
±e_¨øy
) {

1252 
	`‰ì
(
©
, 
M_NVIDIA
);

1253  
ENOMEM
;

1256 
i
 = 0; i < 
cou¡
; i++) {

1257 
addªss
 = 
	`NV_KMEM_ALLOC_CONTIG
(
PAGE_SIZE
, 
Êags
, 0,

1258 
sc
->
dma_mask
, 
PAGE_SIZE
, 0, 
©å
);

1259 i‡(!
addªss
) {

1260 
°©us
 = 
ENOMEM
;

1261 
Áûed
;

1263 
	`mÆloc_ty≥_Æloˇãd
(
M_NVIDIA
, 
PAGE_SIZE
);

1265 
©
->
±e_¨øy
[
i
].
vútuÆ_addªss
 = 
addªss
;

1266 
©
->
±e_¨øy
[
i
].
physiˇl_addªss
 = (
NvU64
)
	`vt›hys
(
addªss
);

1269 i‡(
©å
 !
VM_MEMATTR_WRITE_BACK
)

1270 
	`os_Êush_˝u_ˇche
();

1272 
©
->
sg_li°
 = 
	`sgli°_Æloc
(
cou¡
, 
M_WAITOK
);

1273 i‡(!
©
->
sg_li°
) {

1274 
°©us
 = 
ENOMEM
;

1275 
Áûed
;

1278 
i
 = 0; i < 
cou¡
; i++) {

1279 
±e_¨øy
[
i
] = 
©
->±e_¨øy[i].
physiˇl_addªss
;

1280 
	`sgli°_≠≥nd_phys
(
©
->
sg_li°
, 
±e_¨øy
[
i
], 
PAGE_SIZE
);

1283 
©
->
obje˘
 = 
	`NV_VM_PAGER_ALLOCATE
(
OBJT_SG
,át->
sg_li°
, 
size
,

1284 (
VM_PROT_READ
 | 
VM_PROT_WRITE
), 0, 
NULL
);

1285 i‡(!
©
->
obje˘
) {

1286 
°©us
 = 
ENOMEM
;

1287 
Áûed
;

1290 
	`VM_OBJECT_WLOCK
(
©
->
obje˘
);

1291 
	`vm_obje˘_£t_mem©å
(
©
->
obje˘
, 
©å
);

1292 
	`VM_OBJECT_WUNLOCK
(
©
->
obje˘
);

1294 *
¥iv©e
 = 
©
;

1295 
	`SLIST_INSERT_HEAD
(&
sc
->
Æloc_li°
, 
©
, 
li°
);

1299 
Áûed
:

1300 i‡(
©
->
obje˘
)

1301 
	`NV_VM_OBJECT_DEALLOCATE
(
©
->
obje˘
);

1302 i‡(
©
->
sg_li°
)

1303 
	`NV_SGLIST_FREE
(
©
->
sg_li°
);

1305 i‡(
©å
 !
VM_MEMATTR_WRITE_BACK
)

1306 
	`os_Êush_˝u_ˇche
();

1308 
i
 = 0; i < 
cou¡
; i++) {

1309 i‡(
©
->
±e_¨øy
[
i
].
vútuÆ_addªss
 == 0)

1311 
	`NV_KMEM_FREE
(
©
->
±e_¨øy
[
i
].
vútuÆ_addªss
, 
PAGE_SIZE
);

1312 
	`mÆloc_ty≥_‰ìd
(
M_NVIDIA
, 
PAGE_SIZE
);

1315 
	`‰ì
(
©
->
±e_¨øy
, 
M_NVIDIA
);

1316 
	`‰ì
(
©
, 
M_NVIDIA
);

1318  
°©us
;

1319 
	}
}

1321 
NvS32
 
	$nv_‰ì_sy°em_∑ges
(

1322 
nv_°©e_t
 *
nv
,

1323 *
¥iv©e


1326 
nvidü_Æloc
 *
©
 = 
¥iv©e
;

1327 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1328 
uöt32_t
 
i
, 
cou¡
;

1330 
cou¡
 = 
©
->
size
 / 
PAGE_SIZE
;

1331 
	`SLIST_REMOVE
(&
sc
->
Æloc_li°
, 
©
, 
nvidü_Æloc
, 
li°
);

1333 
	`NV_VM_OBJECT_DEALLOCATE
(
©
->
obje˘
);

1334 
	`NV_SGLIST_FREE
(
©
->
sg_li°
);

1336 i‡(
©
->
©å
 !
VM_MEMATTR_WRITE_BACK
)

1337 
	`os_Êush_˝u_ˇche
();

1339 
i
 = 0; i < 
cou¡
; i++) {

1340 
	`NV_KMEM_FREE
(
©
->
±e_¨øy
[
i
].
vútuÆ_addªss
, 
PAGE_SIZE
);

1341 
	`mÆloc_ty≥_‰ìd
(
M_NVIDIA
, 
PAGE_SIZE
);

1344 
	`‰ì
(
©
->
±e_¨øy
, 
M_NVIDIA
);

1345 
	`‰ì
(
©
, 
M_NVIDIA
);

1348 
	}
}

1350 
NV_STATUS
 
NV_API_CALL
 
	$nv_Æüs_∑ges
(

1351 
nv_°©e_t
 *
nv
,

1352 
NvU32
 
cou¡
,

1353 
NvU32
 
Æloc_ty≥_c⁄tiguous
,

1354 
NvU32
 
ˇche_ty≥
,

1355 
NvU64
 
gue°_id
,

1356 
NvU64
 *
±e_¨øy
,

1357 **
¥iv_d©a


1360  
NV_ERR_NOT_SUPPORTED
;

1361 
	}
}

1363 
NV_STATUS
 
NV_API_CALL
 
	$nv_Æloc_∑ges
(

1364 
nv_°©e_t
 *
nv
,

1365 
NvU32
 
cou¡
,

1366 
NvBoﬁ
 
Æloc_ty≥_c⁄tiguous
,

1367 
NvU32
 
ˇche_ty≥
,

1368 
NvBoﬁ
 
Æloc_ty≥_zî€d
,

1369 
NvU64
 *
±e_¨øy
,

1370 **
¥iv©e


1373 
NV_STATUS
 
°©us
 = 
NV_OK
;

1374 
NvBoﬁ
 
zîo
 = 
Æloc_ty≥_zî€d
;

1376 i‡(!
Æloc_ty≥_c⁄tiguous
) {

1377 i‡(
	`nv_Æloc_sy°em_∑ges
(
nv
, 
cou¡
, 
ˇche_ty≥
, 
zîo
,

1378 
±e_¨øy
, 
¥iv©e
)) {

1379 
°©us
 = 
NV_ERR_NO_MEMORY
;

1382 i‡(
	`nv_Æloc_c⁄tig_∑ges
(
nv
, 
cou¡
, 
ˇche_ty≥
, 
zîo
,

1383 
±e_¨øy
, 
¥iv©e
)) {

1384 
°©us
 = 
NV_ERR_NO_MEMORY
;

1388  
°©us
;

1389 
	}
}

1391 
NV_STATUS
 
NV_API_CALL
 
	$nv_‰ì_∑ges
(

1392 
nv_°©e_t
 *
nv
,

1393 
NvU32
 
cou¡
,

1394 
NvBoﬁ
 
Æloc_ty≥_c⁄tiguous
,

1395 
NvU32
 
ˇche_ty≥
,

1396 *
¥iv©e


1399 
NV_STATUS
 
°©us
 = 
NV_OK
;

1401 i‡(!
Æloc_ty≥_c⁄tiguous
) {

1402 i‡(
	`nv_‰ì_sy°em_∑ges
(
nv
, 
¥iv©e
))

1403 
°©us
 = 
NV_ERR_GENERIC
;

1405 i‡(
	`nv_‰ì_c⁄tig_∑ges
(
nv
, 
¥iv©e
))

1406 
°©us
 = 
NV_ERR_GENERIC
;

1409  
°©us
;

1410 
	}
}

1412 
NvU64
 
NV_API_CALL
 
	$nv_gë_kîn_phys_addªss
(
NvU64
 
addªss
)

1414 
vm_off£t_t
 
va
 = (vm_off£t_t)
addªss
;

1416 #i‡
	`deföed
(
NVCPU_X86_64
)

1417 i‡(
va
 >
DMAP_MIN_ADDRESS
 && v®< 
DMAP_MAX_ADDRESS
)

1418  
	`DMAP_TO_PHYS
(
va
);

1421 i‡(
va
 < 
VM_MIN_KERNEL_ADDRESS
) {

1422 
	`os_dbg_bªakpoöt
();

1426  
	`vt›hys
(
va
);

1427 
	}
}

1429 
NvU64
 
NV_API_CALL
 
	$nv_gë_u£r_phys_addªss
(
NvU64
 
addªss
)

1431 
vm•a˚
 *
vm
;

1432 
vm_off£t_t
 
va
 = (vm_off£t_t)
addªss
;

1434 i‡(
va
 >
VM_MIN_KERNEL_ADDRESS
) {

1435 
	`os_dbg_bªakpoöt
();

1439 
vm
 = 
cuΩroc
->
p_vm•a˚
;

1440  
	`pm≠_exåa˘
(
	`vm•a˚_pm≠
(
vm
), 
va
);

1441 
	}
}

1443 
	$nvidü_mm≠_˘l_sögÀ
(

1444 
nv_°©e_t
 *
nv
,

1445 
nvidü_fûï
 *
fûï
,

1446 
vm_ooff£t_t
 *
off£t
,

1447 
vm_size_t
 
size
,

1448 
vm_obje˘_t
 *
obje˘


1451 
nvidü_Æloc
 *
©
;

1452 
nvidü_°ack_t
 *
•
;

1453 
NV_STATUS
 
rmSètus
;

1454 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1455 
NvU64
 
∑geIndex
;

1456 
NvU32
 
¥Ÿ
;

1457 
nv_Æloc_m≠pög_c⁄ãxt_t
 *
mm≠_c⁄ãxt
;

1459 
•
 = 
sc
->•[
NV_DEV_STACK_API
];

1461 
rmSètus
 = 
	`rm_acquúe_≠i_lock
(
•
);

1462 i‡(
rmSètus
 !
NV_OK
)

1463  
EAGAIN
;

1465 
mm≠_c⁄ãxt
 = &
fûï
->mmap_context;

1471 i‡(!
mm≠_c⁄ãxt
->
vÆid
)

1473 
	`nv_¥ötf
(
NV_DBG_ERRORS
, "NVRM: VM: invalid mmap\n");

1474 
	`rm_ªÀa£_≠i_lock
(
•
);

1475  -
EINVAL
;

1478 
©
 = (
nvidü_Æloc
 *)
mm≠_c⁄ãxt
->
Æloc
;

1479 
∑geIndex
 = 
mm≠_c⁄ãxt
->
∑ge_ödex
;

1480 
¥Ÿ
 = 
mm≠_c⁄ãxt
->prot;

1482 
	`vm_obje˘_ª„ªn˚
(
©
->
obje˘
);

1483 *
obje˘
 = 
©
->object;

1484 *
off£t
 = (
∑geIndex
 * 
PAGE_SIZE
);

1486 
	`rm_ªÀa£_≠i_lock
(
•
);

1489 
	}
}

1491 
	$nvidü_mm≠_dev_sögÀ
(

1492 
nv_°©e_t
 *
nv
,

1493 
nvidü_fûï
 *
fûï
,

1494 
vm_ooff£t_t
 *
off£t
,

1495 
vm_size_t
 
size
,

1496 
vm_obje˘_t
 *
obje˘


1499 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1500 
nv_Æloc_m≠pög_c⁄ãxt_t
 *
mm≠_c⁄ãxt
 = &
fûï
->mmap_context;

1506 i‡(!
mm≠_c⁄ãxt
->
vÆid
)

1508 
	`nv_¥ötf
(
NV_DBG_ERRORS
, "NVRM: VM: invalid mmap\n");

1509  -
EINVAL
;

1512 *
off£t
 = 
mm≠_c⁄ãxt
->
mm≠_°¨t
;

1513 
size
 = 
mm≠_c⁄ãxt
->
mm≠_size
;

1515 i‡(
	`IS_UD_OFFSET
(
nv
, *
off£t
, 
size
)) {

1516 *
obje˘
 = 
sc
->
UD_obje˘
;

1517 
	`vm_obje˘_ª„ªn˚
(*
obje˘
);

1518 *
off£t
 = (*off£à- 
nv
->
ud
.
˝u_addªss
);

1520 } i‡(
	`IS_FB_OFFSET
(
nv
, *
off£t
, 
size
)) {

1521 *
obje˘
 = 
sc
->
BAR_obje˘s
[
NV_GPU_BAR_INDEX_FB
];

1522 
	`vm_obje˘_ª„ªn˚
(*
obje˘
);

1523 *
off£t
 = (*off£à- 
nv
->
fb
->
˝u_addªss
);

1525 } i‡(
	`IS_REG_OFFSET
(
nv
, *
off£t
, 
size
)) {

1526 *
obje˘
 = 
sc
->
BAR_obje˘s
[
NV_GPU_BAR_INDEX_REGS
];

1527 
	`vm_obje˘_ª„ªn˚
(*
obje˘
);

1528 *
off£t
 = (*off£à- 
nv
->
ªgs
->
˝u_addªss
);

1532  
EINVAL
;

1533 
	}
}

1535 
	$nvidü_rc_timî
(*
d©a
)

1537 
nv_°©e_t
 *
nv
 = 
d©a
;

1538 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1539 
nvidü_°ack_t
 *
•
;

1541 
•
 = 
sc
->•[
NV_DEV_STACK_TIMER
];

1543 
	`NV_PCI_CHECK_CONFIG_SPACE
(
•
, 
nv
, 
TRUE
, TRUE, 
FALSE
);

1545 i‡(
	`rm_run_rc_ˇŒback
(
•
, 
nv
Ë=
NV_OK
)

1546 
	`ˇŒout_ª£t
(&
sc
->
timî
, 
hz
, 
nvidü_rc_timî
, (*)
nv
);

1547 
	}
}

1549 
NV_API_CALL
 
	$nv_°¨t_rc_timî
(

1550 
nv_°©e_t
 *
nv


1553 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1555 i‡(
nv
->
rc_timî_íabÀd
 != 0)

1556  
EBUSY
;

1558 
	`ˇŒout_ª£t
(&
sc
->
timî
, 
hz
, 
nvidü_rc_timî
, (*)
nv
);

1559 
nv
->
rc_timî_íabÀd
 = 1;

1562 
	}
}

1564 
NV_API_CALL
 
	$nv_°›_rc_timî
(

1565 
nv_°©e_t
 *
nv


1568 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1570 i‡(
nv
->
rc_timî_íabÀd
 == 0)

1571  
EIO
;

1573 
	`ˇŒout_døö
(&
sc
->
timî
);

1574 
nv
->
rc_timî_íabÀd
 = 0;

1577 
	}
}

1579 
NV_API_CALL
 
	$nv_£t_dma_addªss_size
(

1580 
nv_°©e_t
 *
nv
,

1581 
NvU32
 
phys_addr_bôs


1584 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1585 #i‡
	`deföed
(
NVCPU_X86_64
)

1586 
sc
->
dma_mask
 = (((
uöt64_t
)1Ë<< 
phys_addr_bôs
) - 1;

1588 
sc
->
dma_mask
 = 0xffffffffULL;

1590 
	}
}

1592 
nv_°©e_t
* 
NV_API_CALL
 
	$nv_gë_ad≠ãr_°©e
(

1593 
NvU32
 
domaö
,

1594 
NvU8
 
bus
,

1595 
NvU8
 
¶Ÿ


1598 
i
;

1599 
nvidü_so·c
 *
sc
;

1600 
nv_°©e_t
 *
nv
;

1602 
i
 = 0; i < 
NV_MAX_DEVICES
; i++) {

1603 
sc
 = 
	`dev˛ass_gë_so·c
(
nvidü_dev˛ass
, 
i
);

1604 i‡(!
sc
)

1606 
nv
 = 
sc
->
nv_°©e
;

1608 i‡((
nv
->
pci_öfo
.
domaö
 == domain) &&

1609 (
nv
->
pci_öfo
.
bus
 =busË&& (nv->pci_öfo.
¶Ÿ
 == slot)) {

1610  
nv
;

1614  
NULL
;

1615 
	}
}

1617 
nv_°©e_t
* 
NV_API_CALL
 
	$nv_gë_˘l_°©e
()

1619  &
nvidü_˘l_°©e
;

1620 
	}
}

1622 
NV_API_CALL
 
	$nv_vîify_pci_c⁄fig
(

1623 
nv_°©e_t
 *
nv
,

1624 
BOOL
 
check_the_b¨s


1627 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

1628 
devi˚_t
 
dev
 = 
sc
->dev;

1629 
nvidü_°ack_t
 *
•
 = 
sc
->•[
NV_DEV_STACK_PCI_CFGCHK
];

1631 
	`nvidü_pci_check_c⁄fig_•a˚
(
•
, 
dev
, 
check_the_b¨s
, 
FALSE
, FALSE);

1632 
	}
}

1634 
NV_STATUS
 
NV_API_CALL
 
	$nv_dma_m≠_∑ges
(

1635 
nv_°©e_t
 *
nv
,

1636 
NvU64
 
∑ge_cou¡
,

1637 
NvU64
 *
±e_¨øy
,

1638 
NvBoﬁ
 
c⁄tig
,

1639 **
¥iv


1642  
NV_ERR_NOT_SUPPORTED
;

1643 
	}
}

1645 
NV_STATUS
 
NV_API_CALL
 
	$nv_dma_unm≠_∑ges
(

1646 
nv_°©e_t
 *
nv
,

1647 
NvU64
 
∑ge_cou¡
,

1648 
NvU64
 *
±e_¨øy
,

1649 **
¥iv


1652  
NV_ERR_NOT_SUPPORTED
;

1653 
	}
}

1655 
NV_STATUS
 
NV_API_CALL
 
	$nv_dma_m≠_Æloc
(

1656 
nv_°©e_t
 *
nv
,

1657 
NvU64
 
∑ge_cou¡
,

1658 
NvU64
 *
va_¨øy
,

1659 
NvBoﬁ
 
c⁄tig
,

1660 **
¥iv


1663  
NV_ERR_NOT_SUPPORTED
;

1664 
	}
}

1666 
NV_STATUS
 
NV_API_CALL
 
	$nv_dma_unm≠_Æloc
(

1667 
nv_°©e_t
 *
nv
,

1668 
NvU64
 
∑ge_cou¡
,

1669 
NvU64
 *
va_¨øy
,

1670 **
¥iv


1673  
NV_ERR_NOT_SUPPORTED
;

1674 
	}
}

1676 
NV_STATUS
 
NV_API_CALL
 
	$nv_dma_m≠_≥î
(

1677 
nv_°©e_t
 *
nv
,

1678 
nv_°©e_t
 *
≥î
,

1679 
NvU8
 
b¨_ödex
,

1680 
NvU64
 
∑ge_cou¡
,

1681 
NvU64
 *
va


1684  
NV_ERR_NOT_SUPPORTED
;

1685 
	}
}

1687 
NV_API_CALL
 
	$nv_dma_unm≠_≥î
(

1688 
nv_°©e_t
 *
nv
,

1689 
NvU64
 
∑ge_cou¡
,

1690 
NvU64
 
va


1693 
	}
}

1695 
NV_STATUS
 
NV_API_CALL
 
	$nv_dma_m≠_mmio
(

1696 
nv_°©e_t
 *
nv
,

1697 
NvU64
 
∑ge_cou¡
,

1698 
NvU64
 *
va


1701  
NV_ERR_NOT_SUPPORTED
;

1702 
	}
}

1704 
NV_API_CALL
 
	$nv_dma_unm≠_mmio
(

1705 
nv_°©e_t
 *
nv
,

1706 
NvU64
 
∑ge_cou¡
,

1707 
NvU64
 
va


1710 
	}
}

1712 
NV_STATUS
 
NV_API_CALL
 
	$nv_log_îr‹
(

1713 
nv_°©e_t
 *
nv
,

1714 
NvU32
 
îr‹_numbî
,

1715 c⁄° *
f‹m©
,

1716 
va_li°
 
≠


1719  
NV_OK
;

1720 
	}
}

1722 
NvU64
 
NV_API_CALL
 
	$nv_gë_dma_°¨t_addªss
(

1723 
nv_°©e_t
 *
nv


1727 
	}
}

1729 
NV_STATUS
 
NV_API_CALL
 
	$nv_£t_¥im¨y_vga_°©us
(

1730 
nv_°©e_t
 *
nv


1733  
NV_ERR_NOT_SUPPORTED
;

1734 
	}
}

1736 
NV_STATUS
 
NV_API_CALL
 
	$nv_pci_åiggî_ªcovîy
(

1737 
nv_°©e_t
 *
nv


1740  
NV_ERR_NOT_SUPPORTED
;

1741 
	}
}

1743 
NvBoﬁ
 
NV_API_CALL
 
	$nv_ªquúes_dma_ªm≠
(

1744 
nv_°©e_t
 *
nv


1747  
NV_FALSE
;

1748 
	}
}

1750 
NV_STATUS
 
NV_API_CALL
 
	$nv_ªgi°î_u£r_∑ges
(

1751 
nv_°©e_t
 *
nv
,

1752 
NvU64
 
∑ge_cou¡
,

1753 
NvU64
 *
phys_addr
,

1754 **
¥iv


1757  
NV_OK
;

1758 
	}
}

1760 
NV_STATUS
 
NV_API_CALL
 
	$nv_uƒegi°î_u£r_∑ges
(

1761 
nv_°©e_t
 *
nv
,

1762 
NvU64
 
∑ge_cou¡
,

1763 **
¥iv


1766  
NV_OK
;

1767 
	}
}

1769 
NV_STATUS
 
NV_API_CALL
 
	$nv_gë_devi˚_mem‹y_c⁄fig
(

1770 
nv_°©e_t
 *
nv
,

1771 
NvU32
 *
pAddrSysPhys
,

1772 
NvU32
 *
pAddrGue°Phys
,

1773 
NvU32
 *
pAddrWidth
,

1774 
NvU32
 *
pGønuœrôy
,

1775 
NvS32
 *
pNodeId


1778  
NV_ERR_NOT_SUPPORTED
;

1779 
	}
}

1781 
NV_STATUS
 
NV_API_CALL
 
	$nv_gë_u£rm≠_ac˚ss_∑øms
(

1782 
nv_°©e_t
 *
nv
,

1783 
nv_u£rm≠_ac˚ss_∑øms_t
 *
nvu≠


1786  
NV_OK
;

1787 
	}
}

1789 
NV_STATUS
 
NV_API_CALL
 
	$nv_ªgi°î_≥î_io_mem
(

1790 
nv_°©e_t
 *
nv
,

1791 
NvU64
 *
phys_addr
,

1792 
NvU64
 
∑ge_cou¡
,

1793 **
¥iv_d©a


1796  
NV_OK
;

1797 
	}
}

1799 
NV_API_CALL
 
	$nv_uƒegi°î_≥î_io_mem
(

1800 
nv_°©e_t
 *
nv
,

1801 *
¥iv_d©a


1804 
	}
}

1806 
NV_STATUS
 
NV_API_CALL
 
	$nv_ªgi°î_phys_∑ges
(

1807 
nv_°©e_t
 *
nv
,

1808 
NvU64
 *
phys_addr
,

1809 
NvU64
 
∑ge_cou¡
,

1810 **
¥iv_d©a


1813  
NV_OK
;

1814 
	}
}

1816 
NV_API_CALL
 
	$nv_uƒegi°î_phys_∑ges
(

1817 
nv_°©e_t
 *
nv
,

1818 *
¥iv_d©a


1821 
	}
}

1823 
NV_STATUS
 
NV_API_CALL
 
	$nv_gë_ibm≈u_gíªg_öfo
(

1824 
nv_°©e_t
 *
nv
,

1825 
NvU64
 *
addr
,

1826 
NvU64
 *
size
,

1827 **
devi˚


1830  
NV_ERR_NOT_SUPPORTED
;

1831 
	}
}

1833 
NV_STATUS
 
NV_API_CALL
 
	$nv_gë_ibm≈u_ªœxed_‹dîög_mode
(

1834 
nv_°©e_t
 *
nv
,

1835 
NvBoﬁ
 *
mode


1838  
NV_ERR_NOT_SUPPORTED
;

1839 
	}
}

1841 
NV_API_CALL
 
	$nv_ªgi°î_backlight
(

1842 
nv_°©e_t
 *
nv
,

1843 
NvU32
 
di•œyId
,

1844 
NvU32
 
cuºítBrighäess


1848 
	}
}

1850 
NV_API_CALL
 
	$nv_uƒegi°î_backlight
(

1851 
nv_°©e_t
 *
nv


1855 
	}
}

1857 
NV_API_CALL
 
	$nv_waô_f‹_ibm≈u_rsync
(
nv_°©e_t
 *
nv
)

1859 
	}
}

	@src/nvidia/nvidia_sysctl.c

11 
	~"nv-misc.h
"

12 
	~"os-öãrÁ˚.h
"

13 
	~"nv.h
"

14 
	~"nv-‰ìbsd.h
"

15 
	~"nv-ªg.h
"

17 
sys˘l_˘x_li°
 
	gsys˘l_˘x
;

19 
sys˘l_oid
 *
	goid_nvidü
;

20 
sys˘l_oid
 *
	goid_ªgi°ry
;

22 *
	g›ti⁄_°rög
 = 
NULL
;

24 
	$nvidü_sys˘l_öô
()

26 
nv_∑rm_t
 *
íåy
;

28 
	`sys˘l_˘x_öô
(&
sys˘l_˘x
);

30 
oid_nvidü
 = 
	`SYSCTL_ADD_NODE
(&
sys˘l_˘x
,

31 
	`SYSCTL_STATIC_CHILDREN
(
_hw
),

32 
OID_AUTO
,

34 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

38 
	`SYSCTL_ADD_STRING
(&
sys˘l_˘x
,

39 
	`SYSCTL_CHILDREN
(
oid_nvidü
),

40 
OID_AUTO
,

42 
CTLTYPE_STRING
 | 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

43 (*)(
uöçå_t
Ë
pNVRM_ID
,

47 
oid_ªgi°ry
 = 
	`SYSCTL_ADD_NODE
(&
sys˘l_˘x
,

48 
	`SYSCTL_CHILDREN
(
oid_nvidü
),

49 
OID_AUTO
,

51 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

55 
íåy
 = 
nv_∑rms
;

57 
	`SYSCTL_ADD_PROC
(&
sys˘l_˘x
,

58 
	`SYSCTL_CHILDREN
(
oid_ªgi°ry
),

59 
OID_AUTO
,

60 
íåy
->
«me
,

61 
CTLTYPE_UINT
 | 
CTLFLAG_RW
 | 
CTLFLAG_DYN
,

62 
íåy
->
d©a
, 0,

63 
nvidü_sys˘l_ªgi°ry_key
,

64 "IU", 
NULL
);

65 
íåy
++;

66 } 
íåy
->
«me
 !
NULL
);

68 
›ti⁄_°rög
 = 
	`mÆloc
(1, 
M_NVIDIA
, (
M_WAITOK
 | 
M_ZERO
));

70 
	`SYSCTL_ADD_PROC
(&
sys˘l_˘x
,

71 
	`SYSCTL_CHILDREN
(
oid_ªgi°ry
),

72 
OID_AUTO
, "dwords",

73 
CTLTYPE_STRING
 | 
CTLFLAG_RW
 | 
CTLFLAG_DYN
,

74 
NULL
, 0,

75 
nvidü_sys˘l_ªgi°ry_dw‹ds
,

76 "A", 
NULL
);

77 
	}
}

79 
	$nvidü_sys˘l_exô
()

81 
	`sys˘l_˘x_‰ì
(&
sys˘l_˘x
);

82 i‡(
›ti⁄_°rög
 !
NULL
)

83 
	`‰ì
((*)
›ti⁄_°rög
, 
M_NVIDIA
);

84 
	}
}

87 
	$nvidü_sys˘l_gpu_modñ
(
SYSCTL_HANDLER_ARGS
)

89 
nv_°©e_t
 *
nv
 = 
¨g1
;

90 
devi˚_t
 
dev
 = 
nv
->
h™dÀ
;

91 
nvidü_°ack_t
 *
•
;

92 
modñ_«me
[
NV_DEVICE_NAME_LENGTH
+1];

93 
NvU16
 
subvíd‹
, 
subdevi˚
;

95 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

96 i‡(
•
 =
NULL
)

97  
ENOMEM
;

99 
subvíd‹
 = 
	`pci_gë_subvíd‹
(
dev
);

100 
subdevi˚
 = 
	`pci_gë_subdevi˚
(
dev
);

102 i‡(
	`rm_gë_devi˚_«me
(
•
, 
nv
,Çv->
pci_öfo
.
devi˚_id
, 
subvíd‹
, 
subdevi˚
,

103 
NV_DEVICE_NAME_LENGTH
, 
modñ_«me
Ë!
NV_OK
) {

104 
	`°r˝y
(
modñ_«me
, "Unknown");

107 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

109  
	`SYSCTL_OUT
(
ªq
, 
modñ_«me
, 
	`°æí
(model_name) + 1);

110 
	}
}

112 
	$nvidü_sys˘l_gpu_uuid
(
SYSCTL_HANDLER_ARGS
)

114 
nv_°©e_t
 *
nv
 = 
¨g1
;

115 
nvidü_°ack_t
 *
•
;

116 
NvU8
 *
uuid
;

117 
NvU32
 
uuid_°æí
;

118 
ªt
;

120 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

121 i‡(
•
 =
NULL
)

122  
ENOMEM
;

124 i‡(
	`rm_gë_gpu_uuid
(
•
, 
nv
, &
uuid
, &
uuid_°æí
Ë!
NV_OK
)

125  
EIO
;

127 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

129 
ªt
 = 
	`SYSCTL_OUT
(
ªq
, (*)
uuid
, 
uuid_°æí
);

130 
	`os_‰ì_mem
(
uuid
);

132  
ªt
;

133 
	}
}

135 
	$nvidü_sys˘l_gpu_vbios
(
SYSCTL_HANDLER_ARGS
)

137 
nv_°©e_t
 *
nv
 = 
¨g1
;

138 
nvidü_°ack_t
 *
•
;

140 
NvU32
 
vbios
[5];

141 
NvU8
 
vbios_vîsi⁄
[16];

143 
	`NV_UMA_ZONE_ALLOC_STACK
(
•
);

144 i‡(
•
 =
NULL
)

145  
ENOMEM
;

147 i‡(
	`rm_gë_vbios_vîsi⁄
(
•
, 
nv
, &
vbios
[0], &vbios[1], &vbios[2],

148 &
vbios
[3], &vbios[4]Ë!
NV_OK
) {

153 
	`•rötf
(
vbios_vîsi⁄
, "??.??.??.??.??");

155 
	`•rötf
(
vbios_vîsi⁄
, "%02x.%02x.%02x.%02x.%02x", 
vbios
[0],

156 
vbios
[1], vbios[2], vbios[3], vbios[4]);

159 
	`NV_UMA_ZONE_FREE_STACK
(
•
);

161  
	`SYSCTL_OUT
(
ªq
, 
vbios_vîsi⁄
, 
	`°æí
(vbios_version) + 1);

162 
	}
}

164 
	$nvidü_sys˘l_bus_ty≥
(
SYSCTL_HANDLER_ARGS
)

166 
nvidü_so·c
 *
sc
 = 
¨g1
;

167 *
bus_ty≥
;

169 i‡(
	`nvidü_pci_föd_ˇ∑bûôy
(
sc
->
dev
, 
PCIR_CAP_ID_EXP
) != 0)

170 
bus_ty≥
 = "PCIe";

172 
bus_ty≥
 = "PCI";

174  
	`SYSCTL_OUT
(
ªq
, 
bus_ty≥
, 
	`°æí
(bus_type) + 1);

175 
	}
}

177 
	$nvidü_sys˘l_ªgi°ry_key
(
SYSCTL_HANDLER_ARGS
)

179 
îr‹
;

181 
îr‹
 = 
	`sys˘l_h™dÀ_öt
(
oidp
, 
¨g1
, 0, 
ªq
);

183 i‡(
îr‹
 || !
ªq
->
√w±r
)

184  
îr‹
;

187 
	`os_ªgi°ry_öô
();

190 
	}
}

192 
	$nvidü_sys˘l_ªgi°ry_dw‹ds
(
SYSCTL_HANDLER_ARGS
)

194 
îr‹
, 
Àn
;

195 *
√w_›ti⁄_°rög
;

197 
Àn
 = 
	`°æí
(
›ti⁄_°rög
) + 1;

198 
îr‹
 = 
	`SYSCTL_OUT
(
ªq
, 
›ti⁄_°rög
, 
Àn
);

200 i‡(
îr‹
 || !
ªq
->
√w±r
)

201  
îr‹
;

203 
Àn
 = (
ªq
->
√wÀn
 -Ñeq->
√widx
);

205 
√w_›ti⁄_°rög
 = 
	`mÆloc
((
Àn
 + 1), 
M_NVIDIA
, 
M_WAITOK
);

206 i‡(!
√w_›ti⁄_°rög
)

207  
ENOMEM
;

209 
îr‹
 = 
	`SYSCTL_IN
(
ªq
, 
√w_›ti⁄_°rög
, 
Àn
);

210 i‡(
îr‹
)

211  
îr‹
;

213 
	`‰ì
(
›ti⁄_°rög
, 
M_NVIDIA
);

215 
›ti⁄_°rög
 = 
√w_›ti⁄_°rög
;

216 
›ti⁄_°rög
[
Àn
] = '\0';

218 
	`nvidü_upd©e_ªgi°ry
(
√w_›ti⁄_°rög
);

221 
	}
}

223 
	$nv_sys˘l_öô
(
nv_°©e_t
 *
nv
)

225 
sys˘l_oid
 *
oid
;

226 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

228 
«me
[4];

229 
	`•rötf
(
«me
, "%d", 
	`devi˚_gë_unô
(
sc
->
dev
));

231 
	`sys˘l_˘x_öô
(&
sc
->
sys˘l_˘x
);

233 
oid
 = 
	`SYSCTL_ADD_NODE
(&
sc
->
sys˘l_˘x
,

234 
	`SYSCTL_CHILDREN
(
oid_nvidü
),

235 
OID_AUTO
,

237 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

241 
oid
 = 
	`SYSCTL_ADD_NODE
(&
sc
->
sys˘l_˘x
,

242 
	`SYSCTL_CHILDREN
(
oid
),

243 
OID_AUTO
,

244 
«me
,

245 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

249 
	`SYSCTL_ADD_PROC
(&
sc
->
sys˘l_˘x
,

250 
	`SYSCTL_CHILDREN
(
oid
),

251 
OID_AUTO
,

253 
CTLTYPE_STRING
 | 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

254 (*Ë
nv
, 0,

255 
nvidü_sys˘l_gpu_modñ
,

259 
	`SYSCTL_ADD_UINT
(&
sc
->
sys˘l_˘x
,

260 
	`SYSCTL_CHILDREN
(
oid
),

261 
OID_AUTO
,

263 
CTLTYPE_UINT
 | 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

264 &
nv
->
öãºu±_löe
,

268 
	`SYSCTL_ADD_PROC
(&
sc
->
sys˘l_˘x
,

269 
	`SYSCTL_CHILDREN
(
oid
),

270 
OID_AUTO
,

272 
CTLTYPE_STRING
 | 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

273 (*Ë
nv
, 0,

274 
nvidü_sys˘l_gpu_vbios
,

278 
	`SYSCTL_ADD_PROC
(&
sc
->
sys˘l_˘x
,

279 
	`SYSCTL_CHILDREN
(
oid
),

280 
OID_AUTO
,

282 
CTLTYPE_STRING
 | 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

283 (*Ë
nv
, 0,

284 
nvidü_sys˘l_gpu_uuid
,

288 
	`SYSCTL_ADD_PROC
(&
sc
->
sys˘l_˘x
,

289 
	`SYSCTL_CHILDREN
(
oid
),

290 
OID_AUTO
,

292 
CTLTYPE_STRING
 | 
CTLFLAG_RD
 | 
CTLFLAG_DYN
,

293 (*Ë
sc
, 0,

294 
nvidü_sys˘l_bus_ty≥
,

297 
	}
}

299 
	$nv_sys˘l_exô
(
nv_°©e_t
 *
nv
)

301 
nvidü_so·c
 *
sc
 = 
nv
->
os_°©e
;

302 
	`sys˘l_˘x_‰ì
(&
sc
->
sys˘l_˘x
);

303 
	}
}

	@src/nvidia/nvlink_common.h

24 #i‚de‡
_NVLINK_COMMON_H_


25 
	#_NVLINK_COMMON_H_


	)

27 #ifde‡
__˝lu•lus


31 
	~"nvty≥s.h
"

32 
	~"nvCpuUuid.h
"

33 
	~"nvlök_îr‹s.h
"

35 #i‚de‡
NULL


36 
	#NULL
 ((*)0)

	)

39 
	#NVLINK_FREE
(
x
Ë
	`nvlök_‰ì
((*)x)

	)

41 #i‡!
deföed
(
NV_WINDOWS
)

42 #i‡
deföed
(
NVCPU_X86
)

43 
	#NVLINK_API_CALL
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

45 
	#NVLINK_API_CALL


	)

48 
	#NVLINK_API_CALL


	)

52 
	snvlök_pci_b¨_öfo


54 
NvU64
 
busAddªss
;

55 
NvU64
 
ba£Addr
;

56 
NvU64
 
b¨Size
;

57 
NvU32
 
off£t
;

58 *
pB¨
;

61 
	#MAX_NVLINK_BARS
 2

	)

64 
	snvlök_pci_öfo


66 
NvU32
 
domaö
;

67 
NvU8
 
bus
;

68 
NvU8
 
devi˚
;

69 
NvU8
 
fun˘i⁄
;

70 
NvU32
 
pciDevi˚Id
;

71 
NvU32
 
úq
;

72 
NvBoﬁ
 
ötHooked
;

73 
nvlök_pci_b¨_öfo
 
b¨s
[
MAX_NVLINK_BARS
];

76 
	#NVLINK_PCI_DEV_FMT
 "%04x:%02x:%02x.%x"

	)

77 
	#NVLINK_PCI_DEV_FMT_ARGS
(
öfo
Ë(öfo)->
domaö
, \

78 (
öfo
)->
bus
, \

79 (
öfo
)->
devi˚
, \

80 (
öfo
)->
fun˘i⁄


	)

82 
	snvlök_c⁄n_öfo


84 
NvU32
 
domaö
;

85 
NvU16
 
bus
;

86 
NvU16
 
devi˚
;

87 
NvU16
 
fun˘i⁄
;

88 
NvU32
 
pciDevi˚Id
;

89 
NvU8
 
devUuid
[
NV_UUID_LEN
];

90 
NvU64
 
devi˚Ty≥
;

91 
NvU32
 
lökNumbî
;

92 
NvBoﬁ
 
bC⁄√˘ed
;

95 
	snvlök_io˘æ_∑øms


97 
NvU32
 
cmd
;

98 *
buf
;

99 
NvU32
 
size
;

103 
nvlök_pci_b¨_öfo
 
	tnvlök_pci_b¨_öfo
;

104 
nvlök_pci_öfo
 
	tnvlök_pci_öfo
;

105 
nvlök_c⁄n_öfo
 
	tnvlök_c⁄n_öfo
;

106 
nvlök_io˘æ_∑øms
 
	tnvlök_io˘æ_∑øms
;

110 * 
NVLINK_API_CALL
 
nvlök_mÆloc
(
NvLígth
);

111 
NVLINK_API_CALL
 
nvlök_‰ì
(*);

112 * 
NVLINK_API_CALL
 
nvlök_mem£t
(*, , 
NvLígth
);

113 * 
NVLINK_API_CALL
 
nvlök_mem˝y
(*, *, 
NvLígth
);

114 
NVLINK_API_CALL
 
nvlök_memRd32
(const volatile *);

115 
NVLINK_API_CALL
 
nvlök_memWr32
(volatile *, );

116 
NVLINK_API_CALL
 
nvlök_memRd64
(const volatile *);

117 
NVLINK_API_CALL
 
nvlök_memWr64
(volatile *, );

120 * 
NVLINK_API_CALL
 
nvlök_°r˝y
(*, const *);

121 
NvLígth
 
NVLINK_API_CALL
 
nvlök_°æí
(const *);

122 
NVLINK_API_CALL
 
nvlök_°rcmp
(const *, const *);

123 
NVLINK_API_CALL
 
nvlök_¢¥ötf
(*, 
NvLígth
, const *, ...);

126 * 
NVLINK_API_CALL
 
nvlök_ÆlocLock
();

127 
NVLINK_API_CALL
 
nvlök_acquúeLock
(*);

128 
NvBoﬁ
 
NVLINK_API_CALL
 
nvlök_isLockOw√r
(*);

129 
NVLINK_API_CALL
 
nvlök_ªÀa£Lock
(*);

130 
NVLINK_API_CALL
 
nvlök_‰ìLock
(*);

133 
NVLINK_API_CALL
 
nvlök_as£π
(
ex¥essi⁄
);

134 
NVLINK_API_CALL
 
nvlök_¶ìp
(
ms
);

135 
NVLINK_API_CALL
 
nvlök_¥öt
(const *, , const *, , const *, ...);

137 
	#NVLINK_DBG_LEVEL_INFO
 0x0

	)

138 
	#NVLINK_DBG_LEVEL_SETUP
 0x1

	)

139 
	#NVLINK_DBG_LEVEL_USERERRORS
 0x2

	)

140 
	#NVLINK_DBG_LEVEL_WARNINGS
 0x3

	)

141 
	#NVLINK_DBG_LEVEL_ERRORS
 0x4

	)

143 
	#NVLINK_DBG_WHERE
 
__FILE__
, 
__LINE__
, 
__FUNCTION__


	)

144 
	#NVLINK_DBG_INFO
 
NVLINK_DBG_WHERE
, 
NVLINK_DBG_LEVEL_INFO


	)

145 
	#NVLINK_DBG_SETUP
 
NVLINK_DBG_WHERE
, 
NVLINK_DBG_LEVEL_SETUP


	)

146 
	#NVLINK_DBG_USERERRORS
 
NVLINK_DBG_WHERE
, 
NVLINK_DBG_LEVEL_USERERRORS


	)

147 
	#NVLINK_DBG_WARNINGS
 
NVLINK_DBG_WHERE
, 
NVLINK_DBG_LEVEL_WARNINGS


	)

148 
	#NVLINK_DBG_ERRORS
 
NVLINK_DBG_WHERE
, 
NVLINK_DBG_LEVEL_ERRORS


	)

150 #ifde‡
__˝lu•lus


	@src/nvidia/nvlink_errors.h

23 #i‚de‡
_NVLINK_ERRORS_H_


24 
	#_NVLINK_ERRORS_H_


	)

26 
	tNvlSètus
;

28 
	#NVL_SUCCESS
 (
NvlSètus
Ë0

	)

29 
	#NVL_BAD_ARGS
 (
NvlSètus
Ë1

	)

30 
	#NVL_NO_MEM
 (
NvlSètus
Ë2

	)

31 
	#NVL_NOT_FOUND
 (
NvlSètus
Ë3

	)

32 
	#NVL_INITIALIZATION_PARTIAL_FAILURE
 (
NvlSètus
Ë4

	)

33 
	#NVL_INITIALIZATION_TOTAL_FAILURE
 (
NvlSètus
Ë5

	)

34 
	#NVL_PCI_ERROR
 (
NvlSètus
Ë6

	)

35 
	#NVL_ERR_GENERIC
 (
NvlSètus
Ë7

	)

36 
	#NVL_ERR_INVALID_STATE
 (
NvlSètus
Ë8

	)

37 
	#NVL_UNBOUND_DEVICE
 (
NvlSètus
Ë9

	)

38 
	#NVL_MORE_PROCESSING_REQUIRED
 (
NvlSètus
)10

	)

39 
	#NVL_IO_ERROR
 (
NvlSètus
)11

	)

40 
	#NVL_ERR_STATE_IN_USE
 (
NvlSètus
)12

	)

41 
	#NVL_ERR_NOT_SUPPORTED
 (
NvlSètus
)13

	)

42 
	#NVL_ERR_NOT_IMPLEMENTED
 (
NvlSètus
)14

	)

	@src/nvidia/nvlink_freebsd.c

31 
	~"nvlök_comm⁄.h
"

33 
NVLINK_API_CALL


34 
	gnvlök_¥öt


36 c⁄° *
	gfûe
,

37 
	glöe
,

38 c⁄° *
	gfun˘i⁄
,

39 
	glog_Àvñ
,

40 c⁄° *
	gfmt
,

47 * 
NVLINK_API_CALL
 
	$nvlök_mÆloc
(
NvLígth
 
size
)

49  
NULL
;

50 
	}
}

52 
NVLINK_API_CALL
 
	$nvlök_‰ì
(*
±r
)

55 
	}
}

57 * 
NVLINK_API_CALL
 
	$nvlök_°r˝y
(*
de°
, c⁄° *
§c
)

59  
NULL
;

60 
	}
}

62 
NVLINK_API_CALL
 
	$nvlök_°rcmp
(c⁄° *
de°
, c⁄° *
§c
)

65 
	}
}

67 
NvLígth
 
NVLINK_API_CALL
 
	$nvlök_°æí
(c⁄° *
s
)

70 
	}
}

72 
NVLINK_API_CALL
 
	$nvlök_¢¥ötf
(*
de°
, 
NvLígth
 
size
, c⁄° *
fmt
, ...)

75 
	}
}

77 
NVLINK_API_CALL
 
	$nvlök_memRd32
(c⁄° vﬁ©ûê* 
addªss
)

80 
	}
}

82 
NVLINK_API_CALL
 
	$nvlök_memWr32
(vﬁ©ûê*
addªss
, 
d©a
)

84 
	}
}

86 
NVLINK_API_CALL
 
	$nvlök_memRd64
(c⁄° vﬁ©ûê* 
addªss
)

89 
	}
}

91 
NVLINK_API_CALL
 
	$nvlök_memWr64
(vﬁ©ûê*
addªss
, 
d©a
)

93 
	}
}

95 * 
NVLINK_API_CALL
 
	$nvlök_mem£t
(*
de°
, 
vÆue
, 
NvLígth
 
size
)

97  
NULL
;

98 
	}
}

100 * 
NVLINK_API_CALL
 
	$nvlök_mem˝y
(*
de°
, *
§c
, 
NvLígth
 
size
)

102  
NULL
;

103 
	}
}

105 
NVLINK_API_CALL
 
	$nvlök_¶ìp
(
ms
)

108 
	}
}

110 
NVLINK_API_CALL
 
	$nvlök_as£π
(
c⁄d
)

112 
	}
}

114 * 
NVLINK_API_CALL
 
	$nvlök_ÆlocLock
()

116  
NULL
;

117 
	}
}

119 
NVLINK_API_CALL
 
	$nvlök_acquúeLock
(*
hLock
)

121 
	}
}

123 
NVLINK_API_CALL
 
	$nvlök_ªÀa£Lock
(*
hLock
)

125 
	}
}

127 
NVLINK_API_CALL
 
	$nvlök_‰ìLock
(*
hLock
)

129 
	}
}

131 
NvBoﬁ
 
NVLINK_API_CALL
 
	$nvlök_isLockOw√r
(*
hLock
)

133  
NV_FALSE
;

134 
	}
}

	@src/nvidia/opt_acpi.h

	@src/nvidia/os-interface.h

16 #i‚de‡
_OS_INTERFACE_H_


17 
	#_OS_INTERFACE_H_


	)

27 
	~<°d¨g.h
>

28 
	~<nv-kî√l-öãrÁ˚-≠i.h
>

29 
	~"nvùmi.h
"

35 
	#__°dˇŒ


	)

36 
	#Ár


	)

37 
	#PASCAL


	)

41 
NvU32
 
	mos_maj‹_vîsi⁄
;

42 
NvU32
 
	mos_mö‹_vîsi⁄
;

43 
NvU32
 
	mos_buûd_numbî
;

44 * 
	mos_buûd_vîsi⁄_°r
;

45 * 
	mos_buûd_d©e_∂us_°r
;

46 }
	tos_vîsi⁄_öfo
;

56 
NvU32
 
NV_API_CALL
 
os_gë_∑ge_size
 ();

57 
NvU64
 
NV_API_CALL
 
os_gë_∑ge_mask
 ();

58 
NvU8
 
NV_API_CALL
 
os_gë_∑ge_shi·
 ();

59 
NvU64
 
NV_API_CALL
 
os_gë_num_phys_∑ges
 ();

60 
NV_STATUS
 
NV_API_CALL
 
os_Æloc_mem
 (**, 
NvU64
);

61 
NV_API_CALL
 
os_‰ì_mem
 (*);

62 
NV_STATUS
 
NV_API_CALL
 
os_gë_cuºít_time
 (
NvU32
 *, NvU32 *);

63 
NV_API_CALL
 
os_gë_cuºít_tick
 (
NvU64
 *);

64 
NV_STATUS
 
NV_API_CALL
 
os_dñay
 (
NvU32
);

65 
NV_STATUS
 
NV_API_CALL
 
os_dñay_us
 (
NvU32
);

66 
NvU64
 
NV_API_CALL
 
os_gë_˝u_‰equícy
 ();

67 
NvU32
 
NV_API_CALL
 
os_gë_cuºít_¥o˚ss
 ();

68 
NV_API_CALL
 
os_gë_cuºít_¥o˚ss_«me
 (*, 
NvU32
);

69 
NvU32
 
NV_API_CALL
 
os_gë_cuºít_∑sid
 ();

70 
NV_STATUS
 
NV_API_CALL
 
os_gë_cuºít_thªad
 (
NvU64
 *);

71 * 
NV_API_CALL
 
os_°rög_c›y
 (*, const *);

72 
NvU32
 
NV_API_CALL
 
os_°rög_Àngth
 (const *);

73 
NvU32
 
NV_API_CALL
 
os_°πoul
 (const *, **, NvU32);

74 
NvS32
 
NV_API_CALL
 
os_°rög_com∑ª
 (const *, const *);

75 
NvS32
 
NV_API_CALL
 
os_¢¥ötf
 (*, 
NvU32
, const *, ...);

76 
NV_API_CALL
 
os_log_îr‹
 (c⁄° *, 
va_li°
);

77 
NvU8
* 
NV_API_CALL
 
os_mem_c›y
 (NvU8 *, c⁄° NvU8 *, 
NvU32
);

78 
NV_STATUS
 
NV_API_CALL
 
os_mem˝y_‰om_u£r
 (*, c⁄° *, 
NvU32
);

79 
NV_STATUS
 
NV_API_CALL
 
os_mem˝y_to_u£r
 (*, c⁄° *, 
NvU32
);

80 * 
NV_API_CALL
 
os_mem_£t
 (*, 
NvU8
, 
NvU32
);

81 
NvS32
 
NV_API_CALL
 
os_mem_cmp
 (c⁄° 
NvU8
 *, c⁄° NvU8 *, 
NvU32
);

82 * 
NV_API_CALL
 
os_pci_öô_h™dÀ
 (
NvU32
, 
NvU8
, NvU8, NvU8, 
NvU16
 *, NvU16 *);

83 
NV_STATUS
 
NV_API_CALL
 
os_pci_ªad_byã
 (*, 
NvU32
, 
NvU8
 *);

84 
NV_STATUS
 
NV_API_CALL
 
os_pci_ªad_w‹d
 (*, 
NvU32
, 
NvU16
 *);

85 
NV_STATUS
 
NV_API_CALL
 
os_pci_ªad_dw‹d
 (*, 
NvU32
, NvU32 *);

86 
NV_STATUS
 
NV_API_CALL
 
os_pci_wrôe_byã
 (*, 
NvU32
, 
NvU8
);

87 
NV_STATUS
 
NV_API_CALL
 
os_pci_wrôe_w‹d
 (*, 
NvU32
, 
NvU16
);

88 
NV_STATUS
 
NV_API_CALL
 
os_pci_wrôe_dw‹d
 (*, 
NvU32
, NvU32);

89 
NvBoﬁ
 
NV_API_CALL
 
os_pci_ªmove_suµ‹ãd
 ();

90 
NV_API_CALL
 
os_pci_ªmove
 (*);

91 * 
NV_API_CALL
 
os_m≠_kî√l_•a˚
 (
NvU64
, NvU64, 
NvU32
, NvU32);

92 
NV_API_CALL
 
os_unm≠_kî√l_•a˚
 (*, 
NvU64
);

93 * 
NV_API_CALL
 
os_m≠_u£r_•a˚
 (
NvU64
, NvU64, 
NvU32
, NvU32, **);

94 
NV_API_CALL
 
os_unm≠_u£r_•a˚
 (*, 
NvU64
, *);

95 
NV_STATUS
 
NV_API_CALL
 
os_Êush_˝u_ˇche
 ();

96 
NV_STATUS
 
NV_API_CALL
 
os_Êush_˝u_ˇche_Æl
 ();

97 
NV_STATUS
 
NV_API_CALL
 
os_Êush_u£r_ˇche
 (
NvU64
, NvU64, NvU64, NvU64, 
NvU32
);

98 
NV_API_CALL
 
os_Êush_˝u_wrôe_comböe_buf„r
();

99 
NvU8
 
NV_API_CALL
 
os_io_ªad_byã
 (
NvU32
);

100 
NvU16
 
NV_API_CALL
 
os_io_ªad_w‹d
 (
NvU32
);

101 
NvU32
 
NV_API_CALL
 
os_io_ªad_dw‹d
 (NvU32);

102 
NV_API_CALL
 
os_io_wrôe_byã
 (
NvU32
, 
NvU8
);

103 
NV_API_CALL
 
os_io_wrôe_w‹d
 (
NvU32
, 
NvU16
);

104 
NV_API_CALL
 
os_io_wrôe_dw‹d
 (
NvU32
, NvU32);

105 
BOOL
 
NV_API_CALL
 
os_is_admöi°øt‹
 ();

106 
NV_API_CALL
 
os_dbg_öô
 ();

107 
NV_API_CALL
 
os_dbg_bªakpoöt
 ();

108 
NV_API_CALL
 
os_dbg_£t_Àvñ
 (
NvU32
);

109 
NvU32
 
NV_API_CALL
 
os_gë_˝u_cou¡
 ();

110 
NvU32
 
NV_API_CALL
 
os_gë_˝u_numbî
 ();

111 
NV_STATUS
 
NV_API_CALL
 
os_dißbÀ_c⁄sﬁe_ac˚ss
 ();

112 
NV_STATUS
 
NV_API_CALL
 
os_íabÀ_c⁄sﬁe_ac˚ss
 ();

113 
NV_STATUS
 
NV_API_CALL
 
os_ªgi°ry_öô
 ();

114 
NV_STATUS
 
NV_API_CALL
 
os_scheduÀ
 ();

115 
NV_STATUS
 
NV_API_CALL
 
os_Æloc_•ölock
 (**);

116 
NV_API_CALL
 
os_‰ì_•ölock
 (*);

117 
NvU64
 
NV_API_CALL
 
os_acquúe_•ölock
 (*);

118 
NV_API_CALL
 
os_ªÀa£_•ölock
 (*, 
NvU64
);

119 
NV_STATUS
 
NV_API_CALL
 
os_gë_addªss_•a˚_öfo
 (
NvU64
 *, NvU64 *, NvU64 *, NvU64 *);

120 
NV_STATUS
 
NV_API_CALL
 
os_queue_w‹k_ôem
 (*);

121 
NV_STATUS
 
NV_API_CALL
 
os_Êush_w‹k_queue
 ();

122 
NV_API_CALL
 
os_ªgi°î_com∑tibÀ_io˘l
 (
NvU32
, NvU32);

123 
NV_API_CALL
 
os_uƒegi°î_com∑tibÀ_io˘l
 (
NvU32
, NvU32);

124 
NV_STATUS
 
NV_API_CALL
 
os_Æloc_muãx
 (**);

125 
NV_API_CALL
 
os_‰ì_muãx
 (*);

126 
NV_STATUS
 
NV_API_CALL
 
os_acquúe_muãx
 (*);

127 
NV_STATUS
 
NV_API_CALL
 
os_c⁄d_acquúe_muãx
 (*);

128 
NV_API_CALL
 
os_ªÀa£_muãx
 (*);

129 * 
NV_API_CALL
 
os_Æloc_£m≠h‹e
 (
NvU32
);

130 
NV_API_CALL
 
os_‰ì_£m≠h‹e
 (*);

131 
NV_STATUS
 
NV_API_CALL
 
os_acquúe_£m≠h‹e
 (*);

132 
NV_STATUS
 
NV_API_CALL
 
os_ªÀa£_£m≠h‹e
 (*);

133 
BOOL
 
NV_API_CALL
 
os_£m≠h‹e_may_¶ìp
 ();

134 
NV_STATUS
 
NV_API_CALL
 
os_gë_vîsi⁄_öfo
 (
os_vîsi⁄_öfo
*);

135 
BOOL
 
NV_API_CALL
 
os_is_i§
 ();

136 
BOOL
 
NV_API_CALL
 
os_∑t_suµ‹ãd
 ();

137 
NV_API_CALL
 
os_dump_°ack
 ();

138 
BOOL
 
NV_API_CALL
 
os_is_efi_íabÀd
 ();

139 
BOOL
 
NV_API_CALL
 
os_iommu_is_¢o›ög_íabÀd
();

140 
NvBoﬁ
 
NV_API_CALL
 
os_is_xí_dom0
 ();

141 
NvBoﬁ
 
NV_API_CALL
 
os_is_vgx_hy≥r
 ();

142 
NV_STATUS
 
NV_API_CALL
 
os_öje˘_vgx_msi
 (
NvU16
, 
NvU64
, 
NvU32
);

143 
NvBoﬁ
 
NV_API_CALL
 
os_is_grid_suµ‹ãd
 ();

144 
NV_API_CALL
 
os_gë_s¸ìn_öfo
 (
NvU64
 *, 
NvU16
 *, NvU16 *, NvU16 *, NvU16 *);

145 
NV_API_CALL
 
os_bug_check
 (
NvU32
, const *);

146 
NV_STATUS
 
NV_API_CALL
 
os_lock_u£r_∑ges
 (*, 
NvU64
, **);

147 
NV_STATUS
 
NV_API_CALL
 
os_lookup_u£r_io_mem‹y
 (*, 
NvU64
, NvU64 **);

148 
NV_STATUS
 
NV_API_CALL
 
os_u∆ock_u£r_∑ges
 (
NvU64
, *);

149 
NV_STATUS
 
NV_API_CALL
 
os_m©ch_mm≠_off£t
 (*, 
NvU64
, NvU64 *);

150 
NV_STATUS
 
NV_API_CALL
 
os_gë_euid
 (
NvU32
 *);

151 
NV_STATUS
 
NV_API_CALL
 
os_gë_smbios_hódî
 (
NvU64
 *
pSmbsAddr
);

152 
NV_STATUS
 
NV_API_CALL
 
os_gë_a˝i_rsdp_‰om_uefi
 (
NvU32
 *);

153 
NV_API_CALL
 
os_add_ªc‹d_f‹_¸ashLog
 (*, 
NvU32
);

154 
NV_API_CALL
 
os_dñëe_ªc‹d_f‹_¸ashLog
 (*);

155 
NV_STATUS
 
NV_API_CALL
 
os_ˇŒ_vgpu_vfio
 (*, 
NvU32
);

156 
NV_STATUS
 
NV_API_CALL
 
os_numa_memblock_size
 (
NvU64
 *);

157 
NV_STATUS
 
NV_API_CALL
 
os_Æloc_∑ges_node
 (
NvS32
, 
NvU32
, NvU32, 
NvU64
 *);

158 
NV_STATUS
 
NV_API_CALL
 
os_gë_∑ge
 (
NvU64
 
addªss
);

159 
NV_STATUS
 
NV_API_CALL
 
os_put_∑ge
 (
NvU64
 
addªss
);

160 
NvU32
 
NV_API_CALL
 
os_gë_∑ge_ªfcou¡
 (
NvU64
 
addªss
);

161 
NvU32
 
NV_API_CALL
 
os_cou¡_èû_∑ges
 (
NvU64
 
addªss
);

162 
NV_API_CALL
 
os_‰ì_∑ges_phys
 (
NvU64
, 
NvU32
);

163 
NV_STATUS
 
NV_API_CALL
 
os_ùmi_c⁄√˘
 (
NvU32
 
devIndex
, 
NvU8
 
myAddr
, **
µOsPriv
);

164 
NV_API_CALL
 
os_ùmi_disc⁄√˘
 (*
pOsPriv
);

165 
NV_STATUS
 
NV_API_CALL
 
os_ùmi_£nd_ª˚ive_cmd
 (*
pOsPriv
, 
nvùmi_ªq_ª•_t
 *
pReq
);

166 
NV_STATUS
 
NV_API_CALL
 
os_ˇŒ_nv_vmbus
 (
NvU32
, *);

176 
	#NV_DBG_INFO
 0x0

	)

177 
	#NV_DBG_SETUP
 0x1

	)

178 
	#NV_DBG_USERERRORS
 0x2

	)

179 
	#NV_DBG_WARNINGS
 0x3

	)

180 
	#NV_DBG_ERRORS
 0x4

	)

183 
NV_API_CALL
 
out_°rög
(c⁄° *
°r
);

184 
NV_API_CALL
 
nv_¥ötf
(
NvU32
 
debugÀvñ
, c⁄° *
¥ötf_f‹m©
, ...);

189 
	#NV_MEMORY_TYPE_SYSTEM
 0

	)

191 
	#NV_MEMORY_TYPE_REGISTERS
 2

	)

192 
	#NV_MEMORY_TYPE_FRAMEBUFFER
 3

	)

193 
	#NV_MEMORY_TYPE_INSTANCE
 4

	)

194 
	#NV_MEMORY_TYPE_DEVICE_MMIO
 5

	)

196 
	#NV_MEMORY_NONCONTIGUOUS
 0

	)

197 
	#NV_MEMORY_CONTIGUOUS
 1

	)

199 
	#NV_MEMORY_CACHED
 0

	)

200 
	#NV_MEMORY_UNCACHED
 1

	)

201 
	#NV_MEMORY_WRITECOMBINED
 2

	)

202 
	#NV_MEMORY_WRITETHRU
 3

	)

203 
	#NV_MEMORY_WRITEPROTECT
 4

	)

204 
	#NV_MEMORY_WRITEBACK
 5

	)

205 
	#NV_MEMORY_DEFAULT
 6

	)

206 
	#NV_MEMORY_UNCACHED_WEAK
 7

	)

208 
	#NV_PROTECT_READABLE
 1

	)

209 
	#NV_PROTECT_WRITEABLE
 2

	)

210 
	#NV_PROTECT_READ_WRITE
 (
NV_PROTECT_READABLE
 | 
NV_PROTECT_WRITEABLE
)

	)

212 
	#OS_UNIX_FLUSH_USER_CACHE
 1

	)

213 
	#OS_UNIX_INVALIDATE_USER_CACHE
 2

	)

214 
	#OS_UNIX_FLUSH_INVALIDATE_USER_CACHE
 (
OS_UNIX_FLUSH_USER_CACHE
 | 
OS_UNIX_INVALIDATE_USER_CACHE
)

	)

221 
	#OS_PAGE_SIZE
 (
	`os_gë_∑ge_size
())

	)

222 
	#OS_PAGE_MASK
 (
	`os_gë_∑ge_mask
())

	)

223 
	#OS_PAGE_SHIFT
 (
	`os_gë_∑ge_shi·
())

	)

225 
	#IS_VGX_HYPER
(Ë
	`os_is_vgx_hy≥r
()

	)

226 
	#IS_GRID_SUPPORTED
(Ë
	`os_is_grid_suµ‹ãd
()

	)

	@src/nvidia/pci_if.h

14 #i‚de‡
_pci_if_h_


15 
	#_pci_if_h_


	)

18 
	gnvli°
;

20 
	epci_id_ty≥
 {

21 
	mPCI_ID_RID
,

22 
	mPCI_ID_MSI
,

25 
	epci_„©uª
 {

26 
	mPCI_FEATURE_HP
,

27 
	mPCI_FEATURE_AER
,

31 
kobj›_desc
 
pci_ªad_c⁄fig_desc
;

33 
u_öt32_t
 
	tpci_ªad_c⁄fig_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tªg
,

34 
	twidth
);

36 
__ölöe
 
u_öt32_t
 
	$PCI_READ_CONFIG
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ªg
,

37 
width
)

39 
kobj›_t
 
_m
;

40 
u_öt32_t
 
rc
;

41 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_ªad_c⁄fig
);

42 
rc
 = ((
pci_ªad_c⁄fig_t
 *Ë
_m
)(
dev
, 
chûd
, 
ªg
, 
width
);

43  (
rc
);

44 
	}
}

47 
kobj›_desc
 
pci_wrôe_c⁄fig_desc
;

49 
	tpci_wrôe_c⁄fig_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tªg
,

50 
	tu_öt32_t
 
	tvÆ
, 
	twidth
);

52 
__ölöe
 
	$PCI_WRITE_CONFIG
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ªg
,

53 
u_öt32_t
 
vÆ
, 
width
)

55 
kobj›_t
 
_m
;

56 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_wrôe_c⁄fig
);

57 ((
pci_wrôe_c⁄fig_t
 *Ë
_m
)(
dev
, 
chûd
, 
ªg
, 
vÆ
, 
width
);

58 
	}
}

61 
kobj›_desc
 
pci_gë_powî°©e_desc
;

63 
	tpci_gë_powî°©e_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

65 
__ölöe
 
	$PCI_GET_POWERSTATE
(
devi˚_t
 
dev
, devi˚_à
chûd
)

67 
kobj›_t
 
_m
;

68 
rc
;

69 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_powî°©e
);

70 
rc
 = ((
pci_gë_powî°©e_t
 *Ë
_m
)(
dev
, 
chûd
);

71  (
rc
);

72 
	}
}

75 
kobj›_desc
 
pci_£t_powî°©e_desc
;

77 
	tpci_£t_powî°©e_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	t°©e
);

79 
__ölöe
 
	$PCI_SET_POWERSTATE
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
°©e
)

81 
kobj›_t
 
_m
;

82 
rc
;

83 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_£t_powî°©e
);

84 
rc
 = ((
pci_£t_powî°©e_t
 *Ë
_m
)(
dev
, 
chûd
, 
°©e
);

85  (
rc
);

86 
	}
}

89 
kobj›_desc
 
pci_gë_vpd_idít_desc
;

91 
	tpci_gë_vpd_idít_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
,

92 c⁄° **
	tidíçå
);

94 
__ölöe
 
	$PCI_GET_VPD_IDENT
(
devi˚_t
 
dev
, devi˚_à
chûd
,

95 c⁄° **
idíçå
)

97 
kobj›_t
 
_m
;

98 
rc
;

99 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_vpd_idít
);

100 
rc
 = ((
pci_gë_vpd_idít_t
 *Ë
_m
)(
dev
, 
chûd
, 
idíçå
);

101  (
rc
);

102 
	}
}

105 
kobj›_desc
 
pci_gë_vpd_ªad⁄ly_desc
;

107 
	tpci_gë_vpd_ªad⁄ly_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, c⁄° *
	tkw
,

108 c⁄° **
	tv±r
);

110 
__ölöe
 
	$PCI_GET_VPD_READONLY
(
devi˚_t
 
dev
, devi˚_à
chûd
,

111 c⁄° *
kw
, c⁄° **
v±r
)

113 
kobj›_t
 
_m
;

114 
rc
;

115 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_vpd_ªad⁄ly
);

116 
rc
 = ((
pci_gë_vpd_ªad⁄ly_t
 *Ë
_m
)(
dev
, 
chûd
, 
kw
, 
v±r
);

117  (
rc
);

118 
	}
}

121 
kobj›_desc
 
pci_íabÀ_busma°î_desc
;

123 
	tpci_íabÀ_busma°î_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

125 
__ölöe
 
	$PCI_ENABLE_BUSMASTER
(
devi˚_t
 
dev
, devi˚_à
chûd
)

127 
kobj›_t
 
_m
;

128 
rc
;

129 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_busma°î
);

130 
rc
 = ((
pci_íabÀ_busma°î_t
 *Ë
_m
)(
dev
, 
chûd
);

131  (
rc
);

132 
	}
}

135 
kobj›_desc
 
pci_dißbÀ_busma°î_desc
;

137 
	tpci_dißbÀ_busma°î_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

139 
__ölöe
 
	$PCI_DISABLE_BUSMASTER
(
devi˚_t
 
dev
, devi˚_à
chûd
)

141 
kobj›_t
 
_m
;

142 
rc
;

143 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_dißbÀ_busma°î
);

144 
rc
 = ((
pci_dißbÀ_busma°î_t
 *Ë
_m
)(
dev
, 
chûd
);

145  (
rc
);

146 
	}
}

149 
kobj›_desc
 
pci_íabÀ_io_desc
;

151 
	tpci_íabÀ_io_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	t•a˚
);

153 
__ölöe
 
	$PCI_ENABLE_IO
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
•a˚
)

155 
kobj›_t
 
_m
;

156 
rc
;

157 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_io
);

158 
rc
 = ((
pci_íabÀ_io_t
 *Ë
_m
)(
dev
, 
chûd
, 
•a˚
);

159  (
rc
);

160 
	}
}

163 
kobj›_desc
 
pci_dißbÀ_io_desc
;

165 
	tpci_dißbÀ_io_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	t•a˚
);

167 
__ölöe
 
	$PCI_DISABLE_IO
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
•a˚
)

169 
kobj›_t
 
_m
;

170 
rc
;

171 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_dißbÀ_io
);

172 
rc
 = ((
pci_dißbÀ_io_t
 *Ë
_m
)(
dev
, 
chûd
, 
•a˚
);

173  (
rc
);

174 
	}
}

177 
kobj›_desc
 
pci_assign_öãºu±_desc
;

179 
	tpci_assign_öãºu±_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

181 
__ölöe
 
	$PCI_ASSIGN_INTERRUPT
(
devi˚_t
 
dev
, devi˚_à
chûd
)

183 
kobj›_t
 
_m
;

184 
rc
;

185 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_assign_öãºu±
);

186 
rc
 = ((
pci_assign_öãºu±_t
 *Ë
_m
)(
dev
, 
chûd
);

187  (
rc
);

188 
	}
}

191 
kobj›_desc
 
pci_föd_ˇp_desc
;

193 
	tpci_föd_ˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

194 *
	tˇ¥eg
);

196 
__ölöe
 
	$PCI_FIND_CAP
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ˇ∑bûôy
,

197 *
ˇ¥eg
)

199 
kobj›_t
 
_m
;

200 
rc
;

201 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_ˇp
);

202 
rc
 = ((
pci_föd_ˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
ˇ¥eg
);

203  (
rc
);

204 
	}
}

207 
kobj›_desc
 
pci_föd_√xt_ˇp_desc
;

209 
	tpci_föd_√xt_ˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

210 
	t°¨t
, *
	tˇ¥eg
);

212 
__ölöe
 
	$PCI_FIND_NEXT_CAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

213 
ˇ∑bûôy
, 
°¨t
, *
ˇ¥eg
)

215 
kobj›_t
 
_m
;

216 
rc
;

217 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_√xt_ˇp
);

218 
rc
 = ((
pci_föd_√xt_ˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
°¨t
, 
ˇ¥eg
);

219  (
rc
);

220 
	}
}

223 
kobj›_desc
 
pci_föd_extˇp_desc
;

225 
	tpci_föd_extˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

226 *
	tˇ¥eg
);

228 
__ölöe
 
	$PCI_FIND_EXTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

229 
ˇ∑bûôy
, *
ˇ¥eg
)

231 
kobj›_t
 
_m
;

232 
rc
;

233 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_extˇp
);

234 
rc
 = ((
pci_föd_extˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
ˇ¥eg
);

235  (
rc
);

236 
	}
}

239 
kobj›_desc
 
pci_föd_√xt_extˇp_desc
;

241 
	tpci_föd_√xt_extˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

242 
	t°¨t
, *
	tˇ¥eg
);

244 
__ölöe
 
	$PCI_FIND_NEXT_EXTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

245 
ˇ∑bûôy
, 
°¨t
, *
ˇ¥eg
)

247 
kobj›_t
 
_m
;

248 
rc
;

249 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_√xt_extˇp
);

250 
rc
 = ((
pci_föd_√xt_extˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
°¨t
, 
ˇ¥eg
);

251  (
rc
);

252 
	}
}

255 
kobj›_desc
 
pci_föd_htˇp_desc
;

257 
	tpci_föd_htˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

258 *
	tˇ¥eg
);

260 
__ölöe
 
	$PCI_FIND_HTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ˇ∑bûôy
,

261 *
ˇ¥eg
)

263 
kobj›_t
 
_m
;

264 
rc
;

265 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_htˇp
);

266 
rc
 = ((
pci_föd_htˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
ˇ¥eg
);

267  (
rc
);

268 
	}
}

271 
kobj›_desc
 
pci_föd_√xt_htˇp_desc
;

273 
	tpci_föd_√xt_htˇp_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tˇ∑bûôy
,

274 
	t°¨t
, *
	tˇ¥eg
);

276 
__ölöe
 
	$PCI_FIND_NEXT_HTCAP
(
devi˚_t
 
dev
, devi˚_à
chûd
,

277 
ˇ∑bûôy
, 
°¨t
, *
ˇ¥eg
)

279 
kobj›_t
 
_m
;

280 
rc
;

281 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_föd_√xt_htˇp
);

282 
rc
 = ((
pci_föd_√xt_htˇp_t
 *Ë
_m
)(
dev
, 
chûd
, 
ˇ∑bûôy
, 
°¨t
, 
ˇ¥eg
);

283  (
rc
);

284 
	}
}

287 
kobj›_desc
 
pci_Æloc_msi_desc
;

289 
	tpci_Æloc_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, *
	tcou¡
);

291 
__ölöe
 
	$PCI_ALLOC_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
, *
cou¡
)

293 
kobj›_t
 
_m
;

294 
rc
;

295 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_Æloc_msi
);

296 
rc
 = ((
pci_Æloc_msi_t
 *Ë
_m
)(
dev
, 
chûd
, 
cou¡
);

297  (
rc
);

298 
	}
}

301 
kobj›_desc
 
pci_Æloc_msix_desc
;

303 
	tpci_Æloc_msix_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, *
	tcou¡
);

305 
__ölöe
 
	$PCI_ALLOC_MSIX
(
devi˚_t
 
dev
, devi˚_à
chûd
, *
cou¡
)

307 
kobj›_t
 
_m
;

308 
rc
;

309 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_Æloc_msix
);

310 
rc
 = ((
pci_Æloc_msix_t
 *Ë
_m
)(
dev
, 
chûd
, 
cou¡
);

311  (
rc
);

312 
	}
}

315 
kobj›_desc
 
pci_íabÀ_msi_desc
;

317 
	tpci_íabÀ_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tuöt64_t
 
	taddªss
,

318 
	tuöt16_t
 
	td©a
);

320 
__ölöe
 
	$PCI_ENABLE_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
,

321 
uöt64_t
 
addªss
, 
uöt16_t
 
d©a
)

323 
kobj›_t
 
_m
;

324 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_msi
);

325 ((
pci_íabÀ_msi_t
 *Ë
_m
)(
dev
, 
chûd
, 
addªss
, 
d©a
);

326 
	}
}

329 
kobj›_desc
 
pci_íabÀ_msix_desc
;

331 
	tpci_íabÀ_msix_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tu_öt
 
	tödex
,

332 
	tuöt64_t
 
	taddªss
, 
	tuöt32_t
 
	td©a
);

334 
__ölöe
 
	$PCI_ENABLE_MSIX
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
u_öt
 
ödex
,

335 
uöt64_t
 
addªss
, 
uöt32_t
 
d©a
)

337 
kobj›_t
 
_m
;

338 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_íabÀ_msix
);

339 ((
pci_íabÀ_msix_t
 *Ë
_m
)(
dev
, 
chûd
, 
ödex
, 
addªss
, 
d©a
);

340 
	}
}

343 
kobj›_desc
 
pci_dißbÀ_msi_desc
;

345 
	tpci_dißbÀ_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

347 
__ölöe
 
	$PCI_DISABLE_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
)

349 
kobj›_t
 
_m
;

350 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_dißbÀ_msi
);

351 ((
pci_dißbÀ_msi_t
 *Ë
_m
)(
dev
, 
chûd
);

352 
	}
}

355 
kobj›_desc
 
pci_ªm≠_msix_desc
;

357 
	tpci_ªm≠_msix_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tcou¡
,

358 c⁄° 
	tu_öt
 *
	tve˘‹s
);

360 
__ölöe
 
	$PCI_REMAP_MSIX
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
cou¡
,

361 c⁄° 
u_öt
 *
ve˘‹s
)

363 
kobj›_t
 
_m
;

364 
rc
;

365 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_ªm≠_msix
);

366 
rc
 = ((
pci_ªm≠_msix_t
 *Ë
_m
)(
dev
, 
chûd
, 
cou¡
, 
ve˘‹s
);

367  (
rc
);

368 
	}
}

371 
kobj›_desc
 
pci_ªÀa£_msi_desc
;

373 
	tpci_ªÀa£_msi_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

375 
__ölöe
 
	$PCI_RELEASE_MSI
(
devi˚_t
 
dev
, devi˚_à
chûd
)

377 
kobj›_t
 
_m
;

378 
rc
;

379 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_ªÀa£_msi
);

380 
rc
 = ((
pci_ªÀa£_msi_t
 *Ë
_m
)(
dev
, 
chûd
);

381  (
rc
);

382 
	}
}

385 
kobj›_desc
 
pci_msi_cou¡_desc
;

387 
	tpci_msi_cou¡_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

389 
__ölöe
 
	$PCI_MSI_COUNT
(
devi˚_t
 
dev
, devi˚_à
chûd
)

391 
kobj›_t
 
_m
;

392 
rc
;

393 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msi_cou¡
);

394 
rc
 = ((
pci_msi_cou¡_t
 *Ë
_m
)(
dev
, 
chûd
);

395  (
rc
);

396 
	}
}

399 
kobj›_desc
 
pci_msix_cou¡_desc
;

401 
	tpci_msix_cou¡_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

403 
__ölöe
 
	$PCI_MSIX_COUNT
(
devi˚_t
 
dev
, devi˚_à
chûd
)

405 
kobj›_t
 
_m
;

406 
rc
;

407 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msix_cou¡
);

408 
rc
 = ((
pci_msix_cou¡_t
 *Ë
_m
)(
dev
, 
chûd
);

409  (
rc
);

410 
	}
}

413 
kobj›_desc
 
pci_msix_pba_b¨_desc
;

415 
	tpci_msix_pba_b¨_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

417 
__ölöe
 
	$PCI_MSIX_PBA_BAR
(
devi˚_t
 
dev
, devi˚_à
chûd
)

419 
kobj›_t
 
_m
;

420 
rc
;

421 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msix_pba_b¨
);

422 
rc
 = ((
pci_msix_pba_b¨_t
 *Ë
_m
)(
dev
, 
chûd
);

423  (
rc
);

424 
	}
}

427 
kobj›_desc
 
pci_msix_èbÀ_b¨_desc
;

429 
	tpci_msix_èbÀ_b¨_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

431 
__ölöe
 
	$PCI_MSIX_TABLE_BAR
(
devi˚_t
 
dev
, devi˚_à
chûd
)

433 
kobj›_t
 
_m
;

434 
rc
;

435 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_msix_èbÀ_b¨
);

436 
rc
 = ((
pci_msix_èbÀ_b¨_t
 *Ë
_m
)(
dev
, 
chûd
);

437  (
rc
);

438 
	}
}

441 
kobj›_desc
 
pci_gë_id_desc
;

443 
	tpci_gë_id_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
, 
	tpci_id_ty≥
 
	tty≥
,

444 
	tuöçå_t
 *
	tid
);

446 
__ölöe
 
	$PCI_GET_ID
(
devi˚_t
 
dev
, devi˚_à
chûd
,

447 
pci_id_ty≥
 
ty≥
, 
uöçå_t
 *
id
)

449 
kobj›_t
 
_m
;

450 
rc
;

451 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_gë_id
);

452 
rc
 = ((
pci_gë_id_t
 *Ë
_m
)(
dev
, 
chûd
, 
ty≥
, 
id
);

453  (
rc
);

454 
	}
}

457 
kobj›_desc
 
pci_Æloc_devöfo_desc
;

459 
pci_devöfo
 * 
	tpci_Æloc_devöfo_t
(
	tdevi˚_t
 
	tdev
);

461 
__ölöe
 
pci_devöfo
 * 
	$PCI_ALLOC_DEVINFO
(
devi˚_t
 
dev
)

463 
kobj›_t
 
_m
;

464 
pci_devöfo
 * 
rc
;

465 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_Æloc_devöfo
);

466 
rc
 = ((
pci_Æloc_devöfo_t
 *Ë
_m
)(
dev
);

467  (
rc
);

468 
	}
}

471 
kobj›_desc
 
pci_chûd_added_desc
;

473 
	tpci_chûd_added_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

475 
__ölöe
 
	$PCI_CHILD_ADDED
(
devi˚_t
 
dev
, devi˚_à
chûd
)

477 
kobj›_t
 
_m
;

478 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_chûd_added
);

479 ((
pci_chûd_added_t
 *Ë
_m
)(
dev
, 
chûd
);

480 
	}
}

483 
kobj›_desc
 
pci_iov_©èch_desc
;

485 
	tpci_iov_©èch_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
,

486 
	tnvli°
 *
	tpf_schema
, nvli° *
	tvf_schema
,

487 c⁄° *
	t«me
);

489 
__ölöe
 
	$PCI_IOV_ATTACH
(
devi˚_t
 
dev
, devi˚_à
chûd
,

490 
nvli°
 *
pf_schema
,

491 
nvli°
 *
vf_schema
, c⁄° *
«me
)

493 
kobj›_t
 
_m
;

494 
rc
;

495 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_iov_©èch
);

496 
rc
 = ((
pci_iov_©èch_t
 *Ë
_m
)(
dev
, 
chûd
, 
pf_schema
, 
vf_schema
, 
«me
);

497  (
rc
);

498 
	}
}

501 
kobj›_desc
 
pci_iov_dëach_desc
;

503 
	tpci_iov_dëach_t
(
	tdevi˚_t
 
	tdev
, devi˚_à
	tchûd
);

505 
__ölöe
 
	$PCI_IOV_DETACH
(
devi˚_t
 
dev
, devi˚_à
chûd
)

507 
kobj›_t
 
_m
;

508 
rc
;

509 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
pci_iov_dëach
);

510 
rc
 = ((
pci_iov_dëach_t
 *Ë
_m
)(
dev
, 
chûd
);

511  (
rc
);

512 
	}
}

515 
kobj›_desc
 
pci_¸óã_iov_chûd_desc
;

517 
devi˚_t
 
	tpci_¸óã_iov_chûd_t
(
	tdevi˚_t
 
	tbus
, devi˚_à
	tpf
, 
	tuöt16_t
 
	trid
,

518 
	tuöt16_t
 
	tvid
, uöt16_à
	tdid
);

520 
__ölöe
 
devi˚_t
 
	$PCI_CREATE_IOV_CHILD
(
devi˚_t
 
bus
, devi˚_à
pf
,

521 
uöt16_t
 
rid
, uöt16_à
vid
,

522 
uöt16_t
 
did
)

524 
kobj›_t
 
_m
;

525 
devi˚_t
 
rc
;

526 
	`KOBJOPLOOKUP
(((
kobj_t
)
bus
)->
›s
,
pci_¸óã_iov_chûd
);

527 
rc
 = ((
pci_¸óã_iov_chûd_t
 *Ë
_m
)(
bus
, 
pf
, 
rid
, 
vid
, 
did
);

528  (
rc
);

529 
	}
}

	@src/nvidia/vnode_if.h

8 
vnode›_desc
 
v›_deÁu…_desc
;

9 
	~"vnode_if_ty≥def.h
"

10 
	~"vnode_if_√w¥Ÿo.h
"

11 
	sv›_i¶ocked_¨gs
 {

12 
v›_gíîic_¨gs
 
	ma_gí
;

13 
vnode
 *
	ma_vp
;

16 
vnode›_desc
 
v›_i¶ocked_desc
;

18 
VOP_ISLOCKED_AP
(
v›_i¶ocked_¨gs
 *);

19 
VOP_ISLOCKED_APV
(
v›_ve˘‹
 *
v›
, 
v›_i¶ocked_¨gs
 *);

21 
__ölöe
 
	$VOP_ISLOCKED
(

22 
vnode
 *
vp
)

24 
v›_i¶ocked_¨gs
 
a
;

26 
a
.
a_gí
.
a_desc
 = &
v›_i¶ocked_desc
;

27 
a
.
a_vp
 = 
vp
;

28  (
	`VOP_ISLOCKED_APV
(
vp
->
v_›
, &
a
));

29 
	}
}

31 
	sv›_lookup_¨gs
 {

32 
v›_gíîic_¨gs
 
	ma_gí
;

33 
vnode
 *
	ma_dvp
;

34 
vnode
 **
	ma_vµ
;

35 
comp⁄íäame
 *
	ma_˙p
;

38 
vnode›_desc
 
v›_lookup_desc
;

40 
VOP_LOOKUP_AP
(
v›_lookup_¨gs
 *);

41 
VOP_LOOKUP_APV
(
v›_ve˘‹
 *
v›
, 
v›_lookup_¨gs
 *);

43 
__ölöe
 
	$VOP_LOOKUP
(

44 
vnode
 *
dvp
,

45 
vnode
 **
vµ
,

46 
comp⁄íäame
 *
˙p
)

48 
v›_lookup_¨gs
 
a
;

50 
a
.
a_gí
.
a_desc
 = &
v›_lookup_desc
;

51 
a
.
a_dvp
 = 
dvp
;

52 
a
.
a_vµ
 = 
vµ
;

53 
a
.
a_˙p
 = 
˙p
;

54  (
	`VOP_LOOKUP_APV
(
dvp
->
v_›
, &
a
));

55 
	}
}

57 
	sv›_ˇchedlookup_¨gs
 {

58 
v›_gíîic_¨gs
 
	ma_gí
;

59 
vnode
 *
	ma_dvp
;

60 
vnode
 **
	ma_vµ
;

61 
comp⁄íäame
 *
	ma_˙p
;

64 
vnode›_desc
 
v›_ˇchedlookup_desc
;

66 
VOP_CACHEDLOOKUP_AP
(
v›_ˇchedlookup_¨gs
 *);

67 
VOP_CACHEDLOOKUP_APV
(
v›_ve˘‹
 *
v›
, 
v›_ˇchedlookup_¨gs
 *);

69 
__ölöe
 
	$VOP_CACHEDLOOKUP
(

70 
vnode
 *
dvp
,

71 
vnode
 **
vµ
,

72 
comp⁄íäame
 *
˙p
)

74 
v›_ˇchedlookup_¨gs
 
a
;

76 
a
.
a_gí
.
a_desc
 = &
v›_ˇchedlookup_desc
;

77 
a
.
a_dvp
 = 
dvp
;

78 
a
.
a_vµ
 = 
vµ
;

79 
a
.
a_˙p
 = 
˙p
;

80  (
	`VOP_CACHEDLOOKUP_APV
(
dvp
->
v_›
, &
a
));

81 
	}
}

83 
	sv›_¸óã_¨gs
 {

84 
v›_gíîic_¨gs
 
	ma_gí
;

85 
vnode
 *
	ma_dvp
;

86 
vnode
 **
	ma_vµ
;

87 
comp⁄íäame
 *
	ma_˙p
;

88 
v©å
 *
	ma_v≠
;

91 
vnode›_desc
 
v›_¸óã_desc
;

93 
VOP_CREATE_AP
(
v›_¸óã_¨gs
 *);

94 
VOP_CREATE_APV
(
v›_ve˘‹
 *
v›
, 
v›_¸óã_¨gs
 *);

96 
__ölöe
 
	$VOP_CREATE
(

97 
vnode
 *
dvp
,

98 
vnode
 **
vµ
,

99 
comp⁄íäame
 *
˙p
,

100 
v©å
 *
v≠
)

102 
v›_¸óã_¨gs
 
a
;

104 
a
.
a_gí
.
a_desc
 = &
v›_¸óã_desc
;

105 
a
.
a_dvp
 = 
dvp
;

106 
a
.
a_vµ
 = 
vµ
;

107 
a
.
a_˙p
 = 
˙p
;

108 
a
.
a_v≠
 = 
v≠
;

109  (
	`VOP_CREATE_APV
(
dvp
->
v_›
, &
a
));

110 
	}
}

112 
	sv›_whôeout_¨gs
 {

113 
v›_gíîic_¨gs
 
	ma_gí
;

114 
vnode
 *
	ma_dvp
;

115 
comp⁄íäame
 *
	ma_˙p
;

116 
	ma_Êags
;

119 
vnode›_desc
 
v›_whôeout_desc
;

121 
VOP_WHITEOUT_AP
(
v›_whôeout_¨gs
 *);

122 
VOP_WHITEOUT_APV
(
v›_ve˘‹
 *
v›
, 
v›_whôeout_¨gs
 *);

124 
__ölöe
 
	$VOP_WHITEOUT
(

125 
vnode
 *
dvp
,

126 
comp⁄íäame
 *
˙p
,

127 
Êags
)

129 
v›_whôeout_¨gs
 
a
;

131 
a
.
a_gí
.
a_desc
 = &
v›_whôeout_desc
;

132 
a
.
a_dvp
 = 
dvp
;

133 
a
.
a_˙p
 = 
˙p
;

134 
a
.
a_Êags
 = 
Êags
;

135  (
	`VOP_WHITEOUT_APV
(
dvp
->
v_›
, &
a
));

136 
	}
}

138 
	sv›_mknod_¨gs
 {

139 
v›_gíîic_¨gs
 
	ma_gí
;

140 
vnode
 *
	ma_dvp
;

141 
vnode
 **
	ma_vµ
;

142 
comp⁄íäame
 *
	ma_˙p
;

143 
v©å
 *
	ma_v≠
;

146 
vnode›_desc
 
v›_mknod_desc
;

148 
VOP_MKNOD_AP
(
v›_mknod_¨gs
 *);

149 
VOP_MKNOD_APV
(
v›_ve˘‹
 *
v›
, 
v›_mknod_¨gs
 *);

151 
__ölöe
 
	$VOP_MKNOD
(

152 
vnode
 *
dvp
,

153 
vnode
 **
vµ
,

154 
comp⁄íäame
 *
˙p
,

155 
v©å
 *
v≠
)

157 
v›_mknod_¨gs
 
a
;

159 
a
.
a_gí
.
a_desc
 = &
v›_mknod_desc
;

160 
a
.
a_dvp
 = 
dvp
;

161 
a
.
a_vµ
 = 
vµ
;

162 
a
.
a_˙p
 = 
˙p
;

163 
a
.
a_v≠
 = 
v≠
;

164  (
	`VOP_MKNOD_APV
(
dvp
->
v_›
, &
a
));

165 
	}
}

167 
	sv›_›í_¨gs
 {

168 
v›_gíîic_¨gs
 
	ma_gí
;

169 
vnode
 *
	ma_vp
;

170 
	ma_mode
;

171 
u¸ed
 *
	ma_¸ed
;

172 
thªad
 *
	ma_td
;

173 
fûe
 *
	ma_Â
;

176 
vnode›_desc
 
v›_›í_desc
;

178 
VOP_OPEN_AP
(
v›_›í_¨gs
 *);

179 
VOP_OPEN_APV
(
v›_ve˘‹
 *
v›
, 
v›_›í_¨gs
 *);

181 
__ölöe
 
	$VOP_OPEN
(

182 
vnode
 *
vp
,

183 
mode
,

184 
u¸ed
 *
¸ed
,

185 
thªad
 *
td
,

186 
fûe
 *
Â
)

188 
v›_›í_¨gs
 
a
;

190 
a
.
a_gí
.
a_desc
 = &
v›_›í_desc
;

191 
a
.
a_vp
 = 
vp
;

192 
a
.
a_mode
 = 
mode
;

193 
a
.
a_¸ed
 = 
¸ed
;

194 
a
.
a_td
 = 
td
;

195 
a
.
a_Â
 = 
Â
;

196  (
	`VOP_OPEN_APV
(
vp
->
v_›
, &
a
));

197 
	}
}

199 
	sv›_˛o£_¨gs
 {

200 
v›_gíîic_¨gs
 
	ma_gí
;

201 
vnode
 *
	ma_vp
;

202 
	ma_fÊag
;

203 
u¸ed
 *
	ma_¸ed
;

204 
thªad
 *
	ma_td
;

207 
vnode›_desc
 
v›_˛o£_desc
;

209 
VOP_CLOSE_AP
(
v›_˛o£_¨gs
 *);

210 
VOP_CLOSE_APV
(
v›_ve˘‹
 *
v›
, 
v›_˛o£_¨gs
 *);

212 
__ölöe
 
	$VOP_CLOSE
(

213 
vnode
 *
vp
,

214 
fÊag
,

215 
u¸ed
 *
¸ed
,

216 
thªad
 *
td
)

218 
v›_˛o£_¨gs
 
a
;

220 
a
.
a_gí
.
a_desc
 = &
v›_˛o£_desc
;

221 
a
.
a_vp
 = 
vp
;

222 
a
.
a_fÊag
 = 
fÊag
;

223 
a
.
a_¸ed
 = 
¸ed
;

224 
a
.
a_td
 = 
td
;

225  (
	`VOP_CLOSE_APV
(
vp
->
v_›
, &
a
));

226 
	}
}

228 
	sv›_ac˚ss_¨gs
 {

229 
v›_gíîic_¨gs
 
	ma_gí
;

230 
vnode
 *
	ma_vp
;

231 
accmode_t
 
	ma_accmode
;

232 
u¸ed
 *
	ma_¸ed
;

233 
thªad
 *
	ma_td
;

236 
vnode›_desc
 
v›_ac˚ss_desc
;

238 
VOP_ACCESS_AP
(
v›_ac˚ss_¨gs
 *);

239 
VOP_ACCESS_APV
(
v›_ve˘‹
 *
v›
, 
v›_ac˚ss_¨gs
 *);

241 
__ölöe
 
	$VOP_ACCESS
(

242 
vnode
 *
vp
,

243 
accmode_t
 
accmode
,

244 
u¸ed
 *
¸ed
,

245 
thªad
 *
td
)

247 
v›_ac˚ss_¨gs
 
a
;

249 
a
.
a_gí
.
a_desc
 = &
v›_ac˚ss_desc
;

250 
a
.
a_vp
 = 
vp
;

251 
a
.
a_accmode
 = 
accmode
;

252 
a
.
a_¸ed
 = 
¸ed
;

253 
a
.
a_td
 = 
td
;

254  (
	`VOP_ACCESS_APV
(
vp
->
v_›
, &
a
));

255 
	}
}

257 
	sv›_ac˚ssx_¨gs
 {

258 
v›_gíîic_¨gs
 
	ma_gí
;

259 
vnode
 *
	ma_vp
;

260 
accmode_t
 
	ma_accmode
;

261 
u¸ed
 *
	ma_¸ed
;

262 
thªad
 *
	ma_td
;

265 
vnode›_desc
 
v›_ac˚ssx_desc
;

267 
VOP_ACCESSX_AP
(
v›_ac˚ssx_¨gs
 *);

268 
VOP_ACCESSX_APV
(
v›_ve˘‹
 *
v›
, 
v›_ac˚ssx_¨gs
 *);

270 
__ölöe
 
	$VOP_ACCESSX
(

271 
vnode
 *
vp
,

272 
accmode_t
 
accmode
,

273 
u¸ed
 *
¸ed
,

274 
thªad
 *
td
)

276 
v›_ac˚ssx_¨gs
 
a
;

278 
a
.
a_gí
.
a_desc
 = &
v›_ac˚ssx_desc
;

279 
a
.
a_vp
 = 
vp
;

280 
a
.
a_accmode
 = 
accmode
;

281 
a
.
a_¸ed
 = 
¸ed
;

282 
a
.
a_td
 = 
td
;

283  (
	`VOP_ACCESSX_APV
(
vp
->
v_›
, &
a
));

284 
	}
}

286 
	sv›_gë©å_¨gs
 {

287 
v›_gíîic_¨gs
 
	ma_gí
;

288 
vnode
 *
	ma_vp
;

289 
v©å
 *
	ma_v≠
;

290 
u¸ed
 *
	ma_¸ed
;

293 
vnode›_desc
 
v›_gë©å_desc
;

295 
VOP_GETATTR_AP
(
v›_gë©å_¨gs
 *);

296 
VOP_GETATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë©å_¨gs
 *);

298 
__ölöe
 
	$VOP_GETATTR
(

299 
vnode
 *
vp
,

300 
v©å
 *
v≠
,

301 
u¸ed
 *
¸ed
)

303 
v›_gë©å_¨gs
 
a
;

305 
a
.
a_gí
.
a_desc
 = &
v›_gë©å_desc
;

306 
a
.
a_vp
 = 
vp
;

307 
a
.
a_v≠
 = 
v≠
;

308 
a
.
a_¸ed
 = 
¸ed
;

309  (
	`VOP_GETATTR_APV
(
vp
->
v_›
, &
a
));

310 
	}
}

312 
	sv›_£èâr_¨gs
 {

313 
v›_gíîic_¨gs
 
	ma_gí
;

314 
vnode
 *
	ma_vp
;

315 
v©å
 *
	ma_v≠
;

316 
u¸ed
 *
	ma_¸ed
;

319 
vnode›_desc
 
v›_£èâr_desc
;

321 
VOP_SETATTR_AP
(
v›_£èâr_¨gs
 *);

322 
VOP_SETATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_£èâr_¨gs
 *);

324 
__ölöe
 
	$VOP_SETATTR
(

325 
vnode
 *
vp
,

326 
v©å
 *
v≠
,

327 
u¸ed
 *
¸ed
)

329 
v›_£èâr_¨gs
 
a
;

331 
a
.
a_gí
.
a_desc
 = &
v›_£èâr_desc
;

332 
a
.
a_vp
 = 
vp
;

333 
a
.
a_v≠
 = 
v≠
;

334 
a
.
a_¸ed
 = 
¸ed
;

335  (
	`VOP_SETATTR_APV
(
vp
->
v_›
, &
a
));

336 
	}
}

338 
	sv›_m¨k©ime_¨gs
 {

339 
v›_gíîic_¨gs
 
	ma_gí
;

340 
vnode
 *
	ma_vp
;

343 
vnode›_desc
 
v›_m¨k©ime_desc
;

345 
VOP_MARKATIME_AP
(
v›_m¨k©ime_¨gs
 *);

346 
VOP_MARKATIME_APV
(
v›_ve˘‹
 *
v›
, 
v›_m¨k©ime_¨gs
 *);

348 
__ölöe
 
	$VOP_MARKATIME
(

349 
vnode
 *
vp
)

351 
v›_m¨k©ime_¨gs
 
a
;

353 
a
.
a_gí
.
a_desc
 = &
v›_m¨k©ime_desc
;

354 
a
.
a_vp
 = 
vp
;

355  (
	`VOP_MARKATIME_APV
(
vp
->
v_›
, &
a
));

356 
	}
}

358 
	sv›_ªad_¨gs
 {

359 
v›_gíîic_¨gs
 
	ma_gí
;

360 
vnode
 *
	ma_vp
;

361 
uio
 *
	ma_uio
;

362 
	ma_ioÊag
;

363 
u¸ed
 *
	ma_¸ed
;

366 
vnode›_desc
 
v›_ªad_desc
;

368 
VOP_READ_AP
(
v›_ªad_¨gs
 *);

369 
VOP_READ_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªad_¨gs
 *);

371 
__ölöe
 
	$VOP_READ
(

372 
vnode
 *
vp
,

373 
uio
 *uio,

374 
ioÊag
,

375 
u¸ed
 *
¸ed
)

377 
v›_ªad_¨gs
 
a
;

379 
a
.
a_gí
.
a_desc
 = &
v›_ªad_desc
;

380 
a
.
a_vp
 = 
vp
;

381 
a
.
a_uio
 = 
uio
;

382 
a
.
a_ioÊag
 = 
ioÊag
;

383 
a
.
a_¸ed
 = 
¸ed
;

384  (
	`VOP_READ_APV
(
vp
->
v_›
, &
a
));

385 
	}
}

387 
	sv›_wrôe_¨gs
 {

388 
v›_gíîic_¨gs
 
	ma_gí
;

389 
vnode
 *
	ma_vp
;

390 
uio
 *
	ma_uio
;

391 
	ma_ioÊag
;

392 
u¸ed
 *
	ma_¸ed
;

395 
vnode›_desc
 
v›_wrôe_desc
;

397 
VOP_WRITE_AP
(
v›_wrôe_¨gs
 *);

398 
VOP_WRITE_APV
(
v›_ve˘‹
 *
v›
, 
v›_wrôe_¨gs
 *);

400 
__ölöe
 
	$VOP_WRITE
(

401 
vnode
 *
vp
,

402 
uio
 *uio,

403 
ioÊag
,

404 
u¸ed
 *
¸ed
)

406 
v›_wrôe_¨gs
 
a
;

408 
a
.
a_gí
.
a_desc
 = &
v›_wrôe_desc
;

409 
a
.
a_vp
 = 
vp
;

410 
a
.
a_uio
 = 
uio
;

411 
a
.
a_ioÊag
 = 
ioÊag
;

412 
a
.
a_¸ed
 = 
¸ed
;

413  (
	`VOP_WRITE_APV
(
vp
->
v_›
, &
a
));

414 
	}
}

416 
	sv›_io˘l_¨gs
 {

417 
v›_gíîic_¨gs
 
	ma_gí
;

418 
vnode
 *
	ma_vp
;

419 
u_l⁄g
 
	ma_comm™d
;

420 *
	ma_d©a
;

421 
	ma_fÊag
;

422 
u¸ed
 *
	ma_¸ed
;

423 
thªad
 *
	ma_td
;

426 
vnode›_desc
 
v›_io˘l_desc
;

428 
VOP_IOCTL_AP
(
v›_io˘l_¨gs
 *);

429 
VOP_IOCTL_APV
(
v›_ve˘‹
 *
v›
, 
v›_io˘l_¨gs
 *);

431 
__ölöe
 
	$VOP_IOCTL
(

432 
vnode
 *
vp
,

433 
u_l⁄g
 
comm™d
,

434 *
d©a
,

435 
fÊag
,

436 
u¸ed
 *
¸ed
,

437 
thªad
 *
td
)

439 
v›_io˘l_¨gs
 
a
;

441 
a
.
a_gí
.
a_desc
 = &
v›_io˘l_desc
;

442 
a
.
a_vp
 = 
vp
;

443 
a
.
a_comm™d
 = 
comm™d
;

444 
a
.
a_d©a
 = 
d©a
;

445 
a
.
a_fÊag
 = 
fÊag
;

446 
a
.
a_¸ed
 = 
¸ed
;

447 
a
.
a_td
 = 
td
;

448  (
	`VOP_IOCTL_APV
(
vp
->
v_›
, &
a
));

449 
	}
}

451 
	sv›_pﬁl_¨gs
 {

452 
v›_gíîic_¨gs
 
	ma_gí
;

453 
vnode
 *
	ma_vp
;

454 
	ma_evíts
;

455 
u¸ed
 *
	ma_¸ed
;

456 
thªad
 *
	ma_td
;

459 
vnode›_desc
 
v›_pﬁl_desc
;

461 
VOP_POLL_AP
(
v›_pﬁl_¨gs
 *);

462 
VOP_POLL_APV
(
v›_ve˘‹
 *
v›
, 
v›_pﬁl_¨gs
 *);

464 
__ölöe
 
	$VOP_POLL
(

465 
vnode
 *
vp
,

466 
evíts
,

467 
u¸ed
 *
¸ed
,

468 
thªad
 *
td
)

470 
v›_pﬁl_¨gs
 
a
;

472 
a
.
a_gí
.
a_desc
 = &
v›_pﬁl_desc
;

473 
a
.
a_vp
 = 
vp
;

474 
a
.
a_evíts
 = 
evíts
;

475 
a
.
a_¸ed
 = 
¸ed
;

476 
a
.
a_td
 = 
td
;

477  (
	`VOP_POLL_APV
(
vp
->
v_›
, &
a
));

478 
	}
}

480 
	sv›_kqfûãr_¨gs
 {

481 
v›_gíîic_¨gs
 
	ma_gí
;

482 
vnode
 *
	ma_vp
;

483 
knŸe
 *
	ma_kn
;

486 
vnode›_desc
 
v›_kqfûãr_desc
;

488 
VOP_KQFILTER_AP
(
v›_kqfûãr_¨gs
 *);

489 
VOP_KQFILTER_APV
(
v›_ve˘‹
 *
v›
, 
v›_kqfûãr_¨gs
 *);

491 
__ölöe
 
	$VOP_KQFILTER
(

492 
vnode
 *
vp
,

493 
knŸe
 *
kn
)

495 
v›_kqfûãr_¨gs
 
a
;

497 
a
.
a_gí
.
a_desc
 = &
v›_kqfûãr_desc
;

498 
a
.
a_vp
 = 
vp
;

499 
a
.
a_kn
 = 
kn
;

500  (
	`VOP_KQFILTER_APV
(
vp
->
v_›
, &
a
));

501 
	}
}

503 
	sv›_ªvoke_¨gs
 {

504 
v›_gíîic_¨gs
 
	ma_gí
;

505 
vnode
 *
	ma_vp
;

506 
	ma_Êags
;

509 
vnode›_desc
 
v›_ªvoke_desc
;

511 
VOP_REVOKE_AP
(
v›_ªvoke_¨gs
 *);

512 
VOP_REVOKE_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªvoke_¨gs
 *);

514 
__ölöe
 
	$VOP_REVOKE
(

515 
vnode
 *
vp
,

516 
Êags
)

518 
v›_ªvoke_¨gs
 
a
;

520 
a
.
a_gí
.
a_desc
 = &
v›_ªvoke_desc
;

521 
a
.
a_vp
 = 
vp
;

522 
a
.
a_Êags
 = 
Êags
;

523  (
	`VOP_REVOKE_APV
(
vp
->
v_›
, &
a
));

524 
	}
}

526 
	sv›_fsync_¨gs
 {

527 
v›_gíîic_¨gs
 
	ma_gí
;

528 
vnode
 *
	ma_vp
;

529 
	ma_waôf‹
;

530 
thªad
 *
	ma_td
;

533 
vnode›_desc
 
v›_fsync_desc
;

535 
VOP_FSYNC_AP
(
v›_fsync_¨gs
 *);

536 
VOP_FSYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_fsync_¨gs
 *);

538 
__ölöe
 
	$VOP_FSYNC
(

539 
vnode
 *
vp
,

540 
waôf‹
,

541 
thªad
 *
td
)

543 
v›_fsync_¨gs
 
a
;

545 
a
.
a_gí
.
a_desc
 = &
v›_fsync_desc
;

546 
a
.
a_vp
 = 
vp
;

547 
a
.
a_waôf‹
 = 
waôf‹
;

548 
a
.
a_td
 = 
td
;

549  (
	`VOP_FSYNC_APV
(
vp
->
v_›
, &
a
));

550 
	}
}

552 
	sv›_ªmove_¨gs
 {

553 
v›_gíîic_¨gs
 
	ma_gí
;

554 
vnode
 *
	ma_dvp
;

555 
vnode
 *
	ma_vp
;

556 
comp⁄íäame
 *
	ma_˙p
;

559 
vnode›_desc
 
v›_ªmove_desc
;

561 
VOP_REMOVE_AP
(
v›_ªmove_¨gs
 *);

562 
VOP_REMOVE_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªmove_¨gs
 *);

564 
__ölöe
 
	$VOP_REMOVE
(

565 
vnode
 *
dvp
,

566 
vnode
 *
vp
,

567 
comp⁄íäame
 *
˙p
)

569 
v›_ªmove_¨gs
 
a
;

571 
a
.
a_gí
.
a_desc
 = &
v›_ªmove_desc
;

572 
a
.
a_dvp
 = 
dvp
;

573 
a
.
a_vp
 = 
vp
;

574 
a
.
a_˙p
 = 
˙p
;

575  (
	`VOP_REMOVE_APV
(
dvp
->
v_›
, &
a
));

576 
	}
}

578 
	sv›_lök_¨gs
 {

579 
v›_gíîic_¨gs
 
	ma_gí
;

580 
vnode
 *
	ma_tdvp
;

581 
vnode
 *
	ma_vp
;

582 
comp⁄íäame
 *
	ma_˙p
;

585 
vnode›_desc
 
v›_lök_desc
;

587 
VOP_LINK_AP
(
v›_lök_¨gs
 *);

588 
VOP_LINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_lök_¨gs
 *);

590 
__ölöe
 
	$VOP_LINK
(

591 
vnode
 *
tdvp
,

592 
vnode
 *
vp
,

593 
comp⁄íäame
 *
˙p
)

595 
v›_lök_¨gs
 
a
;

597 
a
.
a_gí
.
a_desc
 = &
v›_lök_desc
;

598 
a
.
a_tdvp
 = 
tdvp
;

599 
a
.
a_vp
 = 
vp
;

600 
a
.
a_˙p
 = 
˙p
;

601  (
	`VOP_LINK_APV
(
tdvp
->
v_›
, &
a
));

602 
	}
}

604 
	sv›_ª«me_¨gs
 {

605 
v›_gíîic_¨gs
 
	ma_gí
;

606 
vnode
 *
	ma_fdvp
;

607 
vnode
 *
	ma_fvp
;

608 
comp⁄íäame
 *
	ma_f˙p
;

609 
vnode
 *
	ma_tdvp
;

610 
vnode
 *
	ma_tvp
;

611 
comp⁄íäame
 *
	ma_t˙p
;

614 
vnode›_desc
 
v›_ª«me_desc
;

616 
VOP_RENAME_AP
(
v›_ª«me_¨gs
 *);

617 
VOP_RENAME_APV
(
v›_ve˘‹
 *
v›
, 
v›_ª«me_¨gs
 *);

619 
__ölöe
 
	$VOP_RENAME
(

620 
vnode
 *
fdvp
,

621 
vnode
 *
fvp
,

622 
comp⁄íäame
 *
f˙p
,

623 
vnode
 *
tdvp
,

624 
vnode
 *
tvp
,

625 
comp⁄íäame
 *
t˙p
)

627 
v›_ª«me_¨gs
 
a
;

629 
a
.
a_gí
.
a_desc
 = &
v›_ª«me_desc
;

630 
a
.
a_fdvp
 = 
fdvp
;

631 
a
.
a_fvp
 = 
fvp
;

632 
a
.
a_f˙p
 = 
f˙p
;

633 
a
.
a_tdvp
 = 
tdvp
;

634 
a
.
a_tvp
 = 
tvp
;

635 
a
.
a_t˙p
 = 
t˙p
;

636  (
	`VOP_RENAME_APV
(
fdvp
->
v_›
, &
a
));

637 
	}
}

639 
	sv›_mkdú_¨gs
 {

640 
v›_gíîic_¨gs
 
	ma_gí
;

641 
vnode
 *
	ma_dvp
;

642 
vnode
 **
	ma_vµ
;

643 
comp⁄íäame
 *
	ma_˙p
;

644 
v©å
 *
	ma_v≠
;

647 
vnode›_desc
 
v›_mkdú_desc
;

649 
VOP_MKDIR_AP
(
v›_mkdú_¨gs
 *);

650 
VOP_MKDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_mkdú_¨gs
 *);

652 
__ölöe
 
	$VOP_MKDIR
(

653 
vnode
 *
dvp
,

654 
vnode
 **
vµ
,

655 
comp⁄íäame
 *
˙p
,

656 
v©å
 *
v≠
)

658 
v›_mkdú_¨gs
 
a
;

660 
a
.
a_gí
.
a_desc
 = &
v›_mkdú_desc
;

661 
a
.
a_dvp
 = 
dvp
;

662 
a
.
a_vµ
 = 
vµ
;

663 
a
.
a_˙p
 = 
˙p
;

664 
a
.
a_v≠
 = 
v≠
;

665  (
	`VOP_MKDIR_APV
(
dvp
->
v_›
, &
a
));

666 
	}
}

668 
	sv›_rmdú_¨gs
 {

669 
v›_gíîic_¨gs
 
	ma_gí
;

670 
vnode
 *
	ma_dvp
;

671 
vnode
 *
	ma_vp
;

672 
comp⁄íäame
 *
	ma_˙p
;

675 
vnode›_desc
 
v›_rmdú_desc
;

677 
VOP_RMDIR_AP
(
v›_rmdú_¨gs
 *);

678 
VOP_RMDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_rmdú_¨gs
 *);

680 
__ölöe
 
	$VOP_RMDIR
(

681 
vnode
 *
dvp
,

682 
vnode
 *
vp
,

683 
comp⁄íäame
 *
˙p
)

685 
v›_rmdú_¨gs
 
a
;

687 
a
.
a_gí
.
a_desc
 = &
v›_rmdú_desc
;

688 
a
.
a_dvp
 = 
dvp
;

689 
a
.
a_vp
 = 
vp
;

690 
a
.
a_˙p
 = 
˙p
;

691  (
	`VOP_RMDIR_APV
(
dvp
->
v_›
, &
a
));

692 
	}
}

694 
	sv›_symlök_¨gs
 {

695 
v›_gíîic_¨gs
 
	ma_gí
;

696 
vnode
 *
	ma_dvp
;

697 
vnode
 **
	ma_vµ
;

698 
comp⁄íäame
 *
	ma_˙p
;

699 
v©å
 *
	ma_v≠
;

700 *
	ma_èrgë
;

703 
vnode›_desc
 
v›_symlök_desc
;

705 
VOP_SYMLINK_AP
(
v›_symlök_¨gs
 *);

706 
VOP_SYMLINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_symlök_¨gs
 *);

708 
__ölöe
 
	$VOP_SYMLINK
(

709 
vnode
 *
dvp
,

710 
vnode
 **
vµ
,

711 
comp⁄íäame
 *
˙p
,

712 
v©å
 *
v≠
,

713 *
èrgë
)

715 
v›_symlök_¨gs
 
a
;

717 
a
.
a_gí
.
a_desc
 = &
v›_symlök_desc
;

718 
a
.
a_dvp
 = 
dvp
;

719 
a
.
a_vµ
 = 
vµ
;

720 
a
.
a_˙p
 = 
˙p
;

721 
a
.
a_v≠
 = 
v≠
;

722 
a
.
a_èrgë
 = 
èrgë
;

723  (
	`VOP_SYMLINK_APV
(
dvp
->
v_›
, &
a
));

724 
	}
}

726 
	sv›_ªaddú_¨gs
 {

727 
v›_gíîic_¨gs
 
	ma_gí
;

728 
vnode
 *
	ma_vp
;

729 
uio
 *
	ma_uio
;

730 
u¸ed
 *
	ma_¸ed
;

731 *
	ma_eofÊag
;

732 *
	ma_ncookõs
;

733 
u_l⁄g
 **
	ma_cookõs
;

736 
vnode›_desc
 
v›_ªaddú_desc
;

738 
VOP_READDIR_AP
(
v›_ªaddú_¨gs
 *);

739 
VOP_READDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªaddú_¨gs
 *);

741 
__ölöe
 
	$VOP_READDIR
(

742 
vnode
 *
vp
,

743 
uio
 *uio,

744 
u¸ed
 *
¸ed
,

745 *
eofÊag
,

746 *
ncookõs
,

747 
u_l⁄g
 **
cookõs
)

749 
v›_ªaddú_¨gs
 
a
;

751 
a
.
a_gí
.
a_desc
 = &
v›_ªaddú_desc
;

752 
a
.
a_vp
 = 
vp
;

753 
a
.
a_uio
 = 
uio
;

754 
a
.
a_¸ed
 = 
¸ed
;

755 
a
.
a_eofÊag
 = 
eofÊag
;

756 
a
.
a_ncookõs
 = 
ncookõs
;

757 
a
.
a_cookõs
 = 
cookõs
;

758  (
	`VOP_READDIR_APV
(
vp
->
v_›
, &
a
));

759 
	}
}

761 
	sv›_ªadlök_¨gs
 {

762 
v›_gíîic_¨gs
 
	ma_gí
;

763 
vnode
 *
	ma_vp
;

764 
uio
 *
	ma_uio
;

765 
u¸ed
 *
	ma_¸ed
;

768 
vnode›_desc
 
v›_ªadlök_desc
;

770 
VOP_READLINK_AP
(
v›_ªadlök_¨gs
 *);

771 
VOP_READLINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªadlök_¨gs
 *);

773 
__ölöe
 
	$VOP_READLINK
(

774 
vnode
 *
vp
,

775 
uio
 *uio,

776 
u¸ed
 *
¸ed
)

778 
v›_ªadlök_¨gs
 
a
;

780 
a
.
a_gí
.
a_desc
 = &
v›_ªadlök_desc
;

781 
a
.
a_vp
 = 
vp
;

782 
a
.
a_uio
 = 
uio
;

783 
a
.
a_¸ed
 = 
¸ed
;

784  (
	`VOP_READLINK_APV
(
vp
->
v_›
, &
a
));

785 
	}
}

787 
	sv›_öa˘ive_¨gs
 {

788 
v›_gíîic_¨gs
 
	ma_gí
;

789 
vnode
 *
	ma_vp
;

790 
thªad
 *
	ma_td
;

793 
vnode›_desc
 
v›_öa˘ive_desc
;

795 
VOP_INACTIVE_AP
(
v›_öa˘ive_¨gs
 *);

796 
VOP_INACTIVE_APV
(
v›_ve˘‹
 *
v›
, 
v›_öa˘ive_¨gs
 *);

798 
__ölöe
 
	$VOP_INACTIVE
(

799 
vnode
 *
vp
,

800 
thªad
 *
td
)

802 
v›_öa˘ive_¨gs
 
a
;

804 
a
.
a_gí
.
a_desc
 = &
v›_öa˘ive_desc
;

805 
a
.
a_vp
 = 
vp
;

806 
a
.
a_td
 = 
td
;

807  (
	`VOP_INACTIVE_APV
(
vp
->
v_›
, &
a
));

808 
	}
}

810 
	sv›_ª˛aim_¨gs
 {

811 
v›_gíîic_¨gs
 
	ma_gí
;

812 
vnode
 *
	ma_vp
;

813 
thªad
 *
	ma_td
;

816 
vnode›_desc
 
v›_ª˛aim_desc
;

818 
VOP_RECLAIM_AP
(
v›_ª˛aim_¨gs
 *);

819 
VOP_RECLAIM_APV
(
v›_ve˘‹
 *
v›
, 
v›_ª˛aim_¨gs
 *);

821 
__ölöe
 
	$VOP_RECLAIM
(

822 
vnode
 *
vp
,

823 
thªad
 *
td
)

825 
v›_ª˛aim_¨gs
 
a
;

827 
a
.
a_gí
.
a_desc
 = &
v›_ª˛aim_desc
;

828 
a
.
a_vp
 = 
vp
;

829 
a
.
a_td
 = 
td
;

830  (
	`VOP_RECLAIM_APV
(
vp
->
v_›
, &
a
));

831 
	}
}

833 
	sv›_lock1_¨gs
 {

834 
v›_gíîic_¨gs
 
	ma_gí
;

835 
vnode
 *
	ma_vp
;

836 
	ma_Êags
;

837 *
	ma_fûe
;

838 
	ma_löe
;

841 
vnode›_desc
 
v›_lock1_desc
;

843 
VOP_LOCK1_AP
(
v›_lock1_¨gs
 *);

844 
VOP_LOCK1_APV
(
v›_ve˘‹
 *
v›
, 
v›_lock1_¨gs
 *);

846 
__ölöe
 
	$VOP_LOCK1
(

847 
vnode
 *
vp
,

848 
Êags
,

849 *
fûe
,

850 
löe
)

852 
v›_lock1_¨gs
 
a
;

854 
a
.
a_gí
.
a_desc
 = &
v›_lock1_desc
;

855 
a
.
a_vp
 = 
vp
;

856 
a
.
a_Êags
 = 
Êags
;

857 
a
.
a_fûe
 = 
fûe
;

858 
a
.
a_löe
 = 
löe
;

859  (
	`VOP_LOCK1_APV
(
vp
->
v_›
, &
a
));

860 
	}
}

862 
	sv›_u∆ock_¨gs
 {

863 
v›_gíîic_¨gs
 
	ma_gí
;

864 
vnode
 *
	ma_vp
;

865 
	ma_Êags
;

868 
vnode›_desc
 
v›_u∆ock_desc
;

870 
VOP_UNLOCK_AP
(
v›_u∆ock_¨gs
 *);

871 
VOP_UNLOCK_APV
(
v›_ve˘‹
 *
v›
, 
v›_u∆ock_¨gs
 *);

873 
__ölöe
 
	$VOP_UNLOCK
(

874 
vnode
 *
vp
,

875 
Êags
)

877 
v›_u∆ock_¨gs
 
a
;

879 
a
.
a_gí
.
a_desc
 = &
v›_u∆ock_desc
;

880 
a
.
a_vp
 = 
vp
;

881 
a
.
a_Êags
 = 
Êags
;

882  (
	`VOP_UNLOCK_APV
(
vp
->
v_›
, &
a
));

883 
	}
}

885 
	sv›_bm≠_¨gs
 {

886 
v›_gíîic_¨gs
 
	ma_gí
;

887 
vnode
 *
	ma_vp
;

888 
daddr_t
 
	ma_bn
;

889 
bufobj
 **
	ma_b›
;

890 
daddr_t
 *
	ma_b≈
;

891 *
	ma_ru≈
;

892 *
	ma_runb
;

895 
vnode›_desc
 
v›_bm≠_desc
;

897 
VOP_BMAP_AP
(
v›_bm≠_¨gs
 *);

898 
VOP_BMAP_APV
(
v›_ve˘‹
 *
v›
, 
v›_bm≠_¨gs
 *);

900 
__ölöe
 
	$VOP_BMAP
(

901 
vnode
 *
vp
,

902 
daddr_t
 
bn
,

903 
bufobj
 **
b›
,

904 
daddr_t
 *
b≈
,

905 *
ru≈
,

906 *
runb
)

908 
v›_bm≠_¨gs
 
a
;

910 
a
.
a_gí
.
a_desc
 = &
v›_bm≠_desc
;

911 
a
.
a_vp
 = 
vp
;

912 
a
.
a_bn
 = 
bn
;

913 
a
.
a_b›
 = 
b›
;

914 
a
.
a_b≈
 = 
b≈
;

915 
a
.
a_ru≈
 = 
ru≈
;

916 
a
.
a_runb
 = 
runb
;

917  (
	`VOP_BMAP_APV
(
vp
->
v_›
, &
a
));

918 
	}
}

920 
	sv›_°øãgy_¨gs
 {

921 
v›_gíîic_¨gs
 
	ma_gí
;

922 
vnode
 *
	ma_vp
;

923 
buf
 *
	ma_bp
;

926 
vnode›_desc
 
v›_°øãgy_desc
;

928 
VOP_STRATEGY_AP
(
v›_°øãgy_¨gs
 *);

929 
VOP_STRATEGY_APV
(
v›_ve˘‹
 *
v›
, 
v›_°øãgy_¨gs
 *);

931 
__ölöe
 
	$VOP_STRATEGY
(

932 
vnode
 *
vp
,

933 
buf
 *
bp
)

935 
v›_°øãgy_¨gs
 
a
;

937 
a
.
a_gí
.
a_desc
 = &
v›_°øãgy_desc
;

938 
a
.
a_vp
 = 
vp
;

939 
a
.
a_bp
 = 
bp
;

940  (
	`VOP_STRATEGY_APV
(
vp
->
v_›
, &
a
));

941 
	}
}

943 
	sv›_gëwrôemou¡_¨gs
 {

944 
v›_gíîic_¨gs
 
	ma_gí
;

945 
vnode
 *
	ma_vp
;

946 
mou¡
 **
	ma_mµ
;

949 
vnode›_desc
 
v›_gëwrôemou¡_desc
;

951 
VOP_GETWRITEMOUNT_AP
(
v›_gëwrôemou¡_¨gs
 *);

952 
VOP_GETWRITEMOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëwrôemou¡_¨gs
 *);

954 
__ölöe
 
	$VOP_GETWRITEMOUNT
(

955 
vnode
 *
vp
,

956 
mou¡
 **
mµ
)

958 
v›_gëwrôemou¡_¨gs
 
a
;

960 
a
.
a_gí
.
a_desc
 = &
v›_gëwrôemou¡_desc
;

961 
a
.
a_vp
 = 
vp
;

962 
a
.
a_mµ
 = 
mµ
;

963  (
	`VOP_GETWRITEMOUNT_APV
(
vp
->
v_›
, &
a
));

964 
	}
}

966 
	sv›_¥öt_¨gs
 {

967 
v›_gíîic_¨gs
 
	ma_gí
;

968 
vnode
 *
	ma_vp
;

971 
vnode›_desc
 
v›_¥öt_desc
;

973 
VOP_PRINT_AP
(
v›_¥öt_¨gs
 *);

974 
VOP_PRINT_APV
(
v›_ve˘‹
 *
v›
, 
v›_¥öt_¨gs
 *);

976 
__ölöe
 
	$VOP_PRINT
(

977 
vnode
 *
vp
)

979 
v›_¥öt_¨gs
 
a
;

981 
a
.
a_gí
.
a_desc
 = &
v›_¥öt_desc
;

982 
a
.
a_vp
 = 
vp
;

983  (
	`VOP_PRINT_APV
(
vp
->
v_›
, &
a
));

984 
	}
}

986 
	sv›_∑thc⁄f_¨gs
 {

987 
v›_gíîic_¨gs
 
	ma_gí
;

988 
vnode
 *
	ma_vp
;

989 
	ma_«me
;

990 *
	ma_ªtvÆ
;

993 
vnode›_desc
 
v›_∑thc⁄f_desc
;

995 
VOP_PATHCONF_AP
(
v›_∑thc⁄f_¨gs
 *);

996 
VOP_PATHCONF_APV
(
v›_ve˘‹
 *
v›
, 
v›_∑thc⁄f_¨gs
 *);

998 
__ölöe
 
	$VOP_PATHCONF
(

999 
vnode
 *
vp
,

1000 
«me
,

1001 *
ªtvÆ
)

1003 
v›_∑thc⁄f_¨gs
 
a
;

1005 
a
.
a_gí
.
a_desc
 = &
v›_∑thc⁄f_desc
;

1006 
a
.
a_vp
 = 
vp
;

1007 
a
.
a_«me
 = 
«me
;

1008 
a
.
a_ªtvÆ
 = 
ªtvÆ
;

1009  (
	`VOP_PATHCONF_APV
(
vp
->
v_›
, &
a
));

1010 
	}
}

1012 
	sv›_advlock_¨gs
 {

1013 
v›_gíîic_¨gs
 
	ma_gí
;

1014 
vnode
 *
	ma_vp
;

1015 *
	ma_id
;

1016 
	ma_›
;

1017 
Êock
 *
	ma_Ê
;

1018 
	ma_Êags
;

1021 
vnode›_desc
 
v›_advlock_desc
;

1023 
VOP_ADVLOCK_AP
(
v›_advlock_¨gs
 *);

1024 
VOP_ADVLOCK_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlock_¨gs
 *);

1026 
__ölöe
 
	$VOP_ADVLOCK
(

1027 
vnode
 *
vp
,

1028 *
id
,

1029 
›
,

1030 
Êock
 *
Ê
,

1031 
Êags
)

1033 
v›_advlock_¨gs
 
a
;

1035 
a
.
a_gí
.
a_desc
 = &
v›_advlock_desc
;

1036 
a
.
a_vp
 = 
vp
;

1037 
a
.
a_id
 = 
id
;

1038 
a
.
a_›
 = 
›
;

1039 
a
.
a_Ê
 = 
Ê
;

1040 
a
.
a_Êags
 = 
Êags
;

1041  (
	`VOP_ADVLOCK_APV
(
vp
->
v_›
, &
a
));

1042 
	}
}

1044 
	sv›_advlockasync_¨gs
 {

1045 
v›_gíîic_¨gs
 
	ma_gí
;

1046 
vnode
 *
	ma_vp
;

1047 *
	ma_id
;

1048 
	ma_›
;

1049 
Êock
 *
	ma_Ê
;

1050 
	ma_Êags
;

1051 
èsk
 *
	ma_èsk
;

1052 **
	ma_cookõp
;

1055 
vnode›_desc
 
v›_advlockasync_desc
;

1057 
VOP_ADVLOCKASYNC_AP
(
v›_advlockasync_¨gs
 *);

1058 
VOP_ADVLOCKASYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlockasync_¨gs
 *);

1060 
__ölöe
 
	$VOP_ADVLOCKASYNC
(

1061 
vnode
 *
vp
,

1062 *
id
,

1063 
›
,

1064 
Êock
 *
Ê
,

1065 
Êags
,

1066 
èsk
 *task,

1067 **
cookõp
)

1069 
v›_advlockasync_¨gs
 
a
;

1071 
a
.
a_gí
.
a_desc
 = &
v›_advlockasync_desc
;

1072 
a
.
a_vp
 = 
vp
;

1073 
a
.
a_id
 = 
id
;

1074 
a
.
a_›
 = 
›
;

1075 
a
.
a_Ê
 = 
Ê
;

1076 
a
.
a_Êags
 = 
Êags
;

1077 
a
.
a_èsk
 = 
èsk
;

1078 
a
.
a_cookõp
 = 
cookõp
;

1079  (
	`VOP_ADVLOCKASYNC_APV
(
vp
->
v_›
, &
a
));

1080 
	}
}

1082 
	sv›_advlockpurge_¨gs
 {

1083 
v›_gíîic_¨gs
 
	ma_gí
;

1084 
vnode
 *
	ma_vp
;

1087 
vnode›_desc
 
v›_advlockpurge_desc
;

1089 
VOP_ADVLOCKPURGE_AP
(
v›_advlockpurge_¨gs
 *);

1090 
VOP_ADVLOCKPURGE_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlockpurge_¨gs
 *);

1092 
__ölöe
 
	$VOP_ADVLOCKPURGE
(

1093 
vnode
 *
vp
)

1095 
v›_advlockpurge_¨gs
 
a
;

1097 
a
.
a_gí
.
a_desc
 = &
v›_advlockpurge_desc
;

1098 
a
.
a_vp
 = 
vp
;

1099  (
	`VOP_ADVLOCKPURGE_APV
(
vp
->
v_›
, &
a
));

1100 
	}
}

1102 
	sv›_ªÆlocblks_¨gs
 {

1103 
v›_gíîic_¨gs
 
	ma_gí
;

1104 
vnode
 *
	ma_vp
;

1105 
˛u°î_ßve
 *
	ma_buÊi°
;

1108 
vnode›_desc
 
v›_ªÆlocblks_desc
;

1110 
VOP_REALLOCBLKS_AP
(
v›_ªÆlocblks_¨gs
 *);

1111 
VOP_REALLOCBLKS_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªÆlocblks_¨gs
 *);

1113 
__ölöe
 
	$VOP_REALLOCBLKS
(

1114 
vnode
 *
vp
,

1115 
˛u°î_ßve
 *
buÊi°
)

1117 
v›_ªÆlocblks_¨gs
 
a
;

1119 
a
.
a_gí
.
a_desc
 = &
v›_ªÆlocblks_desc
;

1120 
a
.
a_vp
 = 
vp
;

1121 
a
.
a_buÊi°
 = 
buÊi°
;

1122  (
	`VOP_REALLOCBLKS_APV
(
vp
->
v_›
, &
a
));

1123 
	}
}

1125 
	sv›_gë∑ges_¨gs
 {

1126 
v›_gíîic_¨gs
 
	ma_gí
;

1127 
vnode
 *
	ma_vp
;

1128 
vm_∑ge_t
 *
	ma_m
;

1129 
	ma_cou¡
;

1130 *
	ma_rbehöd
;

1131 *
	ma_øhód
;

1134 
vnode›_desc
 
v›_gë∑ges_desc
;

1136 
VOP_GETPAGES_AP
(
v›_gë∑ges_¨gs
 *);

1137 
VOP_GETPAGES_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë∑ges_¨gs
 *);

1139 
__ölöe
 
	$VOP_GETPAGES
(

1140 
vnode
 *
vp
,

1141 
vm_∑ge_t
 *
m
,

1142 
cou¡
,

1143 *
rbehöd
,

1144 *
øhód
)

1146 
v›_gë∑ges_¨gs
 
a
;

1148 
a
.
a_gí
.
a_desc
 = &
v›_gë∑ges_desc
;

1149 
a
.
a_vp
 = 
vp
;

1150 
a
.
a_m
 = 
m
;

1151 
a
.
a_cou¡
 = 
cou¡
;

1152 
a
.
a_rbehöd
 = 
rbehöd
;

1153 
a
.
a_øhód
 = 
øhód
;

1154  (
	`VOP_GETPAGES_APV
(
vp
->
v_›
, &
a
));

1155 
	}
}

1157 
	sv›_gë∑ges_async_¨gs
 {

1158 
v›_gíîic_¨gs
 
	ma_gí
;

1159 
vnode
 *
	ma_vp
;

1160 
vm_∑ge_t
 *
	ma_m
;

1161 
	ma_cou¡
;

1162 *
	ma_rbehöd
;

1163 *
	ma_øhód
;

1164 
v›_gë∑ges_iod⁄e_t
 *
	ma_iod⁄e
;

1165 *
	ma_¨g
;

1168 
vnode›_desc
 
v›_gë∑ges_async_desc
;

1170 
VOP_GETPAGES_ASYNC_AP
(
v›_gë∑ges_async_¨gs
 *);

1171 
VOP_GETPAGES_ASYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë∑ges_async_¨gs
 *);

1173 
__ölöe
 
	$VOP_GETPAGES_ASYNC
(

1174 
vnode
 *
vp
,

1175 
vm_∑ge_t
 *
m
,

1176 
cou¡
,

1177 *
rbehöd
,

1178 *
øhód
,

1179 
v›_gë∑ges_iod⁄e_t
 *
iod⁄e
,

1180 *
¨g
)

1182 
v›_gë∑ges_async_¨gs
 
a
;

1184 
a
.
a_gí
.
a_desc
 = &
v›_gë∑ges_async_desc
;

1185 
a
.
a_vp
 = 
vp
;

1186 
a
.
a_m
 = 
m
;

1187 
a
.
a_cou¡
 = 
cou¡
;

1188 
a
.
a_rbehöd
 = 
rbehöd
;

1189 
a
.
a_øhód
 = 
øhód
;

1190 
a
.
a_iod⁄e
 = 
iod⁄e
;

1191 
a
.
a_¨g
 = 
¨g
;

1192  (
	`VOP_GETPAGES_ASYNC_APV
(
vp
->
v_›
, &
a
));

1193 
	}
}

1195 
	sv›_puçages_¨gs
 {

1196 
v›_gíîic_¨gs
 
	ma_gí
;

1197 
vnode
 *
	ma_vp
;

1198 
vm_∑ge_t
 *
	ma_m
;

1199 
	ma_cou¡
;

1200 
	ma_sync
;

1201 *
	ma_πvÆs
;

1204 
vnode›_desc
 
v›_puçages_desc
;

1206 
VOP_PUTPAGES_AP
(
v›_puçages_¨gs
 *);

1207 
VOP_PUTPAGES_APV
(
v›_ve˘‹
 *
v›
, 
v›_puçages_¨gs
 *);

1209 
__ölöe
 
	$VOP_PUTPAGES
(

1210 
vnode
 *
vp
,

1211 
vm_∑ge_t
 *
m
,

1212 
cou¡
,

1213 
sync
,

1214 *
πvÆs
)

1216 
v›_puçages_¨gs
 
a
;

1218 
a
.
a_gí
.
a_desc
 = &
v›_puçages_desc
;

1219 
a
.
a_vp
 = 
vp
;

1220 
a
.
a_m
 = 
m
;

1221 
a
.
a_cou¡
 = 
cou¡
;

1222 
a
.
a_sync
 = 
sync
;

1223 
a
.
a_πvÆs
 = 
πvÆs
;

1224  (
	`VOP_PUTPAGES_APV
(
vp
->
v_›
, &
a
));

1225 
	}
}

1227 
	sv›_gëa˛_¨gs
 {

1228 
v›_gíîic_¨gs
 
	ma_gí
;

1229 
vnode
 *
	ma_vp
;

1230 
a˛_ty≥_t
 
	ma_ty≥
;

1231 
a˛
 *
	ma_a˛p
;

1232 
u¸ed
 *
	ma_¸ed
;

1233 
thªad
 *
	ma_td
;

1236 
vnode›_desc
 
v›_gëa˛_desc
;

1238 
VOP_GETACL_AP
(
v›_gëa˛_¨gs
 *);

1239 
VOP_GETACL_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëa˛_¨gs
 *);

1241 
__ölöe
 
	$VOP_GETACL
(

1242 
vnode
 *
vp
,

1243 
a˛_ty≥_t
 
ty≥
,

1244 
a˛
 *
a˛p
,

1245 
u¸ed
 *
¸ed
,

1246 
thªad
 *
td
)

1248 
v›_gëa˛_¨gs
 
a
;

1250 
a
.
a_gí
.
a_desc
 = &
v›_gëa˛_desc
;

1251 
a
.
a_vp
 = 
vp
;

1252 
a
.
a_ty≥
 = 
ty≥
;

1253 
a
.
a_a˛p
 = 
a˛p
;

1254 
a
.
a_¸ed
 = 
¸ed
;

1255 
a
.
a_td
 = 
td
;

1256  (
	`VOP_GETACL_APV
(
vp
->
v_›
, &
a
));

1257 
	}
}

1259 
	sv›_£è˛_¨gs
 {

1260 
v›_gíîic_¨gs
 
	ma_gí
;

1261 
vnode
 *
	ma_vp
;

1262 
a˛_ty≥_t
 
	ma_ty≥
;

1263 
a˛
 *
	ma_a˛p
;

1264 
u¸ed
 *
	ma_¸ed
;

1265 
thªad
 *
	ma_td
;

1268 
vnode›_desc
 
v›_£è˛_desc
;

1270 
VOP_SETACL_AP
(
v›_£è˛_¨gs
 *);

1271 
VOP_SETACL_APV
(
v›_ve˘‹
 *
v›
, 
v›_£è˛_¨gs
 *);

1273 
__ölöe
 
	$VOP_SETACL
(

1274 
vnode
 *
vp
,

1275 
a˛_ty≥_t
 
ty≥
,

1276 
a˛
 *
a˛p
,

1277 
u¸ed
 *
¸ed
,

1278 
thªad
 *
td
)

1280 
v›_£è˛_¨gs
 
a
;

1282 
a
.
a_gí
.
a_desc
 = &
v›_£è˛_desc
;

1283 
a
.
a_vp
 = 
vp
;

1284 
a
.
a_ty≥
 = 
ty≥
;

1285 
a
.
a_a˛p
 = 
a˛p
;

1286 
a
.
a_¸ed
 = 
¸ed
;

1287 
a
.
a_td
 = 
td
;

1288  (
	`VOP_SETACL_APV
(
vp
->
v_›
, &
a
));

1289 
	}
}

1291 
	sv›_a˛check_¨gs
 {

1292 
v›_gíîic_¨gs
 
	ma_gí
;

1293 
vnode
 *
	ma_vp
;

1294 
a˛_ty≥_t
 
	ma_ty≥
;

1295 
a˛
 *
	ma_a˛p
;

1296 
u¸ed
 *
	ma_¸ed
;

1297 
thªad
 *
	ma_td
;

1300 
vnode›_desc
 
v›_a˛check_desc
;

1302 
VOP_ACLCHECK_AP
(
v›_a˛check_¨gs
 *);

1303 
VOP_ACLCHECK_APV
(
v›_ve˘‹
 *
v›
, 
v›_a˛check_¨gs
 *);

1305 
__ölöe
 
	$VOP_ACLCHECK
(

1306 
vnode
 *
vp
,

1307 
a˛_ty≥_t
 
ty≥
,

1308 
a˛
 *
a˛p
,

1309 
u¸ed
 *
¸ed
,

1310 
thªad
 *
td
)

1312 
v›_a˛check_¨gs
 
a
;

1314 
a
.
a_gí
.
a_desc
 = &
v›_a˛check_desc
;

1315 
a
.
a_vp
 = 
vp
;

1316 
a
.
a_ty≥
 = 
ty≥
;

1317 
a
.
a_a˛p
 = 
a˛p
;

1318 
a
.
a_¸ed
 = 
¸ed
;

1319 
a
.
a_td
 = 
td
;

1320  (
	`VOP_ACLCHECK_APV
(
vp
->
v_›
, &
a
));

1321 
	}
}

1323 
	sv›_˛o£exèâr_¨gs
 {

1324 
v›_gíîic_¨gs
 
	ma_gí
;

1325 
vnode
 *
	ma_vp
;

1326 
	ma_commô
;

1327 
u¸ed
 *
	ma_¸ed
;

1328 
thªad
 *
	ma_td
;

1331 
vnode›_desc
 
v›_˛o£exèâr_desc
;

1333 
VOP_CLOSEEXTATTR_AP
(
v›_˛o£exèâr_¨gs
 *);

1334 
VOP_CLOSEEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_˛o£exèâr_¨gs
 *);

1336 
__ölöe
 
	$VOP_CLOSEEXTATTR
(

1337 
vnode
 *
vp
,

1338 
commô
,

1339 
u¸ed
 *
¸ed
,

1340 
thªad
 *
td
)

1342 
v›_˛o£exèâr_¨gs
 
a
;

1344 
a
.
a_gí
.
a_desc
 = &
v›_˛o£exèâr_desc
;

1345 
a
.
a_vp
 = 
vp
;

1346 
a
.
a_commô
 = 
commô
;

1347 
a
.
a_¸ed
 = 
¸ed
;

1348 
a
.
a_td
 = 
td
;

1349  (
	`VOP_CLOSEEXTATTR_APV
(
vp
->
v_›
, &
a
));

1350 
	}
}

1352 
	sv›_gëexèâr_¨gs
 {

1353 
v›_gíîic_¨gs
 
	ma_gí
;

1354 
vnode
 *
	ma_vp
;

1355 
	ma_©å«me•a˚
;

1356 c⁄° *
	ma_«me
;

1357 
uio
 *
	ma_uio
;

1358 
size_t
 *
	ma_size
;

1359 
u¸ed
 *
	ma_¸ed
;

1360 
thªad
 *
	ma_td
;

1363 
vnode›_desc
 
v›_gëexèâr_desc
;

1365 
VOP_GETEXTATTR_AP
(
v›_gëexèâr_¨gs
 *);

1366 
VOP_GETEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëexèâr_¨gs
 *);

1368 
__ölöe
 
	$VOP_GETEXTATTR
(

1369 
vnode
 *
vp
,

1370 
©å«me•a˚
,

1371 c⁄° *
«me
,

1372 
uio
 *uio,

1373 
size_t
 *
size
,

1374 
u¸ed
 *
¸ed
,

1375 
thªad
 *
td
)

1377 
v›_gëexèâr_¨gs
 
a
;

1379 
a
.
a_gí
.
a_desc
 = &
v›_gëexèâr_desc
;

1380 
a
.
a_vp
 = 
vp
;

1381 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1382 
a
.
a_«me
 = 
«me
;

1383 
a
.
a_uio
 = 
uio
;

1384 
a
.
a_size
 = 
size
;

1385 
a
.
a_¸ed
 = 
¸ed
;

1386 
a
.
a_td
 = 
td
;

1387  (
	`VOP_GETEXTATTR_APV
(
vp
->
v_›
, &
a
));

1388 
	}
}

1390 
	sv›_li°exèâr_¨gs
 {

1391 
v›_gíîic_¨gs
 
	ma_gí
;

1392 
vnode
 *
	ma_vp
;

1393 
	ma_©å«me•a˚
;

1394 
uio
 *
	ma_uio
;

1395 
size_t
 *
	ma_size
;

1396 
u¸ed
 *
	ma_¸ed
;

1397 
thªad
 *
	ma_td
;

1400 
vnode›_desc
 
v›_li°exèâr_desc
;

1402 
VOP_LISTEXTATTR_AP
(
v›_li°exèâr_¨gs
 *);

1403 
VOP_LISTEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_li°exèâr_¨gs
 *);

1405 
__ölöe
 
	$VOP_LISTEXTATTR
(

1406 
vnode
 *
vp
,

1407 
©å«me•a˚
,

1408 
uio
 *uio,

1409 
size_t
 *
size
,

1410 
u¸ed
 *
¸ed
,

1411 
thªad
 *
td
)

1413 
v›_li°exèâr_¨gs
 
a
;

1415 
a
.
a_gí
.
a_desc
 = &
v›_li°exèâr_desc
;

1416 
a
.
a_vp
 = 
vp
;

1417 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1418 
a
.
a_uio
 = 
uio
;

1419 
a
.
a_size
 = 
size
;

1420 
a
.
a_¸ed
 = 
¸ed
;

1421 
a
.
a_td
 = 
td
;

1422  (
	`VOP_LISTEXTATTR_APV
(
vp
->
v_›
, &
a
));

1423 
	}
}

1425 
	sv›_›íexèâr_¨gs
 {

1426 
v›_gíîic_¨gs
 
	ma_gí
;

1427 
vnode
 *
	ma_vp
;

1428 
u¸ed
 *
	ma_¸ed
;

1429 
thªad
 *
	ma_td
;

1432 
vnode›_desc
 
v›_›íexèâr_desc
;

1434 
VOP_OPENEXTATTR_AP
(
v›_›íexèâr_¨gs
 *);

1435 
VOP_OPENEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_›íexèâr_¨gs
 *);

1437 
__ölöe
 
	$VOP_OPENEXTATTR
(

1438 
vnode
 *
vp
,

1439 
u¸ed
 *
¸ed
,

1440 
thªad
 *
td
)

1442 
v›_›íexèâr_¨gs
 
a
;

1444 
a
.
a_gí
.
a_desc
 = &
v›_›íexèâr_desc
;

1445 
a
.
a_vp
 = 
vp
;

1446 
a
.
a_¸ed
 = 
¸ed
;

1447 
a
.
a_td
 = 
td
;

1448  (
	`VOP_OPENEXTATTR_APV
(
vp
->
v_›
, &
a
));

1449 
	}
}

1451 
	sv›_dñëìxèâr_¨gs
 {

1452 
v›_gíîic_¨gs
 
	ma_gí
;

1453 
vnode
 *
	ma_vp
;

1454 
	ma_©å«me•a˚
;

1455 c⁄° *
	ma_«me
;

1456 
u¸ed
 *
	ma_¸ed
;

1457 
thªad
 *
	ma_td
;

1460 
vnode›_desc
 
v›_dñëìxèâr_desc
;

1462 
VOP_DELETEEXTATTR_AP
(
v›_dñëìxèâr_¨gs
 *);

1463 
VOP_DELETEEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_dñëìxèâr_¨gs
 *);

1465 
__ölöe
 
	$VOP_DELETEEXTATTR
(

1466 
vnode
 *
vp
,

1467 
©å«me•a˚
,

1468 c⁄° *
«me
,

1469 
u¸ed
 *
¸ed
,

1470 
thªad
 *
td
)

1472 
v›_dñëìxèâr_¨gs
 
a
;

1474 
a
.
a_gí
.
a_desc
 = &
v›_dñëìxèâr_desc
;

1475 
a
.
a_vp
 = 
vp
;

1476 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1477 
a
.
a_«me
 = 
«me
;

1478 
a
.
a_¸ed
 = 
¸ed
;

1479 
a
.
a_td
 = 
td
;

1480  (
	`VOP_DELETEEXTATTR_APV
(
vp
->
v_›
, &
a
));

1481 
	}
}

1483 
	sv›_£ãxèâr_¨gs
 {

1484 
v›_gíîic_¨gs
 
	ma_gí
;

1485 
vnode
 *
	ma_vp
;

1486 
	ma_©å«me•a˚
;

1487 c⁄° *
	ma_«me
;

1488 
uio
 *
	ma_uio
;

1489 
u¸ed
 *
	ma_¸ed
;

1490 
thªad
 *
	ma_td
;

1493 
vnode›_desc
 
v›_£ãxèâr_desc
;

1495 
VOP_SETEXTATTR_AP
(
v›_£ãxèâr_¨gs
 *);

1496 
VOP_SETEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_£ãxèâr_¨gs
 *);

1498 
__ölöe
 
	$VOP_SETEXTATTR
(

1499 
vnode
 *
vp
,

1500 
©å«me•a˚
,

1501 c⁄° *
«me
,

1502 
uio
 *uio,

1503 
u¸ed
 *
¸ed
,

1504 
thªad
 *
td
)

1506 
v›_£ãxèâr_¨gs
 
a
;

1508 
a
.
a_gí
.
a_desc
 = &
v›_£ãxèâr_desc
;

1509 
a
.
a_vp
 = 
vp
;

1510 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1511 
a
.
a_«me
 = 
«me
;

1512 
a
.
a_uio
 = 
uio
;

1513 
a
.
a_¸ed
 = 
¸ed
;

1514 
a
.
a_td
 = 
td
;

1515  (
	`VOP_SETEXTATTR_APV
(
vp
->
v_›
, &
a
));

1516 
	}
}

1518 
	sv›_£éabñ_¨gs
 {

1519 
v›_gíîic_¨gs
 
	ma_gí
;

1520 
vnode
 *
	ma_vp
;

1521 
œbñ
 *
	ma_œbñ
;

1522 
u¸ed
 *
	ma_¸ed
;

1523 
thªad
 *
	ma_td
;

1526 
vnode›_desc
 
v›_£éabñ_desc
;

1528 
VOP_SETLABEL_AP
(
v›_£éabñ_¨gs
 *);

1529 
VOP_SETLABEL_APV
(
v›_ve˘‹
 *
v›
, 
v›_£éabñ_¨gs
 *);

1531 
__ölöe
 
	$VOP_SETLABEL
(

1532 
vnode
 *
vp
,

1533 
œbñ
 *label,

1534 
u¸ed
 *
¸ed
,

1535 
thªad
 *
td
)

1537 
v›_£éabñ_¨gs
 
a
;

1539 
a
.
a_gí
.
a_desc
 = &
v›_£éabñ_desc
;

1540 
a
.
a_vp
 = 
vp
;

1541 
a
.
a_œbñ
 = 
œbñ
;

1542 
a
.
a_¸ed
 = 
¸ed
;

1543 
a
.
a_td
 = 
td
;

1544  (
	`VOP_SETLABEL_APV
(
vp
->
v_›
, &
a
));

1545 
	}
}

1547 
	sv›_v±ofh_¨gs
 {

1548 
v›_gíîic_¨gs
 
	ma_gí
;

1549 
vnode
 *
	ma_vp
;

1550 
fid
 *
	ma_fhp
;

1553 
vnode›_desc
 
v›_v±ofh_desc
;

1555 
VOP_VPTOFH_AP
(
v›_v±ofh_¨gs
 *);

1556 
VOP_VPTOFH_APV
(
v›_ve˘‹
 *
v›
, 
v›_v±ofh_¨gs
 *);

1558 
__ölöe
 
	$VOP_VPTOFH
(

1559 
vnode
 *
vp
,

1560 
fid
 *
fhp
)

1562 
v›_v±ofh_¨gs
 
a
;

1564 
a
.
a_gí
.
a_desc
 = &
v›_v±ofh_desc
;

1565 
a
.
a_vp
 = 
vp
;

1566 
a
.
a_fhp
 = 
fhp
;

1567  (
	`VOP_VPTOFH_APV
(
vp
->
v_›
, &
a
));

1568 
	}
}

1570 
	sv›_v±o˙p_¨gs
 {

1571 
v›_gíîic_¨gs
 
	ma_gí
;

1572 
vnode
 *
	ma_vp
;

1573 
vnode
 **
	ma_vµ
;

1574 
u¸ed
 *
	ma_¸ed
;

1575 *
	ma_buf
;

1576 *
	ma_buÊí
;

1579 
vnode›_desc
 
v›_v±o˙p_desc
;

1581 
VOP_VPTOCNP_AP
(
v›_v±o˙p_¨gs
 *);

1582 
VOP_VPTOCNP_APV
(
v›_ve˘‹
 *
v›
, 
v›_v±o˙p_¨gs
 *);

1584 
__ölöe
 
	$VOP_VPTOCNP
(

1585 
vnode
 *
vp
,

1586 
vnode
 **
vµ
,

1587 
u¸ed
 *
¸ed
,

1588 *
buf
,

1589 *
buÊí
)

1591 
v›_v±o˙p_¨gs
 
a
;

1593 
a
.
a_gí
.
a_desc
 = &
v›_v±o˙p_desc
;

1594 
a
.
a_vp
 = 
vp
;

1595 
a
.
a_vµ
 = 
vµ
;

1596 
a
.
a_¸ed
 = 
¸ed
;

1597 
a
.
a_buf
 = 
buf
;

1598 
a
.
a_buÊí
 = 
buÊí
;

1599  (
	`VOP_VPTOCNP_APV
(
vp
->
v_›
, &
a
));

1600 
	}
}

1602 
	sv›_Æloˇã_¨gs
 {

1603 
v›_gíîic_¨gs
 
	ma_gí
;

1604 
vnode
 *
	ma_vp
;

1605 
off_t
 *
	ma_off£t
;

1606 
off_t
 *
	ma_Àn
;

1609 
vnode›_desc
 
v›_Æloˇã_desc
;

1611 
VOP_ALLOCATE_AP
(
v›_Æloˇã_¨gs
 *);

1612 
VOP_ALLOCATE_APV
(
v›_ve˘‹
 *
v›
, 
v›_Æloˇã_¨gs
 *);

1614 
__ölöe
 
	$VOP_ALLOCATE
(

1615 
vnode
 *
vp
,

1616 
off_t
 *
off£t
,

1617 
off_t
 *
Àn
)

1619 
v›_Æloˇã_¨gs
 
a
;

1621 
a
.
a_gí
.
a_desc
 = &
v›_Æloˇã_desc
;

1622 
a
.
a_vp
 = 
vp
;

1623 
a
.
a_off£t
 = 
off£t
;

1624 
a
.
a_Àn
 = 
Àn
;

1625  (
	`VOP_ALLOCATE_APV
(
vp
->
v_›
, &
a
));

1626 
	}
}

1628 
	sv›_advi£_¨gs
 {

1629 
v›_gíîic_¨gs
 
	ma_gí
;

1630 
vnode
 *
	ma_vp
;

1631 
off_t
 
	ma_°¨t
;

1632 
off_t
 
	ma_íd
;

1633 
	ma_advi˚
;

1636 
vnode›_desc
 
v›_advi£_desc
;

1638 
VOP_ADVISE_AP
(
v›_advi£_¨gs
 *);

1639 
VOP_ADVISE_APV
(
v›_ve˘‹
 *
v›
, 
v›_advi£_¨gs
 *);

1641 
__ölöe
 
	$VOP_ADVISE
(

1642 
vnode
 *
vp
,

1643 
off_t
 
°¨t
,

1644 
off_t
 
íd
,

1645 
advi˚
)

1647 
v›_advi£_¨gs
 
a
;

1649 
a
.
a_gí
.
a_desc
 = &
v›_advi£_desc
;

1650 
a
.
a_vp
 = 
vp
;

1651 
a
.
a_°¨t
 = 
°¨t
;

1652 
a
.
a_íd
 = 
íd
;

1653 
a
.
a_advi˚
 = 
advi˚
;

1654  (
	`VOP_ADVISE_APV
(
vp
->
v_›
, &
a
));

1655 
	}
}

1657 
	sv›_u≈_böd_¨gs
 {

1658 
v›_gíîic_¨gs
 
	ma_gí
;

1659 
vnode
 *
	ma_vp
;

1660 
u≈cb
 *
	ma_u≈cb
;

1663 
vnode›_desc
 
v›_u≈_böd_desc
;

1665 
VOP_UNP_BIND_AP
(
v›_u≈_böd_¨gs
 *);

1666 
VOP_UNP_BIND_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_böd_¨gs
 *);

1668 
__ölöe
 
	$VOP_UNP_BIND
(

1669 
vnode
 *
vp
,

1670 
u≈cb
 *unpcb)

1672 
v›_u≈_böd_¨gs
 
a
;

1674 
a
.
a_gí
.
a_desc
 = &
v›_u≈_böd_desc
;

1675 
a
.
a_vp
 = 
vp
;

1676 
a
.
a_u≈cb
 = 
u≈cb
;

1677  (
	`VOP_UNP_BIND_APV
(
vp
->
v_›
, &
a
));

1678 
	}
}

1680 
	sv›_u≈_c⁄√˘_¨gs
 {

1681 
v›_gíîic_¨gs
 
	ma_gí
;

1682 
vnode
 *
	ma_vp
;

1683 
u≈cb
 **
	ma_u≈cb
;

1686 
vnode›_desc
 
v›_u≈_c⁄√˘_desc
;

1688 
VOP_UNP_CONNECT_AP
(
v›_u≈_c⁄√˘_¨gs
 *);

1689 
VOP_UNP_CONNECT_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_c⁄√˘_¨gs
 *);

1691 
__ölöe
 
	$VOP_UNP_CONNECT
(

1692 
vnode
 *
vp
,

1693 
u≈cb
 **unpcb)

1695 
v›_u≈_c⁄√˘_¨gs
 
a
;

1697 
a
.
a_gí
.
a_desc
 = &
v›_u≈_c⁄√˘_desc
;

1698 
a
.
a_vp
 = 
vp
;

1699 
a
.
a_u≈cb
 = 
u≈cb
;

1700  (
	`VOP_UNP_CONNECT_APV
(
vp
->
v_›
, &
a
));

1701 
	}
}

1703 
	sv›_u≈_dëach_¨gs
 {

1704 
v›_gíîic_¨gs
 
	ma_gí
;

1705 
vnode
 *
	ma_vp
;

1708 
vnode›_desc
 
v›_u≈_dëach_desc
;

1710 
VOP_UNP_DETACH_AP
(
v›_u≈_dëach_¨gs
 *);

1711 
VOP_UNP_DETACH_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_dëach_¨gs
 *);

1713 
__ölöe
 
	$VOP_UNP_DETACH
(

1714 
vnode
 *
vp
)

1716 
v›_u≈_dëach_¨gs
 
a
;

1718 
a
.
a_gí
.
a_desc
 = &
v›_u≈_dëach_desc
;

1719 
a
.
a_vp
 = 
vp
;

1720  (
	`VOP_UNP_DETACH_APV
(
vp
->
v_›
, &
a
));

1721 
	}
}

1723 
	sv›_is_ãxt_¨gs
 {

1724 
v›_gíîic_¨gs
 
	ma_gí
;

1725 
vnode
 *
	ma_vp
;

1728 
vnode›_desc
 
v›_is_ãxt_desc
;

1730 
VOP_IS_TEXT_AP
(
v›_is_ãxt_¨gs
 *);

1731 
VOP_IS_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_is_ãxt_¨gs
 *);

1733 
__ölöe
 
	$VOP_IS_TEXT
(

1734 
vnode
 *
vp
)

1736 
v›_is_ãxt_¨gs
 
a
;

1738 
a
.
a_gí
.
a_desc
 = &
v›_is_ãxt_desc
;

1739 
a
.
a_vp
 = 
vp
;

1740  (
	`VOP_IS_TEXT_APV
(
vp
->
v_›
, &
a
));

1741 
	}
}

1743 
	sv›_£t_ãxt_¨gs
 {

1744 
v›_gíîic_¨gs
 
	ma_gí
;

1745 
vnode
 *
	ma_vp
;

1748 
vnode›_desc
 
v›_£t_ãxt_desc
;

1750 
VOP_SET_TEXT_AP
(
v›_£t_ãxt_¨gs
 *);

1751 
VOP_SET_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_£t_ãxt_¨gs
 *);

1753 
__ölöe
 
	$VOP_SET_TEXT
(

1754 
vnode
 *
vp
)

1756 
v›_£t_ãxt_¨gs
 
a
;

1758 
a
.
a_gí
.
a_desc
 = &
v›_£t_ãxt_desc
;

1759 
a
.
a_vp
 = 
vp
;

1760  (
	`VOP_SET_TEXT_APV
(
vp
->
v_›
, &
a
));

1761 
	}
}

1763 
	sv›_un£t_ãxt_¨gs
 {

1764 
v›_gíîic_¨gs
 
	ma_gí
;

1765 
vnode
 *
	ma_vp
;

1768 
vnode›_desc
 
v›_un£t_ãxt_desc
;

1770 
VOP_UNSET_TEXT_AP
(
v›_un£t_ãxt_¨gs
 *);

1771 
VOP_UNSET_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_un£t_ãxt_¨gs
 *);

1773 
__ölöe
 
	$VOP_UNSET_TEXT
(

1774 
vnode
 *
vp
)

1776 
v›_un£t_ãxt_¨gs
 
a
;

1778 
a
.
a_gí
.
a_desc
 = &
v›_un£t_ãxt_desc
;

1779 
a
.
a_vp
 = 
vp
;

1780  (
	`VOP_UNSET_TEXT_APV
(
vp
->
v_›
, &
a
));

1781 
	}
}

1783 
	sv›_gë_wrôecou¡_¨gs
 {

1784 
v›_gíîic_¨gs
 
	ma_gí
;

1785 
vnode
 *
	ma_vp
;

1786 *
	ma_wrôecou¡
;

1789 
vnode›_desc
 
v›_gë_wrôecou¡_desc
;

1791 
VOP_GET_WRITECOUNT_AP
(
v›_gë_wrôecou¡_¨gs
 *);

1792 
VOP_GET_WRITECOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë_wrôecou¡_¨gs
 *);

1794 
__ölöe
 
	$VOP_GET_WRITECOUNT
(

1795 
vnode
 *
vp
,

1796 *
wrôecou¡
)

1798 
v›_gë_wrôecou¡_¨gs
 
a
;

1800 
a
.
a_gí
.
a_desc
 = &
v›_gë_wrôecou¡_desc
;

1801 
a
.
a_vp
 = 
vp
;

1802 
a
.
a_wrôecou¡
 = 
wrôecou¡
;

1803  (
	`VOP_GET_WRITECOUNT_APV
(
vp
->
v_›
, &
a
));

1804 
	}
}

1806 
	sv›_add_wrôecou¡_¨gs
 {

1807 
v›_gíîic_¨gs
 
	ma_gí
;

1808 
vnode
 *
	ma_vp
;

1809 
	ma_öc
;

1812 
vnode›_desc
 
v›_add_wrôecou¡_desc
;

1814 
VOP_ADD_WRITECOUNT_AP
(
v›_add_wrôecou¡_¨gs
 *);

1815 
VOP_ADD_WRITECOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_add_wrôecou¡_¨gs
 *);

1817 
__ölöe
 
	$VOP_ADD_WRITECOUNT
(

1818 
vnode
 *
vp
,

1819 
öc
)

1821 
v›_add_wrôecou¡_¨gs
 
a
;

1823 
a
.
a_gí
.
a_desc
 = &
v›_add_wrôecou¡_desc
;

1824 
a
.
a_vp
 = 
vp
;

1825 
a
.
a_öc
 = 
öc
;

1826  (
	`VOP_ADD_WRITECOUNT_APV
(
vp
->
v_›
, &
a
));

1827 
	}
}

1829 
	sv›_fd©async_¨gs
 {

1830 
v›_gíîic_¨gs
 
	ma_gí
;

1831 
vnode
 *
	ma_vp
;

1832 
thªad
 *
	ma_td
;

1835 
vnode›_desc
 
v›_fd©async_desc
;

1837 
VOP_FDATASYNC_AP
(
v›_fd©async_¨gs
 *);

1838 
VOP_FDATASYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_fd©async_¨gs
 *);

1840 
__ölöe
 
	$VOP_FDATASYNC
(

1841 
vnode
 *
vp
,

1842 
thªad
 *
td
)

1844 
v›_fd©async_¨gs
 
a
;

1846 
a
.
a_gí
.
a_desc
 = &
v›_fd©async_desc
;

1847 
a
.
a_vp
 = 
vp
;

1848 
a
.
a_td
 = 
td
;

1849  (
	`VOP_FDATASYNC_APV
(
vp
->
v_›
, &
a
));

1850 
	}
}

1852 
	sv›_•¨e1_¨gs
 {

1853 
v›_gíîic_¨gs
 
	ma_gí
;

1854 
vnode
 *
	ma_vp
;

1857 
vnode›_desc
 
v›_•¨e1_desc
;

1859 
VOP_SPARE1_AP
(
v›_•¨e1_¨gs
 *);

1860 
VOP_SPARE1_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e1_¨gs
 *);

1862 
__ölöe
 
	$VOP_SPARE1
(

1863 
vnode
 *
vp
)

1865 
v›_•¨e1_¨gs
 
a
;

1867 
a
.
a_gí
.
a_desc
 = &
v›_•¨e1_desc
;

1868 
a
.
a_vp
 = 
vp
;

1869  (
	`VOP_SPARE1_APV
(
vp
->
v_›
, &
a
));

1870 
	}
}

1872 
	sv›_•¨e2_¨gs
 {

1873 
v›_gíîic_¨gs
 
	ma_gí
;

1874 
vnode
 *
	ma_vp
;

1877 
vnode›_desc
 
v›_•¨e2_desc
;

1879 
VOP_SPARE2_AP
(
v›_•¨e2_¨gs
 *);

1880 
VOP_SPARE2_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e2_¨gs
 *);

1882 
__ölöe
 
	$VOP_SPARE2
(

1883 
vnode
 *
vp
)

1885 
v›_•¨e2_¨gs
 
a
;

1887 
a
.
a_gí
.
a_desc
 = &
v›_•¨e2_desc
;

1888 
a
.
a_vp
 = 
vp
;

1889  (
	`VOP_SPARE2_APV
(
vp
->
v_›
, &
a
));

1890 
	}
}

1892 
	sv›_•¨e3_¨gs
 {

1893 
v›_gíîic_¨gs
 
	ma_gí
;

1894 
vnode
 *
	ma_vp
;

1897 
vnode›_desc
 
v›_•¨e3_desc
;

1899 
VOP_SPARE3_AP
(
v›_•¨e3_¨gs
 *);

1900 
VOP_SPARE3_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e3_¨gs
 *);

1902 
__ölöe
 
	$VOP_SPARE3
(

1903 
vnode
 *
vp
)

1905 
v›_•¨e3_¨gs
 
a
;

1907 
a
.
a_gí
.
a_desc
 = &
v›_•¨e3_desc
;

1908 
a
.
a_vp
 = 
vp
;

1909  (
	`VOP_SPARE3_APV
(
vp
->
v_›
, &
a
));

1910 
	}
}

1912 
	sv›_•¨e4_¨gs
 {

1913 
v›_gíîic_¨gs
 
	ma_gí
;

1914 
vnode
 *
	ma_vp
;

1917 
vnode›_desc
 
v›_•¨e4_desc
;

1919 
VOP_SPARE4_AP
(
v›_•¨e4_¨gs
 *);

1920 
VOP_SPARE4_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e4_¨gs
 *);

1922 
__ölöe
 
	$VOP_SPARE4
(

1923 
vnode
 *
vp
)

1925 
v›_•¨e4_¨gs
 
a
;

1927 
a
.
a_gí
.
a_desc
 = &
v›_•¨e4_desc
;

1928 
a
.
a_vp
 = 
vp
;

1929  (
	`VOP_SPARE4_APV
(
vp
->
v_›
, &
a
));

1930 
	}
}

1932 
	sv›_•¨e5_¨gs
 {

1933 
v›_gíîic_¨gs
 
	ma_gí
;

1934 
vnode
 *
	ma_vp
;

1937 
vnode›_desc
 
v›_•¨e5_desc
;

1939 
VOP_SPARE5_AP
(
v›_•¨e5_¨gs
 *);

1940 
VOP_SPARE5_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e5_¨gs
 *);

1942 
__ölöe
 
	$VOP_SPARE5
(

1943 
vnode
 *
vp
)

1945 
v›_•¨e5_¨gs
 
a
;

1947 
a
.
a_gí
.
a_desc
 = &
v›_•¨e5_desc
;

1948 
a
.
a_vp
 = 
vp
;

1949  (
	`VOP_SPARE5_APV
(
vp
->
v_›
, &
a
));

1950 
	}
}

	@src/nvidia/vnode_if_newproto.h

9 
	sv›_ve˘‹
 {

10 
v›_ve˘‹
 *
	mv›_deÁu…
;

11 
v›_by∑ss_t
 *
	mv›_by∑ss
;

12 
v›_i¶ocked_t
 *
	mv›_i¶ocked
;

13 
v›_lookup_t
 *
	mv›_lookup
;

14 
v›_ˇchedlookup_t
 *
	mv›_ˇchedlookup
;

15 
v›_¸óã_t
 *
	mv›_¸óã
;

16 
v›_whôeout_t
 *
	mv›_whôeout
;

17 
v›_mknod_t
 *
	mv›_mknod
;

18 
v›_›í_t
 *
	mv›_›í
;

19 
v›_˛o£_t
 *
	mv›_˛o£
;

20 
v›_ac˚ss_t
 *
	mv›_ac˚ss
;

21 
v›_ac˚ssx_t
 *
	mv›_ac˚ssx
;

22 
v›_gë©å_t
 *
	mv›_gë©å
;

23 
v›_£èâr_t
 *
	mv›_£èâr
;

24 
v›_m¨k©ime_t
 *
	mv›_m¨k©ime
;

25 
v›_ªad_t
 *
	mv›_ªad
;

26 
v›_wrôe_t
 *
	mv›_wrôe
;

27 
v›_io˘l_t
 *
	mv›_io˘l
;

28 
v›_pﬁl_t
 *
	mv›_pﬁl
;

29 
v›_kqfûãr_t
 *
	mv›_kqfûãr
;

30 
v›_ªvoke_t
 *
	mv›_ªvoke
;

31 
v›_fsync_t
 *
	mv›_fsync
;

32 
v›_ªmove_t
 *
	mv›_ªmove
;

33 
v›_lök_t
 *
	mv›_lök
;

34 
v›_ª«me_t
 *
	mv›_ª«me
;

35 
v›_mkdú_t
 *
	mv›_mkdú
;

36 
v›_rmdú_t
 *
	mv›_rmdú
;

37 
v›_symlök_t
 *
	mv›_symlök
;

38 
v›_ªaddú_t
 *
	mv›_ªaddú
;

39 
v›_ªadlök_t
 *
	mv›_ªadlök
;

40 
v›_öa˘ive_t
 *
	mv›_öa˘ive
;

41 
v›_ª˛aim_t
 *
	mv›_ª˛aim
;

42 
v›_lock1_t
 *
	mv›_lock1
;

43 
v›_u∆ock_t
 *
	mv›_u∆ock
;

44 
v›_bm≠_t
 *
	mv›_bm≠
;

45 
v›_°øãgy_t
 *
	mv›_°øãgy
;

46 
v›_gëwrôemou¡_t
 *
	mv›_gëwrôemou¡
;

47 
v›_¥öt_t
 *
	mv›_¥öt
;

48 
v›_∑thc⁄f_t
 *
	mv›_∑thc⁄f
;

49 
v›_advlock_t
 *
	mv›_advlock
;

50 
v›_advlockasync_t
 *
	mv›_advlockasync
;

51 
v›_advlockpurge_t
 *
	mv›_advlockpurge
;

52 
v›_ªÆlocblks_t
 *
	mv›_ªÆlocblks
;

53 
v›_gë∑ges_t
 *
	mv›_gë∑ges
;

54 
v›_gë∑ges_async_t
 *
	mv›_gë∑ges_async
;

55 
v›_puçages_t
 *
	mv›_puçages
;

56 
v›_gëa˛_t
 *
	mv›_gëa˛
;

57 
v›_£è˛_t
 *
	mv›_£è˛
;

58 
v›_a˛check_t
 *
	mv›_a˛check
;

59 
v›_˛o£exèâr_t
 *
	mv›_˛o£exèâr
;

60 
v›_gëexèâr_t
 *
	mv›_gëexèâr
;

61 
v›_li°exèâr_t
 *
	mv›_li°exèâr
;

62 
v›_›íexèâr_t
 *
	mv›_›íexèâr
;

63 
v›_dñëìxèâr_t
 *
	mv›_dñëìxèâr
;

64 
v›_£ãxèâr_t
 *
	mv›_£ãxèâr
;

65 
v›_£éabñ_t
 *
	mv›_£éabñ
;

66 
v›_v±ofh_t
 *
	mv›_v±ofh
;

67 
v›_v±o˙p_t
 *
	mv›_v±o˙p
;

68 
v›_Æloˇã_t
 *
	mv›_Æloˇã
;

69 
v›_advi£_t
 *
	mv›_advi£
;

70 
v›_u≈_böd_t
 *
	mv›_u≈_böd
;

71 
v›_u≈_c⁄√˘_t
 *
	mv›_u≈_c⁄√˘
;

72 
v›_u≈_dëach_t
 *
	mv›_u≈_dëach
;

73 
v›_is_ãxt_t
 *
	mv›_is_ãxt
;

74 
v›_£t_ãxt_t
 *
	mv›_£t_ãxt
;

75 
v›_un£t_ãxt_t
 *
	mv›_un£t_ãxt
;

76 
v›_gë_wrôecou¡_t
 *
	mv›_gë_wrôecou¡
;

77 
v›_add_wrôecou¡_t
 *
	mv›_add_wrôecou¡
;

78 
v›_fd©async_t
 *
	mv›_fd©async
;

79 
v›_•¨e1_t
 *
	mv›_•¨e1
;

80 
v›_•¨e2_t
 *
	mv›_•¨e2
;

81 
v›_•¨e3_t
 *
	mv›_•¨e3
;

82 
v›_•¨e4_t
 *
	mv›_•¨e4
;

83 
v›_•¨e5_t
 *
	mv›_•¨e5
;

	@src/nvidia/vnode_if_typedef.h

9 
	gv›_i¶ocked_¨gs
;

10 
	tv›_i¶ocked_t
(
	tv›_i¶ocked_¨gs
 *);

12 
	gv›_lookup_¨gs
;

13 
	tv›_lookup_t
(
	tv›_lookup_¨gs
 *);

15 
	gv›_ˇchedlookup_¨gs
;

16 
	tv›_ˇchedlookup_t
(
	tv›_ˇchedlookup_¨gs
 *);

18 
	gv›_¸óã_¨gs
;

19 
	tv›_¸óã_t
(
	tv›_¸óã_¨gs
 *);

21 
	gv›_whôeout_¨gs
;

22 
	tv›_whôeout_t
(
	tv›_whôeout_¨gs
 *);

24 
	gv›_mknod_¨gs
;

25 
	tv›_mknod_t
(
	tv›_mknod_¨gs
 *);

27 
	gv›_›í_¨gs
;

28 
	tv›_›í_t
(
	tv›_›í_¨gs
 *);

30 
	gv›_˛o£_¨gs
;

31 
	tv›_˛o£_t
(
	tv›_˛o£_¨gs
 *);

33 
	gv›_ac˚ss_¨gs
;

34 
	tv›_ac˚ss_t
(
	tv›_ac˚ss_¨gs
 *);

36 
	gv›_ac˚ssx_¨gs
;

37 
	tv›_ac˚ssx_t
(
	tv›_ac˚ssx_¨gs
 *);

39 
	gv›_gë©å_¨gs
;

40 
	tv›_gë©å_t
(
	tv›_gë©å_¨gs
 *);

42 
	gv›_£èâr_¨gs
;

43 
	tv›_£èâr_t
(
	tv›_£èâr_¨gs
 *);

45 
	gv›_m¨k©ime_¨gs
;

46 
	tv›_m¨k©ime_t
(
	tv›_m¨k©ime_¨gs
 *);

48 
	gv›_ªad_¨gs
;

49 
	tv›_ªad_t
(
	tv›_ªad_¨gs
 *);

51 
	gv›_wrôe_¨gs
;

52 
	tv›_wrôe_t
(
	tv›_wrôe_¨gs
 *);

54 
	gv›_io˘l_¨gs
;

55 
	tv›_io˘l_t
(
	tv›_io˘l_¨gs
 *);

57 
	gv›_pﬁl_¨gs
;

58 
	tv›_pﬁl_t
(
	tv›_pﬁl_¨gs
 *);

60 
	gv›_kqfûãr_¨gs
;

61 
	tv›_kqfûãr_t
(
	tv›_kqfûãr_¨gs
 *);

63 
	gv›_ªvoke_¨gs
;

64 
	tv›_ªvoke_t
(
	tv›_ªvoke_¨gs
 *);

66 
	gv›_fsync_¨gs
;

67 
	tv›_fsync_t
(
	tv›_fsync_¨gs
 *);

69 
	gv›_ªmove_¨gs
;

70 
	tv›_ªmove_t
(
	tv›_ªmove_¨gs
 *);

72 
	gv›_lök_¨gs
;

73 
	tv›_lök_t
(
	tv›_lök_¨gs
 *);

75 
	gv›_ª«me_¨gs
;

76 
	tv›_ª«me_t
(
	tv›_ª«me_¨gs
 *);

78 
	gv›_mkdú_¨gs
;

79 
	tv›_mkdú_t
(
	tv›_mkdú_¨gs
 *);

81 
	gv›_rmdú_¨gs
;

82 
	tv›_rmdú_t
(
	tv›_rmdú_¨gs
 *);

84 
	gv›_symlök_¨gs
;

85 
	tv›_symlök_t
(
	tv›_symlök_¨gs
 *);

87 
	gv›_ªaddú_¨gs
;

88 
	tv›_ªaddú_t
(
	tv›_ªaddú_¨gs
 *);

90 
	gv›_ªadlök_¨gs
;

91 
	tv›_ªadlök_t
(
	tv›_ªadlök_¨gs
 *);

93 
	gv›_öa˘ive_¨gs
;

94 
	tv›_öa˘ive_t
(
	tv›_öa˘ive_¨gs
 *);

96 
	gv›_ª˛aim_¨gs
;

97 
	tv›_ª˛aim_t
(
	tv›_ª˛aim_¨gs
 *);

99 
	gv›_lock1_¨gs
;

100 
	tv›_lock1_t
(
	tv›_lock1_¨gs
 *);

102 
	gv›_u∆ock_¨gs
;

103 
	tv›_u∆ock_t
(
	tv›_u∆ock_¨gs
 *);

105 
	gv›_bm≠_¨gs
;

106 
	tv›_bm≠_t
(
	tv›_bm≠_¨gs
 *);

108 
	gv›_°øãgy_¨gs
;

109 
	tv›_°øãgy_t
(
	tv›_°øãgy_¨gs
 *);

111 
	gv›_gëwrôemou¡_¨gs
;

112 
	tv›_gëwrôemou¡_t
(
	tv›_gëwrôemou¡_¨gs
 *);

114 
	gv›_¥öt_¨gs
;

115 
	tv›_¥öt_t
(
	tv›_¥öt_¨gs
 *);

117 
	gv›_∑thc⁄f_¨gs
;

118 
	tv›_∑thc⁄f_t
(
	tv›_∑thc⁄f_¨gs
 *);

120 
	gv›_advlock_¨gs
;

121 
	tv›_advlock_t
(
	tv›_advlock_¨gs
 *);

123 
	gv›_advlockasync_¨gs
;

124 
	tv›_advlockasync_t
(
	tv›_advlockasync_¨gs
 *);

126 
	gv›_advlockpurge_¨gs
;

127 
	tv›_advlockpurge_t
(
	tv›_advlockpurge_¨gs
 *);

129 
	gv›_ªÆlocblks_¨gs
;

130 
	tv›_ªÆlocblks_t
(
	tv›_ªÆlocblks_¨gs
 *);

132 
	gv›_gë∑ges_¨gs
;

133 
	tv›_gë∑ges_t
(
	tv›_gë∑ges_¨gs
 *);

135 
	gv›_gë∑ges_async_¨gs
;

136 
	tv›_gë∑ges_async_t
(
	tv›_gë∑ges_async_¨gs
 *);

138 
	gv›_puçages_¨gs
;

139 
	tv›_puçages_t
(
	tv›_puçages_¨gs
 *);

141 
	gv›_gëa˛_¨gs
;

142 
	tv›_gëa˛_t
(
	tv›_gëa˛_¨gs
 *);

144 
	gv›_£è˛_¨gs
;

145 
	tv›_£è˛_t
(
	tv›_£è˛_¨gs
 *);

147 
	gv›_a˛check_¨gs
;

148 
	tv›_a˛check_t
(
	tv›_a˛check_¨gs
 *);

150 
	gv›_˛o£exèâr_¨gs
;

151 
	tv›_˛o£exèâr_t
(
	tv›_˛o£exèâr_¨gs
 *);

153 
	gv›_gëexèâr_¨gs
;

154 
	tv›_gëexèâr_t
(
	tv›_gëexèâr_¨gs
 *);

156 
	gv›_li°exèâr_¨gs
;

157 
	tv›_li°exèâr_t
(
	tv›_li°exèâr_¨gs
 *);

159 
	gv›_›íexèâr_¨gs
;

160 
	tv›_›íexèâr_t
(
	tv›_›íexèâr_¨gs
 *);

162 
	gv›_dñëìxèâr_¨gs
;

163 
	tv›_dñëìxèâr_t
(
	tv›_dñëìxèâr_¨gs
 *);

165 
	gv›_£ãxèâr_¨gs
;

166 
	tv›_£ãxèâr_t
(
	tv›_£ãxèâr_¨gs
 *);

168 
	gv›_£éabñ_¨gs
;

169 
	tv›_£éabñ_t
(
	tv›_£éabñ_¨gs
 *);

171 
	gv›_v±ofh_¨gs
;

172 
	tv›_v±ofh_t
(
	tv›_v±ofh_¨gs
 *);

174 
	gv›_v±o˙p_¨gs
;

175 
	tv›_v±o˙p_t
(
	tv›_v±o˙p_¨gs
 *);

177 
	gv›_Æloˇã_¨gs
;

178 
	tv›_Æloˇã_t
(
	tv›_Æloˇã_¨gs
 *);

180 
	gv›_advi£_¨gs
;

181 
	tv›_advi£_t
(
	tv›_advi£_¨gs
 *);

183 
	gv›_u≈_böd_¨gs
;

184 
	tv›_u≈_böd_t
(
	tv›_u≈_böd_¨gs
 *);

186 
	gv›_u≈_c⁄√˘_¨gs
;

187 
	tv›_u≈_c⁄√˘_t
(
	tv›_u≈_c⁄√˘_¨gs
 *);

189 
	gv›_u≈_dëach_¨gs
;

190 
	tv›_u≈_dëach_t
(
	tv›_u≈_dëach_¨gs
 *);

192 
	gv›_is_ãxt_¨gs
;

193 
	tv›_is_ãxt_t
(
	tv›_is_ãxt_¨gs
 *);

195 
	gv›_£t_ãxt_¨gs
;

196 
	tv›_£t_ãxt_t
(
	tv›_£t_ãxt_¨gs
 *);

198 
	gv›_un£t_ãxt_¨gs
;

199 
	tv›_un£t_ãxt_t
(
	tv›_un£t_ãxt_¨gs
 *);

201 
	gv›_gë_wrôecou¡_¨gs
;

202 
	tv›_gë_wrôecou¡_t
(
	tv›_gë_wrôecou¡_¨gs
 *);

204 
	gv›_add_wrôecou¡_¨gs
;

205 
	tv›_add_wrôecou¡_t
(
	tv›_add_wrôecou¡_¨gs
 *);

207 
	gv›_fd©async_¨gs
;

208 
	tv›_fd©async_t
(
	tv›_fd©async_¨gs
 *);

210 
	gv›_•¨e1_¨gs
;

211 
	tv›_•¨e1_t
(
	tv›_•¨e1_¨gs
 *);

213 
	gv›_•¨e2_¨gs
;

214 
	tv›_•¨e2_t
(
	tv›_•¨e2_¨gs
 *);

216 
	gv›_•¨e3_¨gs
;

217 
	tv›_•¨e3_t
(
	tv›_•¨e3_¨gs
 *);

219 
	gv›_•¨e4_¨gs
;

220 
	tv›_•¨e4_t
(
	tv›_•¨e4_¨gs
 *);

222 
	gv›_•¨e5_¨gs
;

223 
	tv›_•¨e5_t
(
	tv›_•¨e5_¨gs
 *);

	@/usr/include/dev/hwpmc/hwpmc_amd.h

33 #i‚de‡
_DEV_HWPMC_AMD_H_


34 
	#_DEV_HWPMC_AMD_H_
 1

	)

38 
	#AMD_PMC_EVSEL_0
 0xC0010000

	)

39 
	#AMD_PMC_EVSEL_1
 0xC0010001

	)

40 
	#AMD_PMC_EVSEL_2
 0xC0010002

	)

41 
	#AMD_PMC_EVSEL_3
 0xC0010003

	)

43 
	#AMD_PMC_PERFCTR_0
 0xC0010004

	)

44 
	#AMD_PMC_PERFCTR_1
 0xC0010005

	)

45 
	#AMD_PMC_PERFCTR_2
 0xC0010006

	)

46 
	#AMD_PMC_PERFCTR_3
 0xC0010007

	)

48 
	#AMD_PMC_EVSEL_4
 0xC0010208

	)

49 
	#AMD_PMC_EVSEL_5
 0xC001020A

	)

51 
	#AMD_PMC_PERFCTR_4
 0xC0010209

	)

52 
	#AMD_PMC_PERFCTR_5
 0xC001020B

	)

54 
	#AMD_PMC_EVSEL_EP_L3_0
 0xC0010230

	)

55 
	#AMD_PMC_EVSEL_EP_L3_1
 0xC0010232

	)

56 
	#AMD_PMC_EVSEL_EP_L3_2
 0xC0010234

	)

57 
	#AMD_PMC_EVSEL_EP_L3_3
 0xC0010236

	)

58 
	#AMD_PMC_EVSEL_EP_L3_4
 0xC0010238

	)

59 
	#AMD_PMC_EVSEL_EP_L3_5
 0xC001023A

	)

61 
	#AMD_PMC_PERFCTR_EP_L3_0
 0xC0010231

	)

62 
	#AMD_PMC_PERFCTR_EP_L3_1
 0xC0010233

	)

63 
	#AMD_PMC_PERFCTR_EP_L3_2
 0xC0010235

	)

64 
	#AMD_PMC_PERFCTR_EP_L3_3
 0xC0010237

	)

65 
	#AMD_PMC_PERFCTR_EP_L3_4
 0xC0010239

	)

66 
	#AMD_PMC_PERFCTR_EP_L3_5
 0xC001023B

	)

68 
	#AMD_PMC_EVSEL_EP_DF_0
 0xC0010240

	)

69 
	#AMD_PMC_EVSEL_EP_DF_1
 0xC0010242

	)

70 
	#AMD_PMC_EVSEL_EP_DF_2
 0xC0010244

	)

71 
	#AMD_PMC_EVSEL_EP_DF_3
 0xC0010246

	)

73 
	#AMD_PMC_PERFCTR_EP_DF_0
 0xC0010241

	)

74 
	#AMD_PMC_PERFCTR_EP_DF_1
 0xC0010243

	)

75 
	#AMD_PMC_PERFCTR_EP_DF_2
 0xC0010245

	)

76 
	#AMD_PMC_PERFCTR_EP_DF_3
 0xC0010247

	)

78 
	#AMD_NPMCS
 16

	)

81 
	#AMD_PMC_COUNTERMASK
 0xFF000000

	)

82 
	#AMD_PMC_TO_COUNTER
(
x
Ë(((xË<< 24Ë& 
AMD_PMC_COUNTERMASK
)

	)

83 
	#AMD_PMC_INVERT
 (1 << 23)

	)

84 
	#AMD_PMC_ENABLE
 (1 << 22)

	)

85 
	#AMD_PMC_INT
 (1 << 20)

	)

86 
	#AMD_PMC_PC
 (1 << 19)

	)

87 
	#AMD_PMC_EDGE
 (1 << 18)

	)

88 
	#AMD_PMC_OS
 (1 << 17)

	)

89 
	#AMD_PMC_USR
 (1 << 16)

	)

90 
	#AMD_PMC_L3SLICEMASK
 (0x000F000000000000)

	)

91 
	#AMD_PMC_L3COREMASK
 (0xFF00000000000000)

	)

92 
	#AMD_PMC_TO_L3SLICE
(
x
Ë(((xË<< 48Ë& 
AMD_PMC_L3SLICEMASK
)

	)

93 
	#AMD_PMC_TO_L3CORE
(
x
Ë(((xË<< 56Ë& 
AMD_PMC_L3COREMASK
)

	)

95 
	#AMD_PMC_UNITMASK_M
 0x10

	)

96 
	#AMD_PMC_UNITMASK_O
 0x08

	)

97 
	#AMD_PMC_UNITMASK_E
 0x04

	)

98 
	#AMD_PMC_UNITMASK_S
 0x02

	)

99 
	#AMD_PMC_UNITMASK_I
 0x01

	)

100 
	#AMD_PMC_UNITMASK_MOESI
 0x1F

	)

102 
	#AMD_PMC_UNITMASK
 0xFF00

	)

103 
	#AMD_PMC_EVENTMASK
 0xF000000FF

	)

105 
	#AMD_PMC_TO_UNITMASK
(
x
Ë(((xË<< 8Ë& 
AMD_PMC_UNITMASK
)

	)

106 
	#AMD_PMC_TO_EVENTMASK
(
x
Ë(((xË& 0xFFË| (((
uöt64_t
)(xË& 0xF00Ë<< 24))

	)

107 
	#AMD_PMC_TO_EVENTMASK_DF
(
x
Ë(((xË& 0xFFË| (((
uöt64_t
)(xË& 0x0F00Ë<< 24)Ë| (((uöt64_t)(xË& 0x3000Ë<< 47)

	)

108 
	#AMD_VALID_BITS
 (
AMD_PMC_COUNTERMASK
 | 
AMD_PMC_INVERT
 | \

109 
AMD_PMC_ENABLE
 | 
AMD_PMC_INT
 | 
AMD_PMC_PC
 | 
AMD_PMC_EDGE
 | \

110 
AMD_PMC_OS
 | 
AMD_PMC_USR
 | 
AMD_PMC_UNITMASK
 | 
AMD_PMC_EVENTMASK
)

	)

112 
	#AMD_PMC_CAPS
 (
PMC_CAP_INTERRUPT
 | 
PMC_CAP_USER
 | \

113 
PMC_CAP_SYSTEM
 | 
PMC_CAP_EDGE
 | 
PMC_CAP_THRESHOLD
 | \

114 
PMC_CAP_READ
 | 
PMC_CAP_WRITE
 | 
PMC_CAP_INVERT
 | 
PMC_CAP_QUALIFIER
)

	)

116 
	#AMD_PMC_IS_STOPPED
(
ev£l
Ë((
	`rdm§
(”v£l)Ë& 
AMD_PMC_ENABLE
Ë=0)

	)

117 
	#AMD_PMC_HAS_OVERFLOWED
(
pmc
Ë((
	`rdpmc
’mcË& (1ULL << 47)Ë=0)

	)

119 
	#AMD_RELOAD_COUNT_TO_PERFCTR_VALUE
(
V
Ë(-(V))

	)

120 
	#AMD_PERFCTR_VALUE_TO_RELOAD_COUNT
(
P
Ë(-(P))

	)

122 
	esub_˛ass
{

123 
	mPMC_AMD_SUB_CLASS_CORE
,

124 
	mPMC_AMD_SUB_CLASS_L3_CACHE
,

125 
	mPMC_AMD_SUB_CLASS_DATA_FABRIC


128 
	spmc_md_amd_›_pmˇŒoˇã
 {

129 
uöt64_t
 
	mpm_amd_c⁄fig
;

130 
uöt32_t
 
	mpm_amd_sub_˛ass
;

133 #ifde‡
_KERNEL


136 
	spmc_md_amd_pmc
 {

137 
uöt64_t
 
	mpm_amd_ev£l
;

	@/usr/include/dev/hwpmc/hwpmc_core.h

31 #i‚de‡
_DEV_HWPMC_CORE_H_


32 
	#_DEV_HWPMC_CORE_H_
 1

	)

34 
	#IA32_PERF_CAPABILITIES
 0x345

	)

35 
	#PERFCAP_LBR_FORMAT
 0x003f

	)

36 
	#PERFCAP_PEBS_TRAP
 0x0040

	)

37 
	#PERFCAP_PEBS_SAVEARCH
 0x0080

	)

38 
	#PERFCAP_PEBS_RECFORMAT
 0x0f00

	)

39 
	#PERFCAP_SMM_FREEZE
 0x1000

	)

40 
	#PERFCAP_FW_WRITE
 0x2000

	)

42 
	#IAF_OS
 0x1

	)

43 
	#IAF_USR
 0x2

	)

44 
	#IAF_ANY
 0x4

	)

45 
	#IAF_PMI
 0x8

	)

50 
	spmc_md_üp_›_pmˇŒoˇã
 {

51 
uöt32_t
 
	mpm_üp_c⁄fig
;

52 
uöt64_t
 
	mpm_üp_r•
;

55 
	#IAP_EVSEL
(
C
Ë((CË& 0xFF)

	)

56 
	#IAP_UMASK
(
C
Ë(((CË& 0xFFË<< 8)

	)

57 
	#IAP_USR
 (1 << 16)

	)

58 
	#IAP_OS
 (1 << 17)

	)

59 
	#IAP_EDGE
 (1 << 18)

	)

60 
	#IAP_INT
 (1 << 20)

	)

61 
	#IAP_ANY
 (1 << 21)

	)

62 
	#IAP_EN
 (1 << 22)

	)

63 
	#IAP_INV
 (1 << 23)

	)

64 
	#IAP_CMASK
(
C
Ë(((CË& 0xFFË<< 24)

	)

66 
	#IAP_EVSEL_GET
(
C
Ë((CË& 0xFF)

	)

67 
	#IAP_UMASK_GET
(
C
Ë(((CË& 0xFF00Ë>> 8)

	)

69 
	#IA_OFFCORE_RSP_MASK_I7WM
 0x000000F7FF

	)

70 
	#IA_OFFCORE_RSP_MASK_SBIB
 0x3F807F8FFF

	)

72 #ifdef 
_KERNEL


78 
	#IAF_MASK
 0xF

	)

80 
	#IAF_COUNTER_MASK
 0x0000ffffffffffff

	)

81 
	#IAF_CTR0
 0x309

	)

82 
	#IAF_CTR1
 0x30A

	)

83 
	#IAF_CTR2
 0x30B

	)

101 
	#IAF_OFFSET
 32

	)

102 
	#IAF_CTRL
 0x38D

	)

103 
	#IAF_CTRL_MASK
 0x0000000000000bbb

	)

109 
	#IAP_PMC0
 0x0C1

	)

110 
	#IAP_A_PMC0
 0x4C1

	)

130 
	#IAP_EVSEL_MASK
 0x00000000ffdfffff

	)

131 
	#IAP_EVSEL0
 0x186

	)

138 
	#IA_GLOBAL_STATUS
 0x38E

	)

139 
	#IA_GLOBAL_CTRL
 0x38F

	)

153 
	#IAF_GLOBAL_CTRL_MASK
 0x0000000700000000

	)

156 
	#IAP_GLOBAL_CTRL_MASK
 0x00000000ffffffff

	)

159 
	#IA_GLOBAL_CTRL_MASK
 0x00000007ffffffff

	)

161 
	#IA_GLOBAL_OVF_CTRL
 0x390

	)

163 
	#IA_GLOBAL_STATUS_FLAG_CONDCHG
 (1ULL << 63)

	)

164 
	#IA_GLOBAL_STATUS_FLAG_OVFBUF
 (1ULL << 62)

	)

169 
	#IA_OFFCORE_RSP0
 0x1A6

	)

170 
	#IA_OFFCORE_RSP1
 0x1A7

	)

172 
	spmc_md_üf_pmc
 {

173 
uöt64_t
 
	mpm_üf_˘æ
;

176 
	spmc_md_üp_pmc
 {

177 
uöt32_t
 
	mpm_üp_ev£l
;

178 
uöt64_t
 
	mpm_üp_r•
;

185 
pmc_c‹e_öôülize
(
pmc_mdï
 *
_md
, 
_max˝u
,

186 
_vîsi⁄_ovîride
);

187 
pmc_c‹e_föÆize
(
pmc_mdï
 *
_md
);

189 
pmc_üf_öôülize
(
pmc_mdï
 *
_md
, 
_max˝u
, 
_≈mc
, 
_width
);

190 
pmc_üf_föÆize
(
pmc_mdï
 *
_md
);

192 
pmc_üp_öôülize
(
pmc_mdï
 *
_md
, 
_max˝u
, 
_≈mc
, 
_width
,

193 
_Êags
);

194 
pmc_üp_föÆize
(
pmc_mdï
 *
_md
);

	@/usr/include/dev/hwpmc/hwpmc_tsc.h

31 #i‚de‡
_DEV_HWPMC_TSC_H_


32 
	#_DEV_HWPMC_TSC_H_
 1

	)

34 #ifdef 
_KERNEL


36 
	#TSC_NPMCS
 1

	)

42 
pmc_tsc_öôülize
(
pmc_mdï
 *
_md
, 
_max˝u
);

43 
pmc_tsc_föÆize
(
pmc_mdï
 *
_md
);

	@/usr/include/dev/hwpmc/hwpmc_uncore.h

31 #i‚de‡
_DEV_HWPMC_UNCORE_H_


32 
	#_DEV_HWPMC_UNCORE_H_
 1

	)

37 
	spmc_md_ucf_›_pmˇŒoˇã
 {

38 
uöt16_t
 
	mpm_ucf_Êags
;

41 
	#UCF_EN
 0x1

	)

42 
	#UCF_PMI
 0x4

	)

47 
	spmc_md_u˝_›_pmˇŒoˇã
 {

48 
uöt32_t
 
	mpm_u˝_c⁄fig
;

51 
	#UCP_EVSEL
(
C
Ë((CË& 0xFF)

	)

52 
	#UCP_UMASK
(
C
Ë((CË& 0xFF00)

	)

53 
	#UCP_CTRR
 (1 << 17)

	)

54 
	#UCP_EDGE
 (1 << 18)

	)

55 
	#UCP_INT
 (1 << 20)

	)

56 
	#UCP_EN
 (1 << 22)

	)

57 
	#UCP_INV
 (1 << 23)

	)

58 
	#UCP_CMASK
(
C
Ë(((CË& 0xFFË<< 24)

	)

59 #ifdef 
_KERNEL


61 
	#DCTL_FLAG_UNC_PMI
 (1ULL << 13)

	)

67 
	#UCF_MASK
 0xF

	)

69 
	#UCF_CTR0
 0x394

	)

71 
	#UCF_OFFSET
 32

	)

72 
	#UCF_OFFSET_SB
 29

	)

73 
	#UCF_CTRL
 0x395

	)

79 
	#UCP_PMC0
 0x3B0

	)

80 
	#UCP_EVSEL0
 0x3C0

	)

81 
	#UCP_OPCODE_MATCH
 0x396

	)

82 
	#UCP_CB0_EVSEL0
 0x700

	)

89 
	#UC_GLOBAL_STATUS
 0x392

	)

90 
	#UC_GLOBAL_CTRL
 0x391

	)

91 
	#UC_GLOBAL_OVF_CTRL
 0x393

	)

93 
	#UC_GLOBAL_STATUS_FLAG_CLRCHG
 (1ULL << 63)

	)

94 
	#UC_GLOBAL_STATUS_FLAG_OVFPMI
 (1ULL << 61)

	)

95 
	#UC_GLOBAL_CTRL_FLAG_FRZ
 (1ULL << 63)

	)

96 
	#UC_GLOBAL_CTRL_FLAG_ENPMICORE0
 (1ULL << 48)

	)

102 
	#MSR_GQ_SNOOP_MESF
 0x301

	)

104 
	spmc_md_ucf_pmc
 {

105 
uöt64_t
 
	mpm_ucf_˘æ
;

108 
	spmc_md_u˝_pmc
 {

109 
uöt32_t
 
	mpm_u˝_ev£l
;

116 
pmc_unc‹e_öôülize
(
pmc_mdï
 *
_md
, 
_max˝u
);

117 
pmc_unc‹e_föÆize
(
pmc_mdï
 *
_md
);

119 
pmc_ucf_öôülize
(
pmc_mdï
 *
_md
, 
_max˝u
, 
_≈mc
, 
_width
);

120 
pmc_ucf_föÆize
(
pmc_mdï
 *
_md
);

122 
pmc_u˝_öôülize
(
pmc_mdï
 *
_md
, 
_max˝u
, 
_≈mc
, 
_width
,

123 
_Êags
);

124 
pmc_u˝_föÆize
(
pmc_mdï
 *
_md
);

	@/usr/include/dev/ic/i8253reg.h

63 
	#TIMER_REG_CNTR0
 0

	)

64 
	#TIMER_REG_CNTR1
 1

	)

65 
	#TIMER_REG_CNTR2
 2

	)

66 
	#TIMER_REG_MODE
 3

	)

67 
	#TIMER_SEL0
 0x00

	)

68 
	#TIMER_SEL1
 0x40

	)

69 
	#TIMER_SEL2
 0x80

	)

70 
	#TIMER_INTTC
 0x00

	)

71 
	#TIMER_ONESHOT
 0x02

	)

72 
	#TIMER_RATEGEN
 0x04

	)

73 
	#TIMER_SQWAVE
 0x06

	)

74 
	#TIMER_SWSTROBE
 0x08

	)

75 
	#TIMER_HWSTROBE
 0x0®

	)

76 
	#TIMER_LATCH
 0x00

	)

77 
	#TIMER_LSB
 0x10

	)

78 
	#TIMER_MSB
 0x20

	)

79 
	#TIMER_16BIT
 0x30

	)

80 
	#TIMER_BCD
 0x01

	)

	@/usr/include/dev/pci/pcireg.h

45 
	#PCI_DOMAINMAX
 65535

	)

46 
	#PCI_BUSMAX
 255

	)

47 
	#PCI_SLOTMAX
 31

	)

48 
	#PCI_FUNCMAX
 7

	)

49 
	#PCI_REGMAX
 255

	)

50 
	#PCIE_REGMAX
 4095

	)

51 
	#PCI_MAXHDRTYPE
 2

	)

53 
	#PCIE_ARI_SLOTMAX
 0

	)

54 
	#PCIE_ARI_FUNCMAX
 255

	)

56 
	#PCI_RID_DOMAIN_SHIFT
 16

	)

57 
	#PCI_RID_BUS_SHIFT
 8

	)

58 
	#PCI_RID_SLOT_SHIFT
 3

	)

59 
	#PCI_RID_FUNC_SHIFT
 0

	)

61 
	#PCI_RID
(
bus
, 
¶Ÿ
, 
func
) \

62 ((((
bus
Ë& 
PCI_BUSMAX
Ë<< 
PCI_RID_BUS_SHIFT
) | \

63 (((
¶Ÿ
Ë& 
PCI_SLOTMAX
Ë<< 
PCI_RID_SLOT_SHIFT
) | \

64 (((
func
Ë& 
PCI_FUNCMAX
Ë<< 
PCI_RID_FUNC_SHIFT
))

	)

66 
	#PCI_ARI_RID
(
bus
, 
func
) \

67 ((((
bus
Ë& 
PCI_BUSMAX
Ë<< 
PCI_RID_BUS_SHIFT
) | \

68 (((
func
Ë& 
PCIE_ARI_FUNCMAX
Ë<< 
PCI_RID_FUNC_SHIFT
))

	)

70 
	#PCI_RID2BUS
(
rid
Ë((‘idË>> 
PCI_RID_BUS_SHIFT
Ë& 
PCI_BUSMAX
)

	)

71 
	#PCI_RID2SLOT
(
rid
Ë((‘idË>> 
PCI_RID_SLOT_SHIFT
Ë& 
PCI_SLOTMAX
)

	)

72 
	#PCI_RID2FUNC
(
rid
Ë((‘idË>> 
PCI_RID_FUNC_SHIFT
Ë& 
PCI_FUNCMAX
)

	)

74 
	#PCIE_ARI_RID2SLOT
(
rid
Ë(0)

	)

75 
	#PCIE_ARI_RID2FUNC
(
rid
) \

76 (((
rid
Ë>> 
PCI_RID_FUNC_SHIFT
Ë& 
PCIE_ARI_FUNCMAX
)

	)

78 
	#PCIE_ARI_SLOT
(
func
Ë(((funcË>> 
PCI_RID_SLOT_SHIFT
Ë& 
PCI_SLOTMAX
)

	)

79 
	#PCIE_ARI_FUNC
(
func
Ë(((funcË>> 
PCI_RID_FUNC_SHIFT
Ë& 
PCI_FUNCMAX
)

	)

83 
	#PCIR_DEVVENDOR
 0x00

	)

84 
	#PCIR_VENDOR
 0x00

	)

85 
	#PCIR_DEVICE
 0x02

	)

86 
	#PCIR_COMMAND
 0x04

	)

87 
	#PCIM_CMD_PORTEN
 0x0001

	)

88 
	#PCIM_CMD_MEMEN
 0x0002

	)

89 
	#PCIM_CMD_BUSMASTEREN
 0x0004

	)

90 
	#PCIM_CMD_SPECIALEN
 0x0008

	)

91 
	#PCIM_CMD_MWRICEN
 0x0010

	)

92 
	#PCIM_CMD_PERRESPEN
 0x0040

	)

93 
	#PCIM_CMD_SERRESPEN
 0x0100

	)

94 
	#PCIM_CMD_BACKTOBACK
 0x0200

	)

95 
	#PCIM_CMD_INTxDIS
 0x0400

	)

96 
	#PCIR_STATUS
 0x06

	)

97 
	#PCIM_STATUS_INTxSTATE
 0x0008

	)

98 
	#PCIM_STATUS_CAPPRESENT
 0x0010

	)

99 
	#PCIM_STATUS_66CAPABLE
 0x0020

	)

100 
	#PCIM_STATUS_BACKTOBACK
 0x0080

	)

101 
	#PCIM_STATUS_MDPERR
 0x0100

	)

102 
	#PCIM_STATUS_SEL_FAST
 0x0000

	)

103 
	#PCIM_STATUS_SEL_MEDIMUM
 0x0200

	)

104 
	#PCIM_STATUS_SEL_SLOW
 0x0400

	)

105 
	#PCIM_STATUS_SEL_MASK
 0x0600

	)

106 
	#PCIM_STATUS_STABORT
 0x0800

	)

107 
	#PCIM_STATUS_RTABORT
 0x1000

	)

108 
	#PCIM_STATUS_RMABORT
 0x2000

	)

109 
	#PCIM_STATUS_SERR
 0x4000

	)

110 
	#PCIM_STATUS_PERR
 0x8000

	)

111 
	#PCIR_REVID
 0x08

	)

112 
	#PCIR_PROGIF
 0x09

	)

113 
	#PCIR_SUBCLASS
 0x0a

	)

114 
	#PCIR_CLASS
 0x0b

	)

115 
	#PCIR_CACHELNSZ
 0x0c

	)

116 
	#PCIR_LATTIMER
 0x0d

	)

117 
	#PCIR_HDRTYPE
 0x0e

	)

118 
	#PCIM_HDRTYPE
 0x7f

	)

119 
	#PCIM_HDRTYPE_NORMAL
 0x00

	)

120 
	#PCIM_HDRTYPE_BRIDGE
 0x01

	)

121 
	#PCIM_HDRTYPE_CARDBUS
 0x02

	)

122 
	#PCIM_MFDEV
 0x80

	)

123 
	#PCIR_BIST
 0x0f

	)

126 
	#PCIV_INVALID
 0xffff

	)

130 
	#PCICAP_ID
 0x0

	)

131 
	#PCICAP_NEXTPTR
 0x1

	)

135 
	#PCIY_PMG
 0x01

	)

136 
	#PCIY_AGP
 0x02

	)

137 
	#PCIY_VPD
 0x03

	)

138 
	#PCIY_SLOTID
 0x04

	)

139 
	#PCIY_MSI
 0x05

	)

140 
	#PCIY_CHSWP
 0x06

	)

141 
	#PCIY_PCIX
 0x07

	)

142 
	#PCIY_HT
 0x08

	)

143 
	#PCIY_VENDOR
 0x09

	)

144 
	#PCIY_DEBUG
 0x0®

	)

145 
	#PCIY_CRES
 0x0b

	)

146 
	#PCIY_HOTPLUG
 0x0¯

	)

147 
	#PCIY_SUBVENDOR
 0x0d

	)

148 
	#PCIY_AGP8X
 0x0ê

	)

149 
	#PCIY_SECDEV
 0x0‡

	)

150 
	#PCIY_EXPRESS
 0x10

	)

151 
	#PCIY_MSIX
 0x11

	)

152 
	#PCIY_SATA
 0x12

	)

153 
	#PCIY_PCIAF
 0x13

	)

154 
	#PCIY_EA
 0x14

	)

158 
	#PCIR_EXTCAP
 0x100

	)

159 
	#PCIM_EXTCAP_ID
 0x0000ffff

	)

160 
	#PCIM_EXTCAP_VER
 0x000f0000

	)

161 
	#PCIM_EXTCAP_NEXTPTR
 0xfff00000

	)

162 
	#PCI_EXTCAP_ID
(
eˇp
Ë(”ˇpË& 
PCIM_EXTCAP_ID
)

	)

163 
	#PCI_EXTCAP_VER
(
eˇp
Ë((”ˇpË& 
PCIM_EXTCAP_VER
Ë>> 16)

	)

164 
	#PCI_EXTCAP_NEXTPTR
(
eˇp
Ë((”ˇpË& 
PCIM_EXTCAP_NEXTPTR
Ë>> 20)

	)

168 
	#PCIZ_AER
 0x0001

	)

169 
	#PCIZ_VC
 0x0002

	)

170 
	#PCIZ_SERNUM
 0x0003

	)

171 
	#PCIZ_PWRBDGT
 0x0004

	)

172 
	#PCIZ_RCLINK_DCL
 0x0005

	)

173 
	#PCIZ_RCLINK_CTL
 0x0006

	)

174 
	#PCIZ_RCEC_ASSOC
 0x0007

	)

175 
	#PCIZ_MFVC
 0x0008

	)

176 
	#PCIZ_VC2
 0x0009

	)

177 
	#PCIZ_RCRB
 0x000®

	)

178 
	#PCIZ_VENDOR
 0x000b

	)

179 
	#PCIZ_CAC
 0x000¯

	)

180 
	#PCIZ_ACS
 0x000d

	)

181 
	#PCIZ_ARI
 0x000ê

	)

182 
	#PCIZ_ATS
 0x000‡

	)

183 
	#PCIZ_SRIOV
 0x0010

	)

184 
	#PCIZ_MRIOV
 0x0011

	)

185 
	#PCIZ_MULTICAST
 0x0012

	)

186 
	#PCIZ_PAGE_REQ
 0x0013

	)

187 
	#PCIZ_AMD
 0x0014

	)

188 
	#PCIZ_RESIZE_BAR
 0x0015

	)

189 
	#PCIZ_DPA
 0x0016

	)

190 
	#PCIZ_TPH_REQ
 0x0017

	)

191 
	#PCIZ_LTR
 0x0018

	)

192 
	#PCIZ_SEC_PCIE
 0x0019

	)

193 
	#PCIZ_PMUX
 0x001®

	)

194 
	#PCIZ_PASID
 0x001b

	)

195 
	#PCIZ_LN_REQ
 0x001¯

	)

196 
	#PCIZ_DPC
 0x001d

	)

197 
	#PCIZ_L1PM
 0x001ê

	)

201 
	#PCIR_BARS
 0x10

	)

202 
	#PCIR_BAR
(
x
Ë(
PCIR_BARS
 + (xË* 4)

	)

203 
	#PCIR_MAX_BAR_0
 5

	)

204 
	#PCI_RID2BAR
(
rid
Ë((‘idË- 
PCIR_BARS
Ë/ 4)

	)

205 
	#PCI_BAR_IO
(
x
Ë(((xË& 
PCIM_BAR_SPACE
Ë=
PCIM_BAR_IO_SPACE
)

	)

206 
	#PCI_BAR_MEM
(
x
Ë(((xË& 
PCIM_BAR_SPACE
Ë=
PCIM_BAR_MEM_SPACE
)

	)

207 
	#PCIM_BAR_SPACE
 0x00000001

	)

208 
	#PCIM_BAR_MEM_SPACE
 0

	)

209 
	#PCIM_BAR_IO_SPACE
 1

	)

210 
	#PCIM_BAR_MEM_TYPE
 0x00000006

	)

211 
	#PCIM_BAR_MEM_32
 0

	)

212 
	#PCIM_BAR_MEM_1MB
 2

	)

213 
	#PCIM_BAR_MEM_64
 4

	)

214 
	#PCIM_BAR_MEM_PREFETCH
 0x00000008

	)

215 
	#PCIM_BAR_MEM_BASE
 0xfffffffffffffff0ULL

	)

216 
	#PCIM_BAR_IO_RESERVED
 0x00000002

	)

217 
	#PCIM_BAR_IO_BASE
 0xfffffffc

	)

218 
	#PCIR_CIS
 0x28

	)

219 
	#PCIM_CIS_ASI_MASK
 0x00000007

	)

220 
	#PCIM_CIS_ASI_CONFIG
 0

	)

221 
	#PCIM_CIS_ASI_BAR0
 1

	)

222 
	#PCIM_CIS_ASI_BAR1
 2

	)

223 
	#PCIM_CIS_ASI_BAR2
 3

	)

224 
	#PCIM_CIS_ASI_BAR3
 4

	)

225 
	#PCIM_CIS_ASI_BAR4
 5

	)

226 
	#PCIM_CIS_ASI_BAR5
 6

	)

227 
	#PCIM_CIS_ASI_ROM
 7

	)

228 
	#PCIM_CIS_ADDR_MASK
 0x0ffffff8

	)

229 
	#PCIM_CIS_ROM_MASK
 0xf0000000

	)

230 
	#PCIM_CIS_CONFIG_MASK
 0xff

	)

231 
	#PCIR_SUBVEND_0
 0x2c

	)

232 
	#PCIR_SUBDEV_0
 0x2e

	)

233 
	#PCIR_BIOS
 0x30

	)

234 
	#PCIM_BIOS_ENABLE
 0x01

	)

235 
	#PCIM_BIOS_ADDR_MASK
 0xfffff800

	)

236 
	#PCIR_CAP_PTR
 0x34

	)

237 
	#PCIR_INTLINE
 0x3c

	)

238 
	#PCIR_INTPIN
 0x3d

	)

239 
	#PCIR_MINGNT
 0x3e

	)

240 
	#PCIR_MAXLAT
 0x3f

	)

244 
	#PCIR_MAX_BAR_1
 1

	)

245 
	#PCIR_SECSTAT_1
 0x1e

	)

247 
	#PCIR_PRIBUS_1
 0x18

	)

248 
	#PCIR_SECBUS_1
 0x19

	)

249 
	#PCIR_SUBBUS_1
 0x1a

	)

250 
	#PCIR_SECLAT_1
 0x1b

	)

252 
	#PCIR_IOBASEL_1
 0x1c

	)

253 
	#PCIR_IOLIMITL_1
 0x1d

	)

254 
	#PCIR_IOBASEH_1
 0x30

	)

255 
	#PCIR_IOLIMITH_1
 0x32

	)

256 
	#PCIM_BRIO_16
 0x0

	)

257 
	#PCIM_BRIO_32
 0x1

	)

258 
	#PCIM_BRIO_MASK
 0xf

	)

260 
	#PCIR_MEMBASE_1
 0x20

	)

261 
	#PCIR_MEMLIMIT_1
 0x22

	)

263 
	#PCIR_PMBASEL_1
 0x24

	)

264 
	#PCIR_PMLIMITL_1
 0x26

	)

265 
	#PCIR_PMBASEH_1
 0x28

	)

266 
	#PCIR_PMLIMITH_1
 0x2c

	)

267 
	#PCIM_BRPM_32
 0x0

	)

268 
	#PCIM_BRPM_64
 0x1

	)

269 
	#PCIM_BRPM_MASK
 0xf

	)

271 
	#PCIR_BIOS_1
 0x38

	)

272 
	#PCIR_BRIDGECTL_1
 0x3e

	)

274 
	#PCI_PPBMEMBASE
(
h
,
l
Ë((((
uöt64_t
)(hË<< 32Ë+ (÷)<<16)Ë& ~0xfffff)

	)

275 
	#PCI_PPBMEMLIMIT
(
h
,
l
Ë((((
uöt64_t
)(hË<< 32Ë+ (÷)<<16)Ë| 0xfffff)

	)

276 
	#PCI_PPBIOBASE
(
h
,
l
Ë((((h)<<16Ë+ (÷)<<8)Ë& ~0xfff)

	)

277 
	#PCI_PPBIOLIMIT
(
h
,
l
Ë((((h)<<16Ë+ (÷)<<8)Ë| 0xfff)

	)

281 
	#PCIR_MAX_BAR_2
 0

	)

282 
	#PCIR_CAP_PTR_2
 0x14

	)

283 
	#PCIR_SECSTAT_2
 0x16

	)

285 
	#PCIR_PRIBUS_2
 0x18

	)

286 
	#PCIR_SECBUS_2
 0x19

	)

287 
	#PCIR_SUBBUS_2
 0x1a

	)

288 
	#PCIR_SECLAT_2
 0x1b

	)

290 
	#PCIR_MEMBASE0_2
 0x1c

	)

291 
	#PCIR_MEMLIMIT0_2
 0x20

	)

292 
	#PCIR_MEMBASE1_2
 0x24

	)

293 
	#PCIR_MEMLIMIT1_2
 0x28

	)

294 
	#PCIR_IOBASE0_2
 0x2c

	)

295 
	#PCIR_IOLIMIT0_2
 0x30

	)

296 
	#PCIR_IOBASE1_2
 0x34

	)

297 
	#PCIR_IOLIMIT1_2
 0x38

	)

298 
	#PCIM_CBBIO_16
 0x0

	)

299 
	#PCIM_CBBIO_32
 0x1

	)

300 
	#PCIM_CBBIO_MASK
 0x3

	)

302 
	#PCIR_BRIDGECTL_2
 0x3e

	)

304 
	#PCIR_SUBVEND_2
 0x40

	)

305 
	#PCIR_SUBDEV_2
 0x42

	)

307 
	#PCIR_PCCARDIF_2
 0x44

	)

309 
	#PCI_CBBMEMBASE
(
l
Ë(÷Ë& ~0xfffff)

	)

310 
	#PCI_CBBMEMLIMIT
(
l
Ë(÷Ë| 0xfffff)

	)

311 
	#PCI_CBBIOBASE
(
l
Ë(÷Ë& ~0x3)

	)

312 
	#PCI_CBBIOLIMIT
(
l
Ë(÷Ë| 0x3)

	)

316 
	#PCIC_OLD
 0x00

	)

317 
	#PCIS_OLD_NONVGA
 0x00

	)

318 
	#PCIS_OLD_VGA
 0x01

	)

320 
	#PCIC_STORAGE
 0x01

	)

321 
	#PCIS_STORAGE_SCSI
 0x00

	)

322 
	#PCIS_STORAGE_IDE
 0x01

	)

323 
	#PCIP_STORAGE_IDE_MODEPRIM
 0x01

	)

324 
	#PCIP_STORAGE_IDE_PROGINDPRIM
 0x02

	)

325 
	#PCIP_STORAGE_IDE_MODESEC
 0x04

	)

326 
	#PCIP_STORAGE_IDE_PROGINDSEC
 0x08

	)

327 
	#PCIP_STORAGE_IDE_MASTERDEV
 0x80

	)

328 
	#PCIS_STORAGE_FLOPPY
 0x02

	)

329 
	#PCIS_STORAGE_IPI
 0x03

	)

330 
	#PCIS_STORAGE_RAID
 0x04

	)

331 
	#PCIS_STORAGE_ATA_ADMA
 0x05

	)

332 
	#PCIS_STORAGE_SATA
 0x06

	)

333 
	#PCIP_STORAGE_SATA_AHCI_1_0
 0x01

	)

334 
	#PCIS_STORAGE_SAS
 0x07

	)

335 
	#PCIS_STORAGE_NVM
 0x08

	)

336 
	#PCIP_STORAGE_NVM_NVMHCI_1_0
 0x01

	)

337 
	#PCIP_STORAGE_NVM_ENTERPRISE_NVMHCI_1_0
 0x02

	)

338 
	#PCIS_STORAGE_OTHER
 0x80

	)

340 
	#PCIC_NETWORK
 0x02

	)

341 
	#PCIS_NETWORK_ETHERNET
 0x00

	)

342 
	#PCIS_NETWORK_TOKENRING
 0x01

	)

343 
	#PCIS_NETWORK_FDDI
 0x02

	)

344 
	#PCIS_NETWORK_ATM
 0x03

	)

345 
	#PCIS_NETWORK_ISDN
 0x04

	)

346 
	#PCIS_NETWORK_WORLDFIP
 0x05

	)

347 
	#PCIS_NETWORK_PICMG
 0x06

	)

348 
	#PCIS_NETWORK_OTHER
 0x80

	)

350 
	#PCIC_DISPLAY
 0x03

	)

351 
	#PCIS_DISPLAY_VGA
 0x00

	)

352 
	#PCIS_DISPLAY_XGA
 0x01

	)

353 
	#PCIS_DISPLAY_3D
 0x02

	)

354 
	#PCIS_DISPLAY_OTHER
 0x80

	)

356 
	#PCIC_MULTIMEDIA
 0x04

	)

357 
	#PCIS_MULTIMEDIA_VIDEO
 0x00

	)

358 
	#PCIS_MULTIMEDIA_AUDIO
 0x01

	)

359 
	#PCIS_MULTIMEDIA_TELE
 0x02

	)

360 
	#PCIS_MULTIMEDIA_HDA
 0x03

	)

361 
	#PCIS_MULTIMEDIA_OTHER
 0x80

	)

363 
	#PCIC_MEMORY
 0x05

	)

364 
	#PCIS_MEMORY_RAM
 0x00

	)

365 
	#PCIS_MEMORY_FLASH
 0x01

	)

366 
	#PCIS_MEMORY_OTHER
 0x80

	)

368 
	#PCIC_BRIDGE
 0x06

	)

369 
	#PCIS_BRIDGE_HOST
 0x00

	)

370 
	#PCIS_BRIDGE_ISA
 0x01

	)

371 
	#PCIS_BRIDGE_EISA
 0x02

	)

372 
	#PCIS_BRIDGE_MCA
 0x03

	)

373 
	#PCIS_BRIDGE_PCI
 0x04

	)

374 
	#PCIP_BRIDGE_PCI_SUBTRACTIVE
 0x01

	)

375 
	#PCIS_BRIDGE_PCMCIA
 0x05

	)

376 
	#PCIS_BRIDGE_NUBUS
 0x06

	)

377 
	#PCIS_BRIDGE_CARDBUS
 0x07

	)

378 
	#PCIS_BRIDGE_RACEWAY
 0x08

	)

379 
	#PCIS_BRIDGE_PCI_TRANSPARENT
 0x09

	)

380 
	#PCIS_BRIDGE_INFINIBAND
 0x0a

	)

381 
	#PCIS_BRIDGE_OTHER
 0x80

	)

383 
	#PCIC_SIMPLECOMM
 0x07

	)

384 
	#PCIS_SIMPLECOMM_UART
 0x00

	)

385 
	#PCIP_SIMPLECOMM_UART_8250
 0x00

	)

386 
	#PCIP_SIMPLECOMM_UART_16450A
 0x01

	)

387 
	#PCIP_SIMPLECOMM_UART_16550A
 0x02

	)

388 
	#PCIP_SIMPLECOMM_UART_16650A
 0x03

	)

389 
	#PCIP_SIMPLECOMM_UART_16750A
 0x04

	)

390 
	#PCIP_SIMPLECOMM_UART_16850A
 0x05

	)

391 
	#PCIP_SIMPLECOMM_UART_16950A
 0x06

	)

392 
	#PCIS_SIMPLECOMM_PAR
 0x01

	)

393 
	#PCIS_SIMPLECOMM_MULSER
 0x02

	)

394 
	#PCIS_SIMPLECOMM_MODEM
 0x03

	)

395 
	#PCIS_SIMPLECOMM_GPIB
 0x04

	)

396 
	#PCIS_SIMPLECOMM_SMART_CARD
 0x05

	)

397 
	#PCIS_SIMPLECOMM_OTHER
 0x80

	)

399 
	#PCIC_BASEPERIPH
 0x08

	)

400 
	#PCIS_BASEPERIPH_PIC
 0x00

	)

401 
	#PCIP_BASEPERIPH_PIC_8259A
 0x00

	)

402 
	#PCIP_BASEPERIPH_PIC_ISA
 0x01

	)

403 
	#PCIP_BASEPERIPH_PIC_EISA
 0x02

	)

404 
	#PCIP_BASEPERIPH_PIC_IO_APIC
 0x10

	)

405 
	#PCIP_BASEPERIPH_PIC_IOX_APIC
 0x20

	)

406 
	#PCIS_BASEPERIPH_DMA
 0x01

	)

407 
	#PCIS_BASEPERIPH_TIMER
 0x02

	)

408 
	#PCIS_BASEPERIPH_RTC
 0x03

	)

409 
	#PCIS_BASEPERIPH_PCIHOT
 0x04

	)

410 
	#PCIS_BASEPERIPH_SDHC
 0x05

	)

411 
	#PCIS_BASEPERIPH_IOMMU
 0x06

	)

412 
	#PCIS_BASEPERIPH_OTHER
 0x80

	)

414 
	#PCIC_INPUTDEV
 0x09

	)

415 
	#PCIS_INPUTDEV_KEYBOARD
 0x00

	)

416 
	#PCIS_INPUTDEV_DIGITIZER
 0x01

	)

417 
	#PCIS_INPUTDEV_MOUSE
 0x02

	)

418 
	#PCIS_INPUTDEV_SCANNER
 0x03

	)

419 
	#PCIS_INPUTDEV_GAMEPORT
 0x04

	)

420 
	#PCIS_INPUTDEV_OTHER
 0x80

	)

422 
	#PCIC_DOCKING
 0x0a

	)

423 
	#PCIS_DOCKING_GENERIC
 0x00

	)

424 
	#PCIS_DOCKING_OTHER
 0x80

	)

426 
	#PCIC_PROCESSOR
 0x0b

	)

427 
	#PCIS_PROCESSOR_386
 0x00

	)

428 
	#PCIS_PROCESSOR_486
 0x01

	)

429 
	#PCIS_PROCESSOR_PENTIUM
 0x02

	)

430 
	#PCIS_PROCESSOR_ALPHA
 0x10

	)

431 
	#PCIS_PROCESSOR_POWERPC
 0x20

	)

432 
	#PCIS_PROCESSOR_MIPS
 0x30

	)

433 
	#PCIS_PROCESSOR_COPROC
 0x40

	)

435 
	#PCIC_SERIALBUS
 0x0c

	)

436 
	#PCIS_SERIALBUS_FW
 0x00

	)

437 
	#PCIS_SERIALBUS_ACCESS
 0x01

	)

438 
	#PCIS_SERIALBUS_SSA
 0x02

	)

439 
	#PCIS_SERIALBUS_USB
 0x03

	)

440 
	#PCIP_SERIALBUS_USB_UHCI
 0x00

	)

441 
	#PCIP_SERIALBUS_USB_OHCI
 0x10

	)

442 
	#PCIP_SERIALBUS_USB_EHCI
 0x20

	)

443 
	#PCIP_SERIALBUS_USB_XHCI
 0x30

	)

444 
	#PCIP_SERIALBUS_USB_DEVICE
 0x„

	)

445 
	#PCIS_SERIALBUS_FC
 0x04

	)

446 
	#PCIS_SERIALBUS_SMBUS
 0x05

	)

447 
	#PCIS_SERIALBUS_INFINIBAND
 0x06

	)

448 
	#PCIS_SERIALBUS_IPMI
 0x07

	)

449 
	#PCIP_SERIALBUS_IPMI_SMIC
 0x00

	)

450 
	#PCIP_SERIALBUS_IPMI_KCS
 0x01

	)

451 
	#PCIP_SERIALBUS_IPMI_BT
 0x02

	)

452 
	#PCIS_SERIALBUS_SERCOS
 0x08

	)

453 
	#PCIS_SERIALBUS_CANBUS
 0x09

	)

455 
	#PCIC_WIRELESS
 0x0d

	)

456 
	#PCIS_WIRELESS_IRDA
 0x00

	)

457 
	#PCIS_WIRELESS_IR
 0x01

	)

458 
	#PCIS_WIRELESS_RF
 0x10

	)

459 
	#PCIS_WIRELESS_BLUETOOTH
 0x11

	)

460 
	#PCIS_WIRELESS_BROADBAND
 0x12

	)

461 
	#PCIS_WIRELESS_80211A
 0x20

	)

462 
	#PCIS_WIRELESS_80211B
 0x21

	)

463 
	#PCIS_WIRELESS_OTHER
 0x80

	)

465 
	#PCIC_INTELLIIO
 0x0e

	)

466 
	#PCIS_INTELLIIO_I2O
 0x00

	)

468 
	#PCIC_SATCOM
 0x0f

	)

469 
	#PCIS_SATCOM_TV
 0x01

	)

470 
	#PCIS_SATCOM_AUDIO
 0x02

	)

471 
	#PCIS_SATCOM_VOICE
 0x03

	)

472 
	#PCIS_SATCOM_DATA
 0x04

	)

474 
	#PCIC_CRYPTO
 0x10

	)

475 
	#PCIS_CRYPTO_NETCOMP
 0x00

	)

476 
	#PCIS_CRYPTO_ENTERTAIN
 0x10

	)

477 
	#PCIS_CRYPTO_OTHER
 0x80

	)

479 
	#PCIC_DASP
 0x11

	)

480 
	#PCIS_DASP_DPIO
 0x00

	)

481 
	#PCIS_DASP_PERFCNTRS
 0x01

	)

482 
	#PCIS_DASP_COMM_SYNC
 0x10

	)

483 
	#PCIS_DASP_MGMT_CARD
 0x20

	)

484 
	#PCIS_DASP_OTHER
 0x80

	)

486 
	#PCIC_ACCEL
 0x12

	)

487 
	#PCIS_ACCEL_PROCESSING
 0x00

	)

489 
	#PCIC_INSTRUMENT
 0x13

	)

491 
	#PCIC_OTHER
 0xff

	)

494 
	#PCIB_BCR_PERR_ENABLE
 0x0001

	)

495 
	#PCIB_BCR_SERR_ENABLE
 0x0002

	)

496 
	#PCIB_BCR_ISA_ENABLE
 0x0004

	)

497 
	#PCIB_BCR_VGA_ENABLE
 0x0008

	)

498 
	#PCIB_BCR_MASTER_ABORT_MODE
 0x0020

	)

499 
	#PCIB_BCR_SECBUS_RESET
 0x0040

	)

500 
	#PCIB_BCR_SECBUS_BACKTOBACK
 0x0080

	)

501 
	#PCIB_BCR_PRI_DISCARD_TIMEOUT
 0x0100

	)

502 
	#PCIB_BCR_SEC_DISCARD_TIMEOUT
 0x0200

	)

503 
	#PCIB_BCR_DISCARD_TIMER_STATUS
 0x0400

	)

504 
	#PCIB_BCR_DISCARD_TIMER_SERREN
 0x0800

	)

506 
	#CBB_BCR_PERR_ENABLE
 0x0001

	)

507 
	#CBB_BCR_SERR_ENABLE
 0x0002

	)

508 
	#CBB_BCR_ISA_ENABLE
 0x0004

	)

509 
	#CBB_BCR_VGA_ENABLE
 0x0008

	)

510 
	#CBB_BCR_MASTER_ABORT_MODE
 0x0020

	)

511 
	#CBB_BCR_CARDBUS_RESET
 0x0040

	)

512 
	#CBB_BCR_IREQ_INT_ENABLE
 0x0080

	)

513 
	#CBB_BCR_PREFETCH_0_ENABLE
 0x0100

	)

514 
	#CBB_BCR_PREFETCH_1_ENABLE
 0x0200

	)

515 
	#CBB_BCR_WRITE_POSTING_ENABLE
 0x0400

	)

518 
	#PCIR_POWER_CAP
 0x2

	)

519 
	#PCIM_PCAP_SPEC
 0x0007

	)

520 
	#PCIM_PCAP_PMEREQCLK
 0x0008

	)

521 
	#PCIM_PCAP_DEVSPECINIT
 0x0020

	)

522 
	#PCIM_PCAP_AUXPWR_0
 0x0000

	)

523 
	#PCIM_PCAP_AUXPWR_55
 0x0040

	)

524 
	#PCIM_PCAP_AUXPWR_100
 0x0080

	)

525 
	#PCIM_PCAP_AUXPWR_160
 0x00c0

	)

526 
	#PCIM_PCAP_AUXPWR_220
 0x0100

	)

527 
	#PCIM_PCAP_AUXPWR_270
 0x0140

	)

528 
	#PCIM_PCAP_AUXPWR_320
 0x0180

	)

529 
	#PCIM_PCAP_AUXPWR_375
 0x01c0

	)

530 
	#PCIM_PCAP_AUXPWRMASK
 0x01c0

	)

531 
	#PCIM_PCAP_D1SUPP
 0x0200

	)

532 
	#PCIM_PCAP_D2SUPP
 0x0400

	)

533 
	#PCIM_PCAP_D0PME
 0x0800

	)

534 
	#PCIM_PCAP_D1PME
 0x1000

	)

535 
	#PCIM_PCAP_D2PME
 0x2000

	)

536 
	#PCIM_PCAP_D3PME_HOT
 0x4000

	)

537 
	#PCIM_PCAP_D3PME_COLD
 0x8000

	)

539 
	#PCIR_POWER_STATUS
 0x4

	)

540 
	#PCIM_PSTAT_D0
 0x0000

	)

541 
	#PCIM_PSTAT_D1
 0x0001

	)

542 
	#PCIM_PSTAT_D2
 0x0002

	)

543 
	#PCIM_PSTAT_D3
 0x0003

	)

544 
	#PCIM_PSTAT_DMASK
 0x0003

	)

545 
	#PCIM_PSTAT_NOSOFTRESET
 0x0008

	)

546 
	#PCIM_PSTAT_PMEENABLE
 0x0100

	)

547 
	#PCIM_PSTAT_D0POWER
 0x0000

	)

548 
	#PCIM_PSTAT_D1POWER
 0x0200

	)

549 
	#PCIM_PSTAT_D2POWER
 0x0400

	)

550 
	#PCIM_PSTAT_D3POWER
 0x0600

	)

551 
	#PCIM_PSTAT_D0HEAT
 0x0800

	)

552 
	#PCIM_PSTAT_D1HEAT
 0x0a00

	)

553 
	#PCIM_PSTAT_D2HEAT
 0x0c00

	)

554 
	#PCIM_PSTAT_D3HEAT
 0x0e00

	)

555 
	#PCIM_PSTAT_DATASELMASK
 0x1e00

	)

556 
	#PCIM_PSTAT_DATAUNKN
 0x0000

	)

557 
	#PCIM_PSTAT_DATADIV10
 0x2000

	)

558 
	#PCIM_PSTAT_DATADIV100
 0x4000

	)

559 
	#PCIM_PSTAT_DATADIV1000
 0x6000

	)

560 
	#PCIM_PSTAT_DATADIVMASK
 0x6000

	)

561 
	#PCIM_PSTAT_PME
 0x8000

	)

563 
	#PCIR_POWER_BSE
 0x6

	)

564 
	#PCIM_PMCSR_BSE_D3B3
 0x00

	)

565 
	#PCIM_PMCSR_BSE_D3B2
 0x40

	)

566 
	#PCIM_PMCSR_BSE_BPCCE
 0x80

	)

568 
	#PCIR_POWER_DATA
 0x7

	)

571 
	#PCIR_VPD_ADDR
 0x2

	)

572 
	#PCIR_VPD_DATA
 0x4

	)

575 
	#PCIR_MSI_CTRL
 0x2

	)

576 
	#PCIM_MSICTRL_VECTOR
 0x0100

	)

577 
	#PCIM_MSICTRL_64BIT
 0x0080

	)

578 
	#PCIM_MSICTRL_MME_MASK
 0x0070

	)

579 
	#PCIM_MSICTRL_MME_1
 0x0000

	)

580 
	#PCIM_MSICTRL_MME_2
 0x0010

	)

581 
	#PCIM_MSICTRL_MME_4
 0x0020

	)

582 
	#PCIM_MSICTRL_MME_8
 0x0030

	)

583 
	#PCIM_MSICTRL_MME_16
 0x0040

	)

584 
	#PCIM_MSICTRL_MME_32
 0x0050

	)

585 
	#PCIM_MSICTRL_MMC_MASK
 0x000E

	)

586 
	#PCIM_MSICTRL_MMC_1
 0x0000

	)

587 
	#PCIM_MSICTRL_MMC_2
 0x0002

	)

588 
	#PCIM_MSICTRL_MMC_4
 0x0004

	)

589 
	#PCIM_MSICTRL_MMC_8
 0x0006

	)

590 
	#PCIM_MSICTRL_MMC_16
 0x0008

	)

591 
	#PCIM_MSICTRL_MMC_32
 0x000A

	)

592 
	#PCIM_MSICTRL_MSI_ENABLE
 0x0001

	)

593 
	#PCIR_MSI_ADDR
 0x4

	)

594 
	#PCIR_MSI_ADDR_HIGH
 0x8

	)

595 
	#PCIR_MSI_DATA
 0x8

	)

596 
	#PCIR_MSI_DATA_64BIT
 0xc

	)

597 
	#PCIR_MSI_MASK
 0x10

	)

598 
	#PCIR_MSI_PENDING
 0x14

	)

601 
	#PCIR_EA_NUM_ENT
 2

	)

602 
	#PCIM_EA_NUM_ENT_MASK
 0x3‡

	)

603 
	#PCIR_EA_FIRST_ENT
 4

	)

604 
	#PCIR_EA_FIRST_ENT_BRIDGE
 8

	)

605 
	#PCIM_EA_ES
 0x00000007

	)

606 
	#PCIM_EA_BEI
 0x000000f0

	)

607 
	#PCIM_EA_BEI_OFFSET
 4

	)

609 
	#PCIM_EA_BEI_BAR_0
 0

	)

610 
	#PCIM_EA_BEI_BAR_5
 5

	)

611 
	#PCIM_EA_BEI_BAR
(
x
Ë(((xË>> 
PCIM_EA_BEI_OFFSET
Ë& 0xf)

	)

612 
	#PCIM_EA_BEI_BRIDGE
 0x6

	)

613 
	#PCIM_EA_BEI_ENI
 0x7

	)

614 
	#PCIM_EA_BEI_ROM
 0x8

	)

616 
	#PCIM_EA_BEI_VF_BAR_0
 9

	)

617 
	#PCIM_EA_BEI_VF_BAR_5
 14

	)

618 
	#PCIM_EA_BEI_RESERVED
 0x‡

	)

619 
	#PCIM_EA_PP
 0x0000ff00

	)

620 
	#PCIM_EA_PP_OFFSET
 8

	)

621 
	#PCIM_EA_SP_OFFSET
 16

	)

622 
	#PCIM_EA_SP
 0x00ff0000

	)

623 
	#PCIM_EA_P_MEM
 0x00

	)

624 
	#PCIM_EA_P_MEM_PREFETCH
 0x01

	)

625 
	#PCIM_EA_P_IO
 0x02

	)

626 
	#PCIM_EA_P_VF_MEM_PREFETCH
 0x03

	)

627 
	#PCIM_EA_P_VF_MEM
 0x04

	)

628 
	#PCIM_EA_P_BRIDGE_MEM
 0x05

	)

629 
	#PCIM_EA_P_BRIDGE_MEM_PREFETCH
 0x06

	)

630 
	#PCIM_EA_P_BRIDGE_IO
 0x07

	)

632 
	#PCIM_EA_P_MEM_RESERVED
 0xfd

	)

633 
	#PCIM_EA_P_IO_RESERVED
 0x„

	)

634 
	#PCIM_EA_P_UNAVAILABLE
 0xf‡

	)

635 
	#PCIM_EA_WRITABLE
 0x40000000

	)

636 
	#PCIM_EA_ENABLE
 0x80000000

	)

637 
	#PCIM_EA_BASE
 4

	)

638 
	#PCIM_EA_MAX_OFFSET
 8

	)

640 
	#PCIM_EA_IS_64
 0x00000002

	)

641 
	#PCIM_EA_FIELD_MASK
 0xfffffff¯

	)

643 
	#PCIM_EA_SEC_NR
(
ªg
Ë(‘egË& 0xff)

	)

644 
	#PCIM_EA_SUB_NR
(
ªg
Ë((‘egË>> 8Ë& 0xff)

	)

649 
	#PCIXR_COMMAND
 0x2

	)

650 
	#PCIXM_COMMAND_DPERR_E
 0x0001

	)

651 
	#PCIXM_COMMAND_ERO
 0x0002

	)

652 
	#PCIXM_COMMAND_MAX_READ
 0x000¯

	)

653 
	#PCIXM_COMMAND_MAX_READ_512
 0x0000

	)

654 
	#PCIXM_COMMAND_MAX_READ_1024
 0x0004

	)

655 
	#PCIXM_COMMAND_MAX_READ_2048
 0x0008

	)

656 
	#PCIXM_COMMAND_MAX_READ_4096
 0x000c

	)

657 
	#PCIXM_COMMAND_MAX_SPLITS
 0x0070

	)

658 
	#PCIXM_COMMAND_MAX_SPLITS_1
 0x0000

	)

659 
	#PCIXM_COMMAND_MAX_SPLITS_2
 0x0010

	)

660 
	#PCIXM_COMMAND_MAX_SPLITS_3
 0x0020

	)

661 
	#PCIXM_COMMAND_MAX_SPLITS_4
 0x0030

	)

662 
	#PCIXM_COMMAND_MAX_SPLITS_8
 0x0040

	)

663 
	#PCIXM_COMMAND_MAX_SPLITS_12
 0x0050

	)

664 
	#PCIXM_COMMAND_MAX_SPLITS_16
 0x0060

	)

665 
	#PCIXM_COMMAND_MAX_SPLITS_32
 0x0070

	)

666 
	#PCIXM_COMMAND_VERSION
 0x3000

	)

667 
	#PCIXR_STATUS
 0x4

	)

668 
	#PCIXM_STATUS_DEVFN
 0x000000FF

	)

669 
	#PCIXM_STATUS_BUS
 0x0000FF00

	)

670 
	#PCIXM_STATUS_64BIT
 0x00010000

	)

671 
	#PCIXM_STATUS_133CAP
 0x00020000

	)

672 
	#PCIXM_STATUS_SC_DISCARDED
 0x00040000

	)

673 
	#PCIXM_STATUS_UNEXP_SC
 0x00080000

	)

674 
	#PCIXM_STATUS_COMPLEX_DEV
 0x00100000

	)

675 
	#PCIXM_STATUS_MAX_READ
 0x00600000

	)

676 
	#PCIXM_STATUS_MAX_READ_512
 0x00000000

	)

677 
	#PCIXM_STATUS_MAX_READ_1024
 0x00200000

	)

678 
	#PCIXM_STATUS_MAX_READ_2048
 0x00400000

	)

679 
	#PCIXM_STATUS_MAX_READ_4096
 0x00600000

	)

680 
	#PCIXM_STATUS_MAX_SPLITS
 0x03800000

	)

681 
	#PCIXM_STATUS_MAX_SPLITS_1
 0x00000000

	)

682 
	#PCIXM_STATUS_MAX_SPLITS_2
 0x00800000

	)

683 
	#PCIXM_STATUS_MAX_SPLITS_3
 0x01000000

	)

684 
	#PCIXM_STATUS_MAX_SPLITS_4
 0x01800000

	)

685 
	#PCIXM_STATUS_MAX_SPLITS_8
 0x02000000

	)

686 
	#PCIXM_STATUS_MAX_SPLITS_12
 0x02800000

	)

687 
	#PCIXM_STATUS_MAX_SPLITS_16
 0x03000000

	)

688 
	#PCIXM_STATUS_MAX_SPLITS_32
 0x03800000

	)

689 
	#PCIXM_STATUS_MAX_CUM_READ
 0x1C000000

	)

690 
	#PCIXM_STATUS_RCVD_SC_ERR
 0x20000000

	)

691 
	#PCIXM_STATUS_266CAP
 0x40000000

	)

692 
	#PCIXM_STATUS_533CAP
 0x80000000

	)

695 
	#PCIXR_SEC_STATUS
 0x2

	)

696 
	#PCIXM_SEC_STATUS_64BIT
 0x0001

	)

697 
	#PCIXM_SEC_STATUS_133CAP
 0x0002

	)

698 
	#PCIXM_SEC_STATUS_SC_DISC
 0x0004

	)

699 
	#PCIXM_SEC_STATUS_UNEXP_SC
 0x0008

	)

700 
	#PCIXM_SEC_STATUS_SC_OVERRUN
 0x0010

	)

701 
	#PCIXM_SEC_STATUS_SR_DELAYED
 0x0020

	)

702 
	#PCIXM_SEC_STATUS_BUS_MODE
 0x03c0

	)

703 
	#PCIXM_SEC_STATUS_VERSION
 0x3000

	)

704 
	#PCIXM_SEC_STATUS_266CAP
 0x4000

	)

705 
	#PCIXM_SEC_STATUS_533CAP
 0x8000

	)

706 
	#PCIXR_BRIDGE_STATUS
 0x4

	)

707 
	#PCIXM_BRIDGE_STATUS_DEVFN
 0x000000FF

	)

708 
	#PCIXM_BRIDGE_STATUS_BUS
 0x0000FF00

	)

709 
	#PCIXM_BRIDGE_STATUS_64BIT
 0x00010000

	)

710 
	#PCIXM_BRIDGE_STATUS_133CAP
 0x00020000

	)

711 
	#PCIXM_BRIDGE_STATUS_SC_DISCARDED
 0x00040000

	)

712 
	#PCIXM_BRIDGE_STATUS_UNEXP_SC
 0x00080000

	)

713 
	#PCIXM_BRIDGE_STATUS_SC_OVERRUN
 0x00100000

	)

714 
	#PCIXM_BRIDGE_STATUS_SR_DELAYED
 0x00200000

	)

715 
	#PCIXM_BRIDGE_STATUS_DEVID_MSGCAP
 0x20000000

	)

716 
	#PCIXM_BRIDGE_STATUS_266CAP
 0x40000000

	)

717 
	#PCIXM_BRIDGE_STATUS_533CAP
 0x80000000

	)

720 
	#PCIR_HT_COMMAND
 0x2

	)

721 
	#PCIM_HTCMD_CAP_MASK
 0xf800

	)

722 
	#PCIM_HTCAP_SLAVE
 0x0000

	)

723 
	#PCIM_HTCAP_HOST
 0x2000

	)

724 
	#PCIM_HTCAP_SWITCH
 0x4000

	)

725 
	#PCIM_HTCAP_INTERRUPT
 0x8000

	)

726 
	#PCIM_HTCAP_REVISION_ID
 0x8800

	)

727 
	#PCIM_HTCAP_UNITID_CLUMPING
 0x9000

	)

728 
	#PCIM_HTCAP_EXT_CONFIG_SPACE
 0x9800

	)

729 
	#PCIM_HTCAP_ADDRESS_MAPPING
 0xa000

	)

730 
	#PCIM_HTCAP_MSI_MAPPING
 0xa800

	)

731 
	#PCIM_HTCAP_DIRECT_ROUTE
 0xb000

	)

732 
	#PCIM_HTCAP_VCSET
 0xb800

	)

733 
	#PCIM_HTCAP_RETRY_MODE
 0xc000

	)

734 
	#PCIM_HTCAP_X86_ENCODING
 0xc800

	)

735 
	#PCIM_HTCAP_GEN3
 0xd000

	)

736 
	#PCIM_HTCAP_FLE
 0xd800

	)

737 
	#PCIM_HTCAP_PM
 0xe000

	)

738 
	#PCIM_HTCAP_HIGH_NODE_COUNT
 0xe800

	)

741 
	#PCIM_HTCMD_MSI_ENABLE
 0x0001

	)

742 
	#PCIM_HTCMD_MSI_FIXED
 0x0002

	)

743 
	#PCIR_HTMSI_ADDRESS_LO
 0x4

	)

744 
	#PCIR_HTMSI_ADDRESS_HI
 0x8

	)

747 
	#PCIR_VENDOR_LENGTH
 0x2

	)

748 
	#PCIR_VENDOR_DATA
 0x3

	)

751 
	#PCIR_DEVICE_LENGTH
 0x2

	)

754 
	#PCIR_DEBUG_PORT
 0x2

	)

755 
	#PCIM_DEBUG_PORT_OFFSET
 0x1FFF

	)

756 
	#PCIM_DEBUG_PORT_BAR
 0xe000

	)

759 
	#PCIR_SUBVENDCAP_ID
 0x4

	)

762 
	#PCIER_FLAGS
 0x2

	)

763 
	#PCIEM_FLAGS_VERSION
 0x000F

	)

764 
	#PCIEM_FLAGS_TYPE
 0x00F0

	)

765 
	#PCIEM_TYPE_ENDPOINT
 0x0000

	)

766 
	#PCIEM_TYPE_LEGACY_ENDPOINT
 0x0010

	)

767 
	#PCIEM_TYPE_ROOT_PORT
 0x0040

	)

768 
	#PCIEM_TYPE_UPSTREAM_PORT
 0x0050

	)

769 
	#PCIEM_TYPE_DOWNSTREAM_PORT
 0x0060

	)

770 
	#PCIEM_TYPE_PCI_BRIDGE
 0x0070

	)

771 
	#PCIEM_TYPE_PCIE_BRIDGE
 0x0080

	)

772 
	#PCIEM_TYPE_ROOT_INT_EP
 0x0090

	)

773 
	#PCIEM_TYPE_ROOT_EC
 0x00a0

	)

774 
	#PCIEM_FLAGS_SLOT
 0x0100

	)

775 
	#PCIEM_FLAGS_IRQ
 0x3e00

	)

776 
	#PCIER_DEVICE_CAP
 0x4

	)

777 
	#PCIEM_CAP_MAX_PAYLOAD
 0x00000007

	)

778 
	#PCIEM_CAP_PHANTHOM_FUNCS
 0x00000018

	)

779 
	#PCIEM_CAP_EXT_TAG_FIELD
 0x00000020

	)

780 
	#PCIEM_CAP_L0S_LATENCY
 0x000001c0

	)

781 
	#PCIEM_CAP_L1_LATENCY
 0x00000e00

	)

782 
	#PCIEM_CAP_ROLE_ERR_RPT
 0x00008000

	)

783 
	#PCIEM_CAP_SLOT_PWR_LIM_VAL
 0x03fc0000

	)

784 
	#PCIEM_CAP_SLOT_PWR_LIM_SCALE
 0x0c000000

	)

785 
	#PCIEM_CAP_FLR
 0x10000000

	)

786 
	#PCIER_DEVICE_CTL
 0x8

	)

787 
	#PCIEM_CTL_COR_ENABLE
 0x0001

	)

788 
	#PCIEM_CTL_NFER_ENABLE
 0x0002

	)

789 
	#PCIEM_CTL_FER_ENABLE
 0x0004

	)

790 
	#PCIEM_CTL_URR_ENABLE
 0x0008

	)

791 
	#PCIEM_CTL_RELAXED_ORD_ENABLE
 0x0010

	)

792 
	#PCIEM_CTL_MAX_PAYLOAD
 0x00e0

	)

793 
	#PCIEM_CTL_EXT_TAG_FIELD
 0x0100

	)

794 
	#PCIEM_CTL_PHANTHOM_FUNCS
 0x0200

	)

795 
	#PCIEM_CTL_AUX_POWER_PM
 0x0400

	)

796 
	#PCIEM_CTL_NOSNOOP_ENABLE
 0x0800

	)

797 
	#PCIEM_CTL_MAX_READ_REQUEST
 0x7000

	)

798 
	#PCIEM_CTL_BRDG_CFG_RETRY
 0x8000

	)

799 
	#PCIEM_CTL_INITIATE_FLR
 0x8000

	)

800 
	#PCIER_DEVICE_STA
 0xa

	)

801 
	#PCIEM_STA_CORRECTABLE_ERROR
 0x0001

	)

802 
	#PCIEM_STA_NON_FATAL_ERROR
 0x0002

	)

803 
	#PCIEM_STA_FATAL_ERROR
 0x0004

	)

804 
	#PCIEM_STA_UNSUPPORTED_REQ
 0x0008

	)

805 
	#PCIEM_STA_AUX_POWER
 0x0010

	)

806 
	#PCIEM_STA_TRANSACTION_PND
 0x0020

	)

807 
	#PCIER_LINK_CAP
 0xc

	)

808 
	#PCIEM_LINK_CAP_MAX_SPEED
 0x0000000f

	)

809 
	#PCIEM_LINK_CAP_MAX_WIDTH
 0x000003f0

	)

810 
	#PCIEM_LINK_CAP_ASPM
 0x00000c00

	)

811 
	#PCIEM_LINK_CAP_L0S_EXIT
 0x00007000

	)

812 
	#PCIEM_LINK_CAP_L1_EXIT
 0x00038000

	)

813 
	#PCIEM_LINK_CAP_CLOCK_PM
 0x00040000

	)

814 
	#PCIEM_LINK_CAP_SURPRISE_DOWN
 0x00080000

	)

815 
	#PCIEM_LINK_CAP_DL_ACTIVE
 0x00100000

	)

816 
	#PCIEM_LINK_CAP_LINK_BW_NOTIFY
 0x00200000

	)

817 
	#PCIEM_LINK_CAP_ASPM_COMPLIANCE
 0x00400000

	)

818 
	#PCIEM_LINK_CAP_PORT
 0xff000000

	)

819 
	#PCIER_LINK_CTL
 0x10

	)

820 
	#PCIEM_LINK_CTL_ASPMC_DIS
 0x0000

	)

821 
	#PCIEM_LINK_CTL_ASPMC_L0S
 0x0001

	)

822 
	#PCIEM_LINK_CTL_ASPMC_L1
 0x0002

	)

823 
	#PCIEM_LINK_CTL_ASPMC
 0x0003

	)

824 
	#PCIEM_LINK_CTL_RCB
 0x0008

	)

825 
	#PCIEM_LINK_CTL_LINK_DIS
 0x0010

	)

826 
	#PCIEM_LINK_CTL_RETRAIN_LINK
 0x0020

	)

827 
	#PCIEM_LINK_CTL_COMMON_CLOCK
 0x0040

	)

828 
	#PCIEM_LINK_CTL_EXTENDED_SYNC
 0x0080

	)

829 
	#PCIEM_LINK_CTL_ECPM
 0x0100

	)

830 
	#PCIEM_LINK_CTL_HAWD
 0x0200

	)

831 
	#PCIEM_LINK_CTL_LBMIE
 0x0400

	)

832 
	#PCIEM_LINK_CTL_LABIE
 0x0800

	)

833 
	#PCIER_LINK_STA
 0x12

	)

834 
	#PCIEM_LINK_STA_SPEED
 0x000f

	)

835 
	#PCIEM_LINK_STA_WIDTH
 0x03f0

	)

836 
	#PCIEM_LINK_STA_TRAINING_ERROR
 0x0400

	)

837 
	#PCIEM_LINK_STA_TRAINING
 0x0800

	)

838 
	#PCIEM_LINK_STA_SLOT_CLOCK
 0x1000

	)

839 
	#PCIEM_LINK_STA_DL_ACTIVE
 0x2000

	)

840 
	#PCIEM_LINK_STA_LINK_BW_MGMT
 0x4000

	)

841 
	#PCIEM_LINK_STA_LINK_AUTO_BW
 0x8000

	)

842 
	#PCIER_SLOT_CAP
 0x14

	)

843 
	#PCIEM_SLOT_CAP_APB
 0x00000001

	)

844 
	#PCIEM_SLOT_CAP_PCP
 0x00000002

	)

845 
	#PCIEM_SLOT_CAP_MRLSP
 0x00000004

	)

846 
	#PCIEM_SLOT_CAP_AIP
 0x00000008

	)

847 
	#PCIEM_SLOT_CAP_PIP
 0x00000010

	)

848 
	#PCIEM_SLOT_CAP_HPS
 0x00000020

	)

849 
	#PCIEM_SLOT_CAP_HPC
 0x00000040

	)

850 
	#PCIEM_SLOT_CAP_SPLV
 0x00007f80

	)

851 
	#PCIEM_SLOT_CAP_SPLS
 0x00018000

	)

852 
	#PCIEM_SLOT_CAP_EIP
 0x00020000

	)

853 
	#PCIEM_SLOT_CAP_NCCS
 0x00040000

	)

854 
	#PCIEM_SLOT_CAP_PSN
 0xfff80000

	)

855 
	#PCIER_SLOT_CTL
 0x18

	)

856 
	#PCIEM_SLOT_CTL_ABPE
 0x0001

	)

857 
	#PCIEM_SLOT_CTL_PFDE
 0x0002

	)

858 
	#PCIEM_SLOT_CTL_MRLSCE
 0x0004

	)

859 
	#PCIEM_SLOT_CTL_PDCE
 0x0008

	)

860 
	#PCIEM_SLOT_CTL_CCIE
 0x0010

	)

861 
	#PCIEM_SLOT_CTL_HPIE
 0x0020

	)

862 
	#PCIEM_SLOT_CTL_AIC
 0x00c0

	)

863 
	#PCIEM_SLOT_CTL_AI_ON
 0x0040

	)

864 
	#PCIEM_SLOT_CTL_AI_BLINK
 0x0080

	)

865 
	#PCIEM_SLOT_CTL_AI_OFF
 0x00c0

	)

866 
	#PCIEM_SLOT_CTL_PIC
 0x0300

	)

867 
	#PCIEM_SLOT_CTL_PI_ON
 0x0100

	)

868 
	#PCIEM_SLOT_CTL_PI_BLINK
 0x0200

	)

869 
	#PCIEM_SLOT_CTL_PI_OFF
 0x0300

	)

870 
	#PCIEM_SLOT_CTL_PCC
 0x0400

	)

871 
	#PCIEM_SLOT_CTL_PC_ON
 0x0000

	)

872 
	#PCIEM_SLOT_CTL_PC_OFF
 0x0400

	)

873 
	#PCIEM_SLOT_CTL_EIC
 0x0800

	)

874 
	#PCIEM_SLOT_CTL_DLLSCE
 0x1000

	)

875 
	#PCIER_SLOT_STA
 0x1a

	)

876 
	#PCIEM_SLOT_STA_ABP
 0x0001

	)

877 
	#PCIEM_SLOT_STA_PFD
 0x0002

	)

878 
	#PCIEM_SLOT_STA_MRLSC
 0x0004

	)

879 
	#PCIEM_SLOT_STA_PDC
 0x0008

	)

880 
	#PCIEM_SLOT_STA_CC
 0x0010

	)

881 
	#PCIEM_SLOT_STA_MRLSS
 0x0020

	)

882 
	#PCIEM_SLOT_STA_PDS
 0x0040

	)

883 
	#PCIEM_SLOT_STA_EIS
 0x0080

	)

884 
	#PCIEM_SLOT_STA_DLLSC
 0x0100

	)

885 
	#PCIER_ROOT_CTL
 0x1c

	)

886 
	#PCIEM_ROOT_CTL_SERR_CORR
 0x0001

	)

887 
	#PCIEM_ROOT_CTL_SERR_NONFATAL
 0x0002

	)

888 
	#PCIEM_ROOT_CTL_SERR_FATAL
 0x0004

	)

889 
	#PCIEM_ROOT_CTL_PME
 0x0008

	)

890 
	#PCIEM_ROOT_CTL_CRS_VIS
 0x0010

	)

891 
	#PCIER_ROOT_CAP
 0x1e

	)

892 
	#PCIEM_ROOT_CAP_CRS_VIS
 0x0001

	)

893 
	#PCIER_ROOT_STA
 0x20

	)

894 
	#PCIEM_ROOT_STA_PME_REQID_MASK
 0x0000ffff

	)

895 
	#PCIEM_ROOT_STA_PME_STATUS
 0x00010000

	)

896 
	#PCIEM_ROOT_STA_PME_PEND
 0x00020000

	)

897 
	#PCIER_DEVICE_CAP2
 0x24

	)

898 
	#PCIEM_CAP2_COMP_TIMO_RANGES
 0x0000000f

	)

899 
	#PCIEM_CAP2_COMP_TIMO_RANGE_A
 0x00000001

	)

900 
	#PCIEM_CAP2_COMP_TIMO_RANGE_B
 0x00000002

	)

901 
	#PCIEM_CAP2_COMP_TIMO_RANGE_C
 0x00000004

	)

902 
	#PCIEM_CAP2_COMP_TIMO_RANGE_D
 0x00000008

	)

903 
	#PCIEM_CAP2_COMP_TIMO_DISABLE
 0x00000010

	)

904 
	#PCIEM_CAP2_ARI
 0x00000020

	)

905 
	#PCIER_DEVICE_CTL2
 0x28

	)

906 
	#PCIEM_CTL2_COMP_TIMO_VAL
 0x000f

	)

907 
	#PCIEM_CTL2_COMP_TIMO_50MS
 0x0000

	)

908 
	#PCIEM_CTL2_COMP_TIMO_100US
 0x0001

	)

909 
	#PCIEM_CTL2_COMP_TIMO_10MS
 0x0002

	)

910 
	#PCIEM_CTL2_COMP_TIMO_55MS
 0x0005

	)

911 
	#PCIEM_CTL2_COMP_TIMO_210MS
 0x0006

	)

912 
	#PCIEM_CTL2_COMP_TIMO_900MS
 0x0009

	)

913 
	#PCIEM_CTL2_COMP_TIMO_3500MS
 0x000a

	)

914 
	#PCIEM_CTL2_COMP_TIMO_13S
 0x000d

	)

915 
	#PCIEM_CTL2_COMP_TIMO_64S
 0x000e

	)

916 
	#PCIEM_CTL2_COMP_TIMO_DISABLE
 0x0010

	)

917 
	#PCIEM_CTL2_ARI
 0x0020

	)

918 
	#PCIEM_CTL2_ATOMIC_REQ_ENABLE
 0x0040

	)

919 
	#PCIEM_CTL2_ATOMIC_EGR_BLOCK
 0x0080

	)

920 
	#PCIEM_CTL2_ID_ORDERED_REQ_EN
 0x0100

	)

921 
	#PCIEM_CTL2_ID_ORDERED_CMP_EN
 0x0200

	)

922 
	#PCIEM_CTL2_LTR_ENABLE
 0x0400

	)

923 
	#PCIEM_CTL2_OBFF
 0x6000

	)

924 
	#PCIEM_OBFF_DISABLE
 0x0000

	)

925 
	#PCIEM_OBFF_MSGA_ENABLE
 0x2000

	)

926 
	#PCIEM_OBFF_MSGB_ENABLE
 0x4000

	)

927 
	#PCIEM_OBFF_WAKE_ENABLE
 0x6000

	)

928 
	#PCIEM_CTL2_END2END_TLP
 0x8000

	)

929 
	#PCIER_DEVICE_STA2
 0x2a

	)

930 
	#PCIER_LINK_CAP2
 0x2c

	)

931 
	#PCIER_LINK_CTL2
 0x30

	)

932 
	#PCIER_LINK_STA2
 0x32

	)

933 
	#PCIER_SLOT_CAP2
 0x34

	)

934 
	#PCIER_SLOT_CTL2
 0x38

	)

935 
	#PCIER_SLOT_STA2
 0x3a

	)

938 
	#PCIR_MSIX_CTRL
 0x2

	)

939 
	#PCIM_MSIXCTRL_MSIX_ENABLE
 0x8000

	)

940 
	#PCIM_MSIXCTRL_FUNCTION_MASK
 0x4000

	)

941 
	#PCIM_MSIXCTRL_TABLE_SIZE
 0x07FF

	)

942 
	#PCIR_MSIX_TABLE
 0x4

	)

943 
	#PCIR_MSIX_PBA
 0x8

	)

944 
	#PCIM_MSIX_BIR_MASK
 0x7

	)

945 
	#PCIM_MSIX_BIR_BAR_10
 0

	)

946 
	#PCIM_MSIX_BIR_BAR_14
 1

	)

947 
	#PCIM_MSIX_BIR_BAR_18
 2

	)

948 
	#PCIM_MSIX_BIR_BAR_1C
 3

	)

949 
	#PCIM_MSIX_BIR_BAR_20
 4

	)

950 
	#PCIM_MSIX_BIR_BAR_24
 5

	)

951 
	#PCIM_MSIX_VCTRL_MASK
 0x1

	)

954 
	#PCIR_PCIAF_CAP
 0x3

	)

955 
	#PCIM_PCIAFCAP_TP
 0x01

	)

956 
	#PCIM_PCIAFCAP_FLR
 0x02

	)

957 
	#PCIR_PCIAF_CTRL
 0x4

	)

958 
	#PCIR_PCIAFCTRL_FLR
 0x01

	)

959 
	#PCIR_PCIAF_STATUS
 0x5

	)

960 
	#PCIR_PCIAFSTATUS_TP
 0x01

	)

963 
	#PCIR_AER_UC_STATUS
 0x04

	)

964 
	#PCIM_AER_UC_TRAINING_ERROR
 0x00000001

	)

965 
	#PCIM_AER_UC_DL_PROTOCOL_ERROR
 0x00000010

	)

966 
	#PCIM_AER_UC_SURPRISE_LINK_DOWN
 0x00000020

	)

967 
	#PCIM_AER_UC_POISONED_TLP
 0x00001000

	)

968 
	#PCIM_AER_UC_FC_PROTOCOL_ERROR
 0x00002000

	)

969 
	#PCIM_AER_UC_COMPLETION_TIMEOUT
 0x00004000

	)

970 
	#PCIM_AER_UC_COMPLETER_ABORT
 0x00008000

	)

971 
	#PCIM_AER_UC_UNEXPECTED_COMPLETION
 0x00010000

	)

972 
	#PCIM_AER_UC_RECEIVER_OVERFLOW
 0x00020000

	)

973 
	#PCIM_AER_UC_MALFORMED_TLP
 0x00040000

	)

974 
	#PCIM_AER_UC_ECRC_ERROR
 0x00080000

	)

975 
	#PCIM_AER_UC_UNSUPPORTED_REQUEST
 0x00100000

	)

976 
	#PCIM_AER_UC_ACS_VIOLATION
 0x00200000

	)

977 
	#PCIM_AER_UC_INTERNAL_ERROR
 0x00400000

	)

978 
	#PCIM_AER_UC_MC_BLOCKED_TLP
 0x00800000

	)

979 
	#PCIM_AER_UC_ATOMIC_EGRESS_BLK
 0x01000000

	)

980 
	#PCIM_AER_UC_TLP_PREFIX_BLOCKED
 0x02000000

	)

981 
	#PCIR_AER_UC_MASK
 0x08

	)

982 
	#PCIR_AER_UC_SEVERITY
 0x0¯

	)

983 
	#PCIR_AER_COR_STATUS
 0x10

	)

984 
	#PCIM_AER_COR_RECEIVER_ERROR
 0x00000001

	)

985 
	#PCIM_AER_COR_BAD_TLP
 0x00000040

	)

986 
	#PCIM_AER_COR_BAD_DLLP
 0x00000080

	)

987 
	#PCIM_AER_COR_REPLAY_ROLLOVER
 0x00000100

	)

988 
	#PCIM_AER_COR_REPLAY_TIMEOUT
 0x00001000

	)

989 
	#PCIM_AER_COR_ADVISORY_NF_ERROR
 0x00002000

	)

990 
	#PCIM_AER_COR_INTERNAL_ERROR
 0x00004000

	)

991 
	#PCIM_AER_COR_HEADER_LOG_OVFLOW
 0x00008000

	)

992 
	#PCIR_AER_COR_MASK
 0x14

	)

993 
	#PCIR_AER_CAP_CONTROL
 0x18

	)

994 
	#PCIM_AER_FIRST_ERROR_PTR
 0x0000001f

	)

995 
	#PCIM_AER_ECRC_GEN_CAPABLE
 0x00000020

	)

996 
	#PCIM_AER_ECRC_GEN_ENABLE
 0x00000040

	)

997 
	#PCIM_AER_ECRC_CHECK_CAPABLE
 0x00000080

	)

998 
	#PCIM_AER_ECRC_CHECK_ENABLE
 0x00000100

	)

999 
	#PCIM_AER_MULT_HDR_CAPABLE
 0x00000200

	)

1000 
	#PCIM_AER_MULT_HDR_ENABLE
 0x00000400

	)

1001 
	#PCIM_AER_TLP_PREFIX_LOG_PRESENT
 0x00000800

	)

1002 
	#PCIR_AER_HEADER_LOG
 0x1c

	)

1003 
	#PCIR_AER_ROOTERR_CMD
 0x2¯

	)

1004 
	#PCIM_AER_ROOTERR_COR_ENABLE
 0x00000001

	)

1005 
	#PCIM_AER_ROOTERR_NF_ENABLE
 0x00000002

	)

1006 
	#PCIM_AER_ROOTERR_F_ENABLE
 0x00000004

	)

1007 
	#PCIR_AER_ROOTERR_STATUS
 0x30

	)

1008 
	#PCIM_AER_ROOTERR_COR_ERR
 0x00000001

	)

1009 
	#PCIM_AER_ROOTERR_MULTI_COR_ERR
 0x00000002

	)

1010 
	#PCIM_AER_ROOTERR_UC_ERR
 0x00000004

	)

1011 
	#PCIM_AER_ROOTERR_MULTI_UC_ERR
 0x00000008

	)

1012 
	#PCIM_AER_ROOTERR_FIRST_UC_FATAL
 0x00000010

	)

1013 
	#PCIM_AER_ROOTERR_NF_ERR
 0x00000020

	)

1014 
	#PCIM_AER_ROOTERR_F_ERR
 0x00000040

	)

1015 
	#PCIM_AER_ROOTERR_INT_MESSAGE
 0xf8000000

	)

1016 
	#PCIR_AER_COR_SOURCE_ID
 0x34

	)

1017 
	#PCIR_AER_ERR_SOURCE_ID
 0x36

	)

1018 
	#PCIR_AER_TLP_PREFIX_LOG
 0x38

	)

1021 
	#PCIR_VC_CAP1
 0x04

	)

1022 
	#PCIM_VC_CAP1_EXT_COUNT
 0x00000007

	)

1023 
	#PCIM_VC_CAP1_LOWPRI_EXT_COUNT
 0x00000070

	)

1024 
	#PCIR_VC_CAP2
 0x08

	)

1025 
	#PCIR_VC_CONTROL
 0x0C

	)

1026 
	#PCIR_VC_STATUS
 0x0E

	)

1027 
	#PCIR_VC_RESOURCE_CAP
(
n
Ë(0x10 + (nË* 0x0C)

	)

1028 
	#PCIR_VC_RESOURCE_CTL
(
n
Ë(0x14 + (nË* 0x0C)

	)

1029 
	#PCIR_VC_RESOURCE_STA
(
n
Ë(0x18 + (nË* 0x0C)

	)

1032 
	#PCIR_SERIAL_LOW
 0x04

	)

1033 
	#PCIR_SERIAL_HIGH
 0x08

	)

1036 
	#PCIR_SRIOV_CTL
 0x08

	)

1037 
	#PCIM_SRIOV_VF_EN
 0x01

	)

1038 
	#PCIM_SRIOV_VF_MSE
 0x08

	)

1039 
	#PCIM_SRIOV_ARI_EN
 0x10

	)

1040 
	#PCIR_SRIOV_TOTAL_VFS
 0x0E

	)

1041 
	#PCIR_SRIOV_NUM_VFS
 0x10

	)

1042 
	#PCIR_SRIOV_VF_OFF
 0x14

	)

1043 
	#PCIR_SRIOV_VF_STRIDE
 0x16

	)

1044 
	#PCIR_SRIOV_VF_DID
 0x1A

	)

1045 
	#PCIR_SRIOV_PAGE_CAP
 0x1C

	)

1046 
	#PCIR_SRIOV_PAGE_SIZE
 0x20

	)

1048 
	#PCI_SRIOV_BASE_PAGE_SHIFT
 12

	)

1050 
	#PCIR_SRIOV_BARS
 0x24

	)

1051 
	#PCIR_SRIOV_BAR
(
x
Ë(
PCIR_SRIOV_BARS
 + (xË* 4)

	)

1056 
	#PCI_OSC_STATUS
 0

	)

1057 
	#PCI_OSC_SUPPORT
 1

	)

1058 
	#PCIM_OSC_SUPPORT_EXT_PCI_CONF
 0x01

	)

1059 
	#PCIM_OSC_SUPPORT_ASPM
 0x02

	)

1060 
	#PCIM_OSC_SUPPORT_CPMC
 0x04

	)

1061 
	#PCIM_OSC_SUPPORT_SEG_GROUP
 0x08

	)

1062 
	#PCIM_OSC_SUPPORT_MSI
 0x10

	)

1063 
	#PCI_OSC_CTL
 2

	)

1064 
	#PCIM_OSC_CTL_PCIE_HP
 0x01

	)

1065 
	#PCIM_OSC_CTL_SHPC_HP
 0x02

	)

1066 
	#PCIM_OSC_CTL_PCIE_PME
 0x04

	)

1067 
	#PCIM_OSC_CTL_PCIE_AER
 0x08

	)

1068 
	#PCIM_OSC_CTL_PCIE_CAP_STRUCT
 0x10

	)

	@/usr/include/fs/devfs/devfs_int.h

35 #i‚de‡
_FS_DEVFS_DEVFS_INT_H_


36 
	#_FS_DEVFS_DEVFS_INT_H_


	)

38 
	~<sys/queue.h
>

40 #ifde‡
_KERNEL


42 
	gdevfs_dúít
;

43 
	gdevfs_mou¡
;

45 
	scdev_¥ivd©a
 {

46 
fûe
 *
	mcdpd_Â
;

47 *
	mcdpd_d©a
;

48 (*
	mcdpd_då
)(*);

49 
LIST_ENTRY
(
cdev_¥ivd©a
Ë
	mcdpd_li°
;

52 
	scdev_¥iv
 {

53 
cdev
 
	mcdp_c
;

54 
TAILQ_ENTRY
(
cdev_¥iv
Ë
	mcdp_li°
;

56 
u_öt
 
	mcdp_öode
;

58 
u_öt
 
	mcdp_Êags
;

59 
	#CDP_ACTIVE
 (1 << 0)

	)

60 
	#CDP_SCHED_DTR
 (1 << 1)

	)

61 
	#CDP_UNREF_DTR
 (1 << 2)

	)

63 
u_öt
 
	mcdp_öu£
;

64 
u_öt
 
	mcdp_maxdúít
;

65 
devfs_dúít
 **
	mcdp_dúíts
;

66 
devfs_dúít
 *
	mcdp_dúít0
;

68 
TAILQ_ENTRY
(
cdev_¥iv
Ë
	mcdp_då_li°
;

69 (*
	mcdp_då_cb
)(*);

70 *
	mcdp_då_cb_¨g
;

72 
LIST_HEAD
(, 
cdev_¥ivd©a
Ë
	mcdp_fd¥iv
;

75 
	#cdev2¥iv
(
c
Ë
	`__c⁄èöîof
(c, 
cdev_¥iv
, 
cdp_c
)

	)

77 
cdev
 *
devfs_Æloc
();

78 
devfs_dev_exi°s
(const *);

79 
devfs_‰ì
(
cdev
 *);

80 
devfs_¸óã
(
cdev
 *);

81 
devfs_de°roy
(
cdev
 *);

82 
devfs_de°roy_cdev¥iv
(
cdev_¥ivd©a
 *);

84 
devfs_dú_föd
(const *);

85 
devfs_dú_ªf_de
(
devfs_mou¡
 *, 
devfs_dúít
 *);

86 
devfs_dú_uƒef_de
(
devfs_mou¡
 *, 
devfs_dúít
 *);

87 
devfs_∑th∑th
(const *, const *);

89 
uƒhdr
 *
devfs_öos
;

90 
mtx
 
devmtx
;

91 
mtx
 
devfs_de_öãæock
;

92 
sx
 
˛⁄e_døö_lock
;

93 
mtx
 
cdev¥iv_mtx
;

94 
	$TAILQ_HEAD
(
cdev_¥iv_li°
, 
cdev_¥iv
Ë
cdevp_li°
;

	@/usr/include/machine/_align.h

6 
	~<x86/_Æign.h
>

	@/usr/include/machine/_bus.h

33 #i‚de‡
AMD64_INCLUDE__BUS_H


34 
	#AMD64_INCLUDE__BUS_H


	)

39 
uöt64_t
 
	tbus_addr_t
;

40 
uöt64_t
 
	tbus_size_t
;

45 
uöt64_t
 
	tbus_•a˚_èg_t
;

46 
uöt64_t
 
	tbus_•a˚_h™dÀ_t
;

	@/usr/include/machine/_limits.h

6 
	~<x86/_limôs.h
>

	@/usr/include/machine/_types.h

6 
	~<x86/_ty≥s.h
>

	@/usr/include/machine/bus.h

6 
	~<x86/bus.h
>

	@/usr/include/machine/bus_dma.h

31 #i‚de‡
_AMD64_BUS_DMA_H_


32 
	#_AMD64_BUS_DMA_H_


	)

34 
	~<x86/bus_dma.h
>

	@/usr/include/machine/clock.h

9 #i‚de‡
_MACHINE_CLOCK_H_


10 
	#_MACHINE_CLOCK_H_


	)

12 #ifde‡
_KERNEL


17 
˛köå_≥ndög
;

18 
u_öt
 
i8254_‰eq
;

19 
i8254_max_cou¡
;

20 
uöt64_t
 
tsc_‰eq
;

21 
tsc_is_öv¨ü¡
;

22 
tsc_≥rf_°©
;

23 #ifde‡
SMP


24 
smp_tsc
;

27 
i8254_öô
();

28 
i8254_dñay
();

29 
˛ock_öô
();

35 
°¨åt˛ock
();

36 
öô_TSC
();

37 
ªsume_TSC
();

39 
	#HAS_TIMER_SPKR
 1

	)

40 
timî_•kr_acquúe
();

41 
timî_•kr_ªÀa£
();

42 
timî_•kr_£t‰eq
(
‰eq
);

	@/usr/include/machine/cpu.h

38 #i‚de‡
_MACHINE_CPU_H_


39 
	#_MACHINE_CPU_H_


	)

44 
	~<machöe/p¶.h
>

45 
	~<machöe/‰ame.h
>

46 
	~<machöe/£gmíts.h
>

48 
	#˝u_exec
(
p
Ë

	)

49 
	#˝u_sw≠ö
(
p
Ë

	)

50 
	#˝u_gë°ack
(
td
Ë(—d)->
td_‰ame
->
tf_r•
)

	)

51 
	#˝u_£t°ack
(
td
, 
≠
Ë(—d)->
td_‰ame
->
tf_r•
 = (≠))

	)

52 
	#˝u_•öwaô
(Ë
	`ü32_∑u£
()

	)

54 
	#TRAPF_USERMODE
(
‰amï
) \

55 (
	`ISPL
((
‰amï
)->
tf_cs
Ë=
SEL_UPL
)

	)

56 
	#TRAPF_PC
(
‰amï
Ë((‰amï)->
tf_rù
)

	)

58 #ifde‡
_KERNEL


65 
	s˝u_›s
 {

66 (*
	m˝u_öô
)();

67 (*
	m˝u_ªsume
)();

70 
˝u_›s
 cpu_ops;

71 
brw£˘i⁄
[];

72 
bãxt
[];

73 
_íd
[];

74 
ëext
[];

77 (*
vmm_ªsume_p
)();

79 
	`˝u_hÆt
();

80 
	`˝u_lock_dñay
();

81 
	`˝u_ª£t
();

82 
	`f‹k_åampﬁöe
();

83 
	`swi_vm
(*);

89 
__ölöe
 
u_öt64_t


90 
	$gë_cy˛ecou¡
()

93  (
	`rdtsc
());

94 
	}
}

96 
	#MEMSET_EARLY_FUNC
 
mem£t_°d


	)

97 
	#MEMCPY_EARLY_FUNC
 
mem˝y_°d


	)

98 
	#MEMMOVE_EARLY_FUNC
 
memmove_°d


	)

	@/usr/include/machine/cpufunc.h

41 #i‚de‡
_MACHINE_CPUFUNC_H_


42 
	#_MACHINE_CPUFUNC_H_


	)

44 #i‚de‡
_SYS_CDEFS_H_


45 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


48 
	gªgi⁄_des¸ùt‹
;

50 
	#ªadb
(
va
Ë(*(vﬁ©ûê
uöt8_t
 *Ë(va))

	)

51 
	#ªadw
(
va
Ë(*(vﬁ©ûê
uöt16_t
 *Ë(va))

	)

52 
	#ªadl
(
va
Ë(*(vﬁ©ûê
uöt32_t
 *Ë(va))

	)

53 
	#ªadq
(
va
Ë(*(vﬁ©ûê
uöt64_t
 *Ë(va))

	)

55 
	#wrôeb
(
va
, 
d
Ë(*(vﬁ©ûê
uöt8_t
 *Ë(vaË(d))

	)

56 
	#wrôew
(
va
, 
d
Ë(*(vﬁ©ûê
uöt16_t
 *Ë(vaË(d))

	)

57 
	#wrôñ
(
va
, 
d
Ë(*(vﬁ©ûê
uöt32_t
 *Ë(vaË(d))

	)

58 
	#wrôeq
(
va
, 
d
Ë(*(vﬁ©ûê
uöt64_t
 *Ë(vaË(d))

	)

60 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__CC_SUPPORTS___INLINE
)

62 
__ölöe
 

63 
	$bªakpoöt
()

65 
__asm
 
	`__vﬁ©ûe
("int $3");

66 
	}
}

68 
__ölöe
 
__puª2
 
u_öt


69 
	$bsÊ
(
u_öt
 
mask
)

71 
u_öt
 
ªsu…
;

73 
__asm
 
	`__vﬁ©ûe
("bsÊ %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

74  (
ªsu…
);

75 
	}
}

77 
__ölöe
 
__puª2
 
u_l⁄g


78 
	$bsfq
(
u_l⁄g
 
mask
)

80 
u_l⁄g
 
ªsu…
;

82 
__asm
 
	`__vﬁ©ûe
("bsfq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

83  (
ªsu…
);

84 
	}
}

86 
__ölöe
 
__puª2
 
u_öt


87 
	$b§l
(
u_öt
 
mask
)

89 
u_öt
 
ªsu…
;

91 
__asm
 
	`__vﬁ©ûe
("b§»%1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

92  (
ªsu…
);

93 
	}
}

95 
__ölöe
 
__puª2
 
u_l⁄g


96 
	$b§q
(
u_l⁄g
 
mask
)

98 
u_l⁄g
 
ªsu…
;

100 
__asm
 
	`__vﬁ©ûe
("b§q %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

101  (
ªsu…
);

102 
	}
}

104 
__ölöe
 

105 
	$˛Êush
(
u_l⁄g
 
addr
)

108 
__asm
 
	`__vﬁ©ûe
("˛Êush %0" : : "m" (*(*)
addr
));

109 
	}
}

111 
__ölöe
 

112 
	$˛Êush›t
(
u_l⁄g
 
addr
)

115 
__asm
 
	`__vﬁ©ûe
(".byã 0x66;˛Êush %0" : : "m" (*(*)
addr
));

116 
	}
}

118 
__ölöe
 

119 
	$˛wb
(
u_l⁄g
 
addr
)

122 
__asm
 
	`__vﬁ©ûe
("˛wb %0" : : "m" (*(*)
addr
));

123 
	}
}

125 
__ölöe
 

126 
	$˛ts
()

129 
__asm
 
	`__vﬁ©ûe
("clts");

130 
	}
}

132 
__ölöe
 

133 
	$dißbÀ_öå
()

135 
__asm
 
	`__vﬁ©ûe
("cli" : : : "memory");

136 
	}
}

138 
__ölöe
 

139 
	$do_˝uid
(
u_öt
 
ax
, u_öà*
p
)

141 
__asm
 
	`__vﬁ©ûe
("cpuid"

142 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

143 : "0" (
ax
));

144 
	}
}

146 
__ölöe
 

147 
	$˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
)

149 
__asm
 
	`__vﬁ©ûe
("cpuid"

150 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

151 : "0" (
ax
), "c" (
cx
));

152 
	}
}

154 
__ölöe
 

155 
	$íabÀ_öå
()

157 
__asm
 
	`__vﬁ©ûe
("sti");

158 
	}
}

160 #ifde‡
_KERNEL


162 
	#HAVE_INLINE_FFS


	)

163 
	#ffs
(
x
Ë
	`__buûtö_ffs
(x)

	)

165 
	#HAVE_INLINE_FFSL


	)

167 
__ölöe
 
__puª2
 

168 
	$ff¶
(
mask
)

170  (
mask
 =0 ? mask : ()
	`bsfq
((
u_l⁄g
)mask) + 1);

171 
	}
}

173 
	#HAVE_INLINE_FFSLL


	)

175 
__ölöe
 
__puª2
 

176 
	$ff¶l
(
mask
)

178  (
	`ff¶
(()
mask
));

179 
	}
}

181 
	#HAVE_INLINE_FLS


	)

183 
__ölöe
 
__puª2
 

184 
	$Ês
(
mask
)

186  (
mask
 =0 ? mask : ()
	`b§l
((
u_öt
)mask) + 1);

187 
	}
}

189 
	#HAVE_INLINE_FLSL


	)

191 
__ölöe
 
__puª2
 

192 
	$Ê¶
(
mask
)

194  (
mask
 =0 ? mask : ()
	`b§q
((
u_l⁄g
)mask) + 1);

195 
	}
}

197 
	#HAVE_INLINE_FLSLL


	)

199 
__ölöe
 
__puª2
 

200 
	$Ê¶l
(
mask
)

202  (
	`Ê¶
(()
mask
));

203 
	}
}

207 
__ölöe
 

208 
	$hÆt
()

210 
__asm
 
	`__vﬁ©ûe
("hlt");

211 
	}
}

213 
__ölöe
 
u_ch¨


214 
	$öb
(
u_öt
 
p‹t
)

216 
u_ch¨
 
d©a
;

218 
__asm
 
	`__vﬁ©ûe
("öb %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

219  (
d©a
);

220 
	}
}

222 
__ölöe
 
u_öt


223 
	$öl
(
u_öt
 
p‹t
)

225 
u_öt
 
d©a
;

227 
__asm
 
	`__vﬁ©ûe
("ö»%w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

228  (
d©a
);

229 
	}
}

231 
__ölöe
 

232 
	$ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

234 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insb"

235 : "+D" (
addr
), "+c" (
cou¡
)

236 : "d" (
p‹t
)

238 
	}
}

240 
__ölöe
 

241 
	$ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

243 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insw"

244 : "+D" (
addr
), "+c" (
cou¡
)

245 : "d" (
p‹t
)

247 
	}
}

249 
__ölöe
 

250 
	$ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

252 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insl"

253 : "+D" (
addr
), "+c" (
cou¡
)

254 : "d" (
p‹t
)

256 
	}
}

258 
__ölöe
 

259 
	$övd
()

261 
__asm
 
	`__vﬁ©ûe
("invd");

262 
	}
}

264 
__ölöe
 
u_sh‹t


265 
	$öw
(
u_öt
 
p‹t
)

267 
u_sh‹t
 
d©a
;

269 
__asm
 
	`__vﬁ©ûe
("öw %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

270  (
d©a
);

271 
	}
}

273 
__ölöe
 

274 
	$outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
)

276 
__asm
 
	`__vﬁ©ûe
("outb %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

277 
	}
}

279 
__ölöe
 

280 
	$oué
(
u_öt
 
p‹t
, u_öà
d©a
)

282 
__asm
 
	`__vﬁ©ûe
("oué %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

283 
	}
}

285 
__ölöe
 

286 
	$outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

288 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsb"

289 : "+S" (
addr
), "+c" (
cou¡
)

290 : "d" (
p‹t
));

291 
	}
}

293 
__ölöe
 

294 
	$outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

296 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsw"

297 : "+S" (
addr
), "+c" (
cou¡
)

298 : "d" (
p‹t
));

299 
	}
}

301 
__ölöe
 

302 
	$out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

304 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsl"

305 : "+S" (
addr
), "+c" (
cou¡
)

306 : "d" (
p‹t
));

307 
	}
}

309 
__ölöe
 

310 
	$outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
)

312 
__asm
 
	`__vﬁ©ûe
("outw %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

313 
	}
}

315 
__ölöe
 
u_l⁄g


316 
	$p›˙tq
(
u_l⁄g
 
mask
)

318 
u_l⁄g
 
ªsu…
;

320 
__asm
 
	`__vﬁ©ûe
("p›˙tq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

321  (
ªsu…
);

322 
	}
}

324 
__ölöe
 

325 
	$l„n˚
()

328 
__asm
 
	`__vﬁ©ûe
("lfence" : : : "memory");

329 
	}
}

331 
__ölöe
 

332 
	$m„n˚
()

335 
__asm
 
	`__vﬁ©ûe
("mfence" : : : "memory");

336 
	}
}

338 
__ölöe
 

339 
	$s„n˚
()

342 
__asm
 
	`__vﬁ©ûe
("sfence" : : : "memory");

343 
	}
}

345 
__ölöe
 

346 
	$ü32_∑u£
()

348 
__asm
 
	`__vﬁ©ûe
("pause");

349 
	}
}

351 
__ölöe
 
u_l⁄g


352 
	$ªad_rÊags
()

354 
u_l⁄g
 
rf
;

356 
__asm
 
	`__vﬁ©ûe
("pushfq;Ö›q %0" : "Ù" (
rf
));

357  (
rf
);

358 
	}
}

360 
__ölöe
 
uöt64_t


361 
	$rdm§
(
u_öt
 
m§
)

363 
uöt32_t
 
low
, 
high
;

365 
__asm
 
	`__vﬁ©ûe
("rdm§" : "˜" (
low
), "=d" (
high
Ë: "c" (
m§
));

366  (
low
 | ((
uöt64_t
)
high
 << 32));

367 
	}
}

369 
__ölöe
 
uöt32_t


370 
	$rdm§32
(
u_öt
 
m§
)

372 
uöt32_t
 
low
;

374 
__asm
 
	`__vﬁ©ûe
("rdm§" : "˜" (
low
Ë: "c" (
m§
) : "rdx");

375  (
low
);

376 
	}
}

378 
__ölöe
 
uöt64_t


379 
	$rdpmc
(
u_öt
 
pmc
)

381 
uöt32_t
 
low
, 
high
;

383 
__asm
 
	`__vﬁ©ûe
("rdpmc" : "˜" (
low
), "=d" (
high
Ë: "c" (
pmc
));

384  (
low
 | ((
uöt64_t
)
high
 << 32));

385 
	}
}

387 
__ölöe
 
uöt64_t


388 
	$rdtsc
()

390 
uöt32_t
 
low
, 
high
;

392 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
low
), "=d" (
high
));

393  (
low
 | ((
uöt64_t
)
high
 << 32));

394 
	}
}

396 
__ölöe
 
uöt64_t


397 
	$rdts˝
()

399 
uöt32_t
 
low
, 
high
;

401 
__asm
 
	`__vﬁ©ûe
("rdts˝" : "˜" (
low
), "=d" (
high
) : : "ecx");

402  (
low
 | ((
uöt64_t
)
high
 << 32));

403 
	}
}

405 
__ölöe
 
uöt32_t


406 
	$rdtsc32
()

408 
uöt32_t
 
rv
;

410 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
rv
) : : "edx");

411  (
rv
);

412 
	}
}

414 
__ölöe
 

415 
	$wbövd
()

417 
__asm
 
	`__vﬁ©ûe
("wbinvd");

418 
	}
}

420 
__ölöe
 

421 
	$wrôe_rÊags
(
u_l⁄g
 
rf
)

423 
__asm
 
	`__vﬁ©ûe
("pushq %0;Ö›fq" : : "r" (
rf
));

424 
	}
}

426 
__ölöe
 

427 
	$wrm§
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
)

429 
uöt32_t
 
low
, 
high
;

431 
low
 = 
√wvÆ
;

432 
high
 = 
√wvÆ
 >> 32;

433 
__asm
 
	`__vﬁ©ûe
("wrm§" : : "a" (
low
), "d" (
high
), "c" (
m§
));

434 
	}
}

436 
__ölöe
 

437 
	$lﬂd_¸0
(
u_l⁄g
 
d©a
)

440 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸0" : : "r" (
d©a
));

441 
	}
}

443 
__ölöe
 
u_l⁄g


444 
	$r¸0
()

446 
u_l⁄g
 
d©a
;

448 
__asm
 
	`__vﬁ©ûe
("movq %%¸0,%0" : "Ù" (
d©a
));

449  (
d©a
);

450 
	}
}

452 
__ölöe
 
u_l⁄g


453 
	$r¸2
()

455 
u_l⁄g
 
d©a
;

457 
__asm
 
	`__vﬁ©ûe
("movq %%¸2,%0" : "Ù" (
d©a
));

458  (
d©a
);

459 
	}
}

461 
__ölöe
 

462 
	$lﬂd_¸3
(
u_l⁄g
 
d©a
)

465 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸3" : : "r" (
d©a
) : "memory");

466 
	}
}

468 
__ölöe
 
u_l⁄g


469 
	$r¸3
()

471 
u_l⁄g
 
d©a
;

473 
__asm
 
	`__vﬁ©ûe
("movq %%¸3,%0" : "Ù" (
d©a
));

474  (
d©a
);

475 
	}
}

477 
__ölöe
 

478 
	$lﬂd_¸4
(
u_l⁄g
 
d©a
)

480 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸4" : : "r" (
d©a
));

481 
	}
}

483 
__ölöe
 
u_l⁄g


484 
	$r¸4
()

486 
u_l⁄g
 
d©a
;

488 
__asm
 
	`__vﬁ©ûe
("movq %%¸4,%0" : "Ù" (
d©a
));

489  (
d©a
);

490 
	}
}

492 
__ölöe
 
u_l⁄g


493 
	$rx¸
(
u_öt
 
ªg
)

495 
u_öt
 
low
, 
high
;

497 
__asm
 
	`__vﬁ©ûe
("xgëbv" : "˜" (
low
), "=d" (
high
Ë: "c" (
ªg
));

498  (
low
 | ((
uöt64_t
)
high
 << 32));

499 
	}
}

501 
__ölöe
 

502 
	$lﬂd_x¸
(
u_öt
 
ªg
, 
u_l⁄g
 
vÆ
)

504 
u_öt
 
low
, 
high
;

506 
low
 = 
vÆ
;

507 
high
 = 
vÆ
 >> 32;

508 
__asm
 
	`__vﬁ©ûe
("x£tbv" : : "c" (
ªg
), "a" (
low
), "d" (
high
));

509 
	}
}

514 
__ölöe
 

515 
	$öv…lb
()

518 
	`lﬂd_¸3
(
	`r¸3
());

519 
	}
}

521 #i‚de‡
CR4_PGE


522 
	#CR4_PGE
 0x00000080

	)

532 
__ölöe
 

533 
	$öv…lb_glob
()

535 
uöt64_t
 
¸4
;

537 
¸4
 = 
	`r¸4
();

538 
	`lﬂd_¸4
(
¸4
 & ~
CR4_PGE
);

546 
	`lﬂd_¸4
(
¸4
 | 
CR4_PGE
);

547 
	}
}

553 
__ölöe
 

554 
	$övÕg
(
u_l⁄g
 
addr
)

557 
__asm
 
	`__vﬁ©ûe
("övÕg %0" : : "m" (*(*)
addr
) : "memory");

558 
	}
}

560 
	#INVPCID_ADDR
 0

	)

561 
	#INVPCID_CTX
 1

	)

562 
	#INVPCID_CTXGLOB
 2

	)

563 
	#INVPCID_ALLCTX
 3

	)

565 
	sövpcid_des¸
 {

566 
uöt64_t
 
	mpcid
:12 
__∑cked
;

567 
uöt64_t
 
	m∑d
:52 
__∑cked
;

568 
uöt64_t
 
	maddr
;

569 } 
	g__∑cked
;

571 
__ölöe
 

572 
	$övpcid
(
övpcid_des¸
 *
d
, 
ty≥
)

575 
__asm
 
	`__vﬁ©ûe
("invpcid (%0),%1"

576 : : "r" (
d
), "r" ((
u_l⁄g
)
ty≥
) : "memory");

577 
	}
}

579 
__ölöe
 
u_sh‹t


580 
	$rfs
()

582 
u_sh‹t
 
£l
;

583 
__asm
 
	`__vﬁ©ûe
("movw %%fs,%0" : "Ùm" (
£l
));

584  (
£l
);

585 
	}
}

587 
__ölöe
 
u_sh‹t


588 
	$rgs
()

590 
u_sh‹t
 
£l
;

591 
__asm
 
	`__vﬁ©ûe
("movw %%gs,%0" : "Ùm" (
£l
));

592  (
£l
);

593 
	}
}

595 
__ölöe
 
u_sh‹t


596 
	$rss
()

598 
u_sh‹t
 
£l
;

599 
__asm
 
	`__vﬁ©ûe
("movw %%ss,%0" : "Ùm" (
£l
));

600  (
£l
);

601 
	}
}

603 
__ölöe
 

604 
	$lﬂd_ds
(
u_sh‹t
 
£l
)

606 
__asm
 
	`__vﬁ©ûe
("movw %0,%%ds" : : "rm" (
£l
));

607 
	}
}

609 
__ölöe
 

610 
	$lﬂd_es
(
u_sh‹t
 
£l
)

612 
__asm
 
	`__vﬁ©ûe
("movw %0,%%es" : : "rm" (
£l
));

613 
	}
}

615 
__ölöe
 

616 
	$˝u_m⁄ô‹
(c⁄° *
addr
, 
u_l⁄g
 
exãnsi⁄s
, 
u_öt
 
höts
)

619 
__asm
 
	`__vﬁ©ûe
("monitor"

620 : : "a" (
addr
), "c" (
exãnsi⁄s
), "d" (
höts
));

621 
	}
}

623 
__ölöe
 

624 
	$˝u_mwaô
(
u_l⁄g
 
exãnsi⁄s
, 
u_öt
 
höts
)

627 
__asm
 
	`__vﬁ©ûe
("mwaô" : : "a" (
höts
), "c" (
exãnsi⁄s
));

628 
	}
}

630 #ifde‡
_KERNEL


632 #i‚def 
MSR_FSBASE


633 
	#MSR_FSBASE
 0xc0000100

	)

635 
__ölöe
 

636 
	$lﬂd_fs
(
u_sh‹t
 
£l
)

639 
__asm
 
	`__vﬁ©ûe
("rdmsr; movw %0,%%fs; wrmsr"

640 : : "rm" (
£l
), "c" (
MSR_FSBASE
) : "eax", "edx");

641 
	}
}

643 #i‚def 
MSR_GSBASE


644 
	#MSR_GSBASE
 0xc0000101

	)

646 
__ölöe
 

647 
	$lﬂd_gs
(
u_sh‹t
 
£l
)

654 
__asm
 
	`__vﬁ©ûe
("pushfq; cli;Ñdmsr; movw %0,%%gs; wrmsr;Öopfq"

655 : : "rm" (
£l
), "c" (
MSR_GSBASE
) : "eax", "edx");

656 
	}
}

659 
__ölöe
 

660 
	$lﬂd_fs
(
u_sh‹t
 
£l
)

662 
__asm
 
	`__vﬁ©ûe
("movw %0,%%fs" : : "rm" (
£l
));

663 
	}
}

665 
__ölöe
 

666 
	$lﬂd_gs
(
u_sh‹t
 
£l
)

668 
__asm
 
	`__vﬁ©ûe
("movw %0,%%gs" : : "rm" (
£l
));

669 
	}
}

672 
__ölöe
 
uöt64_t


673 
	$rdfsba£
()

675 
uöt64_t
 
x
;

677 
__asm
 
	`__vﬁ©ûe
("rdfsba£ %0" : "Ù" (
x
));

678  (
x
);

679 
	}
}

681 
__ölöe
 

682 
	$wrfsba£
(
uöt64_t
 
x
)

685 
__asm
 
	`__vﬁ©ûe
("wrfsba£ %0" : : "r" (
x
));

686 
	}
}

688 
__ölöe
 
uöt64_t


689 
	$rdgsba£
()

691 
uöt64_t
 
x
;

693 
__asm
 
	`__vﬁ©ûe
("rdgsba£ %0" : "Ù" (
x
));

694  (
x
);

695 
	}
}

697 
__ölöe
 

698 
	$wrgsba£
(
uöt64_t
 
x
)

701 
__asm
 
	`__vﬁ©ûe
("wrgsba£ %0" : : "r" (
x
));

702 
	}
}

704 
__ölöe
 

705 
	$b¨e_lgdt
(
ªgi⁄_des¸ùt‹
 *
addr
)

707 
__asm
 
	`__vﬁ©ûe
("lgdà(%0)" : : "r" (
addr
));

708 
	}
}

710 
__ölöe
 

711 
	$sgdt
(
ªgi⁄_des¸ùt‹
 *
addr
)

713 *
loc
;

715 
loc
 = (*)
addr
;

716 
__asm
 
	`__vﬁ©ûe
("sgdà%0" : "=m" (*
loc
) : : "memory");

717 
	}
}

719 
__ölöe
 

720 
	$lidt
(
ªgi⁄_des¸ùt‹
 *
addr
)

722 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
addr
));

723 
	}
}

725 
__ölöe
 

726 
	$sidt
(
ªgi⁄_des¸ùt‹
 *
addr
)

728 *
loc
;

730 
loc
 = (*)
addr
;

731 
__asm
 
	`__vﬁ©ûe
("sidà%0" : "=m" (*
loc
) : : "memory");

732 
	}
}

734 
__ölöe
 

735 
	$Œdt
(
u_sh‹t
 
£l
)

737 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

738 
	}
}

740 
__ölöe
 
u_sh‹t


741 
	$¶dt
()

743 
u_sh‹t
 
£l
;

745 
__asm
 
	`__vﬁ©ûe
("¶dà%0" : "Ù" (
£l
));

746  (
£l
);

747 
	}
}

749 
__ölöe
 

750 
	$…r
(
u_sh‹t
 
£l
)

752 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

753 
	}
}

755 
__ölöe
 
uöt32_t


756 
	$ªad_å
()

758 
u_sh‹t
 
£l
;

760 
__asm
 
	`__vﬁ©ûe
("°∏%0" : "Ù" (
£l
));

761  (
£l
);

762 
	}
}

764 
__ölöe
 
uöt64_t


765 
	$rdr0
()

767 
uöt64_t
 
d©a
;

768 
__asm
 
	`__vﬁ©ûe
("movq %%dr0,%0" : "Ù" (
d©a
));

769  (
d©a
);

770 
	}
}

772 
__ölöe
 

773 
	$lﬂd_dr0
(
uöt64_t
 
dr0
)

775 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr0" : : "r" (
dr0
));

776 
	}
}

778 
__ölöe
 
uöt64_t


779 
	$rdr1
()

781 
uöt64_t
 
d©a
;

782 
__asm
 
	`__vﬁ©ûe
("movq %%dr1,%0" : "Ù" (
d©a
));

783  (
d©a
);

784 
	}
}

786 
__ölöe
 

787 
	$lﬂd_dr1
(
uöt64_t
 
dr1
)

789 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr1" : : "r" (
dr1
));

790 
	}
}

792 
__ölöe
 
uöt64_t


793 
	$rdr2
()

795 
uöt64_t
 
d©a
;

796 
__asm
 
	`__vﬁ©ûe
("movq %%dr2,%0" : "Ù" (
d©a
));

797  (
d©a
);

798 
	}
}

800 
__ölöe
 

801 
	$lﬂd_dr2
(
uöt64_t
 
dr2
)

803 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr2" : : "r" (
dr2
));

804 
	}
}

806 
__ölöe
 
uöt64_t


807 
	$rdr3
()

809 
uöt64_t
 
d©a
;

810 
__asm
 
	`__vﬁ©ûe
("movq %%dr3,%0" : "Ù" (
d©a
));

811  (
d©a
);

812 
	}
}

814 
__ölöe
 

815 
	$lﬂd_dr3
(
uöt64_t
 
dr3
)

817 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr3" : : "r" (
dr3
));

818 
	}
}

820 
__ölöe
 
uöt64_t


821 
	$rdr6
()

823 
uöt64_t
 
d©a
;

824 
__asm
 
	`__vﬁ©ûe
("movq %%dr6,%0" : "Ù" (
d©a
));

825  (
d©a
);

826 
	}
}

828 
__ölöe
 

829 
	$lﬂd_dr6
(
uöt64_t
 
dr6
)

831 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr6" : : "r" (
dr6
));

832 
	}
}

834 
__ölöe
 
uöt64_t


835 
	$rdr7
()

837 
uöt64_t
 
d©a
;

838 
__asm
 
	`__vﬁ©ûe
("movq %%dr7,%0" : "Ù" (
d©a
));

839  (
d©a
);

840 
	}
}

842 
__ölöe
 

843 
	$lﬂd_dr7
(
uöt64_t
 
dr7
)

845 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr7" : : "r" (
dr7
));

846 
	}
}

848 
__ölöe
 
ªgi°î_t


849 
	$öå_dißbÀ
()

851 
ªgi°î_t
 
rÊags
;

853 
rÊags
 = 
	`ªad_rÊags
();

854 
	`dißbÀ_öå
();

855  (
rÊags
);

856 
	}
}

858 
__ölöe
 

859 
	$öå_ª°‹e
(
ªgi°î_t
 
rÊags
)

861 
	`wrôe_rÊags
(
rÊags
);

862 
	}
}

864 
__ölöe
 

865 
	$°ac
()

868 
__asm
 
	`__vﬁ©ûe
("stac" : : : "cc");

869 
	}
}

871 
__ölöe
 

872 
	$˛ac
()

875 
__asm
 
	`__vﬁ©ûe
("clac" : : : "cc");

876 
	}
}

879 
	mSGX_ECREATE
 = 0x0,

880 
	mSGX_EADD
 = 0x1,

881 
	mSGX_EINIT
 = 0x2,

882 
	mSGX_EREMOVE
 = 0x3,

883 
	mSGX_EDGBRD
 = 0x4,

884 
	mSGX_EDGBWR
 = 0x5,

885 
	mSGX_EEXTEND
 = 0x6,

886 
	mSGX_ELDU
 = 0x8,

887 
	mSGX_EBLOCK
 = 0x9,

888 
	mSGX_EPA
 = 0xA,

889 
	mSGX_EWB
 = 0xB,

890 
	mSGX_ETRACK
 = 0xC,

894 
	mSGX_PT_SECS
 = 0x00,

895 
	mSGX_PT_TCS
 = 0x01,

896 
	mSGX_PT_REG
 = 0x02,

897 
	mSGX_PT_VA
 = 0x03,

898 
	mSGX_PT_TRIM
 = 0x04,

901 
sgx_í˛s
(
uöt32_t
 
óx
, 
uöt64_t
 
rbx
, uöt64_à
rcx
, uöt64_à
rdx
);

903 
__ölöe
 

904 
	$sgx_e¸óã
(*
pgöfo
, *
£cs
)

907  (
	`sgx_í˛s
(
SGX_ECREATE
, (
uöt64_t
)
pgöfo
,

908 (
uöt64_t
)
£cs
, 0));

909 
	}
}

911 
__ölöe
 

912 
	$sgx_ódd
(*
pgöfo
, *
ïc
)

915  (
	`sgx_í˛s
(
SGX_EADD
, (
uöt64_t
)
pgöfo
,

916 (
uöt64_t
)
ïc
, 0));

917 
	}
}

919 
__ölöe
 

920 
	$sgx_eöô
(*
sig°ru˘
, *
£cs
, *
eöôtokí
)

923  (
	`sgx_í˛s
(
SGX_EINIT
, (
uöt64_t
)
sig°ru˘
,

924 (
uöt64_t
)
£cs
, (uöt64_t)
eöôtokí
));

925 
	}
}

927 
__ölöe
 

928 
	$sgx_ìxãnd
(*
£cs
, *
ïc
)

931  (
	`sgx_í˛s
(
SGX_EEXTEND
, (
uöt64_t
)
£cs
,

932 (
uöt64_t
)
ïc
, 0));

933 
	}
}

935 
__ölöe
 

936 
	$sgx_ïa
(*
ïc
)

939  (
	`sgx_í˛s
(
SGX_EPA
, 
SGX_PT_VA
, (
uöt64_t
)
ïc
, 0));

940 
	}
}

942 
__ölöe
 

943 
	$sgx_ñdu
(
uöt64_t
 
rbx
, uöt64_à
rcx
,

944 
uöt64_t
 
rdx
)

947  (
	`sgx_í˛s
(
SGX_ELDU
, 
rbx
, 
rcx
, 
rdx
));

948 
	}
}

950 
__ölöe
 

951 
	$sgx_îemove
(*
ïc
)

954  (
	`sgx_í˛s
(
SGX_EREMOVE
, 0, (
uöt64_t
)
ïc
, 0));

955 
	}
}

959 
bªakpoöt
();

960 
u_öt
 
bsÊ
(u_öà
mask
);

961 
u_öt
 
b§l
(u_öà
mask
);

962 
˛Êush
(
u_l⁄g
 
addr
);

963 
˛ts
();

964 
˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
);

965 
dißbÀ_öå
();

966 
do_˝uid
(
u_öt
 
ax
, u_öà*
p
);

967 
íabÀ_öå
();

968 
hÆt
();

969 
ü32_∑u£
();

970 
u_ch¨
 
öb
(
u_öt
 
p‹t
);

971 
u_öt
 
öl
(u_öà
p‹t
);

972 
ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

973 
ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

974 
ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

975 
ªgi°î_t
 
öå_dißbÀ
();

976 
öå_ª°‹e
(
ªgi°î_t
 
rf
);

977 
övd
();

978 
övÕg
(
u_öt
 
addr
);

979 
öv…lb
();

980 
u_sh‹t
 
öw
(
u_öt
 
p‹t
);

981 
lidt
(
ªgi⁄_des¸ùt‹
 *
addr
);

982 
Œdt
(
u_sh‹t
 
£l
);

983 
lﬂd_¸0
(
u_l⁄g
 
¸0
);

984 
lﬂd_¸3
(
u_l⁄g
 
¸3
);

985 
lﬂd_¸4
(
u_l⁄g
 
¸4
);

986 
lﬂd_dr0
(
uöt64_t
 
dr0
);

987 
lﬂd_dr1
(
uöt64_t
 
dr1
);

988 
lﬂd_dr2
(
uöt64_t
 
dr2
);

989 
lﬂd_dr3
(
uöt64_t
 
dr3
);

990 
lﬂd_dr6
(
uöt64_t
 
dr6
);

991 
lﬂd_dr7
(
uöt64_t
 
dr7
);

992 
lﬂd_fs
(
u_sh‹t
 
£l
);

993 
lﬂd_gs
(
u_sh‹t
 
£l
);

994 
…r
(
u_sh‹t
 
£l
);

995 
outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
);

996 
oué
(
u_öt
 
p‹t
, u_öà
d©a
);

997 
outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

998 
out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

999 
outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

1000 
outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
);

1001 
u_l⁄g
 
r¸0
();

1002 
u_l⁄g
 
r¸2
();

1003 
u_l⁄g
 
r¸3
();

1004 
u_l⁄g
 
r¸4
();

1005 
uöt64_t
 
rdm§
(
u_öt
 
m§
);

1006 
uöt32_t
 
rdm§32
(
u_öt
 
m§
);

1007 
uöt64_t
 
rdpmc
(
u_öt
 
pmc
);

1008 
uöt64_t
 
rdr0
();

1009 
uöt64_t
 
rdr1
();

1010 
uöt64_t
 
rdr2
();

1011 
uöt64_t
 
rdr3
();

1012 
uöt64_t
 
rdr6
();

1013 
uöt64_t
 
rdr7
();

1014 
uöt64_t
 
rdtsc
();

1015 
u_l⁄g
 
ªad_rÊags
();

1016 
u_öt
 
rfs
();

1017 
u_öt
 
rgs
();

1018 
wbövd
();

1019 
wrôe_rÊags
(
u_öt
 
rf
);

1020 
wrm§
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

1024 
ª£t_dbªgs
();

1026 #ifde‡
_KERNEL


1027 
rdm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 *
vÆ
);

1028 
wrm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

	@/usr/include/machine/fpu.h

43 #i‚de‡
_MACHINE_FPU_H_


44 
	#_MACHINE_FPU_H_


	)

46 
	~<x86/Âu.h
>

48 #ifde‡
_KERNEL


50 
	gÂu_kîn_˘x
;

52 
	#PCB_USER_FPU
(
pcb
Ë((’cb)->
pcb_Êags
 & 
PCB_KERNFPU
Ë=0)

	)

54 
	#XSAVE_AREA_ALIGN
 64

	)

56 
Âud«
();

57 
Âudr›
();

58 
Âuexô
(
thªad
 *
td
);

59 
Âuf‹m©
();

60 
Âugëªgs
(
thªad
 *
td
);

61 
Âuöô
();

62 
Âuª°‹e
(*
addr
);

63 
Âuªsume
(*
addr
);

64 
Âußve
(*
addr
);

65 
Âu£åegs
(
thªad
 *
td
, 
ßveÂu
 *
addr
,

66 *
xÂu°©e
, 
size_t
 
xÂu°©e_size
);

67 
Âu£tx°©e
(
thªad
 *
td
, *
xÂu°©e
,

68 
size_t
 
xÂu°©e_size
);

69 
Âusu•íd
(*
addr
);

70 
Âuå≠_s£
();

71 
Âuå≠_x87
();

72 
Âuu£röôed
(
thªad
 *
td
);

73 
Âu_kîn_˘x
 *
Âu_kîn_Æloc_˘x
(
u_öt
 
Êags
);

74 
Âu_kîn_‰ì_˘x
(
Âu_kîn_˘x
 *
˘x
);

75 
Âu_kîn_íãr
(
thªad
 *
td
, 
Âu_kîn_˘x
 *
˘x
,

76 
u_öt
 
Êags
);

77 
Âu_kîn_Àave
(
thªad
 *
td
, 
Âu_kîn_˘x
 *
˘x
);

78 
Âu_kîn_thªad
(
u_öt
 
Êags
);

79 
is_Âu_kîn_thªad
(
u_öt
 
Êags
);

81 
ßveÂu
 *
Âu_ßve_¨ó_Æloc
();

82 
Âu_ßve_¨ó_‰ì
(
ßveÂu
 *
fß
);

83 
Âu_ßve_¨ó_ª£t
(
ßveÂu
 *
fß
);

88 
	#FPU_KERN_NORMAL
 0x0000

	)

89 
	#FPU_KERN_NOWAIT
 0x0001

	)

90 
	#FPU_KERN_KTHR
 0x0002

	)

91 
	#FPU_KERN_NOCTX
 0x0004

	)

	@/usr/include/machine/frame.h

34 #i‚def 
_AMD64_FRAME_H


35 
	#_AMD64_FRAME_H


	)

37 
	~<x86/‰ame.h
>

39 
	s±i_‰ame
 {

40 
ªgi°î_t
 
	m±i_rdx
;

41 
ªgi°î_t
 
	m±i_øx
;

42 
ªgi°î_t
 
	m±i_îr
;

43 
ªgi°î_t
 
	m±i_rù
;

44 
ªgi°î_t
 
	m±i_cs
;

45 
ªgi°î_t
 
	m±i_rÊags
;

46 
ªgi°î_t
 
	m±i_r•
;

47 
ªgi°î_t
 
	m±i_ss
;

	@/usr/include/machine/ieeefp.h

40 #i‚de‡
_MACHINE_IEEEFP_H_


41 
	#_MACHINE_IEEEFP_H_


	)

50 #i‚de‡
_SYS_CDEFS_H_


51 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


58 
	mFP_RN
=0,

59 
	mFP_RM
,

60 
	mFP_RP
,

61 
	mFP_RZ


62 } 
	tÂ_∫d_t
;

68 
	mFP_PS
=0,

69 
	mFP_PRS
,

70 
	mFP_PD
,

71 
	mFP_PE


72 } 
	tÂ_¥ec_t
;

74 
	#Â_ex˚±_t
 

	)

79 
	#FP_X_INV
 0x01

	)

80 
	#FP_X_DNML
 0x02

	)

81 
	#FP_X_DZ
 0x04

	)

82 
	#FP_X_OFL
 0x08

	)

83 
	#FP_X_UFL
 0x10

	)

84 
	#FP_X_IMP
 0x20

	)

85 
	#FP_X_STK
 0x40

	)

90 
	#FP_MSKS_FLD
 0x3‡

	)

91 
	#FP_PRC_FLD
 0x300

	)

92 
	#FP_RND_FLD
 0xc00

	)

97 
	#FP_STKY_FLD
 0x3‡

	)

102 
	#SSE_STKY_FLD
 0x3‡

	)

103 
	#SSE_DAZ_FLD
 0x40

	)

104 
	#SSE_MSKS_FLD
 0x1f80

	)

105 
	#SSE_RND_FLD
 0x6000

	)

106 
	#SSE_FZ_FLD
 0x8000

	)

111 
	#FP_MSKS_OFF
 0

	)

112 
	#FP_PRC_OFF
 8

	)

113 
	#FP_RND_OFF
 10

	)

118 
	#FP_STKY_OFF
 0

	)

123 
	#SSE_STKY_OFF
 0

	)

124 
	#SSE_DAZ_OFF
 6

	)

125 
	#SSE_MSKS_OFF
 7

	)

126 
	#SSE_RND_OFF
 13

	)

127 
	#SSE_FZ_OFF
 15

	)

129 #ifde‡
__GNUCLIKE_ASM


131 
	#__Êdcw
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("Êdcw %0" : : "m" (*◊ddr)))

	)

132 
	#__Êdív
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("Êdív %0" : : "m" (*◊ddr)))

	)

133 
	#__‚˛ex
(Ë
__asm
 
	`__vﬁ©ûe
("‚˛ex")

	)

134 
	#__‚°cw
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("‚°cw %0" : "=m" (*◊ddr)))

	)

135 
	#__‚°ív
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("‚°ív %0" : "=m" (*◊ddr)))

	)

136 
	#__‚°sw
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("‚°sw %0" : "=m" (*◊ddr)))

	)

137 
	#__ldmxc§
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("ldmxc§ %0" : : "m" (*◊ddr)))

	)

138 
	#__°mxc§
(
addr
Ë
__asm
 
	`__vﬁ©ûe
("°mxc§ %0" : "=m" (*◊ddr)))

	)

147 
__ölöe
 

148 
	$__‚ldcw
(
_cw
, 
_√wcw
)

151 
_cw
;

152 
_Ÿhî
[6];

153 } 
_ív
;

154 
_sw
;

156 i‡((
_cw
 & 
FP_MSKS_FLD
) != FP_MSKS_FLD) {

157 
	`__‚°sw
(&
_sw
);

158 i‡(((
_sw
 & ~
_cw
Ë& 
FP_STKY_FLD
) != 0) {

159 
	`__‚°ív
(&
_ív
);

160 
_ív
.
_cw
 = 
_√wcw
;

161 
	`__Êdív
(&
_ív
);

165 
	`__Êdcw
(&
_√wcw
);

166 
	}
}

179 
__ölöe
 
Â_∫d_t


180 
	$__Âgëround
()

182 
_cw
;

184 
	`__‚°cw
(&
_cw
);

185  ((
Â_∫d_t
)((
_cw
 & 
FP_RND_FLD
Ë>> 
FP_RND_OFF
));

186 
	}
}

188 
__ölöe
 
Â_∫d_t


189 
	$__Â£åound
(
Â_∫d_t
 
_m
)

191 
Â_∫d_t
 
_p
;

192 
_mxc§
;

193 
_cw
, 
_√wcw
;

195 
	`__‚°cw
(&
_cw
);

196 
_p
 = (
Â_∫d_t
)((
_cw
 & 
FP_RND_FLD
Ë>> 
FP_RND_OFF
);

197 
_√wcw
 = 
_cw
 & ~
FP_RND_FLD
;

198 
_√wcw
 |(
_m
 << 
FP_RND_OFF
Ë& 
FP_RND_FLD
;

199 
	`__‚ldcw
(
_cw
, 
_√wcw
);

200 
	`__°mxc§
(&
_mxc§
);

201 
_mxc§
 &~
SSE_RND_FLD
;

202 
_mxc§
 |(
_m
 << 
SSE_RND_OFF
Ë& 
SSE_RND_FLD
;

203 
	`__ldmxc§
(&
_mxc§
);

204  (
_p
);

205 
	}
}

212 
__ölöe
 
Â_¥ec_t


213 
	$__Âgë¥ec
()

215 
_cw
;

217 
	`__‚°cw
(&
_cw
);

218  ((
Â_¥ec_t
)((
_cw
 & 
FP_PRC_FLD
Ë>> 
FP_PRC_OFF
));

219 
	}
}

221 
__ölöe
 
Â_¥ec_t


222 
	$__Â£çªc
(
Â_¥ec_t
 
_m
)

224 
Â_¥ec_t
 
_p
;

225 
_cw
, 
_√wcw
;

227 
	`__‚°cw
(&
_cw
);

228 
_p
 = (
Â_¥ec_t
)((
_cw
 & 
FP_PRC_FLD
Ë>> 
FP_PRC_OFF
);

229 
_√wcw
 = 
_cw
 & ~
FP_PRC_FLD
;

230 
_√wcw
 |(
_m
 << 
FP_PRC_OFF
Ë& 
FP_PRC_FLD
;

231 
	`__‚ldcw
(
_cw
, 
_√wcw
);

232  (
_p
);

233 
	}
}

241 
__ölöe
 
Â_ex˚±_t


242 
	$__Âgëmask
()

244 
_cw
;

246 
	`__‚°cw
(&
_cw
);

247  ((~
_cw
 & 
FP_MSKS_FLD
Ë>> 
FP_MSKS_OFF
);

248 
	}
}

250 
__ölöe
 
Â_ex˚±_t


251 
	$__Â£tmask
(
Â_ex˚±_t
 
_m
)

253 
Â_ex˚±_t
 
_p
;

254 
_mxc§
;

255 
_cw
, 
_√wcw
;

257 
	`__‚°cw
(&
_cw
);

258 
_p
 = (~
_cw
 & 
FP_MSKS_FLD
Ë>> 
FP_MSKS_OFF
;

259 
_√wcw
 = 
_cw
 & ~
FP_MSKS_FLD
;

260 
_√wcw
 |(~
_m
 << 
FP_MSKS_OFF
Ë& 
FP_MSKS_FLD
;

261 
	`__‚ldcw
(
_cw
, 
_√wcw
);

262 
	`__°mxc§
(&
_mxc§
);

264 
_mxc§
 &~
SSE_MSKS_FLD
;

265 
_mxc§
 |(~
_m
 << 
SSE_MSKS_OFF
Ë& 
SSE_MSKS_FLD
;

266 
	`__ldmxc§
(&
_mxc§
);

267  (
_p
);

268 
	}
}

270 
__ölöe
 
Â_ex˚±_t


271 
	$__Âgë°icky
()

273 
_ex
, 
_mxc§
;

274 
_sw
;

276 
	`__‚°sw
(&
_sw
);

277 
_ex
 = (
_sw
 & 
FP_STKY_FLD
Ë>> 
FP_STKY_OFF
;

278 
	`__°mxc§
(&
_mxc§
);

279 
_ex
 |(
_mxc§
 & 
SSE_STKY_FLD
Ë>> 
SSE_STKY_OFF
;

280  ((
Â_ex˚±_t
)
_ex
);

281 
	}
}

285 #i‡!
deföed
(
__IEEEFP_NOINLINES__
Ë&& deföed(
__GNUCLIKE_ASM
)

287 
	#Âgëmask
(Ë
	`__Âgëmask
()

	)

288 
	#Âgë¥ec
(Ë
	`__Âgë¥ec
()

	)

289 
	#Âgëround
(Ë
	`__Âgëround
()

	)

290 
	#Âgë°icky
(Ë
	`__Âgë°icky
()

	)

291 
	#Â£tmask
(
m
Ë
	`__Â£tmask
(m)

	)

292 
	#Â£çªc
(
m
Ë
	`__Â£çªc
(m)

	)

293 
	#Â£åound
(
m
Ë
	`__Â£åound
(m)

	)

298 
__BEGIN_DECLS


299 
Â_∫d_t
 
Âgëround
();

300 
Â_∫d_t
 
Â£åound
(fp_rnd_t);

301 
Â_ex˚±_t
 
Âgëmask
();

302 
Â_ex˚±_t
 
Â£tmask
(fp_except_t);

303 
Â_ex˚±_t
 
Âgë°icky
();

304 
Â_ex˚±_t
 
Â£t°icky
(fp_except_t);

305 
Â_¥ec_t
 
Âgë¥ec
();

306 
Â_¥ec_t
 
Â£çªc
(fp_prec_t);

307 
	g__END_DECLS


	@/usr/include/machine/intr_machdep.h

31 #i‚de‡
__MACHINE_INTR_MACHDEP_H__


32 
	#__MACHINE_INTR_MACHDEP_H__


	)

34 
	~<x86/öå_machdï.h
>

40 
	snmi_p˝u
 {

41 
ªgi°î_t
 
	m≈_p˝u
;

42 
ªgi°î_t
 
	m__∑ddög
;

	@/usr/include/machine/npx.h

6 
	~<x86/Âu.h
>

	@/usr/include/machine/pcb.h

39 #i‚de‡
_AMD64_PCB_H_


40 
	#_AMD64_PCB_H_


	)

45 
	~<machöe/Âu.h
>

46 
	~<machöe/£gmíts.h
>

48 #ifde‡
__amd64__


53 
	spcb
 {

54 
ªgi°î_t
 
	mpcb_r15
;

55 
ªgi°î_t
 
	mpcb_r14
;

56 
ªgi°î_t
 
	mpcb_r13
;

57 
ªgi°î_t
 
	mpcb_r12
;

58 
ªgi°î_t
 
	mpcb_rbp
;

59 
ªgi°î_t
 
	mpcb_r•
;

60 
ªgi°î_t
 
	mpcb_rbx
;

61 
ªgi°î_t
 
	mpcb_rù
;

62 
ªgi°î_t
 
	mpcb_fsba£
;

63 
ªgi°î_t
 
	mpcb_gsba£
;

64 
ªgi°î_t
 
	mpcb_kgsba£
;

65 
ªgi°î_t
 
	mpcb_¸0
;

66 
ªgi°î_t
 
	mpcb_¸2
;

67 
ªgi°î_t
 
	mpcb_¸3
;

68 
ªgi°î_t
 
	mpcb_¸4
;

69 
ªgi°î_t
 
	mpcb_dr0
;

70 
ªgi°î_t
 
	mpcb_dr1
;

71 
ªgi°î_t
 
	mpcb_dr2
;

72 
ªgi°î_t
 
	mpcb_dr3
;

73 
ªgi°î_t
 
	mpcb_dr6
;

74 
ªgi°î_t
 
	mpcb_dr7
;

76 
ªgi⁄_des¸ùt‹
 
	mpcb_gdt
;

77 
ªgi⁄_des¸ùt‹
 
	mpcb_idt
;

78 
ªgi⁄_des¸ùt‹
 
	mpcb_ldt
;

79 
uöt16_t
 
	mpcb_å
;

81 
u_öt
 
	mpcb_Êags
;

82 
	#PCB_FULL_IRET
 0x01

	)

83 
	#PCB_DBREGS
 0x02

	)

84 
	#PCB_KERNFPU
 0x04

	)

85 
	#PCB_FPUINITDONE
 0x08

	)

86 
	#PCB_USERFPUINITDONE
 0x10

	)

87 
	#PCB_32BIT
 0x40

	)

88 
	#PCB_FPUNOSAVE
 0x80

	)

90 
uöt16_t
 
	mpcb_öôül_Âucw
;

93 
ˇddr_t
 
	mpcb_⁄Áu…
;

95 
uöt64_t
 
	mpcb_ßved_u¸3
;

98 
amd64tss
 *
	mpcb_ts•
;

101 
ªgi°î_t
 
	mpcb_e„r
;

102 
ªgi°î_t
 
	mpcb_°¨
;

103 
ªgi°î_t
 
	mpcb_l°¨
;

104 
ªgi°î_t
 
	mpcb_c°¨
;

105 
ªgi°î_t
 
	mpcb_sfmask
;

107 
ßveÂu
 *
	mpcb_ßve
;

109 
uöt64_t
 
	mpcb_∑d
[5];

113 
	ssu•pcb
 {

114 
pcb
 
	m•_pcb
;

117 *
	m•_Âusu•íd
;

121 #ifde‡
_KERNEL


122 
	gå≠‰ame
;

124 
˛ór_pcb_Êags
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
);

125 
make˘x
(
å≠‰ame
 *, 
pcb
 *);

126 
£t_pcb_Êags
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
);

127 
£t_pcb_Êags_øw
(
pcb
 *pcb, c⁄° 
u_öt
 
Êags
);

128 
	$ßve˘x
(
pcb
 *Ë
__ªtu∫s_twi˚
;

129 
	`ªsume˘x
(
pcb
 *);

132 
	#upd©e_pcb_ba£s
(
pcb
Ë
	`£t_pcb_Êags
(’cb), 
PCB_FULL_IRET
)

	)

	@/usr/include/machine/psl.h

6 
	~<x86/p¶.h
>

	@/usr/include/machine/reg.h

6 
	~<x86/ªg.h
>

	@/usr/include/machine/resource.h

31 #i‚de‡
_MACHINE_RESOURCE_H_


32 
	#_MACHINE_RESOURCE_H_
 1

	)

39 
	#SYS_RES_IRQ
 1

	)

40 
	#SYS_RES_DRQ
 2

	)

41 
	#SYS_RES_MEMORY
 3

	)

42 
	#SYS_RES_IOPORT
 4

	)

43 #ifde‡
NEW_PCIB


44 
	#PCI_RES_BUS
 5

	)

	@/usr/include/machine/segments.h

39 #i‚de‡
_MACHINE_SEGMENTS_H_


40 
	#_MACHINE_SEGMENTS_H_


	)

46 
	~<x86/£gmíts.h
>

51 
	ssy°em_£gmít_des¸ùt‹
 {

52 
u_öt64_t
 
	msd_lﬁimô
:16;

53 
u_öt64_t
 
	msd_loba£
:24;

54 
u_öt64_t
 
	msd_ty≥
:5;

55 
u_öt64_t
 
	msd_d∂
:2;

56 
u_öt64_t
 
	msd_p
:1;

57 
u_öt64_t
 
	msd_hûimô
:4;

58 
u_öt64_t
 
	msd_xx0
:3;

59 
u_öt64_t
 
	msd_gøn
:1;

60 
u_öt64_t
 
	msd_hiba£
:40 
__∑cked
;

61 
u_öt64_t
 
	msd_xx1
:8;

62 
u_öt64_t
 
	msd_mbz
:5;

63 
u_öt64_t
 
	msd_xx2
:19;

64 } 
	g__∑cked
;

72 
	sso·_£gmít_des¸ùt‹
 {

73 
	mssd_ba£
;

74 
	mssd_limô
;

75 
	mssd_ty≥
:5;

76 
	mssd_d∂
:2;

77 
	mssd_p
:1;

78 
	mssd_l⁄g
:1;

79 
	mssd_def32
:1;

80 
	mssd_gøn
:1;

81 } 
	g__∑cked
;

86 
	sªgi⁄_des¸ùt‹
 {

87 
uöt64_t
 
	mrd_limô
:16;

88 
uöt64_t
 
	mrd_ba£
:64 
__∑cked
;

89 } 
	g__∑cked
;

91 #ifde‡
_KERNEL


92 
u£r_£gmít_des¸ùt‹
 
gdt
[];

93 
so·_£gmít_des¸ùt‹
 
gdt_£gs
[];

94 
g©e_des¸ùt‹
 *
idt
;

95 
ªgi⁄_des¸ùt‹
 
r_gdt
, 
r_idt
;

97 
lgdt
(
ªgi⁄_des¸ùt‹
 *
rdp
);

98 
sdtossd
(
u£r_£gmít_des¸ùt‹
 *
sdp
,

99 
so·_£gmít_des¸ùt‹
 *
ssdp
);

100 
ssdtosd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

101 
u£r_£gmít_des¸ùt‹
 *
sdp
);

102 
ssdtosyssd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

103 
sy°em_£gmít_des¸ùt‹
 *
sdp
);

104 
upd©e_gdt_gsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

105 
upd©e_gdt_fsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

	@/usr/include/machine/specialreg.h

6 
	~<x86/•ecüÃeg.h
>

	@/usr/include/machine/sysarch.h

6 
	~<x86/syßrch.h
>

	@/usr/include/machine/trap.h

6 
	~<x86/å≠.h
>

	@/usr/include/net/if.h

35 #i‚de‡
_NET_IF_H_


36 
	#_NET_IF_H_


	)

38 
	~<sys/cdefs.h
>

40 #i‡
__BSD_VISIBLE


46 #i‚de‡
_KERNEL


47 
	~<sys/time.h
>

48 
	~<sys/sockë.h
>

56 
	#IF_NAMESIZE
 16

	)

57 #i‡
__BSD_VISIBLE


58 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

59 
	#IF_MAXUNIT
 0x7ff‡

	)

61 #i‡
__BSD_VISIBLE


67 
	sif_˛⁄îeq
 {

68 
	mif¸_tŸÆ
;

69 
	mif¸_cou¡
;

70 *
	mif¸_buf„r
;

77 
	sif_d©a
 {

79 
uöt8_t
 
	mifi_ty≥
;

80 
uöt8_t
 
	mifi_physiˇl
;

81 
uöt8_t
 
	mifi_addæí
;

82 
uöt8_t
 
	mifi_hdæí
;

83 
uöt8_t
 
	mifi_lök_°©e
;

84 
uöt8_t
 
	mifi_vhid
;

85 
uöt16_t
 
	mifi_d©Æí
;

86 
uöt32_t
 
	mifi_mtu
;

87 
uöt32_t
 
	mifi_mëric
;

88 
uöt64_t
 
	mifi_baudøã
;

90 
uöt64_t
 
	mifi_ùackës
;

91 
uöt64_t
 
	mifi_õº‹s
;

92 
uöt64_t
 
	mifi_›ackës
;

93 
uöt64_t
 
	mifi_€º‹s
;

94 
uöt64_t
 
	mifi_cﬁlisi⁄s
;

95 
uöt64_t
 
	mifi_ibyãs
;

96 
uöt64_t
 
	mifi_obyãs
;

97 
uöt64_t
 
	mifi_imˇ°s
;

98 
uöt64_t
 
	mifi_omˇ°s
;

99 
uöt64_t
 
	mifi_iqdr›s
;

100 
uöt64_t
 
	mifi_oqdr›s
;

101 
uöt64_t
 
	mifi_n›rŸo
;

102 
uöt64_t
 
	mifi_hwassi°
;

106 
time_t
 
	mâ
;

107 
uöt64_t
 
	mph
;

108 } 
	m__ifi_ïoch
;

109 
	#ifi_ïoch
 
__ifi_ïoch
.
â


	)

111 
timevÆ
 
	mtv
;

113 
uöt64_t
 
	mph1
;

114 
uöt64_t
 
	mph2
;

115 } 
	mph
;

116 } 
	m__ifi_œ°ch™ge
;

117 
	#ifi_œ°ch™ge
 
__ifi_œ°ch™ge
.
tv


	)

142 
	#IFF_UP
 0x1

	)

143 
	#IFF_BROADCAST
 0x2

	)

144 
	#IFF_DEBUG
 0x4

	)

145 
	#IFF_LOOPBACK
 0x8

	)

146 
	#IFF_POINTOPOINT
 0x10

	)

148 
	#IFF_DRV_RUNNING
 0x40

	)

149 
	#IFF_NOARP
 0x80

	)

150 
	#IFF_PROMISC
 0x100

	)

151 
	#IFF_ALLMULTI
 0x200

	)

152 
	#IFF_DRV_OACTIVE
 0x400

	)

153 
	#IFF_SIMPLEX
 0x800

	)

154 
	#IFF_LINK0
 0x1000

	)

155 
	#IFF_LINK1
 0x2000

	)

156 
	#IFF_LINK2
 0x4000

	)

157 
	#IFF_ALTPHYS
 
IFF_LINK2


	)

158 
	#IFF_MULTICAST
 0x8000

	)

159 
	#IFF_CANTCONFIG
 0x10000

	)

160 
	#IFF_PPROMISC
 0x20000

	)

161 
	#IFF_MONITOR
 0x40000

	)

162 
	#IFF_STATICARP
 0x80000

	)

163 
	#IFF_DYING
 0x200000

	)

164 
	#IFF_RENAMING
 0x400000

	)

165 
	#IFF_NOGROUP
 0x800000

	)

172 #i‚de‡
_KERNEL


173 
	#IFF_RUNNING
 
IFF_DRV_RUNNING


	)

174 
	#IFF_OACTIVE
 
IFF_DRV_OACTIVE


	)

178 
	#IFF_CANTCHANGE
 \

179 (
IFF_BROADCAST
|
IFF_POINTOPOINT
|
IFF_DRV_RUNNING
|
IFF_DRV_OACTIVE
|\

180 
IFF_SIMPLEX
|
IFF_MULTICAST
|
IFF_ALLMULTI
|
IFF_PROMISC
|\

181 
IFF_DYING
|
IFF_CANTCONFIG
)

	)

186 
	#LINK_STATE_UNKNOWN
 0

	)

187 
	#LINK_STATE_DOWN
 1

	)

188 
	#LINK_STATE_UP
 2

	)

194 
	#IF_Kbps
(
x
Ë((
uötmax_t
)(xË* 1000Ë

	)

195 
	#IF_Mbps
(
x
Ë(
	`IF_Kbps
((xË* 1000)Ë

	)

196 
	#IF_Gbps
(
x
Ë(
	`IF_Mbps
((xË* 1000)Ë

	)

223 
	#IFCAP_RXCSUM
 0x00001

	)

224 
	#IFCAP_TXCSUM
 0x00002

	)

225 
	#IFCAP_NETCONS
 0x00004

	)

226 
	#IFCAP_VLAN_MTU
 0x00008

	)

227 
	#IFCAP_VLAN_HWTAGGING
 0x00010

	)

228 
	#IFCAP_JUMBO_MTU
 0x00020

	)

229 
	#IFCAP_POLLING
 0x00040

	)

230 
	#IFCAP_VLAN_HWCSUM
 0x00080

	)

231 
	#IFCAP_TSO4
 0x00100

	)

232 
	#IFCAP_TSO6
 0x00200

	)

233 
	#IFCAP_LRO
 0x00400

	)

234 
	#IFCAP_WOL_UCAST
 0x00800

	)

235 
	#IFCAP_WOL_MCAST
 0x01000

	)

236 
	#IFCAP_WOL_MAGIC
 0x02000

	)

237 
	#IFCAP_TOE4
 0x04000

	)

238 
	#IFCAP_TOE6
 0x08000

	)

239 
	#IFCAP_VLAN_HWFILTER
 0x10000

	)

241 
	#IFCAP_VLAN_HWTSO
 0x40000

	)

242 
	#IFCAP_LINKSTATE
 0x80000

	)

243 
	#IFCAP_NETMAP
 0x100000

	)

244 
	#IFCAP_RXCSUM_IPV6
 0x200000

	)

245 
	#IFCAP_TXCSUM_IPV6
 0x400000

	)

246 
	#IFCAP_HWSTATS
 0x800000

	)

247 
	#IFCAP_TXRTLMT
 0x1000000

	)

248 
	#IFCAP_HWRXTSTMP
 0x2000000

	)

250 
	#IFCAP_HWCSUM_IPV6
 (
IFCAP_RXCSUM_IPV6
 | 
IFCAP_TXCSUM_IPV6
)

	)

252 
	#IFCAP_HWCSUM
 (
IFCAP_RXCSUM
 | 
IFCAP_TXCSUM
)

	)

253 
	#IFCAP_TSO
 (
IFCAP_TSO4
 | 
IFCAP_TSO6
)

	)

254 
	#IFCAP_WOL
 (
IFCAP_WOL_UCAST
 | 
IFCAP_WOL_MCAST
 | 
IFCAP_WOL_MAGIC
)

	)

255 
	#IFCAP_TOE
 (
IFCAP_TOE4
 | 
IFCAP_TOE6
)

	)

257 
	#IFCAP_CANTCHANGE
 (
IFCAP_NETMAP
)

	)

259 
	#IFQ_MAXLEN
 50

	)

260 
	#IFNET_SLOWHZ
 1

	)

267 
	sif_msghdr
 {

268 
u_sh‹t
 
	mifm_msgÀn
;

269 
u_ch¨
 
	mifm_vîsi⁄
;

270 
u_ch¨
 
	mifm_ty≥
;

271 
	mifm_addrs
;

272 
	mifm_Êags
;

273 
u_sh‹t
 
	mifm_ödex
;

274 
u_sh‹t
 
	m_ifm_•¨e1
;

275 
if_d©a
 
	mifm_d©a
;

286 
	#IF_MSGHDRL_IFM_DATA
(
_l
) \

287 (
if_d©a
 *)((*)(
_l
Ë+ (_l)->
ifm_d©a_off
)

	)

288 
	#IF_MSGHDRL_RTA
(
_l
) \

289 (*)((
uöçå_t
)(
_l
Ë+ (_l)->
ifm_Àn
)

	)

290 
	sif_msghdæ
 {

291 
u_sh‹t
 
	mifm_msgÀn
;

292 
u_ch¨
 
	mifm_vîsi⁄
;

293 
u_ch¨
 
	mifm_ty≥
;

294 
	mifm_addrs
;

295 
	mifm_Êags
;

296 
u_sh‹t
 
	mifm_ödex
;

297 
u_sh‹t
 
	m_ifm_•¨e1
;

298 
u_sh‹t
 
	mifm_Àn
;

299 
u_sh‹t
 
	mifm_d©a_off
;

300 
	m_ifm_•¨e2
;

301 
if_d©a
 
	mifm_d©a
;

309 
	siÁ_msghdr
 {

310 
u_sh‹t
 
	miÁm_msgÀn
;

311 
u_ch¨
 
	miÁm_vîsi⁄
;

312 
u_ch¨
 
	miÁm_ty≥
;

313 
	miÁm_addrs
;

314 
	miÁm_Êags
;

315 
u_sh‹t
 
	miÁm_ödex
;

316 
u_sh‹t
 
	m_iÁm_•¨e1
;

317 
	miÁm_mëric
;

328 
	#IFA_MSGHDRL_IFAM_DATA
(
_l
) \

329 (
if_d©a
 *)((*)(
_l
Ë+ (_l)->
iÁm_d©a_off
)

	)

330 
	#IFA_MSGHDRL_RTA
(
_l
) \

331 (*)((
uöçå_t
)(
_l
Ë+ (_l)->
iÁm_Àn
)

	)

332 
	siÁ_msghdæ
 {

333 
u_sh‹t
 
	miÁm_msgÀn
;

334 
u_ch¨
 
	miÁm_vîsi⁄
;

335 
u_ch¨
 
	miÁm_ty≥
;

336 
	miÁm_addrs
;

337 
	miÁm_Êags
;

338 
u_sh‹t
 
	miÁm_ödex
;

339 
u_sh‹t
 
	m_iÁm_•¨e1
;

340 
u_sh‹t
 
	miÁm_Àn
;

341 
u_sh‹t
 
	miÁm_d©a_off
;

342 
	miÁm_mëric
;

343 
if_d©a
 
	miÁm_d©a
;

351 
	sifma_msghdr
 {

352 
u_sh‹t
 
	mifmam_msgÀn
;

353 
u_ch¨
 
	mifmam_vîsi⁄
;

354 
u_ch¨
 
	mifmam_ty≥
;

355 
	mifmam_addrs
;

356 
	mifmam_Êags
;

357 
u_sh‹t
 
	mifmam_ödex
;

358 
u_sh‹t
 
	m_ifmam_•¨e1
;

364 
	sif_™noun˚msghdr
 {

365 
u_sh‹t
 
	miÁn_msgÀn
;

366 
u_ch¨
 
	miÁn_vîsi⁄
;

367 
u_ch¨
 
	miÁn_ty≥
;

368 
u_sh‹t
 
	miÁn_ödex
;

369 
	miÁn_«me
[
IFNAMSIZ
];

370 
u_sh‹t
 
	miÁn_wh©
;

373 
	#IFAN_ARRIVAL
 0

	)

374 
	#IFAN_DEPARTURE
 1

	)

379 
	si‰eq_buf„r
 {

380 
size_t
 
	mÀngth
;

381 *
	mbuf„r
;

390 
	si‰eq
 {

391 
	mi‰_«me
[
IFNAMSIZ
];

393 
sockaddr
 
	mi‰u_addr
;

394 
sockaddr
 
	mi‰u_d°addr
;

395 
sockaddr
 
	mi‰u_brﬂdaddr
;

396 
i‰eq_buf„r
 
	mi‰u_buf„r
;

397 
	mi‰u_Êags
[2];

398 
	mi‰u_ödex
;

399 
	mi‰u_jid
;

400 
	mi‰u_mëric
;

401 
	mi‰u_mtu
;

402 
	mi‰u_phys
;

403 
	mi‰u_medü
;

404 
ˇddr_t
 
	mi‰u_d©a
;

405 
	mi‰u_ˇp
[2];

406 
u_öt
 
	mi‰u_fib
;

407 
u_ch¨
 
	mi‰u_vœn_p˝
;

408 } 
	mi‰_i‰u
;

409 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

410 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

411 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

412 #i‚de‡
_KERNEL


413 
	#i‰_buf„r
 
i‰_i‰u
.
i‰u_buf„r


	)

415 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags
[0]

	)

416 
	#i‰_Êagshigh
 
i‰_i‰u
.
i‰u_Êags
[1]

	)

417 
	#i‰_jid
 
i‰_i‰u
.
i‰u_jid


	)

418 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_mëric


	)

419 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

420 
	#i‰_phys
 
i‰_i‰u
.
i‰u_phys


	)

421 
	#i‰_medü
 
i‰_i‰u
.
i‰u_medü


	)

422 #i‚de‡
_KERNEL


423 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

425 
	#i‰_ªqˇp
 
i‰_i‰u
.
i‰u_ˇp
[0]

	)

426 
	#i‰_curˇp
 
i‰_i‰u
.
i‰u_ˇp
[1]

	)

427 
	#i‰_ödex
 
i‰_i‰u
.
i‰u_ödex


	)

428 
	#i‰_fib
 
i‰_i‰u
.
i‰u_fib


	)

429 
	#i‰_vœn_p˝
 
i‰_i‰u
.
i‰u_vœn_p˝


	)

430 
	#i‰_œn_p˝
 
i‰_i‰u
.
i‰u_vœn_p˝


	)

433 
	#_SIZEOF_ADDR_IFREQ
(
i‰
) \

434 ((
i‰
).
i‰_addr
.
ß_Àn
 > (
sockaddr
) ? \

435 ((
i‰eq
Ë- (
sockaddr
) + \

436 (
i‰
).
i‰_addr
.
ß_Àn
Ë: (
i‰eq
))

	)

438 
	siÁlü§eq
 {

439 
	mi‰a_«me
[
IFNAMSIZ
];

440 
sockaddr
 
	mi‰a_addr
;

441 
sockaddr
 
	mi‰a_brﬂdaddr
;

442 
sockaddr
 
	mi‰a_mask
;

443 
	mi‰a_vhid
;

447 
	soiÁlü§eq
 {

448 
	mi‰a_«me
[
IFNAMSIZ
];

449 
sockaddr
 
	mi‰a_addr
;

450 
sockaddr
 
	mi‰a_brﬂdaddr
;

451 
sockaddr
 
	mi‰a_mask
;

454 
	sifmedüªq
 {

455 
	mifm_«me
[
IFNAMSIZ
];

456 
	mifm_cuºít
;

457 
	mifm_mask
;

458 
	mifm_°©us
;

459 
	mifm_a˘ive
;

460 
	mifm_cou¡
;

461 *
	mifm_uli°
;

464 
	sifdrv
 {

465 
	mifd_«me
[
IFNAMSIZ
];

466 
	mifd_cmd
;

467 
size_t
 
	mifd_Àn
;

468 *
	mifd_d©a
;

478 
	#IFSTATMAX
 800

	)

479 
	sif°©
 {

480 
	mifs_«me
[
IFNAMSIZ
];

481 
	mascii
[
IFSTATMAX
 + 1];

490 
	sifc⁄f
 {

491 
	mifc_Àn
;

493 
ˇddr_t
 
	mifcu_buf
;

494 
i‰eq
 *
	mifcu_ªq
;

495 } 
	mifc_ifcu
;

496 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

497 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

504 
	#IFG_ALL
 "Æl"

	)

506 
	#IFG_EGRESS
 "egªss"

	)

508 
	sifg_ªq
 {

510 
	mifgrqu_group
[
IFNAMSIZ
];

511 
	mifgrqu_membî
[
IFNAMSIZ
];

512 } 
	mifgrq_ifgrqu
;

513 
	#ifgrq_group
 
ifgrq_ifgrqu
.
ifgrqu_group


	)

514 
	#ifgrq_membî
 
ifgrq_ifgrqu
.
ifgrqu_membî


	)

520 
	sifgrou¥eq
 {

521 
	mifgr_«me
[
IFNAMSIZ
];

522 
u_öt
 
	mifgr_Àn
;

524 
	mifgru_group
[
IFNAMSIZ
];

525 
ifg_ªq
 *
	mifgru_groups
;

526 } 
	mifgr_ifgru
;

527 #i‚de‡
_KERNEL


528 
	#ifgr_group
 
ifgr_ifgru
.
ifgru_group


	)

529 
	#ifgr_groups
 
ifgr_ifgru
.
ifgru_groups


	)

537 
	sifi2¸eq
 {

538 
uöt8_t
 
	mdev_addr
;

539 
uöt8_t
 
	moff£t
;

540 
uöt8_t
 
	mÀn
;

541 
uöt8_t
 
	m•¨e0
;

542 
uöt32_t
 
	m•¨e1
;

543 
uöt8_t
 
	md©a
[8];

550 
	#RSS_FUNC_NONE
 0

	)

551 
	#RSS_FUNC_PRIVATE
 1

	)

552 
	#RSS_FUNC_TOEPLITZ
 2

	)

554 
	#RSS_TYPE_IPV4
 0x00000001

	)

555 
	#RSS_TYPE_TCP_IPV4
 0x00000002

	)

556 
	#RSS_TYPE_IPV6
 0x00000004

	)

557 
	#RSS_TYPE_IPV6_EX
 0x00000008

	)

558 
	#RSS_TYPE_TCP_IPV6
 0x00000010

	)

559 
	#RSS_TYPE_TCP_IPV6_EX
 0x00000020

	)

560 
	#RSS_TYPE_UDP_IPV4
 0x00000040

	)

561 
	#RSS_TYPE_UDP_IPV6
 0x00000080

	)

562 
	#RSS_TYPE_UDP_IPV6_EX
 0x00000100

	)

564 
	#RSS_KEYLEN
 128

	)

566 
	si‰sskey
 {

567 
	mi‰k_«me
[
IFNAMSIZ
];

568 
uöt8_t
 
	mi‰k_func
;

569 
uöt8_t
 
	mi‰k_•¨e0
;

570 
uöt16_t
 
	mi‰k_keyÀn
;

571 
uöt8_t
 
	mi‰k_key
[
RSS_KEYLEN
];

574 
	si‰sshash
 {

575 
	mi‰h_«me
[
IFNAMSIZ
];

576 
uöt8_t
 
	mi‰h_func
;

577 
uöt8_t
 
	mi‰h_•¨e0
;

578 
uöt16_t
 
	mi‰h_•¨e1
;

579 
uöt32_t
 
	mi‰h_ty≥s
;

582 
	#IFNET_PCP_NONE
 0xf‡

	)

586 #ifde‡
_KERNEL


587 #ifde‡
MALLOC_DECLARE


588 
MALLOC_DECLARE
(
M_IFADDR
);

589 
MALLOC_DECLARE
(
M_IFMADDR
);

593 #i‚de‡
_KERNEL


594 
	sif_«meödex
 {

595 
	mif_ödex
;

596 *
	mif_«me
;

599 
__BEGIN_DECLS


600 
if_‰ì«meödex
(
if_«meödex
 *);

601 *
if_ödext⁄ame
(, *);

602 
if_«meödex
 *if_nameindex();

603 
if_«mëoödex
(const *);

604 
	g__END_DECLS


	@/usr/include/net/if_var.h

35 #i‚def 
_NET_IF_VAR_H_


36 
	#_NET_IF_VAR_H_


	)

63 
	gπíåy
;

64 
	gπ_addröfo
;

65 
	gsockë
;

66 
	gˇΩ_if
;

67 
	gˇΩ_so·c
;

68 
	gifvœ¡runk
;

69 
	grouã
;

70 
	gv√t
;

71 
	gifmedü
;

72 
	g√tm≠_ad≠ãr
;

73 
	g√tdump_mëhods
;

75 #ifde‡
_KERNEL


76 
	~<sys/mbuf.h
>

77 
	~<sys/buf_rög.h
>

78 
	~<√t/v√t.h
>

80 
	~<sys/ck.h
>

81 
	~<sys/cou¡î.h
>

82 
	~<sys/ïoch.h
>

83 
	~<sys/lock.h
>

84 
	~<sys/muãx.h
>

85 
	~<sys/rwlock.h
>

86 
	~<sys/sx.h
>

87 
	~<sys/_èsk.h
>

88 
	#IF_DUNIT_NONE
 -1

	)

90 
	~<√t/Ætq/if_Ætq.h
>

92 
CK_STAILQ_HEAD
(
i‚ëhód
, 
i‚ë
);

93 
CK_STAILQ_HEAD
(
iÁddrhód
, 
iÁddr
);

94 
CK_STAILQ_HEAD
(
ifmu…ihód
, 
ifmu…üddr
);

95 
CK_STAILQ_HEAD
(
ifgrouphód
, 
ifg_group
);

97 #ifde‡
_KERNEL


98 
VNET_DECLARE
(
pfû_hód
, 
lök_pfû_hook
);

99 
	#V_lök_pfû_hook
 
	`VNET
(
lök_pfû_hook
)

	)

101 
	#HHOOK_IPSEC_INET
 0

	)

102 
	#HHOOK_IPSEC_INET6
 1

	)

103 
	#HHOOK_IPSEC_COUNT
 2

	)

104 
VNET_DECLARE
(
hhook_hód
 *, 
ù£c_hhh_ö
[
HHOOK_IPSEC_COUNT
]);

105 
VNET_DECLARE
(
hhook_hód
 *, 
ù£c_hhh_out
[
HHOOK_IPSEC_COUNT
]);

106 
	#V_ù£c_hhh_ö
 
	`VNET
(
ù£c_hhh_ö
)

	)

107 
	#V_ù£c_hhh_out
 
	`VNET
(
ù£c_hhh_out
)

	)

108 
ïoch_t
 
√t_ïoch_¥ìm±
;

109 
ïoch_t
 
√t_ïoch
;

113 
	mIFCOUNTER_IPACKETS
 = 0,

114 
	mIFCOUNTER_IERRORS
,

115 
	mIFCOUNTER_OPACKETS
,

116 
	mIFCOUNTER_OERRORS
,

117 
	mIFCOUNTER_COLLISIONS
,

118 
	mIFCOUNTER_IBYTES
,

119 
	mIFCOUNTER_OBYTES
,

120 
	mIFCOUNTER_IMCASTS
,

121 
	mIFCOUNTER_OMCASTS
,

122 
	mIFCOUNTER_IQDROPS
,

123 
	mIFCOUNTER_OQDROPS
,

124 
	mIFCOUNTER_NOPROTO
,

125 
	mIFCOUNTERS


126 } 
	ti·_cou¡î
;

128 
i‚ë
 * 
	tif_t
;

130 (*
	tif_°¨t_‚_t
)(
	tif_t
);

131 (*
	tif_io˘l_‚_t
)(
	tif_t
, 
	tu_l⁄g
, 
	tˇddr_t
);

132 (*
	tif_öô_‚_t
)(*);

133 (*
	tif_qÊush_‚_t
)(
	tif_t
);

134 (*
	tif_å™smô_‚_t
)(
	tif_t
, 
	tmbuf
 *);

135 
	$uöt64_t
 (*
	tif_gë_cou¡î_t
)(
	tif_t
, 
	ti·_cou¡î
);

137 
	si‚ë_hw_tsomax
 {

138 
u_öt
 
tsomaxbyãs
;

139 
u_öt
 
tsomax£gcou¡
;

140 
u_öt
 
tsomax£gsize
;

145 
IFENCAP_LL
 = 1

146 } 
	ti„_ty≥
;

170 
	sif_íˇp_ªq
 {

171 
u_ch¨
 *
buf
;

172 
size_t
 
bufsize
;

173 
i„_ty≥
 
πy≥
;

174 
uöt32_t
 
Êags
;

175 
Ámûy
;

176 
Œaddr_off
;

177 
Œaddr_Àn
;

178 *
Œaddr
;

179 *
hd©a
;

182 
	#IFENCAP_FLAG_BROADCAST
 0x02

	)

189 
m_¢d_èg
;

191 
	#IF_SND_TAG_TYPE_RATE_LIMIT
 0

	)

192 
	#IF_SND_TAG_TYPE_UNLIMITED
 1

	)

193 
	#IF_SND_TAG_TYPE_MAX
 2

	)

195 
	sif_¢d_èg_Æloc_hódî
 {

196 
uöt32_t
 
ty≥
;

197 
uöt32_t
 
Êowid
;

198 
uöt32_t
 
Êowty≥
;

201 
	sif_¢d_èg_Æloc_øã_limô
 {

202 
if_¢d_èg_Æloc_hódî
 
hdr
;

203 
uöt64_t
 
max_øã
;

206 
	sif_¢d_èg_øã_limô_∑øms
 {

207 
uöt64_t
 
max_øã
;

208 
uöt32_t
 
queue_Àvñ
;

209 
	#IF_SND_QUEUE_LEVEL_MIN
 0

	)

210 
	#IF_SND_QUEUE_LEVEL_MAX
 65535

	)

211 
uöt32_t
 
ª£rved
;

214 
	uif_¢d_èg_Æloc_∑øms
 {

215 
if_¢d_èg_Æloc_hódî
 
hdr
;

216 
if_¢d_èg_Æloc_øã_limô
 
øã_limô
;

217 
if_¢d_èg_Æloc_øã_limô
 
u∆imôed
;

220 
	uif_¢d_èg_modify_∑øms
 {

221 
if_¢d_èg_øã_limô_∑øms
 
øã_limô
;

222 
if_¢d_èg_øã_limô_∑øms
 
u∆imôed
;

225 
	uif_¢d_èg_quîy_∑øms
 {

226 
if_¢d_èg_øã_limô_∑øms
 
øã_limô
;

227 
if_¢d_èg_øã_limô_∑øms
 
u∆imôed
;

230 (
	tif_¢d_èg_Æloc_t
)(
	ti‚ë
 *, 
	tif_¢d_èg_Æloc_∑øms
 *,

231 
	tm_¢d_èg
 **);

232 (
	tif_¢d_èg_modify_t
)(
	tm_¢d_èg
 *, 
	tif_¢d_èg_modify_∑øms
 *);

233 (
	tif_¢d_èg_quîy_t
)(
	tm_¢d_èg
 *, 
	tif_¢d_èg_quîy_∑øms
 *);

234 (
	tif_¢d_èg_‰ì_t
)(
	tm_¢d_èg
 *);

239 
	si‚ë
 {

241 
	`CK_STAILQ_ENTRY
(
i‚ë
Ë
if_lök
;

242 
	`LIST_ENTRY
(
i‚ë
Ë
if_˛⁄es
;

243 
	`CK_STAILQ_HEAD
(, 
ifg_li°
Ë
if_groups
;

245 
u_ch¨
 
if_Ælo˘y≥
;

248 *
if_so·c
;

249 *
if_Œso·c
;

250 *
if_l2com
;

251 c⁄° *
if_d«me
;

252 
if_dunô
;

253 
u_sh‹t
 
if_ödex
;

254 
if_ödex_ª£rved
;

255 
if_x«me
[
IFNAMSIZ
];

256 *
if_des¸ùti⁄
;

259 
if_Êags
;

260 
if_drv_Êags
;

261 
if_ˇ∑bûôõs
;

262 
if_ˇ≥«bÀ
;

263 *
if_lökmib
;

264 
size_t
 
if_lökmibÀn
;

265 
u_öt
 
if_ªfcou¡
;

268 
uöt8_t
 
if_ty≥
;

269 
uöt8_t
 
if_addæí
;

270 
uöt8_t
 
if_hdæí
;

271 
uöt8_t
 
if_lök_°©e
;

272 
uöt32_t
 
if_mtu
;

273 
uöt32_t
 
if_mëric
;

274 
uöt64_t
 
if_baudøã
;

275 
uöt64_t
 
if_hwassi°
;

276 
time_t
 
if_ïoch
;

277 
timevÆ
 
if_œ°ch™ge
;

279 
iÁ…q
 
if_¢d
;

280 
èsk
 
if_lökèsk
;

283 
mtx
 
if_addr_lock
;

294 
iÁddrhód
 
if_addrhód
;

295 
ifmu…ihód
 
if_mu…üddrs
;

296 
if_amcou¡
;

297 
iÁddr
 *
if_addr
;

298 *
if_hw_addr
;

299 c⁄° 
u_öt8_t
 *
if_brﬂdˇ°addr
;

300 
mtx
 
if_afd©a_lock
;

301 *
if_afd©a
[
AF_MAX
];

302 
if_afd©a_öôülized
;

305 
u_öt
 
if_fib
;

306 
v√t
 *
if_v√t
;

307 
v√t
 *
if_home_v√t
;

308 
ifvœ¡runk
 *
if_vœ¡runk
;

309 
bpf_if
 *
if_bpf
;

310 
if_pcou¡
;

311 *
if_bridge
;

312 *
if_œgg
;

313 *
if_pf_kif
;

314 
ˇΩ_if
 *
if_ˇΩ
;

315 
œbñ
 *
if_œbñ
;

316 
√tm≠_ad≠ãr
 *
if_√tm≠
;

319 (*
if_ouçut
)

320 (
i‚ë
 *, 
mbuf
 *, c⁄° 
sockaddr
 *,

321 
rouã
 *);

322 (*
if_öput
)

323 (
i‚ë
 *, 
mbuf
 *);

324 
mbuf
 *(*
if_bridge_öput
)(
i‚ë
 *, mbuf *);

325 (*
if_bridge_ouçut
)(
i‚ë
 *, 
mbuf
 *, 
sockaddr
 *,

326 
πíåy
 *);

327 (*
if_bridge_lök°©e
)(
i‚ë
 *
iÂ
);

328 
if_°¨t_‚_t
 
if_°¨t
;

329 
if_io˘l_‚_t
 
if_io˘l
;

330 
if_öô_‚_t
 
if_öô
;

331 (*
if_ªsﬁvemu…i
)

332 (
i‚ë
 *, 
sockaddr
 **, sockaddr *);

333 
if_qÊush_‚_t
 
if_qÊush
;

334 
if_å™smô_‚_t
 
if_å™smô
;

336 (*
if_ªassign
)

337 (
i‚ë
 *, 
v√t
 *, *);

338 
if_gë_cou¡î_t
 
if_gë_cou¡î
;

339 (*
if_ªque°íˇp
)

340 (
i‚ë
 *, 
if_íˇp_ªq
 *);

343 
cou¡î_u64_t
 
if_cou¡îs
[
IFCOUNTERS
];

364 
u_öt
 
if_hw_tsomax
;

365 
u_öt
 
if_hw_tsomax£gcou¡
;

366 
u_öt
 
if_hw_tsomax£gsize
;

371 
if_¢d_èg_Æloc_t
 *
if_¢d_èg_Æloc
;

372 
if_¢d_èg_modify_t
 *
if_¢d_èg_modify
;

373 
if_¢d_èg_quîy_t
 *
if_¢d_èg_quîy
;

374 
if_¢d_èg_‰ì_t
 *
if_¢d_èg_‰ì
;

377 
uöt8_t
 
if_p˝
;

382 
√tdump_mëhods
 *
if_√tdump_mëhods
;

383 
ïoch_c⁄ãxt
 
if_ïoch_˘x
;

384 
ïoch_åackî
 
if_addr_ë
;

385 
ïoch_åackî
 
if_maddr_ë
;

392 
if_i•¨e
[4];

396 
	#if_«me
(
iÂ
Ë((iÂ)->
if_x«me
)

	)

401 
	#IF_ADDR_LOCK_INIT
(Ë
	`mtx_öô
(&()->
if_addr_lock
, "if_addr_lock", 
NULL
, 
MTX_DEF
)

	)

402 
	#IF_ADDR_LOCK_DESTROY
(Ë
	`mtx_de°roy
(&()->
if_addr_lock
)

	)

403 
	#IF_ADDR_RLOCK
(Ë
ïoch_åackî
 
if_addr_ë
; 
	`ïoch_íãr_¥ìm±
(
√t_ïoch_¥ìm±
, &if_addr_ë);

	)

404 
	#IF_ADDR_RUNLOCK
(Ë
	`ïoch_exô_¥ìm±
(
√t_ïoch_¥ìm±
, &
if_addr_ë
);

	)

406 
	#IF_ADDR_WLOCK
(Ë
	`mtx_lock
(&()->
if_addr_lock
)

	)

407 
	#IF_ADDR_WUNLOCK
(Ë
	`mtx_u∆ock
(&()->
if_addr_lock
)

	)

408 
	#IF_ADDR_LOCK_ASSERT
(Ë
	`MPASS
(
	`ö_ïoch
(
√t_ïoch_¥ìm±
Ë|| 
	`mtx_ow√d
(&()->
if_addr_lock
))

	)

409 
	#IF_ADDR_WLOCK_ASSERT
(Ë
	`mtx_as£π
(&()->
if_addr_lock
, 
MA_OWNED
)

	)

410 
	#NET_EPOCH_ENTER
(Ë
ïoch_åackî
 
√p_ë
; 
	`ïoch_íãr_¥ìm±
(
√t_ïoch_¥ìm±
, &√p_ë)

	)

411 
	#NET_EPOCH_ENTER_ET
(
ë
Ë
	`ïoch_íãr_¥ìm±
(
√t_ïoch_¥ìm±
, &”t))

	)

412 
	#NET_EPOCH_EXIT
(Ë
	`ïoch_exô_¥ìm±
(
√t_ïoch_¥ìm±
, &
√p_ë
)

	)

413 
	#NET_EPOCH_EXIT_ET
(
ë
Ë
	`ïoch_exô_¥ìm±
(
√t_ïoch_¥ìm±
, &”t))

	)

414 
	#NET_EPOCH_WAIT
(Ë
	`ïoch_waô_¥ìm±
(
√t_ïoch_¥ìm±
)

	)

422 
	`if_addr_æock
(
i‚ë
 *
iÂ
);

423 
	`if_addr_ru∆ock
(
i‚ë
 *
iÂ
);

424 
	`if_maddr_æock
(
if_t
 
iÂ
);

425 
	`if_maddr_ru∆ock
(
if_t
 
iÂ
);

427 #ifde‡
_KERNEL


428 #ifde‡
_SYS_EVENTHANDLER_H_


430 (*
	tiÊœddr_evít_h™dÀr_t
)(*, 
	ti‚ë
 *);

431 
	`EVENTHANDLER_DECLARE
(
iÊœddr_evít
, 
iÊœddr_evít_h™dÀr_t
);

433 (*
	tiÁddr_evít_h™dÀr_t
)(*, 
	ti‚ë
 *);

434 
	`EVENTHANDLER_DECLARE
(
iÁddr_evít
, 
iÁddr_evít_h™dÀr_t
);

436 (*
	ti‚ë_¨rivÆ_evít_h™dÀr_t
)(*, 
	ti‚ë
 *);

437 
	`EVENTHANDLER_DECLARE
(
i‚ë_¨rivÆ_evít
, 
i‚ë_¨rivÆ_evít_h™dÀr_t
);

439 (*
	ti‚ë_dï¨tuª_evít_h™dÀr_t
)(*, 
	ti‚ë
 *);

440 
	`EVENTHANDLER_DECLARE
(
i‚ë_dï¨tuª_evít
, 
i‚ë_dï¨tuª_evít_h™dÀr_t
);

442 (*
	ti‚ë_lök_evít_h™dÀr_t
)(*, 
	ti‚ë
 *, );

443 
	`EVENTHANDLER_DECLARE
(
i‚ë_lök_evít
, 
i‚ë_lök_evít_h™dÀr_t
);

445 
	#IFNET_EVENT_UP
 0

	)

446 
	#IFNET_EVENT_DOWN
 1

	)

447 
	#IFNET_EVENT_PCP
 2

	)

449 (*
	ti‚ë_evít_‚
)(*, 
	ti‚ë
 *
	tiÂ
, 
	tevít
);

450 
	`EVENTHANDLER_DECLARE
(
i‚ë_evít
, 
i‚ë_evít_‚
);

456 
	sifg_group
 {

457 
ifg_group
[
IFNAMSIZ
];

458 
u_öt
 
ifg_ªf˙t
;

459 *
ifg_pf_kif
;

460 
	`CK_STAILQ_HEAD
(, 
ifg_membî
Ë
ifg_membîs
;

461 
	`CK_STAILQ_ENTRY
(
ifg_group
Ë
ifg_√xt
;

464 
	sifg_membî
 {

465 
	`CK_STAILQ_ENTRY
(
ifg_membî
Ë
ifgm_√xt
;

466 
i‚ë
 *
ifgm_iÂ
;

469 
	sifg_li°
 {

470 
ifg_group
 *
ifgl_group
;

471 
	`CK_STAILQ_ENTRY
(
ifg_li°
Ë
ifgl_√xt
;

474 #ifde‡
_SYS_EVENTHANDLER_H_


476 (*
	tgroup_©èch_evít_h™dÀr_t
)(*, 
	tifg_group
 *);

477 
	`EVENTHANDLER_DECLARE
(
group_©èch_evít
, 
group_©èch_evít_h™dÀr_t
);

479 (*
	tgroup_dëach_evít_h™dÀr_t
)(*, 
	tifg_group
 *);

480 
	`EVENTHANDLER_DECLARE
(
group_dëach_evít
, 
group_dëach_evít_h™dÀr_t
);

482 (*
	tgroup_ch™ge_evít_h™dÀr_t
)(*, const *);

483 
	`EVENTHANDLER_DECLARE
(
group_ch™ge_evít
, 
group_ch™ge_evít_h™dÀr_t
);

486 
	#IF_AFDATA_LOCK_INIT
(
iÂ
) \

487 
	`mtx_öô
(&(
iÂ
)->
if_afd©a_lock
, "if_afd©a", 
NULL
, 
MTX_DEF
)

	)

489 
	#IF_AFDATA_WLOCK
(
iÂ
Ë
	`mtx_lock
(&(iÂ)->
if_afd©a_lock
)

	)

490 
	#IF_AFDATA_RLOCK
(
iÂ
Ë
ïoch_åackî
 
if_afd©a_ë
; 
	`ïoch_íãr_¥ìm±
(
√t_ïoch_¥ìm±
, &if_afd©a_ë)

	)

491 
	#IF_AFDATA_WUNLOCK
(
iÂ
Ë
	`mtx_u∆ock
(&(iÂ)->
if_afd©a_lock
)

	)

492 
	#IF_AFDATA_RUNLOCK
(
iÂ
Ë
	`ïoch_exô_¥ìm±
(
√t_ïoch_¥ìm±
, &
if_afd©a_ë
)

	)

493 
	#IF_AFDATA_LOCK
(
iÂ
Ë
	`IF_AFDATA_WLOCK
(iÂ)

	)

494 
	#IF_AFDATA_UNLOCK
(
iÂ
Ë
	`IF_AFDATA_WUNLOCK
(iÂ)

	)

495 
	#IF_AFDATA_TRYLOCK
(
iÂ
Ë
	`mtx_åylock
(&(iÂ)->
if_afd©a_lock
)

	)

496 
	#IF_AFDATA_DESTROY
(
iÂ
Ë
	`mtx_de°roy
(&(iÂ)->
if_afd©a_lock
)

	)

498 
	#IF_AFDATA_LOCK_ASSERT
(
iÂ
Ë
	`MPASS
(
	`ö_ïoch
(
√t_ïoch_¥ìm±
Ë|| 
	`mtx_ow√d
(&(iÂ)->
if_afd©a_lock
))

	)

499 
	#IF_AFDATA_RLOCK_ASSERT
(
iÂ
Ë
	`MPASS
(
	`ö_ïoch
(
√t_ïoch_¥ìm±
));

	)

500 
	#IF_AFDATA_WLOCK_ASSERT
(
iÂ
Ë
	`mtx_as£π
(&(iÂ)->
if_afd©a_lock
, 
MA_OWNED
)

	)

501 
	#IF_AFDATA_UNLOCK_ASSERT
(
iÂ
Ë
	`mtx_as£π
(&(iÂ)->
if_afd©a_lock
, 
MA_NOTOWNED
)

	)

507 
	#IF_MINMTU
 72

	)

508 
	#IF_MAXMTU
 65535

	)

510 
	#TOEDEV
(
iÂ
Ë((iÂ)->
if_Œso·c
)

	)

522 
	siÁddr
 {

523 
sockaddr
 *
iÁ_addr
;

524 
sockaddr
 *
iÁ_d°addr
;

525 
	#iÁ_brﬂdaddr
 
iÁ_d°addr


	)

526 
sockaddr
 *
iÁ_√tmask
;

527 
i‚ë
 *
iÁ_iÂ
;

528 
ˇΩ_so·c
 *
iÁ_ˇΩ
;

529 
	`CK_STAILQ_ENTRY
(
iÁddr
Ë
iÁ_lök
;

530 (*
iÁ_πªque°
)

531 (, 
πíåy
 *, 
π_addröfo
 *);

532 
u_sh‹t
 
iÁ_Êags
;

533 
	#IFA_ROUTE
 
RTF_UP


	)

534 
	#IFA_RTSELF
 
RTF_HOST


	)

535 
u_öt
 
iÁ_ªf˙t
;

537 
cou¡î_u64_t
 
iÁ_ùackës
;

538 
cou¡î_u64_t
 
iÁ_›ackës
;

539 
cou¡î_u64_t
 
iÁ_ibyãs
;

540 
cou¡î_u64_t
 
iÁ_obyãs
;

541 
ïoch_c⁄ãxt
 
iÁ_ïoch_˘x
;

544 
iÁddr
 * 
	`iÁ_Æloc
(
size_t
 
size
, 
Êags
);

545 
	`iÁ_‰ì
(
iÁddr
 *
iÁ
);

546 
	`iÁ_ªf
(
iÁddr
 *
iÁ
);

552 
	#IFMA_F_ENQUEUED
 0x1

	)

553 
	sifmu…üddr
 {

554 
	`CK_STAILQ_ENTRY
(
ifmu…üddr
Ë
ifma_lök
;

555 
sockaddr
 *
ifma_addr
;

556 
sockaddr
 *
ifma_Œaddr
;

557 
i‚ë
 *
ifma_iÂ
;

558 
u_öt
 
ifma_ªfcou¡
;

559 
ifma_Êags
;

560 *
ifma_¥Ÿo•ec
;

561 
ifmu…üddr
 *
ifma_Œifma
;

562 
ïoch_c⁄ãxt
 
ifma_ïoch_˘x
;

565 
rwlock
 
i‚ë_rwlock
;

566 
sx
 
i‚ë_sxlock
;

568 
	#IFNET_WLOCK
() do { \

569 
	`sx_xlock
(&
i‚ë_sxlock
); \

570 
	`rw_wlock
(&
i‚ë_rwlock
); \

571 
	}
} 0)

	)

573 
	#IFNET_WUNLOCK
() do { \

574 
	`rw_wu∆ock
(&
i‚ë_rwlock
); \

575 
	`sx_xu∆ock
(&
i‚ë_sxlock
); \

576 } 0)

	)

582 
	#IFNET_RLOCK_ASSERT
(Ë
	`sx_as£π
(&
i‚ë_sxlock
, 
SA_SLOCKED
)

	)

583 
	#IFNET_RLOCK_NOSLEEP_ASSERT
(Ë
	`MPASS
(
	`ö_ïoch
(
√t_ïoch_¥ìm±
))

	)

584 
	#IFNET_WLOCK_ASSERT
() do { \

585 
	`sx_as£π
(&
i‚ë_sxlock
, 
SA_XLOCKED
); \

586 
	`rw_as£π
(&
i‚ë_rwlock
, 
RA_WLOCKED
); \

587 } 0)

	)

589 
	#IFNET_RLOCK
(Ë
	`sx_¶ock
(&
i‚ë_sxlock
)

	)

590 
	#IFNET_RLOCK_NOSLEEP
(Ë
ïoch_åackî
 
i‚ë_æock_ë
; 
	`ïoch_íãr_¥ìm±
(
√t_ïoch_¥ìm±
, &i‚ë_æock_ë)

	)

591 
	#IFNET_RUNLOCK
(Ë
	`sx_su∆ock
(&
i‚ë_sxlock
)

	)

592 
	#IFNET_RUNLOCK_NOSLEEP
(Ë
	`ïoch_exô_¥ìm±
(
√t_ïoch_¥ìm±
, &
i‚ë_æock_ë
)

	)

599 
i‚ë
 *
i‚ë_byödex
(
u_sh‹t
 
idx
);

600 
i‚ë
 *
i‚ë_byödex_locked
(
u_sh‹t
 
idx
);

601 
i‚ë
 *
i‚ë_byödex_ªf
(
u_sh‹t
 
idx
);

608 
iÁddr
 *
iÁddr_byödex
(
u_sh‹t
 
idx
);

610 
VNET_DECLARE
(
i‚ëhód
, 
i‚ë
);

611 
VNET_DECLARE
(
ifgrouphód
, 
ifg_hód
);

612 
VNET_DECLARE
(, 
if_ödex
);

613 
VNET_DECLARE
(
i‚ë
 *, 
loif
);

615 
	#V_i‚ë
 
	`VNET
(
i‚ë
)

	)

616 
	#V_ifg_hód
 
	`VNET
(
ifg_hód
)

	)

617 
	#V_if_ödex
 
	`VNET
(
if_ödex
)

	)

618 
	#V_loif
 
	`VNET
(
loif
)

	)

620 #ifde‡
MCAST_VERBOSE


621 
	#MCDPRINTF
 
¥ötf


	)

623 
	#MCDPRINTF
(...)

	)

626 
if_addgroup
(
i‚ë
 *, const *);

627 
if_dñgroup
(
i‚ë
 *, const *);

628 
if_addmu…i
(
i‚ë
 *, 
sockaddr
 *, 
ifmu…üddr
 **);

629 
if_Ælmu…i
(
i‚ë
 *, );

630 
i‚ë
* 
if_Æloc
(
u_ch¨
);

631 
if_©èch
(
i‚ë
 *);

632 
if_dód
(
i‚ë
 *);

633 
if_dñmu…i
(
i‚ë
 *, 
sockaddr
 *);

634 
if_dñmu…i_ifma
(
ifmu…üddr
 *);

635 
if_dñmu…i_ifma_Êags
(
ifmu…üddr
 *, 
Êags
);

636 
if_dëach
(
i‚ë
 *);

637 
if_purgóddrs
(
i‚ë
 *);

638 
if_dñÆlmu…i
(
i‚ë
 *);

639 
if_down
(
i‚ë
 *);

640 
ifmu…üddr
 *

641 
if_födmu…i
(
i‚ë
 *, c⁄° 
sockaddr
 *);

642 
if_‰ìmu…i
(
ifmu…üddr
 *
ifma
);

643 
if_‰ì
(
i‚ë
 *);

644 
if_öô«me
(
i‚ë
 *, const *, );

645 
if_lök_°©e_ch™ge
(
i‚ë
 *, );

646 
	$if_¥ötf
(
i‚ë
 *, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

647 
	`if_ªf
(
i‚ë
 *);

648 
	`if_ªÀ
(
i‚ë
 *);

649 
	`if_£éœddr
(
i‚ë
 *, c⁄° 
u_ch¨
 *, );

650 
	`if_tu¬ñ_check_√°ög
(
i‚ë
 *, 
mbuf
 *, 
uöt32_t
, );

651 
	`if_up
(
i‚ë
 *);

652 
	`ifio˘l
(
sockë
 *, 
u_l⁄g
, 
ˇddr_t
, 
thªad
 *);

653 
	`iÂromisc
(
i‚ë
 *, );

654 
i‚ë
 *
	`ifunô
(const *);

655 
i‚ë
 *
	`ifunô_ªf
(const *);

657 
	`iÁ_add_lo›back_rouã
(
iÁddr
 *, 
sockaddr
 *);

658 
	`iÁ_dñ_lo›back_rouã
(
iÁddr
 *, 
sockaddr
 *);

659 
	`iÁ_swôch_lo›back_rouã
(
iÁddr
 *, 
sockaddr
 *);

661 
iÁddr
 *
	`iÁ_ifwôhaddr
(c⁄° 
sockaddr
 *);

662 
	`iÁ_ifwôhaddr_check
(c⁄° 
sockaddr
 *);

663 
iÁddr
 *
	`iÁ_ifwôhbrﬂdaddr
(c⁄° 
sockaddr
 *, );

664 
iÁddr
 *
	`iÁ_ifwôhd°addr
(c⁄° 
sockaddr
 *, );

665 
iÁddr
 *
	`iÁ_ifwôh√t
(c⁄° 
sockaddr
 *, , );

666 
iÁddr
 *
	`iÁ_ifwôhrouã
(, c⁄° 
sockaddr
 *, sockaddr *,

667 
u_öt
);

668 
iÁddr
 *
	`iÁof_iÂf‹addr
(c⁄° 
sockaddr
 *, 
i‚ë
 *);

669 
	`iÁ_¥e„ºed
(
iÁddr
 *, ifaddr *);

671 
	`if_simlo›
(
i‚ë
 *
iÂ
, 
mbuf
 *
m
, 
af
, 
hÀn
);

673 *
	tif_com_Æloc_t
(
	tu_ch¨
 
	tty≥
, 
	ti‚ë
 *
	tiÂ
);

674 
	tif_com_‰ì_t
(*
	tcom
, 
	tu_ch¨
 
	tty≥
);

675 
	`if_ªgi°î_com_Æloc
(
u_ch¨
 
ty≥
, 
if_com_Æloc_t
 *
a
, 
if_com_‰ì_t
 *
f
);

676 
	`if_dîegi°î_com_Æloc
(
u_ch¨
 
ty≥
);

677 
	`if_d©a_c›y
(
i‚ë
 *, 
if_d©a
 *);

678 
uöt64_t
 
	`if_gë_cou¡î_deÁu…
(
i‚ë
 *, 
i·_cou¡î
);

679 
	`if_öc_cou¡î
(
i‚ë
 *, 
i·_cou¡î
, 
öt64_t
);

681 
	#IF_LLADDR
(
iÂ
) \

682 
	`LLADDR
((
sockaddr_dl
 *)((
iÂ
)->
if_addr
->
iÁ_addr
))

	)

684 
uöt64_t
 
	`if_£tbaudøã
(
if_t
 
iÂ
, uöt64_à
baudøã
);

685 
uöt64_t
 
	`if_gëbaudøã
(
if_t
 
iÂ
);

686 
	`if_£tˇ∑bûôõs
(
if_t
 
iÂ
, 
ˇ∑bûôõs
);

687 
	`if_£tˇ∑bûôõsbô
(
if_t
 
iÂ
, 
£tbô
, 
˛órbô
);

688 
	`if_gëˇ∑bûôõs
(
if_t
 
iÂ
);

689 
	`if_toggÀˇ≥«bÀ
(
if_t
 
iÂ
, 
toggÀˇp
);

690 
	`if_£tˇ≥«bÀ
(
if_t
 
iÂ
, 
ˇ≥«bÀ
);

691 
	`if_£tˇ≥«bÀbô
(
if_t
 
iÂ
, 
£tˇp
, 
˛órˇp
);

692 
	`if_gëˇ≥«bÀ
(
if_t
 
iÂ
);

693 c⁄° *
	`if_gëd«me
(
if_t
 
iÂ
);

694 
	`if_£tdev
(
if_t
 
iÂ
, *
dev
);

695 
	`if_£tdrvÊagbôs
(
if_t
 
iÂ
, 
if_£tÊags
, 
˛ór_Êags
);

696 
	`if_gëdrvÊags
(
if_t
 
iÂ
);

697 
	`if_£tdrvÊags
(
if_t
 
iÂ
, 
Êags
);

698 
	`if_˛órhwassi°
(
if_t
 
iÂ
);

699 
	`if_£thwassi°bôs
(
if_t
 
iÂ
, 
to£t
, 
to˛ór
);

700 
	`if_£thwassi°
(
if_t
 
iÂ
, 
hwassi°_bô
);

701 
	`if_gëhwassi°
(
if_t
 
iÂ
);

702 
	`if_£tso·c
(
if_t
 
iÂ
, *
so·c
);

703 *
	`if_gëso·c
(
if_t
 
iÂ
);

704 
	`if_£tÊags
(
if_t
 
iÂ
, 
Êags
);

705 
	`if_gëhwaddr
(
if_t
 
iÂ
, 
i‰eq
 *);

706 
	`if_£tmtu
(
if_t
 
iÂ
, 
mtu
);

707 
	`if_gëmtu
(
if_t
 
iÂ
);

708 
	`if_gëmtu_Ámûy
(
if_t
 
iÂ
, 
Ámûy
);

709 
	`if_£tÊagbôs
(
if_t
 
iÂ
, 
£t
, 
˛ór
);

710 
	`if_gëÊags
(
if_t
 
iÂ
);

711 
	`if_£ndq_em±y
(
if_t
 
iÂ
);

712 
	`if_£t£ndqªady
(
if_t
 
iÂ
);

713 
	`if_£t£ndqÀn
(
if_t
 
iÂ
, 
tx_desc_cou¡
);

714 
	`if_£thwtsomax
(
if_t
 
iÂ
, 
u_öt
 
if_hw_tsomax
);

715 
	`if_£thwtsomax£gcou¡
(
if_t
 
iÂ
, 
u_öt
 
if_hw_tsomax£gcou¡
);

716 
	`if_£thwtsomax£gsize
(
if_t
 
iÂ
, 
u_öt
 
if_hw_tsomax£gsize
);

717 
u_öt
 
	`if_gëhwtsomax
(
if_t
 
iÂ
);

718 
u_öt
 
	`if_gëhwtsomax£gcou¡
(
if_t
 
iÂ
);

719 
u_öt
 
	`if_gëhwtsomax£gsize
(
if_t
 
iÂ
);

720 
	`if_öput
(
if_t
 
iÂ
, 
mbuf
* 
£ndmp
);

721 
	`if_£ndq_¥ïíd
(
if_t
 
iÂ
, 
mbuf
 *
m
);

722 
mbuf
 *
	`if_dequeue
(
if_t
 
iÂ
);

723 
	`if_£tifhódîÀn
(
if_t
 
iÂ
, 
Àn
);

724 
	`if_£åcvif
(
mbuf
 *
m
, 
if_t
 
iÂ
);

725 
	`if_£tvèg
(
mbuf
 *
m
, 
u_öt16_t
 
èg
);

726 
u_öt16_t
 
	`if_gëvèg
(
mbuf
 *
m
);

727 
	`if_vœ¡runköu£
(
if_t
 
iÂ
);

728 
ˇddr_t
 
	`if_gëŒaddr
(
if_t
 
iÂ
);

729 *
	`if_gëh™dÀ
(
u_ch¨
);

730 
	`if_bpfmèp
(
if_t
 
iÂ
, 
mbuf
 *
m
);

731 
	`if_ëhîbpfmèp
(
if_t
 
iÂ
, 
mbuf
 *
m
);

732 
	`if_vœnˇp
(
if_t
 
iÂ
);

734 
	`if_£tupmu…üddr
(
if_t
 
iÂ
, *
mè
, *
˙t
, 
max
);

735 
	`if_mu…üddr_¨øy
(
if_t
 
iÂ
, *
mè
, *
˙t
, 
max
);

736 
	`if_mu…üddr_cou¡
(
if_t
 
iÂ
, 
max
);

738 
	`if_mu…i_≠∂y
(
i‚ë
 *
iÂ
, (*
fûãr
)(*, 
ifmu…üddr
 *, ), *
¨g
);

739 
	`if_gëamcou¡
(
if_t
 
iÂ
);

740 
iÁddr
 * 
	`if_gëiÁddr
(
if_t
 
iÂ
);

743 
	`if_£töô‚
(
if_t
 
iÂ
, (*)(*));

744 
	`if_£tio˘l‚
(
if_t
 
iÂ
, (*)(if_t, 
u_l⁄g
, 
ˇddr_t
));

745 
	`if_£t°¨t‚
(
if_t
 
iÂ
, (*)(if_t));

746 
	`if_£âønsmô‚
(
if_t
 
iÂ
, 
if_å™smô_‚_t
);

747 
	`if_£tqÊush‚
(
if_t
 
iÂ
, 
if_qÊush_‚_t
);

748 
	`if_£tgëcou¡î‚
(
if_t
 
iÂ
, 
if_gë_cou¡î_t
);

751 
	`drbr_öu£_drv
(
if_t
 
iÂ
, 
buf_rög
 *
br
);

752 
mbuf
* 
	`drbr_dequeue_drv
(
if_t
 
iÂ
, 
buf_rög
 *
br
);

753 
	`drbr_√eds_íqueue_drv
(
if_t
 
iÂ
, 
buf_rög
 *
br
);

754 
	`drbr_íqueue_drv
(
if_t
 
iÂ
, 
buf_rög
 *
br
, 
mbuf
 *
m
);

757 
	`if_hw_tsomax_comm⁄
(
if_t
 
iÂ
, 
i‚ë_hw_tsomax
 *);

758 
	`if_hw_tsomax_upd©e
(
if_t
 
iÂ
, 
i‚ë_hw_tsomax
 *);

761 *
	`i‰_d©a_gë_±r
(*
i‰p
);

763 
	`ifhwio˘l
(
u_l⁄g
, 
i‚ë
 *, 
ˇddr_t
, 
thªad
 *);

765 #ifde‡
DEVICE_POLLING


766 
	epﬁl_cmd
 { 
POLL_ONLY
, 
POLL_AND_CHECK_STATUS
 };

768 
	tpﬁl_h™dÀr_t
(
	tif_t
 
	tiÂ
, 
	tpﬁl_cmd
 
	tcmd
, 
	tcou¡
);

769 
	`ëhî_pﬁl_ªgi°î
(
pﬁl_h™dÀr_t
 *
h
, 
if_t
 
iÂ
);

770 
	`ëhî_pﬁl_dîegi°î
(
if_t
 
iÂ
);

775 
	~<√t/ifq.h
>

	@/usr/include/netinet/in.h

35 #i‚de‡
_NETINET_IN_H_


36 
	#_NETINET_IN_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/_ty≥s.h
>

40 
	~<machöe/ídün.h
>

43 
	#IPPROTO_IP
 0

	)

44 
	#IPPROTO_ICMP
 1

	)

45 
	#IPPROTO_TCP
 6

	)

46 
	#IPPROTO_UDP
 17

	)

48 
	#INADDR_ANY
 ((
ö_addr_t
)0x00000000)

	)

49 
	#INADDR_BROADCAST
 ((
ö_addr_t
)0xffffffffË

	)

51 #i‚de‡
_UINT8_T_DECLARED


52 
__uöt8_t
 
	tuöt8_t
;

53 
	#_UINT8_T_DECLARED


	)

56 #i‚de‡
_UINT16_T_DECLARED


57 
__uöt16_t
 
	tuöt16_t
;

58 
	#_UINT16_T_DECLARED


	)

61 #i‚de‡
_UINT32_T_DECLARED


62 
__uöt32_t
 
	tuöt32_t
;

63 
	#_UINT32_T_DECLARED


	)

66 #i‚de‡
_IN_ADDR_T_DECLARED


67 
uöt32_t
 
	tö_addr_t
;

68 
	#_IN_ADDR_T_DECLARED


	)

71 #i‚de‡
_IN_PORT_T_DECLARED


72 
uöt16_t
 
	tö_p‹t_t
;

73 
	#_IN_PORT_T_DECLARED


	)

76 #i‚de‡
_SA_FAMILY_T_DECLARED


77 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

78 
	#_SA_FAMILY_T_DECLARED


	)

82 #i‚def 
_STRUCT_IN_ADDR_DECLARED


83 
	sö_addr
 {

84 
ö_addr_t
 
	ms_addr
;

86 
	#_STRUCT_IN_ADDR_DECLARED


	)

89 #i‚def 
_SOCKLEN_T_DECLARED


90 
__sockÀn_t
 
	tsockÀn_t
;

91 
	#_SOCKLEN_T_DECLARED


	)

94 
	~<sys/_sockaddr_°‹age.h
>

97 
	ssockaddr_ö
 {

98 
uöt8_t
 
	msö_Àn
;

99 
ß_Ámûy_t
 
	msö_Ámûy
;

100 
ö_p‹t_t
 
	msö_p‹t
;

101 
ö_addr
 
	msö_addr
;

102 
	msö_zîo
[8];

105 #i‡!
deföed
(
_KERNEL
Ë&& 
__POSIX_VISIBLE
 >= 200112

107 #i‚de‡
_BYTEORDER_PROTOTYPED


108 
	#_BYTEORDER_PROTOTYPED


	)

109 
__BEGIN_DECLS


110 
uöt32_t
 
ht⁄l
(uint32_t);

111 
uöt16_t
 
ht⁄s
(uint16_t);

112 
uöt32_t
 
¡ohl
(uint32_t);

113 
uöt16_t
 
¡ohs
(uint16_t);

114 
	g__END_DECLS


117 #i‚de‡
_BYTEORDER_FUNC_DEFINED


118 
	#_BYTEORDER_FUNC_DEFINED


	)

119 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

120 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

121 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

122 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

127 #i‡
__POSIX_VISIBLE
 >= 200112

128 
	#IPPROTO_IPV6
 41

	)

129 
	#IPPROTO_RAW
 255

	)

130 
	#INET_ADDRSTRLEN
 16

	)

133 #i‡
__BSD_VISIBLE


142 
	#IPPROTO_HOPOPTS
 0

	)

143 
	#IPPROTO_IGMP
 2

	)

144 
	#IPPROTO_GGP
 3

	)

145 
	#IPPROTO_IPV4
 4

	)

146 
	#IPPROTO_IPIP
 
IPPROTO_IPV4


	)

147 
	#IPPROTO_ST
 7

	)

148 
	#IPPROTO_EGP
 8

	)

149 
	#IPPROTO_PIGP
 9

	)

150 
	#IPPROTO_RCCMON
 10

	)

151 
	#IPPROTO_NVPII
 11

	)

152 
	#IPPROTO_PUP
 12

	)

153 
	#IPPROTO_ARGUS
 13

	)

154 
	#IPPROTO_EMCON
 14

	)

155 
	#IPPROTO_XNET
 15

	)

156 
	#IPPROTO_CHAOS
 16

	)

157 
	#IPPROTO_MUX
 18

	)

158 
	#IPPROTO_MEAS
 19

	)

159 
	#IPPROTO_HMP
 20

	)

160 
	#IPPROTO_PRM
 21

	)

161 
	#IPPROTO_IDP
 22

	)

162 
	#IPPROTO_TRUNK1
 23

	)

163 
	#IPPROTO_TRUNK2
 24

	)

164 
	#IPPROTO_LEAF1
 25

	)

165 
	#IPPROTO_LEAF2
 26

	)

166 
	#IPPROTO_RDP
 27

	)

167 
	#IPPROTO_IRTP
 28

	)

168 
	#IPPROTO_TP
 29

	)

169 
	#IPPROTO_BLT
 30

	)

170 
	#IPPROTO_NSP
 31

	)

171 
	#IPPROTO_INP
 32

	)

172 
	#IPPROTO_SEP
 33

	)

173 
	#IPPROTO_3PC
 34

	)

174 
	#IPPROTO_IDPR
 35

	)

175 
	#IPPROTO_XTP
 36

	)

176 
	#IPPROTO_DDP
 37

	)

177 
	#IPPROTO_CMTP
 38

	)

178 
	#IPPROTO_TPXX
 39

	)

179 
	#IPPROTO_IL
 40

	)

180 
	#IPPROTO_SDRP
 42

	)

181 
	#IPPROTO_ROUTING
 43

	)

182 
	#IPPROTO_FRAGMENT
 44

	)

183 
	#IPPROTO_IDRP
 45

	)

184 
	#IPPROTO_RSVP
 46

	)

185 
	#IPPROTO_GRE
 47

	)

186 
	#IPPROTO_MHRP
 48

	)

187 
	#IPPROTO_BHA
 49

	)

188 
	#IPPROTO_ESP
 50

	)

189 
	#IPPROTO_AH
 51

	)

190 
	#IPPROTO_INLSP
 52

	)

191 
	#IPPROTO_SWIPE
 53

	)

192 
	#IPPROTO_NHRP
 54

	)

193 
	#IPPROTO_MOBILE
 55

	)

194 
	#IPPROTO_TLSP
 56

	)

195 
	#IPPROTO_SKIP
 57

	)

196 
	#IPPROTO_ICMPV6
 58

	)

197 
	#IPPROTO_NONE
 59

	)

198 
	#IPPROTO_DSTOPTS
 60

	)

199 
	#IPPROTO_AHIP
 61

	)

200 
	#IPPROTO_CFTP
 62

	)

201 
	#IPPROTO_HELLO
 63

	)

202 
	#IPPROTO_SATEXPAK
 64

	)

203 
	#IPPROTO_KRYPTOLAN
 65

	)

204 
	#IPPROTO_RVD
 66

	)

205 
	#IPPROTO_IPPC
 67

	)

206 
	#IPPROTO_ADFS
 68

	)

207 
	#IPPROTO_SATMON
 69

	)

208 
	#IPPROTO_VISA
 70

	)

209 
	#IPPROTO_IPCV
 71

	)

210 
	#IPPROTO_CPNX
 72

	)

211 
	#IPPROTO_CPHB
 73

	)

212 
	#IPPROTO_WSN
 74

	)

213 
	#IPPROTO_PVP
 75

	)

214 
	#IPPROTO_BRSATMON
 76

	)

215 
	#IPPROTO_ND
 77

	)

216 
	#IPPROTO_WBMON
 78

	)

217 
	#IPPROTO_WBEXPAK
 79

	)

218 
	#IPPROTO_EON
 80

	)

219 
	#IPPROTO_VMTP
 81

	)

220 
	#IPPROTO_SVMTP
 82

	)

221 
	#IPPROTO_VINES
 83

	)

222 
	#IPPROTO_TTP
 84

	)

223 
	#IPPROTO_IGP
 85

	)

224 
	#IPPROTO_DGP
 86

	)

225 
	#IPPROTO_TCF
 87

	)

226 
	#IPPROTO_IGRP
 88

	)

227 
	#IPPROTO_OSPFIGP
 89

	)

228 
	#IPPROTO_SRPC
 90

	)

229 
	#IPPROTO_LARP
 91

	)

230 
	#IPPROTO_MTP
 92

	)

231 
	#IPPROTO_AX25
 93

	)

232 
	#IPPROTO_IPEIP
 94

	)

233 
	#IPPROTO_MICP
 95

	)

234 
	#IPPROTO_SCCSP
 96

	)

235 
	#IPPROTO_ETHERIP
 97

	)

236 
	#IPPROTO_ENCAP
 98

	)

237 
	#IPPROTO_APES
 99

	)

238 
	#IPPROTO_GMTP
 100

	)

239 
	#IPPROTO_IPCOMP
 108

	)

240 
	#IPPROTO_SCTP
 132

	)

241 
	#IPPROTO_MH
 135

	)

242 
	#IPPROTO_UDPLITE
 136

	)

243 
	#IPPROTO_HIP
 139

	)

244 
	#IPPROTO_SHIM6
 140

	)

246 
	#IPPROTO_PIM
 103

	)

247 
	#IPPROTO_CARP
 112

	)

248 
	#IPPROTO_PGM
 113

	)

249 
	#IPPROTO_MPLS
 137

	)

250 
	#IPPROTO_PFSYNC
 240

	)

251 
	#IPPROTO_RESERVED_253
 253

	)

252 
	#IPPROTO_RESERVED_254
 254

	)

255 
	#IPPROTO_OLD_DIVERT
 254

	)

256 
	#IPPROTO_MAX
 256

	)

259 
	#IPPROTO_DONE
 257

	)

262 
	#IPPROTO_DIVERT
 258

	)

263 
	#IPPROTO_SEND
 259

	)

269 
	#IPPROTO_SPACER
 32767

	)

320 
	#IPPORT_RESERVED
 1024

	)

325 
	#IPPORT_EPHEMERALFIRST
 10000

	)

326 
	#IPPORT_EPHEMERALLAST
 65535

	)

331 
	#IPPORT_HIFIRSTAUTO
 49152

	)

332 
	#IPPORT_HILASTAUTO
 65535

	)

340 
	#IPPORT_RESERVEDSTART
 600

	)

342 
	#IPPORT_MAX
 65535

	)

349 
	#IN_CLASSA
(
i
Ë(((
ö_addr_t
)(iË& 0x80000000Ë=0)

	)

350 
	#IN_CLASSA_NET
 0xff000000

	)

351 
	#IN_CLASSA_NSHIFT
 24

	)

352 
	#IN_CLASSA_HOST
 0x00ffffff

	)

353 
	#IN_CLASSA_MAX
 128

	)

355 
	#IN_CLASSB
(
i
Ë(((
ö_addr_t
)(iË& 0xc0000000Ë=0x80000000)

	)

356 
	#IN_CLASSB_NET
 0xffff0000

	)

357 
	#IN_CLASSB_NSHIFT
 16

	)

358 
	#IN_CLASSB_HOST
 0x0000ffff

	)

359 
	#IN_CLASSB_MAX
 65536

	)

361 
	#IN_CLASSC
(
i
Ë(((
ö_addr_t
)(iË& 0xe0000000Ë=0xc0000000)

	)

362 
	#IN_CLASSC_NET
 0xffffff00

	)

363 
	#IN_CLASSC_NSHIFT
 8

	)

364 
	#IN_CLASSC_HOST
 0x000000ff

	)

366 
	#IN_CLASSD
(
i
Ë(((
ö_addr_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

367 
	#IN_CLASSD_NET
 0xf0000000

	)

368 
	#IN_CLASSD_NSHIFT
 28

	)

369 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

370 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

372 
	#IN_EXPERIMENTAL
(
i
Ë(((
ö_addr_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

373 
	#IN_BADCLASS
(
i
Ë(((
ö_addr_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

375 
	#IN_LINKLOCAL
(
i
Ë(((
ö_addr_t
)(iË& 0xffff0000Ë=0xa9„0000)

	)

376 
	#IN_LOOPBACK
(
i
Ë(((
ö_addr_t
)(iË& 0xff000000Ë=0x7f000000)

	)

377 
	#IN_ZERONET
(
i
Ë(((
ö_addr_t
)(iË& 0xff000000Ë=0)

	)

379 
	#IN_PRIVATE
(
i
Ë((((
ö_addr_t
)(i) & 0xff000000) == 0x0a000000) || \

380 (((
ö_addr_t
)(
i
) & 0xfff00000) == 0xac100000) || \

381 (((
ö_addr_t
)(
i
Ë& 0xffff0000Ë=0xc0a80000))

	)

383 
	#IN_LOCAL_GROUP
(
i
Ë(((
ö_addr_t
)(iË& 0xffffff00Ë=0xe0000000)

	)

385 
	#IN_ANY_LOCAL
(
i
Ë(
	`IN_LINKLOCAL
(iË|| 
	`IN_LOCAL_GROUP
(i))

	)

387 
	#INADDR_LOOPBACK
 ((
ö_addr_t
)0x7f000001)

	)

388 #i‚de‡
_KERNEL


389 
	#INADDR_NONE
 ((
ö_addr_t
)0xffffffffË

	)

392 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
)0xe0000000Ë

	)

393 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
)0xe0000001Ë

	)

394 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
)0xe0000002Ë

	)

395 
	#INADDR_ALLRPTS_GROUP
 ((
ö_addr_t
)0xe0000016Ë

	)

396 
	#INADDR_CARP_GROUP
 ((
ö_addr_t
)0xe0000012Ë

	)

397 
	#INADDR_PFSYNC_GROUP
 ((
ö_addr_t
)0xe00000f0Ë

	)

398 
	#INADDR_ALLMDNS_GROUP
 ((
ö_addr_t
)0xe00000fbË

	)

399 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
)0xe00000ffË

	)

401 
	#IN_LOOPBACKNET
 127

	)

403 
	#IN_RFC3021_MASK
 ((
ö_addr_t
)0xffffff„)

	)

409 
	#IP_OPTIONS
 1

	)

410 
	#IP_HDRINCL
 2

	)

411 
	#IP_TOS
 3

	)

412 
	#IP_TTL
 4

	)

413 
	#IP_RECVOPTS
 5

	)

414 
	#IP_RECVRETOPTS
 6

	)

415 
	#IP_RECVDSTADDR
 7

	)

416 
	#IP_SENDSRCADDR
 
IP_RECVDSTADDR


	)

417 
	#IP_RETOPTS
 8

	)

418 
	#IP_MULTICAST_IF
 9

	)

420 
	#IP_MULTICAST_TTL
 10

	)

421 
	#IP_MULTICAST_LOOP
 11

	)

422 
	#IP_ADD_MEMBERSHIP
 12

	)

423 
	#IP_DROP_MEMBERSHIP
 13

	)

424 
	#IP_MULTICAST_VIF
 14

	)

425 
	#IP_RSVP_ON
 15

	)

426 
	#IP_RSVP_OFF
 16

	)

427 
	#IP_RSVP_VIF_ON
 17

	)

428 
	#IP_RSVP_VIF_OFF
 18

	)

429 
	#IP_PORTRANGE
 19

	)

430 
	#IP_RECVIF
 20

	)

432 
	#IP_IPSEC_POLICY
 21

	)

434 
	#IP_ONESBCAST
 23

	)

435 
	#IP_BINDANY
 24

	)

436 
	#IP_BINDMULTI
 25

	)

437 
	#IP_RSS_LISTEN_BUCKET
 26

	)

438 
	#IP_ORIGDSTADDR
 27

	)

439 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

446 
	#IP_FW_TABLE_ADD
 40

	)

447 
	#IP_FW_TABLE_DEL
 41

	)

448 
	#IP_FW_TABLE_FLUSH
 42

	)

449 
	#IP_FW_TABLE_GETSIZE
 43

	)

450 
	#IP_FW_TABLE_LIST
 44

	)

452 
	#IP_FW3
 48

	)

453 
	#IP_DUMMYNET3
 49

	)

455 
	#IP_FW_ADD
 50

	)

456 
	#IP_FW_DEL
 51

	)

457 
	#IP_FW_FLUSH
 52

	)

458 
	#IP_FW_ZERO
 53

	)

459 
	#IP_FW_GET
 54

	)

460 
	#IP_FW_RESETLOG
 55

	)

462 
	#IP_FW_NAT_CFG
 56

	)

463 
	#IP_FW_NAT_DEL
 57

	)

464 
	#IP_FW_NAT_GET_CONFIG
 58

	)

465 
	#IP_FW_NAT_GET_LOG
 59

	)

467 
	#IP_DUMMYNET_CONFIGURE
 60

	)

468 
	#IP_DUMMYNET_DEL
 61

	)

469 
	#IP_DUMMYNET_FLUSH
 62

	)

470 
	#IP_DUMMYNET_GET
 64

	)

472 
	#IP_RECVTTL
 65

	)

473 
	#IP_MINTTL
 66

	)

474 
	#IP_DONTFRAG
 67

	)

475 
	#IP_RECVTOS
 68

	)

478 
	#IP_ADD_SOURCE_MEMBERSHIP
 70

	)

479 
	#IP_DROP_SOURCE_MEMBERSHIP
 71

	)

480 
	#IP_BLOCK_SOURCE
 72

	)

481 
	#IP_UNBLOCK_SOURCE
 73

	)

484 
	#IP_MSFILTER
 74

	)

487 
	#MCAST_JOIN_GROUP
 80

	)

488 
	#MCAST_LEAVE_GROUP
 81

	)

489 
	#MCAST_JOIN_SOURCE_GROUP
 82

	)

490 
	#MCAST_LEAVE_SOURCE_GROUP
 83

	)

491 
	#MCAST_BLOCK_SOURCE
 84

	)

492 
	#MCAST_UNBLOCK_SOURCE
 85

	)

495 
	#IP_FLOWID
 90

	)

496 
	#IP_FLOWTYPE
 91

	)

497 
	#IP_RSSBUCKETID
 92

	)

498 
	#IP_RECVFLOWID
 93

	)

499 
	#IP_RECVRSSBUCKETID
 94

	)

504 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

505 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

512 
	#IP_MIN_MEMBERSHIPS
 31

	)

513 
	#IP_MAX_MEMBERSHIPS
 4095

	)

514 
	#IP_MAX_SOURCE_FILTER
 1024

	)

520 
	#IP_MAX_GROUP_SRC_FILTER
 512

	)

521 
	#IP_MAX_SOCK_SRC_FILTER
 128

	)

522 
	#IP_MAX_SOCK_MUTE_FILTER
 128

	)

527 
	sù_mªq
 {

528 
ö_addr
 
	mimr_mu…üddr
;

529 
ö_addr
 
	mimr_öãrÁ˚
;

537 
	sù_mªqn
 {

538 
ö_addr
 
	mimr_mu…üddr
;

539 
ö_addr
 
	mimr_addªss
;

540 
	mimr_ifödex
;

546 
	sù_mªq_sour˚
 {

547 
ö_addr
 
	mimr_mu…üddr
;

548 
ö_addr
 
	mimr_sour˚addr
;

549 
ö_addr
 
	mimr_öãrÁ˚
;

556 
	sgroup_ªq
 {

557 
uöt32_t
 
	mgr_öãrÁ˚
;

558 
sockaddr_°‹age
 
	mgr_group
;

561 
	sgroup_sour˚_ªq
 {

562 
uöt32_t
 
	mg§_öãrÁ˚
;

563 
sockaddr_°‹age
 
	mg§_group
;

564 
sockaddr_°‹age
 
	mg§_sour˚
;

567 #i‚de‡
__MSFILTERREQ_DEFINED


568 
	#__MSFILTERREQ_DEFINED


	)

574 
	s__msfûãºeq
 {

575 
uöt32_t
 
	mms‰_ifödex
;

576 
uöt32_t
 
	mms‰_fmode
;

577 
uöt32_t
 
	mms‰_n§cs
;

578 
sockaddr_°‹age
 
	mms‰_group
;

579 
sockaddr_°‹age
 *
	mms‰_§cs
;

586 
	gsockaddr
;

593 
£tùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
,

594 
uöt32_t
, 
ö_addr
 *);

595 
gëùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
 *,

596 
uöt32_t
 *, 
ö_addr
 *);

597 
£tsour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

598 
uöt32_t
, uöt32_t, 
sockaddr_°‹age
 *);

599 
gësour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

600 
uöt32_t
 *, uöt32_à*, 
sockaddr_°‹age
 *);

605 
	#MCAST_UNDEFINED
 0

	)

606 
	#MCAST_INCLUDE
 1

	)

607 
	#MCAST_EXCLUDE
 2

	)

613 
	#IP_PORTRANGE_DEFAULT
 0

	)

614 
	#IP_PORTRANGE_HIGH
 1

	)

615 
	#IP_PORTRANGE_LOW
 2

	)

620 
	#IPCTL_FORWARDING
 1

	)

621 
	#IPCTL_SENDREDIRECTS
 2

	)

622 
	#IPCTL_DEFTTL
 3

	)

623 #ifde‡
nŸyë


624 
	#IPCTL_DEFMTU
 4

	)

629 
	#IPCTL_SOURCEROUTE
 8

	)

630 
	#IPCTL_DIRECTEDBROADCAST
 9

	)

631 
	#IPCTL_INTRQMAXLEN
 10

	)

632 
	#IPCTL_INTRQDROPS
 11

	)

633 
	#IPCTL_STATS
 12

	)

634 
	#IPCTL_ACCEPTSOURCEROUTE
 13

	)

635 
	#IPCTL_FASTFORWARDING
 14

	)

637 
	#IPCTL_GIF_TTL
 16

	)

638 
	#IPCTL_INTRDQMAXLEN
 17

	)

639 
	#IPCTL_INTRDQDROPS
 18

	)

643 #ifde‡
_KERNEL


645 
	gi‚ë
; 
	gmbuf
;

646 
	gö_iÁddr
;

648 
ö_brﬂdˇ°
(
ö_addr
, 
i‚ë
 *);

649 
ö_iÁddr_brﬂdˇ°
(
ö_addr
, 
ö_iÁddr
 *);

650 
ö_ˇnf‹w¨d
(
ö_addr
);

651 
ö_loˇœddr
(
ö_addr
);

652 
ö_loˇlù
(
ö_addr
);

653 
ö_ifhaßddr
(
i‚ë
 *, 
ö_addr
);

654 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

655 *
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

656 *
öë_¡›
(, c⁄° *, *, 
sockÀn_t
);

657 
öë_±⁄
(
af
, const *, *);

658 
ö_ifdëach
(
i‚ë
 *);

660 
	#ö_ho°eq
(
s
, 
t
Ë((s).
s_addr
 =—).s_addr)

	)

661 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

662 
	#ö_Ælho°s
(
x
Ë((x).
s_addr
 =
	`ht⁄l
(
INADDR_ALLHOSTS_GROUP
))

	)

664 
	#ßtosö
(
ß
Ë((
sockaddr_ö
 *)(ß))

	)

665 
	#sötoß
(
sö
Ë((
sockaddr
 *)(sö))

	)

666 
	#iÁtoü
(
iÁ
Ë((
ö_iÁddr
 *)(iÁ))

	)

670 #i‡
__POSIX_VISIBLE
 >= 200112

671 
	#__KAME_NETINET_IN_H_INCLUDED_


	)

672 
	~<√töë6/ö6.h
>

673 #unde‡
__KAME_NETINET_IN_H_INCLUDED_


	@/usr/include/netinet/in_var.h

35 #i‚de‡
_NETINET_IN_VAR_H_


36 
	#_NETINET_IN_VAR_H_


	)

41 
	sö_Æü§eq
 {

42 
	mi‰a_«me
[
IFNAMSIZ
];

43 
sockaddr_ö
 
	mi‰a_addr
;

44 
sockaddr_ö
 
	mi‰a_brﬂdaddr
;

45 
	#i‰a_d°addr
 
i‰a_brﬂdaddr


	)

46 
sockaddr_ö
 
	mi‰a_mask
;

47 
	mi‰a_vhid
;

50 #ifde‡
_KERNEL


51 
	~<sys/queue.h
>

52 
	~<sys/‚v_hash.h
>

53 
	~<sys/åì.h
>

55 
	gigmp_ifso·c
;

56 
	gö_mu…i
;

57 
	gŒèbÀ
;

58 
SLIST_HEAD
(
ö_mu…i_hód
, 
ö_mu…i
);

63 
	sö_iföfo
 {

64 
ŒèbÀ
 *
	mii_Œt
;

65 
igmp_ifso·c
 *
	mii_igmp
;

66 
ö_mu…i
 *
	mii_Ælho°s
;

75 
	sö_iÁddr
 {

76 
iÁddr
 
	mü_iÁ
;

77 
	#ü_iÂ
 
ü_iÁ
.
iÁ_iÂ


	)

78 
	#ü_Êags
 
ü_iÁ
.
iÁ_Êags


	)

80 
u_l⁄g
 
	mü_sub√t
;

81 
u_l⁄g
 
	mü_sub√tmask
;

82 
LIST_ENTRY
(
ö_iÁddr
Ë
	mü_hash
;

83 
CK_STAILQ_ENTRY
(
ö_iÁddr
Ë
	mü_lök
;

84 
sockaddr_ö
 
	mü_addr
;

85 
sockaddr_ö
 
	mü_d°addr
;

86 
	#ü_brﬂdaddr
 
ü_d°addr


	)

87 
sockaddr_ö
 
	mü_sockmask
;

88 
ˇŒout
 
	mü_g¨p_timî
;

89 
	mü_g¨p_cou¡
;

96 
	#IA_SIN
(
ü
Ë(&(((
ö_iÁddr
 *)(ü))->
ü_addr
))

	)

97 
	#IA_DSTSIN
(
ü
Ë(&(((
ö_iÁddr
 *)(ü))->
ü_d°addr
))

	)

98 
	#IA_MASKSIN
(
ü
Ë(&(((
ö_iÁddr
 *)(ü))->
ü_sockmask
))

	)

100 
	#IN_LNAOF
(
ö
, 
iÁ
) \

101 ((
	`¡ohl
((
ö
).
s_addr
Ë& ~((
ö_iÁddr
 *)(
iÁ
)->
ü_sub√tmask
))

	)

103 
u_ch¨
 
öë˘Àºm≠
[];

105 
	#LLTABLE
(
iÂ
) \

106 ((
ö_iföfo
 *)(
iÂ
)->
if_afd©a
[
AF_INET
])->
ii_Œt


	)

110 
CK_STAILQ_HEAD
(
ö_iÁddrhód
, 
ö_iÁddr
);

111 
LIST_HEAD
(
ö_iÁddrhashhód
, 
ö_iÁddr
);

113 
VNET_DECLARE
(
ö_iÁddrhashhód
 *, 
ö_iÁddrhashtbl
);

114 
VNET_DECLARE
(
ö_iÁddrhód
, in_ifaddrhead);

115 
VNET_DECLARE
(
u_l⁄g
, 
ö_iÁddrhmask
);

117 
	#V_ö_iÁddrhashtbl
 
	`VNET
(
ö_iÁddrhashtbl
)

	)

118 
	#V_ö_iÁddrhód
 
	`VNET
(
ö_iÁddrhód
)

	)

119 
	#V_ö_iÁddrhmask
 
	`VNET
(
ö_iÁddrhmask
)

	)

121 
	#INADDR_NHASH_LOG2
 9

	)

122 
	#INADDR_NHASH
 (1 << 
INADDR_NHASH_LOG2
)

	)

123 
	#INADDR_HASHVAL
(
x
Ë
	`‚v_32_buf
((&(x)), (x), 
FNV1_32_INIT
)

	)

124 
	#INADDR_HASH
(
x
) \

125 (&
V_ö_iÁddrhashtbl
[
	`INADDR_HASHVAL
(
x
Ë& 
V_ö_iÁddrhmask
])

	)

127 
rmlock
 
ö_iÁddr_lock
;

129 
	#IN_IFADDR_LOCK_ASSERT
(Ë
	`rm_as£π
(&
ö_iÁddr_lock
, 
RA_LOCKED
)

	)

130 
	#IN_IFADDR_RLOCK
(
t
Ë
	`rm_æock
(&
ö_iÁddr_lock
, (t))

	)

131 
	#IN_IFADDR_RLOCK_ASSERT
(Ë
	`rm_as£π
(&
ö_iÁddr_lock
, 
RA_RLOCKED
)

	)

132 
	#IN_IFADDR_RUNLOCK
(
t
Ë
	`rm_ru∆ock
(&
ö_iÁddr_lock
, (t))

	)

133 
	#IN_IFADDR_WLOCK
(Ë
	`rm_wlock
(&
ö_iÁddr_lock
)

	)

134 
	#IN_IFADDR_WLOCK_ASSERT
(Ë
	`rm_as£π
(&
ö_iÁddr_lock
, 
RA_WLOCKED
)

	)

135 
	#IN_IFADDR_WUNLOCK
(Ë
	`rm_wu∆ock
(&
ö_iÁddr_lock
)

	)

141 
	#INADDR_TO_IFADDR
(
addr
, 
ü
) \

146 
	`LIST_FOREACH
(
ü
, 
	`INADDR_HASH
((
addr
).
s_addr
), 
ü_hash
) \

147 i‡(
	`IA_SIN
(
ü
)->
sö_addr
.
s_addr
 =(
addr
).s_addr) \

149 } 0)

	)

155 
	#INADDR_TO_IFP
(
addr
, 
iÂ
) \

159 
ö_iÁddr
 *
ü
; \

161 
	`INADDR_TO_IFADDR
(
addr
, 
ü
); \

162 (
iÂ
Ë(
ü
 =
NULL
Ë? NULL : ia->
ü_iÂ
; \

163 }

	)

169 
	#IFP_TO_IA
(
iÂ
, 
ü
, 
t
) \

174 
	`IN_IFADDR_RLOCK
((
t
)); \

175 (
ü
Ë
	`CK_STAILQ_FIRST
(&
V_ö_iÁddrhód
); \

176 (
ü
Ë!
NULL
 && (ü)->
ü_iÂ
 !(
iÂ
); \

177 (
ü
Ë
	`CK_STAILQ_NEXT
((ü), 
ü_lök
)) \

179 
	`IN_IFADDR_RUNLOCK
((
t
)); \

180 } 0)

	)

185 
	srouãr_öfo
 {

186 
i‚ë
 *
	mπi_iÂ
;

187 
	mπi_ty≥
;

188 
	mπi_time
;

189 
SLIST_ENTRY
(
rouãr_öfo
Ë
	mπi_li°
;

195 
	sù_msour˚
 {

196 
RB_ENTRY
(
ù_msour˚
Ë
	mims_lök
;

197 
ö_addr_t
 
	mims_haddr
;

198 
	sims_°
 {

199 
uöt16_t
 
	mex
;

200 
uöt16_t
 
	mö
;

201 } 
	mims_°
[2];

202 
uöt8_t
 
	mims_°p
;

208 
	sö_msour˚
 {

209 
RB_ENTRY
(
ù_msour˚
Ë
	mims_lök
;

210 
ö_addr_t
 
	mims_haddr
;

211 
uöt8_t
 
	mim¶_°
[2];

214 
RB_HEAD
(
ù_msour˚_åì
, 
ù_msour˚
);

216 
__ölöe
 

217 
	$ù_msour˚_cmp
(c⁄° 
ù_msour˚
 *
a
, c⁄° ù_msour˚ *
b
)

220 i‡(
a
->
ims_haddr
 < 
b
->ims_haddr)

222 i‡(
a
->
ims_haddr
 =
b
->ims_haddr)

225 
	}
}

226 
RB_PROTOTYPE
(
ù_msour˚_åì
, 
ù_msour˚
, 
ims_lök
, 
ù_msour˚_cmp
);

231 
	sö_mfûãr
 {

232 
ù_msour˚_åì
 
	mimf_sour˚s
;

233 
u_l⁄g
 
	mimf_n§c
;

234 
uöt8_t
 
	mimf_°
[2];

259 
	sö_mu…i
 {

260 
LIST_ENTRY
(
ö_mu…i
Ë
	möm_lök
;

261 
ö_addr
 
	möm_addr
;

262 
i‚ë
 *
	möm_iÂ
;

263 
ifmu…üddr
 *
	möm_ifma
;

264 
u_öt
 
	möm_timî
;

265 
u_öt
 
	möm_°©e
;

266 *
	möm_πi
;

267 
u_öt
 
	möm_ªfcou¡
;

270 
igmp_ifso·c
 *
	möm_igi
;

271 
SLIST_ENTRY
(
ö_mu…i
Ë
	möm_ƒñe
;

272 
ù_msour˚_åì
 
	möm_§cs
;

273 
u_l⁄g
 
	möm_n§c
;

275 
mbufq
 
	möm_scq
;

277 
timevÆ
 
	möm_œ°g§tv
;

278 
uöt16_t
 
	möm_s˘imî
;

279 
uöt16_t
 
	möm_s¸v
;

288 
	söm_°
 {

289 
uöt16_t
 
	miss_fmode
;

290 
uöt16_t
 
	miss_asm
;

291 
uöt16_t
 
	miss_ex
;

292 
uöt16_t
 
	miss_ö
;

293 
uöt16_t
 
	miss_ªc
;

294 } 
	möm_°
[2];

305 
__ölöe
 
uöt8_t


306 
	$ims_gë_mode
(c⁄° 
ö_mu…i
 *
öm
, c⁄° 
ù_msour˚
 *
ims
,

307 
uöt8_t
 
t
)

310 
t
 = !!t;

311 i‡(
öm
->
öm_°
[
t
].
iss_ex
 > 0 &&

312 
öm
->
öm_°
[
t
].
iss_ex
 =
ims
->
ims_°
[t].
ex
)

313  (
MCAST_EXCLUDE
);

314 i‡(
ims
->
ims_°
[
t
].
ö
 > 0 && ims->ims_°[t].
ex
 == 0)

315  (
MCAST_INCLUDE
);

316  (
MCAST_UNDEFINED
);

317 
	}
}

319 #ifde‡
SYSCTL_DECL


320 
SYSCTL_DECL
(
_√t_öë
);

321 
SYSCTL_DECL
(
_√t_öë_ù
);

322 
SYSCTL_DECL
(
_√t_öë_øw
);

331 
mtx
 
ö_mu…i_li°_mtx
;

332 
sx
 
ö_mu…i_sx
;

334 
	#IN_MULTI_LIST_LOCK
(Ë
	`mtx_lock
(&
ö_mu…i_li°_mtx
)

	)

335 
	#IN_MULTI_LIST_UNLOCK
(Ë
	`mtx_u∆ock
(&
ö_mu…i_li°_mtx
)

	)

336 
	#IN_MULTI_LIST_LOCK_ASSERT
(Ë
	`mtx_as£π
(&
ö_mu…i_li°_mtx
, 
MA_OWNED
)

	)

337 
	#IN_MULTI_LIST_UNLOCK_ASSERT
(Ë
	`mtx_as£π
(&
ö_mu…i_li°_mtx
, 
MA_NOTOWNED
)

	)

339 
	#IN_MULTI_LOCK
(Ë
	`sx_xlock
(&
ö_mu…i_sx
)

	)

340 
	#IN_MULTI_UNLOCK
(Ë
	`sx_xu∆ock
(&
ö_mu…i_sx
)

	)

341 
	#IN_MULTI_LOCK_ASSERT
(Ë
	`sx_as£π
(&
ö_mu…i_sx
, 
SA_XLOCKED
)

	)

342 
	#IN_MULTI_UNLOCK_ASSERT
(Ë
	`sx_as£π
(&
ö_mu…i_sx
, 
SA_XUNLOCKED
)

	)

344 
öm_disc⁄√˘
(
ö_mu…i
 *
öm
);

345 
ifma_ª°¨t
;

348 
__ölöe
 

349 
	$öm_acquúe_locked
(
ö_mu…i
 *
öm
)

352 
	`IN_MULTI_LIST_LOCK_ASSERT
();

353 ++
öm
->
öm_ªfcou¡
;

354 
	}
}

356 
__ölöe
 

357 
	$öm_acquúe
(
ö_mu…i
 *
öm
)

359 
	`IN_MULTI_LIST_LOCK
();

360 
	`öm_acquúe_locked
(
öm
);

361 
	`IN_MULTI_LIST_UNLOCK
();

362 
	}
}

364 
__ölöe
 

365 
	$öm_ªÀ_locked
(
ö_mu…i_hód
 *
ömh
, 
ö_mu…i
 *
öm
)

367 
	`MPASS
(
öm
->
öm_ªfcou¡
 > 0);

368 
	`IN_MULTI_LIST_LOCK_ASSERT
();

370 i‡(--
öm
->
öm_ªfcou¡
 == 0) {

371 
	`MPASS
(
ömh
 !
NULL
);

372 
	`öm_disc⁄√˘
(
öm
);

373 
öm
->
öm_ifma
->
ifma_¥Ÿo•ec
 = 
NULL
;

374 
	`SLIST_INSERT_HEAD
(
ömh
, 
öm
, 
öm_ƒñe
);

376 
	}
}

381 
	#MCAST_PASS
 0

	)

382 
	#MCAST_NOTGMEMBER
 1

	)

383 
	#MCAST_NOTSMEMBER
 2

	)

384 
	#MCAST_MUTED
 3

	)

386 
	gπíåy
;

387 
	grouã
;

388 
	gù_m›ti⁄s
;

390 
ö_mu…i
 *
öm_lookup_locked
(
i‚ë
 *, c⁄° 
ö_addr
);

391 
ö_mu…i
 *
öm_lookup
(
i‚ë
 *, c⁄° 
ö_addr
);

392 
imo_mu…i_fûãr
(c⁄° 
ù_m›ti⁄s
 *, c⁄° 
i‚ë
 *,

393 c⁄° 
sockaddr
 *, const sockaddr *);

394 
öm_commô
(
ö_mu…i
 *);

395 
öm_˛ór_ªc‹ded
(
ö_mu…i
 *);

396 
öm_¥öt
(c⁄° 
ö_mu…i
 *);

397 
öm_ªc‹d_sour˚
(
ö_mu…i
 *
öm
, c⁄° 
ö_addr_t
);

398 
öm_ªÀa£_de„ºed
(
ö_mu…i
 *);

399 
öm_ªÀa£_li°_de„ºed
(
ö_mu…i_hód
 *);

400 
ö_mu…i
 *

401 
ö_addmu…i
(
ö_addr
 *, 
i‚ë
 *);

402 
ö_joögroup
(
i‚ë
 *, c⁄° 
ö_addr
 *,

403  
ö_mfûãr
 *, 
ö_mu…i
 **);

404 
ö_joögroup_locked
(
i‚ë
 *, c⁄° 
ö_addr
 *,

405  
ö_mfûãr
 *, 
ö_mu…i
 **);

406 
ö_Àavegroup
(
ö_mu…i
 *, 
ö_mfûãr
 *);

407 
ö_Àavegroup_locked
(
ö_mu…i
 *,

408  
ö_mfûãr
 *);

409 
ö_c⁄åﬁ
(
sockë
 *, 
u_l⁄g
, 
ˇddr_t
, 
i‚ë
 *,

410 
thªad
 *);

411 
ö_add¥efix
(
ö_iÁddr
 *, );

412 
ö_s¸ub¥efix
(
ö_iÁddr
 *, 
u_öt
);

413 
ö_ifs¸ub_Æl
();

414 
ù_öput
(
mbuf
 *);

415 
ù_dúe˘_öput
(
mbuf
 *);

416 
ö_iÁdown
(
iÁddr
 *
iÁ
, );

417 
mbuf
 *
ù_åyf‹w¨d
(mbuf *);

418 *
ö_domiÁâach
(
i‚ë
 *);

419 
ö_domifdëach
(
i‚ë
 *, *);

423 
ö_πÆloc_ign
(
rouã
 *
ro
, 
u_l⁄g
 
ignÊags
, 
u_öt
 
fibnum
);

424 
ö_πªdúe˘
(
sockaddr
 *, sockaddr *,

425 
sockaddr
 *, , sockadd∏*, 
u_öt
);

429 
	~<√töë6/ö6_v¨.h
>

	@/usr/include/stdarg.h

6 
	~<x86/°d¨g.h
>

	@/usr/include/stddef.h

36 #i‚de‡
_STDDEF_H_


37 
	#_STDDEF_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<sys/_nuŒ.h
>

41 
	~<sys/_ty≥s.h
>

43 #i‚de‡
_PTRDIFF_T_DECLARED


44 
__±rdiff_t
 
	t±rdiff_t
;

45 
	#_PTRDIFF_T_DECLARED


	)

48 #i‡
__BSD_VISIBLE


49 #i‚de‡
_RUNE_T_DECLARED


50 
__ru√_t
 
	tru√_t
;

51 
	#_RUNE_T_DECLARED


	)

55 #i‚de‡
_SIZE_T_DECLARED


56 
__size_t
 
	tsize_t
;

57 
	#_SIZE_T_DECLARED


	)

60 #i‚def 
__˝lu•lus


61 #i‚de‡
_WCHAR_T_DECLARED


62 
___wch¨_t
 
	twch¨_t
;

63 
	#_WCHAR_T_DECLARED


	)

67 #i‡
__ISO_C_VISIBLE
 >2011 || 
__˝lu•lus
 >= 201103L

68 #i‚de‡
__CLANG_MAX_ALIGN_T_DEFINED


69 
__max_Æign_t
 
	tmax_Æign_t
;

70 
	#__CLANG_MAX_ALIGN_T_DEFINED


	)

71 
	#_GCC_MAX_ALIGN_T


	)

75 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

77 #i‡
__EXT1_VISIBLE


79 #i‚de‡
_RSIZE_T_DEFINED


80 
	#_RSIZE_T_DEFINED


	)

81 
size_t
 
	trsize_t
;

	@/usr/include/sys/_cpuset.h

34 #i‚de‡
_SYS__CPUSET_H_


35 
	#_SYS__CPUSET_H_


	)

37 
	~<sys/_bô£t.h
>

39 #ifde‡
_KERNEL


40 
	#CPU_SETSIZE
 
MAXCPU


	)

43 
	#CPU_MAXSIZE
 256

	)

45 #i‚def 
CPU_SETSIZE


46 
	#CPU_SETSIZE
 
CPU_MAXSIZE


	)

49 
BITSET_DEFINE
(
_˝u£t
, 
CPU_SETSIZE
);

50 
_˝u£t
 
	t˝u£t_t
;

	@/usr/include/sys/_lock.h

33 #i‚de‡
_SYS__LOCK_H_


34 
	#_SYS__LOCK_H_


	)

36 
	slock_obje˘
 {

37 c⁄° *
	mlo_«me
;

38 
u_öt
 
	mlo_Êags
;

39 
u_öt
 
	mlo_d©a
;

40 
wô√ss
 *
	mlo_wô√ss
;

	@/usr/include/sys/_mutex.h

33 #i‚de‡
_SYS__MUTEX_H_


34 
	#_SYS__MUTEX_H_


	)

36 
	~<machöe/∑øm.h
>

47 
	smtx
 {

48 
lock_obje˘
 
	mlock_obje˘
;

49 vﬁ©ûê
uöçå_t
 
	mmtx_lock
;

61 
	smtx_∑dÆign
 {

62 
lock_obje˘
 
	mlock_obje˘
;

63 vﬁ©ûê
uöçå_t
 
	mmtx_lock
;

64 } 
__Æig√d
(
CACHE_LINE_SIZE
);

	@/usr/include/sys/_null.h

31 #i‚de‡
NULL


33 #i‡!
deföed
(
__˝lu•lus
)

34 
	#NULL
 ((*)0)

	)

36 #i‡
__˝lu•lus
 >= 201103L

37 
	#NULL
 
nuŒ±r


	)

38 #ñi‡
deföed
(
__GNUG__
Ë&& deföed(
__GNUC__
) && __GNUC__ >= 4

39 
	#NULL
 
__nuŒ


	)

41 #i‡
deföed
(
__LP64__
)

42 
	#NULL
 (0L)

	)

44 
	#NULL
 0

	)

	@/usr/include/sys/_sigset.h

40 #i‚de‡
_SYS__SIGSET_H_


41 
	#_SYS__SIGSET_H_


	)

46 
	#_SIG_WORDS
 4

	)

47 
	#_SIG_MAXSIG
 128

	)

48 
	#_SIG_IDX
(
sig
Ë((sigË- 1)

	)

49 
	#_SIG_WORD
(
sig
Ë(
	`_SIG_IDX
(sigË>> 5)

	)

50 
	#_SIG_BIT
(
sig
Ë(1 << (
	`_SIG_IDX
(sigË& 31))

	)

51 
	#_SIG_VALID
(
sig
Ë((sigË<
_SIG_MAXSIG
 && (sigË> 0)

	)

53 
	s__sig£t
 {

54 
__uöt32_t
 
	m__bôs
[
_SIG_WORDS
];

55 } 
	t__sig£t_t
;

57 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

58 
	tosig£t_t
;

	@/usr/include/sys/_stdarg.h

33 #i‚de‡
_SYS__STDARG_H_


34 
	#_SYS__STDARG_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

39 #i‚de‡
_VA_LIST_DECLARED


40 
	#_VA_LIST_DECLARED


	)

41 
__va_li°
 
	tva_li°
;

44 #ifde‡
__GNUCLIKE_BUILTIN_STDARG


45 
	#va_°¨t
(
≠
, 
œ°
Ë
	`__buûtö_va_°¨t
(◊p), (œ°))

	)

46 
	#va_¨g
(
≠
, 
ty≥
Ë
	`__buûtö_va_¨g
(◊p),Åy≥)

	)

47 
	#__va_c›y
(
de°
, 
§c
Ë
	`__buûtö_va_c›y
((de°), (§c))

	)

48 #i‡
__ISO_C_VISIBLE
 >= 1999

49 
	#va_c›y
(
de°
, 
§c
Ë
	`__va_c›y
(de°, src)

	)

51 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

	@/usr/include/sys/_types.h

31 #i‚de‡
_SYS__TYPES_H_


32 
	#_SYS__TYPES_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<machöe/_ty≥s.h
>

40 
__öt32_t
 
	t__blksize_t
;

41 
__öt64_t
 
	t__blk˙t_t
;

42 
__öt32_t
 
	t__˛ockid_t
;

43 
__uöt32_t
 
	t__fÊags_t
;

44 
__uöt64_t
 
	t__fsblk˙t_t
;

45 
__uöt64_t
 
	t__fsfû˙t_t
;

46 
__uöt32_t
 
	t__gid_t
;

47 
__öt64_t
 
	t__id_t
;

48 
__uöt64_t
 
	t__öo_t
;

49 
	t__key_t
;

50 
__öt32_t
 
	t__lwpid_t
;

51 
__uöt16_t
 
	t__mode_t
;

52 
	t__accmode_t
;

53 
	t__∆_ôem
;

54 
__uöt64_t
 
	t__∆ök_t
;

55 
__öt64_t
 
	t__off_t
;

56 
__öt64_t
 
	t__off64_t
;

57 
__öt32_t
 
	t__pid_t
;

58 
__öt64_t
 
	t__æim_t
;

61 
__uöt8_t
 
	t__ß_Ámûy_t
;

62 
__uöt32_t
 
	t__sockÀn_t
;

63 
	t__su£c⁄ds_t
;

64 
__timî
 *
	t__timî_t
;

65 
__mq
 *
	t__mqd_t
;

66 
__uöt32_t
 
	t__uid_t
;

67 
	t__u£c⁄ds_t
;

68 
	t__˝uwhich_t
;

69 
	t__˝uÀvñ_t
;

70 
	t__˝u£tid_t
;

90 
	t__˘_ru√_t
;

91 
__˘_ru√_t
 
	t__ru√_t
;

92 
__˘_ru√_t
 
	t__wöt_t
;

95 #i‡!
deföed
(
__˛™g__
Ë|| !deföed(
__˝lu•lus
)

96 
__uöt_Àa°16_t
 
	t__ch¨16_t
;

97 
__uöt_Àa°32_t
 
	t__ch¨32_t
;

100 #i‡
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

101 
	#_CHAR16_T_DECLARED


	)

102 
	#_CHAR32_T_DECLARED


	)

106 
__max_Æign1
 
__Æig√d
(
_Alignof
());

107 #i‚de‡
_STANDALONE


108 
__max_Æign2
 
__Æig√d
(
_Alignof
());

110 } 
	t__max_Æign_t
;

112 
__uöt64_t
 
	t__dev_t
;

114 
__uöt32_t
 
	t__fix±_t
;

121 
	m__mb°©e8
[128];

122 
__öt64_t
 
	m_mb°©eL
;

123 } 
	t__mb°©e_t
;

125 
__uötmax_t
 
	t__rm™_ªs_t
;

131 #ifde‡
__GNUCLIKE_BUILTIN_VARARGS


132 
__buûtö_va_li°
 
	t__va_li°
;

136 #i‡
deföed
(
__GNUC_VA_LIST_COMPATIBILITY
Ë&& !deföed(
__GNUC_VA_LIST
) \

137 && !
	$deföed
(
__NO_GNUC_VA_LIST
)

138 
	#__GNUC_VA_LIST


	)

139 
__va_li°
 
	t__gnuc_va_li°
;

147 
	#__INO64


	)

	@/usr/include/sys/agpio.h

31 #i‚de‡
_SYS_AGPIO_H_


32 
	#_SYS_AGPIO_H_


	)

37 
	#AGP_PAGE_SIZE
 4096

	)

38 
	#AGP_PAGE_SHIFT
 12

	)

46 
	#AGP_MODE_GET_RQ
(
x
Ë(((xË& 0xff000000UË>> 24)

	)

47 
	#AGP_MODE_GET_ARQSZ
(
x
Ë(((xË& 0x0000e000UË>> 13)

	)

48 
	#AGP_MODE_GET_CAL
(
x
Ë(((xË& 0x00001c00UË>> 10)

	)

49 
	#AGP_MODE_GET_SBA
(
x
Ë(((xË& 0x00000200UË>> 9)

	)

50 
	#AGP_MODE_GET_AGP
(
x
Ë(((xË& 0x00000100UË>> 8)

	)

51 
	#AGP_MODE_GET_GART_64
(
x
Ë(((xË& 0x00000080UË>> 7)

	)

52 
	#AGP_MODE_GET_OVER_4G
(
x
Ë(((xË& 0x00000020UË>> 5)

	)

53 
	#AGP_MODE_GET_FW
(
x
Ë(((xË& 0x00000010UË>> 4)

	)

54 
	#AGP_MODE_GET_MODE_3
(
x
Ë(((xË& 0x00000008UË>> 3)

	)

55 
	#AGP_MODE_GET_RATE
(
x
Ë((xË& 0x00000007U)

	)

56 
	#AGP_MODE_SET_RQ
(
x
,
v
Ë(((xË& ~0xff000000UË| ((vË<< 24))

	)

57 
	#AGP_MODE_SET_ARQSZ
(
x
,
v
Ë(((xË& ~0x0000e000UË| ((vË<< 13))

	)

58 
	#AGP_MODE_SET_CAL
(
x
,
v
Ë(((xË& ~0x00001c00UË| ((vË<< 10))

	)

59 
	#AGP_MODE_SET_SBA
(
x
,
v
Ë(((xË& ~0x00000200UË| ((vË<< 9))

	)

60 
	#AGP_MODE_SET_AGP
(
x
,
v
Ë(((xË& ~0x00000100UË| ((vË<< 8))

	)

61 
	#AGP_MODE_SET_GART_64
(
x
,
v
Ë(((xË& ~0x00000080UË| ((vË<< 7))

	)

62 
	#AGP_MODE_SET_OVER_4G
(
x
,
v
Ë(((xË& ~0x00000020UË| ((vË<< 5))

	)

63 
	#AGP_MODE_SET_FW
(
x
,
v
Ë(((xË& ~0x00000010UË| ((vË<< 4))

	)

64 
	#AGP_MODE_SET_MODE_3
(
x
,
v
Ë(((xË& ~0x00000008UË| ((vË<< 3))

	)

65 
	#AGP_MODE_SET_RATE
(
x
,
v
Ë(((xË& ~0x00000007UË| (v))

	)

66 
	#AGP_MODE_V2_RATE_1x
 0x00000001

	)

67 
	#AGP_MODE_V2_RATE_2x
 0x00000002

	)

68 
	#AGP_MODE_V2_RATE_4x
 0x00000004

	)

69 
	#AGP_MODE_V3_RATE_4x
 0x00000001

	)

70 
	#AGP_MODE_V3_RATE_8x
 0x00000002

	)

71 
	#AGP_MODE_V3_RATE_RSVD
 0x00000004

	)

74 
	#AGP_MODE_GET_4G
(
x
Ë
	`AGP_MODE_GET_OVER_4G
(x)

	)

75 
	#AGP_MODE_SET_4G
(
x
Ë
	`AGP_MODE_SET_OVER_4G
(x)

	)

76 
	#AGP_MODE_RATE_1x
 
AGP_MODE_V2_RATE_1x


	)

77 
	#AGP_MODE_RATE_2x
 
AGP_MODE_V2_RATE_2x


	)

78 
	#AGP_MODE_RATE_4x
 
AGP_MODE_V2_RATE_4x


	)

80 
	#AGPIOC_BASE
 'A'

	)

81 
	#AGPIOC_INFO
 
	`_IOR
 (
AGPIOC_BASE
, 0, 
agp_öfo
)

	)

82 
	#AGPIOC_ACQUIRE
 
	`_IO
 (
AGPIOC_BASE
, 1)

	)

83 
	#AGPIOC_RELEASE
 
	`_IO
 (
AGPIOC_BASE
, 2)

	)

84 
	#AGPIOC_SETUP
 
	`_IOW
 (
AGPIOC_BASE
, 3, 
agp_£tup
)

	)

86 
	#AGPIOC_RESERVE
 
	`_IOW
 (
AGPIOC_BASE
, 4, 
agp_ªgi⁄
)

	)

87 
	#AGPIOC_PROTECT
 
	`_IOW
 (
AGPIOC_BASE
, 5, 
agp_ªgi⁄
)

	)

89 
	#AGPIOC_ALLOCATE
 
	`_IOWR
(
AGPIOC_BASE
, 6, 
agp_Æloˇã
)

	)

90 
	#AGPIOC_DEALLOCATE
 
	`_IOW
 (
AGPIOC_BASE
, 7, )

	)

91 
	#AGPIOC_BIND
 
	`_IOW
 (
AGPIOC_BASE
, 8, 
agp_böd
)

	)

92 
	#AGPIOC_UNBIND
 
	`_IOW
 (
AGPIOC_BASE
, 9, 
agp_unböd
)

	)

93 
	#AGPIOC_CHIPSET_FLUSH
 
	`_IO
 (
AGPIOC_BASE
, 10)

	)

95 
	s_agp_vîsi⁄
 {

96 
u_öt16_t
 
	mmaj‹
;

97 
u_öt16_t
 
	mmö‹
;

98 } 
	tagp_vîsi⁄
;

100 
	s_agp_öfo
 {

101 
agp_vîsi⁄
 
	mvîsi⁄
;

102 
u_öt32_t
 
	mbridge_id
;

103 
u_öt32_t
 
	magp_mode
;

104 
off_t
 
	m≠î_ba£
;

105 
size_t
 
	m≠î_size
;

106 
size_t
 
	mpg_tŸÆ
;

107 
size_t
 
	mpg_sy°em
;

108 
size_t
 
	mpg_u£d
;

109 } 
	tagp_öfo
;

111 
	s_agp_£tup
 {

112 
u_öt32_t
 
	magp_mode
;

113 } 
	tagp_£tup
;

119 
	s_agp_£gmít
 {

120 
off_t
 
	mpg_°¨t
;

121 
size_t
 
	mpg_cou¡
;

122 
	m¥Ÿ
;

123 } 
	tagp_£gmít
;

125 
	s_agp_ªgi⁄
 {

126 
pid_t
 
	mpid
;

127 
size_t
 
	m£g_cou¡
;

128 
_agp_£gmít
 *
	m£g_li°
;

129 } 
	tagp_ªgi⁄
;

132 
	s_agp_Æloˇã
 {

133 
	mkey
;

134 
size_t
 
	mpg_cou¡
;

135 
u_öt32_t
 
	mty≥
;

136 
u_öt32_t
 
	mphysiˇl
;

140 } 
	tagp_Æloˇã
;

142 
	s_agp_böd
 {

143 
	mkey
;

144 
off_t
 
	mpg_°¨t
;

145 } 
	tagp_böd
;

147 
	s_agp_unböd
 {

148 
	mkey
;

149 
u_öt32_t
 
	m¥i‹ôy
;

150 } 
	tagp_unböd
;

	@/usr/include/sys/atomic_common.h

33 #i‚de‡
_SYS_ATOMIC_COMMON_H_


34 
	#_SYS_ATOMIC_COMMON_H_


	)

36 #i‚de‡
_MACHINE_ATOMIC_H_


37 #îr‹ dÿ
nŸ
 
ö˛ude
 
this
 
hódî
, 
u£
 
machöe
/
©omic
.
h


40 
	#©omic_lﬂd_ch¨
(
p
Ë(*(vﬁ©ûê
u_ch¨
 *)’))

	)

41 
	#©omic_lﬂd_sh‹t
(
p
Ë(*(vﬁ©ûê
u_sh‹t
 *)’))

	)

42 
	#©omic_lﬂd_öt
(
p
Ë(*(vﬁ©ûê
u_öt
 *)’))

	)

43 
	#©omic_lﬂd_l⁄g
(
p
Ë(*(vﬁ©ûê
u_l⁄g
 *)’))

	)

44 
	#©omic_lﬂd_±r
(
p
Ë(*(vﬁ©ûê
uöçå_t
*)’))

	)

45 
	#©omic_lﬂd_8
(
p
Ë(*(vﬁ©ûê
uöt8_t
 *)’))

	)

46 
	#©omic_lﬂd_16
(
p
Ë(*(vﬁ©ûê
uöt16_t
 *)’))

	)

47 
	#©omic_lﬂd_32
(
p
Ë(*(vﬁ©ûê
uöt32_t
 *)’))

	)

48 #ifde‡
_LP64


49 
	#©omic_lﬂd_64
(
p
Ë(*(vﬁ©ûê
uöt64_t
 *)’))

	)

52 
	#©omic_°‹e_ch¨
(
p
, 
v
) \

53 (*(vﬁ©ûê
u_ch¨
 *)(
p
Ë(u_ch¨)(
v
))

	)

54 
	#©omic_°‹e_sh‹t
(
p
, 
v
) \

55 (*(vﬁ©ûê
u_sh‹t
 *)(
p
Ë(u_sh‹t)(
v
))

	)

56 
	#©omic_°‹e_öt
(
p
, 
v
) \

57 (*(vﬁ©ûê
u_öt
 *)(
p
Ë(u_öt)(
v
))

	)

58 
	#©omic_°‹e_l⁄g
(
p
, 
v
) \

59 (*(vﬁ©ûê
u_l⁄g
 *)(
p
Ë(u_l⁄g)(
v
))

	)

60 
	#©omic_°‹e_±r
(
p
, 
v
) \

61 (*(
uöçå_t
 *)(
p
Ë(uöçå_t)(
v
))

	)

62 
	#©omic_°‹e_8
(
p
, 
v
) \

63 (*(vﬁ©ûê
uöt8_t
 *)(
p
Ë(uöt8_t)(
v
))

	)

64 
	#©omic_°‹e_16
(
p
, 
v
) \

65 (*(vﬁ©ûê
uöt16_t
 *)(
p
Ë(uöt16_t)(
v
))

	)

66 
	#©omic_°‹e_32
(
p
, 
v
) \

67 (*(vﬁ©ûê
uöt32_t
 *)(
p
Ë(uöt32_t)(
v
))

	)

68 #ifde‡
_LP64


69 
	#©omic_°‹e_64
(
p
, 
v
) \

70 (*(vﬁ©ûê
uöt64_t
 *)(
p
Ë(uöt64_t)(
v
))

	)

	@/usr/include/sys/bus.h

31 #i‚de‡
_SYS_BUS_H_


32 
	#_SYS_BUS_H_


	)

34 
	~<machöe/_limôs.h
>

35 
	~<machöe/_bus.h
>

36 
	~<sys/_bus_dma.h
>

37 
	~<sys/ioccom.h
>

47 
	su_busöfo
 {

48 
	mub_vîsi⁄
;

49 
	#BUS_USER_VERSION
 2

	)

50 
	mub_gíî©i⁄
;

56 
	edevi˚_°©e
 {

57 
	mDS_NOTPRESENT
 = 10,

58 
	mDS_ALIVE
 = 20,

59 
	mDS_ATTACHING
 = 25,

60 
	mDS_ATTACHED
 = 30,

61 
	mDS_BUSY
 = 40

62 } 
	tdevi˚_°©e_t
;

69 
	#BUS_USER_BUFFER
 (3*1024)

	)

70 
	su_devi˚
 {

71 
uöçå_t
 
	mdv_h™dÀ
;

72 
uöçå_t
 
	mdv_∑ª¡
;

73 
uöt32_t
 
	mdv_devÊags
;

74 
uöt16_t
 
	mdv_Êags
;

75 
devi˚_°©e_t
 
	mdv_°©e
;

76 
	mdv_fõlds
[
BUS_USER_BUFFER
];

86 
	#DF_ENABLED
 0x01

	)

87 
	#DF_FIXEDCLASS
 0x02

	)

88 
	#DF_WILDCARD
 0x04

	)

89 
	#DF_DESCMALLOCED
 0x08

	)

90 
	#DF_QUIET
 0x10

	)

91 
	#DF_DONENOMATCH
 0x20

	)

92 
	#DF_EXTERNALSOFTC
 0x40

	)

93 
	#DF_REBID
 0x80

	)

94 
	#DF_SUSPENDED
 0x100

	)

95 
	#DF_QUIET_CHILDREN
 0x200

	)

96 
	#DF_ATTACHED_ONCE
 0x400

	)

97 
	#DF_NEEDNOMATCH
 0x800

	)

105 
	sdevªq_buf„r
 {

106 *
	mbuf„r
;

107 
size_t
 
	mÀngth
;

110 
	sdevªq
 {

111 
	mdr_«me
[128];

112 
	mdr_Êags
;

114 
devªq_buf„r
 
	mdru_buf„r
;

115 *
	mdru_d©a
;

116 } 
	mdr_dru
;

117 
	#dr_buf„r
 
dr_dru
.
dru_buf„r


	)

118 
	#dr_d©a
 
dr_dru
.
dru_d©a


	)

121 
	#DEV_ATTACH
 
	`_IOW
('D', 1, 
devªq
)

	)

122 
	#DEV_DETACH
 
	`_IOW
('D', 2, 
devªq
)

	)

123 
	#DEV_ENABLE
 
	`_IOW
('D', 3, 
devªq
)

	)

124 
	#DEV_DISABLE
 
	`_IOW
('D', 4, 
devªq
)

	)

125 
	#DEV_SUSPEND
 
	`_IOW
('D', 5, 
devªq
)

	)

126 
	#DEV_RESUME
 
	`_IOW
('D', 6, 
devªq
)

	)

127 
	#DEV_SET_DRIVER
 
	`_IOW
('D', 7, 
devªq
)

	)

128 
	#DEV_CLEAR_DRIVER
 
	`_IOW
('D', 8, 
devªq
)

	)

129 
	#DEV_RESCAN
 
	`_IOW
('D', 9, 
devªq
)

	)

130 
	#DEV_DELETE
 
	`_IOW
('D', 10, 
devªq
)

	)

131 
	#DEV_FREEZE
 
	`_IOW
('D', 11, 
devªq
)

	)

132 
	#DEV_THAW
 
	`_IOW
('D', 12, 
devªq
)

	)

135 
	#DEVF_FORCE_DETACH
 0x0000001

	)

138 
	#DEVF_SET_DRIVER_DETACH
 0x0000001

	)

141 
	#DEVF_CLEAR_DRIVER_DETACH
 0x0000001

	)

144 
	#DEVF_FORCE_DELETE
 0x0000001

	)

146 #ifde‡
_KERNEL


148 
	~<sys/evíth™dÀr.h
>

149 
	~<sys/kobj.h
>

156 
boﬁón_t
 
dev˘l_¥o˚ss_ru¬ög
();

157 
dev˘l_nŸify_f
(c⁄° *
__sy°em
, c⁄° *
__subsy°em
,

158 c⁄° *
__ty≥
, c⁄° *
__d©a
, 
__Êags
);

159 
dev˘l_nŸify
(c⁄° *
__sy°em
, c⁄° *
__subsy°em
,

160 c⁄° *
__ty≥
, c⁄° *
__d©a
);

161 
dev˘l_queue_d©a_f
(*
__d©a
, 
__Êags
);

162 
dev˘l_queue_d©a
(*
__d©a
);

163 
	gsbuf
;

164 
dev˘l_ß„_quŸe_sb
(
sbuf
 *
__sb
, c⁄° *
__§c
);

170 (*
	tdev_lookup_‚
)(*
	t¨g
, c⁄° *
	t«me
,

171 
	tdevi˚_t
 *
	tªsu…
);

172 
	`EVENTHANDLER_DECLARE
(
dev_lookup
, 
dev_lookup_‚
);

178 
kobj_˛ass
 
	tdrivî_t
;

200 
dev˛ass
 *
	tdev˛ass_t
;

205 
	#devi˚_mëhod_t
 
kobj_mëhod_t


	)

225 
	#FILTER_STRAY
 0x01

	)

226 
	#FILTER_HANDLED
 0x02

	)

227 
	#FILTER_SCHEDULE_THREAD
 0x04

	)

244 
	tdrivî_fûãr_t
(*);

245 
	tdrivî_öå_t
(*);

261 
	eöå_ty≥
 {

262 
INTR_TYPE_TTY
 = 1,

263 
INTR_TYPE_BIO
 = 2,

264 
INTR_TYPE_NET
 = 4,

265 
INTR_TYPE_CAM
 = 8,

266 
INTR_TYPE_MISC
 = 16,

267 
INTR_TYPE_CLK
 = 32,

268 
INTR_TYPE_AV
 = 64,

269 
INTR_EXCL
 = 256,

270 
INTR_MPSAFE
 = 512,

271 
INTR_ENTROPY
 = 1024,

272 
INTR_MD1
 = 4096,

273 
INTR_MD2
 = 8192,

274 
INTR_MD3
 = 16384,

275 
INTR_MD4
 = 32768

278 
	eöå_åiggî
 {

279 
INTR_TRIGGER_INVALID
 = -1,

280 
INTR_TRIGGER_CONFORM
 = 0,

281 
INTR_TRIGGER_EDGE
 = 1,

282 
INTR_TRIGGER_LEVEL
 = 2

285 
	eöå_pﬁ¨ôy
 {

286 
INTR_POLARITY_CONFORM
 = 0,

287 
INTR_POLARITY_HIGH
 = 1,

288 
INTR_POLARITY_LOW
 = 2

296 
	e˝u_£ts
 {

297 
LOCAL_CPUS
 = 0,

298 
INTR_CPUS


301 (*
	tdev›_t
)();

309 
	sdrivî
 {

310 
KOBJ_CLASS_FIELDS
;

316 
	sªsour˚_m≠
 {

317 
bus_•a˚_èg_t
 
r_bu°ag
;

318 
bus_•a˚_h™dÀ_t
 
r_bush™dÀ
;

319 
bus_size_t
 
r_size
;

320 *
r_vaddr
;

326 
	sªsour˚_m≠_ªque°
 {

327 
size_t
 
size
;

328 
rm™_ªs_t
 
off£t
;

329 
rm™_ªs_t
 
Àngth
;

330 
vm_mem©å_t
 
mem©å
;

333 
	`ªsour˚_öô_m≠_ªque°_im∂
(
ªsour˚_m≠_ªque°
 *
_¨gs
,

334 
size_t
 
_sz
);

335 
	#ªsour˚_öô_m≠_ªque°
(
rmr
) \

336 
	`ªsour˚_öô_m≠_ªque°_im∂
((
rmr
), (*‘mr)))

	)

342 
ªsour˚
;

347 
	sªsour˚_li°_íåy
 {

348 
	`STAILQ_ENTRY
(
ªsour˚_li°_íåy
Ë
lök
;

349 
ty≥
;

350 
rid
;

351 
Êags
;

352 
ªsour˚
 *
ªs
;

353 
rm™_ªs_t
 
°¨t
;

354 
rm™_ªs_t
 
íd
;

355 
rm™_ªs_t
 
cou¡
;

357 
	`STAILQ_HEAD
(
ªsour˚_li°
, 
ªsour˚_li°_íåy
);

359 
	#RLE_RESERVED
 0x0001

	)

360 
	#RLE_ALLOCATED
 0x0002

	)

361 
	#RLE_PREFETCH
 0x0004

	)

363 
	`ªsour˚_li°_öô
(
ªsour˚_li°
 *
æ
);

364 
	`ªsour˚_li°_‰ì
(
ªsour˚_li°
 *
æ
);

365 
ªsour˚_li°_íåy
 *

366 
	`ªsour˚_li°_add
(
ªsour˚_li°
 *
æ
,

367 
ty≥
, 
rid
,

368 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
,Ñm™_ªs_à
cou¡
);

369 
	`ªsour˚_li°_add_√xt
(
ªsour˚_li°
 *
æ
,

370 
ty≥
,

371 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
,Ñm™_ªs_à
cou¡
);

372 
	`ªsour˚_li°_busy
(
ªsour˚_li°
 *
æ
,

373 
ty≥
, 
rid
);

374 
	`ªsour˚_li°_ª£rved
(
ªsour˚_li°
 *
æ
, 
ty≥
, 
rid
);

375 
ªsour˚_li°_íåy
*

376 
	`ªsour˚_li°_föd
(
ªsour˚_li°
 *
æ
,

377 
ty≥
, 
rid
);

378 
	`ªsour˚_li°_dñëe
(
ªsour˚_li°
 *
æ
,

379 
ty≥
, 
rid
);

380 
ªsour˚
 *

381 
	`ªsour˚_li°_Æloc
(
ªsour˚_li°
 *
æ
,

382 
devi˚_t
 
bus
, devi˚_à
chûd
,

383 
ty≥
, *
rid
,

384 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
,

385 
rm™_ªs_t
 
cou¡
, 
u_öt
 
Êags
);

386 
	`ªsour˚_li°_ªÀa£
(
ªsour˚_li°
 *
æ
,

387 
devi˚_t
 
bus
, devi˚_à
chûd
,

388 
ty≥
, 
rid
, 
ªsour˚
 *
ªs
);

389 
	`ªsour˚_li°_ªÀa£_a˘ive
(
ªsour˚_li°
 *
æ
,

390 
devi˚_t
 
bus
, devi˚_à
chûd
,

391 
ty≥
);

392 
ªsour˚
 *

393 
	`ªsour˚_li°_ª£rve
(
ªsour˚_li°
 *
æ
,

394 
devi˚_t
 
bus
, devi˚_à
chûd
,

395 
ty≥
, *
rid
,

396 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
,

397 
rm™_ªs_t
 
cou¡
, 
u_öt
 
Êags
);

398 
	`ªsour˚_li°_uƒe£rve
(
ªsour˚_li°
 *
æ
,

399 
devi˚_t
 
bus
, devi˚_à
chûd
,

400 
ty≥
, 
rid
);

401 
	`ªsour˚_li°_purge
(
ªsour˚_li°
 *
æ
);

402 
	`ªsour˚_li°_¥öt_ty≥
(
ªsour˚_li°
 *
æ
,

403 c⁄° *
«me
, 
ty≥
,

404 c⁄° *
f‹m©
);

409 
devi˚_t
 
roŸ_bus
;

410 
dev˛ass_t
 
roŸ_dev˛ass
;

411 
	`roŸ_bus_c⁄figuª
();

417 
	`bus_gíîic_a˘iv©e_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

418 
rid
, 
ªsour˚
 *
r
);

419 
devi˚_t


420 
	`bus_gíîic_add_chûd
(
devi˚_t
 
dev
, 
u_öt
 
‹dî
, c⁄° *
«me
,

421 
unô
);

422 
	`bus_gíîic_adju°_ªsour˚
(
devi˚_t
 
bus
, devi˚_à
chûd
, 
ty≥
,

423 
ªsour˚
 *
r
, 
rm™_ªs_t
 
°¨t
,

424 
rm™_ªs_t
 
íd
);

425 
ªsour˚
 *

426 
	`bus_gíîic_Æloc_ªsour˚
(
devi˚_t
 
bus
, devi˚_à
chûd
, 
ty≥
,

427 *
rid
, 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
,

428 
rm™_ªs_t
 
cou¡
, 
u_öt
 
Êags
);

429 
	`bus_gíîic_©èch
(
devi˚_t
 
dev
);

430 
	`bus_gíîic_böd_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

431 
ªsour˚
 *
úq
, 
˝u
);

432 
	`bus_gíîic_chûd_¥e£¡
(
devi˚_t
 
dev
, devi˚_à
chûd
);

433 
	`bus_gíîic_c⁄fig_öå
(
devi˚_t
, , 
öå_åiggî
,

434 
öå_pﬁ¨ôy
);

435 
	`bus_gíîic_des¸ibe_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

436 
ªsour˚
 *
úq
, *
cookõ
,

437 c⁄° *
des¸
);

438 
	`bus_gíîic_dó˘iv©e_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

439 
rid
, 
ªsour˚
 *
r
);

440 
	`bus_gíîic_dëach
(
devi˚_t
 
dev
);

441 
	`bus_gíîic_drivî_added
(
devi˚_t
 
dev
, 
drivî_t
 *
drivî
);

442 
	`bus_gíîic_gë_˝us
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
˝u_£ts
 
›
,

443 
size_t
 
£tsize
, 
_˝u£t
 *
˝u£t
);

444 
bus_dma_èg_t


445 
	`bus_gíîic_gë_dma_èg
(
devi˚_t
 
dev
, devi˚_à
chûd
);

446 
bus_•a˚_èg_t


447 
	`bus_gíîic_gë_bus_èg
(
devi˚_t
 
dev
, devi˚_à
chûd
);

448 
	`bus_gíîic_gë_domaö
(
devi˚_t
 
dev
, devi˚_à
chûd
, *
domaö
);

449 
ªsour˚_li°
 *

450 
	`bus_gíîic_gë_ªsour˚_li°
 (
devi˚_t
, device_t);

451 
	`bus_gíîic_m≠_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

452 
ªsour˚
 *
r
,

453 
ªsour˚_m≠_ªque°
 *
¨gs
,

454 
ªsour˚_m≠
 *
m≠
);

455 
	`bus_gíîic_√w_∑ss
(
devi˚_t
 
dev
);

456 
	`bus_¥öt_chûd_hódî
(
devi˚_t
 
dev
, devi˚_à
chûd
);

457 
	`bus_¥öt_chûd_domaö
(
devi˚_t
 
dev
, devi˚_à
chûd
);

458 
	`bus_¥öt_chûd_foŸî
(
devi˚_t
 
dev
, devi˚_à
chûd
);

459 
	`bus_gíîic_¥öt_chûd
(
devi˚_t
 
dev
, devi˚_à
chûd
);

460 
	`bus_gíîic_¥obe
(
devi˚_t
 
dev
);

461 
	`bus_gíîic_ªad_iv¨
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
which
,

462 
uöçå_t
 *
ªsu…
);

463 
	`bus_gíîic_ªÀa£_ªsour˚
(
devi˚_t
 
bus
, devi˚_à
chûd
,

464 
ty≥
, 
rid
, 
ªsour˚
 *
r
);

465 
	`bus_gíîic_ªsume
(
devi˚_t
 
dev
);

466 
	`bus_gíîic_ªsume_chûd
(
devi˚_t
 
dev
, devi˚_à
chûd
);

467 
	`bus_gíîic_£tup_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

468 
ªsour˚
 *
úq
, 
Êags
,

469 
drivî_fûãr_t
 *
fûãr
, 
drivî_öå_t
 *
öå
,

470 *
¨g
, **
cookõp
);

472 
ªsour˚
 *

473 
	`bus_gíîic_æ_Æloc_ªsour˚
 (
devi˚_t
, device_t, , *,

474 
rm™_ªs_t
,Ñm™_ªs_t,Ñm™_ªs_t, 
u_öt
);

475 
	`bus_gíîic_æ_dñëe_ªsour˚
 (
devi˚_t
, device_t, , );

476 
	`bus_gíîic_æ_gë_ªsour˚
 (
devi˚_t
, devi˚_t, , , 
rm™_ªs_t
 *,

477 
rm™_ªs_t
 *);

478 
	`bus_gíîic_æ_£t_ªsour˚
 (
devi˚_t
, devi˚_t, , , 
rm™_ªs_t
,

479 
rm™_ªs_t
);

480 
	`bus_gíîic_æ_ªÀa£_ªsour˚
 (
devi˚_t
, device_t, , ,

481 
ªsour˚
 *);

483 
	`bus_gíîic_shutdown
(
devi˚_t
 
dev
);

484 
	`bus_gíîic_su•íd
(
devi˚_t
 
dev
);

485 
	`bus_gíîic_su•íd_chûd
(
devi˚_t
 
dev
, devi˚_à
chûd
);

486 
	`bus_gíîic_ã¨down_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

487 
ªsour˚
 *
úq
, *
cookõ
);

488 
	`bus_gíîic_unm≠_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

489 
ªsour˚
 *
r
,

490 
ªsour˚_m≠
 *
m≠
);

491 
	`bus_gíîic_wrôe_iv¨
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
which
,

492 
uöçå_t
 
vÆue
);

493 
	`bus_nuŒ_ªsˇn
(
devi˚_t
 
dev
);

500 
	sªsour˚_•ec
 {

501 
ty≥
;

502 
rid
;

503 
Êags
;

505 
	#RESOURCE_SPEC_END
 {-1, 0, 0
	}

	)
}

507 
bus_Æloc_ªsour˚s
(
devi˚_t
 
dev
, 
ªsour˚_•ec
 *
rs
,

508 
ªsour˚
 **
ªs
);

509 
bus_ªÀa£_ªsour˚s
(
devi˚_t
 
dev
, c⁄° 
ªsour˚_•ec
 *
rs
,

510 
ªsour˚
 **
ªs
);

512 
bus_adju°_ªsour˚
(
devi˚_t
 
chûd
, 
ty≥
, 
ªsour˚
 *
r
,

513 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
);

514 
ªsour˚
 *
bus_Æloc_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, *
rid
,

515 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
,

516 
rm™_ªs_t
 
cou¡
, 
u_öt
 
Êags
);

517 
bus_a˘iv©e_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

518 
ªsour˚
 *
r
);

519 
bus_dó˘iv©e_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

520 
ªsour˚
 *
r
);

521 
bus_m≠_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
ªsour˚
 *
r
,

522 
ªsour˚_m≠_ªque°
 *
¨gs
,

523 
ªsour˚_m≠
 *
m≠
);

524 
bus_unm≠_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
ªsour˚
 *
r
,

525 
ªsour˚_m≠
 *
m≠
);

526 
bus_gë_˝us
(
devi˚_t
 
dev
, 
˝u_£ts
 
›
, 
size_t
 
£tsize
,

527 
_˝u£t
 *
˝u£t
);

528 
bus_dma_èg_t
 
bus_gë_dma_èg
(
devi˚_t
 
dev
);

529 
bus_•a˚_èg_t
 
bus_gë_bus_èg
(
devi˚_t
 
dev
);

530 
bus_gë_domaö
(
devi˚_t
 
dev
, *
domaö
);

531 
bus_ªÀa£_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

532 
ªsour˚
 *
r
);

533 
bus_‰ì_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
ªsour˚
 *
r
);

534 
bus_£tup_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
r
, 
Êags
,

535 
drivî_fûãr_t
 
fûãr
, 
drivî_öå_t
 
h™dÀr
,

536 *
¨g
, **
cookõp
);

537 
bus_ã¨down_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
r
, *
cookõ
);

538 
bus_böd_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
r
, 
˝u
);

539 
	$bus_des¸ibe_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
úq
, *
cookõ
,

540 c⁄° *
fmt
, ...Ë
	`__¥ötÊike
(4, 5);

541 
	`bus_£t_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

542 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
cou¡
);

543 
	`bus_gë_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

544 
rm™_ªs_t
 *
°¨ç
,Ñm™_ªs_à*
cou¡p
);

545 
rm™_ªs_t
 
	`bus_gë_ªsour˚_°¨t
(
devi˚_t
 
dev
, 
ty≥
, 
rid
);

546 
rm™_ªs_t
 
	`bus_gë_ªsour˚_cou¡
(
devi˚_t
 
dev
, 
ty≥
, 
rid
);

547 
	`bus_dñëe_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
);

548 
	`bus_chûd_¥e£¡
(
devi˚_t
 
chûd
);

549 
	`bus_chûd_≤pöfo_°r
(
devi˚_t
 
chûd
, *
buf
, 
size_t
 
buÊí
);

550 
	`bus_chûd_loˇti⁄_°r
(
devi˚_t
 
chûd
, *
buf
, 
size_t
 
buÊí
);

551 
	`bus_íumî©e_höãd_chûdªn
(
devi˚_t
 
bus
);

553 
__ölöe
 
ªsour˚
 *

554 
	$bus_Æloc_ªsour˚_™y
(
devi˚_t
 
dev
, 
ty≥
, *
rid
, 
u_öt
 
Êags
)

556  (
	`bus_Æloc_ªsour˚
(
dev
, 
ty≥
, 
rid
, 0, ~0, 1, 
Êags
));

557 
	}
}

559 
__ölöe
 
ªsour˚
 *

560 
	$bus_Æloc_ªsour˚_™ywhîe
(
devi˚_t
 
dev
, 
ty≥
, *
rid
,

561 
rm™_ªs_t
 
cou¡
, 
u_öt
 
Êags
)

563  (
	`bus_Æloc_ªsour˚
(
dev
, 
ty≥
, 
rid
, 0, ~0, 
cou¡
, 
Êags
));

564 
	}
}

569 
devi˚_t
 
devi˚_add_chûd
(devi˚_à
dev
, c⁄° *
«me
, 
unô
);

570 
devi˚_t
 
devi˚_add_chûd_‹dîed
(devi˚_à
dev
, 
u_öt
 
‹dî
,

571 c⁄° *
«me
, 
unô
);

572 
devi˚_busy
(
devi˚_t
 
dev
);

573 
devi˚_dñëe_chûd
(
devi˚_t
 
dev
, devi˚_à
chûd
);

574 
devi˚_dñëe_chûdªn
(
devi˚_t
 
dev
);

575 
devi˚_©èch
(
devi˚_t
 
dev
);

576 
devi˚_dëach
(
devi˚_t
 
dev
);

577 
devi˚_dißbÀ
(
devi˚_t
 
dev
);

578 
devi˚_íabÀ
(
devi˚_t
 
dev
);

579 
devi˚_t
 
devi˚_föd_chûd
(devi˚_à
dev
, c⁄° *
˛as¢ame
,

580 
unô
);

581 c⁄° *
devi˚_gë_desc
(
devi˚_t
 
dev
);

582 
dev˛ass_t
 
devi˚_gë_dev˛ass
(
devi˚_t
 
dev
);

583 
drivî_t
 *
devi˚_gë_drivî
(
devi˚_t
 
dev
);

584 
u_öt32_t
 
devi˚_gë_Êags
(
devi˚_t
 
dev
);

585 
devi˚_t
 
devi˚_gë_∑ª¡
(devi˚_à
dev
);

586 
devi˚_gë_chûdªn
(
devi˚_t
 
dev
, devi˚_à**
li°p
, *
cou¡p
);

587 *
devi˚_gë_iv¨s
(
devi˚_t
 
dev
);

588 
devi˚_£t_iv¨s
(
devi˚_t
 
dev
, *
iv¨s
);

589 c⁄° *
devi˚_gë_«me
(
devi˚_t
 
dev
);

590 c⁄° *
devi˚_gë_«meunô
(
devi˚_t
 
dev
);

591 *
devi˚_gë_so·c
(
devi˚_t
 
dev
);

592 
devi˚_°©e_t
 
devi˚_gë_°©e
(
devi˚_t
 
dev
);

593 
devi˚_gë_unô
(
devi˚_t
 
dev
);

594 
sys˘l_˘x_li°
 *
devi˚_gë_sys˘l_˘x
(
devi˚_t
 
dev
);

595 
sys˘l_oid
 *
devi˚_gë_sys˘l_åì
(
devi˚_t
 
dev
);

596 
devi˚_has_quõt_chûdªn
(
devi˚_t
 
dev
);

597 
devi˚_is_Æive
(
devi˚_t
 
dev
);

598 
devi˚_is_©èched
(
devi˚_t
 
dev
);

599 
devi˚_is_íabÀd
(
devi˚_t
 
dev
);

600 
devi˚_is_su•íded
(
devi˚_t
 
dev
);

601 
devi˚_is_quõt
(
devi˚_t
 
dev
);

602 
devi˚_t
 
devi˚_lookup_by_«me
(c⁄° *
«me
);

603 
devi˚_¥öt_¥ëty«me
(
devi˚_t
 
dev
);

604 
	$devi˚_¥ötf
(
devi˚_t
 
dev
, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

605 
	`devi˚_¥obe
(
devi˚_t
 
dev
);

606 
	`devi˚_¥obe_™d_©èch
(
devi˚_t
 
dev
);

607 
	`devi˚_¥obe_chûd
(
devi˚_t
 
bus
, devi˚_à
dev
);

608 
	`devi˚_quõs˚
(
devi˚_t
 
dev
);

609 
	`devi˚_quõt
(
devi˚_t
 
dev
);

610 
	`devi˚_quõt_chûdªn
(
devi˚_t
 
dev
);

611 
	`devi˚_£t_desc
(
devi˚_t
 
dev
, c⁄° * 
desc
);

612 
	`devi˚_£t_desc_c›y
(
devi˚_t
 
dev
, c⁄° * 
desc
);

613 
	`devi˚_£t_dev˛ass
(
devi˚_t
 
dev
, c⁄° *
˛as¢ame
);

614 
	`devi˚_£t_dev˛ass_fixed
(
devi˚_t
 
dev
, c⁄° *
˛as¢ame
);

615 
	`devi˚_£t_drivî
(
devi˚_t
 
dev
, 
drivî_t
 *
drivî
);

616 
	`devi˚_£t_Êags
(
devi˚_t
 
dev
, 
u_öt32_t
 
Êags
);

617 
	`devi˚_£t_so·c
(
devi˚_t
 
dev
, *
so·c
);

618 
	`devi˚_‰ì_so·c
(*
so·c
);

619 
	`devi˚_˛aim_so·c
(
devi˚_t
 
dev
);

620 
	`devi˚_£t_unô
(
devi˚_t
 
dev
, 
unô
);

621 
	`devi˚_shutdown
(
devi˚_t
 
dev
);

622 
	`devi˚_unbusy
(
devi˚_t
 
dev
);

623 
	`devi˚_vîbo£
(
devi˚_t
 
dev
);

628 
	`dev˛ass_add_drivî
(
dev˛ass_t
 
dc
, 
drivî_t
 *
drivî
,

629 
∑ss
, 
dev˛ass_t
 *
d˝
);

630 
dev˛ass_t
 
	`dev˛ass_¸óã
(c⁄° *
˛as¢ame
);

631 
	`dev˛ass_dñëe_drivî
(
dev˛ass_t
 
bus˛ass
, 
drivî_t
 *
drivî
);

632 
dev˛ass_t
 
	`dev˛ass_föd
(c⁄° *
˛as¢ame
);

633 c⁄° *
	`dev˛ass_gë_«me
(
dev˛ass_t
 
dc
);

634 
devi˚_t
 
	`dev˛ass_gë_devi˚
(
dev˛ass_t
 
dc
, 
unô
);

635 *
	`dev˛ass_gë_so·c
(
dev˛ass_t
 
dc
, 
unô
);

636 
	`dev˛ass_gë_devi˚s
(
dev˛ass_t
 
dc
, 
devi˚_t
 **
li°p
, *
cou¡p
);

637 
	`dev˛ass_gë_drivîs
(
dev˛ass_t
 
dc
, 
drivî_t
 ***
li°p
, *
cou¡p
);

638 
	`dev˛ass_gë_cou¡
(
dev˛ass_t
 
dc
);

639 
	`dev˛ass_gë_maxunô
(
dev˛ass_t
 
dc
);

640 
	`dev˛ass_föd_‰ì_unô
(
dev˛ass_t
 
dc
, 
unô
);

641 
	`dev˛ass_£t_∑ª¡
(
dev˛ass_t
 
dc
, dev˛ass_à
pdc
);

642 
dev˛ass_t
 
	`dev˛ass_gë_∑ª¡
(dev˛ass_à
dc
);

643 
sys˘l_˘x_li°
 *
	`dev˛ass_gë_sys˘l_˘x
(
dev˛ass_t
 
dc
);

644 
sys˘l_oid
 *
	`dev˛ass_gë_sys˘l_åì
(
dev˛ass_t
 
dc
);

649 
	`ªsour˚_öt_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

650 *
ªsu…
);

651 
	`ªsour˚_l⁄g_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

652 *
ªsu…
);

653 
	`ªsour˚_°rög_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

654 c⁄° **
ªsu…
);

655 
	`ªsour˚_dißbÀd
(c⁄° *
«me
, 
unô
);

656 
	`ªsour˚_föd_m©ch
(*
™ch‹
, c⁄° **
«me
, *
unô
,

657 c⁄° *
ª¢ame
, c⁄° *
vÆue
);

658 
	`ªsour˚_föd_dev
(*
™ch‹
, c⁄° *
«me
, *
unô
,

659 c⁄° *
ª¢ame
, c⁄° *
vÆue
);

660 
	`ªsour˚_un£t_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
);

666 
	`bus_d©a_gíî©i⁄_check
(
gíî©i⁄
);

667 
	`bus_d©a_gíî©i⁄_upd©e
();

692 
	#BUS_PROBE_SPECIFIC
 0

	)

693 
	#BUS_PROBE_VENDOR
 (-10Ë

	)

694 
	#BUS_PROBE_DEFAULT
 (-20Ë

	)

695 
	#BUS_PROBE_LOW_PRIORITY
 (-40Ë

	)

696 
	#BUS_PROBE_GENERIC
 (-100Ë

	)

697 
	#BUS_PROBE_HOOVER
 (-1000000Ë

	)

698 
	#BUS_PROBE_NOWILDCARD
 (-2000000000Ë

	)

709 
	#BUS_PASS_ROOT
 0

	)

710 
	#BUS_PASS_BUS
 10

	)

711 
	#BUS_PASS_CPU
 20

	)

712 
	#BUS_PASS_RESOURCE
 30

	)

713 
	#BUS_PASS_INTERRUPT
 40

	)

714 
	#BUS_PASS_TIMER
 50

	)

715 
	#BUS_PASS_SCHEDULER
 60

	)

716 
	#BUS_PASS_SUPPORTDEV
 100000

	)

717 
	#BUS_PASS_DEFAULT
 
__INT_MAX


	)

719 
	#BUS_PASS_ORDER_FIRST
 0

	)

720 
	#BUS_PASS_ORDER_EARLY
 2

	)

721 
	#BUS_PASS_ORDER_MIDDLE
 5

	)

722 
	#BUS_PASS_ORDER_LATE
 7

	)

723 
	#BUS_PASS_ORDER_LAST
 9

	)

725 
bus_cuºít_∑ss
;

727 
	`bus_£t_∑ss
(
∑ss
);

732 
	#DEVMETHOD
 
KOBJMETHOD


	)

733 
	#DEVMETHOD_END
 
KOBJMETHOD_END


	)

738 
	~"devi˚_if.h
"

739 
	~"bus_if.h
"

741 
moduÀ
;

743 
	`drivî_moduÀ_h™dÀr
(
moduÀ
 *, , *);

748 
	sdrivî_moduÀ_d©a
 {

749 (*
dmd_chaöevh
)(
moduÀ
 *, , *);

750 *
dmd_chaö¨g
;

751 c⁄° *
dmd_bu¢ame
;

752 
kobj_˛ass_t
 
dmd_drivî
;

753 
dev˛ass_t
 *
dmd_dev˛ass
;

754 
dmd_∑ss
;

757 
	#EARLY_DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, \

758 
evh
, 
¨g
, 
‹dî
, 
∑ss
) \

760 
drivî_moduÀ_d©a
 
«me
##
_
##
bu¢ame
##
_drivî_mod
 = { \

761 
evh
, 
¨g
, \

763 (
kobj_˛ass_t
Ë&
drivî
, \

764 &
dev˛ass
, \

765 
∑ss
 \

766 
	}
}; \

768 
moduÀd©a_t
 
«me
##
_
##
bu¢ame
##
_mod
 = { \

770 
drivî_moduÀ_h™dÀr
, \

771 &
«me
##
_
##
bu¢ame
##
_drivî_mod
 \

773 
	`DECLARE_MODULE
(
«me
##
_
##
bu¢ame
,Çame##_##bu¢ame##
_mod
, \

774 
SI_SUB_DRIVERS
, 
‹dî
)

	)

776 
	#EARLY_DRIVER_MODULE
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
, 
∑ss
) \

777 
	`EARLY_DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, \

778 
evh
, 
¨g
, 
SI_ORDER_MIDDLE
, 
∑ss
)

	)

780 
	#DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
,\

781 
‹dî
) \

782 
	`EARLY_DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, \

783 
evh
, 
¨g
, 
‹dî
, 
BUS_PASS_DEFAULT
)

	)

785 
	#DRIVER_MODULE
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
) \

786 
	`EARLY_DRIVER_MODULE
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
, \

787 
BUS_PASS_DEFAULT
)

	)

792 
	#__BUS_ACCESSOR
(
v¨p
, 
v¨
, 
iv¨p
, 
iv¨
, 
ty≥
) \

794 
__ölöe
 
ty≥
 
v¨p
 ## 
_gë_
 ## 
	`v¨
(
devi˚_t
 
dev
) \

796 
uöçå_t
 
v
; \

797 
	`BUS_READ_IVAR
(
	`devi˚_gë_∑ª¡
(
dev
), dev, \

798 
iv¨p
 ## 
_IVAR_
 ## 
iv¨
, &
v
); \

799  ((
ty≥
Ë
v
); \

802 
__ölöe
 
v¨p
 ## 
_£t_
 ## 
	`v¨
(
devi˚_t
 
dev
, 
ty≥
 
t
) \

804 
uöçå_t
 
v
 = (uöçå_tË
t
; \

805 
	`BUS_WRITE_IVAR
(
	`devi˚_gë_∑ª¡
(
dev
), dev, \

806 
iv¨p
 ## 
_IVAR_
 ## 
iv¨
, 
v
); \

807 }

	)

814 
	#bus_b¨rõr
(
r
, 
o
, 
l
, 
f
) \

815 
	`bus_•a˚_b¨rõr
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
l
), (
f
))

	)

816 
	#bus_ªad_1
(
r
, 
o
) \

817 
	`bus_•a˚_ªad_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

818 
	#bus_ªad_mu…i_1
(
r
, 
o
, 
d
, 
c
) \

819 
	`bus_•a˚_ªad_mu…i_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

820 
	#bus_ªad_ªgi⁄_1
(
r
, 
o
, 
d
, 
c
) \

821 
	`bus_•a˚_ªad_ªgi⁄_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

822 
	#bus_£t_mu…i_1
(
r
, 
o
, 
v
, 
c
) \

823 
	`bus_•a˚_£t_mu…i_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

824 
	#bus_£t_ªgi⁄_1
(
r
, 
o
, 
v
, 
c
) \

825 
	`bus_•a˚_£t_ªgi⁄_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

826 
	#bus_wrôe_1
(
r
, 
o
, 
v
) \

827 
	`bus_•a˚_wrôe_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

828 
	#bus_wrôe_mu…i_1
(
r
, 
o
, 
d
, 
c
) \

829 
	`bus_•a˚_wrôe_mu…i_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

830 
	#bus_wrôe_ªgi⁄_1
(
r
, 
o
, 
d
, 
c
) \

831 
	`bus_•a˚_wrôe_ªgi⁄_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

832 
	#bus_ªad_°ªam_1
(
r
, 
o
) \

833 
	`bus_•a˚_ªad_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

834 
	#bus_ªad_mu…i_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

835 
	`bus_•a˚_ªad_mu…i_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

836 
	#bus_ªad_ªgi⁄_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

837 
	`bus_•a˚_ªad_ªgi⁄_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

838 
	#bus_£t_mu…i_°ªam_1
(
r
, 
o
, 
v
, 
c
) \

839 
	`bus_•a˚_£t_mu…i_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

840 
	#bus_£t_ªgi⁄_°ªam_1
(
r
, 
o
, 
v
, 
c
) \

841 
	`bus_•a˚_£t_ªgi⁄_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

842 
	#bus_wrôe_°ªam_1
(
r
, 
o
, 
v
) \

843 
	`bus_•a˚_wrôe_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

844 
	#bus_wrôe_mu…i_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

845 
	`bus_•a˚_wrôe_mu…i_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

846 
	#bus_wrôe_ªgi⁄_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

847 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

848 
	#bus_ªad_2
(
r
, 
o
) \

849 
	`bus_•a˚_ªad_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

850 
	#bus_ªad_mu…i_2
(
r
, 
o
, 
d
, 
c
) \

851 
	`bus_•a˚_ªad_mu…i_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

852 
	#bus_ªad_ªgi⁄_2
(
r
, 
o
, 
d
, 
c
) \

853 
	`bus_•a˚_ªad_ªgi⁄_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

854 
	#bus_£t_mu…i_2
(
r
, 
o
, 
v
, 
c
) \

855 
	`bus_•a˚_£t_mu…i_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

856 
	#bus_£t_ªgi⁄_2
(
r
, 
o
, 
v
, 
c
) \

857 
	`bus_•a˚_£t_ªgi⁄_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

858 
	#bus_wrôe_2
(
r
, 
o
, 
v
) \

859 
	`bus_•a˚_wrôe_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

860 
	#bus_wrôe_mu…i_2
(
r
, 
o
, 
d
, 
c
) \

861 
	`bus_•a˚_wrôe_mu…i_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

862 
	#bus_wrôe_ªgi⁄_2
(
r
, 
o
, 
d
, 
c
) \

863 
	`bus_•a˚_wrôe_ªgi⁄_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

864 
	#bus_ªad_°ªam_2
(
r
, 
o
) \

865 
	`bus_•a˚_ªad_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

866 
	#bus_ªad_mu…i_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

867 
	`bus_•a˚_ªad_mu…i_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

868 
	#bus_ªad_ªgi⁄_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

869 
	`bus_•a˚_ªad_ªgi⁄_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

870 
	#bus_£t_mu…i_°ªam_2
(
r
, 
o
, 
v
, 
c
) \

871 
	`bus_•a˚_£t_mu…i_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

872 
	#bus_£t_ªgi⁄_°ªam_2
(
r
, 
o
, 
v
, 
c
) \

873 
	`bus_•a˚_£t_ªgi⁄_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

874 
	#bus_wrôe_°ªam_2
(
r
, 
o
, 
v
) \

875 
	`bus_•a˚_wrôe_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

876 
	#bus_wrôe_mu…i_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

877 
	`bus_•a˚_wrôe_mu…i_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

878 
	#bus_wrôe_ªgi⁄_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

879 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

880 
	#bus_ªad_4
(
r
, 
o
) \

881 
	`bus_•a˚_ªad_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

882 
	#bus_ªad_mu…i_4
(
r
, 
o
, 
d
, 
c
) \

883 
	`bus_•a˚_ªad_mu…i_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

884 
	#bus_ªad_ªgi⁄_4
(
r
, 
o
, 
d
, 
c
) \

885 
	`bus_•a˚_ªad_ªgi⁄_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

886 
	#bus_£t_mu…i_4
(
r
, 
o
, 
v
, 
c
) \

887 
	`bus_•a˚_£t_mu…i_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

888 
	#bus_£t_ªgi⁄_4
(
r
, 
o
, 
v
, 
c
) \

889 
	`bus_•a˚_£t_ªgi⁄_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

890 
	#bus_wrôe_4
(
r
, 
o
, 
v
) \

891 
	`bus_•a˚_wrôe_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

892 
	#bus_wrôe_mu…i_4
(
r
, 
o
, 
d
, 
c
) \

893 
	`bus_•a˚_wrôe_mu…i_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

894 
	#bus_wrôe_ªgi⁄_4
(
r
, 
o
, 
d
, 
c
) \

895 
	`bus_•a˚_wrôe_ªgi⁄_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

896 
	#bus_ªad_°ªam_4
(
r
, 
o
) \

897 
	`bus_•a˚_ªad_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

898 
	#bus_ªad_mu…i_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

899 
	`bus_•a˚_ªad_mu…i_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

900 
	#bus_ªad_ªgi⁄_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

901 
	`bus_•a˚_ªad_ªgi⁄_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

902 
	#bus_£t_mu…i_°ªam_4
(
r
, 
o
, 
v
, 
c
) \

903 
	`bus_•a˚_£t_mu…i_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

904 
	#bus_£t_ªgi⁄_°ªam_4
(
r
, 
o
, 
v
, 
c
) \

905 
	`bus_•a˚_£t_ªgi⁄_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

906 
	#bus_wrôe_°ªam_4
(
r
, 
o
, 
v
) \

907 
	`bus_•a˚_wrôe_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

908 
	#bus_wrôe_mu…i_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

909 
	`bus_•a˚_wrôe_mu…i_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

910 
	#bus_wrôe_ªgi⁄_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

911 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

912 
	#bus_ªad_8
(
r
, 
o
) \

913 
	`bus_•a˚_ªad_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

914 
	#bus_ªad_mu…i_8
(
r
, 
o
, 
d
, 
c
) \

915 
	`bus_•a˚_ªad_mu…i_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

916 
	#bus_ªad_ªgi⁄_8
(
r
, 
o
, 
d
, 
c
) \

917 
	`bus_•a˚_ªad_ªgi⁄_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

918 
	#bus_£t_mu…i_8
(
r
, 
o
, 
v
, 
c
) \

919 
	`bus_•a˚_£t_mu…i_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

920 
	#bus_£t_ªgi⁄_8
(
r
, 
o
, 
v
, 
c
) \

921 
	`bus_•a˚_£t_ªgi⁄_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

922 
	#bus_wrôe_8
(
r
, 
o
, 
v
) \

923 
	`bus_•a˚_wrôe_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

924 
	#bus_wrôe_mu…i_8
(
r
, 
o
, 
d
, 
c
) \

925 
	`bus_•a˚_wrôe_mu…i_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

926 
	#bus_wrôe_ªgi⁄_8
(
r
, 
o
, 
d
, 
c
) \

927 
	`bus_•a˚_wrôe_ªgi⁄_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

928 
	#bus_ªad_°ªam_8
(
r
, 
o
) \

929 
	`bus_•a˚_ªad_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

930 
	#bus_ªad_mu…i_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

931 
	`bus_•a˚_ªad_mu…i_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

932 
	#bus_ªad_ªgi⁄_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

933 
	`bus_•a˚_ªad_ªgi⁄_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

934 
	#bus_£t_mu…i_°ªam_8
(
r
, 
o
, 
v
, 
c
) \

935 
	`bus_•a˚_£t_mu…i_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

936 
	#bus_£t_ªgi⁄_°ªam_8
(
r
, 
o
, 
v
, 
c
) \

937 
	`bus_•a˚_£t_ªgi⁄_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

938 
	#bus_wrôe_°ªam_8
(
r
, 
o
, 
v
) \

939 
	`bus_•a˚_wrôe_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

940 
	#bus_wrôe_mu…i_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

941 
	`bus_•a˚_wrôe_mu…i_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

942 
	#bus_wrôe_ªgi⁄_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

943 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

	@/usr/include/sys/bus_dma.h

67 #i‚de‡
_BUS_DMA_H_


68 
	#_BUS_DMA_H_


	)

70 
	~<sys/_bus_dma.h
>

83 
	#BUS_DMA_WAITOK
 0x00

	)

84 
	#BUS_DMA_NOWAIT
 0x01

	)

85 
	#BUS_DMA_ALLOCNOW
 0x02

	)

86 
	#BUS_DMA_COHERENT
 0x04

	)

87 
	#BUS_DMA_ZERO
 0x08

	)

88 
	#BUS_DMA_BUS1
 0x10

	)

89 
	#BUS_DMA_BUS2
 0x20

	)

90 
	#BUS_DMA_BUS3
 0x40

	)

91 
	#BUS_DMA_BUS4
 0x80

	)

97 
	#BUS_DMA_NOWRITE
 0x100

	)

98 
	#BUS_DMA_NOCACHE
 0x200

	)

105 
	#BUS_DMA_KEEP_PG_OFFSET
 0x400

	)

107 
	#BUS_DMA_LOAD_MBUF
 0x800

	)

110 
	gccb
;

111 
	gbio
;

112 
	gmbuf
;

113 
	gmemdesc
;

114 
	gpm≠
;

115 
	guio
;

120 
	#BUS_DMASYNC_PREREAD
 1

	)

121 
	#BUS_DMASYNC_POSTREAD
 2

	)

122 
	#BUS_DMASYNC_PREWRITE
 4

	)

123 
	#BUS_DMASYNC_POSTWRITE
 8

	)

131 
	sbus_dma_£gmít
 {

132 
bus_addr_t
 
	mds_addr
;

133 
bus_size_t
 
	mds_Àn
;

134 } 
	tbus_dma_£gmít_t
;

140 
	tbus_dma_fûãr_t
(*, 
	tbus_addr_t
);

145 
busdma_lock_muãx
(*
¨g
, 
bus_dma_lock_›_t
 
›
);

172 
bus_dma_èg_¸óã
(
bus_dma_èg_t
 
∑ª¡
, 
bus_size_t
 
Æignmít
,

173 
bus_addr_t
 
bound¨y
, bus_addr_à
lowaddr
,

174 
bus_addr_t
 
highaddr
, 
bus_dma_fûãr_t
 *
fûtfunc
,

175 *
fûtfunˇrg
, 
bus_size_t
 
maxsize
, 
n£gmíts
,

176 
bus_size_t
 
max£gsz
, 
Êags
, 
bus_dma_lock_t
 *
lockfunc
,

177 *
lockfunˇrg
, 
bus_dma_èg_t
 *
dm©
);

185 
bus_dma_èg_£t_domaö
(
bus_dma_èg_t
 
dm©
, 
domaö
);

187 
bus_dma_èg_de°roy
(
bus_dma_èg_t
 
dm©
);

193 
	tbus_dmam≠_ˇŒback_t
(*, 
	tbus_dma_£gmít_t
 *, , );

200 
	tbus_dmam≠_ˇŒback2_t
(*, 
	tbus_dma_£gmít_t
 *, , 
	tbus_size_t
, );

205 
bus_dmam≠_lﬂd
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, *
buf
,

206 
bus_size_t
 
buÊí
, 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
,

207 *
ˇŒback_¨g
, 
Êags
);

213 
bus_dmam≠_lﬂd_mbuf
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

214 
mbuf
 *mbuf,

215 
bus_dmam≠_ˇŒback2_t
 *
ˇŒback
, *
ˇŒback_¨g
,

216 
Êags
);

218 
bus_dmam≠_lﬂd_mbuf_sg
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

219 
mbuf
 *mbuf, 
bus_dma_£gmít_t
 *
£gs
,

220 *
n£gs
, 
Êags
);

226 
bus_dmam≠_lﬂd_uio
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

227 
uio
 *
ui
,

228 
bus_dmam≠_ˇŒback2_t
 *
ˇŒback
, *
ˇŒback_¨g
,

229 
Êags
);

234 
bus_dmam≠_lﬂd_ccb
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
ccb
 *ccb,

235 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
, *
ˇŒback_¨g
,

236 
Êags
);

241 
bus_dmam≠_lﬂd_bio
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
bio
 *bio,

242 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
, *
ˇŒback_¨g
,

243 
Êags
);

248 
bus_dmam≠_lﬂd_mem
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

249 
memdesc
 *
mem
, 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
,

250 *
ˇŒback_¨g
, 
Êags
);

257 
bus_dmam≠_lﬂd_ma_åiv
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

258 
vm_∑ge
 **
ma
, 
bus_size_t
 
éí
, 
ma_offs
, 
Êags
,

259 
bus_dma_£gmít_t
 *
£gs
, *
£gp
);

261 #ifde‡
WANT_INLINE_DMAMAP


262 
	#BUS_DMAMAP_OP
 
ölöe


	)

264 
	#BUS_DMAMAP_OP


	)

271 
BUS_DMAMAP_OP
 
bus_dmam≠_¸óã
(
bus_dma_èg_t
 
dm©
, 
Êags
, 
bus_dmam≠_t
 *
m≠p
);

277 
BUS_DMAMAP_OP
 
bus_dmam≠_de°roy
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
);

284 
BUS_DMAMAP_OP
 
bus_dmamem_Æloc
(
bus_dma_èg_t
 
dm©
, ** 
vaddr
, 
Êags
,

285 
bus_dmam≠_t
 *
m≠p
);

291 
BUS_DMAMAP_OP
 
bus_dmamem_‰ì
(
bus_dma_èg_t
 
dm©
, *
vaddr
, 
bus_dmam≠_t
 
m≠
);

297 
BUS_DMAMAP_OP
 
bus_dmam≠_sync
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
dmam≠
, 
bus_dmasync_›_t
 
›
);

302 
BUS_DMAMAP_OP
 
bus_dmam≠_u∆ﬂd
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
dmam≠
);

304 #unde‡
BUS_DMAMAP_OP


	@/usr/include/sys/capability.h

40 #i‚de‡
_SYS_CAPABILITY_H_


41 
	#_SYS_CAPABILITY_H_


	)

43 #w¨nög 
this
 
fûe
 
ö˛udes
 <
sys
/
ˇ∑bûôy
.
h
> 
which
 
is
 
dïªˇãd


44 
	~<sys/ˇpsicum.h
>

	@/usr/include/sys/caprights.h

34 #i‚de‡
_SYS_CAPRIGHTS_H_


35 
	#_SYS_CAPRIGHTS_H_


	)

46 
	#CAP_RIGHTS_VERSION_00
 0

	)

52 
	#CAP_RIGHTS_VERSION
 
CAP_RIGHTS_VERSION_00


	)

54 
	sˇp_rights
 {

55 
uöt64_t
 
	m¸_rights
[
CAP_RIGHTS_VERSION
 + 2];

58 #i‚def 
_CAP_RIGHTS_T_DECLARED


59 
	#_CAP_RIGHTS_T_DECLARED


	)

60 
ˇp_rights
 
	tˇp_rights_t
;

	@/usr/include/sys/capsicum.h

41 #i‚de‡
_SYS_CAPSICUM_H_


42 
	#_SYS_CAPSICUM_H_


	)

44 
	~<sys/cdefs.h
>

45 
	~<sys/∑øm.h
>

47 
	~<sys/ˇ¥ights.h
>

48 
	~<sys/fûe.h
>

49 
	~<sys/f˙é.h
>

51 #i‚de‡
_KERNEL


52 
	~<°dboﬁ.h
>

55 
	#CAPRIGHT
(
idx
, 
bô
Ë((1ULL << (57 + (idx))Ë| (bô))

	)

77 
	#CAP_READ
 
	`CAPRIGHT
(0, 0x0000000000000001ULL)

	)

79 
	#CAP_WRITE
 
	`CAPRIGHT
(0, 0x0000000000000002ULL)

	)

81 
	#CAP_SEEK_TELL
 
	`CAPRIGHT
(0, 0x0000000000000004ULL)

	)

83 
	#CAP_SEEK
 (
CAP_SEEK_TELL
 | 0x0000000000000008ULL)

	)

85 
	#CAP_PREAD
 (
CAP_SEEK
 | 
CAP_READ
)

	)

90 
	#CAP_PWRITE
 (
CAP_SEEK
 | 
CAP_WRITE
)

	)

92 
	#CAP_MMAP
 
	`CAPRIGHT
(0, 0x0000000000000010ULL)

	)

94 
	#CAP_MMAP_R
 (
CAP_MMAP
 | 
CAP_SEEK
 | 
CAP_READ
)

	)

96 
	#CAP_MMAP_W
 (
CAP_MMAP
 | 
CAP_SEEK
 | 
CAP_WRITE
)

	)

98 
	#CAP_MMAP_X
 (
CAP_MMAP
 | 
CAP_SEEK
 | 0x0000000000000020ULL)

	)

100 
	#CAP_MMAP_RW
 (
CAP_MMAP_R
 | 
CAP_MMAP_W
)

	)

102 
	#CAP_MMAP_RX
 (
CAP_MMAP_R
 | 
CAP_MMAP_X
)

	)

104 
	#CAP_MMAP_WX
 (
CAP_MMAP_W
 | 
CAP_MMAP_X
)

	)

106 
	#CAP_MMAP_RWX
 (
CAP_MMAP_R
 | 
CAP_MMAP_W
 | 
CAP_MMAP_X
)

	)

108 
	#CAP_CREATE
 
	`CAPRIGHT
(0, 0x0000000000000040ULL)

	)

110 
	#CAP_FEXECVE
 
	`CAPRIGHT
(0, 0x0000000000000080ULL)

	)

112 
	#CAP_FSYNC
 
	`CAPRIGHT
(0, 0x0000000000000100ULL)

	)

114 
	#CAP_FTRUNCATE
 
	`CAPRIGHT
(0, 0x0000000000000200ULL)

	)

117 
	#CAP_LOOKUP
 
	`CAPRIGHT
(0, 0x0000000000000400ULL)

	)

121 
	#CAP_FCHDIR
 
	`CAPRIGHT
(0, 0x0000000000000800ULL)

	)

123 
	#CAP_FCHFLAGS
 
	`CAPRIGHT
(0, 0x0000000000001000ULL)

	)

125 
	#CAP_CHFLAGSAT
 (
CAP_FCHFLAGS
 | 
CAP_LOOKUP
)

	)

127 
	#CAP_FCHMOD
 
	`CAPRIGHT
(0, 0x0000000000002000ULL)

	)

129 
	#CAP_FCHMODAT
 (
CAP_FCHMOD
 | 
CAP_LOOKUP
)

	)

131 
	#CAP_FCHOWN
 
	`CAPRIGHT
(0, 0x0000000000004000ULL)

	)

133 
	#CAP_FCHOWNAT
 (
CAP_FCHOWN
 | 
CAP_LOOKUP
)

	)

135 
	#CAP_FCNTL
 
	`CAPRIGHT
(0, 0x0000000000008000ULL)

	)

140 
	#CAP_FLOCK
 
	`CAPRIGHT
(0, 0x0000000000010000ULL)

	)

142 
	#CAP_FPATHCONF
 
	`CAPRIGHT
(0, 0x0000000000020000ULL)

	)

144 
	#CAP_FSCK
 
	`CAPRIGHT
(0, 0x0000000000040000ULL)

	)

146 
	#CAP_FSTAT
 
	`CAPRIGHT
(0, 0x0000000000080000ULL)

	)

148 
	#CAP_FSTATAT
 (
CAP_FSTAT
 | 
CAP_LOOKUP
)

	)

150 
	#CAP_FSTATFS
 
	`CAPRIGHT
(0, 0x0000000000100000ULL)

	)

152 
	#CAP_FUTIMES
 
	`CAPRIGHT
(0, 0x0000000000200000ULL)

	)

154 
	#CAP_FUTIMESAT
 (
CAP_FUTIMES
 | 
CAP_LOOKUP
)

	)

156 
	#CAP_LINKAT_TARGET
 (
CAP_LOOKUP
 | 0x0000000000400000ULL)

	)

158 
	#CAP_MKDIRAT
 (
CAP_LOOKUP
 | 0x0000000000800000ULL)

	)

160 
	#CAP_MKFIFOAT
 (
CAP_LOOKUP
 | 0x0000000001000000ULL)

	)

162 
	#CAP_MKNODAT
 (
CAP_LOOKUP
 | 0x0000000002000000ULL)

	)

164 
	#CAP_RENAMEAT_SOURCE
 (
CAP_LOOKUP
 | 0x0000000004000000ULL)

	)

166 
	#CAP_SYMLINKAT
 (
CAP_LOOKUP
 | 0x0000000008000000ULL)

	)

171 
	#CAP_UNLINKAT
 (
CAP_LOOKUP
 | 0x0000000010000000ULL)

	)

175 
	#CAP_ACCEPT
 
	`CAPRIGHT
(0, 0x0000000020000000ULL)

	)

177 
	#CAP_BIND
 
	`CAPRIGHT
(0, 0x0000000040000000ULL)

	)

179 
	#CAP_CONNECT
 
	`CAPRIGHT
(0, 0x0000000080000000ULL)

	)

181 
	#CAP_GETPEERNAME
 
	`CAPRIGHT
(0, 0x0000000100000000ULL)

	)

183 
	#CAP_GETSOCKNAME
 
	`CAPRIGHT
(0, 0x0000000200000000ULL)

	)

185 
	#CAP_GETSOCKOPT
 
	`CAPRIGHT
(0, 0x0000000400000000ULL)

	)

187 
	#CAP_LISTEN
 
	`CAPRIGHT
(0, 0x0000000800000000ULL)

	)

189 
	#CAP_PEELOFF
 
	`CAPRIGHT
(0, 0x0000001000000000ULL)

	)

190 
	#CAP_RECV
 
CAP_READ


	)

191 
	#CAP_SEND
 
CAP_WRITE


	)

193 
	#CAP_SETSOCKOPT
 
	`CAPRIGHT
(0, 0x0000002000000000ULL)

	)

195 
	#CAP_SHUTDOWN
 
	`CAPRIGHT
(0, 0x0000004000000000ULL)

	)

198 
	#CAP_BINDAT
 (
CAP_LOOKUP
 | 0x0000008000000000ULL)

	)

200 
	#CAP_CONNECTAT
 (
CAP_LOOKUP
 | 0x0000010000000000ULL)

	)

203 
	#CAP_LINKAT_SOURCE
 (
CAP_LOOKUP
 | 0x0000020000000000ULL)

	)

205 
	#CAP_RENAMEAT_TARGET
 (
CAP_LOOKUP
 | 0x0000040000000000ULL)

	)

207 
	#CAP_SOCK_CLIENT
 \

208 (
CAP_CONNECT
 | 
CAP_GETPEERNAME
 | 
CAP_GETSOCKNAME
 | 
CAP_GETSOCKOPT
 | \

209 
CAP_PEELOFF
 | 
CAP_RECV
 | 
CAP_SEND
 | 
CAP_SETSOCKOPT
 | 
CAP_SHUTDOWN
)

	)

210 
	#CAP_SOCK_SERVER
 \

211 (
CAP_ACCEPT
 | 
CAP_BIND
 | 
CAP_GETPEERNAME
 | 
CAP_GETSOCKNAME
 | \

212 
CAP_GETSOCKOPT
 | 
CAP_LISTEN
 | 
CAP_PEELOFF
 | 
CAP_RECV
 | 
CAP_SEND
 | \

213 
CAP_SETSOCKOPT
 | 
CAP_SHUTDOWN
)

	)

216 
	#CAP_ALL0
 
	`CAPRIGHT
(0, 0x000007FFFFFFFFFFULL)

	)

219 
	#CAP_UNUSED0_44
 
	`CAPRIGHT
(0, 0x0000080000000000ULL)

	)

221 
	#CAP_UNUSED0_57
 
	`CAPRIGHT
(0, 0x0100000000000000ULL)

	)

227 
	#CAP_MAC_GET
 
	`CAPRIGHT
(1, 0x0000000000000001ULL)

	)

229 
	#CAP_MAC_SET
 
	`CAPRIGHT
(1, 0x0000000000000002ULL)

	)

232 
	#CAP_SEM_GETVALUE
 
	`CAPRIGHT
(1, 0x0000000000000004ULL)

	)

233 
	#CAP_SEM_POST
 
	`CAPRIGHT
(1, 0x0000000000000008ULL)

	)

234 
	#CAP_SEM_WAIT
 
	`CAPRIGHT
(1, 0x0000000000000010ULL)

	)

237 
	#CAP_EVENT
 
	`CAPRIGHT
(1, 0x0000000000000020ULL)

	)

239 
	#CAP_KQUEUE_EVENT
 
	`CAPRIGHT
(1, 0x0000000000000040ULL)

	)

243 
	#CAP_IOCTL
 
	`CAPRIGHT
(1, 0x0000000000000080ULL)

	)

244 
	#CAP_TTYHOOK
 
	`CAPRIGHT
(1, 0x0000000000000100ULL)

	)

248 
	#CAP_PDGETPID
 
	`CAPRIGHT
(1, 0x0000000000000200ULL)

	)

250 
	#CAP_PDWAIT
 
	`CAPRIGHT
(1, 0x0000000000000400ULL)

	)

252 
	#CAP_PDKILL
 
	`CAPRIGHT
(1, 0x0000000000000800ULL)

	)

256 
	#CAP_EXTATTR_DELETE
 
	`CAPRIGHT
(1, 0x0000000000001000ULL)

	)

258 
	#CAP_EXTATTR_GET
 
	`CAPRIGHT
(1, 0x0000000000002000ULL)

	)

260 
	#CAP_EXTATTR_LIST
 
	`CAPRIGHT
(1, 0x0000000000004000ULL)

	)

262 
	#CAP_EXTATTR_SET
 
	`CAPRIGHT
(1, 0x0000000000008000ULL)

	)

266 
	#CAP_ACL_CHECK
 
	`CAPRIGHT
(1, 0x0000000000010000ULL)

	)

268 
	#CAP_ACL_DELETE
 
	`CAPRIGHT
(1, 0x0000000000020000ULL)

	)

270 
	#CAP_ACL_GET
 
	`CAPRIGHT
(1, 0x0000000000040000ULL)

	)

272 
	#CAP_ACL_SET
 
	`CAPRIGHT
(1, 0x0000000000080000ULL)

	)

275 
	#CAP_KQUEUE_CHANGE
 
	`CAPRIGHT
(1, 0x0000000000100000ULL)

	)

277 
	#CAP_KQUEUE
 (
CAP_KQUEUE_EVENT
 | 
CAP_KQUEUE_CHANGE
)

	)

280 
	#CAP_ALL1
 
	`CAPRIGHT
(1, 0x00000000001FFFFFULL)

	)

283 
	#CAP_UNUSED1_22
 
	`CAPRIGHT
(1, 0x0000000000200000ULL)

	)

285 
	#CAP_UNUSED1_57
 
	`CAPRIGHT
(1, 0x0100000000000000ULL)

	)

288 
	#CAP_POLL_EVENT
 
CAP_EVENT


	)

290 
	#CAP_ALL
(
rights
) do { \

291 (
rights
)->
¸_rights
[0] = \

292 ((
uöt64_t
)
CAP_RIGHTS_VERSION
 << 62Ë| 
CAP_ALL0
; \

293 (
rights
)->
¸_rights
[1] = 
CAP_ALL1
; \

294 } 0)

	)

296 
	#CAP_NONE
(
rights
) do { \

297 (
rights
)->
¸_rights
[0] = \

298 ((
uöt64_t
)
CAP_RIGHTS_VERSION
 << 62Ë| 
	`CAPRIGHT
(0, 0ULL); \

299 (
rights
)->
¸_rights
[1] = 
	`CAPRIGHT
(1, 0ULL); \

300 } 0)

	)

302 
	#CAPRVER
(
right
Ë(()(‘ightË>> 62))

	)

303 
	#CAPVER
(
rights
Ë
	`CAPRVER
(‘ights)->
¸_rights
[0])

	)

304 
	#CAPARSIZE
(
rights
Ë(
	`CAPVER
‘ightsË+ 2)

	)

305 
	#CAPIDXBIT
(
right
Ë(()((‘ightË>> 57Ë& 0x1F))

	)

310 
	#CAP_FCNTL_GETFL
 (1 << 
F_GETFL
)

	)

311 
	#CAP_FCNTL_SETFL
 (1 << 
F_SETFL
)

	)

312 
	#CAP_FCNTL_GETOWN
 (1 << 
F_GETOWN
)

	)

313 
	#CAP_FCNTL_SETOWN
 (1 << 
F_SETOWN
)

	)

314 
	#CAP_FCNTL_ALL
 (
CAP_FCNTL_GETFL
 | 
CAP_FCNTL_SETFL
 | \

315 
CAP_FCNTL_GETOWN
 | 
CAP_FCNTL_SETOWN
)

	)

317 
	#CAP_IOCTLS_ALL
 
SSIZE_MAX


	)

319 
	g__BEGIN_DECLS


321 
	#ˇp_rights_öô
(...) \

322 
	`__ˇp_rights_öô
(
CAP_RIGHTS_VERSION
, 
__VA_ARGS__
, 0ULL)

	)

323 
ˇp_rights_t
 *
__ˇp_rights_öô
(
vîsi⁄
, c≠_rights_à*
rights
, ...);

325 
	#ˇp_rights_£t
(...) \

326 
	`__ˇp_rights_£t
(
__VA_ARGS__
, 0ULL)

	)

327 
ˇp_rights_t
 *
__ˇp_rights_£t
(ˇp_rights_à*
rights
, ...);

329 
	#ˇp_rights_˛ór
(...) \

330 
	`__ˇp_rights_˛ór
(
__VA_ARGS__
, 0ULL)

	)

331 
ˇp_rights_t
 *
__ˇp_rights_˛ór
(ˇp_rights_à*
rights
, ...);

333 
	#ˇp_rights_is_£t
(...) \

334 
	`__ˇp_rights_is_£t
(
__VA_ARGS__
, 0ULL)

	)

335 
boﬁ
 
__ˇp_rights_is_£t
(c⁄° 
ˇp_rights_t
 *
rights
, ...);

337 
boﬁ
 
ˇp_rights_is_vÆid
(c⁄° 
ˇp_rights_t
 *
rights
);

338 
ˇp_rights_t
 *
ˇp_rights_mîge
(ˇp_rights_à*
d°
, c⁄° c≠_rights_à*
§c
);

339 
ˇp_rights_t
 *
ˇp_rights_ªmove
(ˇp_rights_à*
d°
, c⁄° c≠_rights_à*
§c
);

340 
boﬁ
 
ˇp_rights_c⁄èös
(c⁄° 
ˇp_rights_t
 *
big
, c⁄° c≠_rights_à*
lôée
);

341 
__ˇp_rights_sysöô
(*
¨g
);

343 
__END_DECLS


344 
	sˇp_rights_öô_¨gs
 {

345 
ˇp_rights_t
 *
	m¸ü_rights
;

346 
uöt64_t
 
	m¸ü_vÆue1
;

347 
uöt64_t
 
	m¸ü_vÆue2
;

348 
uöt64_t
 
	m¸ü_vÆue3
;

349 
uöt64_t
 
	m¸ü_vÆue4
;

350 
uöt64_t
 
	m¸ü_vÆue5
;

353 
	#CAP_RIGHTS_SYSINIT0
(
«me
, 
rights
) \

354 
ˇp_rights_öô_¨gs
 
«me
##
_¨gs
 = { \

355 &(
rights
) \

357 
	`SYSINIT
(
«me
##
_ˇp_rights_sysöô
, 
SI_SUB_COPYRIGHT
+1, 
SI_ORDER_ANY
, \

358 
__ˇp_rights_sysöô
, &
«me
##
_¨gs
);

	)

360 
	#CAP_RIGHTS_SYSINIT1
(
«me
, 
rights
, 
vÆue1
) \

361 
ˇp_rights_öô_¨gs
 
«me
##
_¨gs
 = { \

362 &(
rights
), \

363 (
vÆue1
) \

365 
	`SYSINIT
(
«me
##
_ˇp_rights_sysöô
, 
SI_SUB_COPYRIGHT
+1, 
SI_ORDER_ANY
, \

366 
__ˇp_rights_sysöô
, &
«me
##
_¨gs
);

	)

368 
	#CAP_RIGHTS_SYSINIT2
(
«me
, 
rights
, 
vÆue1
, 
vÆue2
) \

369 
ˇp_rights_öô_¨gs
 
«me
##
_¨gs
 = { \

370 &(
rights
), \

371 (
vÆue1
), \

372 (
vÆue2
) \

374 
	`SYSINIT
(
«me
##
_ˇp_rights_sysöô
, 
SI_SUB_COPYRIGHT
, 
SI_ORDER_ANY
, \

375 
__ˇp_rights_sysöô
, &
«me
##
_¨gs
);

	)

377 
	#CAP_RIGHTS_SYSINIT3
(
«me
, 
rights
, 
vÆue1
, 
vÆue2
, 
vÆue3
) \

378 
ˇp_rights_öô_¨gs
 
«me
##
_¨gs
 = { \

379 &(
rights
), \

380 (
vÆue1
), \

381 (
vÆue2
), \

382 (
vÆue3
) \

384 
	`SYSINIT
(
«me
##
_ˇp_rights_sysöô
, 
SI_SUB_COPYRIGHT
, 
SI_ORDER_ANY
, \

385 
__ˇp_rights_sysöô
, &
«me
##
_¨gs
);

	)

387 
	#CAP_RIGHTS_SYSINIT4
(
«me
, 
rights
, 
vÆue1
, 
vÆue2
, 
vÆue3
, 
vÆue4
) \

388 
ˇp_rights_öô_¨gs
 
«me
##
_¨gs
 = { \

389 &(
rights
), \

390 (
vÆue1
), \

391 (
vÆue2
), \

392 (
vÆue3
), \

393 (
vÆue4
) \

395 
	`SYSINIT
(
«me
##
_ˇp_rights_sysöô
, 
SI_SUB_COPYRIGHT
, 
SI_ORDER_ANY
, \

396 
__ˇp_rights_sysöô
, &
«me
##
_¨gs
);

	)

398 
	#CAP_RIGHTS_DEFINE1
(
«me
, 
vÆue
) \

399 
__ªad_mo°ly
 
ˇp_rights_t
 
«me
; \

400 
	`CAP_RIGHTS_SYSINIT1
(
«me
,Çame, 
vÆue
);

	)

402 #ifde‡
_KERNEL


404 
	~<sys/sy°m.h
>

405 
ˇp_rights_t
 
ˇp_ac˚±_rights
;

406 
ˇp_rights_t
 
ˇp_böd_rights
;

407 
ˇp_rights_t
 
ˇp_c⁄√˘_rights
;

408 
ˇp_rights_t
 
ˇp_evít_rights
;

409 
ˇp_rights_t
 
ˇp_fchdú_rights
;

410 
ˇp_rights_t
 
ˇp_fchÊags_rights
;

411 
ˇp_rights_t
 
ˇp_fchmod_rights
;

412 
ˇp_rights_t
 
ˇp_fchown_rights
;

413 
ˇp_rights_t
 
ˇp_f˙é_rights
;

414 
ˇp_rights_t
 
ˇp_„xecve_rights
;

415 
ˇp_rights_t
 
ˇp_Êock_rights
;

416 
ˇp_rights_t
 
ˇp_Â©hc⁄f_rights
;

417 
ˇp_rights_t
 
ˇp_f°©_rights
;

418 
ˇp_rights_t
 
ˇp_f°©fs_rights
;

419 
ˇp_rights_t
 
ˇp_fsync_rights
;

420 
ˇp_rights_t
 
ˇp_·runˇã_rights
;

421 
ˇp_rights_t
 
ˇp_futimes_rights
;

422 
ˇp_rights_t
 
ˇp_gë≥î«me_rights
;

423 
ˇp_rights_t
 
ˇp_gësock›t_rights
;

424 
ˇp_rights_t
 
ˇp_gësock«me_rights
;

425 
ˇp_rights_t
 
ˇp_io˘l_rights
;

426 
ˇp_rights_t
 
ˇp_lök©_sour˚_rights
;

427 
ˇp_rights_t
 
ˇp_lök©_èrgë_rights
;

428 
ˇp_rights_t
 
ˇp_li°í_rights
;

429 
ˇp_rights_t
 
ˇp_mkdú©_rights
;

430 
ˇp_rights_t
 
ˇp_mkfifﬂt_rights
;

431 
ˇp_rights_t
 
ˇp_mknod©_rights
;

432 
ˇp_rights_t
 
ˇp_mm≠_rights
;

433 
ˇp_rights_t
 
ˇp_no_rights
;

434 
ˇp_rights_t
 
ˇp_pdgëpid_rights
;

435 
ˇp_rights_t
 
ˇp_pdkûl_rights
;

436 
ˇp_rights_t
 
ˇp_¥ód_rights
;

437 
ˇp_rights_t
 
ˇp_pwrôe_rights
;

438 
ˇp_rights_t
 
ˇp_ªad_rights
;

439 
ˇp_rights_t
 
ˇp_ªcv_rights
;

440 
ˇp_rights_t
 
ˇp_ª«mót_sour˚_rights
;

441 
ˇp_rights_t
 
ˇp_ª«mót_èrgë_rights
;

442 
ˇp_rights_t
 
ˇp_£ek_rights
;

443 
ˇp_rights_t
 
ˇp_£nd_rights
;

444 
ˇp_rights_t
 
ˇp_£nd_c⁄√˘_rights
;

445 
ˇp_rights_t
 
ˇp_£tsock›t_rights
;

446 
ˇp_rights_t
 
ˇp_shutdown_rights
;

447 
ˇp_rights_t
 
ˇp_symlök©_rights
;

448 
ˇp_rights_t
 
ˇp_u∆ök©_rights
;

449 
ˇp_rights_t
 
ˇp_wrôe_rights
;

451 
	#IN_CAPABILITY_MODE
(
td
Ë((—d)->
td_u¸ed
->
¸_Êags
 & 
CRED_FLAG_CAPMODE
Ë!0)

	)

453 
	gfûedesc
;

454 
	gfûedes˚¡
;

459 
ˇp_check
(c⁄° 
ˇp_rights_t
 *
havï
, c⁄° c≠_rights_à*
√edp
);

463 
u_ch¨
 
ˇp_rights_to_vm¥Ÿ
(c⁄° 
ˇp_rights_t
 *
havï
);

473 
	#ˇp_rights_fde_ölöe
(
fdï
Ë(&(fdï)->
fde_rights
)

	)

475 c⁄° 
ˇp_rights_t
 *
ˇp_rights_fde
(c⁄° 
fûedes˚¡
 *
fde
);

476 c⁄° 
ˇp_rights_t
 *
ˇp_rights
(
fûedesc
 *
fdp
, 
fd
);

478 
ˇp_io˘l_check
(
fûedesc
 *
fdp
, 
fd
, 
u_l⁄g
 
cmd
);

479 
ˇp_f˙é_check_fde
(
fûedes˚¡
 *
fde
, 
cmd
);

480 
ˇp_f˙é_check
(
fûedesc
 *
fdp
, 
fd
, 
cmd
);

482 
boﬁ
 
å≠_íŸˇp
;

486 
__BEGIN_DECLS


493 
ˇp_íãr
();

499 
boﬁ
 
ˇp_ßndboxed
();

504 
ˇp_gëmode
(
u_öt
 *
modï
);

509 
ˇp_rights_limô
(
fd
, c⁄° 
ˇp_rights_t
 *
rights
);

513 
	#ˇp_rights_gë
(
fd
, 
rights
) \

514 
	`__ˇp_rights_gë
(
CAP_RIGHTS_VERSION
, (
fd
), (
rights
))

	)

515 
__ˇp_rights_gë
(
vîsi⁄
, 
fd
, 
ˇp_rights_t
 *
rights
);

519 
ˇp_io˘ls_limô
(
fd
, c⁄° 
ˇp_io˘l_t
 *
cmds
, 
size_t
 
ncmds
);

525 
ssize_t
 
ˇp_io˘ls_gë
(
fd
, 
ˇp_io˘l_t
 *
cmds
, 
size_t
 
maxcmds
);

529 
ˇp_f˙és_limô
(
fd
, 
uöt32_t
 
f˙érights
);

533 
ˇp_f˙és_gë
(
fd
, 
uöt32_t
 *
f˙éright•
);

535 
	g__END_DECLS


	@/usr/include/sys/cdefs.h

38 #i‚def 
_SYS_CDEFS_H_


39 
	#_SYS_CDEFS_H_


	)

44 #i‚def 
__has_©åibuã


45 
	#__has_©åibuã
(
x
Ë0

	)

47 #i‚def 
__has_exãnsi⁄


48 
	#__has_exãnsi⁄
 
__has_„©uª


	)

50 #i‚def 
__has_„©uª


51 
	#__has_„©uª
(
x
Ë0

	)

53 #i‚def 
__has_ö˛ude


54 
	#__has_ö˛ude
(
x
Ë0

	)

56 #i‚def 
__has_buûtö


57 
	#__has_buûtö
(
x
Ë0

	)

60 #i‡
deföed
(
__˝lu•lus
)

61 
	#__BEGIN_DECLS
 "C" {

	)

62 
	#__END_DECLS
 }

	)

64 
	#__BEGIN_DECLS


	)

65 
	#__END_DECLS


	)

74 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

76 #i‡
__GNUC__
 >3 || 
deföed
(
__INTEL_COMPILER
)

77 
	#__GNUCLIKE_ASM
 3

	)

78 
	#__GNUCLIKE_MATH_BUILTIN_CONSTANTS


	)

80 
	#__GNUCLIKE_ASM
 2

	)

82 
	#__GNUCLIKE___TYPEOF
 1

	)

83 
	#__GNUCLIKE___OFFSETOF
 1

	)

84 
	#__GNUCLIKE___SECTION
 1

	)

86 #i‚de‡
__INTEL_COMPILER


87 
	#__GNUCLIKE_CTOR_SECTION_HANDLING
 1

	)

90 
	#__GNUCLIKE_BUILTIN_CONSTANT_P
 1

	)

91 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__˝lu•lus
) && \

92 
__INTEL_COMPILER
 < 800

93 #unde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


96 #i‡(
__GNUC_MINOR__
 > 95 || 
__GNUC__
 >= 3)

97 
	#__GNUCLIKE_BUILTIN_VARARGS
 1

	)

98 
	#__GNUCLIKE_BUILTIN_STDARG
 1

	)

99 
	#__GNUCLIKE_BUILTIN_VAALIST
 1

	)

102 #i‡
deföed
(
__GNUC__
)

103 
	#__GNUC_VA_LIST_COMPATIBILITY
 1

	)

109 #i‡
deföed
(
__GNUC__
)

110 
	#__compûî_memb¨
(Ë
__asm
 
	`__vﬁ©ûe
(" " : : : "mem‹y")

	)

113 #i‚de‡
__INTEL_COMPILER


114 
	#__GNUCLIKE_BUILTIN_NEXT_ARG
 1

	)

115 
	#__GNUCLIKE_MATH_BUILTIN_RELOPS


	)

118 
	#__GNUCLIKE_BUILTIN_MEMCPY
 1

	)

121 
	#__CC_SUPPORTS_INLINE
 1

	)

122 
	#__CC_SUPPORTS___INLINE
 1

	)

123 
	#__CC_SUPPORTS___INLINE__
 1

	)

125 
	#__CC_SUPPORTS___FUNC__
 1

	)

126 
	#__CC_SUPPORTS_WARNING
 1

	)

128 
	#__CC_SUPPORTS_VARADIC_XXX
 1

	)

130 
	#__CC_SUPPORTS_DYNAMIC_ARRAY_INIT
 1

	)

137 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

138 
	#__GNUC_PREREQ__
(
ma
, 
mi
) \

139 (
__GNUC__
 > (
ma
Ë|| __GNUC__ =(maË&& 
__GNUC_MINOR__
 >(
mi
))

	)

141 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë0

	)

156 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

157 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

158 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

159 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

160 
	#__STRING
(
x
Ë#x

	)

161 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

163 
	#__c⁄°
 c⁄°

	)

164 
	#__sig√d
 sig√d

	)

165 
	#__vﬁ©ûe
 vﬁ©ûe

	)

166 #i‡
deföed
(
__˝lu•lus
)

167 
	#__ölöe
 
ölöe


	)

169 #i‡!(
deföed
(
__CC_SUPPORTS___INLINE
))

170 
	#__ölöe


	)

175 
	#__P
(
¥Ÿos
Ë(Ë

	)

176 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

177 
	#__STRING
(
x
Ë"x"

	)

179 #i‡!
deföed
(
__CC_SUPPORTS___INLINE
)

180 
	#__c⁄°


	)

181 
	#__ölöe


	)

182 
	#__sig√d


	)

183 
	#__vﬁ©ûe


	)

192 #i‚def 
NO_ANSI_KEYWORDS


193 c⁄°

	)

194 
	#ölöe


	)

195 sig√d

	)

196 vﬁ©ûe

	)

210 
	#__wók_symbﬁ
 
	`__©åibuã__
((
__wók__
))

	)

211 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

212 
	#__dód2


	)

213 
	#__puª2


	)

214 
	#__unu£d


	)

216 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

217 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

218 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

219 
	#__unu£d


	)

222 #i‡
__GNUC_PREREQ__
(2, 7Ë|| 
deföed
(
__INTEL_COMPILER
)

223 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

224 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

225 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

226 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

227 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

228 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

229 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

231 #i‡
__GNUC_PREREQ__
(4, 3Ë|| 
__has_©åibuã
(
__Æloc_size__
)

232 
	#__Æloc_size
(
x
Ë
	`__©åibuã__
((
	`__Æloc_size__
(x)))

	)

233 
	#__Æloc_size2
(
n
, 
x
Ë
	`__©åibuã__
((
	`__Æloc_size__
“, x)))

	)

235 
	#__Æloc_size
(
x
)

	)

236 
	#__Æloc_size2
(
n
, 
x
)

	)

238 #i‡
__GNUC_PREREQ__
(4, 9Ë|| 
__has_©åibuã
(
__Æloc_Æign__
)

239 
	#__Æloc_Æign
(
x
Ë
	`__©åibuã__
((
	`__Æloc_Æign__
(x)))

	)

241 
	#__Æloc_Æign
(
x
)

	)

244 #i‡!
__GNUC_PREREQ__
(2, 95)

245 
	#__Æignof
(
x
Ë
	`__off£tof
(°ru˘ { 
__a
; x 
__b
; }, __b)

	)

252 #i‡!
deföed
(
__STDC_VERSION__
) || __STDC_VERSION__ < 201112L

254 #i‡!
__has_exãnsi⁄
(
c_Æig«s
)

255 #i‡(
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L) || \

256 
	$__has_exãnsi⁄
(
cxx_Æig«s
)

257 
	#_Alig«s
(
x
Ë
	`Æig«s
(x)

	)

260 
	#_Alig«s
(
x
Ë
	`__Æig√d
(x)

	)

264 #i‡
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

265 
	#_Alignof
(
x
Ë
	`Æignof
(x)

	)

267 
	#_Alignof
(
x
Ë
	`__Æignof
(x)

	)

270 #i‡!
	`deföed
(
__˝lu•lus
Ë&& !
	`__has_exãnsi⁄
(
c_©omic
) && \

271 !
	`__has_exãnsi⁄
(
cxx_©omic
Ë&& !
	$__GNUC_PREREQ__
(4, 7)

276 
	#_Atomic
(
T
Ë°ru˘ { T vﬁ©ûê
__vÆ
; }

	)

279 #i‡
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

280 
	#_N‹ëu∫
 [[
n‹ëu∫
]]

	)

282 
	#_N‹ëu∫
 
__dód2


	)

285 #i‡!
	`__has_exãnsi⁄
(
c_°©ic_as£π
)

286 #i‡(
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L) || \

287 
	$__has_exãnsi⁄
(
cxx_°©ic_as£π
)

288 
	#_Sètic_as£π
(
x
, 
y
Ë
	`°©ic_as£π
(x, y)

	)

289 #ñi‡
	`__GNUC_PREREQ__
(4,6Ë&& !
	`deföed
(
__˝lu•lus
)

291 #ñi‡
	`deföed
(
__COUNTER__
)

292 
	#_Sètic_as£π
(
x
, 
y
Ë
	`__Sètic_as£π
(x, 
__COUNTER__
)

	)

293 
	#__Sètic_as£π
(
x
, 
y
Ë
	`___Sètic_as£π
(x, y)

	)

294 
	#___Sètic_as£π
(
x
, 
y
Ë
	t__as£π_
 ## 
	ty
[(x) ? 1 : -1] \

295 
	t__unu£d


	)

297 
	t_Sètic_as£π
(
	tx
, 
	ty
Ë
	t__hack


	)

301 #i‡!
	t__has_exãnsi⁄
(
	tc_thªad_loˇl
)

308 
	t__has_exãnsi⁄
(
	tcxx_thªad_loˇl
)

309 
	t_Thªad_loˇl
 
	tthªad_loˇl


	)

311 
	t_Thªad_loˇl
 
	t__thªad


	)

326 #i‡(
	tdeföed
(
	t__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L) || \

327 
	t__has_exãnsi⁄
(
	tc_gíîic_£À˘i⁄s
)

328 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

329 
	t_Gíîic
(
	tex¥
, 
	tt
: 
	tyes
, : 
	tno
)

	)

330 #ñi‡
	t__GNUC_PREREQ__
(3, 1Ë&& !
	tdeföed
(
	t__˝lu•lus
)

331 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

332 
	t__buûtö_choo£_ex¥
( \

333 
	t__buûtö_ty≥s_com∑tibÀ_p
(
	t__ty≥of
(
	tex¥
), 
	tt
), 
	tyes
, 
	tno
)

	)

343 #i‡!
	tdeföed
(
	t__˝lu•lus
) && \

344 (
	tdeföed
(
	t__˛™g__
Ë|| 
	t__GNUC_PREREQ__
(4, 6)) && \

345 (!
	tdeföed
(
	t__STDC_VERSION__
) || (__STDC_VERSION__ >= 199901))

346 
	t__mö_size
(
	tx
Ë(x)

	)

348 
	t__mö_size
(
	tx
Ë(x)

	)

351 #i‡
	t__GNUC_PREREQ__
(2, 96)

352 
	t__mÆloc_like
 
	t__©åibuã__
((
	t__mÆloc__
))

	)

353 
	t__puª
 
	t__©åibuã__
((
	t__puª__
))

	)

355 
	t__mÆloc_like


	)

356 
	t__puª


	)

359 #i‡
	t__GNUC_PREREQ__
(3, 1Ë|| (
	tdeföed
(
	t__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

360 
	t__Æways_ölöe
 
	t__©åibuã__
((
	t__Æways_ölöe__
))

	)

362 
	t__Æways_ölöe


	)

365 #i‡
	t__GNUC_PREREQ__
(3, 1)

366 
	t__noölöe
 
	t__©åibuã__
 ((
	t__noölöe__
))

	)

368 
	t__noölöe


	)

371 #i‡
	t__GNUC_PREREQ__
(3, 4)

372 
	t__Á°ˇŒ
 
	t__©åibuã__
((
	t__Á°ˇŒ__
))

	)

373 
	t__ªsu…_u£_check
 
	t__©åibuã__
((
	t__w¨n_unu£d_ªsu…__
))

	)

375 
	t__Á°ˇŒ


	)

376 
	t__ªsu…_u£_check


	)

379 #i‡
	t__GNUC_PREREQ__
(4, 1)

380 
	t__ªtu∫s_twi˚
 
	t__©åibuã__
((
	t__ªtu∫s_twi˚__
))

	)

382 
	t__ªtu∫s_twi˚


	)

385 #i‡
	t__GNUC_PREREQ__
(4, 6Ë|| 
	t__has_buûtö
(
	t__buûtö_uƒóchabÀ
)

386 
	t__uƒóchabÀ
(Ë
	t__buûtö_uƒóchabÀ
()

	)

388 
	t__uƒóchabÀ
(Ë(()0)

	)

392 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

393 
	t__func__
 
	tNULL


	)

396 #i‡(
	tdeföed
(
	t__INTEL_COMPILER
Ë|| (deföed(
	t__GNUC__
Ë&& __GNUC__ >2)Ë&& !deföed(
	t__STRICT_ANSI__
Ë|| 
	t__STDC_VERSION__
 >= 199901

397 
	t__LONG_LONG_SUPPORTED


	)

401 #i‡
	tdeföed
(
	t__˝lu•lus
) && __cplusplus >= 201103L

402 
	t__LONG_LONG_SUPPORTED


	)

403 #i‚def 
	t__STDC_LIMIT_MACROS


404 
	t__STDC_LIMIT_MACROS


	)

406 #i‚def 
	t__STDC_CONSTANT_MACROS


407 
	t__STDC_CONSTANT_MACROS


	)

417 #i‡!(
	t__GNUC__
 =2 && 
	t__GNUC_MINOR__
 == 95)

418 #i‡!
	tdeföed
(
	t__STDC_VERSION__
) || __STDC_VERSION__ < 199901

419 
	t__ª°ri˘


	)

421 
	t__ª°ri˘
 
	tª°ri˘


	)

453 #i‡
	t__GNUC_PREREQ__
(2, 96)

454 
	t__¥edi˘_åue
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 1)

	)

455 
	t__¥edi˘_Ál£
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 0)

	)

457 
	t__¥edi˘_åue
(
	texp
Ë”xp)

	)

458 
	t__¥edi˘_Ál£
(
	texp
Ë”xp)

	)

461 #i‡
	t__GNUC_PREREQ__
(4, 0)

462 
	t__nuŒ_£¡öñ
 
	t__©åibuã__
((
	t__£¡öñ__
))

	)

463 
	t__exp‹ãd
 
	t__©åibuã__
((
	t__visibûôy__
("deÁu…")))

	)

464 
	t__hiddí
 
	t__©åibuã__
((
	t__visibûôy__
("hiddí")))

	)

466 
	t__nuŒ_£¡öñ


	)

467 
	t__exp‹ãd


	)

468 
	t__hiddí


	)

475 #i‡
	t__GNUC_PREREQ__
(4, 1)

476 
	t__off£tof
(
	tty≥
, 
	tfõld
Ë
	t__buûtö_off£tof
—y≥, fõld)

	)

478 #i‚de‡
	t__˝lu•lus


479 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

480 ((
	t__size_t
)(
	t__uöçå_t
)((c⁄° vﬁ©ûê*)&((
	tty≥
 *)0)->
	tfõld
))

	)

482 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

483 (
	t__off£tof__
 (
	tªöãΩªt_ˇ°
 <
	t__size_t
> \

484 (&
	tªöãΩªt_ˇ°
 <const volatile &> \

485 (
	t°©ic_ˇ°
<
	tty≥
 *> (0)->
	tfõld
))))

	)

488 
	t__øngeof
(
	tty≥
, 
	t°¨t
, 
	tíd
) \

489 (
	t__off£tof
(
	tty≥
, 
	tíd
Ë- __off£tof—y≥, 
	t°¨t
))

	)

497 #i‡
	t__GNUC_PREREQ__
(3, 1)

498 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) ({ \

499 c⁄° vﬁ©ûê
	`__ty≥of
(((
s
 *)0)->
m
Ë*
__x
 = (
x
); \

500 
	`__DEQUALIFY
(
s
 *, (c⁄° vﬁ©ûê*)
__x
 - 
	`__off£tof
(s, 
m
));\

501 
	}
})

	)

503 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) \

504 
	t__DEQUALIFY
(
	ts
 *, (c⁄° vﬁ©ûê*)(
	tx
Ë- 
	t__off£tof
(s, 
	tm
))

	)

513 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

514 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

515 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

516 
	t__f‹m©_¨g
(
	tfmèrg
)

	)

517 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

518 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

520 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

521 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

522 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

523 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__sˇnf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

524 
	t__f‹m©_¨g
(
	tfmèrg
Ë
	t__©åibuã__
((
	t__f‹m©_¨g__
 (fmèrg)))

	)

525 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

526 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°rfm⁄__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

527 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

528 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°r·ime__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

532 #i‡
	tdeföed
(
	t__FªeBSD_cc_vîsi⁄
) && __FreeBSD_cc_version >= 300001 && \

533 
	tdeföed
(
	t__GNUC__
Ë&& !deföed(
	t__INTEL_COMPILER
)

534 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

535 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf0__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

537 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

540 #i‡
	tdeföed
(
	t__GNUC__
Ë|| deföed(
	t__INTEL_COMPILER
)

541 #i‚de‡
	t__INTEL_COMPILER


542 
	t__°r⁄g_ª„ªn˚
(
	tsym
,
	tÆüssym
) \

543 
	t__ty≥of
 (
	tsym
Ë
	tÆüssym
 
	t__©åibuã__
 ((
	t__Æüs__
 (#sym)))

	)

545 #ifde‡
	t__STDC__


546 
	t__wók_ª„ªn˚
(
	tsym
,
	tÆüs
) \

547 
	t__asm__
(".weak " #alias); \

548 
	`__asm__
(".equ " #Æü†", " #sym)

	)

549 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

550 
	`__asm__
(".section .gnu.warning." #sym); \

551 
	`__asm__
(".asciz \"" 
msg
 "\""); \

552 
	`__asm__
(".¥evious")

	)

553 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

554 
	`__asm__
(".symvî " #im∂ ", " #sym "@" #vîid)

	)

555 
	#__sym_deÁu…
(
sym
,
im∂
,
vîid
) \

556 
	`__asm__
(".symvî " #im∂ ", " #sym "@@@" #vîid)

	)

558 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

559 
	`__asm__
(".weakálias"); \

560 
	`__asm__
(".equálüs, sym")

	)

561 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

562 
	`__asm__
(".section .gnu.warning.sym"); \

563 
	`__asm__
(".asciz \"msg\""); \

564 
	`__asm__
(".¥evious")

	)

565 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

566 
	`__asm__
(".symvî im∂, sym@vîid")

	)

567 
	#__sym_deÁu…
(
im∂
,
sym
,
vîid
) \

568 
	`__asm__
(".symvî im∂, sym@@@vîid")

	)

572 
	#__GLOBL1
(
sym
Ë
	`__asm__
(".glob»" #sym)

	)

573 
	#__GLOBL
(
sym
Ë
	`__GLOBL1
(sym)

	)

575 #i‡
	`deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

576 
	#__IDSTRING
(
«me
,
°rög
Ë
	`__asm__
(".idít\t\"" såög "\"")

	)

584 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
string

593 #i‚def 
__FBSDID


594 #i‡!
	`deföed
(
STRIP_FBSDID
)

595 
	#__FBSDID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

597 
	#__FBSDID
(
s
Ë
__hack


	)

601 #i‚def 
__RCSID


602 #i‚def 
NO__RCSID


603 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

605 
	#__RCSID
(
s
Ë
__hack


	)

609 #i‚def 
__RCSID_SOURCE


610 #i‚def 
NO__RCSID_SOURCE


611 
	#__RCSID_SOURCE
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_sour˚_
,
__LINE__
),s)

	)

613 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

617 #i‚def 
__SCCSID


618 #i‚def 
NO__SCCSID


619 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__sccsid_
,
__LINE__
),s)

	)

621 
	#__SCCSID
(
s
Ë
__hack


	)

625 #i‚def 
__COPYRIGHT


626 #i‚def 
NO__COPYRIGHT


627 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__c›yright_
,
__LINE__
),s)

	)

629 
	#__COPYRIGHT
(
s
Ë
__hack


	)

633 #i‚def 
__DECONST


634 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° *)(v¨))

	)

637 #i‚def 
__DEVOLATILE


638 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(vﬁ©ûê*)(v¨))

	)

641 #i‚def 
__DEQUALIFY


642 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

669 #i‡
	`deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

670 #unde‡
_POSIX_C_SOURCE


671 
	#_POSIX_C_SOURCE
 199009

	)

675 #i‡
	`deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

676 #unde‡
_POSIX_C_SOURCE


677 
	#_POSIX_C_SOURCE
 199209

	)

681 #ifde‡
_XOPEN_SOURCE


682 #i‡
_XOPEN_SOURCE
 - 0 >= 700

683 
	#__XSI_VISIBLE
 700

	)

684 #unde‡
_POSIX_C_SOURCE


685 
	#_POSIX_C_SOURCE
 200809

	)

686 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

687 
	#__XSI_VISIBLE
 600

	)

688 #unde‡
_POSIX_C_SOURCE


689 
	#_POSIX_C_SOURCE
 200112

	)

690 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

691 
	#__XSI_VISIBLE
 500

	)

692 #unde‡
_POSIX_C_SOURCE


693 
	#_POSIX_C_SOURCE
 199506

	)

701 #i‡
	`deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

702 
	#_POSIX_C_SOURCE
 198808

	)

704 #ifde‡
_POSIX_C_SOURCE


705 #i‡
_POSIX_C_SOURCE
 >= 200809

706 
	#__POSIX_VISIBLE
 200809

	)

707 
	#__ISO_C_VISIBLE
 1999

	)

708 #ñi‡
_POSIX_C_SOURCE
 >= 200112

709 
	#__POSIX_VISIBLE
 200112

	)

710 
	#__ISO_C_VISIBLE
 1999

	)

711 #ñi‡
_POSIX_C_SOURCE
 >= 199506

712 
	#__POSIX_VISIBLE
 199506

	)

713 
	#__ISO_C_VISIBLE
 1990

	)

714 #ñi‡
_POSIX_C_SOURCE
 >= 199309

715 
	#__POSIX_VISIBLE
 199309

	)

716 
	#__ISO_C_VISIBLE
 1990

	)

717 #ñi‡
_POSIX_C_SOURCE
 >= 199209

718 
	#__POSIX_VISIBLE
 199209

	)

719 
	#__ISO_C_VISIBLE
 1990

	)

720 #ñi‡
_POSIX_C_SOURCE
 >= 199009

721 
	#__POSIX_VISIBLE
 199009

	)

722 
	#__ISO_C_VISIBLE
 1990

	)

724 
	#__POSIX_VISIBLE
 198808

	)

725 
	#__ISO_C_VISIBLE
 0

	)

740 #i‡
	`deföed
(
_ANSI_SOURCE
)

741 
	#__POSIX_VISIBLE
 0

	)

742 
	#__XSI_VISIBLE
 0

	)

743 
	#__BSD_VISIBLE
 0

	)

744 
	#__ISO_C_VISIBLE
 1990

	)

745 
	#__EXT1_VISIBLE
 0

	)

746 #ñi‡
	`deföed
(
_C99_SOURCE
)

747 
	#__POSIX_VISIBLE
 0

	)

748 
	#__XSI_VISIBLE
 0

	)

749 
	#__BSD_VISIBLE
 0

	)

750 
	#__ISO_C_VISIBLE
 1999

	)

751 
	#__EXT1_VISIBLE
 0

	)

752 #ñi‡
	`deföed
(
_C11_SOURCE
)

753 
	#__POSIX_VISIBLE
 0

	)

754 
	#__XSI_VISIBLE
 0

	)

755 
	#__BSD_VISIBLE
 0

	)

756 
	#__ISO_C_VISIBLE
 2011

	)

757 
	#__EXT1_VISIBLE
 0

	)

759 
	#__POSIX_VISIBLE
 200809

	)

760 
	#__XSI_VISIBLE
 700

	)

761 
	#__BSD_VISIBLE
 1

	)

762 
	#__ISO_C_VISIBLE
 2011

	)

763 
	#__EXT1_VISIBLE
 1

	)

768 #i‡
	`deföed
(
__STDC_WANT_LIB_EXT1__
)

769 #unde‡
__EXT1_VISIBLE


770 #i‡
__STDC_WANT_LIB_EXT1__


771 
	#__EXT1_VISIBLE
 1

	)

773 
	#__EXT1_VISIBLE
 0

	)

777 #i‡
	`deföed
(
__mùs
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__riscv
)

778 
	#__NO_TLS
 1

	)

785 #i‡
	`deföed
(
__¨m__
Ë&& !deföed(
__ARM_ARCH
)

786 
	~<machöe/a˛e-com∑t.h
>

792 #i‡!(
	`deföed
(
__˛™g__
Ë&& 
	`__has_„©uª
(
nuŒabûôy
))

793 
	#_N⁄nuŒ


	)

794 
	#_NuŒabÀ


	)

795 
	#_NuŒ_un•ecifõd


	)

796 
	#__NULLABILITY_PRAGMA_PUSH


	)

797 
	#__NULLABILITY_PRAGMA_POP


	)

799 
	#__NULLABILITY_PRAGMA_PUSH
 
	`_Pøgma
("clang diagnosticÖush") \

800 
	`_Pøgma
("˛™g dügno°i¯ign‹ed \"-WnuŒabûôy-com∂ëíess\"")

	)

801 
	#__NULLABILITY_PRAGMA_POP
 
	`_Pøgma
("˛™g dügno°i¯p›")

	)

811 #i‡
	`__has_©åibuã
(
__¨gumít_wôh_ty≥_èg__
) && \

812 
	$__has_©åibuã
(
__ty≥_èg_f‹_d©©y≥__
)

813 
	#__¨g_ty≥_èg
(
¨g_köd
, 
¨g_idx
, 
ty≥_èg_idx
) \

814 
	`__©åibuã__
((
	`__¨gumít_wôh_ty≥_èg__
(
¨g_köd
, 
¨g_idx
, 
ty≥_èg_idx
)))

	)

815 
	#__d©©y≥_ty≥_èg
(
köd
, 
ty≥
) \

816 
	`__©åibuã__
((
	`__ty≥_èg_f‹_d©©y≥__
(
köd
, 
ty≥
)))

	)

818 
	#__¨g_ty≥_èg
(
¨g_köd
, 
¨g_idx
, 
ty≥_èg_idx
)

	)

819 
	#__d©©y≥_ty≥_èg
(
köd
, 
ty≥
)

	)

834 #i‡
	`__has_exãnsi⁄
(
c_thªad_ß„ty_©åibuãs
)

835 
	#__lock_™nŸ©e
(
x
Ë
	`__©åibuã__
((x))

	)

837 
	#__lock_™nŸ©e
(
x
)

	)

841 
	#__lockabÀ
 
	`__lock_™nŸ©e
(
lockabÀ
)

	)

844 
	#__locks_ex˛usive
(...) \

845 
	`__lock_™nŸ©e
(
	`ex˛usive_lock_fun˘i⁄
(
__VA_ARGS__
))

	)

846 
	#__locks_sh¨ed
(...) \

847 
	`__lock_™nŸ©e
(
	`sh¨ed_lock_fun˘i⁄
(
__VA_ARGS__
))

	)

850 
	#__åylocks_ex˛usive
(...) \

851 
	`__lock_™nŸ©e
(
	`ex˛usive_åylock_fun˘i⁄
(
__VA_ARGS__
))

	)

852 
	#__åylocks_sh¨ed
(...) \

853 
	`__lock_™nŸ©e
(
	`sh¨ed_åylock_fun˘i⁄
(
__VA_ARGS__
))

	)

856 
	#__u∆ocks
(...Ë
	`__lock_™nŸ©e
(
	`u∆ock_fun˘i⁄
(
__VA_ARGS__
))

	)

859 
	#__as£πs_ex˛usive
(...) \

860 
	`__lock_™nŸ©e
(
	`as£π_ex˛usive_lock
(
__VA_ARGS__
))

	)

861 
	#__as£πs_sh¨ed
(...) \

862 
	`__lock_™nŸ©e
(
	`as£π_sh¨ed_lock
(
__VA_ARGS__
))

	)

865 
	#__ªquúes_ex˛usive
(...) \

866 
	`__lock_™nŸ©e
(
	`ex˛usive_locks_ªquúed
(
__VA_ARGS__
))

	)

867 
	#__ªquúes_sh¨ed
(...) \

868 
	`__lock_™nŸ©e
(
	`sh¨ed_locks_ªquúed
(
__VA_ARGS__
))

	)

869 
	#__ªquúes_u∆ocked
(...) \

870 
	`__lock_™nŸ©e
(
	`locks_ex˛uded
(
__VA_ARGS__
))

	)

873 
	#__no_lock_™Æysis
 
	`__lock_™nŸ©e
(
no_thªad_ß„ty_™Æysis
)

	)

876 
	#__gu¨ded_by
(
x
Ë
	`__lock_™nŸ©e
(
	`gu¨ded_by
(x))

	)

877 
	#__±_gu¨ded_by
(
x
Ë
	`__lock_™nŸ©e
(
	`±_gu¨ded_by
(x))

	)

	@/usr/include/sys/condvar.h

31 #i‚def 
_SYS_CONDVAR_H_


32 
	#_SYS_CONDVAR_H_


	)

34 #i‚def 
LOCORE


35 
	~<sys/queue.h
>

37 
	glock_obje˘
;

38 
	gthªad
;

40 
TAILQ_HEAD
(
cv_waôq
, 
thªad
);

48 
	scv
 {

49 c⁄° *
	mcv_des¸ùti⁄
;

50 
	mcv_waôîs
;

53 #ifde‡
_KERNEL


54 
cv_öô
(
cv
 *
cvp
, c⁄° *
desc
);

55 
cv_de°roy
(
cv
 *
cvp
);

57 
_cv_waô
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

58 
_cv_waô_u∆ock
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

59 
_cv_waô_sig
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

60 
_cv_timedwaô_sbt
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
,

61 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
);

62 
_cv_timedwaô_sig_sbt
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
,

63 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
);

65 
cv_sig«l
(
cv
 *
cvp
);

66 
cv_brﬂdˇ°¥i
(
cv
 *
cvp
, 
¥i
);

68 
	#cv_waô
(
cvp
, 
lock
) \

69 
	`_cv_waô
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

70 
	#cv_waô_u∆ock
(
cvp
, 
lock
) \

71 
	`_cv_waô_u∆ock
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

72 
	#cv_waô_sig
(
cvp
, 
lock
) \

73 
	`_cv_waô_sig
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

74 
	#cv_timedwaô
(
cvp
, 
lock
, 
timo
) \

75 
	`_cv_timedwaô_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, \

76 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

77 
	#cv_timedwaô_sbt
(
cvp
, 
lock
, 
sbt
, 
¥
, 
Êags
) \

78 
	`_cv_timedwaô_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, (
sbt
), (
¥
), (
Êags
))

	)

79 
	#cv_timedwaô_sig
(
cvp
, 
lock
, 
timo
) \

80 
	`_cv_timedwaô_sig_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, \

81 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

82 
	#cv_timedwaô_sig_sbt
(
cvp
, 
lock
, 
sbt
, 
¥
, 
Êags
) \

83 
	`_cv_timedwaô_sig_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, (
sbt
), (
¥
), (
Êags
))

	)

85 
	#cv_brﬂdˇ°
(
cvp
Ë
	`cv_brﬂdˇ°¥i
(cvp, 0)

	)

87 
	#cv_wmesg
(
cvp
Ë((cvp)->
cv_des¸ùti⁄
)

	)

	@/usr/include/sys/conf.h

42 #i‚de‡
_SYS_CONF_H_


43 
	#_SYS_CONF_H_


	)

45 #ifde‡
_KERNEL


46 
	~<sys/evíth™dÀr.h
>

48 
	~<sys/queue.h
>

51 
	g¢≠d©a
;

52 
	gdevfs_dúít
;

53 
	gcdevsw
;

54 
	gfûe
;

56 
	scdev
 {

57 *
	msi_•¨e0
;

58 
u_öt
 
	msi_Êags
;

59 
	#SI_ETERNAL
 0x0001

	)

60 
	#SI_ALIAS
 0x0002

	)

61 
	#SI_NAMED
 0x0004

	)

62 
	#SI_CHEAPCLONE
 0x0008

	)

63 
	#SI_CHILD
 0x0010

	)

64 
	#SI_DUMPDEV
 0x0080

	)

65 
	#SI_CLONELIST
 0x0200

	)

66 
	#SI_UNMAPPED
 0x0400

	)

67 
	#SI_NOSPLIT
 0x0800

	)

68 
time•ec
 
	msi_©ime
;

69 
time•ec
 
	msi_˘ime
;

70 
time•ec
 
	msi_mtime
;

71 
uid_t
 
	msi_uid
;

72 
gid_t
 
	msi_gid
;

73 
mode_t
 
	msi_mode
;

74 
u¸ed
 *
	msi_¸ed
;

75 
	msi_drv0
;

76 
	msi_ªfcou¡
;

77 
LIST_ENTRY
(
cdev
Ë
	msi_li°
;

78 
LIST_ENTRY
(
cdev
Ë
	msi_˛⁄e
;

79 
LIST_HEAD
(, 
cdev
Ë
	msi_chûdªn
;

80 
LIST_ENTRY
(
cdev
Ë
	msi_siblögs
;

81 
cdev
 *
	msi_∑ª¡
;

82 
mou¡
 *
	msi_mou¡±
;

83 *
	msi_drv1
, *
	msi_drv2
;

84 
cdevsw
 *
	msi_devsw
;

85 
	msi_iosize_max
;

86 
u_l⁄g
 
	msi_u£cou¡
;

87 
u_l⁄g
 
	msi_thªadcou¡
;

89 
¢≠d©a
 *
	m__sid_¢≠d©a
;

90 } 
	m__si_u
;

91 
	msi_«me
[
SPECNAMELEN
 + 1];

94 
	#si_¢≠d©a
 
__si_u
.
__sid_¢≠d©a


	)

96 #ifde‡
_KERNEL


102 
	gbio
;

103 
	gbuf
;

104 
	gdum≥röfo
;

105 
	gkî√ldumphódî
;

106 
	gthªad
;

107 
	guio
;

108 
	gknŸe
;

109 
	g˛⁄edevs
;

110 
	gvm_obje˘
;

111 
	gvnode
;

113 
	td_›í_t
(
	tcdev
 *
	tdev
, 
	toÊags
, 
	tdevty≥
, 
	tthªad
 *
	ttd
);

114 
	td_fd›í_t
(
	tcdev
 *
	tdev
, 
	toÊags
, 
	tthªad
 *
	ttd
, 
	tfûe
 *
	tÂ
);

115 
	td_˛o£_t
(
	tcdev
 *
	tdev
, 
	tfÊag
, 
	tdevty≥
, 
	tthªad
 *
	ttd
);

116 
	td_°øãgy_t
(
	tbio
 *
	tbp
);

117 
	td_io˘l_t
(
	tcdev
 *
	tdev
, 
	tu_l⁄g
 
	tcmd
, 
	tˇddr_t
 
	td©a
,

118 
	tfÊag
, 
	tthªad
 *
	ttd
);

120 
	td_ªad_t
(
	tcdev
 *
	tdev
, 
	tuio
 *uio, 
	tioÊag
);

121 
	td_wrôe_t
(
	tcdev
 *
	tdev
, 
	tuio
 *uio, 
	tioÊag
);

122 
	td_pﬁl_t
(
	tcdev
 *
	tdev
, 
	tevíts
, 
	tthªad
 *
	ttd
);

123 
	td_kqfûãr_t
(
	tcdev
 *
	tdev
, 
	tknŸe
 *
	tkn
);

124 
	td_mm≠_t
(
	tcdev
 *
	tdev
, 
	tvm_ooff£t_t
 
	toff£t
, 
	tvm_∑ddr_t
 *
	t∑ddr
,

125 
	t≈rŸ
, 
	tvm_mem©å_t
 *
	tmem©å
);

126 
	td_mm≠_sögÀ_t
(
	tcdev
 *cdev, 
	tvm_ooff£t_t
 *
	toff£t
,

127 
	tvm_size_t
 
	tsize
, 
	tvm_obje˘
 **
	tobje˘
, 
	t≈rŸ
);

128 
	td_purge_t
(
	tcdev
 *
	tdev
);

130 
	tdum≥r_t
(

131 *
	t_¥iv
,

132 *
	t_vútuÆ
,

133 
	tvm_off£t_t
 
	t_physiˇl
,

134 
	toff_t
 
	t_off£t
,

135 
	tsize_t
 
	t_Àngth
);

136 
	tdum≥r_°¨t_t
(
	tdum≥röfo
 *
	tdi
);

137 
	tdum≥r_hdr_t
(
	tdum≥röfo
 *
	tdi
, 
	tkî√ldumphódî
 *
	tkdh
,

138 *
	tkey
, 
	tuöt32_t
 
	tkeyÀn
);

145 
	#D_TAPE
 0x0001

	)

146 
	#D_DISK
 0x0002

	)

147 
	#D_TTY
 0x0004

	)

148 
	#D_MEM
 0x0008

	)

150 #ifde‡
_KERNEL


152 
	#D_TYPEMASK
 0xffff

	)

157 
	#D_TRACKCLOSE
 0x00080000

	)

158 
	#D_MMAP_ANON
 0x00100000

	)

159 
	#D_NEEDGIANT
 0x00400000

	)

160 
	#D_NEEDMINOR
 0x00800000

	)

165 
	#D_VERSION_00
 0x20011966

	)

166 
	#D_VERSION_01
 0x17032005

	)

167 
	#D_VERSION_02
 0x28042009

	)

168 
	#D_VERSION_03
 0x17122009

	)

169 
	#D_VERSION
 
D_VERSION_03


	)

174 
	#D_INIT
 0x80000000

	)

179 
	scdevsw
 {

180 
	md_vîsi⁄
;

181 
u_öt
 
	md_Êags
;

182 c⁄° *
	md_«me
;

183 
d_›í_t
 *
	md_›í
;

184 
d_fd›í_t
 *
	md_fd›í
;

185 
d_˛o£_t
 *
	md_˛o£
;

186 
d_ªad_t
 *
	md_ªad
;

187 
d_wrôe_t
 *
	md_wrôe
;

188 
d_io˘l_t
 *
	md_io˘l
;

189 
d_pﬁl_t
 *
	md_pﬁl
;

190 
d_mm≠_t
 *
	md_mm≠
;

191 
d_°øãgy_t
 *
	md_°øãgy
;

192 
dum≥r_t
 *
	md_dump
;

193 
d_kqfûãr_t
 *
	md_kqfûãr
;

194 
d_purge_t
 *
	md_purge
;

195 
d_mm≠_sögÀ_t
 *
	md_mm≠_sögÀ
;

197 
öt32_t
 
	md_•¨e0
[3];

198 *
	md_•¨e1
[3];

201 
LIST_HEAD
(, 
cdev
Ë
	md_devs
;

202 
	md_•¨e2
;

204 
cdevsw
 *
	mgü¡åick
;

205 
SLIST_ENTRY
(
cdevsw
Ë
	mpo°‰ì_li°
;

206 } 
	m__d_gü¡
;

208 
	#d_gü¡åick
 
__d_gü¡
.
gü¡åick


	)

209 
	#d_po°‰ì_li°
 
__d_gü¡
.
po°‰ì_li°


	)

211 
	gmoduÀ
;

213 
	sdevsw_moduÀ_d©a
 {

214 (*
	mchaöevh
)(
	mmoduÀ
 *, , *);

215 *
	mchaö¨g
;

219 
	#DEV_MODULE_ORDERED
(
«me
, 
evh
, 
¨g
, 
‹d
) \

220 
moduÀd©a_t
 
«me
##
_mod
 = { \

222 
evh
, \

223 
¨g
 \

225 
	`DECLARE_MODULE
(
«me
,Çame##
_mod
, 
SI_SUB_DRIVERS
, 
‹d
)

	)

227 
	#DEV_MODULE
(
«me
, 
evh
, 
¨g
) \

228 
	`DEV_MODULE_ORDERED
(
«me
, 
evh
, 
¨g
, 
SI_ORDER_MIDDLE
)

	)

230 
˛⁄e_£tup
(
˛⁄edevs
 **
cdp
);

231 
˛⁄e_˛ónup
(
˛⁄edevs
 **);

232 
	#CLONE_UNITMASK
 0xfffff

	)

233 
	#CLONE_FLAG0
 (
CLONE_UNITMASK
 + 1)

	)

234 
˛⁄e_¸óã
(
˛⁄edevs
 **, 
cdevsw
 *, *
unô
, 
cdev
 **
dev
, 
exåa
);

236 
	#MAKEDEV_REF
 0x01

	)

237 
	#MAKEDEV_WHTOUT
 0x02

	)

238 
	#MAKEDEV_NOWAIT
 0x04

	)

239 
	#MAKEDEV_WAITOK
 0x08

	)

240 
	#MAKEDEV_ETERNAL
 0x10

	)

241 
	#MAKEDEV_CHECKNAME
 0x20

	)

242 
	smake_dev_¨gs
 {

243 
size_t
 
	mmda_size
;

244 
	mmda_Êags
;

245 
cdevsw
 *
	mmda_devsw
;

246 
u¸ed
 *
	mmda_¸
;

247 
uid_t
 
	mmda_uid
;

248 
gid_t
 
	mmda_gid
;

249 
	mmda_mode
;

250 
	mmda_unô
;

251 *
	mmda_si_drv1
;

252 *
	mmda_si_drv2
;

254 
make_dev_¨gs_öô_im∂
(
make_dev_¨gs
 *
_¨gs
, 
size_t
 
_sz
);

255 
	#make_dev_¨gs_öô
(
a
) \

256 
	`make_dev_¨gs_öô_im∂
((
a
), (
make_dev_¨gs
))

	)

258 
cou¡_dev
(
cdev
 *
_dev
);

259 
dñi°_dev
(
cdev
 *
_dev
);

260 
de°roy_dev
(
cdev
 *
_dev
);

261 
de°roy_dev_sched
(
cdev
 *
dev
);

262 
de°roy_dev_sched_cb
(
cdev
 *
dev
, (*
cb
)(*), *
¨g
);

263 
	`de°roy_dev_døö
(
cdevsw
 *
csw
);

264 
	`døö_dev_˛⁄e_evíts
();

265 
cdevsw
 *
	`dev_ª·hªad
(
cdev
 *
_dev
, *
_ªf
);

266 
cdevsw
 *
	`devvn_ª·hªad
(
vnode
 *
vp
, 
cdev
 **
devp
, *
_ªf
);

267 
	`dev_ª…hªad
(
cdev
 *
_dev
, 
_ªf
);

268 
	`dev_dïíds
(
cdev
 *
_pdev
, cdev *
_cdev
);

269 
	`dev_ªf
(
cdev
 *
dev
);

270 
	`dev_ªÊ
(
cdev
 *
dev
);

271 
	`dev_ªl
(
cdev
 *
dev
);

272 
cdev
 *
	$make_dev
(
cdevsw
 *
_devsw
, 
_unô
, 
uid_t
 
_uid
, 
gid_t
 
_gid
,

273 
_≥rms
, c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(6, 7);

274 
cdev
 *
	$make_dev_¸ed
(
cdevsw
 *
_devsw
, 
_unô
,

275 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_≥rms
,

276 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(7, 8);

277 
cdev
 *
	$make_dev_¸edf
(
_Êags
,

278 
cdevsw
 *
_devsw
, 
_unô
,

279 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_mode
,

280 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(8, 9);

281 
	$make_dev_p
(
_Êags
, 
cdev
 **
_cdev
, 
cdevsw
 *
_devsw
,

282 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_mode
,

283 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(8, 9);

284 
	$make_dev_s
(
make_dev_¨gs
 *
_¨gs
, 
cdev
 **
_cdev
,

285 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(3, 4);

286 
cdev
 *
	$make_dev_Æüs
(
cdev
 *
_pdev
, c⁄° *
_fmt
, ...)

287 
	`__¥ötÊike
(2, 3);

288 
	$make_dev_Æüs_p
(
_Êags
, 
cdev
 **
_cdev
, cdev *
_pdev
,

289 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(4, 5);

290 
	`make_dev_phy•©h_Æüs
(
_Êags
, 
cdev
 **
_cdev
,

291 
cdev
 *
_pdev
, cdev *
_ﬁd_Æüs
,

292 c⁄° *
_phy•©h
);

293 
	`dev_lock
();

294 
	`dev_u∆ock
();

296 #ifde‡
KLD_MODULE


297 
	#MAKEDEV_ETERNAL_KLD
 0

	)

299 
	#MAKEDEV_ETERNAL_KLD
 
MAKEDEV_ETERNAL


	)

302 
	#dev2unô
(
d
Ë((d)->
si_drv0
)

	)

304 
	td_¥iv_dt‹_t
(*
	td©a
);

305 
	`devfs_gë_cdev¥iv
(**
d©≠
);

306 
	`devfs_£t_cdev¥iv
(*
¥iv
, 
d_¥iv_dt‹_t
 *
då
);

307 
	`devfs_˛ór_cdev¥iv
();

309 
öo_t
 
	`devfs_Æloc_cdp_öode
();

310 
	`devfs_‰ì_cdp_öode
(
öo_t
 
öo
);

312 
	#UID_ROOT
 0

	)

313 
	#UID_BIN
 3

	)

314 
	#UID_UUCP
 66

	)

315 
	#UID_NOBODY
 65534

	)

317 
	#GID_WHEEL
 0

	)

318 
	#GID_KMEM
 2

	)

319 
	#GID_TTY
 4

	)

320 
	#GID_OPERATOR
 5

	)

321 
	#GID_BIN
 7

	)

322 
	#GID_GAMES
 13

	)

323 
	#GID_VIDEO
 44

	)

324 
	#GID_DIALER
 68

	)

325 
	#GID_NOGROUP
 65533

	)

326 
	#GID_NOBODY
 65534

	)

328 (*
	tdev_˛⁄e_‚
)(*
	t¨g
, 
	tu¸ed
 *
	t¸ed
, *
	t«me
,

329 
	t«mñí
, 
	tcdev
 **
	tªsu…
);

331 
	`dev_°d˛⁄e
(*
_«me
, **
_«mï
, c⁄° *
_°em
, *
_unô
);

332 
	`EVENTHANDLER_DECLARE
(
dev_˛⁄e
, 
dev_˛⁄e_‚
);

335 
kî√ldump¸y±o
;

336 
kî√ldumphódî
;

338 
	sdum≥röfo
 {

339 
dum≥r_t
 *
dum≥r
;

340 
dum≥r_°¨t_t
 *
dum≥r_°¨t
;

341 
dum≥r_hdr_t
 *
dum≥r_hdr
;

342 *
¥iv
;

343 
u_öt
 
blocksize
;

344 
u_öt
 
maxiosize
;

345 
off_t
 
medüoff£t
;

346 
off_t
 
medüsize
;

349 *
blockbuf
;

350 
off_t
 
dumpoff
;

351 
off_t
 
‹igdumpoff
;

352 
kî√ldump¸y±o
 *
kd¸y±o
;

353 
kî√ldumpcomp
 *
kdcomp
;

356 
dumpög
;

358 
	`dﬂdump
(
boﬁón_t
);

359 
	`£t_dum≥r
(
dum≥röfo
 *
di
, c⁄° *
dev«me
, 
thªad
 *
td
,

360 
uöt8_t
 
com¥essi⁄
, uöt8_à
í¸y±i⁄
, c⁄° uöt8_à*
key
,

361 
uöt32_t
 
í¸y±edkeysize
, c⁄° 
uöt8_t
 *
í¸y±edkey
);

362 
	`˛ór_dum≥r
(
thªad
 *
td
);

364 
	`dump_°¨t
(
dum≥röfo
 *
di
, 
kî√ldumphódî
 *
kdh
);

365 
	`dump_≠≥nd
(
dum≥röfo
 *, *, 
vm_off£t_t
, 
size_t
);

366 
	`dump_wrôe
(
dum≥röfo
 *, *, 
vm_off£t_t
, 
off_t
, 
size_t
);

367 
	`dump_föish
(
dum≥röfo
 *
di
, 
kî√ldumphódî
 *
kdh
);

368 
	`dump_öô_hódî
(c⁄° 
dum≥röfo
 *
di
, 
kî√ldumphódî
 *
kdh
,

369 *
magic
, 
uöt32_t
 
¨chvî
, 
uöt64_t
 
dum∂í
);

	@/usr/include/sys/consio.h

33 #i‚def 
_SYS_CONSIO_H_


34 
	#_SYS_CONSIO_H_


	)

36 #i‚de‡
_KERNEL


37 
	~<sys/ty≥s.h
>

39 
	~<sys/ioccom.h
>

50 
	#KD_TEXT
 0

	)

51 
	#KD_TEXT0
 0

	)

52 
	#KD_GRAPHICS
 1

	)

53 
	#KD_TEXT1
 2

	)

54 
	#KD_PIXEL
 3

	)

55 
	#KDGETMODE
 
	`_IOR
('K', 9, )

	)

56 
	#KDSETMODE
 
	`_IOWINT
('K', 10)

	)

59 
	#KDSBORDER
 
	`_IOWINT
('K', 13)

	)

62 
	s_s¸_size
 {

63 
	ms¸_size
[3];

65 
_s¸_size
 
	ts¸_size_t
;

67 
	#KDRASTER
 
	`_IOW
('K', 100, 
s¸_size_t
)

	)

70 
	s_s¸m≠
 {

71 
	ms¸m≠
[256];

73 
_s¸m≠
 
	ts¸m≠_t
;

75 
	#GIO_SCRNMAP
 
	`_IOR
('k', 2, 
s¸m≠_t
)

	)

76 
	#PIO_SCRNMAP
 
	`_IOW
('k', 3, 
s¸m≠_t
)

	)

79 
	#GIO_ATTR
 
	`_IOR
('a', 0, )

	)

82 
	#GIO_COLOR
 
	`_IOR
('c', 0, )

	)

85 
	#CONS_CURRENT
 
	`_IOR
('c', 1, )

	)

88 
	#CONS_GET
 
	`_IOR
('c', 2, )

	)

91 
	#CONS_IO
 
	`_IO
('c', 3)

	)

94 
	#CONS_BLANKTIME
 
	`_IOW
('c', 4, )

	)

97 
	ssßvî
 {

98 
	#MAXSSAVER
 16

	)

99 
	m«me
[
MAXSSAVER
];

100 
	mnum
;

101 
	mtime
;

103 
sßvî
 
	tsßvî_t
;

105 
	#CONS_SSAVER
 
	`_IOW
('c', 5, 
sßvî_t
)

	)

106 
	#CONS_GSAVER
 
	`_IOWR
('c', 6, 
sßvî_t
)

	)

117 
	#CONS_CURSORTYPE
 
	`_IOW
('c', 7, )

	)

120 
	#CONS_VISUAL_BELL
 (1 << 0)

	)

121 
	#CONS_QUIET_BELL
 (1 << 1)

	)

122 
	#CONS_BELLTYPE
 
	`_IOW
('c', 8, )

	)

125 
	#CONS_HISTORY
 
	`_IOW
('c', 9, )

	)

128 
	#CONS_CLRHIST
 
	`_IO
('c', 10)

	)

131 
	smou£_d©a
 {

132 
	mx
;

133 
	my
;

134 
	mz
;

135 
	mbuâ⁄s
;

137 
mou£_d©a
 
	tmou£_d©a_t
;

139 
	smou£_mode
 {

140 
	mmode
;

141 
	msig«l
;

143 
mou£_mode
 
	tmou£_mode_t
;

145 
	smou£_evít
 {

146 
	mid
;

147 
	mvÆue
;

149 
mou£_evít
 
	tmou£_evít_t
;

151 
	smou£_öfo
 {

152 
	m›î©i⁄
;

153 
	#MOUSE_SHOW
 0x01

	)

154 
	#MOUSE_HIDE
 0x02

	)

155 
	#MOUSE_MOVEABS
 0x03

	)

156 
	#MOUSE_MOVEREL
 0x04

	)

157 
	#MOUSE_GETINFO
 0x05

	)

158 
	#MOUSE_MODE
 0x06

	)

159 
	#MOUSE_ACTION
 0x07

	)

160 
	#MOUSE_MOTION_EVENT
 0x08

	)

161 
	#MOUSE_BUTTON_EVENT
 0x09

	)

162 
	#MOUSE_MOUSECHAR
 0x0a

	)

164 
mou£_d©a_t
 
	md©a
;

165 
mou£_mode_t
 
	mmode
;

166 
mou£_evít_t
 
	mevít
;

167 
	mmou£_ch¨
;

168 } 
	mu
;

170 
mou£_öfo
 
	tmou£_öfo_t
;

172 
	#CONS_MOUSECTL
 
	`_IOWR
('c', 10, 
mou£_öfo_t
)

	)

175 
	#CONS_IDLE
 
	`_IOR
('c', 11, )

	)

178 
	#CONS_NO_SAVER
 (-1)

	)

179 
	#CONS_LKM_SAVER
 0

	)

180 
	#CONS_USR_SAVER
 1

	)

181 
	#CONS_SAVERMODE
 
	`_IOW
('c', 12, )

	)

184 
	#CONS_SAVERSTART
 
	`_IOW
('c', 13, )

	)

187 
	#CONS_BLINK_CURSOR
 (1 << 0)

	)

188 
	#CONS_CHAR_CURSOR
 (1 << 1)

	)

189 
	#CONS_HIDDEN_CURSOR
 (1 << 2)

	)

190 
	#CONS_CURSOR_ATTRS
 (
CONS_BLINK_CURSOR
 | 
CONS_CHAR_CURSOR
 | \

191 
CONS_HIDDEN_CURSOR
)

	)

192 
	#CONS_CHARCURSOR_COLORS
 (1 << 26)

	)

193 
	#CONS_MOUSECURSOR_COLORS
 (1 << 27)

	)

194 
	#CONS_DEFAULT_CURSOR
 (1 << 28)

	)

195 
	#CONS_SHAPEONLY_CURSOR
 (1 << 29)

	)

196 
	#CONS_RESET_CURSOR
 (1 << 30)

	)

197 
	#CONS_LOCAL_CURSOR
 (1U << 31)

	)

198 
	scsh≠e
 {

200 
	msh≠e
[3];

202 
	#CONS_GETCURSORSHAPE
 
	`_IOWR
('c', 14, 
csh≠e
)

	)

203 
	#CONS_SETCURSORSHAPE
 
	`_IOW
('c', 15, 
csh≠e
)

	)

206 
	s‚t8
 {

207 
	m‚t8x8
[8*256];

209 
‚t8
 
	t‚t8_t
;

211 
	s‚t14
 {

212 
	m‚t8x14
[14*256];

214 
‚t14
 
	t‚t14_t
;

216 
	s‚t16
 {

217 
	m‚t8x16
[16*256];

219 
‚t16
 
	t‚t16_t
;

221 
	sv‚t_m≠
 {

222 
uöt32_t
 
	m§c
;

223 
uöt16_t
 
	md°
;

224 
uöt16_t
 
	mÀn
;

226 
v‚t_m≠
 
	tv‚t_m≠_t
;

228 
	#VFNT_MAP_NORMAL
 0

	)

229 
	#VFNT_MAP_NORMAL_RIGHT
 1

	)

230 
	#VFNT_MAP_BOLD
 2

	)

231 
	#VFNT_MAP_BOLD_RIGHT
 3

	)

232 
	#VFNT_MAPS
 4

	)

233 
	sv‚t
 {

234 
v‚t_m≠_t
 *
	mm≠
[
VFNT_MAPS
];

235 
uöt8_t
 *
	mglyphs
;

236 
	mm≠_cou¡
[
VFNT_MAPS
];

237 
	mglyph_cou¡
;

238 
	mwidth
;

239 
	mheight
;

241 
v‚t
 
	tv‚t_t
;

243 
	#PIO_FONT8x8
 
	`_IOW
('c', 64, 
‚t8_t
)

	)

244 
	#GIO_FONT8x8
 
	`_IOR
('c', 65, 
‚t8_t
)

	)

245 
	#PIO_FONT8x14
 
	`_IOW
('c', 66, 
‚t14_t
)

	)

246 
	#GIO_FONT8x14
 
	`_IOR
('c', 67, 
‚t14_t
)

	)

247 
	#PIO_FONT8x16
 
	`_IOW
('c', 68, 
‚t16_t
)

	)

248 
	#GIO_FONT8x16
 
	`_IOR
('c', 69, 
‚t16_t
)

	)

249 
	#PIO_VFONT
 
	`_IOW
('c', 70, 
v‚t_t
)

	)

250 
	#GIO_VFONT
 
	`_IOR
('c', 71, 
v‚t_t
)

	)

251 
	#PIO_VFONT_DEFAULT
 
	`_IO
('c', 72)

	)

254 
	scﬁ‹s
 {

255 
	mf‹e
;

256 
	mback
;

259 
	svid_öfo
 {

260 
	msize
;

261 
	mm_num
;

262 
u_sh‹t
 
	mf⁄t_size
;

263 
u_sh‹t
 
	mmv_row
, 
	mmv_cﬁ
;

264 
u_sh‹t
 
	mmv_rsz
, 
	mmv_csz
;

265 
u_sh‹t
 
	mmv_hsz
;

266 
cﬁ‹s
 
	mmv_n‹m
,

267 
	mmv_ªv
,

268 
	mmv_grfc
;

269 
u_ch¨
 
	mmv_ovsˇn
;

270 
u_ch¨
 
	mmk_keylock
;

272 
vid_öfo
 
	tvid_öfo_t
;

274 
	#CONS_GETINFO
 
	`_IOWR
('c', 73, 
vid_öfo_t
)

	)

277 
	#CONS_GETVERS
 
	`_IOR
('c', 74, )

	)

280 
	#CONS_CURRENTADP
 
	`_IOR
('c', 100, )

	)

283 
	#CONS_ADPINFO
 
	`_IOWR
('c', 101, 
video_ad≠ãr_öfo_t
)

	)

286 
	#CONS_MODEINFO
 
	`_IOWR
('c', 102, 
video_öfo_t
)

	)

289 
	#CONS_FINDMODE
 
	`_IOWR
('c', 103, 
video_öfo_t
)

	)

292 
	#CONS_SETWINORG
 
	`_IOWINT
('c', 104)

	)

295 
	#CONS_SETKBD
 
	`_IOWINT
('c', 110)

	)

298 
	#CONS_RELKBD
 
	`_IO
('c', 111)

	)

300 
	ss¸shŸ
 {

301 
	mx
;

302 
	my
;

303 
	mxsize
;

304 
	mysize
;

305 
u_öt16_t
* 
	mbuf
;

307 
s¸shŸ
 
	ts¸shŸ_t
;

310 
	#CONS_SCRSHOT
 
	`_IOWR
('c', 105, 
s¸shŸ_t
)

	)

313 
	#TI_NAME_LEN
 32

	)

314 
	#TI_DESC_LEN
 64

	)

316 
	sãrm_öfo
 {

317 
	mti_ödex
;

318 
	mti_Êags
;

319 
u_ch¨
 
	mti_«me
[
TI_NAME_LEN
];

320 
u_ch¨
 
	mti_desc
[
TI_DESC_LEN
];

322 
ãrm_öfo
 
	tãrm_öfo_t
;

324 
	#CONS_GETTERM
 
	`_IOWR
('c', 112, 
ãrm_öfo_t
)

	)

325 
	#CONS_SETTERM
 
	`_IOW
('c', 113, 
ãrm_öfo_t
)

	)

332 
	#VT_OPENQRY
 
	`_IOR
('v', 1, )

	)

335 #i‚de‡
_VT_MODE_DECLARED


336 
	#_VT_MODE_DECLARED


	)

337 
	svt_mode
 {

338 
	mmode
;

339 
	#VT_AUTO
 0

	)

340 
	#VT_PROCESS
 1

	)

341 
	#VT_KERNEL
 255

	)

342 
	mwaôv
;

343 
	mªlsig
;

344 
	macqsig
;

345 
	m‰sig
;

347 
vt_mode
 
	tvtmode_t
;

350 
	#VT_SETMODE
 
	`_IOW
('v', 2, 
vtmode_t
)

	)

351 
	#VT_GETMODE
 
	`_IOR
('v', 3, 
vtmode_t
)

	)

354 
	#VT_FALSE
 0

	)

355 
	#VT_TRUE
 1

	)

356 
	#VT_ACKACQ
 2

	)

357 
	#VT_RELDISP
 
	`_IOWINT
('v', 4)

	)

360 
	#VT_ACTIVATE
 
	`_IOWINT
('v', 5)

	)

363 
	#VT_WAITACTIVE
 
	`_IOWINT
('v', 6)

	)

366 
	#VT_GETACTIVE
 
	`_IOR
('v', 7, )

	)

369 
	#VT_GETINDEX
 
	`_IOR
('v', 8, )

	)

372 
	#VT_LOCKSWITCH
 
	`_IOW
('v', 9, )

	)

378 
	#SW_B40x25
 
	`_IO
('S', 
M_B40x25
)

	)

379 
	#SW_C40x25
 
	`_IO
('S', 
M_C40x25
)

	)

380 
	#SW_B80x25
 
	`_IO
('S', 
M_B80x25
)

	)

381 
	#SW_C80x25
 
	`_IO
('S', 
M_C80x25
)

	)

382 
	#SW_BG320
 
	`_IO
('S', 
M_BG320
)

	)

383 
	#SW_CG320
 
	`_IO
('S', 
M_CG320
)

	)

384 
	#SW_BG640
 
	`_IO
('S', 
M_BG640
)

	)

385 
	#SW_EGAMONO80x25
 
	`_IO
('S', 
M_EGAMONO80x25
)

	)

386 
	#SW_CG320_D
 
	`_IO
('S', 
M_CG320_D
)

	)

387 
	#SW_CG640_E
 
	`_IO
('S', 
M_CG640_E
)

	)

388 
	#SW_EGAMONOAPA
 
	`_IO
('S', 
M_EGAMONOAPA
)

	)

389 
	#SW_CG640x350
 
	`_IO
('S', 
M_CG640x350
)

	)

390 
	#SW_ENH_MONOAPA2
 
	`_IO
('S', 
M_ENHMONOAPA2
)

	)

391 
	#SW_ENH_CG640
 
	`_IO
('S', 
M_ENH_CG640
)

	)

392 
	#SW_ENH_B40x25
 
	`_IO
('S', 
M_ENH_B40x25
)

	)

393 
	#SW_ENH_C40x25
 
	`_IO
('S', 
M_ENH_C40x25
)

	)

394 
	#SW_ENH_B80x25
 
	`_IO
('S', 
M_ENH_B80x25
)

	)

395 
	#SW_ENH_C80x25
 
	`_IO
('S', 
M_ENH_C80x25
)

	)

396 
	#SW_ENH_B80x43
 
	`_IO
('S', 
M_ENH_B80x43
)

	)

397 
	#SW_ENH_C80x43
 
	`_IO
('S', 
M_ENH_C80x43
)

	)

398 
	#SW_MCAMODE
 
	`_IO
('S', 
M_MCA_MODE
)

	)

399 
	#SW_VGA_C40x25
 
	`_IO
('S', 
M_VGA_C40x25
)

	)

400 
	#SW_VGA_C80x25
 
	`_IO
('S', 
M_VGA_C80x25
)

	)

401 
	#SW_VGA_C80x30
 
	`_IO
('S', 
M_VGA_C80x30
)

	)

402 
	#SW_VGA_C80x50
 
	`_IO
('S', 
M_VGA_C80x50
)

	)

403 
	#SW_VGA_C80x60
 
	`_IO
('S', 
M_VGA_C80x60
)

	)

404 
	#SW_VGA_M80x25
 
	`_IO
('S', 
M_VGA_M80x25
)

	)

405 
	#SW_VGA_M80x30
 
	`_IO
('S', 
M_VGA_M80x30
)

	)

406 
	#SW_VGA_M80x50
 
	`_IO
('S', 
M_VGA_M80x50
)

	)

407 
	#SW_VGA_M80x60
 
	`_IO
('S', 
M_VGA_M80x60
)

	)

408 
	#SW_VGA11
 
	`_IO
('S', 
M_VGA11
)

	)

409 
	#SW_BG640x480
 
	`_IO
('S', 
M_VGA11
)

	)

410 
	#SW_VGA12
 
	`_IO
('S', 
M_VGA12
)

	)

411 
	#SW_CG640x480
 
	`_IO
('S', 
M_VGA12
)

	)

412 
	#SW_VGA13
 
	`_IO
('S', 
M_VGA13
)

	)

413 
	#SW_VGA_CG320
 
	`_IO
('S', 
M_VGA13
)

	)

414 
	#SW_VGA_CG640
 
	`_IO
('S', 
M_VGA_CG640
)

	)

415 
	#SW_VGA_MODEX
 
	`_IO
('S', 
M_VGA_MODEX
)

	)

417 
	#SW_VGA_C90x25
 
	`_IO
('S', 
M_VGA_C90x25
)

	)

418 
	#SW_VGA_M90x25
 
	`_IO
('S', 
M_VGA_M90x25
)

	)

419 
	#SW_VGA_C90x30
 
	`_IO
('S', 
M_VGA_C90x30
)

	)

420 
	#SW_VGA_M90x30
 
	`_IO
('S', 
M_VGA_M90x30
)

	)

421 
	#SW_VGA_C90x43
 
	`_IO
('S', 
M_VGA_C90x43
)

	)

422 
	#SW_VGA_M90x43
 
	`_IO
('S', 
M_VGA_M90x43
)

	)

423 
	#SW_VGA_C90x50
 
	`_IO
('S', 
M_VGA_C90x50
)

	)

424 
	#SW_VGA_M90x50
 
	`_IO
('S', 
M_VGA_M90x50
)

	)

425 
	#SW_VGA_C90x60
 
	`_IO
('S', 
M_VGA_C90x60
)

	)

426 
	#SW_VGA_M90x60
 
	`_IO
('S', 
M_VGA_M90x60
)

	)

428 
	#SW_TEXT_80x25
 
	`_IO
('S', 
M_TEXT_80x25
)

	)

429 
	#SW_TEXT_80x30
 
	`_IO
('S', 
M_TEXT_80x30
)

	)

430 
	#SW_TEXT_80x43
 
	`_IO
('S', 
M_TEXT_80x43
)

	)

431 
	#SW_TEXT_80x50
 
	`_IO
('S', 
M_TEXT_80x50
)

	)

432 
	#SW_TEXT_80x60
 
	`_IO
('S', 
M_TEXT_80x60
)

	)

433 
	#SW_TEXT_132x25
 
	`_IO
('S', 
M_TEXT_132x25
)

	)

434 
	#SW_TEXT_132x30
 
	`_IO
('S', 
M_TEXT_132x30
)

	)

435 
	#SW_TEXT_132x43
 
	`_IO
('S', 
M_TEXT_132x43
)

	)

436 
	#SW_TEXT_132x50
 
	`_IO
('S', 
M_TEXT_132x50
)

	)

437 
	#SW_TEXT_132x60
 
	`_IO
('S', 
M_TEXT_132x60
)

	)

439 
	#SW_VESA_CG640x400
 
	`_IO
('V', 
M_VESA_CG640x400
 - 
M_VESA_BASE
)

	)

440 
	#SW_VESA_CG640x480
 
	`_IO
('V', 
M_VESA_CG640x480
 - 
M_VESA_BASE
)

	)

441 
	#SW_VESA_800x600
 
	`_IO
('V', 
M_VESA_800x600
 - 
M_VESA_BASE
)

	)

442 
	#SW_VESA_CG800x600
 
	`_IO
('V', 
M_VESA_CG800x600
 - 
M_VESA_BASE
)

	)

443 
	#SW_VESA_1024x768
 
	`_IO
('V', 
M_VESA_1024x768
 - 
M_VESA_BASE
)

	)

444 
	#SW_VESA_CG1024x768
 
	`_IO
('V', 
M_VESA_CG1024x768
 - 
M_VESA_BASE
)

	)

445 
	#SW_VESA_1280x1024
 
	`_IO
('V', 
M_VESA_1280x1024
 - 
M_VESA_BASE
)

	)

446 
	#SW_VESA_CG1280x1024
 
	`_IO
('V', 
M_VESA_CG1280x1024
 - 
M_VESA_BASE
)

	)

447 
	#SW_VESA_C80x60
 
	`_IO
('V', 
M_VESA_C80x60
 - 
M_VESA_BASE
)

	)

448 
	#SW_VESA_C132x25
 
	`_IO
('V', 
M_VESA_C132x25
 - 
M_VESA_BASE
)

	)

449 
	#SW_VESA_C132x43
 
	`_IO
('V', 
M_VESA_C132x43
 - 
M_VESA_BASE
)

	)

450 
	#SW_VESA_C132x50
 
	`_IO
('V', 
M_VESA_C132x50
 - 
M_VESA_BASE
)

	)

451 
	#SW_VESA_C132x60
 
	`_IO
('V', 
M_VESA_C132x60
 - 
M_VESA_BASE
)

	)

452 
	#SW_VESA_32K_320
 
	`_IO
('V', 
M_VESA_32K_320
 - 
M_VESA_BASE
)

	)

453 
	#SW_VESA_64K_320
 
	`_IO
('V', 
M_VESA_64K_320
 - 
M_VESA_BASE
)

	)

454 
	#SW_VESA_FULL_320
 
	`_IO
('V', 
M_VESA_FULL_320
 - 
M_VESA_BASE
)

	)

455 
	#SW_VESA_32K_640
 
	`_IO
('V', 
M_VESA_32K_640
 - 
M_VESA_BASE
)

	)

456 
	#SW_VESA_64K_640
 
	`_IO
('V', 
M_VESA_64K_640
 - 
M_VESA_BASE
)

	)

457 
	#SW_VESA_FULL_640
 
	`_IO
('V', 
M_VESA_FULL_640
 - 
M_VESA_BASE
)

	)

458 
	#SW_VESA_32K_800
 
	`_IO
('V', 
M_VESA_32K_800
 - 
M_VESA_BASE
)

	)

459 
	#SW_VESA_64K_800
 
	`_IO
('V', 
M_VESA_64K_800
 - 
M_VESA_BASE
)

	)

460 
	#SW_VESA_FULL_800
 
	`_IO
('V', 
M_VESA_FULL_800
 - 
M_VESA_BASE
)

	)

461 
	#SW_VESA_32K_1024
 
	`_IO
('V', 
M_VESA_32K_1024
 - 
M_VESA_BASE
)

	)

462 
	#SW_VESA_64K_1024
 
	`_IO
('V', 
M_VESA_64K_1024
 - 
M_VESA_BASE
)

	)

463 
	#SW_VESA_FULL_1024
 
	`_IO
('V', 
M_VESA_FULL_1024
 - 
M_VESA_BASE
)

	)

464 
	#SW_VESA_32K_1280
 
	`_IO
('V', 
M_VESA_32K_1280
 - 
M_VESA_BASE
)

	)

465 
	#SW_VESA_64K_1280
 
	`_IO
('V', 
M_VESA_64K_1280
 - 
M_VESA_BASE
)

	)

466 
	#SW_VESA_FULL_1280
 
	`_IO
('V', 
M_VESA_FULL_1280
 - 
M_VESA_BASE
)

	)

	@/usr/include/sys/ctype.h

39 #i‚de‡
_SYS_CTYPE_H_


40 
	#_SYS_CTYPE_H_


	)

42 #ifde‡
_KERNEL


44 
	#is•a˚
(
c
Ë((cË=' ' || ((cË>'\t' && (cË<'\r'))

	)

45 
	#ißscii
(
c
Ë(((cË& ~0x7fË=0)

	)

46 
	#isuµî
(
c
Ë((cË>'A' && (cË<'Z')

	)

47 
	#i¶owî
(
c
Ë((cË>'a' && (cË<'z')

	)

48 
	#ißÕha
(
c
Ë(
	`isuµî
(cË|| 
	`i¶owî
(c))

	)

49 
	#isdigô
(
c
Ë((cË>'0' && (cË<'9')

	)

50 
	#isxdigô
(
c
Ë(
	`isdigô
(c) \

51 || ((
c
) >= 'A' && (c) <= 'F') \

52 || ((
c
Ë>'a' && (cË<'f'))

	)

53 
	#i•röt
(
c
Ë((cË>' ' && (cË<'~')

	)

55 
	#touµî
(
c
Ë((cË- 0x20 * (((cË>'a'Ë&& ((cË<'z')))

	)

56 
	#tﬁowî
(
c
Ë((cË+ 0x20 * (((cË>'A'Ë&& ((cË<'Z')))

	)

	@/usr/include/sys/elf32.h

31 #i‚de‡
_SYS_ELF32_H_


32 
	#_SYS_ELF32_H_
 1

	)

34 
	~<sys/ñf_comm⁄.h
>

40 
uöt32_t
 
	tElf32_Addr
;

41 
uöt16_t
 
	tElf32_HÆf
;

42 
uöt32_t
 
	tElf32_Off
;

43 
öt32_t
 
	tElf32_Sw‹d
;

44 
uöt32_t
 
	tElf32_W‹d
;

45 
uöt64_t
 
	tElf32_Lw‹d
;

47 
Elf32_W‹d
 
	tElf32_Hashñt
;

50 
Elf32_W‹d
 
	tElf32_Size
;

51 
Elf32_Sw‹d
 
	tElf32_Ssize
;

58 
	me_idít
[
EI_NIDENT
];

59 
Elf32_HÆf
 
	me_ty≥
;

60 
Elf32_HÆf
 
	me_machöe
;

61 
Elf32_W‹d
 
	me_vîsi⁄
;

62 
Elf32_Addr
 
	me_íåy
;

63 
Elf32_Off
 
	me_phoff
;

64 
Elf32_Off
 
	me_shoff
;

65 
Elf32_W‹d
 
	me_Êags
;

66 
Elf32_HÆf
 
	me_ehsize
;

67 
Elf32_HÆf
 
	me_phítsize
;

68 
Elf32_HÆf
 
	me_phnum
;

69 
Elf32_HÆf
 
	me_shítsize
;

70 
Elf32_HÆf
 
	me_shnum
;

71 
Elf32_HÆf
 
	me_sh°∫dx
;

72 } 
	tElf32_Ehdr
;

79 
Elf32_W‹d
 
	ml_«me
;

80 
Elf32_W‹d
 
	ml_time_°amp
;

81 
Elf32_W‹d
 
	ml_checksum
;

82 
Elf32_W‹d
 
	ml_vîsi⁄
;

83 
Elf32_W‹d
 
	ml_Êags
;

84 } 
	tElf32_Lib
;

91 
Elf32_W‹d
 
	msh_«me
;

93 
Elf32_W‹d
 
	msh_ty≥
;

94 
Elf32_W‹d
 
	msh_Êags
;

95 
Elf32_Addr
 
	msh_addr
;

96 
Elf32_Off
 
	msh_off£t
;

97 
Elf32_W‹d
 
	msh_size
;

98 
Elf32_W‹d
 
	msh_lök
;

99 
Elf32_W‹d
 
	msh_öfo
;

100 
Elf32_W‹d
 
	msh_addølign
;

101 
Elf32_W‹d
 
	msh_ítsize
;

102 } 
	tElf32_Shdr
;

109 
Elf32_W‹d
 
	mp_ty≥
;

110 
Elf32_Off
 
	mp_off£t
;

111 
Elf32_Addr
 
	mp_vaddr
;

112 
Elf32_Addr
 
	mp_∑ddr
;

113 
Elf32_W‹d
 
	mp_fûesz
;

114 
Elf32_W‹d
 
	mp_memsz
;

115 
Elf32_W‹d
 
	mp_Êags
;

116 
Elf32_W‹d
 
	mp_Æign
;

117 } 
	tElf32_Phdr
;

124 
Elf32_Sw‹d
 
	md_èg
;

126 
Elf32_W‹d
 
	md_vÆ
;

127 
Elf32_Addr
 
	md_±r
;

128 } 
	md_un
;

129 } 
	tElf32_Dyn
;

137 
Elf32_Addr
 
	mr_off£t
;

138 
Elf32_W‹d
 
	mr_öfo
;

139 } 
	tElf32_Rñ
;

143 
Elf32_Addr
 
	mr_off£t
;

144 
Elf32_W‹d
 
	mr_öfo
;

145 
Elf32_Sw‹d
 
	mr_addíd
;

146 } 
	tElf32_Rña
;

149 
	#ELF32_R_SYM
(
öfo
Ë((öfoË>> 8)

	)

150 
	#ELF32_R_TYPE
(
öfo
Ë(()(öfo))

	)

153 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ ()—y≥))

	)

158 
Elf_NŸe
 
	tElf32_Nhdr
;

164 
Elf32_Lw‹d
 
	mm_vÆue
;

165 
Elf32_W‹d
 
	mm_öfo
;

166 
Elf32_W‹d
 
	mm_poff£t
;

167 
Elf32_HÆf
 
	mm_ª≥©
;

168 
Elf32_HÆf
 
	mm_°ride
;

169 } 
	tElf32_Move
;

178 
	#ELF32_M_SYM
(
öfo
Ë((öfo)>>8)

	)

179 
	#ELF32_M_SIZE
(
öfo
Ë(()(öfo))

	)

180 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((sym)<<8)+()(size))

	)

186 
Elf32_W‹d
 
	mc_èg
;

188 
Elf32_W‹d
 
	mc_vÆ
;

189 
Elf32_Addr
 
	mc_±r
;

190 } 
	mc_un
;

191 } 
	tElf32_C≠
;

198 
Elf32_W‹d
 
	m°_«me
;

199 
Elf32_Addr
 
	m°_vÆue
;

200 
Elf32_W‹d
 
	m°_size
;

201 
	m°_öfo
;

202 
	m°_Ÿhî
;

203 
Elf32_HÆf
 
	m°_shndx
;

204 } 
	tElf32_Sym
;

207 
	#ELF32_ST_BIND
(
öfo
Ë((öfoË>> 4)

	)

208 
	#ELF32_ST_TYPE
(
öfo
Ë((öfoË& 0xf)

	)

211 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

214 
	#ELF32_ST_VISIBILITY
(
Ÿh
Ë((ŸhË& 0x3)

	)

219 
Elf32_HÆf
 
	mvd_vîsi⁄
;

220 
Elf32_HÆf
 
	mvd_Êags
;

221 
Elf32_HÆf
 
	mvd_ndx
;

222 
Elf32_HÆf
 
	mvd_˙t
;

223 
Elf32_W‹d
 
	mvd_hash
;

224 
Elf32_W‹d
 
	mvd_aux
;

225 
Elf32_W‹d
 
	mvd_√xt
;

226 } 
	tElf32_Vîdef
;

230 
Elf32_W‹d
 
	mvda_«me
;

231 
Elf32_W‹d
 
	mvda_√xt
;

232 } 
	tElf32_Vîdaux
;

236 
Elf32_HÆf
 
	mvn_vîsi⁄
;

237 
Elf32_HÆf
 
	mvn_˙t
;

238 
Elf32_W‹d
 
	mvn_fûe
;

239 
Elf32_W‹d
 
	mvn_aux
;

240 
Elf32_W‹d
 
	mvn_√xt
;

241 } 
	tElf32_Vî√ed
;

245 
Elf32_W‹d
 
	mv«_hash
;

246 
Elf32_HÆf
 
	mv«_Êags
;

247 
Elf32_HÆf
 
	mv«_Ÿhî
;

248 
Elf32_W‹d
 
	mv«_«me
;

249 
Elf32_W‹d
 
	mv«_√xt
;

250 } 
	tElf32_Vî«ux
;

252 
Elf32_HÆf
 
	tElf32_Vîsym
;

255 
Elf32_HÆf
 
	msi_boundto
;

256 
Elf32_HÆf
 
	msi_Êags
;

257 } 
	tElf32_Symöfo
;

260 
Elf32_W‹d
 
	mch_ty≥
;

261 
Elf32_W‹d
 
	mch_size
;

262 
Elf32_W‹d
 
	mch_addølign
;

263 } 
	tElf32_Chdr
;

	@/usr/include/sys/elf64.h

31 #i‚de‡
_SYS_ELF64_H_


32 
	#_SYS_ELF64_H_
 1

	)

34 
	~<sys/ñf_comm⁄.h
>

40 
uöt64_t
 
	tElf64_Addr
;

41 
uöt16_t
 
	tElf64_HÆf
;

42 
uöt64_t
 
	tElf64_Off
;

43 
öt32_t
 
	tElf64_Sw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

45 
uöt32_t
 
	tElf64_W‹d
;

46 
uöt64_t
 
	tElf64_Lw‹d
;

47 
uöt64_t
 
	tElf64_Xw‹d
;

56 
Elf64_W‹d
 
	tElf64_Hashñt
;

59 
Elf64_Xw‹d
 
	tElf64_Size
;

60 
Elf64_Sxw‹d
 
	tElf64_Ssize
;

67 
	me_idít
[
EI_NIDENT
];

68 
Elf64_HÆf
 
	me_ty≥
;

69 
Elf64_HÆf
 
	me_machöe
;

70 
Elf64_W‹d
 
	me_vîsi⁄
;

71 
Elf64_Addr
 
	me_íåy
;

72 
Elf64_Off
 
	me_phoff
;

73 
Elf64_Off
 
	me_shoff
;

74 
Elf64_W‹d
 
	me_Êags
;

75 
Elf64_HÆf
 
	me_ehsize
;

76 
Elf64_HÆf
 
	me_phítsize
;

77 
Elf64_HÆf
 
	me_phnum
;

78 
Elf64_HÆf
 
	me_shítsize
;

79 
Elf64_HÆf
 
	me_shnum
;

80 
Elf64_HÆf
 
	me_sh°∫dx
;

81 } 
	tElf64_Ehdr
;

88 
Elf64_W‹d
 
	ml_«me
;

89 
Elf64_W‹d
 
	ml_time_°amp
;

90 
Elf64_W‹d
 
	ml_checksum
;

91 
Elf64_W‹d
 
	ml_vîsi⁄
;

92 
Elf64_W‹d
 
	ml_Êags
;

93 } 
	tElf64_Lib
;

100 
Elf64_W‹d
 
	msh_«me
;

102 
Elf64_W‹d
 
	msh_ty≥
;

103 
Elf64_Xw‹d
 
	msh_Êags
;

104 
Elf64_Addr
 
	msh_addr
;

105 
Elf64_Off
 
	msh_off£t
;

106 
Elf64_Xw‹d
 
	msh_size
;

107 
Elf64_W‹d
 
	msh_lök
;

108 
Elf64_W‹d
 
	msh_öfo
;

109 
Elf64_Xw‹d
 
	msh_addølign
;

110 
Elf64_Xw‹d
 
	msh_ítsize
;

111 } 
	tElf64_Shdr
;

118 
Elf64_W‹d
 
	mp_ty≥
;

119 
Elf64_W‹d
 
	mp_Êags
;

120 
Elf64_Off
 
	mp_off£t
;

121 
Elf64_Addr
 
	mp_vaddr
;

122 
Elf64_Addr
 
	mp_∑ddr
;

123 
Elf64_Xw‹d
 
	mp_fûesz
;

124 
Elf64_Xw‹d
 
	mp_memsz
;

125 
Elf64_Xw‹d
 
	mp_Æign
;

126 } 
	tElf64_Phdr
;

133 
Elf64_Sxw‹d
 
	md_èg
;

135 
Elf64_Xw‹d
 
	md_vÆ
;

136 
Elf64_Addr
 
	md_±r
;

137 } 
	md_un
;

138 } 
	tElf64_Dyn
;

146 
Elf64_Addr
 
	mr_off£t
;

147 
Elf64_Xw‹d
 
	mr_öfo
;

148 } 
	tElf64_Rñ
;

152 
Elf64_Addr
 
	mr_off£t
;

153 
Elf64_Xw‹d
 
	mr_öfo
;

154 
Elf64_Sxw‹d
 
	mr_addíd
;

155 } 
	tElf64_Rña
;

158 
	#ELF64_R_SYM
(
öfo
Ë((öfoË>> 32)

	)

159 
	#ELF64_R_TYPE
(
öfo
Ë((öfoË& 0xffffffffL)

	)

162 
	#ELF64_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 32Ë+ (—y≥Ë& 0xffffffffL))

	)

164 
	#ELF64_R_TYPE_DATA
(
öfo
Ë(((
Elf64_Xw‹d
)(öfo)<<32)>>40)

	)

165 
	#ELF64_R_TYPE_ID
(
öfo
Ë(((
Elf64_Xw‹d
)(öfo)<<56)>>56)

	)

166 
	#ELF64_R_TYPE_INFO
(
d©a
, 
ty≥
) \

167 (((
Elf64_Xw‹d
)(
d©a
)<<8)+(Elf64_Xw‹d)(
ty≥
))

	)

172 
Elf_NŸe
 
	tElf64_Nhdr
;

178 
Elf64_Lw‹d
 
	mm_vÆue
;

179 
Elf64_Xw‹d
 
	mm_öfo
;

180 
Elf64_Xw‹d
 
	mm_poff£t
;

181 
Elf64_HÆf
 
	mm_ª≥©
;

182 
Elf64_HÆf
 
	mm_°ride
;

183 } 
	tElf64_Move
;

185 
	#ELF64_M_SYM
(
öfo
Ë((öfo)>>8)

	)

186 
	#ELF64_M_SIZE
(
öfo
Ë(()(öfo))

	)

187 
	#ELF64_M_INFO
(
sym
, 
size
Ë(((sym)<<8)+()(size))

	)

193 
Elf64_Xw‹d
 
	mc_èg
;

195 
Elf64_Xw‹d
 
	mc_vÆ
;

196 
Elf64_Addr
 
	mc_±r
;

197 } 
	mc_un
;

198 } 
	tElf64_C≠
;

205 
Elf64_W‹d
 
	m°_«me
;

206 
	m°_öfo
;

207 
	m°_Ÿhî
;

208 
Elf64_HÆf
 
	m°_shndx
;

209 
Elf64_Addr
 
	m°_vÆue
;

210 
Elf64_Xw‹d
 
	m°_size
;

211 } 
	tElf64_Sym
;

214 
	#ELF64_ST_BIND
(
öfo
Ë((öfoË>> 4)

	)

215 
	#ELF64_ST_TYPE
(
öfo
Ë((öfoË& 0xf)

	)

218 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

221 
	#ELF64_ST_VISIBILITY
(
Ÿh
Ë((ŸhË& 0x3)

	)

225 
Elf64_HÆf
 
	mvd_vîsi⁄
;

226 
Elf64_HÆf
 
	mvd_Êags
;

227 
Elf64_HÆf
 
	mvd_ndx
;

228 
Elf64_HÆf
 
	mvd_˙t
;

229 
Elf64_W‹d
 
	mvd_hash
;

230 
Elf64_W‹d
 
	mvd_aux
;

231 
Elf64_W‹d
 
	mvd_√xt
;

232 } 
	tElf64_Vîdef
;

235 
Elf64_W‹d
 
	mvda_«me
;

236 
Elf64_W‹d
 
	mvda_√xt
;

237 } 
	tElf64_Vîdaux
;

240 
Elf64_HÆf
 
	mvn_vîsi⁄
;

241 
Elf64_HÆf
 
	mvn_˙t
;

242 
Elf64_W‹d
 
	mvn_fûe
;

243 
Elf64_W‹d
 
	mvn_aux
;

244 
Elf64_W‹d
 
	mvn_√xt
;

245 } 
	tElf64_Vî√ed
;

248 
Elf64_W‹d
 
	mv«_hash
;

249 
Elf64_HÆf
 
	mv«_Êags
;

250 
Elf64_HÆf
 
	mv«_Ÿhî
;

251 
Elf64_W‹d
 
	mv«_«me
;

252 
Elf64_W‹d
 
	mv«_√xt
;

253 } 
	tElf64_Vî«ux
;

255 
Elf64_HÆf
 
	tElf64_Vîsym
;

258 
Elf64_HÆf
 
	msi_boundto
;

259 
Elf64_HÆf
 
	msi_Êags
;

260 } 
	tElf64_Symöfo
;

263 
Elf64_W‹d
 
	mch_ty≥
;

264 
Elf64_W‹d
 
	mch_ª£rved
;

265 
Elf64_Xw‹d
 
	mch_size
;

266 
Elf64_Xw‹d
 
	mch_addølign
;

267 } 
	tElf64_Chdr
;

	@/usr/include/sys/elf_generic.h

31 #i‚de‡
_SYS_ELF_GENERIC_H_


32 
	#_SYS_ELF_GENERIC_H_
 1

	)

34 
	~<sys/cdefs.h
>

41 #i‡
__ELF_WORD_SIZE
 != 32 && __ELF_WORD_SIZE != 64

45 
	#ELF_CLASS
 
	`__CONCAT
(
ELFCLASS
,
__ELF_WORD_SIZE
)

	)

47 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


48 
	#ELF_DATA
 
ELFDATA2LSB


	)

49 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


50 
	#ELF_DATA
 
ELFDATA2MSB


	)

55 
	#__ñfN
(
x
Ë
	`__CONCAT
(__CONCAT(__CONCAT(
ñf
,
__ELF_WORD_SIZE
),
_
),x)

	)

56 
	#__ElfN
(
x
Ë
	`__CONCAT
(__CONCAT(__CONCAT(
Elf
,
__ELF_WORD_SIZE
),
_
),x)

	)

57 
	#__ELFN
(
x
Ë
	`__CONCAT
(__CONCAT(__CONCAT(
ELF
,
__ELF_WORD_SIZE
),
_
),x)

	)

58 
	#__ElfTy≥
(
x
Ë
	`__ElfN
(
	tx
Ë
	t__CONCAT
(
	tElf_
,x)

	)

60 
	t__ElfTy≥
(
	tAddr
);

61 
__ElfTy≥
(
HÆf
);

62 
__ElfTy≥
(
Off
);

63 
__ElfTy≥
(
Sw‹d
);

64 
__ElfTy≥
(
W‹d
);

65 
__ElfTy≥
(
Ehdr
);

66 
__ElfTy≥
(
Shdr
);

67 
__ElfTy≥
(
Phdr
);

68 
__ElfTy≥
(
Dyn
);

69 
__ElfTy≥
(
Rñ
);

70 
__ElfTy≥
(
Rña
);

71 
__ElfTy≥
(
Sym
);

72 
__ElfTy≥
(
Vîdef
);

73 
__ElfTy≥
(
Vîdaux
);

74 
__ElfTy≥
(
Vî√ed
);

75 
__ElfTy≥
(
Vî«ux
);

76 
__ElfTy≥
(
Vîsym
);

79 
__ElfTy≥
(
Hashñt
);

80 
__ElfTy≥
(
Size
);

81 
__ElfTy≥
(
Ssize
);

83 
	#ELF_R_SYM
 
	`__ELFN
(
R_SYM
)

	)

84 
	#ELF_R_TYPE
 
	`__ELFN
(
R_TYPE
)

	)

85 
	#ELF_R_INFO
 
	`__ELFN
(
R_INFO
)

	)

86 
	#ELF_ST_BIND
 
	`__ELFN
(
ST_BIND
)

	)

87 
	#ELF_ST_TYPE
 
	`__ELFN
(
ST_TYPE
)

	)

88 
	#ELF_ST_INFO
 
	`__ELFN
(
ST_INFO
)

	)

89 
	#ELF_ST_VISIBILITY
 
	`__ELFN
(
ST_VISIBILITY
)

	)

	@/usr/include/sys/endian.h

31 #i‚de‡
_SYS_ENDIAN_H_


32 
	#_SYS_ENDIAN_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

36 
	~<machöe/ídün.h
>

38 #i‚de‡
_UINT8_T_DECLARED


39 
__uöt8_t
 
	tuöt8_t
;

40 
	#_UINT8_T_DECLARED


	)

43 #i‚de‡
_UINT16_T_DECLARED


44 
__uöt16_t
 
	tuöt16_t
;

45 
	#_UINT16_T_DECLARED


	)

48 #i‚de‡
_UINT32_T_DECLARED


49 
__uöt32_t
 
	tuöt32_t
;

50 
	#_UINT32_T_DECLARED


	)

53 #i‚de‡
_UINT64_T_DECLARED


54 
__uöt64_t
 
	tuöt64_t
;

55 
	#_UINT64_T_DECLARED


	)

61 
	#bsw≠16
(
x
Ë
	`__bsw≠16
(x)

	)

62 
	#bsw≠32
(
x
Ë
	`__bsw≠32
(x)

	)

63 
	#bsw≠64
(
x
Ë
	`__bsw≠64
(x)

	)

69 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


70 
	#htobe16
(
x
Ë
	`bsw≠16
((x))

	)

71 
	#htobe32
(
x
Ë
	`bsw≠32
((x))

	)

72 
	#htobe64
(
x
Ë
	`bsw≠64
((x))

	)

73 
	#htﬁe16
(
x
Ë((
uöt16_t
)(x))

	)

74 
	#htﬁe32
(
x
Ë((
uöt32_t
)(x))

	)

75 
	#htﬁe64
(
x
Ë((
uöt64_t
)(x))

	)

77 
	#be16toh
(
x
Ë
	`bsw≠16
((x))

	)

78 
	#be32toh
(
x
Ë
	`bsw≠32
((x))

	)

79 
	#be64toh
(
x
Ë
	`bsw≠64
((x))

	)

80 
	#À16toh
(
x
Ë((
uöt16_t
)(x))

	)

81 
	#À32toh
(
x
Ë((
uöt32_t
)(x))

	)

82 
	#À64toh
(
x
Ë((
uöt64_t
)(x))

	)

84 
	#htobe16
(
x
Ë((
uöt16_t
)(x))

	)

85 
	#htobe32
(
x
Ë((
uöt32_t
)(x))

	)

86 
	#htobe64
(
x
Ë((
uöt64_t
)(x))

	)

87 
	#htﬁe16
(
x
Ë
	`bsw≠16
((x))

	)

88 
	#htﬁe32
(
x
Ë
	`bsw≠32
((x))

	)

89 
	#htﬁe64
(
x
Ë
	`bsw≠64
((x))

	)

91 
	#be16toh
(
x
Ë((
uöt16_t
)(x))

	)

92 
	#be32toh
(
x
Ë((
uöt32_t
)(x))

	)

93 
	#be64toh
(
x
Ë((
uöt64_t
)(x))

	)

94 
	#À16toh
(
x
Ë
	`bsw≠16
((x))

	)

95 
	#À32toh
(
x
Ë
	`bsw≠32
((x))

	)

96 
	#À64toh
(
x
Ë
	`bsw≠64
((x))

	)

101 
__ölöe
 
uöt16_t


102 
	$be16dec
(c⁄° *
µ
)

104 
uöt8_t
 c⁄° *
p
 = (uöt8_àc⁄° *)
µ
;

106  ((
p
[0] << 8) |Ö[1]);

107 
	}
}

109 
__ölöe
 
uöt32_t


110 
	$be32dec
(c⁄° *
µ
)

112 
uöt8_t
 c⁄° *
p
 = (uöt8_àc⁄° *)
µ
;

114  ((()
p
[0] << 24) | (p[1] << 16) | (p[2] << 8) |Ö[3]);

115 
	}
}

117 
__ölöe
 
uöt64_t


118 
	$be64dec
(c⁄° *
µ
)

120 
uöt8_t
 c⁄° *
p
 = (uöt8_àc⁄° *)
µ
;

122  (((
uöt64_t
)
	`be32dec
(
p
) << 32) | be32dec(p + 4));

123 
	}
}

125 
__ölöe
 
uöt16_t


126 
	$À16dec
(c⁄° *
µ
)

128 
uöt8_t
 c⁄° *
p
 = (uöt8_àc⁄° *)
µ
;

130  ((
p
[1] << 8) |Ö[0]);

131 
	}
}

133 
__ölöe
 
uöt32_t


134 
	$À32dec
(c⁄° *
µ
)

136 
uöt8_t
 c⁄° *
p
 = (uöt8_àc⁄° *)
µ
;

138  ((()
p
[3] << 24) | (p[2] << 16) | (p[1] << 8) |Ö[0]);

139 
	}
}

141 
__ölöe
 
uöt64_t


142 
	$À64dec
(c⁄° *
µ
)

144 
uöt8_t
 c⁄° *
p
 = (uöt8_àc⁄° *)
µ
;

146  (((
uöt64_t
)
	`À32dec
(
p
 + 4) << 32) |Üe32dec(p));

147 
	}
}

149 
__ölöe
 

150 
	$be16íc
(*
µ
, 
uöt16_t
 
u
)

152 
uöt8_t
 *
p
 = (uöt8_à*)
µ
;

154 
p
[0] = (
u
 >> 8) & 0xff;

155 
p
[1] = 
u
 & 0xff;

156 
	}
}

158 
__ölöe
 

159 
	$be32íc
(*
µ
, 
uöt32_t
 
u
)

161 
uöt8_t
 *
p
 = (uöt8_à*)
µ
;

163 
p
[0] = (
u
 >> 24) & 0xff;

164 
p
[1] = (
u
 >> 16) & 0xff;

165 
p
[2] = (
u
 >> 8) & 0xff;

166 
p
[3] = 
u
 & 0xff;

167 
	}
}

169 
__ölöe
 

170 
	$be64íc
(*
µ
, 
uöt64_t
 
u
)

172 
uöt8_t
 *
p
 = (uöt8_à*)
µ
;

174 
	`be32íc
(
p
, (
uöt32_t
)(
u
 >> 32));

175 
	`be32íc
(
p
 + 4, (
uöt32_t
)(
u
 & 0xffffffffU));

176 
	}
}

178 
__ölöe
 

179 
	$À16íc
(*
µ
, 
uöt16_t
 
u
)

181 
uöt8_t
 *
p
 = (uöt8_à*)
µ
;

183 
p
[0] = 
u
 & 0xff;

184 
p
[1] = (
u
 >> 8) & 0xff;

185 
	}
}

187 
__ölöe
 

188 
	$À32íc
(*
µ
, 
uöt32_t
 
u
)

190 
uöt8_t
 *
p
 = (uöt8_à*)
µ
;

192 
p
[0] = 
u
 & 0xff;

193 
p
[1] = (
u
 >> 8) & 0xff;

194 
p
[2] = (
u
 >> 16) & 0xff;

195 
p
[3] = (
u
 >> 24) & 0xff;

196 
	}
}

198 
__ölöe
 

199 
	$À64íc
(*
µ
, 
uöt64_t
 
u
)

201 
uöt8_t
 *
p
 = (uöt8_à*)
µ
;

203 
	`À32íc
(
p
, (
uöt32_t
)(
u
 & 0xffffffffU));

204 
	`À32íc
(
p
 + 4, (
uöt32_t
)(
u
 >> 32));

205 
	}
}

	@/usr/include/sys/errno.h

40 #i‚de‡
_SYS_ERRNO_H_


41 
	#_SYS_ERRNO_H_


	)

43 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
_STANDALONE
)

44 
	~<sys/cdefs.h
>

45 
__BEGIN_DECLS


46 * 
__îr‹
();

47 
	g__END_DECLS


48 
	#î∫o
 (* 
	`__îr‹
())

	)

51 
	#EPERM
 1

	)

52 
	#ENOENT
 2

	)

53 
	#ESRCH
 3

	)

54 
	#EINTR
 4

	)

55 
	#EIO
 5

	)

56 
	#ENXIO
 6

	)

57 
	#E2BIG
 7

	)

58 
	#ENOEXEC
 8

	)

59 
	#EBADF
 9

	)

60 
	#ECHILD
 10

	)

61 
	#EDEADLK
 11

	)

63 
	#ENOMEM
 12

	)

64 
	#EACCES
 13

	)

65 
	#EFAULT
 14

	)

66 #i‚de‡
_POSIX_SOURCE


67 
	#ENOTBLK
 15

	)

69 
	#EBUSY
 16

	)

70 
	#EEXIST
 17

	)

71 
	#EXDEV
 18

	)

72 
	#ENODEV
 19

	)

73 
	#ENOTDIR
 20

	)

74 
	#EISDIR
 21

	)

75 
	#EINVAL
 22

	)

76 
	#ENFILE
 23

	)

77 
	#EMFILE
 24

	)

78 
	#ENOTTY
 25

	)

79 #i‚de‡
_POSIX_SOURCE


80 
	#ETXTBSY
 26

	)

82 
	#EFBIG
 27

	)

83 
	#ENOSPC
 28

	)

84 
	#ESPIPE
 29

	)

85 
	#EROFS
 30

	)

86 
	#EMLINK
 31

	)

87 
	#EPIPE
 32

	)

90 
	#EDOM
 33

	)

91 
	#ERANGE
 34

	)

94 
	#EAGAIN
 35

	)

95 #i‚de‡
_POSIX_SOURCE


96 
	#EWOULDBLOCK
 
EAGAIN


	)

97 
	#EINPROGRESS
 36

	)

98 
	#EALREADY
 37

	)

101 
	#ENOTSOCK
 38

	)

102 
	#EDESTADDRREQ
 39

	)

103 
	#EMSGSIZE
 40

	)

104 
	#EPROTOTYPE
 41

	)

105 
	#ENOPROTOOPT
 42

	)

106 
	#EPROTONOSUPPORT
 43

	)

107 
	#ESOCKTNOSUPPORT
 44

	)

108 
	#EOPNOTSUPP
 45

	)

109 
	#ENOTSUP
 
EOPNOTSUPP


	)

110 
	#EPFNOSUPPORT
 46

	)

111 
	#EAFNOSUPPORT
 47

	)

112 
	#EADDRINUSE
 48

	)

113 
	#EADDRNOTAVAIL
 49

	)

116 
	#ENETDOWN
 50

	)

117 
	#ENETUNREACH
 51

	)

118 
	#ENETRESET
 52

	)

119 
	#ECONNABORTED
 53

	)

120 
	#ECONNRESET
 54

	)

121 
	#ENOBUFS
 55

	)

122 
	#EISCONN
 56

	)

123 
	#ENOTCONN
 57

	)

124 
	#ESHUTDOWN
 58

	)

125 
	#ETOOMANYREFS
 59

	)

126 
	#ETIMEDOUT
 60

	)

127 
	#ECONNREFUSED
 61

	)

129 
	#ELOOP
 62

	)

131 
	#ENAMETOOLONG
 63

	)

134 #i‚de‡
_POSIX_SOURCE


135 
	#EHOSTDOWN
 64

	)

136 
	#EHOSTUNREACH
 65

	)

138 
	#ENOTEMPTY
 66

	)

141 #i‚de‡
_POSIX_SOURCE


142 
	#EPROCLIM
 67

	)

143 
	#EUSERS
 68

	)

144 
	#EDQUOT
 69

	)

147 
	#ESTALE
 70

	)

148 
	#EREMOTE
 71

	)

149 
	#EBADRPC
 72

	)

150 
	#ERPCMISMATCH
 73

	)

151 
	#EPROGUNAVAIL
 74

	)

152 
	#EPROGMISMATCH
 75

	)

153 
	#EPROCUNAVAIL
 76

	)

156 
	#ENOLCK
 77

	)

157 
	#ENOSYS
 78

	)

159 #i‚de‡
_POSIX_SOURCE


160 
	#EFTYPE
 79

	)

161 
	#EAUTH
 80

	)

162 
	#ENEEDAUTH
 81

	)

163 
	#EIDRM
 82

	)

164 
	#ENOMSG
 83

	)

165 
	#EOVERFLOW
 84

	)

166 
	#ECANCELED
 85

	)

167 
	#EILSEQ
 86

	)

168 
	#ENOATTR
 87

	)

170 
	#EDOOFUS
 88

	)

173 
	#EBADMSG
 89

	)

174 
	#EMULTIHOP
 90

	)

175 
	#ENOLINK
 91

	)

176 
	#EPROTO
 92

	)

178 #i‚de‡
_POSIX_SOURCE


179 
	#ENOTCAPABLE
 93

	)

180 
	#ECAPMODE
 94

	)

181 
	#ENOTRECOVERABLE
 95

	)

182 
	#EOWNERDEAD
 96

	)

185 #i‚de‡
_POSIX_SOURCE


186 
	#ELAST
 96

	)

189 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_KERNEL_ERRNO
)

191 
	#ERESTART
 (-1Ë

	)

192 
	#EJUSTRETURN
 (-2Ë

	)

193 
	#ENOIOCTL
 (-3Ë

	)

194 
	#EDIRIOCTL
 (-4Ë

	)

195 
	#ERELOOKUP
 (-5Ë

	)

198 #i‚de‡
_KERNEL


199 #i‡
__EXT1_VISIBLE


201 #i‚de‡
_ERRNO_T_DEFINED


202 
	#_ERRNO_T_DEFINED


	)

203 
	tî∫o_t
;

	@/usr/include/sys/fbio.h

40 #i‚de‡
_SYS_FBIO_H_


41 
	#_SYS_FBIO_H_


	)

43 #i‚de‡
_KERNEL


44 
	~<sys/ty≥s.h
>

46 
	~<sys/∑øm.h
>

47 
	~<sys/sy°m.h
>

48 
	~<sys/evíth™dÀr.h
>

50 
	~<sys/ioccom.h
>

59 
	#FBTYPE_SUN1BW
 0

	)

60 
	#FBTYPE_SUN1COLOR
 1

	)

61 
	#FBTYPE_SUN2BW
 2

	)

62 
	#FBTYPE_SUN2COLOR
 3

	)

63 
	#FBTYPE_SUN2GP
 4

	)

64 
	#FBTYPE_SUN5COLOR
 5

	)

65 
	#FBTYPE_SUN3COLOR
 6

	)

66 
	#FBTYPE_MEMCOLOR
 7

	)

67 
	#FBTYPE_SUN4COLOR
 8

	)

69 
	#FBTYPE_NOTSUN1
 9

	)

70 
	#FBTYPE_NOTSUN2
 10

	)

71 
	#FBTYPE_PCIMISC
 11

	)

73 
	#FBTYPE_SUNFAST_COLOR
 12

	)

74 
	#FBTYPE_SUNROP_COLOR
 13

	)

75 
	#FBTYPE_SUNFB_VIDEO
 14

	)

76 
	#FBTYPE_RESERVED5
 15

	)

77 
	#FBTYPE_RESERVED4
 16

	)

78 
	#FBTYPE_SUNGP3
 17

	)

79 
	#FBTYPE_SUNGT
 18

	)

80 
	#FBTYPE_SUNLEO
 19

	)

82 
	#FBTYPE_MDA
 20

	)

83 
	#FBTYPE_HERCULES
 21

	)

84 
	#FBTYPE_CGA
 22

	)

85 
	#FBTYPE_EGA
 23

	)

86 
	#FBTYPE_VGA
 24

	)

87 
	#FBTYPE_TGA
 26

	)

88 
	#FBTYPE_TGA2
 27

	)

90 
	#FBTYPE_MDICOLOR
 28

	)

91 
	#FBTYPE_TCXCOLOR
 29

	)

92 
	#FBTYPE_CREATOR
 30

	)

94 
	#FBTYPE_LASTPLUSONE
 31

	)

99 
	sfbty≥
 {

100 
	mfb_ty≥
;

101 
	mfb_height
;

102 
	mfb_width
;

103 
	mfb_dïth
;

104 
	mfb_cmsize
;

105 
	mfb_size
;

107 
	#FBIOGTYPE
 
	`_IOR
('F', 0, 
fbty≥
)

	)

109 
	#FBTYPE_GET_STRIDE
(
_fb
Ë((_fb)->
fb_size
 / (_fb)->
fb_height
)

	)

110 
	#FBTYPE_GET_BPP
(
_fb
Ë((_fb)->
fb_bµ
)

	)

111 
	#FBTYPE_GET_BYTESPP
(
_fb
Ë((_fb)->
fb_bµ
 / 8)

	)

113 #ifdef 
_KERNEL


115 
	gfb_öfo
;

117 
	tfb_íãr_t
(*
	t¥iv
);

118 
	tfb_Àave_t
(*
	t¥iv
);

119 
	tfb_£tbœnkmode_t
(*
	t¥iv
, 
	tmode
);

121 
	sfb_öfo
 {

123 
	mfb_ty≥
;

124 
	mfb_height
;

125 
	mfb_width
;

126 
	mfb_dïth
;

127 
	mfb_cmsize
;

128 
	mfb_size
;

130 
cdev
 *
	mfb_cdev
;

132 
devi˚_t
 
	mfb_fbd_dev
;

133 
devi˚_t
 
	mfb_video_dev
;

135 
fb_íãr_t
 *
	míãr
;

136 
fb_Àave_t
 *
	mÀave
;

137 
fb_£tbœnkmode_t
 *
	m£tbœnkmode
;

139 
uöçå_t
 
	mfb_pba£
;

140 
uöçå_t
 
	mfb_vba£
;

141 *
	mfb_¥iv
;

142 c⁄° *
	mfb_«me
;

143 
uöt32_t
 
	mfb_Êags
;

144 
	#FB_FLAG_NOMMAP
 1

	)

145 
	#FB_FLAG_NOWRITE
 2

	)

146 
	#FB_FLAG_MEMATTR
 4

	)

147 
vm_mem©å_t
 
	mfb_mem©å
;

148 
	mfb_°ride
;

149 
	mfb_bµ
;

150 
uöt32_t
 
	mfb_cm≠
[16];

153 
fbd_li°
();

154 
fbd_ªgi°î
(
fb_öfo
 *);

155 
fbd_uƒegi°î
(
fb_öfo
 *);

157 
ölöe
 

158 
	$ªgi°î_‰amebuf„r
(
fb_öfo
 *
öfo
)

161 
	`EVENTHANDLER_INVOKE
(
ªgi°î_‰amebuf„r
, 
öfo
);

163 
	}
}

165 
ölöe
 

166 
	$uƒegi°î_‰amebuf„r
(
fb_öfo
 *
öfo
)

169 
	`EVENTHANDLER_INVOKE
(
uƒegi°î_‰amebuf„r
, 
öfo
);

171 
	}
}

174 #ifde‡
nŸdef


179 
	sfböfo
 {

180 
	mfb_phyßddr
;

181 
	mfb_hwwidth
;

182 
	mfb_hwheight
;

183 
	mfb_addrdñè
;

184 
u_ch¨
 *
	mfb_r›addr
;

185 
	mfb_unô
;

187 
	#FBIOGINFO
 
	`_IOR
('F', 2, 
fböfo
)

	)

193 
	sfbcm≠
 {

194 
	mödex
;

195 
	mcou¡
;

196 
u_ch¨
 *
	mªd
;

197 
u_ch¨
 *
	mgªí
;

198 
u_ch¨
 *
	mblue
;

200 
	#FBIOPUTCMAP
 
	`_IOW
('F', 3, 
fbcm≠
)

	)

201 
	#FBIOGETCMAP
 
	`_IOW
('F', 4, 
fbcm≠
)

	)

206 
	#FB_ATTR_NDEVSPECIFIC
 8

	)

207 
	#FB_ATTR_NEMUTYPES
 4

	)

209 
	sfbßâr
 {

210 
	mÊags
;

211 
	memu_ty≥
;

212 
	mdev_•ecific
[
FB_ATTR_NDEVSPECIFIC
];

214 
	#FB_ATTR_AUTOINIT
 1

	)

215 
	#FB_ATTR_DEVSPECIFIC
 2

	)

217 
	sfbg©å
 {

218 
	mªÆ_ty≥
;

219 
	mow√r
;

220 
fbty≥
 
	mfbty≥
;

221 
fbßâr
 
	mßâr
;

222 
	memu_ty≥s
[
FB_ATTR_NEMUTYPES
];

225 
	#FBIOSATTR
 
	`_IOW
('F', 5, 
fbßâr
)

	)

226 
	#FBIOGATTR
 
	`_IOR
('F', 6, 
fbg©å
)

	)

231 
	#FBVIDEO_OFF
 0

	)

232 
	#FBVIDEO_ON
 1

	)

234 
	#FBIOSVIDEO
 
	`_IOW
('F', 7, )

	)

235 
	#FBIOGVIDEO
 
	`_IOR
('F', 8, )

	)

238 
	#FBIOVERTICAL
 
	`_IO
('F', 9)

	)

244 
	sfbcuΩos
 {

245 
	mx
;

246 
	my
;

249 
	sfbcurs‹
 {

250 
	m£t
;

251 
	míabÀ
;

252 
fbcuΩos
 
	mpos
;

253 
fbcuΩos
 
	mhŸ
;

254 
fbcm≠
 
	mcm≠
;

255 
fbcuΩos
 
	msize
;

256 
ˇddr_t
 
	mimage
;

257 
ˇddr_t
 
	mmask
;

259 
	#FB_CUR_SETCUR
 0x01

	)

260 
	#FB_CUR_SETPOS
 0x02

	)

261 
	#FB_CUR_SETHOT
 0x04

	)

262 
	#FB_CUR_SETCMAP
 0x08

	)

263 
	#FB_CUR_SETSHAPE
 0x10

	)

264 
	#FB_CUR_SETALL
 (
FB_CUR_SETCUR
 | 
FB_CUR_SETPOS
 | 
FB_CUR_SETHOT
 | \

265 
FB_CUR_SETCMAP
 | 
FB_CUR_SETSHAPE
)

	)

268 
	#FBIOSCURSOR
 
	`_IOW
('F', 24, 
fbcurs‹
)

	)

269 
	#FBIOGCURSOR
 
	`_IOWR
('F', 25, 
fbcurs‹
)

	)

272 
	#FBIOSCURPOS
 
	`_IOW
('F', 26, 
fbcuΩos
)

	)

273 
	#FBIOGCURPOS
 
	`_IOW
('F', 27, 
fbcuΩos
)

	)

276 
	#FBIOGCURMAX
 
	`_IOR
('F', 28, 
fbcuΩos
)

	)

281 
	sbrd_öfo
 {

282 
u_sh‹t
 
	mac˚ssibÀ_width
;

283 
u_sh‹t
 
	mac˚ssibÀ_height
;

284 
u_sh‹t
 
	mlöe_byãs
;

285 
u_sh‹t
 
	mhdb_ˇ∑bÀ
;

286 
u_sh‹t
 
	mvmsize
;

287 
u_ch¨
 
	mbﬂrdªv
;

288 
u_ch¨
 
	m∑d0
;

289 
u_l⁄g
 
	m∑d1
;

291 
	#FBIOGXINFO
 
	`_IOR
('F', 39, 
brd_öfo
)

	)

296 
	sm⁄_öfo
 {

297 
u_l⁄g
 
	mm⁄_ty≥
;

298 
	#MON_TYPE_STEREO
 0x8

	)

299 
	#MON_TYPE_0_OFFSET
 0x4

	)

300 
	#MON_TYPE_OVERSCAN
 0x2

	)

301 
	#MON_TYPE_GRAY
 0x1

	)

302 
u_l⁄g
 
	mpix‰eq
;

303 
u_l⁄g
 
	mh‰eq
;

304 
u_l⁄g
 
	mv‰eq
;

305 
u_l⁄g
 
	mvsync
;

306 
u_l⁄g
 
	mhsync
;

308 
u_sh‹t
 
	mhÂ‹ch
;

309 
u_sh‹t
 
	mhbp‹ch
;

310 
u_sh‹t
 
	mvÂ‹ch
;

311 
u_sh‹t
 
	mvbp‹ch
;

313 
	#FBIOMONINFO
 
	`_IOR
('F', 40, 
m⁄_öfo
)

	)

318 
	sfbcm≠_i
 {

319 
	mÊags
;

320 
	#FB_CMAP_BLOCK
 (1 << 0Ë

	)

321 
	#FB_CMAP_KERNEL
 (1 << 1Ë

	)

322 
	mid
;

323 
	mödex
;

324 
	mcou¡
;

325 
u_ch¨
 *
	mªd
;

326 
u_ch¨
 *
	mgªí
;

327 
u_ch¨
 *
	mblue
;

329 
	#FBIOPUTCMAPI
 
	`_IOW
('F', 41, 
fbcm≠_i
)

	)

330 
	#FBIOGETCMAPI
 
	`_IOW
('F', 42, 
fbcm≠_i
)

	)

335 
	svideo_öfo
 {

336 
	mvi_mode
;

337 
	mvi_Êags
;

338 
	#V_INFO_COLOR
 (1 << 0)

	)

339 
	#V_INFO_GRAPHICS
 (1 << 1)

	)

340 
	#V_INFO_LINEAR
 (1 << 2)

	)

341 
	#V_INFO_VESA
 (1 << 3)

	)

342 
	#V_INFO_NONVGA
 (1 << 4)

	)

343 
	#V_INFO_CWIDTH9
 (1 << 5)

	)

344 
	mvi_width
;

345 
	mvi_height
;

346 
	mvi_cwidth
;

347 
	mvi_cheight
;

348 
	mvi_dïth
;

349 
	mvi_∂™es
;

350 
vm_off£t_t
 
	mvi_wödow
;

351 
size_t
 
	mvi_wödow_size
;

352 
size_t
 
	mvi_wödow_gøn
;

353 
vm_off£t_t
 
	mvi_buf„r
;

354 
size_t
 
	mvi_buf„r_size
;

355 
	mvi_mem_modñ
;

356 
	#V_INFO_MM_OTHER
 (-1)

	)

357 
	#V_INFO_MM_TEXT
 0

	)

358 
	#V_INFO_MM_PLANAR
 1

	)

359 
	#V_INFO_MM_PACKED
 2

	)

360 
	#V_INFO_MM_DIRECT
 3

	)

361 
	#V_INFO_MM_CGA
 100

	)

362 
	#V_INFO_MM_HGC
 101

	)

363 
	#V_INFO_MM_VGAX
 102

	)

365 
	mvi_pixñ_size
;

367 
	mvi_pixñ_fõlds
[4];

368 
	mvi_pixñ_fsizes
[4];

370 
u_ch¨
 
	mvi_ª£rved
[64];

371 
vm_off£t_t
 
	mvi_ªgi°îs
;

372 
vm_off£t_t
 
	mvi_ªgi°îs_size
;

374 
video_öfo
 
	tvideo_öfo_t
;

377 
	svideo_ad≠ãr
 {

378 
	mva_ödex
;

379 
	mva_ty≥
;

380 
	#KD_OTHER
 0

	)

381 
	#KD_MONO
 1

	)

382 
	#KD_HERCULES
 2

	)

383 
	#KD_CGA
 3

	)

384 
	#KD_EGA
 4

	)

385 
	#KD_VGA
 5

	)

386 
	#KD_TGA
 7

	)

387 
	#KD_TGA2
 8

	)

388 *
	mva_«me
;

389 
	mva_unô
;

390 
	mva_mö‹
;

391 
	mva_Êags
;

392 
	#V_ADP_COLOR
 (1 << 0)

	)

393 
	#V_ADP_MODECHANGE
 (1 << 1)

	)

394 
	#V_ADP_STATESAVE
 (1 << 2)

	)

395 
	#V_ADP_STATELOAD
 (1 << 3)

	)

396 
	#V_ADP_FONT
 (1 << 4)

	)

397 
	#V_ADP_PALETTE
 (1 << 5)

	)

398 
	#V_ADP_BORDER
 (1 << 6)

	)

399 
	#V_ADP_VESA
 (1 << 7)

	)

400 
	#V_ADP_BOOTDISPLAY
 (1 << 8)

	)

401 
	#V_ADP_PROBED
 (1 << 16)

	)

402 
	#V_ADP_INITIALIZED
 (1 << 17)

	)

403 
	#V_ADP_REGISTERED
 (1 << 18)

	)

404 
	#V_ADP_ATTACHED
 (1 << 19)

	)

405 
	#V_ADP_DAC8
 (1 << 20)

	)

406 
	#V_ADP_CWIDTH9
 (1 << 21)

	)

407 
vm_off£t_t
 
	mva_io_ba£
;

408 
	mva_io_size
;

409 
vm_off£t_t
 
	mva_¸tc_addr
;

410 
vm_off£t_t
 
	mva_mem_ba£
;

411 
	mva_mem_size
;

412 
vm_off£t_t
 
	mva_wödow
;

413 
size_t
 
	mva_wödow_size
;

414 
size_t
 
	mva_wödow_gøn
;

415 
u_öt
 
	mva_wödow_‹ig
;

416 
vm_off£t_t
 
	mva_buf„r
;

417 
size_t
 
	mva_buf„r_size
;

418 
	mva_öôül_mode
;

419 
	mva_öôül_bios_mode
;

420 
	mva_mode
;

421 
video_öfo
 
	mva_öfo
;

422 
	mva_löe_width
;

424 
	mx
;

425 
	my
;

426 } 
	mva_di•_°¨t
;

427 *
	mva_tokí
;

428 
	mva_modñ
;

429 
	mva_lôée_bôün
;

430 
	mva_lôée_ídün
;

431 
	mva_buf„r_Æüs
;

432 
vm_off£t_t
 
	mva_ªgi°îs
;

433 
vm_off£t_t
 
	mva_ªgi°îs_size
;

435 
video_ad≠ãr
 
	tvideo_ad≠ãr_t
;

437 
	svideo_ad≠ãr_öfo
 {

438 
	mva_ödex
;

439 
	mva_ty≥
;

440 
	mva_«me
[16];

441 
	mva_unô
;

442 
	mva_Êags
;

443 
vm_off£t_t
 
	mva_io_ba£
;

444 
	mva_io_size
;

445 
vm_off£t_t
 
	mva_¸tc_addr
;

446 
vm_off£t_t
 
	mva_mem_ba£
;

447 
	mva_mem_size
;

448 
vm_off£t_t
 
	mva_wödow
;

449 
size_t
 
	mva_wödow_size
;

450 
size_t
 
	mva_wödow_gøn
;

451 
vm_off£t_t
 
	mva_unu£d0
;

452 
size_t
 
	mva_buf„r_size
;

453 
	mva_öôül_mode
;

454 
	mva_öôül_bios_mode
;

455 
	mva_mode
;

456 
	mva_löe_width
;

458 
	mx
;

459 
	my
;

460 } 
	mva_di•_°¨t
;

461 
u_öt
 
	mva_wödow_‹ig
;

463 
u_ch¨
 
	mva_ª£rved
[64];

465 
video_ad≠ãr_öfo
 
	tvideo_ad≠ãr_öfo_t
;

468 
	#V_ADP_PRIMARY
 0

	)

469 
	#V_ADP_SECONDARY
 1

	)

473 
	#M_B40x25
 0

	)

474 
	#M_C40x25
 1

	)

475 
	#M_B80x25
 2

	)

476 
	#M_C80x25
 3

	)

477 
	#M_BG320
 4

	)

478 
	#M_CG320
 5

	)

479 
	#M_BG640
 6

	)

480 
	#M_EGAMONO80x25
 7

	)

481 
	#M_CG320_D
 13

	)

482 
	#M_CG640_E
 14

	)

483 
	#M_EGAMONOAPA
 15

	)

484 
	#M_CG640x350
 16

	)

485 
	#M_ENHMONOAPA2
 17

	)

486 
	#M_ENH_CG640
 18

	)

487 
	#M_ENH_B40x25
 19

	)

488 
	#M_ENH_C40x25
 20

	)

489 
	#M_ENH_B80x25
 21

	)

490 
	#M_ENH_C80x25
 22

	)

491 
	#M_VGA_C40x25
 23

	)

492 
	#M_VGA_C80x25
 24

	)

493 
	#M_VGA_M80x25
 25

	)

495 
	#M_VGA11
 26

	)

496 
	#M_BG640x480
 26

	)

497 
	#M_VGA12
 27

	)

498 
	#M_CG640x480
 27

	)

499 
	#M_VGA13
 28

	)

500 
	#M_VGA_CG320
 28

	)

502 
	#M_VGA_C80x50
 30

	)

503 
	#M_VGA_M80x50
 31

	)

504 
	#M_VGA_C80x30
 32

	)

505 
	#M_VGA_M80x30
 33

	)

506 
	#M_VGA_C80x60
 34

	)

507 
	#M_VGA_M80x60
 35

	)

508 
	#M_VGA_CG640
 36

	)

509 
	#M_VGA_MODEX
 37

	)

511 
	#M_VGA_C90x25
 40

	)

512 
	#M_VGA_M90x25
 41

	)

513 
	#M_VGA_C90x30
 42

	)

514 
	#M_VGA_M90x30
 43

	)

515 
	#M_VGA_C90x43
 44

	)

516 
	#M_VGA_M90x43
 45

	)

517 
	#M_VGA_C90x50
 46

	)

518 
	#M_VGA_M90x50
 47

	)

519 
	#M_VGA_C90x60
 48

	)

520 
	#M_VGA_M90x60
 49

	)

522 
	#M_ENH_B80x43
 0x70

	)

523 
	#M_ENH_C80x43
 0x71

	)

525 
	#M_HGC_P0
 0xe0

	)

526 
	#M_HGC_P1
 0xe1

	)

527 
	#M_MCA_MODE
 0xf‡

	)

529 
	#M_TEXT_80x25
 200

	)

530 
	#M_TEXT_80x30
 201

	)

531 
	#M_TEXT_80x43
 202

	)

532 
	#M_TEXT_80x50
 203

	)

533 
	#M_TEXT_80x60
 204

	)

534 
	#M_TEXT_132x25
 205

	)

535 
	#M_TEXT_132x30
 206

	)

536 
	#M_TEXT_132x43
 207

	)

537 
	#M_TEXT_132x50
 208

	)

538 
	#M_TEXT_132x60
 209

	)

540 
	#M_VESA_BASE
 0x100

	)

541 
	#M_VESA_CG640x400
 0x100

	)

542 
	#M_VESA_CG640x480
 0x101

	)

543 
	#M_VESA_800x600
 0x102

	)

544 
	#M_VESA_CG800x600
 0x103

	)

545 
	#M_VESA_1024x768
 0x104

	)

546 
	#M_VESA_CG1024x768
 0x105

	)

547 
	#M_VESA_1280x1024
 0x106

	)

548 
	#M_VESA_CG1280x1024
 0x107

	)

549 
	#M_VESA_C80x60
 0x108

	)

550 
	#M_VESA_C132x25
 0x109

	)

551 
	#M_VESA_C132x43
 0x10®

	)

552 
	#M_VESA_C132x50
 0x10b

	)

553 
	#M_VESA_C132x60
 0x10¯

	)

554 
	#M_VESA_32K_320
 0x10d

	)

555 
	#M_VESA_64K_320
 0x10ê

	)

556 
	#M_VESA_FULL_320
 0x10‡

	)

557 
	#M_VESA_32K_640
 0x110

	)

558 
	#M_VESA_64K_640
 0x111

	)

559 
	#M_VESA_FULL_640
 0x112

	)

560 
	#M_VESA_32K_800
 0x113

	)

561 
	#M_VESA_64K_800
 0x114

	)

562 
	#M_VESA_FULL_800
 0x115

	)

563 
	#M_VESA_32K_1024
 0x116

	)

564 
	#M_VESA_64K_1024
 0x117

	)

565 
	#M_VESA_FULL_1024
 0x118

	)

566 
	#M_VESA_32K_1280
 0x119

	)

567 
	#M_VESA_64K_1280
 0x11®

	)

568 
	#M_VESA_FULL_1280
 0x11b

	)

569 
	#M_VESA_MODE_MAX
 0x1ff

	)

571 
	svideo_di•œy_°¨t
 {

572 
	mx
;

573 
	my
;

575 
video_di•œy_°¨t
 
	tvideo_di•œy_°¨t_t
;

577 
	svideo_cﬁ‹_∑Àâe
 {

578 
	mödex
;

579 
	mcou¡
;

580 
u_ch¨
 *
	mªd
;

581 
u_ch¨
 *
	mgªí
;

582 
u_ch¨
 *
	mblue
;

583 
u_ch¨
 *
	må™•¨ít
;

585 
video_cﬁ‹_∑Àâe
 
	tvideo_cﬁ‹_∑Àâe_t
;

588 
	#FBIO_ADAPTER
 
	`_IOR
('F', 100, )

	)

589 
	#FBIO_ADPTYPE
 
	`_IOR
('F', 101, )

	)

590 
	#FBIO_ADPINFO
 
	`_IOR
('F', 102, 
video_ad≠ãr_öfo
)

	)

593 
	#FBIO_MODEINFO
 
	`_IOWR
('F', 103, 
video_öfo
)

	)

594 
	#FBIO_FINDMODE
 
	`_IOWR
('F', 104, 
video_öfo
)

	)

595 
	#FBIO_GETMODE
 
	`_IOR
('F', 105, )

	)

596 
	#FBIO_SETMODE
 
	`_IOW
('F', 106, )

	)

599 
	#FBIO_GETWINORG
 
	`_IOR
('F', 107, 
u_öt
)

	)

600 
	#FBIO_SETWINORG
 
	`_IOW
('F', 108, 
u_öt
)

	)

603 
	#FBIO_GETDISPSTART
 
	`_IOR
('F', 109, 
video_di•œy_°¨t_t
)

	)

604 
	#FBIO_SETDISPSTART
 
	`_IOW
('F', 110, 
video_di•œy_°¨t_t
)

	)

607 
	#FBIO_GETLINEWIDTH
 
	`_IOR
('F', 111, 
u_öt
)

	)

608 
	#FBIO_SETLINEWIDTH
 
	`_IOW
('F', 112, 
u_öt
)

	)

611 
	#FBIO_GETPALETTE
 
	`_IOW
('F', 113, 
video_cﬁ‹_∑Àâe_t
)

	)

612 
	#FBIO_SETPALETTE
 
	`_IOW
('F', 114, 
video_cﬁ‹_∑Àâe_t
)

	)

615 
	#V_DISPLAY_ON
 0

	)

616 
	#V_DISPLAY_BLANK
 1

	)

617 
	#V_DISPLAY_STAND_BY
 2

	)

618 
	#V_DISPLAY_SUSPEND
 3

	)

620 
	#FBIO_BLANK
 
	`_IOW
('F', 115, )

	)

	@/usr/include/sys/fcntl.h

40 #i‚de‡
_SYS_FCNTL_H_


41 
	#_SYS_FCNTL_H_


	)

49 
	~<sys/cdefs.h
>

50 
	~<sys/_ty≥s.h
>

52 #i‚de‡
_MODE_T_DECLARED


53 
__mode_t
 
	tmode_t
;

54 
	#_MODE_T_DECLARED


	)

57 #i‚de‡
_OFF_T_DECLARED


58 
__off_t
 
	toff_t
;

59 
	#_OFF_T_DECLARED


	)

62 #i‚de‡
_PID_T_DECLARED


63 
__pid_t
 
	tpid_t
;

64 
	#_PID_T_DECLARED


	)

75 
	#O_RDONLY
 0x0000

	)

76 
	#O_WRONLY
 0x0001

	)

77 
	#O_RDWR
 0x0002

	)

78 
	#O_ACCMODE
 0x0003

	)

88 #i‡
__BSD_VISIBLE


89 
	#FREAD
 0x0001

	)

90 
	#FWRITE
 0x0002

	)

92 
	#O_NONBLOCK
 0x0004

	)

93 
	#O_APPEND
 0x0008

	)

94 #i‡
__BSD_VISIBLE


95 
	#O_SHLOCK
 0x0010

	)

96 
	#O_EXLOCK
 0x0020

	)

97 
	#O_ASYNC
 0x0040

	)

98 
	#O_FSYNC
 0x0080

	)

100 
	#O_SYNC
 0x0080

	)

101 #i‡
__POSIX_VISIBLE
 >= 200809

102 
	#O_NOFOLLOW
 0x0100

	)

104 
	#O_CREAT
 0x0200

	)

105 
	#O_TRUNC
 0x0400

	)

106 
	#O_EXCL
 0x0800

	)

107 #ifde‡
_KERNEL


108 
	#FHASLOCK
 0x4000

	)

112 
	#O_NOCTTY
 0x8000

	)

114 #i‡
__BSD_VISIBLE


116 
	#O_DIRECT
 0x00010000

	)

119 #i‡
__POSIX_VISIBLE
 >= 200809

120 
	#O_DIRECTORY
 0x00020000

	)

121 
	#O_EXEC
 0x00040000

	)

123 #ifdef 
_KERNEL


124 
	#FEXEC
 
O_EXEC


	)

127 #i‡
__POSIX_VISIBLE
 >= 200809

129 
	#O_TTY_INIT
 0x00080000

	)

131 
	#O_CLOEXEC
 0x00100000

	)

134 #i‡
__BSD_VISIBLE


135 
	#O_VERIFY
 0x00200000

	)

142 #ifde‡
_KERNEL


145 
	#FLASTCLOSE
 
O_DIRECTORY


	)

146 
	#FREVOKE
 
O_VERIFY


	)

148 
	#FOPENFAILED
 
O_TTY_INIT


	)

151 
	#FFLAGS
(
oÊags
Ë((oÊagsË& 
O_EXEC
 ? (oÊagsË: (oÊagsË+ 1)

	)

152 
	#OFLAGS
(
fÊags
Ë((fÊagsË& 
O_EXEC
 ? (fÊagsË: (fÊagsË- 1)

	)

155 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

157 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

159 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

160 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

166 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

167 #unde‡
FCNTLFLAGS


168 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

169 
O_DIRECT
)

	)

178 #i‡
__BSD_VISIBLE


179 
	#FAPPEND
 
O_APPEND


	)

180 
	#FASYNC
 
O_ASYNC


	)

181 
	#FFSYNC
 
O_FSYNC


	)

182 
	#FNONBLOCK
 
O_NONBLOCK


	)

183 
	#FNDELAY
 
O_NONBLOCK


	)

184 
	#O_NDELAY
 
O_NONBLOCK


	)

193 #i‡
__BSD_VISIBLE


195 
	#FRDAHEAD
 
O_CREAT


	)

198 #i‡
__POSIX_VISIBLE
 >= 200809

204 
	#AT_FDCWD
 -100

	)

209 
	#AT_EACCESS
 0x100

	)

210 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

211 
	#AT_SYMLINK_FOLLOW
 0x400

	)

212 
	#AT_REMOVEDIR
 0x800

	)

220 
	#F_DUPFD
 0

	)

221 
	#F_GETFD
 1

	)

222 
	#F_SETFD
 2

	)

223 
	#F_GETFL
 3

	)

224 
	#F_SETFL
 4

	)

225 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

226 
	#F_GETOWN
 5

	)

227 
	#F_SETOWN
 6

	)

229 #i‡
__BSD_VISIBLE


230 
	#F_OGETLK
 7

	)

231 
	#F_OSETLK
 8

	)

232 
	#F_OSETLKW
 9

	)

233 
	#F_DUP2FD
 10

	)

235 
	#F_GETLK
 11

	)

236 
	#F_SETLK
 12

	)

237 
	#F_SETLKW
 13

	)

238 #i‡
__BSD_VISIBLE


239 
	#F_SETLK_REMOTE
 14

	)

240 
	#F_READAHEAD
 15

	)

241 
	#F_RDAHEAD
 16

	)

243 #i‡
__POSIX_VISIBLE
 >= 200809

244 
	#F_DUPFD_CLOEXEC
 17

	)

246 #i‡
__BSD_VISIBLE


247 
	#F_DUP2FD_CLOEXEC
 18

	)

251 
	#FD_CLOEXEC
 1

	)

254 
	#F_RDLCK
 1

	)

255 
	#F_UNLCK
 2

	)

256 
	#F_WRLCK
 3

	)

257 #i‡
__BSD_VISIBLE


258 
	#F_UNLCKSYS
 4

	)

259 
	#F_CANCEL
 5

	)

261 #ifde‡
_KERNEL


262 
	#F_WAIT
 0x010

	)

263 
	#F_FLOCK
 0x020

	)

264 
	#F_POSIX
 0x040

	)

265 
	#F_REMOTE
 0x080

	)

266 
	#F_NOINTR
 0x100

	)

273 
	sÊock
 {

274 
off_t
 
l_°¨t
;

275 
off_t
 
l_Àn
;

276 
pid_t
 
l_pid
;

277 
l_ty≥
;

278 
l_whí˚
;

279 
l_sysid
;

282 #i‡
__BSD_VISIBLE


287 
	s__oÊock
 {

288 
off_t
 
l_°¨t
;

289 
off_t
 
l_Àn
;

290 
pid_t
 
l_pid
;

291 
l_ty≥
;

292 
l_whí˚
;

296 #i‡
__BSD_VISIBLE


298 
	#LOCK_SH
 0x01

	)

299 
	#LOCK_EX
 0x02

	)

300 
	#LOCK_NB
 0x04

	)

301 
	#LOCK_UN
 0x08

	)

304 #i‡
__POSIX_VISIBLE
 >= 200112

308 
	#POSIX_FADV_NORMAL
 0

	)

309 
	#POSIX_FADV_RANDOM
 1

	)

310 
	#POSIX_FADV_SEQUENTIAL
 2

	)

311 
	#POSIX_FADV_WILLNEED
 3

	)

312 
	#POSIX_FADV_DONTNEED
 4

	)

313 
	#POSIX_FADV_NOREUSE
 5

	)

316 #i‚de‡
_KERNEL


317 
__BEGIN_DECLS


318 
	`›í
(const *, , ...);

319 
	`¸ót
(c⁄° *, 
mode_t
);

320 
	`f˙é
(, , ...);

321 #i‡
__BSD_VISIBLE


322 
	`Êock
(, );

324 #i‡
__POSIX_VISIBLE
 >= 200809

325 
	`›í©
(, const *, , ...);

327 #i‡
__POSIX_VISIBLE
 >= 200112

328 
	`posix_Ádvi£
(, 
off_t
, off_t, );

329 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

331 
__END_DECLS


	@/usr/include/sys/file.h

35 #i‚de‡
_SYS_FILE_H_


36 
	#_SYS_FILE_H_


	)

38 #i‚de‡
_KERNEL


39 
	~<sys/ty≥s.h
>

40 
	~<sys/f˙é.h
>

41 
	~<sys/uni°d.h
>

43 
	~<sys/queue.h
>

44 
	~<sys/ªfcou¡.h
>

45 
	~<sys/_lock.h
>

46 
	~<sys/_muãx.h
>

47 
	~<vm/vm.h
>

49 
	gfûedesc
;

50 
	g°©
;

51 
	gthªad
;

52 
	guio
;

53 
	gknŸe
;

54 
	gvnode
;

58 
	#DTYPE_NONE
 0

	)

59 
	#DTYPE_VNODE
 1

	)

60 
	#DTYPE_SOCKET
 2

	)

61 
	#DTYPE_PIPE
 3

	)

62 
	#DTYPE_FIFO
 4

	)

63 
	#DTYPE_KQUEUE
 5

	)

64 
	#DTYPE_CRYPTO
 6

	)

65 
	#DTYPE_MQUEUE
 7

	)

66 
	#DTYPE_SHM
 8

	)

67 
	#DTYPE_SEM
 9

	)

68 
	#DTYPE_PTS
 10

	)

69 
	#DTYPE_DEV
 11

	)

70 
	#DTYPE_PROCDESC
 12

	)

71 
	#DTYPE_LINUXEFD
 13

	)

72 
	#DTYPE_LINUXTFD
 14

	)

74 #ifde‡
_KERNEL


76 
	gfûe
;

77 
	gfûeˇps
;

78 
	gkaiocb
;

79 
	gköfo_fûe
;

80 
	gu¸ed
;

82 
	#FOF_OFFSET
 0x01

	)

83 
	#FOF_NOLOCK
 0x02

	)

84 
	#FOF_NEXTOFF
 0x04

	)

85 
	#FOF_NOUPDATE
 0x10

	)

86 
off_t
 
foff£t_lock
(
fûe
 *
Â
, 
Êags
);

87 
foff£t_lock_uio
(
fûe
 *
Â
, 
uio
 *uio, 
Êags
);

88 
foff£t_u∆ock
(
fûe
 *
Â
, 
off_t
 
vÆ
, 
Êags
);

89 
foff£t_u∆ock_uio
(
fûe
 *
Â
, 
uio
 *uio, 
Êags
);

91 
ölöe
 
off_t


92 
	$foff£t_gë
(
fûe
 *
Â
)

95  (
	`foff£t_lock
(
Â
, 
FOF_NOLOCK
));

96 
	}
}

98 
	tfo_rdwr_t
(
	tfûe
 *
	tÂ
, 
	tuio
 *uio,

99 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tÊags
,

100 
	tthªad
 *
	ttd
);

101 
	tfo_åunˇã_t
(
	tfûe
 *
	tÂ
, 
	toff_t
 
	tÀngth
,

102 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

103 
	tfo_io˘l_t
(
	tfûe
 *
	tÂ
, 
	tu_l⁄g
 
	tcom
, *
	td©a
,

104 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

105 
	tfo_pﬁl_t
(
	tfûe
 *
	tÂ
, 
	tevíts
,

106 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

107 
	tfo_kqfûãr_t
(
	tfûe
 *
	tÂ
, 
	tknŸe
 *
	tkn
);

108 
	tfo_°©_t
(
	tfûe
 *
	tÂ
, 
	t°©
 *
	tsb
,

109 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

110 
	tfo_˛o£_t
(
	tfûe
 *
	tÂ
, 
	tthªad
 *
	ttd
);

111 
	tfo_chmod_t
(
	tfûe
 *
	tÂ
, 
	tmode_t
 
	tmode
,

112 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

113 
	tfo_chown_t
(
	tfûe
 *
	tÂ
, 
	tuid_t
 
	tuid
, 
	tgid_t
 
	tgid
,

114 
	tu¸ed
 *
	ta˘ive_¸ed
, 
	tthªad
 *
	ttd
);

115 
	tfo_£ndfûe_t
(
	tfûe
 *
	tÂ
, 
	tsockfd
, 
	tuio
 *
	thdr_uio
,

116 
	tuio
 *
	tål_uio
, 
	toff_t
 
	toff£t
, 
	tsize_t
 
	tnbyãs
,

117 
	toff_t
 *
	t£¡
, 
	tÊags
, 
	tthªad
 *
	ttd
);

118 
	tfo_£ek_t
(
	tfûe
 *
	tÂ
, 
	toff_t
 
	toff£t
, 
	twhí˚
,

119 
	tthªad
 *
	ttd
);

120 
	tfo_fûl_köfo_t
(
	tfûe
 *
	tÂ
, 
	tköfo_fûe
 *
	tkif
,

121 
	tfûedesc
 *
	tfdp
);

122 
	tfo_mm≠_t
(
	tfûe
 *
	tÂ
, 
	tvm_m≠_t
 
	tm≠
, 
	tvm_off£t_t
 *
	taddr
,

123 
	tvm_size_t
 
	tsize
, 
	tvm_¥Ÿ_t
 
	t¥Ÿ
, vm_¥Ÿ_à
	tˇp_max¥Ÿ
,

124 
	tÊags
, 
	tvm_ooff£t_t
 
	tfoff
, 
	tthªad
 *
	ttd
);

125 
	tfo_aio_queue_t
(
	tfûe
 *
	tÂ
, 
	tkaiocb
 *
	tjob
);

126 
	tfo_Êags_t
;

128 
	sfûe›s
 {

129 
fo_rdwr_t
 *
	mfo_ªad
;

130 
fo_rdwr_t
 *
	mfo_wrôe
;

131 
fo_åunˇã_t
 *
	mfo_åunˇã
;

132 
fo_io˘l_t
 *
	mfo_io˘l
;

133 
fo_pﬁl_t
 *
	mfo_pﬁl
;

134 
fo_kqfûãr_t
 *
	mfo_kqfûãr
;

135 
fo_°©_t
 *
	mfo_°©
;

136 
fo_˛o£_t
 *
	mfo_˛o£
;

137 
fo_chmod_t
 *
	mfo_chmod
;

138 
fo_chown_t
 *
	mfo_chown
;

139 
fo_£ndfûe_t
 *
	mfo_£ndfûe
;

140 
fo_£ek_t
 *
	mfo_£ek
;

141 
fo_fûl_köfo_t
 *
	mfo_fûl_köfo
;

142 
fo_mm≠_t
 *
	mfo_mm≠
;

143 
fo_aio_queue_t
 *
	mfo_aio_queue
;

144 
fo_Êags_t
 
	mfo_Êags
;

147 
	#DFLAG_PASSABLE
 0x01

	)

148 
	#DFLAG_SEEKABLE
 0x02

	)

151 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_FILE
)

164 
	sÁdvi£_öfo
 {

165 
	mÁ_advi˚
;

166 
off_t
 
	mÁ_°¨t
;

167 
off_t
 
	mÁ_íd
;

170 
	sfûe
 {

171 *
	mf_d©a
;

172 
fûe›s
 *
	mf_›s
;

173 
u¸ed
 *
	mf_¸ed
;

174 
vnode
 *
	mf_vnode
;

175 
	mf_ty≥
;

176 
	mf_vƒód_Êags
;

177 vﬁ©ûê
u_öt
 
	mf_Êag
;

178 vﬁ©ûê
u_öt
 
	mf_cou¡
;

182 
	mf_£qcou¡
;

183 
off_t
 
	mf_√xtoff
;

185 
cdev_¥ivd©a
 *
	mfvn_cdev¥iv
;

187 
Ádvi£_öfo
 *
	mfvn_advi˚
;

188 } 
	mf_vnun
;

192 
off_t
 
	mf_off£t
;

196 *
	mf_œbñ
;

199 
	#f_cdev¥iv
 
f_vnun
.
fvn_cdev¥iv


	)

200 
	#f_advi˚
 
f_vnun
.
fvn_advi˚


	)

202 
	#FOFFSET_LOCKED
 0x1

	)

203 
	#FOFFSET_LOCK_WAITING
 0x2

	)

204 
	#FDEVFS_VNODE
 0x4

	)

211 
	sxfûe
 {

212 
ksize_t
 
	mxf_size
;

213 
pid_t
 
	mxf_pid
;

214 
uid_t
 
	mxf_uid
;

215 
	mxf_fd
;

216 
	m_xf_öt_∑d1
;

217 
kvaddr_t
 
	mxf_fûe
;

218 
	mxf_ty≥
;

219 
	m_xf_sh‹t_∑d1
;

220 
	mxf_cou¡
;

221 
	mxf_msgcou¡
;

222 
	m_xf_öt_∑d2
;

223 
off_t
 
	mxf_off£t
;

224 
kvaddr_t
 
	mxf_d©a
;

225 
kvaddr_t
 
	mxf_vnode
;

226 
u_öt
 
	mxf_Êag
;

227 
	m_xf_öt_∑d3
;

228 
öt64_t
 
	m_xf_öt64_∑d
[6];

231 #ifde‡
_KERNEL


233 
fûe›s
 
vn›s
;

234 
fûe›s
 
badfûe›s
;

235 
fûe›s
 
sockë›s
;

236 
maxfûes
;

237 
maxfûe•î¥oc
;

238 vﬁ©ûê
›ífûes
;

240 
fgë
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
, 
fûe
 **
Âp
);

241 
fgë_mm≠
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

242 
u_ch¨
 *
max¥Ÿp
, 
fûe
 **
Âp
);

243 
fgë_ªad
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

244 
fûe
 **
Âp
);

245 
fgë_wrôe
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

246 
fûe
 **
Âp
);

247 
fgë_f˙é
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

248 
√edf˙é
, 
fûe
 **
Âp
);

249 
_fdr›
(
fûe
 *
Â
, 
thªad
 *
td
);

251 
fo_rdwr_t
 
	gövfo_rdwr
;

252 
fo_åunˇã_t
 
	gövfo_åunˇã
;

253 
fo_io˘l_t
 
	gövfo_io˘l
;

254 
fo_pﬁl_t
 
	gövfo_pﬁl
;

255 
fo_kqfûãr_t
 
	gövfo_kqfûãr
;

256 
fo_chmod_t
 
	gövfo_chmod
;

257 
fo_chown_t
 
	gövfo_chown
;

258 
fo_£ndfûe_t
 
	gövfo_£ndfûe
;

260 
fo_£ndfûe_t
 
	gvn_£ndfûe
;

261 
fo_£ek_t
 
	gvn_£ek
;

262 
fo_fûl_köfo_t
 
	gvn_fûl_köfo
;

263 
vn_fûl_köfo_vnode
(
vnode
 *
vp
, 
köfo_fûe
 *
kif
);

265 
föô
(
fûe
 *, 
u_öt
, , *, 
fûe›s
 *);

266 
fgëvp
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

267 
vnode
 **
vµ
);

268 
fgëvp_exec
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

269 
vnode
 **
vµ
);

270 
fgëvp_rights
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
√edright•
,

271 
fûeˇps
 *
haveˇps
, 
vnode
 **
vµ
);

272 
fgëvp_ªad
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

273 
vnode
 **
vµ
);

274 
fgëvp_wrôe
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

275 
vnode
 **
vµ
);

277 
__ölöe
 

278 
	$_‚o›
()

282 
	}
}

284 
	#fhﬁd
(
Â
) \

285 (
	`ªfcou¡_acquúe
(&(
Â
)->
f_cou¡
))

	)

286 
	#fdr›
(
Â
, 
td
) \

287 (
	`ªfcou¡_ªÀa£
(&(
Â
)->
f_cou¡
Ë? 
	`_fdr›
((Â), (
td
)Ë: 
	`_‚o›
())

	)

289 
__ölöe
 
fo_rdwr_t
 
	gfo_ªad
;

290 
__ölöe
 
fo_rdwr_t
 
	gfo_wrôe
;

291 
__ölöe
 
fo_åunˇã_t
 
	gfo_åunˇã
;

292 
__ölöe
 
fo_io˘l_t
 
	gfo_io˘l
;

293 
__ölöe
 
fo_pﬁl_t
 
	gfo_pﬁl
;

294 
__ölöe
 
fo_kqfûãr_t
 
	gfo_kqfûãr
;

295 
__ölöe
 
fo_°©_t
 
	gfo_°©
;

296 
__ölöe
 
fo_˛o£_t
 
	gfo_˛o£
;

297 
__ölöe
 
fo_chmod_t
 
	gfo_chmod
;

298 
__ölöe
 
fo_chown_t
 
	gfo_chown
;

299 
__ölöe
 
fo_£ndfûe_t
 
	gfo_£ndfûe
;

301 
__ölöe
 

302 
	$fo_ªad
(
fûe
 *
Â
, 
uio
 *uio, 
u¸ed
 *
a˘ive_¸ed
,

303 
Êags
, 
thªad
 *
td
)

306  ((*
Â
->
f_›s
->
fo_ªad
)(Â, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
));

307 
	}
}

309 
__ölöe
 

310 
	$fo_wrôe
(
fûe
 *
Â
, 
uio
 *uio, 
u¸ed
 *
a˘ive_¸ed
,

311 
Êags
, 
thªad
 *
td
)

314  ((*
Â
->
f_›s
->
fo_wrôe
)(Â, 
uio
, 
a˘ive_¸ed
, 
Êags
, 
td
));

315 
	}
}

317 
__ölöe
 

318 
	$fo_åunˇã
(
fûe
 *
Â
, 
off_t
 
Àngth
, 
u¸ed
 *
a˘ive_¸ed
,

319 
thªad
 *
td
)

322  ((*
Â
->
f_›s
->
fo_åunˇã
)(Â, 
Àngth
, 
a˘ive_¸ed
, 
td
));

323 
	}
}

325 
__ölöe
 

326 
	$fo_io˘l
(
fûe
 *
Â
, 
u_l⁄g
 
com
, *
d©a
, 
u¸ed
 *
a˘ive_¸ed
,

327 
thªad
 *
td
)

330  ((*
Â
->
f_›s
->
fo_io˘l
)(Â, 
com
, 
d©a
, 
a˘ive_¸ed
, 
td
));

331 
	}
}

333 
__ölöe
 

334 
	$fo_pﬁl
(
fûe
 *
Â
, 
evíts
, 
u¸ed
 *
a˘ive_¸ed
,

335 
thªad
 *
td
)

338  ((*
Â
->
f_›s
->
fo_pﬁl
)(Â, 
evíts
, 
a˘ive_¸ed
, 
td
));

339 
	}
}

341 
__ölöe
 

342 
	$fo_°©
(
fûe
 *
Â
, 
°©
 *
sb
, 
u¸ed
 *
a˘ive_¸ed
,

343 
thªad
 *
td
)

346  ((*
Â
->
f_›s
->
fo_°©
)(Â, 
sb
, 
a˘ive_¸ed
, 
td
));

347 
	}
}

349 
__ölöe
 

350 
	$fo_˛o£
(
fûe
 *
Â
, 
thªad
 *
td
)

353  ((*
Â
->
f_›s
->
fo_˛o£
)(Â, 
td
));

354 
	}
}

356 
__ölöe
 

357 
	$fo_kqfûãr
(
fûe
 *
Â
, 
knŸe
 *
kn
)

360  ((*
Â
->
f_›s
->
fo_kqfûãr
)(Â, 
kn
));

361 
	}
}

363 
__ölöe
 

364 
	$fo_chmod
(
fûe
 *
Â
, 
mode_t
 
mode
, 
u¸ed
 *
a˘ive_¸ed
,

365 
thªad
 *
td
)

368  ((*
Â
->
f_›s
->
fo_chmod
)(Â, 
mode
, 
a˘ive_¸ed
, 
td
));

369 
	}
}

371 
__ölöe
 

372 
	$fo_chown
(
fûe
 *
Â
, 
uid_t
 
uid
, 
gid_t
 
gid
, 
u¸ed
 *
a˘ive_¸ed
,

373 
thªad
 *
td
)

376  ((*
Â
->
f_›s
->
fo_chown
)(Â, 
uid
, 
gid
, 
a˘ive_¸ed
, 
td
));

377 
	}
}

379 
__ölöe
 

380 
	$fo_£ndfûe
(
fûe
 *
Â
, 
sockfd
, 
uio
 *
hdr_uio
,

381 
uio
 *
ål_uio
, 
off_t
 
off£t
, 
size_t
 
nbyãs
, off_à*
£¡
, 
Êags
,

382 
thªad
 *
td
)

385  ((*
Â
->
f_›s
->
fo_£ndfûe
)(Â, 
sockfd
, 
hdr_uio
, 
ål_uio
, 
off£t
,

386 
nbyãs
, 
£¡
, 
Êags
, 
td
));

387 
	}
}

389 
__ölöe
 

390 
	$fo_£ek
(
fûe
 *
Â
, 
off_t
 
off£t
, 
whí˚
, 
thªad
 *
td
)

393  ((*
Â
->
f_›s
->
fo_£ek
)(Â, 
off£t
, 
whí˚
, 
td
));

394 
	}
}

396 
__ölöe
 

397 
	$fo_fûl_köfo
(
fûe
 *
Â
, 
köfo_fûe
 *
kif
, 
fûedesc
 *
fdp
)

400  ((*
Â
->
f_›s
->
fo_fûl_köfo
)(Â, 
kif
, 
fdp
));

401 
	}
}

403 
__ölöe
 

404 
	$fo_mm≠
(
fûe
 *
Â
, 
vm_m≠_t
 
m≠
, 
vm_off£t_t
 *
addr
, 
vm_size_t
 
size
,

405 
vm_¥Ÿ_t
 
¥Ÿ
, vm_¥Ÿ_à
ˇp_max¥Ÿ
, 
Êags
, 
vm_ooff£t_t
 
foff
,

406 
thªad
 *
td
)

409 i‡(
Â
->
f_›s
->
fo_mm≠
 =
NULL
)

410  (
ENODEV
);

411  ((*
Â
->
f_›s
->
fo_mm≠
)(Â, 
m≠
, 
addr
, 
size
, 
¥Ÿ
, 
ˇp_max¥Ÿ
,

412 
Êags
, 
foff
, 
td
));

413 
	}
}

415 
__ölöe
 

416 
	$fo_aio_queue
(
fûe
 *
Â
, 
kaiocb
 *
job
)

419  ((*
Â
->
f_›s
->
fo_aio_queue
)(Â, 
job
));

420 
	}
}

	@/usr/include/sys/filedesc.h

35 #i‚de‡
_SYS_FILEDESC_H_


36 
	#_SYS_FILEDESC_H_


	)

38 
	~<sys/ˇ¥ights.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/evít.h
>

41 
	~<sys/lock.h
>

42 
	~<sys/¥i‹ôy.h
>

43 
	~<sys/£q.h
>

44 
	~<sys/sx.h
>

46 
	~<machöe/_limôs.h
>

48 
	sfûeˇps
 {

49 
ˇp_rights_t
 
	mfc_rights
;

50 
u_l⁄g
 *
	mfc_io˘ls
;

51 
öt16_t
 
	mfc_nio˘ls
;

52 
uöt32_t
 
	mfc_f˙és
;

55 
	sfûedes˚¡
 {

56 
fûe
 *
	mfde_fûe
;

57 
fûeˇps
 
	mfde_ˇps
;

58 
uöt8_t
 
	mfde_Êags
;

59 
£q_t
 
	mfde_£q
;

61 
	#fde_rights
 
fde_ˇps
.
fc_rights


	)

62 
	#fde_f˙és
 
fde_ˇps
.
fc_f˙és


	)

63 
	#fde_io˘ls
 
fde_ˇps
.
fc_io˘ls


	)

64 
	#fde_nio˘ls
 
fde_ˇps
.
fc_nio˘ls


	)

65 
	#fde_ch™ge_size
 (
	`off£tof
(
fûedes˚¡
, 
fde_£q
))

	)

67 
	sfdes˚¡tbl
 {

68 
	mfdt_nfûes
;

69 
fûedes˚¡
 
	mfdt_ofûes
[0];

71 
	#fd_£q
(
fdt
, 
fd
Ë(&(fdt)->
fdt_ofûes
[(fd)].
fde_£q
)

	)

77 
	#NDSLOTTYPE
 
u_l⁄g


	)

79 
	sfûedesc
 {

80 
fdes˚¡tbl
 *
	mfd_fûes
;

81 
vnode
 *
	mfd_cdú
;

82 
vnode
 *
	mfd_rdú
;

83 
vnode
 *
	mfd_jdú
;

84 
NDSLOTTYPE
 *
	mfd_m≠
;

85 
	mfd_œ°fûe
;

86 
	mfd_‰ìfûe
;

87 
u_sh‹t
 
	mfd_cmask
;

88 
	mfd_ªf˙t
;

89 
	mfd_hﬁd˙t
;

90 
sx
 
	mfd_sx
;

91 
kqli°
 
	mfd_kqli°
;

92 
	mfd_hﬁdÀadîscou¡
;

93 
	mfd_hﬁdÀadîswakeup
;

105 
	sfûedesc_to_Àadî
 {

106 
	mfdl_ªfcou¡
;

107 
	mfdl_hﬁdcou¡
;

108 
	mfdl_wakeup
;

109 
¥oc
 *
	mfdl_Àadî
;

111 
fûedesc_to_Àadî
 *
	mfdl_¥ev
;

112 
fûedesc_to_Àadî
 *
	mfdl_√xt
;

114 
	#fd_nfûes
 
fd_fûes
->
fdt_nfûes


	)

115 
	#fd_ofûes
 
fd_fûes
->
fdt_ofûes


	)

120 
	#UF_EXCLOSE
 0x01

	)

122 #ifde‡
_KERNEL


125 
	#FILEDESC_LOCK_INIT
(
fdp
Ë
	`sx_öô
(&(fdp)->
fd_sx
, "fûedes¯°ru˘uª")

	)

126 
	#FILEDESC_LOCK_DESTROY
(
fdp
Ë
	`sx_de°roy
(&(fdp)->
fd_sx
)

	)

127 
	#FILEDESC_LOCK
(
fdp
Ë(&(fdp)->
fd_sx
)

	)

128 
	#FILEDESC_XLOCK
(
fdp
Ë
	`sx_xlock
(&(fdp)->
fd_sx
)

	)

129 
	#FILEDESC_XUNLOCK
(
fdp
Ë
	`sx_xu∆ock
(&(fdp)->
fd_sx
)

	)

130 
	#FILEDESC_SLOCK
(
fdp
Ë
	`sx_¶ock
(&(fdp)->
fd_sx
)

	)

131 
	#FILEDESC_SUNLOCK
(
fdp
Ë
	`sx_su∆ock
(&(fdp)->
fd_sx
)

	)

133 
	#FILEDESC_LOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_LOCKED
 | \

134 
SX_NOTRECURSED
)

	)

135 
	#FILEDESC_XLOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_XLOCKED
 | \

136 
SX_NOTRECURSED
)

	)

137 
	#FILEDESC_UNLOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_UNLOCKED
)

	)

141 
	mFDDUP_NORMAL
,

142 
	mFDDUP_FCNTL
,

143 
	mFDDUP_FIXED
,

144 
	mFDDUP_MUSTREPLACE
,

145 
	mFDDUP_LASTMODE
,

149 
	#FDDUP_FLAG_CLOEXEC
 0x1

	)

152 
	#ÁŒoc
(
td
, 
ªsu…Â
, 
ªsu…fd
, 
Êags
) \

153 
	`ÁŒoc_ˇps
(
td
, 
ªsu…Â
, 
ªsu…fd
, 
Êags
, 
NULL
)

	)

155 
	gthªad
;

157 
fûeˇps_öô
(
fûeˇps
 *
fˇps
);

158 
boﬁ
 
fûeˇps_c›y
(c⁄° 
fûeˇps
 *
§c
, fûeˇp†*
d°
,

159 
boﬁ
 
locked
);

160 
fûeˇps_move
(
fûeˇps
 *
§c
, fûeˇp†*
d°
);

161 
fûeˇps_‰ì
(
fûeˇps
 *
fˇps
);

163 
˛o£f
(
fûe
 *
Â
, 
thªad
 *
td
);

164 
dupfd›í
(
thªad
 *
td
, 
fûedesc
 *
fdp
, 
dfd
, 
mode
,

165 
›íîr‹
, *
ödxp
);

166 
ÁŒoc_ˇps
(
thªad
 *
td
, 
fûe
 **
ªsu…Â
, *
ªsu…fd
,

167 
Êags
, 
fûeˇps
 *
fˇps
);

168 
ÁŒoc_noö°Æl
(
thªad
 *
td
, 
fûe
 **
ªsu…Â
);

169 
_fö°Æl
(
fûedesc
 *
fdp
, 
fûe
 *
Â
, 
fd
, 
Êags
,

170 
fûeˇps
 *
fˇps
);

171 
fö°Æl
(
thªad
 *
td
, 
fûe
 *
Â
, *
ªsu…fd
, 
Êags
,

172 
fûeˇps
 *
fˇps
);

173 
fdÆloc
(
thªad
 *
td
, 
möfd
, *
ªsu…
);

174 
fdÆlo˙
(
thªad
 *
td
, 
möfd
, *
fds
, 
n
);

175 
fdcheck°d
(
thªad
 *
td
);

176 
fd˛o£
(
thªad
 *
td
, 
fûe
 *
Â
, 
idx
);

177 
fd˛o£exec
(
thªad
 *
td
);

178 
fd£tugidß„ty
(
thªad
 *
td
);

179 
fûedesc
 *
fdc›y
(fûedes¯*
fdp
);

180 
fdc›y_ªm≠≥d
(
fûedesc
 *
fdp
, c⁄° *
fds
, 
size_t
 
nfds
,

181 
fûedesc
 **
√wfdp
);

182 
fdö°Æl_ªm≠≥d
(
thªad
 *
td
, 
fûedesc
 *
fdp
);

183 
fdunsh¨e
(
thªad
 *
td
);

184 
fdesc‰ì
(
thªad
 *
td
);

185 
fdesc‰ì_ªm≠≥d
(
fûedesc
 *
fdp
);

186 
fûedesc
 *
fdöô
(fûedes¯*
fdp
, 
boﬁ
 
¥ïfûes
);

187 
fûedesc
 *
fdsh¨e
(fûedes¯*
fdp
);

188 
fûedesc_to_Àadî
 *

189 
fûedesc_to_Àadî_Æloc
(
fûedesc_to_Àadî
 *
ﬁd
,

190 
fûedesc
 *
fdp
, 
¥oc
 *
Àadî
);

191 
gëvnode
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
right•
,

192 
fûe
 **
Âp
);

193 
mou¡checkdús
(
vnode
 *
ﬁddp
, vnodê*
√wdp
);

195 
fgë_ˇp_locked
(
fûedesc
 *
fdp
, 
fd
, 
ˇp_rights_t
 *
√edright•
,

196 
fûe
 **
Âp
, 
fûeˇps
 *
haveˇp•
);

197 
fgë_ˇp
(
thªad
 *
td
, 
fd
, 
ˇp_rights_t
 *
√edright•
,

198 
fûe
 **
Âp
, 
fûeˇps
 *
haveˇp•
);

201 
fgë_u∆ocked
(
fûedesc
 *
fdp
, 
fd
, 
ˇp_rights_t
 *
√edright•
,

202 
fûe
 **
Âp
, 
£q_t
 *
£qp
);

205 
__ölöe
 
fûe
 *

206 
	$fgë_locked
(
fûedesc
 *
fdp
, 
fd
)

209 
	`FILEDESC_LOCK_ASSERT
(
fdp
);

211 i‡(
fd
 < 0 || fd > 
fdp
->
fd_œ°fûe
)

212  (
NULL
);

214  (
fdp
->
fd_ofûes
[
fd
].
fde_fûe
);

215 
	}
}

217 
__ölöe
 
fûedes˚¡
 *

218 
	$fdegë_locked
(
fûedesc
 *
fdp
, 
fd
)

220 
fûedes˚¡
 *
fde
;

222 
	`FILEDESC_LOCK_ASSERT
(
fdp
);

224 i‡(
fd
 < 0 || fd > 
fdp
->
fd_œ°fûe
)

225  (
NULL
);

227 
fde
 = &
fdp
->
fd_ofûes
[
fd
];

228 i‡(
fde
->
fde_fûe
 =
NULL
)

229  (
NULL
);

231  (
fde
);

232 
	}
}

234 #ifde‡
CAPABILITIES


235 
__ölöe
 
boﬁ


236 
	$fd_modifõd
(
fûedesc
 *
fdp
, 
fd
, 
£q_t
 
£q
)

239  (!
	`£q_c⁄si°ít
(
	`fd_£q
(
fdp
->
fd_fûes
, 
fd
), 
£q
));

240 
	}
}

244 
pwd_chdú
(
thªad
 *
td
, 
vnode
 *
vp
);

245 
pwd_chroŸ
(
thªad
 *
td
, 
vnode
 *
vp
);

246 
pwd_ísuª_dús
();

	@/usr/include/sys/filio.h

40 #i‚def 
_SYS_FILIO_H_


41 
	#_SYS_FILIO_H_


	)

43 
	~<sys/ioccom.h
>

46 
	#FIOCLEX
 
	`_IO
('f', 1Ë

	)

47 
	#FIONCLEX
 
	`_IO
('f', 2Ë

	)

48 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

49 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

50 
	#FIOASYNC
 
	`_IOW
('f', 125, Ë

	)

51 
	#FIOSETOWN
 
	`_IOW
('f', 124, Ë

	)

52 
	#FIOGETOWN
 
	`_IOR
('f', 123, Ë

	)

53 
	#FIODTYPE
 
	`_IOR
('f', 122, Ë

	)

54 
	#FIOGETLBA
 
	`_IOR
('f', 121, Ë

	)

55 
	sfiodg«me_¨g
 {

56 
	mÀn
;

57 *
	mbuf
;

59 
	#FIODGNAME
 
	`_IOW
('f', 120, 
fiodg«me_¨g
Ë

	)

60 
	#FIONWRITE
 
	`_IOR
('f', 119, Ë

	)

61 
	#FIONSPACE
 
	`_IOR
('f', 118, Ë

	)

63 
	#FIOSEEKDATA
 
	`_IOWR
('f', 97, 
off_t
Ë

	)

64 
	#FIOSEEKHOLE
 
	`_IOWR
('f', 98, 
off_t
Ë

	)

	@/usr/include/sys/hash.h

31 #i‚de‡
_SYS_HASH_H_


32 
	#_SYS_HASH_H_


	)

33 
	~<sys/ty≥s.h
>

36 #i‚def 
HASHINIT


37 
	#HASHINIT
 5381

	)

38 
	#HASHSTEP
(
x
,
c
Ë(((x << 5Ë+ xË+ (c))

	)

46 
__ölöe
 
uöt32_t


47 
	$hash32_buf
(c⁄° *
buf
, 
size_t
 
Àn
, 
uöt32_t
 
hash
)

49 c⁄° *
p
 = 
buf
;

51 
Àn
--)

52 
hash
 = 
	`HASHSTEP
(hash, *
p
++);

54  
hash
;

55 
	}
}

60 
__ölöe
 
uöt32_t


61 
	$hash32_°r
(c⁄° *
buf
, 
uöt32_t
 
hash
)

63 c⁄° *
p
 = 
buf
;

65 *
p
)

66 
hash
 = 
	`HASHSTEP
(hash, *
p
++);

68  
hash
;

69 
	}
}

74 
__ölöe
 
uöt32_t


75 
	$hash32_°∫
(c⁄° *
buf
, 
size_t
 
Àn
, 
uöt32_t
 
hash
)

77 c⁄° *
p
 = 
buf
;

79 *
p
 && 
Àn
--)

80 
hash
 = 
	`HASHSTEP
(hash, *
p
++);

82  
hash
;

83 
	}
}

90 
__ölöe
 
uöt32_t


91 
	$hash32_°ª
(c⁄° *
buf
, 
íd
, c⁄° **
ï
, 
uöt32_t
 
hash
)

93 c⁄° *
p
 = 
buf
;

95 *
p
 && (*∞!
íd
))

96 
hash
 = 
	`HASHSTEP
(hash, *
p
++);

98 i‡(
ï
)

99 *
ï
 = 
p
;

101  
hash
;

102 
	}
}

109 
__ölöe
 
uöt32_t


110 
	$hash32_°∫e
(c⁄° *
buf
, 
size_t
 
Àn
, 
íd
, c⁄° **
ï
,

111 
uöt32_t
 
hash
)

113 c⁄° *
p
 = 
buf
;

115 *
p
 && (*∞!
íd
Ë&& 
Àn
--)

116 
hash
 = 
	`HASHSTEP
(hash, *
p
++);

118 i‡(
ï
)

119 *
ï
 = 
p
;

121  
hash
;

122 
	}
}

124 #ifde‡
_KERNEL


128 
uöt32_t
 
jíkös_hash
(c⁄° *, 
size_t
, uint32_t);

129 
uöt32_t
 
jíkös_hash32
(c⁄° uöt32_à*, 
size_t
, uint32_t);

131 
uöt32_t
 
murmur3_32_hash
(c⁄° *, 
size_t
, uint32_t);

132 
uöt32_t
 
murmur3_32_hash32
(c⁄° uöt32_à*, 
size_t
, uint32_t);

	@/usr/include/sys/ioccom.h

35 #i‚def 
_SYS_IOCCOM_H_


36 
	#_SYS_IOCCOM_H_


	)

43 
	#IOCPARM_SHIFT
 13

	)

44 
	#IOCPARM_MASK
 ((1 << 
IOCPARM_SHIFT
Ë- 1Ë

	)

45 
	#IOCPARM_LEN
(
x
Ë(((xË>> 16Ë& 
IOCPARM_MASK
)

	)

46 
	#IOCBASECMD
(
x
Ë((xË& ~(
IOCPARM_MASK
 << 16))

	)

47 
	#IOCGROUP
(
x
Ë(((xË>> 8Ë& 0xff)

	)

49 
	#IOCPARM_MAX
 (1 << 
IOCPARM_SHIFT
Ë

	)

50 
	#IOC_VOID
 0x20000000

	)

51 
	#IOC_OUT
 0x40000000

	)

52 
	#IOC_IN
 0x80000000

	)

53 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

54 
	#IOC_DIRMASK
 (
IOC_VOID
|
IOC_OUT
|
IOC_IN
)

	)

56 
	#_IOC
(
öout
,
group
,
num
,
Àn
) (() \

57 ((
öout
Ë| (((
Àn
Ë& 
IOCPARM_MASK
Ë<< 16Ë| ((
group
Ë<< 8Ë| (
num
)))

	)

58 
	#_IO
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), 0)

	)

59 
	#_IOWINT
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), ())

	)

60 
	#_IOR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_OUT
, (g), (n), —))

	)

61 
	#_IOW
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_IN
, (g), (n), —))

	)

63 
	#_IOWR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_INOUT
, (g), (n), —))

	)

65 
	#_IOC_NEWLEN
(
ioc
, 
Àn
) \

66 (((~(
IOCPARM_MASK
 << 16)Ë& (
ioc
)Ë| (((
Àn
Ë& IOCPARM_MASKË<< 16))

	)

67 
	#_IOC_NEWTYPE
(
ioc
, 
ty≥
Ë
	`_IOC_NEWLEN
((ioc), —y≥))

	)

69 #ifde‡
_KERNEL


71 #i‡
deföed
(
COMPAT_FREEBSD6
Ë|| deföed(
COMPAT_FREEBSD5
) || \

72 
deföed
(
COMPAT_FREEBSD4
Ë|| 
	$deföed
(
COMPAT_43
)

73 
	#IOCPARM_IVAL
(
x
Ë(()(
öçå_t
)(*)*(
ˇddr_t
 *)(*)(x))

	)

78 
	~<sys/cdefs.h
>

80 
__BEGIN_DECLS


81 
	`io˘l
(, , ...);

82 
__END_DECLS


	@/usr/include/sys/kdb.h

31 #i‚de‡
_SYS_KDB_H_


32 
	#_SYS_KDB_H_


	)

34 
	~<machöe/£tjmp.h
>

36 
	gpcb
;

37 
	gthªad
;

38 
	gå≠‰ame
;

40 
	tdbbe_öô_f
();

41 
	tdbbe_åa˚_f
();

42 
	tdbbe_åa˚_thªad_f
(
	tthªad
 *);

43 
	tdbbe_å≠_f
(, );

45 
	skdb_dbbe
 {

46 c⁄° *
	mdbbe_«me
;

47 
dbbe_öô_f
 *
	mdbbe_öô
;

48 
dbbe_åa˚_f
 *
	mdbbe_åa˚
;

49 
dbbe_åa˚_thªad_f
 *
	mdbbe_åa˚_thªad
;

50 
dbbe_å≠_f
 *
	mdbbe_å≠
;

51 
	mdbbe_a˘ive
;

54 
	#KDB_BACKEND
(
«me
, 
öô
, 
åa˚
, 
åa˚_thªad
, 
å≠
) \

55 
kdb_dbbe
 
«me
##
_dbbe
 = { \

56 .
dbbe_«me
 = #name, \

57 .
dbbe_öô
 = 
öô
, \

58 .
dbbe_åa˚
 = 
åa˚
, \

59 .
dbbe_åa˚_thªad
 = 
åa˚_thªad
, \

60 .
dbbe_å≠
 = 
å≠
 \

62 
	`DATA_SET
(
kdb_dbbe_£t
, 
«me
##
_dbbe
)

	)

64 
u_ch¨
 
kdb_a˘ive
;

65 
debuggî_⁄_∑nic
;

66 
kdb_dbbe
 *kdb_dbbe;

67 
å≠‰ame
 *
kdb_‰ame
;

68 
pcb
 *
kdb_thr˘x
;

69 
thªad
 *
kdb_thªad
;

71 
kdb_Æt_bªak
(, *);

72 
kdb_Æt_bªak_gdb
(, *);

73 
kdb_bªak
();

74 
kdb_backåa˚
();

75 
kdb_backåa˚_thªad
(
thªad
 *);

76 
kdb_dbbe_£À˘
(const *);

77 
kdb_íãr
(const *, const *);

78 
kdb_öô
();

79 * 
kdb_jmpbuf
(
jmp_buf
);

80 
kdb_∑nic
(const *);

81 
kdb_ªboŸ
();

82 
kdb_ªíãr
();

83 
kdb_ªíãr_sûít
();

84 
pcb
 *
kdb_thr_˘x
(
thªad
 *);

85 
thªad
 *
kdb_thr_fú°
();

86 
thªad
 *
kdb_thr_‰om_pid
(
pid_t
);

87 
thªad
 *
kdb_thr_lookup
(
lwpid_t
);

88 
thªad
 *
kdb_thr_√xt
(thread *);

89 
kdb_thr_£À˘
(
thªad
 *);

90 
kdb_å≠
(, , 
å≠‰ame
 *);

100 c⁄° * vﬁ©ûê
kdb_why
;

101 
	#KDB_WHY_UNSET
 
NULL


	)

102 
	#KDB_WHY_PANIC
 "∑nic"

	)

103 
	#KDB_WHY_KASSERT
 "kas£π"

	)

104 
	#KDB_WHY_TRAP
 "å≠"

	)

105 
	#KDB_WHY_SYSCTL
 "sys˘l"

	)

106 
	#KDB_WHY_BOOTFLAGS
 "boŸÊags"

	)

107 
	#KDB_WHY_WITNESS
 "wô√ss"

	)

108 
	#KDB_WHY_VFSLOCK
 "vf¶ock"

	)

109 
	#KDB_WHY_NETGRAPH
 "√tgøph"

	)

110 
	#KDB_WHY_BREAK
 "bªak"

	)

111 
	#KDB_WHY_WATCHDOG
 "w©chdog"

	)

112 
	#KDB_WHY_CAM
 "ˇm"

	)

113 
	#KDB_WHY_NDIS
 "ndis"

	)

114 
	#KDB_WHY_ACPI
 "a˝i"

	)

115 
	#KDB_WHY_TRAPSIG
 "å≠sig"

	)

116 
	#KDB_WHY_POWERFAIL
 "powîÁû"

	)

117 
	#KDB_WHY_MAC
 "mac"

	)

118 
	#KDB_WHY_POWERPC
 "powîpc"

	)

119 
	#KDB_WHY_UNIONFS
 "uni⁄fs"

	)

120 
	#KDB_WHY_DTRACE
 "dåa˚"

	)

123 
	#KDB_REQ_DEBUGGER
 1

	)

124 
	#KDB_REQ_PANIC
 2

	)

125 
	#KDB_REQ_REBOOT
 3

	)

	@/usr/include/sys/kernel.h

47 #i‚de‡
_SYS_KERNEL_H_


48 
	#_SYS_KERNEL_H_


	)

50 
	~<sys/lökî_£t.h
>

52 #ifde‡
_KERNEL


55 
	~<sys/queue.h
>

58 
	~<sys/t¶og.h
>

63 
kî√ ame
[
MAXPATHLEN
];

65 
tick
;

66 
hz
;

67 
p§©io
;

68 
°©hz
;

69 
¥ofhz
;

70 
¥oÂrocs
;

71 vﬁ©ûê
ticks
;

89 
	esysöô_sub_id
 {

90 
	mSI_SUB_DUMMY
 = 0x0000000,

91 
	mSI_SUB_DONE
 = 0x0000001,

92 
	mSI_SUB_TUNABLES
 = 0x0700000,

93 
	mSI_SUB_COPYRIGHT
 = 0x0800001,

94 
	mSI_SUB_VM
 = 0x1000000,

95 
	mSI_SUB_KMEM
 = 0x1800000,

96 
	mSI_SUB_HYPERVISOR
 = 0x1A40000,

101 
	mSI_SUB_WITNESS
 = 0x1A80000,

102 
	mSI_SUB_MTX_POOL_DYNAMIC
 = 0x1AC0000,

103 
	mSI_SUB_LOCK
 = 0x1B00000,

104 
	mSI_SUB_EVENTHANDLER
 = 0x1C00000,

105 
	mSI_SUB_VNET_PRELINK
 = 0x1E00000,

106 
	mSI_SUB_KLD
 = 0x2000000,

107 
	mSI_SUB_CPU
 = 0x2100000,

108 
	mSI_SUB_RACCT
 = 0x2110000,

109 
	mSI_SUB_KDTRACE
 = 0x2140000,

110 
	mSI_SUB_RANDOM
 = 0x2160000,

111 
	mSI_SUB_MAC
 = 0x2180000,

112 
	mSI_SUB_MAC_POLICY
 = 0x21C0000,

113 
	mSI_SUB_MAC_LATE
 = 0x21D0000,

114 
	mSI_SUB_VNET
 = 0x21E0000,

115 
	mSI_SUB_INTRINSIC
 = 0x2200000,

116 
	mSI_SUB_VM_CONF
 = 0x2300000,

117 
	mSI_SUB_DDB_SERVICES
 = 0x2380000,

118 
	mSI_SUB_RUN_QUEUE
 = 0x2400000,

119 
	mSI_SUB_KTRACE
 = 0x2480000,

120 
	mSI_SUB_OPENSOLARIS
 = 0x2490000,

121 
	mSI_SUB_AUDIT
 = 0x24C0000,

122 
	mSI_SUB_CREATE_INIT
 = 0x2500000,

123 
	mSI_SUB_SCHED_IDLE
 = 0x2600000,

124 
	mSI_SUB_MBUF
 = 0x2700000,

125 
	mSI_SUB_INTR
 = 0x2800000,

126 
	mSI_SUB_TASKQ
 = 0x2880000,

127 #ifde‡
EARLY_AP_STARTUP


128 
	mSI_SUB_SMP
 = 0x2900000,

130 
	mSI_SUB_SOFTINTR
 = 0x2A00000,

131 
	mSI_SUB_DEVFS
 = 0x2F00000,

132 
	mSI_SUB_INIT_IF
 = 0x3000000,

133 
	mSI_SUB_NETGRAPH
 = 0x3010000,

134 
	mSI_SUB_DTRACE
 = 0x3020000,

135 
	mSI_SUB_DTRACE_PROVIDER
 = 0x3048000,

136 
	mSI_SUB_DTRACE_ANON
 = 0x308C000,

137 
	mSI_SUB_DRIVERS
 = 0x3100000,

138 
	mSI_SUB_CONFIGURE
 = 0x3800000,

139 
	mSI_SUB_VFS
 = 0x4000000,

140 
	mSI_SUB_CLOCKS
 = 0x4800000,

141 
	mSI_SUB_SYSV_SHM
 = 0x6400000,

142 
	mSI_SUB_SYSV_SEM
 = 0x6800000,

143 
	mSI_SUB_SYSV_MSG
 = 0x6C00000,

144 
	mSI_SUB_P1003_1B
 = 0x6E00000,

145 
	mSI_SUB_PSEUDO
 = 0x7000000,

146 
	mSI_SUB_EXEC
 = 0x7400000,

147 
	mSI_SUB_PROTO_BEGIN
 = 0x8000000,

148 
	mSI_SUB_PROTO_PFIL
 = 0x8100000,

149 
	mSI_SUB_PROTO_IF
 = 0x8400000,

150 
	mSI_SUB_PROTO_DOMAININIT
 = 0x8600000,

151 
	mSI_SUB_PROTO_MC
 = 0x8700000,

152 
	mSI_SUB_PROTO_DOMAIN
 = 0x8800000,

153 
	mSI_SUB_PROTO_FIREWALL
 = 0x8806000,

154 
	mSI_SUB_PROTO_IFATTACHDOMAIN
 = 0x8808000,

155 
	mSI_SUB_PROTO_END
 = 0x8ffffff,

156 
	mSI_SUB_KPROF
 = 0x9000000,

157 
	mSI_SUB_KICK_SCHEDULER
 = 0xa000000,

158 
	mSI_SUB_INT_CONFIG_HOOKS
 = 0xa800000,

159 
	mSI_SUB_ROOT_CONF
 = 0xb000000,

160 
	mSI_SUB_INTRINSIC_POST
 = 0xd000000,

161 
	mSI_SUB_SYSCALLS
 = 0xd800000,

162 
	mSI_SUB_VNET_DONE
 = 0xdc00000,

163 
	mSI_SUB_KTHREAD_INIT
 = 0xe000000,

164 
	mSI_SUB_KTHREAD_PAGE
 = 0xe400000,

165 
	mSI_SUB_KTHREAD_VM
 = 0xe800000,

166 
	mSI_SUB_KTHREAD_BUF
 = 0xea00000,

167 
	mSI_SUB_KTHREAD_UPDATE
 = 0xec00000,

168 
	mSI_SUB_KTHREAD_IDLE
 = 0xee00000,

169 #i‚de‡
EARLY_AP_STARTUP


170 
	mSI_SUB_SMP
 = 0xf000000,

172 
	mSI_SUB_RACCTD
 = 0xf100000,

173 
	mSI_SUB_LAST
 = 0xfffffff

180 
	esysöô_ñem_‹dî
 {

181 
	mSI_ORDER_FIRST
 = 0x0000000,

182 
	mSI_ORDER_SECOND
 = 0x0000001,

183 
	mSI_ORDER_THIRD
 = 0x0000002,

184 
	mSI_ORDER_FOURTH
 = 0x0000003,

185 
	mSI_ORDER_MIDDLE
 = 0x1000000,

186 
	mSI_ORDER_ANY
 = 0xfffffff

213 (*
	tsysöô_nfunc_t
)(*);

214 (*
	tsysöô_cfunc_t
)(const *);

216 
	ssysöô
 {

217 
sysöô_sub_id
 
subsy°em
;

218 
sysöô_ñem_‹dî
 
‹dî
;

219 
sysöô_cfunc_t
 
func
;

220 c⁄° *
ud©a
;

235 #ifde‡
TSLOG


236 
	ssysöô_t¶og
 {

237 
sysöô_cfunc_t
 
func
;

238 c⁄° * 
d©a
;

239 c⁄° * 
«me
;

241 
ölöe
 

242 
	$sysöô_t¶og_shim
(c⁄° * 
d©a
)

244 c⁄° 
sysöô_t¶og
 * 
x
 = 
d©a
;

246 
	`TSRAW
(
cuπhªad
, 
TS_ENTER
, "SYSINIT", 
x
->
«me
);

247 (
x
->
func
)(x->
d©a
);

248 
	`TSRAW
(
cuπhªad
, 
TS_EXIT
, "SYSINIT", 
x
->
«me
);

249 
	}
}

250 
	#C_SYSINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

251 
sysöô_t¶og
 
uniquifõr
 ## 
_sys_öô_t¶og
 = { \

252 
func
, \

253 (
idít
), \

256 
sysöô
 
uniquifõr
 ## 
_sys_öô
 = { \

257 
subsy°em
, \

258 
‹dî
, \

259 
sysöô_t¶og_shim
, \

260 &
uniquifõr
 ## 
_sys_öô_t¶og
 \

262 
	`DATA_WSET
(
sysöô_£t
,
uniquifõr
 ## 
_sys_öô
)

	)

264 
	#C_SYSINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

265 
sysöô
 
uniquifõr
 ## 
_sys_öô
 = { \

266 
subsy°em
, \

267 
‹dî
, \

268 
func
, \

269 (
idít
) \

271 
	`DATA_WSET
(
sysöô_£t
,
uniquifõr
 ## 
_sys_öô
)

	)

274 
	#SYSINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

275 
	`C_SYSINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, \

276 (
sysöô_cfunc_t
)(
sysöô_nfunc_t
)
func
, (*)(
idít
))

	)

281 
	#C_SYSUNINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

282 
sysöô
 
uniquifõr
 ## 
_sys_unöô
 = { \

283 
subsy°em
, \

284 
‹dî
, \

285 
func
, \

286 (
idít
) \

288 
	`DATA_WSET
(
sysunöô_£t
,
uniquifõr
 ## 
_sys_unöô
)

	)

290 
	#SYSUNINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

291 
	`C_SYSUNINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, \

292 (
sysöô_cfunc_t
)(
sysöô_nfunc_t
)
func
, (*)(
idít
))

	)

294 
sysöô_add
(
sysöô
 **
£t
, sysöô **
£t_íd
);

309 
tu«bÀ_öt_öô
(*);

310 
	stu«bÀ_öt
 {

311 c⁄° *
	m∑th
;

312 *
	mv¨
;

314 
	#TUNABLE_INT
(
∑th
, 
v¨
) \

315 
tu«bÀ_öt
 
	`__CONCAT
(
__tu«bÀ_öt_
, 
__LINE__
) = { \

316 (
∑th
), \

317 (
v¨
), \

319 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

320 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_öt_öô
, \

321 &
	`__CONCAT
(
__tu«bÀ_öt_
, 
__LINE__
))

	)

323 
	#TUNABLE_INT_FETCH
(
∑th
, 
v¨
Ë
	`gëív_öt
(’©h), (v¨))

	)

328 
tu«bÀ_l⁄g_öô
(*);

329 
	stu«bÀ_l⁄g
 {

330 c⁄° *
	m∑th
;

331 *
	mv¨
;

333 
	#TUNABLE_LONG
(
∑th
, 
v¨
) \

334 
tu«bÀ_l⁄g
 
	`__CONCAT
(
__tu«bÀ_l⁄g_
, 
__LINE__
) = { \

335 (
∑th
), \

336 (
v¨
), \

338 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

339 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_l⁄g_öô
,\

340 &
	`__CONCAT
(
__tu«bÀ_l⁄g_
, 
__LINE__
))

	)

342 
	#TUNABLE_LONG_FETCH
(
∑th
, 
v¨
Ë
	`gëív_l⁄g
(’©h), (v¨))

	)

347 
tu«bÀ_ul⁄g_öô
(*);

348 
	stu«bÀ_ul⁄g
 {

349 c⁄° *
	m∑th
;

350 *
	mv¨
;

352 
	#TUNABLE_ULONG
(
∑th
, 
v¨
) \

353 
tu«bÀ_ul⁄g
 
	`__CONCAT
(
__tu«bÀ_ul⁄g_
, 
__LINE__
) = { \

354 (
∑th
), \

355 (
v¨
), \

357 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

358 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_ul⁄g_öô
, \

359 &
	`__CONCAT
(
__tu«bÀ_ul⁄g_
, 
__LINE__
))

	)

361 
	#TUNABLE_ULONG_FETCH
(
∑th
, 
v¨
Ë
	`gëív_ul⁄g
(’©h), (v¨))

	)

366 
tu«bÀ_öt64_öô
(*);

367 
	stu«bÀ_öt64
 {

368 c⁄° *
	m∑th
;

369 
öt64_t
 *
	mv¨
;

371 
	#TUNABLE_INT64
(
∑th
, 
v¨
) \

372 
tu«bÀ_öt64
 
	`__CONCAT
(
__tu«bÀ_öt64_
, 
__LINE__
) = { \

373 (
∑th
), \

374 (
v¨
), \

376 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

377 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_öt64_öô
, \

378 &
	`__CONCAT
(
__tu«bÀ_öt64_
, 
__LINE__
))

	)

380 
	#TUNABLE_INT64_FETCH
(
∑th
, 
v¨
Ë
	`gëív_öt64
(’©h), (v¨))

	)

385 
tu«bÀ_uöt64_öô
(*);

386 
	stu«bÀ_uöt64
 {

387 c⁄° *
	m∑th
;

388 
uöt64_t
 *
	mv¨
;

390 
	#TUNABLE_UINT64
(
∑th
, 
v¨
) \

391 
tu«bÀ_uöt64
 
	`__CONCAT
(
__tu«bÀ_uöt64_
, 
__LINE__
) = { \

392 (
∑th
), \

393 (
v¨
), \

395 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

396 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_uöt64_öô
, \

397 &
	`__CONCAT
(
__tu«bÀ_uöt64_
, 
__LINE__
))

	)

399 
	#TUNABLE_UINT64_FETCH
(
∑th
, 
v¨
Ë
	`gëív_uöt64
(’©h), (v¨))

	)

404 
tu«bÀ_quad_öô
(*);

405 
	stu«bÀ_quad
 {

406 c⁄° *
	m∑th
;

407 
quad_t
 *
	mv¨
;

409 
	#TUNABLE_QUAD
(
∑th
, 
v¨
) \

410 
tu«bÀ_quad
 
	`__CONCAT
(
__tu«bÀ_quad_
, 
__LINE__
) = { \

411 (
∑th
), \

412 (
v¨
), \

414 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

415 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_quad_öô
, \

416 &
	`__CONCAT
(
__tu«bÀ_quad_
, 
__LINE__
))

	)

418 
	#TUNABLE_QUAD_FETCH
(
∑th
, 
v¨
Ë
	`gëív_quad
(’©h), (v¨))

	)

420 
tu«bÀ_°r_öô
(*);

421 
	stu«bÀ_°r
 {

422 c⁄° *
	m∑th
;

423 *
	mv¨
;

424 
	msize
;

426 
	#TUNABLE_STR
(
∑th
, 
v¨
, 
size
) \

427 
tu«bÀ_°r
 
	`__CONCAT
(
__tu«bÀ_°r_
, 
__LINE__
) = { \

428 (
∑th
), \

429 (
v¨
), \

430 (
size
), \

432 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

433 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_°r_öô
, \

434 &
	`__CONCAT
(
__tu«bÀ_°r_
, 
__LINE__
))

	)

436 
	#TUNABLE_STR_FETCH
(
∑th
, 
v¨
, 
size
) \

437 
	`gëív_°rög
((
∑th
), (
v¨
), (
size
))

	)

439 (*
	tich_func_t
)(*
	t_¨g
);

441 
	söå_c⁄fig_hook
 {

442 
	`TAILQ_ENTRY
(
öå_c⁄fig_hook
Ë
ich_löks
;

443 
ich_func_t
 
ich_func
;

444 *
ich_¨g
;

447 
	`c⁄fig_öåhook_e°ablish
(
öå_c⁄fig_hook
 *
hook
);

448 
	`c⁄fig_öåhook_di£°ablish
(
öå_c⁄fig_hook
 *
hook
);

449 
	`c⁄fig_öåhook_⁄eshŸ
(
ich_func_t
 
_func
, *
_¨g
);

	@/usr/include/sys/ktr.h

38 #i‚de‡
_SYS_KTR_H_


39 
	#_SYS_KTR_H_


	)

41 
	~<sys/kå_˛ass.h
>

47 
	#KTR_VERSION
 2

	)

49 
	#KTR_PARMS
 6

	)

51 #i‚de‡
LOCORE


53 
	~<sys/∑øm.h
>

54 
	~<sys/_˝u£t.h
>

56 
	skå_íåy
 {

57 
u_öt64_t
 
	mkå_time°amp
;

58 
	mkå_˝u
;

59 
	mkå_löe
;

60 c⁄° *
	mkå_fûe
;

61 c⁄° *
	mkå_desc
;

62 
thªad
 *
	mkå_thªad
;

63 
u_l⁄g
 
	mkå_∑rms
[
KTR_PARMS
];

66 
˝u£t_t
 
kå_˝umask
;

67 
uöt64_t
 
kå_mask
;

68 
kå_íåõs
;

69 
kå_vîbo£
;

71 vﬁ©ûê
kå_idx
;

72 
kå_íåy
 *
kå_buf
;

74 #ifde‡
KTR


76 
kå_åa˚poöt
(
uöt64_t
 
mask
, c⁄° *
fûe
, 
löe
,

77 c⁄° *
f‹m©
, 
u_l⁄g
 
¨g1
, u_l⁄g 
¨g2
, u_l⁄g 
¨g3
,

78 
u_l⁄g
 
¨g4
, u_l⁄g 
¨g5
, u_l⁄g 
¨g6
);

80 
	#CTR6
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
) do { \

81 i‡(
KTR_COMPILE
 & (
m
)) \

82 
	`kå_åa˚poöt
((
m
), 
__FILE__
, 
__LINE__
, 
f‹m©
, \

83 (
u_l⁄g
)(
p1
), (u_l⁄g)(
p2
), (u_l⁄g)(
p3
), \

84 (
u_l⁄g
)(
p4
), (u_l⁄g)(
p5
), (u_l⁄g)(
p6
)); \

85 } 0)

	)

86 
	#CTR0
(
m
, 
f‹m©
Ë
	`CTR6
(m, f‹m©, 0, 0, 0, 0, 0, 0)

	)

87 
	#CTR1
(
m
, 
f‹m©
, 
p1
Ë
	`CTR6
(m, f‹m©,Ö1, 0, 0, 0, 0, 0)

	)

88 
	#CTR2
(
m
, 
f‹m©
, 
p1
, 
p2
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2, 0, 0, 0, 0)

	)

89 
	#CTR3
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3, 0, 0, 0)

	)

90 
	#CTR4
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3,Ö4, 0, 0)

	)

91 
	#CTR5
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3,Ö4,Ö5, 0)

	)

93 
	#CTR0
(
m
, 
d
Ë()0

	)

94 
	#CTR1
(
m
, 
d
, 
p1
Ë()0

	)

95 
	#CTR2
(
m
, 
d
, 
p1
, 
p2
Ë()0

	)

96 
	#CTR3
(
m
, 
d
, 
p1
, 
p2
, 
p3
Ë()0

	)

97 
	#CTR4
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë()0

	)

98 
	#CTR5
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë()0

	)

99 
	#CTR6
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë()0

	)

102 
	#TR0
(
d
Ë
	`CTR0
(
KTR_GEN
, d)

	)

103 
	#TR1
(
d
, 
p1
Ë
	`CTR1
(
KTR_GEN
, d,Ö1)

	)

104 
	#TR2
(
d
, 
p1
, 
p2
Ë
	`CTR2
(
KTR_GEN
, d,Ö1,Ö2)

	)

105 
	#TR3
(
d
, 
p1
, 
p2
, 
p3
Ë
	`CTR3
(
KTR_GEN
, d,Ö1,Ö2,Ö3)

	)

106 
	#TR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR4
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4)

	)

107 
	#TR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR5
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4,Ö5)

	)

108 
	#TR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë
	`CTR6
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4,Ö5,Ö6)

	)

131 
	#KTR_ATTR_LINKED
 "lökedto:\"%s\""

	)

132 
	#KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
) \

133 "KTRGRAPH group:\"" 
egroup
 "\", id:\"%s\", " 
ëy≥
 ",áâribuãs: "

	)

135 
	#KTR_EVENT0
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
) \

136 
	`CTR2
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë"n⁄e", idít, 
ed©
)

	)

137 
	#KTR_EVENT1
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
) \

138 
	`CTR3
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
, idít, 
ed©
, (
v0
))

	)

139 
	#KTR_EVENT2
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
, 
a1
, 
v1
) \

140 
	`CTR4
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
, \

141 
idít
, 
ed©
, (
v0
), (
v1
))

	)

142 
	#KTR_EVENT3
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
)\

143 
	`CTR5
(
m
,
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
 ", " 
a2
, \

144 
idít
, 
ed©
, (
v0
), (
v1
), (
v2
))

	)

145 
	#KTR_EVENT4
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, \

146 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
) \

147 
	`CTR6
(
m
,
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
 ", " 
a2
 ", " 
a3
,\

148 
idít
, 
ed©
, (
v0
), (
v1
), (
v2
), (
v3
))

	)

153 
	#KTR_STATE0
(
m
, 
egroup
, 
idít
, 
°©e
) \

154 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
)

	)

155 
	#KTR_STATE1
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
) \

156 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
, 
a0
, (
v0
))

	)

157 
	#KTR_STATE2
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
) \

158 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

159 
	#KTR_STATE3
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

160 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "state:\"%s\"", \

161 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

162 
	#KTR_STATE4
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

163 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "state:\"%s\"", \

164 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

170 
	#KTR_COUNTER0
(
m
, 
egroup
, 
idít
, 
cou¡î
) \

171 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
)

	)

172 
	#KTR_COUNTER1
(
m
, 
egroup
, 
idít
, 
ed©
, 
a0
, 
v0
) \

173 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
, 
a0
, (
v0
))

	)

174 
	#KTR_COUNTER2
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
) \

175 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

176 
	#KTR_COUNTER3
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

177 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "counter:%d", \

178 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

179 
	#KTR_COUNTER4
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

180 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "counter:%d", \

181 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

186 
	#KTR_POINT0
(
m
, 
egroup
, 
idít
, 
poöt
) \

187 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
)

	)

188 
	#KTR_POINT1
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
) \

189 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, 
a0
, (
v0
))

	)

190 
	#KTR_POINT2
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
) \

191 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

192 
	#KTR_POINT3
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

193 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, \

194 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

195 
	#KTR_POINT4
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

196 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "point:\"%s\"", \

197 
poöt
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

208 
	#KTR_START0
(
m
, 
egroup
, 
idít
, 
key
) \

209 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
)

	)

210 
	#KTR_START1
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
) \

211 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, 
a0
, (
v0
))

	)

212 
	#KTR_START2
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
) \

213 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, \

214 
a0
, (
v0
), 
a1
, (
v1
))

	)

215 
	#KTR_START3
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
)\

216 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, \

217 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

218 
	#KTR_START4
(
m
, 
egroup
, 
idít
, 
key
, \

219 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
) \

220 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, \

221 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

228 
	#KTR_STOP0
(
m
, 
egroup
, 
idít
, 
key
) \

229 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
)

	)

230 
	#KTR_STOP1
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
) \

231 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, 
a0
, (
v0
))

	)

232 
	#KTR_STOP2
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
) \

233 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, \

234 
a0
, (
v0
), 
a1
, (
v1
))

	)

235 
	#KTR_STOP3
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
)\

236 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, \

237 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

238 
	#KTR_STOP4
(
m
, 
egroup
, 
idít
, \

239 
key
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
) \

240 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, \

241 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

249 #i‡(
KTR_COMPILE
 & 
KTR_INIT
) != 0

250 
	#ITR0
(
d
Ë
	`CTR0
(
KTR_INIT
, d)

	)

251 
	#ITR1
(
d
, 
p1
Ë
	`CTR1
(
KTR_INIT
, d,Ö1)

	)

252 
	#ITR2
(
d
, 
p1
, 
p2
Ë
	`CTR2
(
KTR_INIT
, d,Ö1,Ö2)

	)

253 
	#ITR3
(
d
, 
p1
, 
p2
, 
p3
Ë
	`CTR3
(
KTR_INIT
, d,Ö1,Ö2,Ö3)

	)

254 
	#ITR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR4
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4)

	)

255 
	#ITR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR5
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4,Ö5)

	)

256 
	#ITR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë
	`CTR6
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4,Ö5,Ö6)

	)

258 
	#ITR0
(
d
)

	)

259 
	#ITR1
(
d
, 
p1
)

	)

260 
	#ITR2
(
d
, 
p1
, 
p2
)

	)

261 
	#ITR3
(
d
, 
p1
, 
p2
, 
p3
)

	)

262 
	#ITR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
)

	)

263 
	#ITR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
)

	)

264 
	#ITR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
)

	)

	@/usr/include/sys/libkern.h

35 #i‚de‡
_SYS_LIBKERN_H_


36 
	#_SYS_LIBKERN_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/ty≥s.h
>

40 #ifde‡
_KERNEL


41 
	~<sys/sy°m.h
>

44 #i‚def 
LIBKERN_INLINE


45 
	#LIBKERN_INLINE
 
__ölöe


	)

46 
	#LIBKERN_BODY


	)

50 
u_ch¨
 c⁄° 
bcd2bö_d©a
[];

51 
u_ch¨
 c⁄° 
bö2bcd_d©a
[];

52 c⁄° 
hex2ascii_d©a
[];

54 
	#LIBKERN_LEN_BCD2BIN
 154

	)

55 
	#LIBKERN_LEN_BIN2BCD
 100

	)

56 
	#LIBKERN_LEN_HEX2ASCII
 36

	)

58 
ölöe
 
u_ch¨


59 
	$bcd2bö
(
bcd
)

62 
	`KASSERT
(
bcd
 >0 && bcd < 
LIBKERN_LEN_BCD2BIN
,

63 ("övÆid bcd %d", 
bcd
));

64  (
bcd2bö_d©a
[
bcd
]);

65 
	}
}

67 
ölöe
 
u_ch¨


68 
	$bö2bcd
(
bö
)

71 
	`KASSERT
(
bö
 >0 && bö < 
LIBKERN_LEN_BIN2BCD
,

72 ("övÆid bö %d", 
bö
));

73  (
bö2bcd_d©a
[
bö
]);

74 
	}
}

76 
ölöe
 

77 
	$hex2ascii
(
hex
)

80 
	`KASSERT
(
hex
 >0 && hex < 
LIBKERN_LEN_HEX2ASCII
,

81 ("övÆid hex %d", 
hex
));

82  (
hex2ascii_d©a
[
hex
]);

83 
	}
}

85 
ölöe
 
boﬁ


86 
	$vÆidbcd
(
bcd
)

89  (
bcd
 =0 || (bcd > 0 && bcd <0x99 && 
bcd2bö_d©a
[bcd] != 0));

90 
	}
}

92 
__ölöe
 
	$imax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

93 
__ölöe
 
	$imö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

94 
__ölöe
 
	$lmax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

95 
__ölöe
 
	$lmö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

96 
__ölöe
 
u_öt
 
	$max
(
u_öt
 
a
, u_öà
b
Ë{  (®> b ?á : b); 
	}
}

97 
__ölöe
 
u_öt
 
	$mö
(
u_öt
 
a
, u_öà
b
Ë{  (®< b ?á : b); 
	}
}

98 
__ölöe
 
quad_t
 
	$qmax
(
quad_t
 
a
, quad_à
b
Ë{  (®> b ?á : b); 
	}
}

99 
__ölöe
 
quad_t
 
	$qmö
(
quad_t
 
a
, quad_à
b
Ë{  (®< b ?á : b); 
	}
}

100 
__ölöe
 
u_quad_t
 
	$uqmax
(
u_quad_t
 
a
, u_quad_à
b
Ë{  (®> b ?á : b); 
	}
}

101 
__ölöe
 
u_quad_t
 
	$uqmö
(
u_quad_t
 
a
, u_quad_à
b
Ë{  (®< b ?á : b); 
	}
}

102 
__ölöe
 
u_l⁄g
 
	$ulmax
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®> b ?á : b); 
	}
}

103 
__ölöe
 
u_l⁄g
 
	$ulmö
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®< b ?á : b); 
	}
}

104 
__ölöe
 
__uötmax_t
 
	$ummax
(
__uötmax_t
 
a
, __uötmax_à
b
)

107  (
a
 > 
b
 ?á : b);

108 
	}
}

109 
__ölöe
 
__uötmax_t
 
	$ummö
(
__uötmax_t
 
a
, __uötmax_à
b
)

112  (
a
 < 
b
 ?á : b);

113 
	}
}

114 
__ölöe
 
off_t
 
	$omax
(
off_t
 
a
, off_à
b
Ë{  (®> b ?á : b); 
	}
}

115 
__ölöe
 
off_t
 
	$omö
(
off_t
 
a
, off_à
b
Ë{  (®< b ?á : b); 
	}
}

117 
__ölöe
 
	$abs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

118 
__ölöe
 
	$œbs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

119 
__ölöe
 
quad_t
 
	$qabs
(
quad_t
 
a
Ë{  (®< 0 ? -®:á); 
	}
}

121 
	#ARC4_ENTR_NONE
 0

	)

122 
	#ARC4_ENTR_HAVE
 1

	)

123 
	#ARC4_ENTR_SEED
 2

	)

124 
¨c4ønd_öi£ed_°©e
;

127 
	gmÆloc_ty≥
;

128 
uöt32_t
 
¨c4øndom
();

129 
¨c4øndom_buf
(*, 
size_t
);

130 
¨c4ønd
(*, 
u_öt
, );

131 
timögß„_bcmp
(c⁄° *, c⁄° *, 
size_t
);

132 *
b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

133 
size_t
, (*)(const *, const *));

134 #i‚def 
HAVE_INLINE_FFS


135 
	`ffs
();

137 #i‚def 
HAVE_INLINE_FFSL


138 
	`ff¶
();

140 #i‚def 
HAVE_INLINE_FFSLL


141 
	`ff¶l
();

143 #i‚def 
HAVE_INLINE_FLS


144 
	`Ês
();

146 #i‚def 
HAVE_INLINE_FLSL


147 
	`Ê¶
();

149 #i‚def 
HAVE_INLINE_FLSLL


150 
	`Ê¶l
();

152 
	#bôcou¡64
(
x
Ë
	`__bôcou¡64
((
uöt64_t
)(x))

	)

153 
	#bôcou¡32
(
x
Ë
	`__bôcou¡32
((
uöt32_t
)(x))

	)

154 
	#bôcou¡16
(
x
Ë
	`__bôcou¡16
((
uöt16_t
)(x))

	)

155 
	#bôcou¡l
(
x
Ë
	`__bôcou¡l
((
u_l⁄g
)(x))

	)

156 
	#bôcou¡
(
x
Ë
	`__bôcou¡
((
u_öt
)(x))

	)

158 
	`‚m©ch
(const *, const *, );

159 
	`locc
(, *, 
u_öt
);

160 *
	`memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
);

161 *
	`memcchr
(c⁄° *
s
, 
c
, 
size_t
 
n
);

162 *
	`memmem
(c⁄° *
l
, 
size_t
 
l_Àn
, c⁄° *
s
, size_à
s_Àn
);

163 
	`qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
,

164 (*
com∑r
)(const *, const *));

165 
	`qs‹t_r
(*
ba£
, 
size_t
 
nmemb
, size_à
size
, *
thunk
,

166 (*
com∑r
)(*, const *, const *));

167 
u_l⁄g
 
	`øndom
();

168 
	`sˇnc
(
u_öt
, c⁄° 
u_ch¨
 *, const u_char *, );

169 
	`§™dom
(
u_l⁄g
);

170 
	`°rˇ£cmp
(const *, const *);

171 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

172 *
	`°rchr
(const *, );

173 
	`°rcmp
(const *, const *);

174 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

175 
size_t
 
	$°rc•n
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
__puª
;

176 *
	`°rdup
(c⁄° *
__ª°ri˘
, 
mÆloc_ty≥
 *);

177 *
	`°∫ˇt
(*, c⁄° *, 
size_t
);

178 *
	`°∫dup
(c⁄° *
__ª°ri˘
, 
size_t
, 
mÆloc_ty≥
 *);

179 
size_t
 
	`°æˇt
(*, const *, size_t);

180 
size_t
 
	`°æ˝y
(*, const *, size_t);

181 
size_t
 
	`°æí
(const *);

182 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

183 
	`°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

184 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

185 
size_t
 
	`°∫Àn
(const *, size_t);

186 *
	`°ºchr
(const *, );

187 *
	`°r£p
(**, c⁄° *
dñim
);

188 
size_t
 
	`°r•n
(const *, const *);

189 *
	`°r°r
(const *, const *);

190 
	`°rvÆid
(c⁄° *, 
size_t
);

192 c⁄° 
uöt32_t
 
¸c32_èb
[];

194 
__ölöe
 
uöt32_t


195 
	$¸c32_øw
(c⁄° *
buf
, 
size_t
 
size
, 
uöt32_t
 
¸c
)

197 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
buf
;

199 
size
--)

200 
¸c
 = 
¸c32_èb
[(¸¯^ *
p
++) & 0xFF] ^ (crc >> 8);

201  (
¸c
);

202 
	}
}

204 
__ölöe
 
uöt32_t


205 
	$¸c32
(c⁄° *
buf
, 
size_t
 
size
)

207 
uöt32_t
 
¸c
;

209 
¸c
 = 
	`¸c32_øw
(
buf
, 
size
, ~0U);

210  (
¸c
 ^ ~0U);

211 
	}
}

213 
uöt32_t


214 
ˇlcuœã_¸c32c
(
uöt32_t
 
¸c32c
, c⁄° *
buf„r
,

215 
Àngth
);

216 #ifde‡
_KERNEL


217 #i‡
deföed
(
__amd64__
Ë|| deföed(
__i386__
)

218 
uöt32_t
 
s£42_¸c32c
(uint32_t, const *, );

220 #i‡
deföed
(
__Ørch64__
)

221 
uöt32_t
 
¨mv8_¸c32c
(uint32_t, const *, );

225 
__ölöe
 *

226 
	$ödex
(c⁄° *
p
, 
ch
)

229  (
	`°rchr
(
p
, 
ch
));

230 
	}
}

232 
__ölöe
 *

233 
	$rödex
(c⁄° *
p
, 
ch
)

236  (
	`°ºchr
(
p
, 
ch
));

237 
	}
}

240 
	#FNM_NOMATCH
 1

	)

243 
	#FNM_NOESCAPE
 0x01

	)

244 
	#FNM_PATHNAME
 0x02

	)

245 
	#FNM_PERIOD
 0x04

	)

246 
	#FNM_LEADING_DIR
 0x08

	)

247 
	#FNM_CASEFOLD
 0x10

	)

248 
	#FNM_IGNORECASE
 
FNM_CASEFOLD


	)

249 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

	@/usr/include/sys/limits.h

34 #i‚de‡
_SYS_LIMITS_H_


35 
	#_SYS_LIMITS_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<machöe/_limôs.h
>

40 
	#CHAR_BIT
 
__CHAR_BIT


	)

42 
	#SCHAR_MAX
 
__SCHAR_MAX


	)

43 
	#SCHAR_MIN
 
__SCHAR_MIN


	)

45 
	#UCHAR_MAX
 
__UCHAR_MAX


	)

47 #ifde‡
__CHAR_UNSIGNED__


48 
	#CHAR_MAX
 
UCHAR_MAX


	)

49 
	#CHAR_MIN
 0

	)

51 
	#CHAR_MAX
 
SCHAR_MAX


	)

52 
	#CHAR_MIN
 
SCHAR_MIN


	)

55 
	#USHRT_MAX
 
__USHRT_MAX


	)

56 
	#SHRT_MAX
 
__SHRT_MAX


	)

57 
	#SHRT_MIN
 
__SHRT_MIN


	)

59 
	#UINT_MAX
 
__UINT_MAX


	)

60 
	#INT_MAX
 
__INT_MAX


	)

61 
	#INT_MIN
 
__INT_MIN


	)

63 
	#ULONG_MAX
 
__ULONG_MAX


	)

64 
	#LONG_MAX
 
__LONG_MAX


	)

65 
	#LONG_MIN
 
__LONG_MIN


	)

67 #ifde‡
__LONG_LONG_SUPPORTED


68 
	#ULLONG_MAX
 
__ULLONG_MAX


	)

69 
	#LLONG_MAX
 
__LLONG_MAX


	)

70 
	#LLONG_MIN
 
__LLONG_MIN


	)

73 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


74 
	#SSIZE_MAX
 
__SSIZE_MAX


	)

77 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


78 
	#SIZE_T_MAX
 
__SIZE_T_MAX


	)

80 
	#OFF_MAX
 
__OFF_MAX


	)

81 
	#OFF_MIN
 
__OFF_MIN


	)

84 #i‡
__BSD_VISIBLE


85 
	#GID_MAX
 
UINT_MAX


	)

86 
	#UID_MAX
 
UINT_MAX


	)

88 
	#UQUAD_MAX
 (
__UQUAD_MAX
Ë

	)

89 
	#QUAD_MAX
 (
__QUAD_MAX
Ë

	)

90 
	#QUAD_MIN
 (
__QUAD_MIN
Ë

	)

93 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

94 
	#LONG_BIT
 
__LONG_BIT


	)

95 
	#WORD_BIT
 
__WORD_BIT


	)

98 #i‡
__POSIX_VISIBLE


99 
	#MQ_PRIO_MAX
 64

	)

	@/usr/include/sys/linker.h

31 #i‚de‡
_SYS_LINKER_H_


32 
	#_SYS_LINKER_H_


	)

34 #ifde‡
_KERNEL


36 
	~<machöe/ñf.h
>

37 
	~<sys/kobj.h
>

39 #ifde‡
MALLOC_DECLARE


40 
MALLOC_DECLARE
(
M_LINKER
);

43 
	gmod_dïíd
;

48 
lökî_fûe
* 
	tlökî_fûe_t
;

49 
	$TAILQ_HEAD
(, 
	tlökî_fûe
Ë
	tlökî_fûe_li°_t
;

51 
ˇddr_t
 
	tlökî_sym_t
;

52 
c_ˇddr_t
 
	tc_lökî_sym_t
;

53 (*
	tlökî_fun˘i⁄_«me_ˇŒback_t
)(const *, *);

58 
	slökî_symvÆ
 {

59 c⁄° * 
«me
;

60 
ˇddr_t
 
vÆue
;

61 
size_t
 
size
;

62 } 
	tlökî_symvÆ_t
;

64 (*
	tlökî_fun˘i⁄_«mevÆ_ˇŒback_t
)(
	tlökî_fûe_t
, , 
	tlökî_symvÆ_t
 *, *);

66 
	scomm⁄_symbﬁ
 {

67 
	`STAILQ_ENTRY
(
comm⁄_symbﬁ
Ë
lök
;

68 * 
«me
;

69 
ˇddr_t
 
addªss
;

72 
	slökî_fûe
 {

73 
KOBJ_FIELDS
;

74 
ªfs
;

75 
u£ºefs
;

76 
Êags
;

77 
	#LINKER_FILE_LINKED
 0x1

	)

78 
	#LINKER_FILE_MODULES
 0x2

	)

79 
	`TAILQ_ENTRY
(
lökî_fûe
Ë
lök
;

80 * 
fûíame
;

81 * 
∑th«me
;

82 
id
;

83 
ˇddr_t
 
addªss
;

84 
size_t
 
size
;

85 
ˇddr_t
 
˘‹s_addr
;

86 
size_t
 
˘‹s_size
;

87 
ndïs
;

88 
lökî_fûe_t
* 
dïs
;

89 
	`STAILQ_HEAD
(, 
comm⁄_symbﬁ
Ë
comm⁄
;

90 
	`TAILQ_HEAD
(, 
moduÀ
Ë
moduÀs
;

91 
	`TAILQ_ENTRY
(
lökî_fûe
Ë
lﬂded
;

92 
lﬂd˙t
;

98 
√«bÀd
;

99 
fbt_√¡rõs
;

105 
lökî_˛ass
 *
	tlökî_˛ass_t
;

106 
	$TAILQ_HEAD
(, 
	tlökî_˛ass
Ë
	tlökî_˛ass_li°_t
;

108 
	slökî_˛ass
 {

109 
KOBJ_CLASS_FIELDS
;

110 
	`TAILQ_ENTRY
(
lökî_˛ass
Ë
lök
;

116 
	tlökî_¥ediˇã_t
(
	tlökî_fûe_t
, *);

121 
lökî_fûe_t
 
lökî_kî√l_fûe
;

126 
	`lökî_ª„ªn˚_moduÀ
(c⁄° * 
_mod«me
, 
mod_dïíd
 *
_vîöfo
,

127 
lökî_fûe_t
* 
_ªsu…
);

134 
	`lökî_ªÀa£_moduÀ
(c⁄° *
_mod«me
, 
mod_dïíd
 *
_vîöfo
,

135 
lökî_fûe_t
 
_fûe
);

142 
	`lökî_fûe_f‹óch
(
lökî_¥ediˇã_t
 *
_¥ediˇã
, *
_c⁄ãxt
);

148 
ˇddr_t
 
	`lökî_fûe_lookup_symbﬁ
(
lökî_fûe_t
 
_fûe
, c⁄° * 
_«me
,

149 
_dïs
);

156 
	`lökî_fûe_lookup_£t
(
lökî_fûe_t
 
_fûe
, c⁄° *
_«me
,

157 *
_°¨t
, *
_°›
, *
_cou¡
);

162 
	`lökî_fûe_fun˘i⁄_li°Æl
(
lökî_fûe_t
,

163 
lökî_fun˘i⁄_«mevÆ_ˇŒback_t
, *);

168 
	`lökî_add_˛ass
(
lökî_˛ass_t
 
_˛s
);

169 
	`lökî_fûe_u∆ﬂd
(
lökî_fûe_t
 
_fûe
, 
Êags
);

170 
	`lökî_lﬂd_dïídícõs
(
lökî_fûe_t
 
_lf
);

171 
lökî_fûe_t
 
	`lökî_make_fûe
(c⁄° * 
_fûíame
, 
lökî_˛ass_t
 
_˛s
);

176 
	`lökî_ddb_lookup
(c⁄° *
_sym°r
, 
c_lökî_sym_t
 *
_sym
);

177 
	`lökî_ddb_£¨ch_symbﬁ
(
ˇddr_t
 
_vÆue
, 
c_lökî_sym_t
 *
_sym
,

178 *
_difÂ
);

179 
	`lökî_ddb_symbﬁ_vÆues
(
c_lökî_sym_t
 
_sym
, 
lökî_symvÆ_t
 *
_symvÆ
);

180 
	`lökî_ddb_£¨ch_symbﬁ_«me
(
ˇddr_t
 
vÆue
, *
buf
, 
u_öt
 
buÊí
,

181 *
off£t
);

186 
	`lökî_£¨ch_symbﬁ_«me
(
ˇddr_t
 
vÆue
, *
buf
, 
u_öt
 
buÊí
,

187 *
off£t
);

191 *
	`lökî_hwpmc_li°_obje˘s
();

198 
	#MODINFO_END
 0x0000

	)

199 
	#MODINFO_NAME
 0x0001

	)

200 
	#MODINFO_TYPE
 0x0002

	)

201 
	#MODINFO_ADDR
 0x0003

	)

202 
	#MODINFO_SIZE
 0x0004

	)

203 
	#MODINFO_EMPTY
 0x0005

	)

204 
	#MODINFO_ARGS
 0x0006

	)

205 
	#MODINFO_METADATA
 0x8000

	)

207 
	#MODINFOMD_AOUTEXEC
 0x0001

	)

208 
	#MODINFOMD_ELFHDR
 0x0002

	)

209 
	#MODINFOMD_SSYM
 0x0003

	)

210 
	#MODINFOMD_ESYM
 0x0004

	)

211 
	#MODINFOMD_DYNAMIC
 0x0005

	)

213 #i‡!
	`deföed
(
__•¨c64__
Ë&& !deföed(
__powîpc__
)

214 
	#MODINFOMD_ENVP
 0x0006

	)

215 
	#MODINFOMD_HOWTO
 0x0007

	)

216 
	#MODINFOMD_KERNEND
 0x0008

	)

218 
	#MODINFOMD_SHDR
 0x0009

	)

219 
	#MODINFOMD_CTORS_ADDR
 0x000®

	)

220 
	#MODINFOMD_CTORS_SIZE
 0x000b

	)

221 
	#MODINFOMD_FW_HANDLE
 0x000¯

	)

222 
	#MODINFOMD_KEYBUF
 0x000d

	)

223 
	#MODINFOMD_NOCOPY
 0x8000

	)

225 
	#MODINFOMD_DEPLIST
 (0x4001 | 
MODINFOMD_NOCOPY
Ë

	)

227 #ifde‡
_KERNEL


228 
	#MD_FETCH
(
mdp
, 
öfo
, 
ty≥
) ({ \

229 
ty≥
 *
__p
; \

230 
__p
 = (
ty≥
 *)
	`¥ñﬂd_£¨ch_öfo
((
mdp
), 
MODINFO_METADATA
 | (
öfo
)); \

231 
__p
 ? *__p : 0; \

232 
	}
})

	)

235 
	#LINKER_HINTS_VERSION
 1

	)

236 
	#LINKER_HINTS_MAX
 (1 << 20Ë

	)

238 #ifde‡
_KERNEL


243 
vm_off£t_t
 
¥ñﬂd_addr_ªloˇã
;

244 
ˇddr_t
 
¥ñﬂd_mëad©a
;

246 * 
¥ñﬂd_„tch_addr
(
ˇddr_t
 
_mod
);

247 
size_t
 
¥ñﬂd_„tch_size
(
ˇddr_t
 
_mod
);

248 
ˇddr_t
 
¥ñﬂd_£¨ch_by_«me
(c⁄° *
_«me
);

249 
ˇddr_t
 
¥ñﬂd_£¨ch_by_ty≥
(c⁄° *
_ty≥
);

250 
ˇddr_t
 
¥ñﬂd_£¨ch_√xt_«me
(ˇddr_à
_ba£
);

251 
ˇddr_t
 
¥ñﬂd_£¨ch_öfo
(ˇddr_à
_mod
, 
_öf
);

252 
¥ñﬂd_dñëe_«me
(c⁄° *
_«me
);

253 
¥ñﬂd_boŸ°øp_ªloˇã
(
vm_off£t_t
 
_off£t
);

255 #ifde‡
KLD_DEBUG


257 
kld_debug
;

258 
	#KLD_DEBUG_FILE
 1

	)

259 
	#KLD_DEBUG_SYM
 2

	)

261 
	#KLD_DPF
(
ˇt
, 
¨gs
) \

263 i‡(
kld_debug
 & 
KLD_DEBUG_
##
ˇt
Ë
¥ötf
 
¨gs
; \

264 } 0)

	)

268 
	#KLD_DPF
(
ˇt
, 
¨gs
)

	)

272 
	tñf_lookup_‚
(
	tlökî_fûe_t
, 
	tElf_Size
, , 
	tElf_Addr
 *);

275 
boﬁ
 
ñf_is_ifunc_ªloc
(
Elf_Size
 
r_öfo
);

276 
ñf_ªloc
(
lökî_fûe_t
 
_lf
, 
Elf_Addr
 
ba£
, c⁄° *
_ªl
,

277 
_ty≥
, 
ñf_lookup_‚
 
_lu
);

278 
ñf_ªloc_loˇl
(
lökî_fûe_t
 
_lf
, 
Elf_Addr
 
ba£
, c⁄° *
_ªl
,

279 
_ty≥
, 
ñf_lookup_‚
 
_lu
);

280 
Elf_Addr
 
ñf_ªloˇddr
(
lökî_fûe_t
 
_lf
, Elf_Add∏
addr
);

281 c⁄° 
Elf_Sym
 *
ñf_gë_sym
(
lökî_fûe_t
 
_lf
, 
Elf_Size
 
_symidx
);

282 c⁄° *
ñf_gë_sym«me
(
lökî_fûe_t
 
_lf
, 
Elf_Size
 
_symidx
);

283 
lök_ñf_úñoc
(
ˇddr_t
 
kmdp
);

285 
	slökî_˘f
 {

286 c⁄° 
uöt8_t
 *
	m˘·ab
;

287 
	m˘f˙t
;

288 c⁄° 
Elf_Sym
 *
	msymèb
;

289 
	mnsym
;

290 c⁄° *
	m°πab
;

291 
	m°r˙t
;

292 
uöt32_t
 **
	m˘fofÂ
;

293 
uöt32_t
 **
	mtypofÂ
;

294 *
	mty∂íp
;

295 } 
	tlökî_˘f_t
;

297 
lökî_˘f_gë
(
lökî_fûe_t
, 
lökî_˘f_t
 *);

299 
ñf_˝u_lﬂd_fûe
(
lökî_fûe_t
);

300 
ñf_˝u_u∆ﬂd_fûe
(
lökî_fûe_t
);

303 
	#ELF_RELOC_REL
 1

	)

304 
	#ELF_RELOC_RELA
 2

	)

310 
	skld_fûe_°©_1
 {

311 
	mvîsi⁄
;

312 
	m«me
[
MAXPATHLEN
];

313 
	mªfs
;

314 
	mid
;

315 
ˇddr_t
 
	maddªss
;

316 
size_t
 
	msize
;

320 
	skld_fûe_°©
 {

321 
	mvîsi⁄
;

322 
	m«me
[
MAXPATHLEN
];

323 
	mªfs
;

324 
	mid
;

325 
ˇddr_t
 
	maddªss
;

326 
size_t
 
	msize
;

327 
	m∑th«me
[
MAXPATHLEN
];

330 
	skld_sym_lookup
 {

331 
	mvîsi⁄
;

332 *
	msym«me
;

333 
u_l⁄g
 
	msymvÆue
;

334 
size_t
 
	msymsize
;

336 
	#KLDSYM_LOOKUP
 1

	)

341 
	#LINKER_UNLOAD_NORMAL
 0

	)

342 
	#LINKER_UNLOAD_FORCE
 1

	)

344 #i‚de‡
_KERNEL


346 
	~<sys/cdefs.h
>

348 
__BEGIN_DECLS


349 
kldlﬂd
(c⁄° * 
_fûe
);

350 
kldu∆ﬂd
(
_fûeid
);

351 
kldu∆ﬂdf
(
_fûeid
, 
Êags
);

352 
kldföd
(c⁄° * 
_fûe
);

353 
kld√xt
(
_fûeid
);

354 
kld°©
(
_fûeid
, 
kld_fûe_°©
* 
_°©
);

355 
kldfú°mod
(
_fûeid
);

356 
kldsym
(
_fûeid
, 
_cmd
, *
_d©a
);

357 
	g__END_DECLS


	@/usr/include/sys/lock.h

34 #i‚de‡
_SYS_LOCK_H_


35 
	#_SYS_LOCK_H_


	)

37 
	~<sys/queue.h
>

38 
	~<sys/_lock.h
>

39 
	~<sys/kå_˛ass.h
>

41 
	glock_li°_íåy
;

42 
	gthªad
;

61 
	slock_˛ass
 {

62 c⁄° *
	mlc_«me
;

63 
u_öt
 
	mlc_Êags
;

64 (*
	mlc_as£π
)(c⁄° 
lock_obje˘
 *
	mlock
, 
	mwh©
);

65 (*
	mlc_ddb_show
)(c⁄° 
lock_obje˘
 *
	mlock
);

66 (*
	mlc_lock
)(
lock_obje˘
 *
	mlock
, 
uöçå_t
 
	mhow
);

67 (*
	mlc_ow√r
)(c⁄° 
lock_obje˘
 *
	mlock
,

68 
thªad
 **
	mow√r
);

69 
uöçå_t
 (*
lc_u∆ock
)(
lock_obje˘
 *
	mlock
);

72 
	#LC_SLEEPLOCK
 0x00000001

	)

73 
	#LC_SPINLOCK
 0x00000002

	)

74 
	#LC_SLEEPABLE
 0x00000004

	)

75 
	#LC_RECURSABLE
 0x00000008

	)

76 
	#LC_UPGRADABLE
 0x00000010

	)

78 
	#LO_CLASSFLAGS
 0x0000fff‡

	)

79 
	#LO_INITIALIZED
 0x00010000

	)

80 
	#LO_WITNESS
 0x00020000

	)

81 
	#LO_QUIET
 0x00040000

	)

82 
	#LO_RECURSABLE
 0x00080000

	)

83 
	#LO_SLEEPABLE
 0x00100000

	)

84 
	#LO_UPGRADABLE
 0x00200000

	)

85 
	#LO_DUPOK
 0x00400000

	)

86 
	#LO_IS_VNODE
 0x00800000

	)

87 
	#LO_CLASSMASK
 0x0f000000

	)

88 
	#LO_NOPROFILE
 0x10000000

	)

89 
	#LO_NEW
 0x20000000

	)

96 
	#LO_CLASSSHIFT
 24

	)

97 
	#LO_CLASSINDEX
(
lock
Ë(((÷ock)->
lo_Êags
Ë& 
LO_CLASSMASK
Ë>> 
LO_CLASSSHIFT
)

	)

98 
	#LOCK_CLASS
(
lock
Ë(
lock_˛as£s
[
	`LO_CLASSINDEX
(÷ock))])

	)

99 
	#LOCK_CLASS_MAX
 (
LO_CLASSMASK
 >> 
LO_CLASSSHIFT
)

	)

105 
	#LOP_NEWORDER
 0x00000001

	)

106 
	#LOP_QUIET
 0x00000002

	)

107 
	#LOP_TRYLOCK
 0x00000004

	)

108 
	#LOP_EXCLUSIVE
 0x00000008

	)

109 
	#LOP_DUPOK
 0x00000010

	)

112 
	#LA_MASKASSERT
 0x000000f‡

	)

113 
	#LA_UNLOCKED
 0x00000000

	)

114 
	#LA_LOCKED
 0x00000001

	)

115 
	#LA_SLOCKED
 0x00000002

	)

116 
	#LA_XLOCKED
 0x00000004

	)

117 
	#LA_RECURSED
 0x00000008

	)

118 
	#LA_NOTRECURSED
 0x00000010

	)

120 #ifde‡
_KERNEL


130 #i‡(
deföed
(
KLD_MODULE
Ë&& !deföed(
KLD_TIED
)Ë|| deföed(
WITNESS
Ë|| deföed(
INVARIANTS
) || \

131 
deföed
(
LOCK_PROFILING
Ë|| 
	$deföed
(
KTR
)

132 
	#LOCK_DEBUG
 1

	)

134 
	#LOCK_DEBUG
 0

	)

141 #i‡
LOCK_DEBUG
 > 0

142 
	#LOCK_FILE_LINE_ARG_DEF
 , c⁄° *
fûe
, 
löe


	)

143 
	#LOCK_FILE_LINE_ARG
 , 
fûe
, 
löe


	)

144 
	#LOCK_FILE
 
__FILE__


	)

145 
	#LOCK_LINE
 
__LINE__


	)

147 
	#LOCK_FILE_LINE_ARG_DEF


	)

148 
	#LOCK_FILE_LINE_ARG


	)

149 
	#LOCK_FILE
 
NULL


	)

150 
	#LOCK_LINE
 0

	)

164 #i‡
LOCK_DEBUG
 > 0

165 
	#LOCK_LOG_TEST
(
lo
, 
Êags
) \

166 (((
Êags
Ë& 
LOP_QUIET
Ë=0 && ((
lo
)->
lo_Êags
 & 
LO_QUIET
Ë=0)

	)

168 
	#LOCK_LOG_TEST
(
lo
, 
Êags
Ë0

	)

172 
	#LOCK_LOG_LOCK
(
›«me
, 
lo
, 
Êags
, 
ªcur£
, 
fûe
, 
löe
) do { \

173 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

174 
	`CTR6
(
KTR_LOCK
, 
›«me
 " (%s) %s %pÑ = %dát %s:%d", \

175 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

176 (
lo
), (
u_öt
)(
ªcur£
), (
fûe
), (
löe
)); \

177 
	}
} 0)

	)

179 
	#LOCK_LOG_TRY
(
›«me
, 
lo
, 
Êags
, 
ªsu…
, 
fûe
, 
löe
) do { \

180 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

181 
	`CTR6
(
KTR_LOCK
, "TRY_" 
›«me
 " (%s) %s %pÑesult=%dát %s:%d",\

182 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

183 (
lo
), (
u_öt
)(
ªsu…
), (
fûe
), (
löe
)); \

184 } 0)

	)

186 
	#LOCK_LOG_INIT
(
lo
, 
Êags
) do { \

187 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

188 
	`CTR4
(
KTR_LOCK
, "%s: %∞(%sË%s", 
__func__
, (
lo
), \

189 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
); \

190 } 0)

	)

192 
	#LOCK_LOG_DESTROY
(
lo
, 
Êags
Ë
	`LOCK_LOG_INIT
÷o, fœgs)

	)

194 
	#lock_öôülized
(
lo
Ë(÷o)->
lo_Êags
 & 
LO_INITIALIZED
)

	)

200 
	#MPASS
(
ex
Ë
	`MPASS4
”x, #ex, 
__FILE__
, 
__LINE__
)

	)

201 
	#MPASS2
(
ex
, 
wh©
Ë
	`MPASS4
”x, wh©, 
__FILE__
, 
__LINE__
)

	)

202 
	#MPASS3
(
ex
, 
fûe
, 
löe
Ë
	`MPASS4
”x, #ex, fûe,Üöe)

	)

203 
	#MPASS4
(
ex
, 
wh©
, 
fûe
, 
löe
) \

204 
	`KASSERT
((
ex
), ("As£πi⁄ %†Áûedáà%s:%d", 
wh©
, 
fûe
, 
löe
))

	)

206 
lock_˛ass
 
lock_˛ass_mtx_¶ìp
;

207 
lock_˛ass
 
lock_˛ass_mtx_•ö
;

208 
lock_˛ass
 
lock_˛ass_sx
;

209 
lock_˛ass
 
lock_˛ass_rw
;

210 
lock_˛ass
 
lock_˛ass_rm
;

211 
lock_˛ass
 
lock_˛ass_rm_¶ì∑bÀ
;

212 
lock_˛ass
 
lock_˛ass_lockmgr
;

214 
lock_˛ass
 *
lock_˛as£s
[];

216 
	slock_dñay_c⁄fig
 {

217 
u_öt
 
	mba£
;

218 
u_öt
 
	mmax
;

221 
	slock_dñay_¨g
 {

222 
lock_dñay_c⁄fig
 *
	mc⁄fig
;

223 
u_öt
 
	mdñay
;

224 
u_öt
 
	m•ö_˙t
;

227 
ölöe
 

228 
	$lock_dñay_¨g_öô
(
lock_dñay_¨g
 *
œ
, 
lock_dñay_c⁄fig
 *
lc
)

230 
œ
->
c⁄fig
 = 
lc
;

231 
œ
->
dñay
 = 
lc
->
ba£
;

232 
œ
->
•ö_˙t
 = 0;

233 
	}
}

235 
	#lock_dñay_•ö
(
n
) do { \

236 
u_öt
 
_i
; \

238 
_i
 = (
n
); _i > 0; _i--) \

239 
	`˝u_•öwaô
(); \

240 } 0)

	)

242 
	#LOCK_DELAY_SYSINIT
(
func
) \

243 
	`SYSINIT
(
func
##
_ld
, 
SI_SUB_LOCK
, 
SI_ORDER_ANY
, func, 
NULL
)

	)

245 
	#LOCK_DELAY_SYSINIT_DEFAULT
(
lc
) \

246 
	`SYSINIT
(
lock_dñay_
##
lc
##
_ld
, 
SI_SUB_LOCK
, 
SI_ORDER_ANY
, \

247 
lock_dñay_deÁu…_öô
, &
lc
)

	)

249 
lock_öô
(
lock_obje˘
 *, 
lock_˛ass
 *,

251 
lock_de°roy
(
lock_obje˘
 *);

252 
lock_dñay
(
lock_dñay_¨g
 *);

253 
lock_dñay_deÁu…_öô
(
lock_dñay_c⁄fig
 *);

254 
•ölock_íãr
();

255 
•ölock_exô
();

256 
wô√ss_öô
(
lock_obje˘
 *, const *);

257 
wô√ss_de°roy
(
lock_obje˘
 *);

258 
wô√ss_deföe‹dî
(
lock_obje˘
 *, lock_object *);

259 
wô√ss_check‹dî
(
lock_obje˘
 *, , const *, ,

260 
lock_obje˘
 *);

261 
wô√ss_lock
(
lock_obje˘
 *, , const *, );

262 
wô√ss_upgøde
(
lock_obje˘
 *, , const *, );

263 
wô√ss_downgøde
(
lock_obje˘
 *, , const *, );

264 
wô√ss_u∆ock
(
lock_obje˘
 *, , const *, );

265 
wô√ss_ßve
(
lock_obje˘
 *, const **, *);

266 
wô√ss_ª°‹e
(
lock_obje˘
 *, const *, );

267 
wô√ss_li°_locks
(
lock_li°_íåy
 **,

269 
	`wô√ss_w¨n
(, 
lock_obje˘
 *, const *, ...);

270 
	`wô√ss_as£π
(c⁄° 
lock_obje˘
 *, , const *, );

271 
	`wô√ss_di•œy_•ölock
(
lock_obje˘
 *, 
thªad
 *,

273 
	`wô√ss_löe
(
lock_obje˘
 *);

274 
	`wô√ss_n‹ñó£
(
lock_obje˘
 *);

275 
	`wô√ss_ªÀa£ok
(
lock_obje˘
 *);

276 c⁄° *
	`wô√ss_fûe
(
lock_obje˘
 *);

277 
	`wô√ss_thªad_exô
(
thªad
 *);

279 #ifdef 
WITNESS


280 
	`wô√ss_°¨tup_cou¡
();

281 
	`wô√ss_°¨tup
(*);

284 
	#WARN_GIANTOK
 0x01

	)

285 
	#WARN_PANIC
 0x02

	)

286 
	#WARN_SLEEPOK
 0x04

	)

288 
	#WITNESS_INIT
(
lock
, 
ty≥
) \

289 
	`wô√ss_öô
((
lock
), (
ty≥
))

	)

291 
	#WITNESS_DESTROY
(
lock
) \

292 
	`wô√ss_de°roy
(
lock
)

	)

294 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
) \

295 
	`wô√ss_check‹dî
((
lock
), (
Êags
), (
fûe
), (
löe
), (
öãæock
))

	)

297 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
) \

298 
	`wô√ss_deföe‹dî
((
lock_obje˘
 *)(
lock1
), \

299 (
lock_obje˘
 *)(
lock2
))

	)

301 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

302 
	`wô√ss_lock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

304 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

305 
	`wô√ss_upgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

307 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

308 
	`wô√ss_downgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

310 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

311 
	`wô√ss_u∆ock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

313 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...) \

314 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

316 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...) \

317 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

319 
	#WITNESS_SAVE_DECL
(
n
) \

320 c⁄° * 
	`__CONCAT
(
n
, 
__wf
); \

321 
	`__CONCAT
(
n
, 
__wl
)

	)

323 
	#WITNESS_SAVE
(
lock
, 
n
) \

324 
	`wô√ss_ßve
((
lock
), &
	`__CONCAT
(
n
, 
__wf
), &__CONCAT“, 
__wl
))

	)

326 
	#WITNESS_RESTORE
(
lock
, 
n
) \

327 
	`wô√ss_ª°‹e
((
lock
), 
	`__CONCAT
(
n
, 
__wf
), __CONCAT“, 
__wl
))

	)

329 
	#WITNESS_NORELEASE
(
lock
) \

330 
	`wô√ss_n‹ñó£
(&(
lock
)->
lock_obje˘
)

	)

332 
	#WITNESS_RELEASEOK
(
lock
) \

333 
	`wô√ss_ªÀa£ok
(&(
lock
)->
lock_obje˘
)

	)

335 
	#WITNESS_FILE
(
lock
) \

336 
	`wô√ss_fûe
(
lock
)

	)

338 
	#WITNESS_LINE
(
lock
) \

339 
	`wô√ss_löe
(
lock
)

	)

342 
	#WITNESS_INIT
(
lock
, 
ty≥
Ë()0

	)

343 
	#WITNESS_DESTROY
(
lock
Ë()0

	)

344 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
Ë0

	)

345 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
Ë()0

	)

346 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

347 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

348 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

349 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

350 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...Ë0

	)

351 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...Ë()0

	)

352 
	#WITNESS_SAVE_DECL
(
n
Ë()0

	)

353 
	#WITNESS_SAVE
(
lock
, 
n
Ë()0

	)

354 
	#WITNESS_RESTORE
(
lock
, 
n
Ë()0

	)

355 
	#WITNESS_NORELEASE
(
lock
Ë()0

	)

356 
	#WITNESS_RELEASEOK
(
lock
Ë()0

	)

357 
	#WITNESS_FILE
(
lock
Ë("?")

	)

358 
	#WITNESS_LINE
(
lock
Ë(0)

	)

	@/usr/include/sys/malloc.h

37 #i‚de‡
_SYS_MALLOC_H_


38 
	#_SYS_MALLOC_H_


	)

40 
	~<sys/∑øm.h
>

41 #ifde‡
_KERNEL


42 
	~<sys/sy°m.h
>

44 
	~<sys/queue.h
>

45 
	~<sys/_lock.h
>

46 
	~<sys/_muãx.h
>

47 
	~<machöe/_limôs.h
>

49 
	#MINALLOCSIZE
 
UMA_SMALLEST_UNIT


	)

54 
	#M_NOWAIT
 0x0001

	)

55 
	#M_WAITOK
 0x0002

	)

56 
	#M_ZERO
 0x0100

	)

57 
	#M_NOVM
 0x0200

	)

58 
	#M_USE_RESERVE
 0x0400

	)

59 
	#M_NODUMP
 0x0800

	)

60 
	#M_FIRSTFIT
 0x1000

	)

61 
	#M_BESTFIT
 0x2000

	)

62 
	#M_EXEC
 0x4000

	)

64 
	#M_MAGIC
 877983977

	)

82 
	smÆloc_ty≥_°©s
 {

83 
uöt64_t
 
	mmts_memÆlo˚d
;

84 
uöt64_t
 
	mmts_mem‰ìd
;

85 
uöt64_t
 
	mmts_numÆlocs
;

86 
uöt64_t
 
	mmts_num‰ìs
;

87 
uöt64_t
 
	mmts_size
;

88 
uöt64_t
 
	m_mts_ª£rved1
;

89 
uöt64_t
 
	m_mts_ª£rved2
;

90 
uöt64_t
 
	m_mts_ª£rved3
;

96 
	#DTMALLOC_PROBE_MALLOC
 0

	)

97 
	#DTMALLOC_PROBE_FREE
 1

	)

98 
	#DTMALLOC_PROBE_MAX
 2

	)

100 
	smÆloc_ty≥_öã∫Æ
 {

101 
uöt32_t
 
	mmti_¥obes
[
DTMALLOC_PROBE_MAX
];

103 
u_ch¨
 
	mmti_z⁄e
;

104 
mÆloc_ty≥_°©s
 *
	mmti_°©s
;

112 
	smÆloc_ty≥
 {

113 
mÆloc_ty≥
 *
	mks_√xt
;

114 
u_l⁄g
 
	mks_magic
;

115 c⁄° *
	mks_sh‹tdesc
;

116 *
	mks_h™dÀ
;

126 
	#MALLOC_TYPE_STREAM_VERSION
 0x00000001

	)

127 
	smÆloc_ty≥_°ªam_hódî
 {

128 
uöt32_t
 
	mmtsh_vîsi⁄
;

129 
uöt32_t
 
	mmtsh_max˝us
;

130 
uöt32_t
 
	mmtsh_cou¡
;

131 
uöt32_t
 
	m_mtsh_∑d
;

134 
	#MALLOC_MAX_NAME
 32

	)

135 
	smÆloc_ty≥_hódî
 {

136 
	mmth_«me
[
MALLOC_MAX_NAME
];

139 #ifde‡
_KERNEL


140 
	#MALLOC_DEFINE
(
ty≥
, 
sh‹tdesc
, 
l⁄gdesc
) \

141 
mÆloc_ty≥
 
ty≥
[1] = { \

142 { 
NULL
, 
M_MAGIC
, 
sh‹tdesc
, NULL } \

144 
	`SYSINIT
(
ty≥
##
_öô
, 
SI_SUB_KMEM
, 
SI_ORDER_THIRD
, 
mÆloc_öô
, \

145 
ty≥
); \

146 
	`SYSUNINIT
(
ty≥
##
_unöô
, 
SI_SUB_KMEM
, 
SI_ORDER_ANY
, \

147 
mÆloc_unöô
, 
ty≥
)

	)

149 
	#MALLOC_DECLARE
(
ty≥
) \

150 
mÆloc_ty≥
 
ty≥
[1]

	)

152 
MALLOC_DECLARE
(
M_CACHE
);

153 
MALLOC_DECLARE
(
M_DEVBUF
);

154 
MALLOC_DECLARE
(
M_TEMP
);

161 
MALLOC_DECLARE
(
M_IOV
);

163 
	gdomaö£t
;

164 
mtx
 
mÆloc_mtx
;

169 
	tmÆloc_ty≥_li°_func_t
(
	tmÆloc_ty≥
 *, *);

171 
c⁄tig‰ì
(*
addr
, 
size
, 
mÆloc_ty≥
 *
ty≥
);

172 *
	$c⁄tigmÆloc
(
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
,

173 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
Æignmít
,

174 
vm_∑ddr_t
 
bound¨y
Ë
__mÆloc_like
 
__ªsu…_u£_check


175 
	$__Æloc_size
(1Ë
	`__Æloc_Æign
(6);

176 *
	$c⁄tigmÆloc_domaö£t
(
size
, 
mÆloc_ty≥
 *
ty≥
,

177 
domaö£t
 *
ds
, 
Êags
, 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
,

178 
Æignmít
, 
vm_∑ddr_t
 
bound¨y
)

179 
__mÆloc_like
 
__ªsu…_u£_check
 
	$__Æloc_size
(1Ë
	`__Æloc_Æign
(6);

180 
	`‰ì
(*
addr
, 
mÆloc_ty≥
 *
ty≥
);

181 
	`‰ì_domaö
(*
addr
, 
mÆloc_ty≥
 *
ty≥
);

182 *
	$mÆloc
(
size_t
 
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
Ë
__mÆloc_like


183 
__ªsu…_u£_check
 
	`__Æloc_size
(1);

219 
	#mÆloc
(
size
, 
ty≥
, 
Êags
) ({ \

220 *
_mÆloc_ôem
; \

221 
size_t
 
_size
 = (
size
); \

222 i‡(
	`__buûtö_c⁄°™t_p
(
size
Ë&& __buûtö_c⁄°™t_p(
Êags
) &&\

223 ((
Êags
Ë& 
M_ZERO
) != 0) { \

224 
_mÆloc_ôem
 = 
	`mÆloc
(
_size
, 
ty≥
, (
Êags
Ë&~ 
M_ZERO
); \

225 i‡(((
Êags
Ë& 
M_WAITOK
) != 0 || \

226 
	`__¥edi˘_åue
(
_mÆloc_ôem
 !
NULL
)) \

227 
	`bzîo
(
_mÆloc_ôem
, 
_size
); \

229 
_mÆloc_ôem
 = 
	`mÆloc
(
_size
, 
ty≥
, 
Êags
); \

231 
_mÆloc_ôem
; \

232 
	}
})

	)

234 *
	$mÆloc_domaö£t
(
size_t
 
size
, 
mÆloc_ty≥
 *
ty≥
,

235 
domaö£t
 *
ds
, 
Êags
Ë
__mÆloc_like
 
__ªsu…_u£_check


236 
	`__Æloc_size
(1);

237 *
	$mÆloˇºay
(
size_t
 
nmemb
, size_à
size
, 
mÆloc_ty≥
 *
ty≥
,

238 
Êags
Ë
__mÆloc_like
 
__ªsu…_u£_check


239 
	`__Æloc_size2
(1, 2);

240 
	`mÆloc_öô
(*);

241 
	`mÆloc_œ°_Áû
();

242 
	`mÆloc_ty≥_Æloˇãd
(
mÆloc_ty≥
 *
ty≥
, 
size
);

243 
	`mÆloc_ty≥_‰ìd
(
mÆloc_ty≥
 *
ty≥
, 
size
);

244 
	`mÆloc_ty≥_li°
(
mÆloc_ty≥_li°_func_t
 *, *);

245 
	`mÆloc_unöô
(*);

246 *
	$ªÆloc
(*
addr
, 
size_t
 
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
)

247 
__ªsu…_u£_check
 
	`__Æloc_size
(2);

248 *
	$ªÆlocf
(*
addr
, 
size_t
 
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
)

249 
__ªsu…_u£_check
 
	`__Æloc_size
(2);

251 
mÆloc_ty≥
 *
	`mÆloc_desc2ty≥
(c⁄° *
desc
);

257 
	#MUL_NO_OVERFLOW
 (1UL << ((
size_t
Ë* 8 / 2))

	)

258 
ölöe
 
boﬁ


259 
	$WOULD_OVERFLOW
(
size_t
 
nmemb
, size_à
size
)

262  ((
nmemb
 >
MUL_NO_OVERFLOW
 || 
size
 >= MUL_NO_OVERFLOW) &&

263 
nmemb
 > 0 && 
__SIZE_T_MAX
 /Çmemb < 
size
);

264 
	}
}

265 #unde‡
MUL_NO_OVERFLOW


	@/usr/include/sys/memrange.h

7 #i‚de‡
_SYS_MEMRANGE_H_


8 
	#_SYS_MEMRANGE_H_


	)

11 
	#MDF_UNCACHEABLE
 (1<<0Ë

	)

12 
	#MDF_WRITECOMBINE
 (1<<1Ë

	)

13 
	#MDF_WRITETHROUGH
 (1<<2Ë

	)

14 
	#MDF_WRITEBACK
 (1<<3Ë

	)

15 
	#MDF_WRITEPROTECT
 (1<<4Ë

	)

16 
	#MDF_UNKNOWN
 (1<<5Ë

	)

17 
	#MDF_ATTRMASK
 (0x00ffffff)

	)

19 
	#MDF_FIXBASE
 (1<<24Ë

	)

20 
	#MDF_FIXLEN
 (1<<25Ë

	)

21 
	#MDF_FIRMWARE
 (1<<26Ë

	)

22 
	#MDF_ACTIVE
 (1<<27Ë

	)

23 
	#MDF_BOGUS
 (1<<28Ë

	)

24 
	#MDF_FIXACTIVE
 (1<<29Ë

	)

25 
	#MDF_BUSY
 (1<<30Ë

	)

26 
	#MDF_FORCE
 (1<<31Ë

	)

28 
	smem_ønge_desc


30 
u_öt64_t
 
	mmr_ba£
;

31 
u_öt64_t
 
	mmr_Àn
;

32 
	mmr_Êags
;

33 
	mmr_ow√r
[8];

36 
	smem_ønge_›


38 
mem_ønge_desc
 *
	mmo_desc
;

39 
	mmo_¨g
[2];

40 
	#MEMRANGE_SET_UPDATE
 0

	)

41 
	#MEMRANGE_SET_REMOVE
 1

	)

45 
	#MEMRANGE_GET
 
	`_IOWR
('m', 50, 
mem_ønge_›
)

	)

46 
	#MEMRANGE_SET
 
	`_IOW
('m', 51, 
mem_ønge_›
)

	)

48 #ifde‡
_KERNEL


50 
MALLOC_DECLARE
(
M_MEMDESC
);

52 
	gmem_ønge_so·c
;

53 
	smem_ønge_›s


55 (*
	möô
)(
mem_ønge_so·c
 *
	msc
);

56 (*
	m£t
)(
mem_ønge_so·c
 *
	msc
, 
mem_ønge_desc
 *
	mmrd
, *
	m¨g
);

57 (*
	möôAP
)(
mem_ønge_so·c
 *
	msc
);

58 (*
	mªöô
)(
mem_ønge_so·c
 *
	msc
);

61 
	smem_ønge_so·c


63 
mem_ønge_›s
 *
	mmr_›
;

64 
	mmr_ˇp
;

65 
	mmr_ndesc
;

66 
mem_ønge_desc
 *
	mmr_desc
;

69 
mem_ønge_so·c
 mem_range_softc;

71 
mem_ønge_öô
();

72 
mem_ønge_de°roy
();

74 
mem_ønge_©å_gë
(
mem_ønge_desc
 *
mrd
, *
¨g
);

75 
mem_ønge_©å_£t
(
mem_ønge_desc
 *
mrd
, *
¨g
);

	@/usr/include/sys/mman.h

35 #i‚de‡
_SYS_MMAN_H_


36 
	#_SYS_MMAN_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/_ty≥s.h
>

41 #i‡
__BSD_VISIBLE


45 
	#INHERIT_SHARE
 0

	)

46 
	#INHERIT_COPY
 1

	)

47 
	#INHERIT_NONE
 2

	)

48 
	#INHERIT_ZERO
 3

	)

54 
	#PROT_NONE
 0x00

	)

55 
	#PROT_READ
 0x01

	)

56 
	#PROT_WRITE
 0x02

	)

57 
	#PROT_EXEC
 0x04

	)

63 
	#MAP_SHARED
 0x0001

	)

64 
	#MAP_PRIVATE
 0x0002

	)

65 #i‡
__BSD_VISIBLE


66 
	#MAP_COPY
 
MAP_PRIVATE


	)

72 
	#MAP_FIXED
 0x0010

	)

74 #i‡
__BSD_VISIBLE


75 
	#MAP_RESERVED0020
 0x0020

	)

76 
	#MAP_RESERVED0040
 0x0040

	)

77 
	#MAP_RESERVED0080
 0x0080

	)

78 
	#MAP_RESERVED0100
 0x0100

	)

79 
	#MAP_HASSEMAPHORE
 0x0200

	)

80 
	#MAP_STACK
 0x0400

	)

81 
	#MAP_NOSYNC
 0x0800

	)

86 
	#MAP_FILE
 0x0000

	)

87 
	#MAP_ANON
 0x1000

	)

88 #i‚de‡
_KERNEL


89 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

95 
	#MAP_GUARD
 0x00002000

	)

96 
	#MAP_EXCL
 0x00004000

	)

97 
	#MAP_NOCORE
 0x00020000

	)

98 
	#MAP_PREFAULT_READ
 0x00040000

	)

99 #ifde‡
__LP64__


100 
	#MAP_32BIT
 0x00080000

	)

109 
	#MAP_ALIGNED
(
n
Ë(“Ë<< 
MAP_ALIGNMENT_SHIFT
)

	)

110 
	#MAP_ALIGNMENT_SHIFT
 24

	)

111 
	#MAP_ALIGNMENT_MASK
 
	`MAP_ALIGNED
(0xff)

	)

112 
	#MAP_ALIGNED_SUPER
 
	`MAP_ALIGNED
(1Ë

	)

115 #i‡
__POSIX_VISIBLE
 >= 199309

119 
	#MCL_CURRENT
 0x0001

	)

120 
	#MCL_FUTURE
 0x0002

	)

126 
	#MAP_FAILED
 ((*)-1)

	)

131 
	#MS_SYNC
 0x0000

	)

132 
	#MS_ASYNC
 0x0001

	)

133 
	#MS_INVALIDATE
 0x0002

	)

138 
	#_MADV_NORMAL
 0

	)

139 
	#_MADV_RANDOM
 1

	)

140 
	#_MADV_SEQUENTIAL
 2

	)

141 
	#_MADV_WILLNEED
 3

	)

142 
	#_MADV_DONTNEED
 4

	)

144 #i‡
__BSD_VISIBLE


145 
	#MADV_NORMAL
 
_MADV_NORMAL


	)

146 
	#MADV_RANDOM
 
_MADV_RANDOM


	)

147 
	#MADV_SEQUENTIAL
 
_MADV_SEQUENTIAL


	)

148 
	#MADV_WILLNEED
 
_MADV_WILLNEED


	)

149 
	#MADV_DONTNEED
 
_MADV_DONTNEED


	)

150 
	#MADV_FREE
 5

	)

151 
	#MADV_NOSYNC
 6

	)

152 
	#MADV_AUTOSYNC
 7

	)

153 
	#MADV_NOCORE
 8

	)

154 
	#MADV_CORE
 9

	)

155 
	#MADV_PROTECT
 10

	)

160 
	#MINCORE_INCORE
 0x1

	)

161 
	#MINCORE_REFERENCED
 0x2

	)

162 
	#MINCORE_MODIFIED
 0x4

	)

163 
	#MINCORE_REFERENCED_OTHER
 0x8

	)

164 
	#MINCORE_MODIFIED_OTHER
 0x10

	)

165 
	#MINCORE_SUPER
 0x20

	)

170 
	#SHM_ANON
 ((*)1)

	)

177 #i‡
__POSIX_VISIBLE
 >= 200112

178 
	#POSIX_MADV_NORMAL
 
_MADV_NORMAL


	)

179 
	#POSIX_MADV_RANDOM
 
_MADV_RANDOM


	)

180 
	#POSIX_MADV_SEQUENTIAL
 
_MADV_SEQUENTIAL


	)

181 
	#POSIX_MADV_WILLNEED
 
_MADV_WILLNEED


	)

182 
	#POSIX_MADV_DONTNEED
 
_MADV_DONTNEED


	)

185 #i‚de‡
_MODE_T_DECLARED


186 
__mode_t
 
	tmode_t
;

187 
	#_MODE_T_DECLARED


	)

190 #i‚de‡
_OFF_T_DECLARED


191 
__off_t
 
	toff_t
;

192 
	#_OFF_T_DECLARED


	)

195 #i‚de‡
_SIZE_T_DECLARED


196 
__size_t
 
	tsize_t
;

197 
	#_SIZE_T_DECLARED


	)

200 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_FILE
)

201 
	~<sys/lock.h
>

202 
	~<sys/muãx.h
>

203 
	~<sys/queue.h
>

204 
	~<sys/øngñock.h
>

205 
	~<vm/vm.h
>

207 
	gfûe
;

209 
	sshmfd
 {

210 
size_t
 
	mshm_size
;

211 
vm_obje˘_t
 
	mshm_obje˘
;

212 
	mshm_ªfs
;

213 
uid_t
 
	mshm_uid
;

214 
gid_t
 
	mshm_gid
;

215 
mode_t
 
	mshm_mode
;

216 
	mshm_km≠pögs
;

222 
time•ec
 
	mshm_©ime
;

223 
time•ec
 
	mshm_mtime
;

224 
time•ec
 
	mshm_˘ime
;

225 
time•ec
 
	mshm_búthtime
;

226 
öo_t
 
	mshm_öo
;

228 
œbñ
 *
	mshm_œbñ
;

229 c⁄° *
	mshm_∑th
;

231 
øngñock
 
	mshm_æ
;

232 
mtx
 
	mshm_mtx
;

236 #ifde‡
_KERNEL


237 
shm_m≠
(
fûe
 *
Â
, 
size_t
 
size
, 
off_t
 
off£t
, **
memp
);

238 
shm_unm≠
(
fûe
 *
Â
, *
mem
, 
size_t
 
size
);

240 
shm_ac˚ss
(
shmfd
 *shmfd, 
u¸ed
 *u¸ed, 
Êags
);

241 
shmfd
 *
shm_Æloc
(
u¸ed
 *u¸ed, 
mode_t
 
mode
);

242 
shmfd
 *
shm_hﬁd
(shmfd *shmfd);

243 
shm_dr›
(
shmfd
 *shmfd);

244 
shm_dŸrunˇã
(
shmfd
 *shmfd, 
off_t
 
Àngth
);

246 
fûe›s
 
shm_›s
;

249 
	g__BEGIN_DECLS


254 #i‡
__BSD_VISIBLE


255 
gë∑gesizes
(
size_t
 *, );

256 
madvi£
(*, 
size_t
, );

257 
möc‹e
(c⁄° *, 
size_t
, *);

258 
möhîô
(*, 
size_t
, );

260 
mlock
(c⁄° *, 
size_t
);

261 #i‚de‡
_MMAP_DECLARED


262 
	#_MMAP_DECLARED


	)

263 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

265 
m¥Ÿe˘
(*, 
size_t
, );

266 
msync
(*, 
size_t
, );

267 
mu∆ock
(c⁄° *, 
size_t
);

268 
munm≠
(*, 
size_t
);

269 #i‡
__POSIX_VISIBLE
 >= 200112

270 
posix_madvi£
(*, 
size_t
, );

272 #i‡
__POSIX_VISIBLE
 >= 199309

273 
mlockÆl
();

274 
mu∆ockÆl
();

275 
shm_›í
(c⁄° *, , 
mode_t
);

276 
shm_u∆ök
(const *);

278 
	g__END_DECLS


	@/usr/include/sys/module.h

31 #i‚de‡
_SYS_MODULE_H_


32 
	#_SYS_MODULE_H_


	)

37 
	#MDT_DEPEND
 1

	)

38 
	#MDT_MODULE
 2

	)

39 
	#MDT_VERSION
 3

	)

40 
	#MDT_PNP_INFO
 4

	)

42 
	#MDT_STRUCT_VERSION
 1

	)

43 
	#MDT_SETNAME
 "modmëad©a_£t"

	)

45 
	emodevíây≥
 {

46 
	mMOD_LOAD
,

47 
	mMOD_UNLOAD
,

48 
	mMOD_SHUTDOWN
,

49 
	mMOD_QUIESCE


50 } 
	tmodevíây≥_t
;

52 
moduÀ
 *
	tmoduÀ_t
;

53 (*
	tmodevíth™d_t
)(
	tmoduÀ_t
, , *);

58 
	smoduÀd©a
 {

59 c⁄° *
«me
;

60 
modevíth™d_t
 
evh™d
;

61 *
¥iv
;

62 } 
	tmoduÀd©a_t
;

68 
	umod•ecific
 {

69 
ötvÆ
;

70 
u_öt
 
uötvÆ
;

71 
l⁄gvÆ
;

72 
u_l⁄g
 
ul⁄gvÆ
;

73 } 
	tmod•ecific_t
;

78 
	smod_dïíd
 {

79 
md_vî_möimum
;

80 
md_vî_¥e„ºed
;

81 
md_vî_maximum
;

87 
	smod_vîsi⁄
 {

88 
mv_vîsi⁄
;

91 
	smod_mëad©a
 {

92 
md_vîsi⁄
;

93 
md_ty≥
;

94 c⁄° *
md_d©a
;

95 c⁄° *
md_cvÆ
;

98 
	smod_≤p_m©ch_öfo


100 c⁄° *
des¸
;

101 c⁄° *
bus
;

102 c⁄° *
èbÀ
;

103 
íåy_Àn
;

105 
num_íåy
;

107 #ifdef 
_KERNEL


109 
	~<sys/lökî_£t.h
>

111 
	#MODULE_METADATA_CONCAT
(
uniquifõr
Ë
_mod_mëad©a
##
	)
uniquifier

112 
	#MODULE_METADATA
(
uniquifõr
, 
ty≥
, 
d©a
, 
cvÆ
) \

113 
mod_mëad©a
 
	`MODULE_METADATA_CONCAT
(
uniquifõr
) = { \

114 
MDT_STRUCT_VERSION
, \

115 
ty≥
, \

116 
d©a
, \

117 
cvÆ
 \

118 
	}
}; \

119 
	`DATA_SET
(
modmëad©a_£t
, 
	`MODULE_METADATA_CONCAT
(
uniquifõr
))

	)

121 
	#MODULE_DEPEND
(
moduÀ
, 
mdïíd
, 
vmö
, 
v¥ef
, 
vmax
) \

122 
mod_dïíd
 
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
 \

123 
	`__£˘i⁄
(".data") = { \

124 
vmö
, \

125 
v¥ef
, \

126 
vmax
 \

128 
	`MODULE_METADATA
(
_md_
##
moduÀ
##
_⁄_
##
mdïíd
, 
MDT_DEPEND
, \

129 &
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
, #mdïíd)

	)

140 
	#MODULE_KERNEL_MAXVER
 (
	`roundup
(
__FªeBSD_vîsi⁄
, 100000Ë- 1)

	)

142 
	#DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
maxvî
) \

143 
	`MODULE_DEPEND
(
«me
, 
kî√l
, 
__FªeBSD_vîsi⁄
, \

144 
__FªeBSD_vîsi⁄
, 
maxvî
); \

145 
	`MODULE_METADATA
(
_md_
##
«me
, 
MDT_MODULE
, &
d©a
, 
	`__XSTRING
(name));\

146 
	`SYSINIT
(
«me
##
moduÀ
, 
sub
, 
‹dî
, 
moduÀ_ªgi°î_öô
, &
d©a
); \

147 
__hack


	)

149 #ifde‡
KLD_TIED


150 
	#DECLARE_MODULE
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

151 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
__FªeBSD_vîsi⁄
)

	)

153 
	#DECLARE_MODULE
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

154 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
MODULE_KERNEL_MAXVER
)

	)

164 
	#DECLARE_MODULE_TIED
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

165 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
__FªeBSD_vîsi⁄
)

	)

167 
	#MODULE_VERSION_CONCAT
(
moduÀ
, 
vîsi⁄
Ë
_
##moduÀ##
_vîsi⁄


	)

168 
	#MODULE_VERSION
(
moduÀ
, 
vîsi⁄
) \

169 
mod_vîsi⁄
 
	`MODULE_VERSION_CONCAT
(
moduÀ
, 
vîsi⁄
)\

170 
	`__£˘i⁄
(".data") = { \

171 
vîsi⁄
 \

173 
	`MODULE_METADATA
(
	`MODULE_VERSION_CONCAT
(
moduÀ
, 
vîsi⁄
), 
MDT_VERSION
,\

174 &
	`MODULE_VERSION_CONCAT
(
moduÀ
, 
vîsi⁄
), 
	`__XSTRING
(moduÀ))

	)

181 
	#MODULE_PNP_INFO
(
d
, 
b
, 
unique
, 
t
, 
n
) \

182 c⁄° 
mod_≤p_m©ch_öfo
 
_moduÀ_≤p_
##
b
##
_
##
unique
 = { \

183 .
des¸
 = 
d
, \

184 .
bus
 = #b, \

185 .
èbÀ
 = 
t
, \

186 .
íåy_Àn
 = ((
t
)[0]), \

187 .
num_íåy
 = 
n
 \

189 
	`MODULE_METADATA
(
_md_
##
b
##
_≤pöfo_
##
unique
, 
MDT_PNP_INFO
, \

190 &
_moduÀ_≤p_
##
b
##
_
##
unique
, #b);

	)

216 
sx
 
moduÀs_sx
;

218 
	#MOD_XLOCK
 
	`sx_xlock
(&
moduÀs_sx
)

	)

219 
	#MOD_SLOCK
 
	`sx_¶ock
(&
moduÀs_sx
)

	)

220 
	#MOD_XUNLOCK
 
	`sx_xu∆ock
(&
moduÀs_sx
)

	)

221 
	#MOD_SUNLOCK
 
	`sx_su∆ock
(&
moduÀs_sx
)

	)

222 
	#MOD_LOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_LOCKED
)

	)

223 
	#MOD_XLOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_XLOCKED
)

	)

225 
	glökî_fûe
;

227 
moduÀ_ªgi°î_öô
(const *);

228 
moduÀ_ªgi°î
(c⁄° 
moduÀd©a
 *, 
lökî_fûe
 *);

229 
moduÀ_t
 
moduÀ_lookupby«me
(const *);

230 
moduÀ_t
 
moduÀ_lookupbyid
();

231 
moduÀ_quõs˚
(
moduÀ_t
);

232 
moduÀ_ª„ªn˚
(
moduÀ_t
);

233 
moduÀ_ªÀa£
(
moduÀ_t
);

234 
moduÀ_u∆ﬂd
(
moduÀ_t
);

235 
moduÀ_gëid
(
moduÀ_t
);

236 
moduÀ_t
 
moduÀ_gë‚ext
(module_t);

237 c⁄° * 
moduÀ_gë«me
(
moduÀ_t
);

238 
moduÀ_£t•ecific
(
moduÀ_t
, 
mod•ecific_t
 *);

239 
lökî_fûe
 *
moduÀ_fûe
(
moduÀ_t
);

241 #ifdef 
MOD_DEBUG


242 
mod_debug
;

243 
	#MOD_DEBUG_REFS
 1

	)

245 
	#MOD_DPF
(
ˇt
, 
¨gs
) do { \

246 i‡(
mod_debug
 & 
MOD_DEBUG_
##
ˇt
) \

247 
¥ötf
 
¨gs
; \

248 } 0)

	)

252 
	#MOD_DPF
(
ˇt
, 
¨gs
)

	)

256 
	#MAXMODNAME
 32

	)

258 
	smoduÀ_°©
 {

259 
	mvîsi⁄
;

260 
	m«me
[
MAXMODNAME
];

261 
	mªfs
;

262 
	mid
;

263 
mod•ecific_t
 
	md©a
;

266 #i‚de‡
_KERNEL


268 
	~<sys/cdefs.h
>

270 
__BEGIN_DECLS


271 
mod√xt
(
_modid
);

272 
mod‚ext
(
_modid
);

273 
mod°©
(
_modid
, 
moduÀ_°©
 *
_°©
);

274 
modföd
(c⁄° *
_«me
);

275 
	g__END_DECLS


	@/usr/include/sys/mutex.h

34 #i‚de‡
_SYS_MUTEX_H_


35 
	#_SYS_MUTEX_H_


	)

37 
	~<sys/queue.h
>

38 
	~<sys/_lock.h
>

39 
	~<sys/_muãx.h
>

41 #ifde‡
_KERNEL


42 
	~<sys/p˝u.h
>

43 
	~<sys/lock_¥ofûe.h
>

44 
	~<sys/lock°©.h
>

45 
	~<machöe/©omic.h
>

46 
	~<machöe/˝ufunc.h
>

52 
	#MTX_DEF
 0x00000000

	)

53 
	#MTX_SPIN
 0x00000001

	)

54 
	#MTX_RECURSE
 0x00000004

	)

55 
	#MTX_NOWITNESS
 0x00000008

	)

56 
	#MTX_NOPROFILE
 0x00000020

	)

57 
	#MTX_NEW
 0x00000040

	)

63 
	#MTX_QUIET
 
LOP_QUIET


	)

64 
	#MTX_DUPOK
 
LOP_DUPOK


	)

70 
	#MTX_UNOWNED
 0x00000000

	)

71 
	#MTX_RECURSED
 0x00000001

	)

72 
	#MTX_CONTESTED
 0x00000002

	)

73 
	#MTX_DESTROYED
 0x00000004

	)

74 
	#MTX_FLAGMASK
 (
MTX_RECURSED
 | 
MTX_CONTESTED
 | 
MTX_DESTROYED
)

	)

92 
_mtx_öô
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
«me
, c⁄° *
ty≥
,

93 
›ts
);

94 
_mtx_de°roy
(vﬁ©ûê
uöçå_t
 *
c
);

95 
mtx_sysöô
(*
¨g
);

96 
_mtx_åylock_Êags_öt
(
mtx
 *
m
, 
›ts
 
LOCK_FILE_LINE_ARG_DEF
);

97 
_mtx_åylock_Êags_
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

98 
löe
);

99 
muãx_öô
();

100 #i‡
LOCK_DEBUG
 > 0

101 
__mtx_lock_¶ìp
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v
, 
›ts
,

102 c⁄° *
fûe
, 
löe
);

103 
__mtx_u∆ock_¶ìp
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v
, 
›ts
,

104 c⁄° *
fûe
, 
löe
);

106 
__mtx_lock_¶ìp
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v
);

107 
__mtx_u∆ock_¶ìp
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v
);

110 #ifde‡
SMP


111 #i‡
LOCK_DEBUG
 > 0

112 
_mtx_lock_•ö_cookõ
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v
, 
›ts
,

113 c⁄° *
fûe
, 
löe
);

115 
_mtx_lock_•ö_cookõ
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v
);

118 
__mtx_lock_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

119 
löe
);

120 
__mtx_u∆ock_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

121 
löe
);

122 
__mtx_lock_•ö_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

123 
löe
);

124 
__mtx_åylock_•ö_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
,

125 c⁄° *
fûe
, 
löe
);

126 
__mtx_u∆ock_•ö_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
,

127 c⁄° *
fûe
, 
löe
);

128 
mtx_•ö_waô_u∆ocked
(
mtx
 *
m
);

130 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

131 
__mtx_as£π
(c⁄° vﬁ©ûê
uöçå_t
 *
c
, 
wh©
, c⁄° *
fûe
,

132 
löe
);

134 
thªad_lock_Êags_
(
thªad
 *, , const *, );

135 #i‡
LOCK_DEBUG
 > 0

136 
_thªad_lock
(
thªad
 *
td
, 
›ts
, c⁄° *
fûe
, 
löe
);

138 
_thªad_lock
(
thªad
 *);

141 #i‡
deföed
(
LOCK_PROFILING
Ë|| (deföed(
KLD_MODULE
Ë&& !deföed(
KLD_TIED
))

142 
	#thªad_lock
(
tdp
) \

143 
	`thªad_lock_Êags_
((
tdp
), 0, 
__FILE__
, 
__LINE__
)

	)

144 #ñi‡
LOCK_DEBUG
 > 0

145 
	#thªad_lock
(
tdp
) \

146 
	`_thªad_lock
((
tdp
), 0, 
__FILE__
, 
__LINE__
)

	)

148 
	#thªad_lock
(
tdp
) \

149 
	`_thªad_lock
((
tdp
))

	)

152 #i‡
LOCK_DEBUG
 > 0

153 
	#thªad_lock_Êags
(
tdp
, 
›t
) \

154 
	`thªad_lock_Êags_
((
tdp
), (
›t
), 
__FILE__
, 
__LINE__
)

	)

156 
	#thªad_lock_Êags
(
tdp
, 
›t
) \

157 
	`_thªad_lock
(
tdp
)

	)

160 
	#thªad_u∆ock
(
tdp
) \

161 
	`mtx_u∆ock_•ö
((
tdp
)->
td_lock
)

	)

168 
	#mtx_öô
(
m
, 
n
, 
t
, 
o
) \

169 
	`_mtx_öô
(&(
m
)->
mtx_lock
, 
n
, 
t
, 
o
)

	)

170 
	#mtx_de°roy
(
m
) \

171 
	`_mtx_de°roy
(&(
m
)->
mtx_lock
)

	)

172 
	#mtx_åylock_Êags_
(
m
, 
o
, 
f
, 
l
) \

173 
	`_mtx_åylock_Êags_
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

174 #i‡
LOCK_DEBUG
 > 0

175 
	#_mtx_lock_¶ìp
(
m
, 
v
, 
o
, 
f
, 
l
) \

176 
	`__mtx_lock_¶ìp
(&(
m
)->
mtx_lock
, 
v
, 
o
, 
f
, 
l
)

	)

177 
	#_mtx_u∆ock_¶ìp
(
m
, 
v
, 
o
, 
f
, 
l
) \

178 
	`__mtx_u∆ock_¶ìp
(&(
m
)->
mtx_lock
, 
v
, 
o
, 
f
, 
l
)

	)

180 
	#_mtx_lock_¶ìp
(
m
, 
v
, 
o
, 
f
, 
l
) \

181 
	`__mtx_lock_¶ìp
(&(
m
)->
mtx_lock
, 
v
)

	)

182 
	#_mtx_u∆ock_¶ìp
(
m
, 
v
, 
o
, 
f
, 
l
) \

183 
	`__mtx_u∆ock_¶ìp
(&(
m
)->
mtx_lock
, 
v
)

	)

185 #ifde‡
SMP


186 #i‡
LOCK_DEBUG
 > 0

187 
	#_mtx_lock_•ö
(
m
, 
v
, 
o
, 
f
, 
l
) \

188 
	`_mtx_lock_•ö_cookõ
(&(
m
)->
mtx_lock
, 
v
, 
o
, 
f
, 
l
)

	)

190 
	#_mtx_lock_•ö
(
m
, 
v
, 
o
, 
f
, 
l
) \

191 
	`_mtx_lock_•ö_cookõ
(&(
m
)->
mtx_lock
, 
v
)

	)

194 
	#_mtx_lock_Êags
(
m
, 
o
, 
f
, 
l
) \

195 
	`__mtx_lock_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

196 
	#_mtx_u∆ock_Êags
(
m
, 
o
, 
f
, 
l
) \

197 
	`__mtx_u∆ock_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

198 
	#_mtx_lock_•ö_Êags
(
m
, 
o
, 
f
, 
l
) \

199 
	`__mtx_lock_•ö_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

200 
	#_mtx_åylock_•ö_Êags
(
m
, 
o
, 
f
, 
l
) \

201 
	`__mtx_åylock_•ö_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

202 
	#_mtx_u∆ock_•ö_Êags
(
m
, 
o
, 
f
, 
l
) \

203 
	`__mtx_u∆ock_•ö_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

204 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

205 
	#_mtx_as£π
(
m
, 
w
, 
f
, 
l
) \

206 
	`__mtx_as£π
(&(
m
)->
mtx_lock
, 
w
, 
f
, 
l
)

	)

209 
	#mtx_ªcur£
 
lock_obje˘
.
lo_d©a


	)

214 
	#_mtx_obèö_lock
(
mp
, 
tid
) \

215 
	`©omic_cmp£t_acq_±r
(&(
mp
)->
mtx_lock
, 
MTX_UNOWNED
, (
tid
))

	)

217 
	#_mtx_obèö_lock_„tch
(
mp
, 
vp
, 
tid
) \

218 
	`©omic_fcmp£t_acq_±r
(&(
mp
)->
mtx_lock
, 
vp
, (
tid
))

	)

221 
	#_mtx_ªÀa£_lock
(
mp
, 
tid
) \

222 
	`©omic_cmp£t_ªl_±r
(&(
mp
)->
mtx_lock
, (
tid
), 
MTX_UNOWNED
)

	)

225 
	#_mtx_ªÀa£_lock_quick
(
mp
) \

226 
	`©omic_°‹e_ªl_±r
(&(
mp
)->
mtx_lock
, 
MTX_UNOWNED
)

	)

228 
	#_mtx_ªÀa£_lock_„tch
(
mp
, 
vp
) \

229 
	`©omic_fcmp£t_ªl_±r
(&(
mp
)->
mtx_lock
, (
vp
), 
MTX_UNOWNED
)

	)

238 
	#__mtx_lock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

239 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

240 
uöçå_t
 
_v
 = 
MTX_UNOWNED
; \

242 i‡(
	`__¥edi˘_Ál£
(
	`LOCKSTAT_PROFILE_ENABLED
(
ad≠tive__acquúe
) ||\

243 !
	`_mtx_obèö_lock_„tch
((
mp
), &
_v
, 
_tid
))) \

244 
	`_mtx_lock_¶ìp
((
mp
), 
_v
, (
›ts
), (
fûe
), (
löe
)); \

245 } 0)

	)

253 #ifde‡
SMP


254 
	#__mtx_lock_•ö
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

255 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

256 
uöçå_t
 
_v
 = 
MTX_UNOWNED
; \

258 
	`•ölock_íãr
(); \

259 i‡(
	`__¥edi˘_Ál£
(
	`LOCKSTAT_PROFILE_ENABLED
(
•ö__acquúe
) || \

260 !
	`_mtx_obèö_lock_„tch
((
mp
), &
_v
, 
_tid
))) \

261 
	`_mtx_lock_•ö
((
mp
), 
_v
, (
›ts
), (
fûe
), (
löe
)); \

262 } 0)

	)

263 
	#__mtx_åylock_•ö
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
Ë
	`__exãnsi⁄__
 ({ \

264 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

265 
_ªt
; \

267 
	`•ölock_íãr
(); \

268 i‡(((
mp
)->
mtx_lock
 !
MTX_UNOWNED
 || !
	`_mtx_obèö_lock
((mp), 
_tid
))) {\

269 
	`•ölock_exô
(); \

270 
_ªt
 = 0; \

272 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
•ö__acquúe
, \

273 
mp
, 0, 0, 
fûe
, 
löe
); \

274 
_ªt
 = 1; \

276 
_ªt
; \

277 })

	)

279 
	#__mtx_lock_•ö
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

280 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

282 
	`•ölock_íãr
(); \

283 i‡((
mp
)->
mtx_lock
 =
_tid
) \

284 (
mp
)->
mtx_ªcur£
++; \

286 
	`KASSERT
((
mp
)->
mtx_lock
 =
MTX_UNOWNED
, ("corrupt spinlock")); \

287 (
mp
)->
mtx_lock
 = 
_tid
; \

289 } 0)

	)

290 
	#__mtx_åylock_•ö
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
Ë
	`__exãnsi⁄__
 ({ \

291 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

292 
_ªt
; \

294 
	`•ölock_íãr
(); \

295 i‡((
mp
)->
mtx_lock
 !
MTX_UNOWNED
) { \

296 
	`•ölock_exô
(); \

297 
_ªt
 = 0; \

299 (
mp
)->
mtx_lock
 = 
_tid
; \

300 
_ªt
 = 1; \

302 
_ªt
; \

303 })

	)

307 
	#__mtx_u∆ock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

308 
uöçå_t
 
_v
 = (uöçå_t)(
tid
); \

310 i‡(
	`__¥edi˘_Ál£
(
	`LOCKSTAT_PROFILE_ENABLED
(
ad≠tive__ªÀa£
) ||\

311 !
	`_mtx_ªÀa£_lock_„tch
((
mp
), &
_v
))) \

312 
	`_mtx_u∆ock_¶ìp
((
mp
), 
_v
, (
›ts
), (
fûe
), (
löe
)); \

313 } 0)

	)

325 #ifde‡
SMP


326 
	#__mtx_u∆ock_•ö
(
mp
) do { \

327 i‡(
	`mtx_ªcur£d
((
mp
))) \

328 (
mp
)->
mtx_ªcur£
--; \

330 
	`LOCKSTAT_PROFILE_RELEASE_LOCK
(
•ö__ªÀa£
, 
mp
); \

331 
	`_mtx_ªÀa£_lock_quick
((
mp
)); \

333 
	`•ölock_exô
(); \

334 } 0)

	)

336 
	#__mtx_u∆ock_•ö
(
mp
) do { \

337 i‡(
	`mtx_ªcur£d
((
mp
))) \

338 (
mp
)->
mtx_ªcur£
--; \

340 
	`LOCKSTAT_PROFILE_RELEASE_LOCK
(
•ö__ªÀa£
, 
mp
); \

341 (
mp
)->
mtx_lock
 = 
MTX_UNOWNED
; \

343 
	`•ölock_exô
(); \

344 } 0)

	)

382 
	#mtx_lock
(
m
Ë
	`mtx_lock_Êags
((m), 0)

	)

383 
	#mtx_lock_•ö
(
m
Ë
	`mtx_lock_•ö_Êags
((m), 0)

	)

384 
	#mtx_åylock
(
m
Ë
	`mtx_åylock_Êags
((m), 0)

	)

385 
	#mtx_åylock_•ö
(
m
Ë
	`mtx_åylock_•ö_Êags
((m), 0)

	)

386 
	#mtx_u∆ock
(
m
Ë
	`mtx_u∆ock_Êags
((m), 0)

	)

387 
	#mtx_u∆ock_•ö
(
m
Ë
	`mtx_u∆ock_•ö_Êags
((m), 0)

	)

389 
	gmtx_poﬁ
;

391 
mtx_poﬁ
 *
mtx_poﬁ_¸óã
(c⁄° *
mtx_«me
, 
poﬁ_size
, 
›ts
);

392 
mtx_poﬁ_de°roy
(
mtx_poﬁ
 **
poﬁp
);

393 
mtx
 *
mtx_poﬁ_föd
(
mtx_poﬁ
 *
poﬁ
, *
±r
);

394 
mtx
 *
mtx_poﬁ_Æloc
(
mtx_poﬁ
 *
poﬁ
);

395 
	#mtx_poﬁ_lock
(
poﬁ
, 
±r
) \

396 
	`mtx_lock
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

397 
	#mtx_poﬁ_lock_•ö
(
poﬁ
, 
±r
) \

398 
	`mtx_lock_•ö
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

399 
	#mtx_poﬁ_u∆ock
(
poﬁ
, 
±r
) \

400 
	`mtx_u∆ock
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

401 
	#mtx_poﬁ_u∆ock_•ö
(
poﬁ
, 
±r
) \

402 
	`mtx_u∆ock_•ö
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

407 
mtx_poﬁ
 *
mtxpoﬁ_¶ìp
;

409 #i‚de‡
LOCK_DEBUG


410 #îr‹ 
LOCK_DEBUG
 
nŸ
 
deföed
, 
ö˛ude
 <
sys
/
lock
.
h
> 
bef‹e
 <sys/
muãx
.h>

412 #i‡
LOCK_DEBUG
 > 0 || 
deföed
(
MUTEX_NOINLINE
)

413 
	#mtx_lock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

414 
	`_mtx_lock_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

415 
	#mtx_u∆ock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

416 
	`_mtx_u∆ock_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

417 
	#mtx_lock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

418 
	`_mtx_lock_•ö_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

419 
	#mtx_åylock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

420 
	`_mtx_åylock_•ö_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

421 
	#mtx_u∆ock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

422 
	`_mtx_u∆ock_•ö_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

424 
	#mtx_lock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

425 
	`__mtx_lock
((
m
), 
cuπhªad
, (
›ts
), (
fûe
), (
löe
))

	)

426 
	#mtx_u∆ock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

427 
	`__mtx_u∆ock
((
m
), 
cuπhªad
, (
›ts
), (
fûe
), (
löe
))

	)

428 
	#mtx_lock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

429 
	`__mtx_lock_•ö
((
m
), 
cuπhªad
, (
›ts
), (
fûe
), (
löe
))

	)

430 
	#mtx_åylock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

431 
	`__mtx_åylock_•ö
((
m
), 
cuπhªad
, (
›ts
), (
fûe
), (
löe
))

	)

432 
	#mtx_u∆ock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

433 
	`__mtx_u∆ock_•ö
((
m
))

	)

436 #ifde‡
INVARIANTS


437 
	#mtx_as£π_
(
m
, 
wh©
, 
fûe
, 
löe
) \

438 
	`_mtx_as£π
((
m
), (
wh©
), (
fûe
), (
löe
))

	)

440 
	#GIANT_REQUIRED
 
	`mtx_as£π_
(&
Gü¡
, 
MA_OWNED
, 
__FILE__
, 
__LINE__
)

	)

443 
	#mtx_as£π_
(
m
, 
wh©
, 
fûe
, 
löe
Ë()0

	)

444 
	#GIANT_REQUIRED


	)

447 
	#mtx_lock_Êags
(
m
, 
›ts
) \

448 
	`mtx_lock_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

449 
	#mtx_u∆ock_Êags
(
m
, 
›ts
) \

450 
	`mtx_u∆ock_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

451 
	#mtx_lock_•ö_Êags
(
m
, 
›ts
) \

452 
	`mtx_lock_•ö_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

453 
	#mtx_u∆ock_•ö_Êags
(
m
, 
›ts
) \

454 
	`mtx_u∆ock_•ö_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

455 
	#mtx_åylock_Êags
(
m
, 
›ts
) \

456 
	`mtx_åylock_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

457 
	#mtx_åylock_•ö_Êags
(
m
, 
›ts
) \

458 
	`mtx_åylock_•ö_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

459 
	#mtx_as£π
(
m
, 
wh©
) \

460 
	`mtx_as£π_
((
m
), (
wh©
), 
__FILE__
, 
__LINE__
)

	)

462 
	#mtx_¶ìp
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
timo
) \

463 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), \

464 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

466 
	#MTX_READ_VALUE
(
m
Ë((m)->
mtx_lock
)

	)

468 
	#mtx_öôülized
(
m
Ë
	`lock_öôülized
(&(m)->
lock_obje˘
)

	)

470 
	#lv_mtx_ow√r
(
v
Ë((
thªad
 *)((vË& ~
MTX_FLAGMASK
))

	)

472 
	#mtx_ow√r
(
m
Ë
	`lv_mtx_ow√r
(
	`MTX_READ_VALUE
(m))

	)

474 
	#mtx_ow√d
(
m
Ë(
	`mtx_ow√r
(mË=
cuπhªad
)

	)

476 
	#mtx_ªcur£d
(
m
Ë((m)->
mtx_ªcur£
 !0)

	)

478 
	#mtx_«me
(
m
Ë((m)->
lock_obje˘
.
lo_«me
)

	)

483 
mtx
 
Gü¡
;

484 
mtx
 
blocked_lock
;

493 #i‚de‡
DROP_GIANT


494 
	#DROP_GIANT
() \

496 
_gü¡˙t
 = 0; \

497 
	`WITNESS_SAVE_DECL
(
Gü¡
); \

499 i‡(
	`mtx_ow√d
(&
Gü¡
)) { \

500 
	`WITNESS_SAVE
(&
Gü¡
.
lock_obje˘
, Giant); \

501 
_gü¡˙t
 = 0; 
	`mtx_ow√d
(&
Gü¡
) && \

502 !
	`SCHEDULER_STOPPED
(); 
_gü¡˙t
++) \

503 
	`mtx_u∆ock
(&
Gü¡
); \

504 }

	)

506 
	#PICKUP_GIANT
() \

507 
	`PARTIAL_PICKUP_GIANT
(); \

508 } 0)

	)

510 
	#PARTIAL_PICKUP_GIANT
() \

511 
	`mtx_as£π
(&
Gü¡
, 
MA_NOTOWNED
); \

512 i‡(
_gü¡˙t
 > 0) { \

513 
_gü¡˙t
--) \

514 
	`mtx_lock
(&
Gü¡
); \

515 
	`WITNESS_RESTORE
(&
Gü¡
.
lock_obje˘
, Giant); \

516 }

	)

519 
	smtx_¨gs
 {

520 *
	mma_mtx
;

521 c⁄° *
	mma_desc
;

522 
	mma_›ts
;

525 
	#MTX_SYSINIT
(
«me
, 
mtx
, 
desc
, 
›ts
) \

526 
mtx_¨gs
 
«me
##
_¨gs
 = { \

527 (
mtx
), \

528 (
desc
), \

529 (
›ts
) \

531 
	`SYSINIT
(
«me
##
_mtx_sysöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

532 
mtx_sysöô
, &
«me
##
_¨gs
); \

533 
	`SYSUNINIT
(
«me
##
_mtx_sysunöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

534 
_mtx_de°roy
, 
	`__DEVOLATILE
(*, &(
mtx
)->
mtx_lock
))

	)

543 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

544 
	#MA_OWNED
 
LA_XLOCKED


	)

545 
	#MA_NOTOWNED
 
LA_UNLOCKED


	)

546 
	#MA_RECURSED
 
LA_RECURSED


	)

547 
	#MA_NOTRECURSED
 
LA_NOTRECURSED


	)

553 
	#MTX_NETWORK_LOCK
 "√tw‹k drivî"

	)

	@/usr/include/sys/param.h

40 #i‚de‡
_SYS_PARAM_H_


41 
	#_SYS_PARAM_H_


	)

43 
	~<sys/_nuŒ.h
>

45 
	#BSD
 199506

	)

46 
	#BSD4_3
 1

	)

47 
	#BSD4_4
 1

	)

62 #unde‡
__FªeBSD_vîsi⁄


63 
	#__FªeBSD_vîsi⁄
 1200086

	)

78 #unde‡
__FªeBSD_kî√l__


79 
	#__FªeBSD_kî√l__


	)

81 #i‡
deföed
(
_KERNEL
Ë|| deföed(
IN_RTLD
)

82 
	#P_OSREL_SIGWAIT
 700000

	)

83 
	#P_OSREL_SIGSEGV
 700004

	)

84 
	#P_OSREL_MAP_ANON
 800104

	)

85 
	#P_OSREL_MAP_FSTRICT
 1100036

	)

86 
	#P_OSREL_SHUTDOWN_ENOTCONN
 1100077

	)

87 
	#P_OSREL_MAP_GUARD
 1200035

	)

88 
	#P_OSREL_WRFSBASE
 1200041

	)

89 
	#P_OSREL_CK_CYLGRP
 1200046

	)

90 
	#P_OSREL_VMTOTAL64
 1200054

	)

92 
	#P_OSREL_MAJOR
(
x
Ë((xË/ 100000)

	)

95 #i‚de‡
LOCORE


96 
	~<sys/ty≥s.h
>

105 
	~<sys/sy¶imôs.h
>

107 
	#MAXCOMLEN
 19

	)

108 
	#MAXINTERP
 
PATH_MAX


	)

109 
	#MAXLOGNAME
 33

	)

110 
	#MAXUPRC
 
CHILD_MAX


	)

111 
	#NCARGS
 
ARG_MAX


	)

112 
	#NGROUPS
 (
NGROUPS_MAX
+1Ë

	)

113 
	#NOFILE
 
OPEN_MAX


	)

114 
	#NOGROUP
 65535

	)

115 
	#MAXHOSTNAMELEN
 256

	)

116 
	#SPECNAMELEN
 63

	)

119 #ifde‡
_KERNEL


120 
	~<sys/cdefs.h
>

121 
	~<sys/î∫o.h
>

122 #i‚de‡
LOCORE


123 
	~<sys/time.h
>

124 
	~<sys/¥i‹ôy.h
>

127 #i‚de‡
FALSE


128 
	#FALSE
 0

	)

130 #i‚de‡
TRUE


131 
	#TRUE
 1

	)

135 #i‚de‡
_KERNEL


137 
	~<sys/sig«l.h
>

141 
	~<machöe/∑øm.h
>

142 #i‚de‡
_KERNEL


143 
	~<sys/limôs.h
>

146 #i‚de‡
DEV_BSHIFT


147 
	#DEV_BSHIFT
 9

	)

149 
	#DEV_BSIZE
 (1<<
DEV_BSHIFT
)

	)

151 #i‚de‡
BLKDEV_IOSIZE


152 
	#BLKDEV_IOSIZE
 
PAGE_SIZE


	)

154 #i‚de‡
DFLTPHYS


155 
	#DFLTPHYS
 (64 * 1024Ë

	)

157 #i‚de‡
MAXPHYS


158 
	#MAXPHYS
 (128 * 1024Ë

	)

160 #i‚de‡
MAXDUMPPGS


161 
	#MAXDUMPPGS
 (
DFLTPHYS
/
PAGE_SIZE
)

	)

168 #i‚def 
MSIZE


169 
	#MSIZE
 256

	)

172 #i‚def 
MCLSHIFT


173 
	#MCLSHIFT
 11

	)

176 
	#MCLBYTES
 (1 << 
MCLSHIFT
Ë

	)

178 #i‡
PAGE_SIZE
 < 2048

179 
	#MJUMPAGESIZE
 
MCLBYTES


	)

180 #ñi‡
PAGE_SIZE
 <= 8192

181 
	#MJUMPAGESIZE
 
PAGE_SIZE


	)

183 
	#MJUMPAGESIZE
 (8 * 1024)

	)

186 
	#MJUM9BYTES
 (9 * 1024Ë

	)

187 
	#MJUM16BYTES
 (16 * 1024Ë

	)

194 #i‚de‡
˘ob


195 
	#˘ob
(
x
Ë((x)<<
PAGE_SHIFT
)

	)

199 #i‚de‡
btoc


200 
	#btoc
(
x
Ë(((
vm_off£t_t
)(x)+
PAGE_MASK
)>>
PAGE_SHIFT
)

	)

209 #i‚de‡
btodb


210 
	#btodb
(
byãs
) \

211 ( (
byãs
) > () \

212 ? (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
) \

213 : (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
))

	)

216 #i‚de‡
dbtob


217 
	#dbtob
(
db
) \

218 ((
off_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)

221 
	#PRIMASK
 0x0ff

	)

222 
	#PCATCH
 0x100

	)

223 
	#PDROP
 0x200

	)

225 
	#NZERO
 0

	)

227 
	#NBBY
 8

	)

228 
	#NBPW
 (Ë

	)

230 
	#CMASK
 022

	)

232 
	#NODEV
 (
dev_t
)(-1Ë

	)

264 
	#MAXBSIZE
 65536

	)

265 #i‚def 
MAXBCACHEBUF


266 
	#MAXBCACHEBUF
 
MAXBSIZE


	)

268 #i‚def 
BKVASIZE


269 
	#BKVASIZE
 16384

	)

271 
	#BKVAMASK
 (
BKVASIZE
-1)

	)

282 
	#MAXPATHLEN
 
PATH_MAX


	)

283 
	#MAXSYMLINKS
 32

	)

286 
	#£tbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] |1<<((i)%NBBY))

	)

287 
	#˛rbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

288 
	#is£t
(
a
,
i
) \

289 (((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY)))

	)

290 
	#is˛r
(
a
,
i
) \

291 ((((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

294 #i‚de‡
howm™y


295 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

297 
	#nôems
(
x
Ë(((x)Ë/ ((x)[0]))

	)

298 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

299 
	#rounddown2
(
x
, 
y
Ë((x)&(~((y)-1))Ë

	)

300 
	#roundup
(
x
, 
y
Ë((((x)+((y)-1))/(y))*(y)Ë

	)

301 
	#roundup2
(
x
, 
y
Ë(((x)+((y)-1))&(~((y)-1))Ë

	)

302 
	#powîof2
(
x
Ë((((x)-1)&(x))==0)

	)

305 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

306 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

308 #ifde‡
_KERNEL


312 #i‚de‡
LOCORE


313 #i‚de‡
_BYTEORDER_PROTOTYPED


314 
	#_BYTEORDER_PROTOTYPED


	)

315 
__BEGIN_DECLS


316 
__uöt32_t
 
ht⁄l
(__uint32_t);

317 
__uöt16_t
 
ht⁄s
(__uint16_t);

318 
__uöt32_t
 
¡ohl
(__uint32_t);

319 
__uöt16_t
 
¡ohs
(__uint16_t);

320 
	g__END_DECLS


324 #i‚de‡
_BYTEORDER_FUNC_DEFINED


325 
	#_BYTEORDER_FUNC_DEFINED


	)

326 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

327 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

328 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

329 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

344 
	#FSHIFT
 11

	)

345 
	#FSCALE
 (1<<
FSHIFT
)

	)

347 
	#dbtoc
(
db
) \

348 ((
db
 + (
	`˘odb
(1Ë- 1)Ë>> (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

350 
	#˘odb
(
db
) \

351 ((
db
Ë<< (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

356 
	#membî2°ru˘
(
s
, 
m
, 
x
) \

357 ((
s
 *)(*)((*)(
x
Ë- 
	`off£tof
(s, 
m
)))

	)

363 
	#__PAST_END
(
¨øy
, 
off£t
Ë(((
	`__ty≥of__
(*◊ºay)Ë*)◊ºay))[off£t])

	)

	@/usr/include/sys/pciio.h

33 #i‚de‡
_SYS_PCIIO_H_


34 
	#_SYS_PCIIO_H_


	)

36 
	~<sys/ioccom.h
>

38 
	#PCI_MAXNAMELEN
 16

	)

41 
	mPCI_GETCONF_LAST_DEVICE
,

42 
	mPCI_GETCONF_LIST_CHANGED
,

43 
	mPCI_GETCONF_MORE_DEVS
,

44 
	mPCI_GETCONF_ERROR


45 } 
	tpci_gëc⁄f_°©us
;

48 
	mPCI_GETCONF_NO_MATCH
 = 0x0000,

49 
	mPCI_GETCONF_MATCH_DOMAIN
 = 0x0001,

50 
	mPCI_GETCONF_MATCH_BUS
 = 0x0002,

51 
	mPCI_GETCONF_MATCH_DEV
 = 0x0004,

52 
	mPCI_GETCONF_MATCH_FUNC
 = 0x0008,

53 
	mPCI_GETCONF_MATCH_NAME
 = 0x0010,

54 
	mPCI_GETCONF_MATCH_UNIT
 = 0x0020,

55 
	mPCI_GETCONF_MATCH_VENDOR
 = 0x0040,

56 
	mPCI_GETCONF_MATCH_DEVICE
 = 0x0080,

57 
	mPCI_GETCONF_MATCH_CLASS
 = 0x0100

58 } 
	tpci_gëc⁄f_Êags
;

60 
	spci£l
 {

61 
u_öt32_t
 
	mpc_domaö
;

62 
u_öt8_t
 
	mpc_bus
;

63 
u_öt8_t
 
	mpc_dev
;

64 
u_öt8_t
 
	mpc_func
;

67 
	spci_c⁄f
 {

68 
pci£l
 
	mpc_£l
;

69 
u_öt8_t
 
	mpc_hdr
;

70 
u_öt16_t
 
	mpc_subvíd‹
;

71 
u_öt16_t
 
	mpc_subdevi˚
;

73 
u_öt16_t
 
	mpc_víd‹
;

74 
u_öt16_t
 
	mpc_devi˚
;

76 
u_öt8_t
 
	mpc_˛ass
;

77 
u_öt8_t
 
	mpc_sub˛ass
;

78 
u_öt8_t
 
	mpc_¥ogif
;

79 
u_öt8_t
 
	mpc_ªvid
;

80 
	mpd_«me
[
PCI_MAXNAMELEN
 + 1];

81 
u_l⁄g
 
	mpd_unô
;

84 
	spci_m©ch_c⁄f
 {

85 
pci£l
 
	mpc_£l
;

86 
	mpd_«me
[
PCI_MAXNAMELEN
 + 1];

87 
u_l⁄g
 
	mpd_unô
;

88 
u_öt16_t
 
	mpc_víd‹
;

89 
u_öt16_t
 
	mpc_devi˚
;

90 
u_öt8_t
 
	mpc_˛ass
;

91 
pci_gëc⁄f_Êags
 
	mÊags
;

94 
	spci_c⁄f_io
 {

95 
u_öt32_t
 
	m∑t_buf_Àn
;

96 
u_öt32_t
 
	mnum_∑âîns
;

97 
pci_m©ch_c⁄f
 *
	m∑âîns
;

98 
u_öt32_t
 
	mm©ch_buf_Àn
;

99 
u_öt32_t
 
	mnum_m©ches
;

100 
pci_c⁄f
 *
	mm©ches
;

101 
u_öt32_t
 
	moff£t
;

102 
u_öt32_t
 
	mgíî©i⁄
;

103 
pci_gëc⁄f_°©us
 
	m°©us
;

106 
	spci_io
 {

107 
pci£l
 
	mpi_£l
;

108 
	mpi_ªg
;

109 
	mpi_width
;

110 
u_öt32_t
 
	mpi_d©a
;

113 
	spci_b¨_io
 {

114 
pci£l
 
	mpbi_£l
;

115 
	mpbi_ªg
;

116 
	mpbi_íabÀd
;

117 
uöt64_t
 
	mpbi_ba£
;

118 
uöt64_t
 
	mpbi_Àngth
;

121 
	spci_vpd_ñemít
 {

122 
	mpve_keyw‹d
[2];

123 
uöt8_t
 
	mpve_Êags
;

124 
uöt8_t
 
	mpve_d©Æí
;

125 
uöt8_t
 
	mpve_d©a
[0];

128 
	#PVE_FLAG_IDENT
 0x01

	)

129 
	#PVE_FLAG_RW
 0x02

	)

131 
	#PVE_NEXT
(
pve
) \

132 ((
pci_vpd_ñemít
 *)((*)(
pve
) + \

133 (
pci_vpd_ñemít
Ë+ (
pve
)->
pve_d©Æí
))

	)

135 
	spci_li°_vpd_io
 {

136 
pci£l
 
	m∂vi_£l
;

137 
size_t
 
	m∂vi_Àn
;

138 
pci_vpd_ñemít
 *
	m∂vi_d©a
;

141 
	spci_b¨_mm≠
 {

142 *
	mpbm_m≠_ba£
;

143 
size_t
 
	mpbm_m≠_Àngth
;

145 
uöt64_t
 
	mpbm_b¨_Àngth
;

146 
	mpbm_b¨_off
;

148 
pci£l
 
	mpbm_£l
;

149 
	mpbm_ªg
;

150 
	mpbm_Êags
;

151 
	mpbm_mem©å
;

154 
	#PCIIO_BAR_MMAP_FIXED
 0x01

	)

155 
	#PCIIO_BAR_MMAP_EXCL
 0x02

	)

156 
	#PCIIO_BAR_MMAP_RW
 0x04

	)

157 
	#PCIIO_BAR_MMAP_ACTIVATE
 0x08

	)

159 
	#PCIOCGETCONF
 
	`_IOWR
('p', 5, 
pci_c⁄f_io
)

	)

160 
	#PCIOCREAD
 
	`_IOWR
('p', 2, 
pci_io
)

	)

161 
	#PCIOCWRITE
 
	`_IOWR
('p', 3, 
pci_io
)

	)

162 
	#PCIOCATTACHED
 
	`_IOWR
('p', 4, 
pci_io
)

	)

163 
	#PCIOCGETBAR
 
	`_IOWR
('p', 6, 
pci_b¨_io
)

	)

164 
	#PCIOCLISTVPD
 
	`_IOWR
('p', 7, 
pci_li°_vpd_io
)

	)

165 
	#PCIOCBARMMAP
 
	`_IOWR
('p', 8, 
pci_b¨_mm≠
)

	)

	@/usr/include/sys/pcpu.h

35 #i‚de‡
_SYS_PCPU_H_


36 
	#_SYS_PCPU_H_


	)

38 #ifde‡
LOCORE


42 
	~<sys/_˝u£t.h
>

43 
	~<sys/_lock.h
>

44 
	~<sys/_muãx.h
>

45 
	~<sys/_sx.h
>

46 
	~<sys/queue.h
>

47 
	~<sys/_rmlock.h
>

48 
	~<sys/ªsour˚.h
>

49 
	~<machöe/p˝u.h
>

51 
	#DPCPU_SETNAME
 "£t_p˝u"

	)

52 
	#DPCPU_SYMPREFIX
 "p˝u_íåy_"

	)

54 #ifde‡
_KERNEL


59 
uöçå_t
 *
__°¨t_£t_p˝u
;

60 
__GLOBL
(
__°¨t_£t_p˝u
);

61 
uöçå_t
 *
__°›_£t_p˝u
;

62 
__GLOBL
(
__°›_£t_p˝u
);

67 
uöçå_t
 
dp˝u_off
[];

72 
	#DPCPU_START
 ((
uöçå_t
)&
__°¨t_£t_p˝u
)

	)

73 
	#DPCPU_STOP
 ((
uöçå_t
)&
__°›_£t_p˝u
)

	)

74 
	#DPCPU_BYTES
 (
DPCPU_STOP
 - 
DPCPU_START
)

	)

75 
	#DPCPU_MODMIN
 2048

	)

76 
	#DPCPU_SIZE
 
	`roundup2
(
DPCPU_BYTES
, 
PAGE_SIZE
)

	)

77 
	#DPCPU_MODSIZE
 (
DPCPU_SIZE
 - (
DPCPU_BYTES
 - 
DPCPU_MODMIN
))

	)

82 
	#DPCPU_NAME
(
n
Ë
p˝u_íåy_
##
	)
n

83 
	#DPCPU_DECLARE
(
t
, 
n
Ëà
	`DPCPU_NAME
“)

	)

85 
	#DPCPU_DEFINE
(
t
, 
n
) \

86 
_hack
; 
t
 
	`DPCPU_NAME
(
n
Ë
	`__£˘i⁄
(
DPCPU_SETNAME
Ë
__u£d


	)

87 #i‡
deföed
(
KLD_MODULE
Ë&& (deföed(
__Ørch64__
Ë|| deföed(
__riscv
))

103 
	#DPCPU_DEFINE_STATIC
(
t
, 
n
) \

104 
t
 
	`DPCPU_NAME
(
n
Ë
	`__£˘i⁄
(
DPCPU_SETNAME
Ë
__u£d


	)

106 
	#DPCPU_DEFINE_STATIC
(
t
, 
n
) \

107 
t
 
	`DPCPU_NAME
(
n
Ë
	`__£˘i⁄
(
DPCPU_SETNAME
Ë
__u£d


	)

113 
	#_DPCPU_PTR
(
b
, 
n
) \

114 (
	`__ty≥of
(
	`DPCPU_NAME
(
n
))*)((
b
Ë+ (
uöçå_t
)&DPCPU_NAME“))

	)

115 
	#_DPCPU_GET
(
b
, 
n
Ë(*
	`_DPCPU_PTR
(b,Ç))

	)

116 
	#_DPCPU_SET
(
b
, 
n
, 
v
Ë(*
	`_DPCPU_PTR
(b,ÇËv)

	)

121 
	#DPCPU_PTR
(
n
Ë
	`_DPCPU_PTR
(
	`PCPU_GET
(
dy«mic
),Ç)

	)

122 
	#DPCPU_GET
(
n
Ë(*
	`DPCPU_PTR
“))

	)

123 
	#DPCPU_SET
(
n
, 
v
Ë(*
	`DPCPU_PTR
“Ëv)

	)

128 
	#DPCPU_ID_PTR
(
i
, 
n
Ë
	`_DPCPU_PTR
(
dp˝u_off
[(i)],Ç)

	)

129 
	#DPCPU_ID_GET
(
i
, 
n
Ë(*
	`DPCPU_ID_PTR
(i,Ç))

	)

130 
	#DPCPU_ID_SET
(
i
, 
n
, 
v
Ë(*
	`DPCPU_ID_PTR
(i,ÇËv)

	)

135 
	#DPCPU_SUM
(
n
Ë
__exãnsi⁄__
 \

137 
u_öt
 
_i
; \

138 
	`__ty≥of
(*
	`DPCPU_PTR
(
n
)Ë
sum
; \

140 
sum
 = 0; \

141 
	`CPU_FOREACH
(
_i
) { \

142 
sum
 +*
	`DPCPU_ID_PTR
(
_i
, 
n
); \

144 
sum
; \

145 })

	)

147 
	#DPCPU_VARSUM
(
n
, 
v¨
Ë
__exãnsi⁄__
 \

149 
u_öt
 
_i
; \

150 
	`__ty≥of
((
	`DPCPU_PTR
(
n
))->
v¨
Ë
sum
; \

152 
sum
 = 0; \

153 
	`CPU_FOREACH
(
_i
) { \

154 
sum
 +(
	`DPCPU_ID_PTR
(
_i
, 
n
))->
v¨
; \

156 
sum
; \

157 })

	)

159 
	#DPCPU_ZERO
(
n
) do { \

160 
u_öt
 
_i
; \

162 
	`CPU_FOREACH
(
_i
) { \

163 
	`bzîo
(
	`DPCPU_ID_PTR
(
_i
, 
n
), (*
	`DPCPU_PTR
(n))); \

165 } 0)

	)

175 
	sp˝u
 {

176 
thªad
 *
	mpc_cuπhªad
;

177 
thªad
 *
	mpc_idÀthªad
;

178 
thªad
 *
	mpc_Âcuπhªad
;

179 
thªad
 *
	mpc_dódthªad
;

180 
pcb
 *
	mpc_cuΩcb
;

181 
uöt64_t
 
	mpc_swôchtime
;

182 
	mpc_swôchticks
;

183 
u_öt
 
	mpc_˝uid
;

184 
STAILQ_ENTRY
(
p˝u
Ë
	mpc_Æl˝u
;

185 
lock_li°_íåy
 *
	mpc_•ölocks
;

186 
	mpc_˝_time
[
CPUSTATES
];

187 
devi˚
 *
	mpc_devi˚
;

188 *
	mpc_√ti§
;

189 
	mpc_unu£d1
;

190 
	mpc_domaö
;

191 
rm_queue
 
	mpc_rm_queue
;

192 
uöçå_t
 
	mpc_dy«mic
;

193 
uöt64_t
 
	mpc_óæy_dummy_cou¡î
;

205 
	mPCPU_MD_FIELDS
;

206 } 
__Æig√d
(
CACHE_LINE_SIZE
);

208 #ifde‡
_KERNEL


210 
STAILQ_HEAD
(
˝uhód
, 
p˝u
);

212 
˝uhód
 cpuhead;

213 
p˝u
 *
˝uid_to_p˝u
[];

215 
	#cur˝u
 
	`PCPU_GET
(
˝uid
)

	)

216 
	#cuΩroc
 (
cuπhªad
->
td_¥oc
)

	)

217 #i‚de‡
cuπhªad


218 
	#cuπhªad
 
	`PCPU_GET
(
cuπhªad
)

	)

220 
	#curvid©a
 
	`PCPU_GET
(
vid©a
)

	)

222 
	#UMA_PCPU_ALLOC_SIZE
 
PAGE_SIZE


	)

224 #ifde‡
CTASSERT


225 #i‡
deföed
(
__i386__
Ë|| deföed(
__amd64__
)

227 
CTASSERT
((
p˝u
Ë=
UMA_PCPU_ALLOC_SIZE
);

233 
CTASSERT
((
PAGE_SIZE
 / (
p˝u
)) * (pcpu) == PAGE_SIZE);

238 
ölöe
 *

239 
	$zp˝u_gë
(*
ba£
)

242  ((*)(
ba£
Ë+ 
UMA_PCPU_ALLOC_SIZE
 * 
cur˝u
);

243 
	}
}

245 
ölöe
 *

246 
	$zp˝u_gë_˝u
(*
ba£
, 
˝u
)

249  ((*)(
ba£
Ë+ 
UMA_PCPU_ALLOC_SIZE
 * 
˝u
);

250 
	}
}

258 
˝u_p˝u_öô
(
p˝u
 *p˝u, 
˝uid
, 
size_t
 
size
);

259 
db_show_mdp˝u
(
p˝u
 *pcpu);

261 *
dp˝u_Æloc
(
size
);

262 
dp˝u_c›y
(*
s
, 
size
);

263 
dp˝u_‰ì
(*
s
, 
size
);

264 
dp˝u_öô
(*
dp˝u
, 
˝uid
);

265 
p˝u_de°roy
(
p˝u
 *pcpu);

266 
p˝u
 *
p˝u_föd
(
u_öt
 
˝uid
);

267 
p˝u_öô
(
p˝u
 *p˝u, 
˝uid
, 
size_t
 
size
);

	@/usr/include/sys/poll.h

33 #i‚de‡
_SYS_POLL_H_


34 
	#_SYS_POLL_H_


	)

36 
	~<sys/cdefs.h
>

42 
	tnfds_t
;

47 
	spﬁlfd
 {

48 
	mfd
;

49 
	mevíts
;

50 
	mªvíts
;

63 
	#POLLIN
 0x0001

	)

64 
	#POLLPRI
 0x0002

	)

65 
	#POLLOUT
 0x0004

	)

66 
	#POLLRDNORM
 0x0040

	)

67 
	#POLLWRNORM
 
POLLOUT


	)

68 
	#POLLRDBAND
 0x0080

	)

69 
	#POLLWRBAND
 0x0100

	)

71 #i‡
__BSD_VISIBLE


73 
	#POLLINIGNEOF
 0x2000

	)

80 
	#POLLERR
 0x0008

	)

81 
	#POLLHUP
 0x0010

	)

82 
	#POLLNVAL
 0x0020

	)

84 #i‡
__BSD_VISIBLE


86 
	#POLLSTANDARD
 (
POLLIN
|
POLLPRI
|
POLLOUT
|
POLLRDNORM
|
POLLRDBAND
|\

87 
POLLWRBAND
|
POLLERR
|
POLLHUP
|
POLLNVAL
)

	)

94 
	#INFTIM
 (-1)

	)

98 #i‚de‡
_KERNEL


100 #i‡
__BSD_VISIBLE


101 
	~<sys/_ty≥s.h
>

103 
	~<sys/_sig£t.h
>

104 
	~<sys/time•ec.h
>

106 #i‚de‡
_SIGSET_T_DECLARED


107 
	#_SIGSET_T_DECLARED


	)

108 
__sig£t_t
 
	tsig£t_t
;

113 
__BEGIN_DECLS


114 
pﬁl
(
pﬁlfd
 
_pfd
[], 
nfds_t
 
_nfds
, 
_timeout
);

115 #i‡
__BSD_VISIBLE


116 
µﬁl
(
pﬁlfd
 
_pfd
[], 
nfds_t
 
_nfds
,

117 c⁄° 
time•ec
 *
__ª°ri˘
 
_timeout
,

118 c⁄° 
sig£t_t
 *
__ª°ri˘
 
_√wsigmask
);

120 
	g__END_DECLS


	@/usr/include/sys/priv.h

37 #i‚de‡
_SYS_PRIV_H_


38 
	#_SYS_PRIV_H_


	)

58 
	#_PRIV_LOWEST
 1

	)

67 
	#_PRIV_ROOT
 1

	)

68 
	#PRIV_ACCT
 2

	)

69 
	#PRIV_MAXFILES
 3

	)

70 
	#PRIV_MAXPROC
 4

	)

71 
	#PRIV_KTRACE
 5

	)

72 
	#PRIV_SETDUMPER
 6

	)

73 
	#PRIV_REBOOT
 8

	)

74 
	#PRIV_SWAPON
 9

	)

75 
	#PRIV_SWAPOFF
 10

	)

76 
	#PRIV_MSGBUF
 11

	)

77 
	#PRIV_IO
 12

	)

78 
	#PRIV_KEYBOARD
 13

	)

79 
	#PRIV_DRIVER
 14

	)

80 
	#PRIV_ADJTIME
 15

	)

81 
	#PRIV_NTP_ADJTIME
 16

	)

82 
	#PRIV_CLOCK_SETTIME
 17

	)

83 
	#PRIV_SETTIMEOFDAY
 18

	)

84 
	#_PRIV_SETHOSTID
 19

	)

85 
	#_PRIV_SETDOMAINNAME
 20

	)

90 
	#PRIV_AUDIT_CONTROL
 40

	)

91 
	#PRIV_AUDIT_FAILSTOP
 41

	)

92 
	#PRIV_AUDIT_GETAUDIT
 42

	)

93 
	#PRIV_AUDIT_SETAUDIT
 43

	)

94 
	#PRIV_AUDIT_SUBMIT
 44

	)

99 
	#PRIV_CRED_SETUID
 50

	)

100 
	#PRIV_CRED_SETEUID
 51

	)

101 
	#PRIV_CRED_SETGID
 52

	)

102 
	#PRIV_CRED_SETEGID
 53

	)

103 
	#PRIV_CRED_SETGROUPS
 54

	)

104 
	#PRIV_CRED_SETREUID
 55

	)

105 
	#PRIV_CRED_SETREGID
 56

	)

106 
	#PRIV_CRED_SETRESUID
 57

	)

107 
	#PRIV_CRED_SETRESGID
 58

	)

108 
	#PRIV_SEEOTHERGIDS
 59

	)

109 
	#PRIV_SEEOTHERUIDS
 60

	)

114 
	#PRIV_DEBUG_DIFFCRED
 80

	)

115 
	#PRIV_DEBUG_SUGID
 81

	)

116 
	#PRIV_DEBUG_UNPRIV
 82

	)

117 
	#PRIV_DEBUG_DENIED
 83

	)

122 
	#PRIV_DTRACE_KERNEL
 90

	)

123 
	#PRIV_DTRACE_PROC
 91

	)

124 
	#PRIV_DTRACE_USER
 92

	)

129 
	#PRIV_FIRMWARE_LOAD
 100

	)

134 
	#PRIV_JAIL_ATTACH
 110

	)

135 
	#PRIV_JAIL_SET
 111

	)

136 
	#PRIV_JAIL_REMOVE
 112

	)

141 
	#PRIV_KENV_SET
 120

	)

142 
	#PRIV_KENV_UNSET
 121

	)

147 
	#PRIV_KLD_LOAD
 130

	)

148 
	#PRIV_KLD_UNLOAD
 131

	)

154 
	#PRIV_MAC_PARTITION
 140

	)

155 
	#PRIV_MAC_PRIVS
 141

	)

160 
	#PRIV_PROC_LIMIT
 160

	)

161 
	#PRIV_PROC_SETLOGIN
 161

	)

162 
	#PRIV_PROC_SETRLIMIT
 162

	)

163 
	#PRIV_PROC_SETLOGINCLASS
 163

	)

168 
	#PRIV_IPC_READ
 170

	)

169 
	#PRIV_IPC_WRITE
 171

	)

170 
	#PRIV_IPC_ADMIN
 172

	)

171 
	#PRIV_IPC_MSGSIZE
 173

	)

176 
	#PRIV_MQ_ADMIN
 180

	)

181 
	#PRIV_PMC_MANAGE
 190

	)

182 
	#PRIV_PMC_SYSTEM
 191

	)

187 
	#PRIV_SCHED_DIFFCRED
 200

	)

188 
	#PRIV_SCHED_SETPRIORITY
 201

	)

189 
	#PRIV_SCHED_RTPRIO
 202

	)

190 
	#PRIV_SCHED_SETPOLICY
 203

	)

191 
	#PRIV_SCHED_SET
 204

	)

192 
	#PRIV_SCHED_SETPARAM
 205

	)

193 
	#PRIV_SCHED_CPUSET
 206

	)

194 
	#PRIV_SCHED_CPUSET_INTR
 207

	)

199 
	#PRIV_SEM_WRITE
 220

	)

204 
	#PRIV_SIGNAL_DIFFCRED
 230

	)

205 
	#PRIV_SIGNAL_SUGID
 231

	)

210 
	#PRIV_SYSCTL_DEBUG
 240

	)

211 
	#PRIV_SYSCTL_WRITE
 241

	)

212 
	#PRIV_SYSCTL_WRITEJAIL
 242

	)

217 
	#PRIV_TTY_CONSOLE
 250

	)

218 
	#PRIV_TTY_DRAINWAIT
 251

	)

219 
	#PRIV_TTY_DTRWAIT
 252

	)

220 
	#PRIV_TTY_EXCLUSIVE
 253

	)

221 
	#_PRIV_TTY_PRISON
 254

	)

222 
	#PRIV_TTY_STI
 255

	)

223 
	#PRIV_TTY_SETA
 256

	)

228 
	#PRIV_UFS_EXTATTRCTL
 270

	)

229 
	#PRIV_UFS_QUOTAOFF
 271

	)

230 
	#PRIV_UFS_QUOTAON
 272

	)

231 
	#PRIV_UFS_SETUSE
 273

	)

236 
	#PRIV_ZFS_POOL_CONFIG
 280

	)

237 
	#PRIV_ZFS_INJECT
 281

	)

239 
	#PRIV_ZFS_JAIL
 282

	)

245 
	#PRIV_NFS_DAEMON
 290

	)

246 
	#PRIV_NFS_LOCKD
 291

	)

251 
	#PRIV_VFS_READ
 310

	)

252 
	#PRIV_VFS_WRITE
 311

	)

253 
	#PRIV_VFS_ADMIN
 312

	)

254 
	#PRIV_VFS_EXEC
 313

	)

255 
	#PRIV_VFS_LOOKUP
 314

	)

256 
	#PRIV_VFS_BLOCKRESERVE
 315

	)

257 
	#PRIV_VFS_CHFLAGS_DEV
 316

	)

258 
	#PRIV_VFS_CHOWN
 317

	)

259 
	#PRIV_VFS_CHROOT
 318

	)

260 
	#PRIV_VFS_RETAINSUGID
 319

	)

261 
	#PRIV_VFS_EXCEEDQUOTA
 320

	)

262 
	#PRIV_VFS_EXTATTR_SYSTEM
 321

	)

263 
	#PRIV_VFS_FCHROOT
 322

	)

264 
	#PRIV_VFS_FHOPEN
 323

	)

265 
	#PRIV_VFS_FHSTAT
 324

	)

266 
	#PRIV_VFS_FHSTATFS
 325

	)

267 
	#PRIV_VFS_GENERATION
 326

	)

268 
	#PRIV_VFS_GETFH
 327

	)

269 
	#PRIV_VFS_GETQUOTA
 328

	)

270 
	#PRIV_VFS_LINK
 329

	)

271 
	#PRIV_VFS_MKNOD_BAD
 330

	)

272 
	#PRIV_VFS_MKNOD_DEV
 331

	)

273 
	#PRIV_VFS_MKNOD_WHT
 332

	)

274 
	#PRIV_VFS_MOUNT
 333

	)

275 
	#PRIV_VFS_MOUNT_OWNER
 334

	)

276 
	#PRIV_VFS_MOUNT_EXPORTED
 335

	)

277 
	#PRIV_VFS_MOUNT_PERM
 336

	)

278 
	#PRIV_VFS_MOUNT_SUIDDIR
 337

	)

279 
	#PRIV_VFS_MOUNT_NONUSER
 338

	)

280 
	#PRIV_VFS_SETGID
 339

	)

281 
	#PRIV_VFS_SETQUOTA
 340

	)

282 
	#PRIV_VFS_STICKYFILE
 341

	)

283 
	#PRIV_VFS_SYSFLAGS
 342

	)

284 
	#PRIV_VFS_UNMOUNT
 343

	)

285 
	#PRIV_VFS_STAT
 344

	)

290 
	#PRIV_VM_MADV_PROTECT
 360

	)

291 
	#PRIV_VM_MLOCK
 361

	)

292 
	#PRIV_VM_MUNLOCK
 362

	)

293 
	#PRIV_VM_SWAP_NOQUOTA
 363

	)

297 
	#PRIV_VM_SWAP_NORLIMIT
 364

	)

305 
	#PRIV_DEVFS_RULE
 370

	)

306 
	#PRIV_DEVFS_SYMLINK
 371

	)

311 
	#PRIV_RANDOM_RESEED
 380

	)

316 
	#PRIV_NET_BRIDGE
 390

	)

317 
	#PRIV_NET_GRE
 391

	)

318 
	#_PRIV_NET_PPP
 392

	)

319 
	#_PRIV_NET_SLIP
 393

	)

320 
	#PRIV_NET_BPF
 394

	)

321 
	#PRIV_NET_RAW
 395

	)

322 
	#PRIV_NET_ROUTE
 396

	)

323 
	#PRIV_NET_TAP
 397

	)

324 
	#PRIV_NET_SETIFMTU
 398

	)

325 
	#PRIV_NET_SETIFFLAGS
 399

	)

326 
	#PRIV_NET_SETIFCAP
 400

	)

327 
	#PRIV_NET_SETIFNAME
 401

	)

328 
	#PRIV_NET_SETIFMETRIC
 402

	)

329 
	#PRIV_NET_SETIFPHYS
 403

	)

330 
	#PRIV_NET_SETIFMAC
 404

	)

331 
	#PRIV_NET_ADDMULTI
 405

	)

332 
	#PRIV_NET_DELMULTI
 406

	)

333 
	#PRIV_NET_HWIOCTL
 407

	)

334 
	#PRIV_NET_SETLLADDR
 408

	)

335 
	#PRIV_NET_ADDIFGROUP
 409

	)

336 
	#PRIV_NET_DELIFGROUP
 410

	)

337 
	#PRIV_NET_IFCREATE
 411

	)

338 
	#PRIV_NET_IFDESTROY
 412

	)

339 
	#PRIV_NET_ADDIFADDR
 413

	)

340 
	#PRIV_NET_DELIFADDR
 414

	)

341 
	#PRIV_NET_LAGG
 415

	)

342 
	#PRIV_NET_GIF
 416

	)

343 
	#PRIV_NET_SETIFVNET
 417

	)

344 
	#PRIV_NET_SETIFDESCR
 418

	)

345 
	#PRIV_NET_SETIFFIB
 419

	)

346 
	#PRIV_NET_VXLAN
 420

	)

347 
	#PRIV_NET_SETLANPCP
 421

	)

348 
	#PRIV_NET_SETVLANPCP
 
PRIV_NET_SETLANPCP


	)

353 
	#PRIV_NET80211_GETKEY
 440

	)

354 
	#PRIV_NET80211_MANAGE
 441

	)

359 
	#_PRIV_NETATALK_RESERVEDPORT
 450

	)

364 
	#PRIV_NETATM_CFG
 460

	)

365 
	#PRIV_NETATM_ADD
 461

	)

366 
	#PRIV_NETATM_DEL
 462

	)

367 
	#PRIV_NETATM_SET
 463

	)

372 
	#PRIV_NETBLUETOOTH_RAW
 470

	)

377 
	#PRIV_NETGRAPH_CONTROL
 480

	)

378 
	#PRIV_NETGRAPH_TTY
 481

	)

383 
	#PRIV_NETINET_RESERVEDPORT
 490

	)

384 
	#PRIV_NETINET_IPFW
 491

	)

385 
	#PRIV_NETINET_DIVERT
 492

	)

386 
	#PRIV_NETINET_PF
 493

	)

387 
	#PRIV_NETINET_DUMMYNET
 494

	)

388 
	#PRIV_NETINET_CARP
 495

	)

389 
	#PRIV_NETINET_MROUTE
 496

	)

390 
	#PRIV_NETINET_RAW
 497

	)

391 
	#PRIV_NETINET_GETCRED
 498

	)

392 
	#PRIV_NETINET_ADDRCTRL6
 499

	)

393 
	#PRIV_NETINET_ND6
 500

	)

394 
	#PRIV_NETINET_SCOPE6
 501

	)

395 
	#PRIV_NETINET_ALIFETIME6
 502

	)

396 
	#PRIV_NETINET_IPSEC
 503

	)

397 
	#PRIV_NETINET_REUSEPORT
 504

	)

398 
	#PRIV_NETINET_SETHDROPTS
 505

	)

399 
	#PRIV_NETINET_BINDANY
 506

	)

400 
	#PRIV_NETINET_HASHKEY
 507

	)

405 
	#_PRIV_NETIPX_RESERVEDPORT
 520

	)

406 
	#_PRIV_NETIPX_RAW
 521

	)

411 
	#PRIV_NETNCP
 530

	)

416 
	#PRIV_NETSMB
 540

	)

421 
	#PRIV_VM86_INTCALL
 550

	)

427 
	#_PRIV_RESERVED0
 560

	)

428 
	#_PRIV_RESERVED1
 561

	)

429 
	#_PRIV_RESERVED2
 562

	)

430 
	#_PRIV_RESERVED3
 563

	)

431 
	#_PRIV_RESERVED4
 564

	)

432 
	#_PRIV_RESERVED5
 565

	)

433 
	#_PRIV_RESERVED6
 566

	)

434 
	#_PRIV_RESERVED7
 567

	)

435 
	#_PRIV_RESERVED8
 568

	)

436 
	#_PRIV_RESERVED9
 569

	)

437 
	#_PRIV_RESERVED10
 570

	)

438 
	#_PRIV_RESERVED11
 571

	)

439 
	#_PRIV_RESERVED12
 572

	)

440 
	#_PRIV_RESERVED13
 573

	)

441 
	#_PRIV_RESERVED14
 574

	)

442 
	#_PRIV_RESERVED15
 575

	)

451 
	#PRIV_MODULE0
 600

	)

452 
	#PRIV_MODULE1
 601

	)

453 
	#PRIV_MODULE2
 602

	)

454 
	#PRIV_MODULE3
 603

	)

455 
	#PRIV_MODULE4
 604

	)

456 
	#PRIV_MODULE5
 605

	)

457 
	#PRIV_MODULE6
 606

	)

458 
	#PRIV_MODULE7
 607

	)

459 
	#PRIV_MODULE8
 608

	)

460 
	#PRIV_MODULE9
 609

	)

461 
	#PRIV_MODULE10
 610

	)

462 
	#PRIV_MODULE11
 611

	)

463 
	#PRIV_MODULE12
 612

	)

464 
	#PRIV_MODULE13
 613

	)

465 
	#PRIV_MODULE14
 614

	)

466 
	#PRIV_MODULE15
 615

	)

471 
	#PRIV_DDB_CAPTURE
 620

	)

476 
	#PRIV_NNPFS_DEBUG
 630

	)

481 
	#PRIV_CPUCTL_WRMSR
 640

	)

482 
	#PRIV_CPUCTL_UPDATE
 641

	)

487 
	#PRIV_C4B_RESET_CTLR
 650

	)

488 
	#PRIV_C4B_TRACE
 651

	)

493 
	#PRIV_AFS_ADMIN
 660

	)

494 
	#PRIV_AFS_DAEMON
 661

	)

499 
	#PRIV_RCTL_GET_RACCT
 670

	)

500 
	#PRIV_RCTL_GET_RULES
 671

	)

501 
	#PRIV_RCTL_GET_LIMITS
 672

	)

502 
	#PRIV_RCTL_ADD_RULE
 673

	)

503 
	#PRIV_RCTL_REMOVE_RULE
 674

	)

508 
	#PRIV_KMEM_READ
 680

	)

509 
	#PRIV_KMEM_WRITE
 681

	)

514 
	#_PRIV_HIGHEST
 682

	)

522 
	#PRIV_VALID
(
x
Ë((xË> 
_PRIV_LOWEST
 && (xË< 
_PRIV_HIGHEST
)

	)

524 #ifde‡
_KERNEL


532 
	gthªad
;

533 
	gu¸ed
;

534 
¥iv_check
(
thªad
 *
td
, 
¥iv
);

535 
¥iv_check_¸ed
(
u¸ed
 *
¸ed
, 
¥iv
, 
Êags
);

	@/usr/include/sys/proc.h

40 #i‚de‡
_SYS_PROC_H_


41 
	#_SYS_PROC_H_


	)

43 
	~<sys/ˇŒout.h
>

44 
	~<sys/evít.h
>

45 
	~<sys/c⁄dv¨.h
>

46 #i‚de‡
_KERNEL


47 
	~<sys/fûedesc.h
>

49 
	~<sys/queue.h
>

50 
	~<sys/_lock.h
>

51 
	~<sys/lock_¥ofûe.h
>

52 
	~<sys/_muãx.h
>

53 
	~<sys/osd.h
>

54 
	~<sys/¥i‹ôy.h
>

55 
	~<sys/π¥io.h
>

56 
	~<sys/runq.h
>

57 
	~<sys/ªsour˚.h
>

58 
	~<sys/sigio.h
>

59 
	~<sys/sig«l.h
>

60 
	~<sys/sig«lv¨.h
>

61 #i‚de‡
_KERNEL


62 
	~<sys/time.h
>

64 
	~<sys/p˝u.h
>

65 
	~<sys/sy°m.h
>

67 
	~<sys/uc⁄ãxt.h
>

68 
	~<sys/u¸ed.h
>

69 
	~<sys/ty≥s.h
>

70 
	~<sys/_domaö£t.h
>

72 
	~<machöe/¥oc.h
>

73 #ifde‡
_KERNEL


74 
	~<machöe/˝u.h
>

85 
	s£ssi⁄
 {

86 
u_öt
 
	ms_cou¡
;

87 
¥oc
 *
	ms_Àadî
;

88 
vnode
 *
	ms_âyvp
;

89 
cdev_¥iv
 *
	ms_âydp
;

90 
ây
 *
	ms_âyp
;

91 
pid_t
 
	ms_sid
;

93 
	ms_logö
[
roundup
(
MAXLOGNAME
, ())];

94 
mtx
 
	ms_mtx
;

105 
	spgΩ
 {

106 
LIST_ENTRY
(
pgΩ
Ë
	mpg_hash
;

107 
LIST_HEAD
(, 
¥oc
Ë
	mpg_membîs
;

108 
£ssi⁄
 *
	mpg_£ssi⁄
;

109 
sigiﬁ°
 
	mpg_sigiﬁ°
;

110 
pid_t
 
	mpg_id
;

111 
	mpg_jobc
;

112 
mtx
 
	mpg_mtx
;

118 
	s∑rgs
 {

119 
u_öt
 
	m¨_ªf
;

120 
u_öt
 
	m¨_Àngth
;

121 
u_ch¨
 
	m¨_¨gs
[1];

173 
	g˝u£t
;

174 
	gfûeˇps
;

175 
	gfûem⁄
;

176 
	gkaioöfo
;

177 
	gkaudô_ªc‹d
;

178 
	gkdåa˚_¥oc
;

179 
	gkdåa˚_thªad
;

180 
	gmqueue_nŸifõr
;

181 
	g∆möfo
;

182 
	gp_sched
;

183 
	g¥oc
;

184 
	g¥ocdesc
;

185 
	gøc˘
;

186 
	gsbuf
;

187 
	g¶ìpqueue
;

188 
	gsockë
;

189 
	gsysˇŒ_¨gs
;

190 
	gtd_sched
;

191 
	gthªad
;

192 
	gå≠‰ame
;

193 
	gtu∫°ûe
;

194 
	gvm_m≠
;

195 
	gvm_m≠_íåy
;

208 
	srußge_ext
 {

209 
uöt64_t
 
	mrux_ru¡ime
;

210 
uöt64_t
 
	mrux_uticks
;

211 
uöt64_t
 
	mrux_°icks
;

212 
uöt64_t
 
	mrux_ôicks
;

213 
uöt64_t
 
	mrux_uu
;

214 
uöt64_t
 
	mrux_su
;

215 
uöt64_t
 
	mrux_tu
;

223 
	sthªad
 {

224 
mtx
 *vﬁ©ûê
	mtd_lock
;

225 
¥oc
 *
	mtd_¥oc
;

226 
TAILQ_ENTRY
(
thªad
Ë
	mtd_∂i°
;

227 
TAILQ_ENTRY
(
thªad
Ë
	mtd_runq
;

228 
TAILQ_ENTRY
(
thªad
Ë
	mtd_¶pq
;

229 
TAILQ_ENTRY
(
thªad
Ë
	mtd_lockq
;

230 
LIST_ENTRY
(
thªad
Ë
	mtd_hash
;

231 
˝u£t
 *
	mtd_˝u£t
;

232 
domaö£t_ªf
 
	mtd_domaö
;

233 
£…d
 *
	mtd_£l
;

234 
¶ìpqueue
 *
	mtd_¶ìpqueue
;

235 
tu∫°ûe
 *
	mtd_tu∫°ûe
;

236 
æ_q_íåy
 *
	mtd_æqe
;

237 
umtx_q
 *
	mtd_umtxq
;

238 
lwpid_t
 
	mtd_tid
;

239 
sigqueue_t
 
	mtd_sigqueue
;

240 
	#td_sigli°
 
td_sigqueue
.
sq_sig«ls


	)

241 
u_ch¨
 
	mtd_Ànd_u£r_¥i
;

244 
	#td_°¨tzîo
 
td_ïoch√°


	)

245 
u_ch¨
 
	mtd_ïoch√°
;

246 
	mtd_Êags
;

247 
	mtd_öhibô‹s
;

248 
	mtd_pÊags
;

249 
	mtd_dupfd
;

250 
	mtd_sqqueue
;

251 *
	mtd_wch™
;

252 c⁄° *
	mtd_wmesg
;

253 vﬁ©ûê
u_ch¨
 
	mtd_owïªem±
;

254 
u_ch¨
 
	mtd_tsqueue
;

255 
	mtd_locks
;

256 
	mtd_rw_æocks
;

257 
	mtd_sx_¶ocks
;

258 
	mtd_lk_¶ocks
;

259 
	mtd_°›sched
;

260 
tu∫°ûe
 *
	mtd_blocked
;

261 c⁄° *
	mtd_lock«me
;

262 
LIST_HEAD
(, 
tu∫°ûe
Ë
	mtd_c⁄ã°ed
;

263 
lock_li°_íåy
 *
	mtd_¶ì∂ocks
;

264 
	mtd_öå_√°ög_Àvñ
;

265 
	mtd_pö√d
;

266 
u¸ed
 *
	mtd_u¸ed
;

267 
∂imô
 *
	mtd_limô
;

268 
	mtd_¶±ick
;

269 
	mtd_blktick
;

270 
	mtd_swvﬁtick
;

271 
	mtd_swövﬁtick
;

272 
u_öt
 
	mtd_cow
;

273 
rußge
 
	mtd_ru
;

274 
rußge_ext
 
	mtd_rux
;

275 
uöt64_t
 
	mtd_ö¸u¡ime
;

276 
uöt64_t
 
	mtd_ru¡ime
;

277 
u_öt
 
	mtd_±icks
;

278 
u_öt
 
	mtd_°icks
;

279 
u_öt
 
	mtd_ôicks
;

280 
u_öt
 
	mtd_uticks
;

281 
	mtd_öåvÆ
;

282 
sig£t_t
 
	mtd_ﬁdsigmask
;

283 vﬁ©ûê
u_öt
 
	mtd_gíî©i⁄
;

284 
°ack_t
 
	mtd_sig°k
;

285 
	mtd_xsig
;

286 
u_l⁄g
 
	mtd_¥ofû_addr
;

287 
u_öt
 
	mtd_¥ofû_ticks
;

288 
	mtd_«me
[
MAXCOMLEN
 + 1];

289 
fûe
 *
	mtd_Â›
;

290 
	mtd_dbgÊags
;

291 
sigöfo_t
 
	mtd_si
;

292 
	mtd_ng_outbound
;

293 
osd
 
	mtd_osd
;

294 
vm_m≠_íåy
 *
	mtd_m≠_def_u£r
;

295 
pid_t
 
	mtd_dbg_f‹ked
;

296 
u_öt
 
	mtd_vp_ª£rv
;

297 
	mtd_no_¶ìpög
;

298 *
	mtd_su
;

299 
sbötime_t
 
	mtd_¶ì±imo
;

300 
	mtd_πcgí
;

301 
size_t
 
	mtd_v¶ock_sz
;

302 
	#td_ídzîo
 
td_sigmask


	)

305 
	#td_°¨tc›y
 
td_ídzîo


	)

306 
sig£t_t
 
	mtd_sigmask
;

307 
u_ch¨
 
	mtd_rqödex
;

308 
u_ch¨
 
	mtd_ba£_¥i
;

309 
u_ch¨
 
	mtd_¥i‹ôy
;

310 
u_ch¨
 
	mtd_¥i_˛ass
;

311 
u_ch¨
 
	mtd_u£r_¥i
;

312 
u_ch¨
 
	mtd_ba£_u£r_¥i
;

313 
u_ch¨
 
	mtd_¥e_ïoch_¥io
;

314 
uöçå_t
 
	mtd_rb_li°
;

315 
uöçå_t
 
	mtd_rbp_li°
;

316 
uöçå_t
 
	mtd_rb_öa˘
;

317 
sysˇŒ_¨gs
 
	mtd_ß
;

319 
	#td_ídc›y
 
td_pcb


	)

325 
pcb
 *
	mtd_pcb
;

327 
	mTDS_INACTIVE
 = 0x0,

328 
	mTDS_INHIBITED
,

329 
	mTDS_CAN_RUN
,

330 
	mTDS_RUNQ
,

331 
	mTDS_RUNNING


332 } 
	mtd_°©e
;

334 
ªgi°î_t
 
	mtdu_ªtvÆ
[2];

335 
off_t
 
	mtdu_off
;

336 } 
	mtd_uªtoff
;

337 
	#td_ªtvÆ
 
td_uªtoff
.
tdu_ªtvÆ


	)

338 
u_öt
 
	mtd_cowgí
;

340 
ˇŒout
 
	mtd_¶pˇŒout
;

341 
å≠‰ame
 *
	mtd_‰ame
;

342 
vm_obje˘
 *
	mtd_k°ack_obj
;

343 
vm_off£t_t
 
	mtd_k°ack
;

344 
	mtd_k°ack_∑ges
;

345 vﬁ©ûê
u_öt
 
	mtd_¸ô√°
;

346 
mdthªad
 
	mtd_md
;

347 
kaudô_ªc‹d
 *
	mtd_¨
;

348 
Õohód
 
	mtd_Õrof
[2];

349 
kdåa˚_thªad
 *
	mtd_dåa˚
;

350 
	mtd_î∫o
;

352 
v√t
 *
	mtd_v√t
;

353 c⁄° *
	mtd_v√t_Õush
;

354 
å≠‰ame
 *
	mtd_öå_‰ame
;

355 
¥oc
 *
	mtd_rÂpwaô_p
;

356 
vm_∑ge
 **
	mtd_ma
;

357 
	mtd_ma_˙t
;

359 *
	mtd_emuld©a
;

360 
	mtd_œ°˝u
;

361 
	mtd_⁄˝u
;

362 *
	mtd_lkpi_èsk
;

363 
	mtd_pm˝íd
;

366 
	sthªad0_°‹age
 {

367 
thªad
 
	mt0°_thªad
;

368 
uöt64_t
 
	mt0°_sched
[10];

371 
mtx
 *
thªad_lock_block
(
thªad
 *);

372 
thªad_lock_unblock
(
thªad
 *, 
mtx
 *);

373 
thªad_lock_£t
(
thªad
 *, 
mtx
 *);

374 
	#THREAD_LOCK_ASSERT
(
td
, 
ty≥
) \

376 
mtx
 *
__m
 = (
td
)->
td_lock
; \

377 i‡(
__m
 !&
blocked_lock
) \

378 
	`mtx_as£π
(
__m
, (
ty≥
)); \

379 } 0)

	)

381 #ifde‡
INVARIANTS


382 
	#THREAD_LOCKPTR_ASSERT
(
td
, 
lock
) \

384 
mtx
 *
__m
 = (
td
)->
td_lock
; \

385 
	`KASSERT
((
__m
 =&
blocked_lock
 || __m =(
lock
)), \

386 ("Thªad %∞lock %∞d€†nŸ m©ch %p", 
td
, 
__m
, (
lock
))); \

387 } 0)

	)

389 
	#TD_LOCKS_INC
(
td
Ë(—d)->
td_locks
++)

	)

390 
	#TD_LOCKS_DEC
(
td
) do { \

391 
	`KASSERT
(
	`SCHEDULER_STOPPED_TD
(
td
Ë|| (td)->
td_locks
 > 0, \

392 ("thªad %∞own†nÿlocks", (
td
))); \

393 (
td
)->
td_locks
--; \

394 } 0)

	)

396 
	#THREAD_LOCKPTR_ASSERT
(
td
, 
lock
)

	)

398 
	#TD_LOCKS_INC
(
td
)

	)

399 
	#TD_LOCKS_DEC
(
td
)

	)

406 
	#TDF_BORROWING
 0x00000001

	)

407 
	#TDF_INPANIC
 0x00000002

	)

408 
	#TDF_INMEM
 0x00000004

	)

409 
	#TDF_SINTR
 0x00000008

	)

410 
	#TDF_TIMEOUT
 0x00000010

	)

411 
	#TDF_IDLETD
 0x00000020

	)

412 
	#TDF_CANSWAP
 0x00000040

	)

413 
	#TDF_SLEEPABORT
 0x00000080

	)

414 
	#TDF_KTH_SUSP
 0x00000100

	)

415 
	#TDF_ALLPROCSUSP
 0x00000200

	)

416 
	#TDF_BOUNDARY
 0x00000400

	)

417 
	#TDF_ASTPENDING
 0x00000800

	)

418 
	#TDF_UNUSED12
 0x00001000

	)

419 
	#TDF_SBDRY
 0x00002000

	)

420 
	#TDF_UPIBLOCKED
 0x00004000

	)

421 
	#TDF_NEEDSUSPCHK
 0x00008000

	)

422 
	#TDF_NEEDRESCHED
 0x00010000

	)

423 
	#TDF_NEEDSIGCHK
 0x00020000

	)

424 
	#TDF_NOLOAD
 0x00040000

	)

425 
	#TDF_SERESTART
 0x00080000

	)

426 
	#TDF_THRWAKEUP
 0x00100000

	)

427 
	#TDF_SEINTR
 0x00200000

	)

428 
	#TDF_SWAPINREQ
 0x00400000

	)

429 
	#TDF_UNUSED23
 0x00800000

	)

430 
	#TDF_SCHED0
 0x01000000

	)

431 
	#TDF_SCHED1
 0x02000000

	)

432 
	#TDF_SCHED2
 0x04000000

	)

433 
	#TDF_SCHED3
 0x08000000

	)

434 
	#TDF_ALRMPEND
 0x10000000

	)

435 
	#TDF_PROFPEND
 0x20000000

	)

436 
	#TDF_MACPEND
 0x40000000

	)

439 
	#TDB_SUSPEND
 0x00000001

	)

440 
	#TDB_XSIG
 0x00000002

	)

441 
	#TDB_USERWR
 0x00000004

	)

442 
	#TDB_SCE
 0x00000008

	)

443 
	#TDB_SCX
 0x00000010

	)

444 
	#TDB_EXEC
 0x00000020

	)

445 
	#TDB_FORK
 0x00000040

	)

447 
	#TDB_STOPATFORK
 0x00000080

	)

449 
	#TDB_CHILD
 0x00000100

	)

450 
	#TDB_BORN
 0x00000200

	)

451 
	#TDB_EXIT
 0x00000400

	)

452 
	#TDB_VFORK
 0x00000800

	)

453 
	#TDB_FSTP
 0x00001000

	)

454 
	#TDB_STEP
 0x00002000

	)

460 
	#TDP_OLDMASK
 0x00000001

	)

461 
	#TDP_INKTR
 0x00000002

	)

462 
	#TDP_INKTRACE
 0x00000004

	)

463 
	#TDP_BUFNEED
 0x00000008

	)

464 
	#TDP_COWINPROGRESS
 0x00000010

	)

465 
	#TDP_ALTSTACK
 0x00000020

	)

466 
	#TDP_DEADLKTREAT
 0x00000040

	)

467 
	#TDP_NOFAULTING
 0x00000080

	)

468 
	#TDP_UNUSED9
 0x00000100

	)

469 
	#TDP_OWEUPC
 0x00000200

	)

470 
	#TDP_ITHREAD
 0x00000400

	)

471 
	#TDP_SYNCIO
 0x00000800

	)

472 
	#TDP_SCHED1
 0x00001000

	)

473 
	#TDP_SCHED2
 0x00002000

	)

474 
	#TDP_SCHED3
 0x00004000

	)

475 
	#TDP_SCHED4
 0x00008000

	)

476 
	#TDP_GEOM
 0x00010000

	)

477 
	#TDP_SOFTDEP
 0x00020000

	)

478 
	#TDP_NORUNNINGBUF
 0x00040000

	)

479 
	#TDP_WAKEUP
 0x00080000

	)

480 
	#TDP_INBDFLUSH
 0x00100000

	)

481 
	#TDP_KTHREAD
 0x00200000

	)

482 
	#TDP_CALLCHAIN
 0x00400000

	)

483 
	#TDP_IGNSUSP
 0x00800000

	)

484 
	#TDP_AUDITREC
 0x01000000

	)

485 
	#TDP_RFPPWAIT
 0x02000000

	)

486 
	#TDP_RESETSPUR
 0x04000000

	)

487 
	#TDP_NERRNO
 0x08000000

	)

488 
	#TDP_UIOHELD
 0x10000000

	)

489 
	#TDP_FORKING
 0x20000000

	)

490 
	#TDP_EXECVMSPC
 0x40000000

	)

496 
	#TDI_SUSPENDED
 0x0001

	)

497 
	#TDI_SLEEPING
 0x0002

	)

498 
	#TDI_SWAPPED
 0x0004

	)

499 
	#TDI_LOCK
 0x0008

	)

500 
	#TDI_IWAIT
 0x0010

	)

502 
	#TD_IS_SLEEPING
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SLEEPING
)

	)

503 
	#TD_ON_SLEEPQ
(
td
Ë(—d)->
td_wch™
 !
NULL
)

	)

504 
	#TD_IS_SUSPENDED
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SUSPENDED
)

	)

505 
	#TD_IS_SWAPPED
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SWAPPED
)

	)

506 
	#TD_ON_LOCK
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_LOCK
)

	)

507 
	#TD_AWAITING_INTR
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_IWAIT
)

	)

508 
	#TD_IS_RUNNING
(
td
Ë(—d)->
td_°©e
 =
TDS_RUNNING
)

	)

509 
	#TD_ON_RUNQ
(
td
Ë(—d)->
td_°©e
 =
TDS_RUNQ
)

	)

510 
	#TD_CAN_RUN
(
td
Ë(—d)->
td_°©e
 =
TDS_CAN_RUN
)

	)

511 
	#TD_IS_INHIBITED
(
td
Ë(—d)->
td_°©e
 =
TDS_INHIBITED
)

	)

512 
	#TD_ON_UPILOCK
(
td
Ë(—d)->
td_Êags
 & 
TDF_UPIBLOCKED
)

	)

513 
	#TD_IS_IDLETHREAD
(
td
Ë(—d)->
td_Êags
 & 
TDF_IDLETD
)

	)

515 
	#KTDSTATE
(
td
) \

516 (((
td
)->
td_öhibô‹s
 & 
TDI_SLEEPING
) != 0 ? "sleep" : \

517 ((
td
)->
td_öhibô‹s
 & 
TDI_SUSPENDED
) != 0 ? "suspended" : \

518 ((
td
)->
td_öhibô‹s
 & 
TDI_SWAPPED
) != 0 ? "swapped" : \

519 ((
td
)->
td_öhibô‹s
 & 
TDI_LOCK
) != 0 ? "blocked" : \

520 ((
td
)->
td_öhibô‹s
 & 
TDI_IWAIT
Ë!0 ? "iwaô" : "yõldög")

	)

522 
	#TD_SET_INHIB
(
td
, 
öhib
) do { \

523 (
td
)->
td_°©e
 = 
TDS_INHIBITED
; \

524 (
td
)->
td_öhibô‹s
 |(
öhib
); \

525 } 0)

	)

527 
	#TD_CLR_INHIB
(
td
, 
öhib
) do { \

528 i‡(((
td
)->
td_öhibô‹s
 & (
öhib
)) && \

529 (((
td
)->
td_öhibô‹s
 &~(
öhib
)) == 0)) \

530 (
td
)->
td_°©e
 = 
TDS_CAN_RUN
; \

531 } 0)

	)

533 
	#TD_SET_SLEEPING
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SLEEPING
)

	)

534 
	#TD_SET_SWAPPED
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SWAPPED
)

	)

535 
	#TD_SET_LOCK
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_LOCK
)

	)

536 
	#TD_SET_SUSPENDED
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SUSPENDED
)

	)

537 
	#TD_SET_IWAIT
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_IWAIT
)

	)

538 
	#TD_SET_EXITING
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_EXITING
)

	)

540 
	#TD_CLR_SLEEPING
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SLEEPING
)

	)

541 
	#TD_CLR_SWAPPED
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SWAPPED
)

	)

542 
	#TD_CLR_LOCK
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_LOCK
)

	)

543 
	#TD_CLR_SUSPENDED
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SUSPENDED
)

	)

544 
	#TD_CLR_IWAIT
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_IWAIT
)

	)

546 
	#TD_SET_RUNNING
(
td
Ë—d)->
td_°©e
 = 
TDS_RUNNING


	)

547 
	#TD_SET_RUNQ
(
td
Ë—d)->
td_°©e
 = 
TDS_RUNQ


	)

548 
	#TD_SET_CAN_RUN
(
td
Ë—d)->
td_°©e
 = 
TDS_CAN_RUN


	)

550 
	#TD_SBDRY_INTR
(
td
) \

551 (((
td
)->
td_Êags
 & (
TDF_SEINTR
 | 
TDF_SERESTART
)Ë!0)

	)

552 
	#TD_SBDRY_ERRNO
(
td
) \

553 (((
td
)->
td_Êags
 & 
TDF_SEINTR
Ë!0 ? 
EINTR
 : 
ERESTART
)

	)

558 
	s¥oc
 {

559 
LIST_ENTRY
(
¥oc
Ë
	mp_li°
;

560 
TAILQ_HEAD
(, 
thªad
Ë
	mp_thªads
;

561 
mtx
 
	mp_¶ock
;

562 
u¸ed
 *
	mp_u¸ed
;

563 
fûedesc
 *
	mp_fd
;

564 
fûedesc_to_Àadî
 *
	mp_fdtﬁ
;

565 
p°©s
 *
	mp_°©s
;

566 
∂imô
 *
	mp_limô
;

567 
ˇŒout
 
	mp_limco
;

568 
siga˘s
 *
	mp_siga˘s
;

570 
	mp_Êag
;

571 
	mp_Êag2
;

573 
	mPRS_NEW
 = 0,

574 
	mPRS_NORMAL
,

575 
	mPRS_ZOMBIE


576 } 
	mp_°©e
;

577 
pid_t
 
	mp_pid
;

578 
LIST_ENTRY
(
¥oc
Ë
	mp_hash
;

579 
LIST_ENTRY
(
¥oc
Ë
	mp_pgli°
;

580 
¥oc
 *
	mp_µå
;

581 
LIST_ENTRY
(
¥oc
Ë
	mp_siblög
;

582 
LIST_HEAD
(, 
¥oc
Ë
	mp_chûdªn
;

583 
¥oc
 *
	mp_ª≠î
;

584 
LIST_HEAD
(, 
¥oc
Ë
	mp_ª≠li°
;

586 
LIST_ENTRY
(
¥oc
Ë
	mp_ª≠siblög
;

588 
mtx
 
	mp_mtx
;

589 
mtx
 
	mp_°©mtx
;

590 
mtx
 
	mp_ôimmtx
;

591 
mtx
 
	mp_¥ofmtx
;

592 
ksigöfo
 *
	mp_ksi
;

593 
sigqueue_t
 
	mp_sigqueue
;

594 
	#p_sigli°
 
p_sigqueue
.
sq_sig«ls


	)

597 
	#p_°¨tzîo
 
p_›pid


	)

598 
pid_t
 
	mp_›pid
;

599 
vm•a˚
 *
	mp_vm•a˚
;

600 
u_öt
 
	mp_swtick
;

601 
u_öt
 
	mp_cowgí
;

602 
ôimîvÆ
 
	mp_ªÆtimî
;

603 
rußge
 
	mp_ru
;

604 
rußge_ext
 
	mp_rux
;

605 
rußge_ext
 
	mp_¸ux
;

606 
	mp_¥o·hªads
;

607 vﬁ©ûê
	mp_exôthªads
;

608 
	mp_åa˚Êag
;

609 
vnode
 *
	mp_åa˚vp
;

610 
u¸ed
 *
	mp_åa˚¸ed
;

611 
vnode
 *
	mp_ãxtvp
;

612 
u_öt
 
	mp_lock
;

613 
sigiﬁ°
 
	mp_sigiﬁ°
;

614 
	mp_sig∑ª¡
;

615 
	mp_sig
;

616 
u_l⁄g
 
	mp_code
;

617 
u_öt
 
	mp_°›s
;

618 
u_öt
 
	mp_°y≥
;

619 
	mp_°ï
;

620 
u_ch¨
 
	mp_pfsÊags
;

621 
u_öt
 
	mp_±evíts
;

622 
∆möfo
 *
	mp_∆möfo
;

623 
kaioöfo
 *
	mp_aioöfo
;

624 
thªad
 *
	mp_sögÀthªad
;

625 
	mp_su•cou¡
;

626 
thªad
 *
	mp_xthªad
;

627 
	mp_bound¨y_cou¡
;

628 
	mp_≥ndög˙t
;

629 
ôimîs
 *
	mp_ôimîs
;

630 
¥ocdesc
 *
	mp_¥ocdesc
;

631 
u_öt
 
	mp_åìÊag
;

632 
	mp_≥ndögexôs
;

633 
fûem⁄
 *
	mp_fûem⁄
;

634 
	mp_pdóthsig
;

636 
	#p_ídzîo
 
p_magic


	)

639 
	#p_°¨tc›y
 
p_ídzîo


	)

640 
u_öt
 
	mp_magic
;

641 
	mp_o§ñ
;

643 
	mp_comm
[
MAXCOMLEN
 + 1];

644 
sy£¡vec
 *
	mp_sy£¡
;

645 
∑rgs
 *
	mp_¨gs
;

646 
æim_t
 
	mp_˝ulimô
;

647 sig√d 
	mp_ni˚
;

648 
	mp_fibnum
;

649 
pid_t
 
	mp_ª≠subåì
;

652 
uöt16_t
 
	mp_ñf_machöe
;

653 
uöt64_t
 
	mp_ñf_Êags
;

655 
	#p_ídc›y
 
p_xexô


	)

657 
u_öt
 
	mp_xexô
;

658 
u_öt
 
	mp_xsig
;

659 
pgΩ
 *
	mp_pgΩ
;

660 
k∆i°
 *
	mp_kli°
;

661 
	mp_numthªads
;

662 
md¥oc
 
	mp_md
;

663 
ˇŒout
 
	mp_ôˇŒout
;

664 
u_sh‹t
 
	mp_acÊag
;

665 
¥oc
 *
	mp_≥îs
;

666 
¥oc
 *
	mp_Àadî
;

667 *
	mp_emuld©a
;

668 
œbñ
 *
	mp_œbñ
;

669 
STAILQ_HEAD
(, 
kå_ªque°
Ë
	mp_kå
;

670 
LIST_HEAD
(, 
mqueue_nŸifõr
Ë
	mp_mqnŸifõr
;

671 
kdåa˚_¥oc
 *
	mp_dåa˚
;

672 
cv
 
	mp_pwaô
;

673 
uöt64_t
 
	mp_¥ev_ru¡ime
;

674 
øc˘
 *
	mp_øc˘
;

675 
	mp_thrŸéed
;

682 
LIST_ENTRY
(
¥oc
Ë
	mp_‹ph™
;

683 
LIST_HEAD
(, 
¥oc
Ë
	mp_‹ph™s
;

686 
	#p_£ssi⁄
 
p_pgΩ
->
pg_£ssi⁄


	)

687 
	#p_pgid
 
p_pgΩ
->
pg_id


	)

689 
	#NOCPU
 (-1Ë

	)

690 
	#NOCPU_OLD
 (255)

	)

691 
	#MAXCPU_OLD
 (254)

	)

693 
	#PROC_SLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_¶ock
)

	)

694 
	#PROC_SUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_¶ock
)

	)

695 
	#PROC_SLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_¶ock
, (ty≥))

	)

697 
	#PROC_STATLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_°©mtx
)

	)

698 
	#PROC_STATUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_°©mtx
)

	)

699 
	#PROC_STATLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_°©mtx
, (ty≥))

	)

701 
	#PROC_ITIMLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_ôimmtx
)

	)

702 
	#PROC_ITIMUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_ôimmtx
)

	)

703 
	#PROC_ITIMLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_ôimmtx
, (ty≥))

	)

705 
	#PROC_PROFLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_¥ofmtx
)

	)

706 
	#PROC_PROFUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_¥ofmtx
)

	)

707 
	#PROC_PROFLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_¥ofmtx
, (ty≥))

	)

710 
	#P_ADVLOCK
 0x00001

	)

711 
	#P_CONTROLT
 0x00002

	)

712 
	#P_KPROC
 0x00004

	)

713 
	#P_UNUSED3
 0x00008

	)

714 
	#P_PPWAIT
 0x00010

	)

715 
	#P_PROFIL
 0x00020

	)

716 
	#P_STOPPROF
 0x00040

	)

717 
	#P_HADTHREADS
 0x00080

	)

718 
	#P_SUGID
 0x00100

	)

719 
	#P_SYSTEM
 0x00200

	)

720 
	#P_SINGLE_EXIT
 0x00400

	)

721 
	#P_TRACED
 0x00800

	)

722 
	#P_WAITED
 0x01000

	)

723 
	#P_WEXIT
 0x02000

	)

724 
	#P_EXEC
 0x04000

	)

725 
	#P_WKILLED
 0x08000

	)

726 
	#P_CONTINUED
 0x10000

	)

727 
	#P_STOPPED_SIG
 0x20000

	)

728 
	#P_STOPPED_TRACE
 0x40000

	)

729 
	#P_STOPPED_SINGLE
 0x80000

	)

730 
	#P_PROTECTED
 0x100000

	)

731 
	#P_SIGEVENT
 0x200000

	)

732 
	#P_SINGLE_BOUNDARY
 0x400000

	)

733 
	#P_HWPMC
 0x800000

	)

734 
	#P_JAILED
 0x1000000

	)

735 
	#P_TOTAL_STOP
 0x2000000

	)

736 
	#P_INEXEC
 0x4000000

	)

737 
	#P_STATCHILD
 0x8000000

	)

738 
	#P_INMEM
 0x10000000

	)

739 
	#P_SWAPPINGOUT
 0x20000000

	)

740 
	#P_SWAPPINGIN
 0x40000000

	)

741 
	#P_PPTRACE
 0x80000000

	)

743 
	#P_STOPPED
 (
P_STOPPED_SIG
|
P_STOPPED_SINGLE
|
P_STOPPED_TRACE
)

	)

744 
	#P_SHOULDSTOP
(
p
Ë(’)->
p_Êag
 & 
P_STOPPED
)

	)

745 
	#P_KILLED
(
p
Ë(’)->
p_Êag
 & 
P_WKILLED
)

	)

748 
	#P2_INHERIT_PROTECTED
 0x00000001

	)

749 
	#P2_NOTRACE
 0x00000002

	)

750 
	#P2_NOTRACE_EXEC
 0x00000004

	)

751 
	#P2_AST_SU
 0x00000008

	)

752 
	#P2_PTRACE_FSTP
 0x00000010

	)

753 
	#P2_TRAPCAP
 0x00000020

	)

756 
	#P_TREE_ORPHANED
 0x00000001

	)

757 
	#P_TREE_FIRST_ORPHAN
 0x00000002

	)

759 
	#P_TREE_REAPER
 0x00000004

	)

765 
	#SIDL
 1

	)

766 
	#SRUN
 2

	)

767 
	#SSLEEP
 3

	)

768 
	#SSTOP
 4

	)

769 
	#SZOMB
 5

	)

770 
	#SWAIT
 6

	)

771 
	#SLOCK
 7

	)

773 
	#P_MAGIC
 0xbìfÁ˚

	)

775 #ifde‡
_KERNEL


778 
	#SW_TYPE_MASK
 0xf‡

	)

779 
	#SWT_NONE
 0

	)

780 
	#SWT_PREEMPT
 1

	)

781 
	#SWT_OWEPREEMPT
 2

	)

782 
	#SWT_TURNSTILE
 3

	)

783 
	#SWT_SLEEPQ
 4

	)

784 
	#SWT_SLEEPQTIMO
 5

	)

785 
	#SWT_RELINQUISH
 6

	)

786 
	#SWT_NEEDRESCHED
 7

	)

787 
	#SWT_IDLE
 8

	)

788 
	#SWT_IWAIT
 9

	)

789 
	#SWT_SUSPEND
 10

	)

790 
	#SWT_REMOTEPREEMPT
 11

	)

791 
	#SWT_REMOTEWAKEIDLE
 12

	)

792 
	#SWT_COUNT
 13

	)

794 
	#SW_VOL
 0x0100

	)

795 
	#SW_INVOL
 0x0200

	)

796 
	#SW_PREEMPT
 0x0400

	)

799 
	#SINGLE_NO_EXIT
 0

	)

800 
	#SINGLE_EXIT
 1

	)

801 
	#SINGLE_BOUNDARY
 2

	)

802 
	#SINGLE_ALLPROC
 3

	)

804 #ifde‡
MALLOC_DECLARE


805 
MALLOC_DECLARE
(
M_PARGS
);

806 
MALLOC_DECLARE
(
M_PGRP
);

807 
MALLOC_DECLARE
(
M_SESSION
);

808 
MALLOC_DECLARE
(
M_SUBPROC
);

811 
	#FOREACH_PROC_IN_SYSTEM
(
p
) \

812 
	`LIST_FOREACH
((
p
), &
ÆÕroc
, 
p_li°
)

	)

813 
	#FOREACH_THREAD_IN_PROC
(
p
, 
td
) \

814 
	`TAILQ_FOREACH
((
td
), &(
p
)->
p_thªads
, 
td_∂i°
)

	)

816 
	#FIRST_THREAD_IN_PROC
(
p
Ë
	`TAILQ_FIRST
(&’)->
p_thªads
)

	)

822 
	#PID_MAX
 99999

	)

823 
	#NO_PID
 100000

	)

824 
pid_t
 
pid_max
;

826 
	#SESS_LEADER
(
p
Ë(’)->
p_£ssi⁄
->
s_Àadî
 =’))

	)

829 
	#STOPEVENT
(
p
, 
e
, 
v
) do { \

830 
	`WITNESS_WARN
(
WARN_GIANTOK
 | 
WARN_SLEEPOK
, 
NULL
, \

831 "checkög st›evíà%d", (
e
)); \

832 i‡((
p
)->
p_°›s
 & (
e
)) { \

833 
	`PROC_LOCK
(
p
); \

834 
	`°›evít
((
p
), (
e
), (
v
)); \

835 
	`PROC_UNLOCK
(
p
); \

837 } 0)

	)

838 
	#_STOPEVENT
(
p
, 
e
, 
v
) do { \

839 
	`PROC_LOCK_ASSERT
(
p
, 
MA_OWNED
); \

840 
	`WITNESS_WARN
(
WARN_GIANTOK
 | 
WARN_SLEEPOK
, &
p
->
p_mtx
.
lock_obje˘
, \

841 "checkög st›evíà%d", (
e
)); \

842 i‡((
p
)->
p_°›s
 & (
e
)) \

843 
	`°›evít
((
p
), (
e
), (
v
)); \

844 } 0)

	)

847 
	#PROC_LOCK
(
p
Ë
	`mtx_lock
(&’)->
p_mtx
)

	)

848 
	#PROC_TRYLOCK
(
p
Ë
	`mtx_åylock
(&’)->
p_mtx
)

	)

849 
	#PROC_UNLOCK
(
p
Ë
	`mtx_u∆ock
(&’)->
p_mtx
)

	)

850 
	#PROC_LOCKED
(
p
Ë
	`mtx_ow√d
(&’)->
p_mtx
)

	)

851 
	#PROC_LOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_mtx
, (ty≥))

	)

854 
	#PGRP_LOCK
(
pg
Ë
	`mtx_lock
(&’g)->
pg_mtx
)

	)

855 
	#PGRP_UNLOCK
(
pg
Ë
	`mtx_u∆ock
(&’g)->
pg_mtx
)

	)

856 
	#PGRP_LOCKED
(
pg
Ë
	`mtx_ow√d
(&’g)->
pg_mtx
)

	)

857 
	#PGRP_LOCK_ASSERT
(
pg
, 
ty≥
Ë
	`mtx_as£π
(&’g)->
pg_mtx
, (ty≥))

	)

859 
	#PGRP_LOCK_PGSIGNAL
(
pg
) do { \

860 i‡((
pg
Ë!
NULL
) \

861 
	`PGRP_LOCK
(
pg
); \

862 } 0)

	)

863 
	#PGRP_UNLOCK_PGSIGNAL
(
pg
) do { \

864 i‡((
pg
Ë!
NULL
) \

865 
	`PGRP_UNLOCK
(
pg
); \

866 } 0)

	)

869 
	#SESS_LOCK
(
s
Ë
	`mtx_lock
(&(s)->
s_mtx
)

	)

870 
	#SESS_UNLOCK
(
s
Ë
	`mtx_u∆ock
(&(s)->
s_mtx
)

	)

871 
	#SESS_LOCKED
(
s
Ë
	`mtx_ow√d
(&(s)->
s_mtx
)

	)

872 
	#SESS_LOCK_ASSERT
(
s
, 
ty≥
Ë
	`mtx_as£π
(&(s)->
s_mtx
, (ty≥))

	)

888 
	#PHOLD
(
p
) do { \

889 
	`PROC_LOCK
(
p
); \

890 
	`_PHOLD
(
p
); \

891 
	`PROC_UNLOCK
(
p
); \

892 } 0)

	)

893 
	#_PHOLD
(
p
) do { \

894 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

895 
	`KASSERT
(!((
p
)->
p_Êag
 & 
P_WEXIT
Ë|| (pË=
cuΩroc
, \

896 ("PHOLD o‡exôögÖro˚s†%p", 
p
)); \

897 (
p
)->
p_lock
++; \

898 i‡(((
p
)->
p_Êag
 & 
P_INMEM
) == 0) \

899 
	`Áu…ö
((
p
)); \

900 } 0)

	)

901 
	#_PHOLD_LITE
(
p
) do { \

902 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

903 
	`KASSERT
(!((
p
)->
p_Êag
 & 
P_WEXIT
Ë|| (pË=
cuΩroc
, \

904 ("PHOLD o‡exôögÖro˚s†%p", 
p
)); \

905 (
p
)->
p_lock
++; \

906 } 0)

	)

907 
	#PROC_ASSERT_HELD
(
p
) do { \

908 
	`KASSERT
((
p
)->
p_lock
 > 0, ("process %pÇot held",Ö)); \

909 } 0)

	)

911 
	#PRELE
(
p
) do { \

912 
	`PROC_LOCK
((
p
)); \

913 
	`_PRELE
((
p
)); \

914 
	`PROC_UNLOCK
((
p
)); \

915 } 0)

	)

916 
	#_PRELE
(
p
) do { \

917 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

918 
	`PROC_ASSERT_HELD
(
p
); \

919 (--(
p
)->
p_lock
); \

920 i‡(((
p
)->
p_Êag
 & 
P_WEXIT
Ë&& (p)->
p_lock
 == 0) \

921 
	`wakeup
(&(
p
)->
p_lock
); \

922 } 0)

	)

923 
	#PROC_ASSERT_NOT_HELD
(
p
) do { \

924 
	`KASSERT
((
p
)->
p_lock
 == 0, ("process %p held",Ö)); \

925 } 0)

	)

927 
	#PROC_UPDATE_COW
(
p
) do { \

928 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

929 (
p
)->
p_cowgí
++; \

930 } 0)

	)

933 
	#thªad_ß„tosw≠out
(
td
Ë(—d)->
td_Êags
 & 
TDF_CANSWAP
)

	)

936 
	#THREAD_NO_SLEEPING
(Ë((
cuπhªad
)->
td_no_¶ìpög
++)

	)

938 
	#THREAD_SLEEPING_OK
(Ë((
cuπhªad
)->
td_no_¶ìpög
--)

	)

940 
	#THREAD_CAN_SLEEP
(Ë((
cuπhªad
)->
td_no_¶ìpög
 =0)

	)

942 
	#PIDHASH
(
pid
Ë(&
pidhashtbl
[’idË& 
pidhash
])

	)

943 
LIST_HEAD
(
pidhashhód
, 
¥oc
Ë*
pidhashtbl
;

944 
u_l⁄g
 
pidhash
;

945 
	#TIDHASH
(
tid
Ë(&
tidhashtbl
[—idË& 
tidhash
])

	)

946 
LIST_HEAD
(
tidhashhód
, 
thªad
Ë*
tidhashtbl
;

947 
u_l⁄g
 
tidhash
;

948 
rwlock
 
tidhash_lock
;

950 
	#PGRPHASH
(
pgid
Ë(&
pgΩhashtbl
[’gidË& 
pgΩhash
])

	)

951 
LIST_HEAD
(
pgΩhashhód
, 
pgΩ
Ë*
pgΩhashtbl
;

952 
u_l⁄g
 
pgΩhash
;

954 
sx
 
ÆÕroc_lock
;

955 
ÆÕroc_gí
;

956 
sx
 
¥o˘ªe_lock
;

957 
mtx
 
µìrs_lock
;

958 
¥oc
 
¥oc0
;

959 
thªad0_°‹age
 
thªad0_°
;

960 
	#thªad0
 (
thªad0_°
.
t0°_thªad
)

	)

961 
vm•a˚
 
vm•a˚0
;

962 
hogticks
;

963 
œ°pid
;

964 
≈rocs
, 
max¥oc
;

965 
max¥o˝îuid
;

966 
u_l⁄g
 
ps_¨g_ˇche_limô
;

968 
LIST_HEAD
(
¥o˛i°
, 
¥oc
);

969 
TAILQ_HEAD
(
¥ocqueue
, 
¥oc
);

970 
TAILQ_HEAD
(
thªadqueue
, 
thªad
);

971 
¥o˛i°
 
ÆÕroc
;

972 
¥o˛i°
 
zomb¥oc
;

973 
¥oc
 *
öô¥oc
, *
∑gïroc
;

975 
uma_z⁄e
 *
¥oc_z⁄e
;

977 
¥oc
 *
pföd
(
pid_t
);

978 
¥oc
 *
pföd_™y
(
pid_t
);

979 
¥oc
 *
pföd_locked
(
pid_t
 
pid
);

980 
pgΩ
 *
pgföd
(
pid_t
);

981 
¥oc
 *
zpföd
(
pid_t
);

983 
	sf‹k_ªq
 {

984 
	m‰_Êags
;

985 
	m‰_∑ges
;

986 *
	m‰_pidp
;

987 
¥oc
 **
	m‰_¥o˝
;

988 *
	m‰_pd_fd
;

989 
	m‰_pd_Êags
;

990 
fûeˇps
 *
	m‰_pd_fˇps
;

996 
	#PGET_HOLD
 0x00001

	)

997 
	#PGET_CANSEE
 0x00002

	)

998 
	#PGET_CANDEBUG
 0x00004

	)

999 
	#PGET_ISCURRENT
 0x00008

	)

1000 
	#PGET_NOTWEXIT
 0x00010

	)

1001 
	#PGET_NOTINEXEC
 0x00020

	)

1002 
	#PGET_NOTID
 0x00040

	)

1004 
	#PGET_WANTREAD
 (
PGET_HOLD
 | 
PGET_CANDEBUG
 | 
PGET_NOTWEXIT
)

	)

1006 
pgë
(
pid_t
 
pid
, 
Êags
, 
¥oc
 **
µ
);

1008 
a°
(
å≠‰ame
 *
‰amï
);

1009 
thªad
 *
choo£thªad
();

1010 
¸_ˇn£e
(
u¸ed
 *
u1
, u¸ed *
u2
);

1011 
¸_ˇn£esockë
(
u¸ed
 *
¸ed
, 
sockë
 *
so
);

1012 
¸_ˇn£eŸhîgids
(
u¸ed
 *
u1
, u¸ed *
u2
);

1013 
¸_ˇn£eŸhîuids
(
u¸ed
 *
u1
, u¸ed *
u2
);

1014 
¸_ˇn£ejaû¥oc
(
u¸ed
 *
u1
, u¸ed *
u2
);

1015 
¸_ˇnsig«l
(
u¸ed
 *
¸ed
, 
¥oc
 *¥oc, 
signum
);

1016 
íãΩgΩ
(
¥oc
 *
p
, 
pid_t
 
pgid
, 
pgΩ
 *pgrp,

1017 
£ssi⁄
 *
£ss
);

1018 
íãπhi•gΩ
(
¥oc
 *
p
, 
pgΩ
 *pgrp);

1019 
Áu…ö
(
¥oc
 *
p
);

1020 
fixjobc
(
¥oc
 *
p
, 
pgΩ
 *pgΩ, 
íãrög
);

1021 
f‹k1
(
thªad
 *, 
f‹k_ªq
 *);

1022 
f‹k_exô
((*)(*, 
å≠‰ame
 *), *,

1023 
å≠‰ame
 *);

1024 
	`f‹k_ªtu∫
(
thªad
 *, 
å≠‰ame
 *);

1025 
	`ö„ri‹
(
¥oc
 *
p
);

1026 
	`kîn_¥oc_vmm≠_ªsidít
(
vm_m≠
 *
m≠
, 
vm_m≠_íåy
 *
íåy
,

1027 *
ªsidít_cou¡
, 
boﬁ
 *
su≥r
);

1028 
	`kîn_yõld
();

1029 
	`kick_¥oc0
();

1030 
	`kûljobc
();

1031 
	`ÀavïgΩ
(
¥oc
 *
p
);

1032 
	`maybe_¥ìm±
(
thªad
 *
td
);

1033 
	`maybe_yõld
();

1034 
	`mi_swôch
(
Êags
, 
thªad
 *
√wtd
);

1035 
	`p_ˇndebug
(
thªad
 *
td
, 
¥oc
 *
p
);

1036 
	`p_ˇn£e
(
thªad
 *
td
, 
¥oc
 *
p
);

1037 
	`p_ˇnsched
(
thªad
 *
td
, 
¥oc
 *
p
);

1038 
	`p_ˇnsig«l
(
thªad
 *
td
, 
¥oc
 *
p
, 
signum
);

1039 
	`p_ˇnwaô
(
thªad
 *
td
, 
¥oc
 *
p
);

1040 
∑rgs
 *
	`∑rgs_Æloc
(
Àn
);

1041 
	`∑rgs_dr›
(
∑rgs
 *
∑
);

1042 
	`∑rgs_hﬁd
(
∑rgs
 *
∑
);

1043 
	`¥oc_gë¨gv
(
thªad
 *
td
, 
¥oc
 *
p
, 
sbuf
 *
sb
);

1044 
	`¥oc_gëauxv
(
thªad
 *
td
, 
¥oc
 *
p
, 
sbuf
 *
sb
);

1045 
	`¥oc_gëívv
(
thªad
 *
td
, 
¥oc
 *
p
, 
sbuf
 *
sb
);

1046 
	`¥ocöô
();

1047 
	`¥oc_lökup0
(
¥oc
 *
p
, 
thªad
 *
td
);

1048 
	`¥oc_lökup
(
¥oc
 *
p
, 
thªad
 *
td
);

1049 
¥oc
 *
	`¥oc_ªÆ∑ª¡
(¥o¯*
chûd
);

1050 
	`¥oc_ª≠
(
thªad
 *
td
, 
¥oc
 *
p
, *
°©us
, 
›ti⁄s
);

1051 
	`¥oc_ª∑ª¡
(
¥oc
 *
chûd
, ¥o¯*
√w∑ª¡
);

1052 
	`¥oc_£t_åa˚d
(
¥oc
 *
p
, 
boﬁ
 
°›
);

1053 
	`¥oc_wkûÀd
(
¥oc
 *
p
);

1054 
p°©s
 *
	`p°©s_Æloc
();

1055 
	`p°©s_f‹k
(
p°©s
 *
§c
, p°©†*
d°
);

1056 
	`p°©s_‰ì
(
p°©s
 *
ps
);

1057 
	`ª≠î_ab™d⁄_chûdªn
(
¥oc
 *
p
, 
boﬁ
 
exôög
);

1058 
	`£cuªÀvñ_ge
(
u¸ed
 *
¸
, 
Àvñ
);

1059 
	`£cuªÀvñ_gt
(
u¸ed
 *
¸
, 
Àvñ
);

1060 
	`£ss_hﬁd
(
£ssi⁄
 *);

1061 
	`£ss_ªÀa£
(
£ssi⁄
 *);

1062 
	`£åu¬abÀ
(
thªad
 *);

1063 
	`£tsugid
(
¥oc
 *
p
);

1064 
	`should_yõld
();

1065 
	`sig⁄°ack
(
size_t
 
•
);

1066 
	`°›evít
(
¥oc
 *, 
u_öt
, u_int);

1067 
thªad
 *
	`tdföd
(
lwpid_t
, 
pid_t
);

1068 
	`thªadöô
();

1069 
	`tidhash_add
(
thªad
 *);

1070 
	`tidhash_ªmove
(
thªad
 *);

1071 
	`˝u_idÀ
();

1072 
	`˝u_idÀ_wakeup
();

1073 (*
˝u_idÀ_hook
)(
sbötime_t
);

1074 
	`˝u_swôch
(
thªad
 *, thªad *, 
mtx
 *);

1075 
	$˝u_throw
(
thªad
 *, thªad *Ë
__dód2
;

1076 
	`un¶ìp
(
thªad
 *);

1077 
	`u£ºë
(
thªad
 *, 
å≠‰ame
 *);

1079 
	`˝u_exô
(
thªad
 *);

1080 
	$exô1
(
thªad
 *, , Ë
__dód2
;

1081 
	`˝u_c›y_thªad
(
thªad
 *
td
, thªad *
td0
);

1082 
	`˝u_„tch_sysˇŒ_¨gs
(
thªad
 *
td
);

1083 
	`˝u_f‹k
(
thªad
 *, 
¥oc
 *, thread *, );

1084 
	`˝u_f‹k_kthªad_h™dÀr
(
thªad
 *, (*)(*), *);

1085 
	`˝u_£t_sysˇŒ_ªtvÆ
(
thªad
 *, );

1086 
	`˝u_£t_upˇŒ
(
thªad
 *, (*)(*), *,

1087 
°ack_t
 *);

1088 
	`˝u_£t_u£r_és
(
thªad
 *, *
és_ba£
);

1089 
	`˝u_thªad_Æloc
(
thªad
 *);

1090 
	`˝u_thªad_˛ón
(
thªad
 *);

1091 
	`˝u_thªad_exô
(
thªad
 *);

1092 
	`˝u_thªad_‰ì
(
thªad
 *);

1093 
	`˝u_thªad_sw≠ö
(
thªad
 *);

1094 
	`˝u_thªad_sw≠out
(
thªad
 *);

1095 
thªad
 *
	`thªad_Æloc
(
∑ges
);

1096 
	`thªad_Æloc_°ack
(
thªad
 *, 
∑ges
);

1097 
	`thªad_cow_gë_¥oc
(
thªad
 *
√wtd
, 
¥oc
 *
p
);

1098 
	`thªad_cow_gë
(
thªad
 *
√wtd
, thªad *
td
);

1099 
	`thªad_cow_‰ì
(
thªad
 *
td
);

1100 
	`thªad_cow_upd©e
(
thªad
 *
td
);

1101 
	`thªad_¸óã
(
thªad
 *
td
, 
π¥io
 *
πp
,

1102 (*
öôülize_thªad
)(
thªad
 *, *), *
thunk
);

1103 
	$thªad_exô
(Ë
__dód2
;

1104 
	`thªad_‰ì
(
thªad
 *
td
);

1105 
	`thªad_lök
(
thªad
 *
td
, 
¥oc
 *
p
);

1106 
	`thªad_ª≠
();

1107 
	`thªad_sögÀ
(
¥oc
 *
p
, 
how
);

1108 
	`thªad_sögÀ_íd
(
¥oc
 *
p
, 
how
);

1109 
	`thªad_°ash
(
thªad
 *
td
);

1110 
	`thªad_°›≥d
(
¥oc
 *
p
);

1111 
	`chûd¥oc_°›≥d
(
¥oc
 *
chûd
, 
ªas⁄
);

1112 
	`chûd¥oc_c⁄töued
(
¥oc
 *
chûd
);

1113 
	`chûd¥oc_exôed
(
¥oc
 *
chûd
);

1114 
	`thªad_su•íd_check
(
how
);

1115 
boﬁ
 
	`thªad_su•íd_check_√eded
();

1116 
	`thªad_su•íd_swôch
(
thªad
 *, 
¥oc
 *
p
);

1117 
	`thªad_su•íd_⁄e
(
thªad
 *
td
);

1118 
	`thªad_u∆ök
(
thªad
 *
td
);

1119 
	`thªad_unsu•íd
(
¥oc
 *
p
);

1120 
	`thªad_waô
(
¥oc
 *
p
);

1121 
thªad
 *
	`thªad_föd
(
¥oc
 *
p
, 
lwpid_t
 
tid
);

1123 
	`°›_Æl_¥oc
();

1124 
	`ªsume_Æl_¥oc
();

1126 
__ölöe
 

1127 
	$cuπhªad_pÊags_£t
(
Êags
)

1129 
thªad
 *
td
;

1130 
ßve
;

1132 
td
 = 
cuπhªad
;

1133 
ßve
 = ~
Êags
 | (
td
->
td_pÊags
 & flags);

1134 
td
->
td_pÊags
 |
Êags
;

1135  (
ßve
);

1136 
	}
}

1138 
__ölöe
 

1139 
	$cuπhªad_pÊags_ª°‹e
(
ßve
)

1142 
cuπhªad
->
td_pÊags
 &
ßve
;

1143 
	}
}

1145 
__ölöe
 
__puª2
 
td_sched
 *

1146 
	$td_gë_sched
(
thªad
 *
td
)

1149  ((
td_sched
 *)&
td
[1]);

1150 
	}
}

1152 (*
so·dï_a°_˛ónup
)(
thªad
 *);

1153 
__ölöe
 

1154 
	$td_so·dï_˛ónup
(
thªad
 *
td
)

1157 i‡(
td
->
td_su
 !
NULL
 && 
so·dï_a°_˛ónup
 != NULL)

1158 
	`so·dï_a°_˛ónup
(
td
);

1159 
	}
}

	@/usr/include/sys/queue.h

35 #i‚de‡
_SYS_QUEUE_H_


36 
	#_SYS_QUEUE_H_


	)

38 
	~<sys/cdefs.h
>

118 #ifde‡
QUEUE_MACRO_DEBUG


119 #w¨¿
U£
 
QUEUE_MACRO_DEBUG_TRACE
 
™d
/
‹
 
QUEUE_MACRO_DEBUG_TRASH


120 
	#QUEUE_MACRO_DEBUG_TRACE


	)

121 
	#QUEUE_MACRO_DEBUG_TRASH


	)

124 #ifde‡
QUEUE_MACRO_DEBUG_TRACE


126 
	sqm_åa˚
 {

127 
	mœ°löe
;

128 
	m¥evlöe
;

129 c⁄° *
	mœ°fûe
;

130 c⁄° *
	m¥evfûe
;

133 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

134 
	#TRACEBUF_INITIALIZER
 { 
__LINE__
, 0, 
__FILE__
, 
NULL
 } ,

	)

136 
	#QMD_TRACE_HEAD
(
hód
) do { \

137 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

138 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

139 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

140 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

141 } 0)

	)

143 
	#QMD_TRACE_ELEM
(
ñem
) do { \

144 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

145 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

146 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

147 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

148 } 0)

	)

151 
	#QMD_TRACE_ELEM
(
ñem
)

	)

152 
	#QMD_TRACE_HEAD
(
hód
)

	)

153 
	#TRACEBUF


	)

154 
	#TRACEBUF_INITIALIZER


	)

157 #ifde‡
QUEUE_MACRO_DEBUG_TRASH


158 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

159 
	#QMD_IS_TRASHED
(
x
Ë((xË=(*)(
öçå_t
)-1)

	)

161 
	#TRASHIT
(
x
)

	)

162 
	#QMD_IS_TRASHED
(
x
Ë0

	)

165 #i‡
deföed
(
QUEUE_MACRO_DEBUG_TRACE
Ë|| deföed(
QUEUE_MACRO_DEBUG_TRASH
)

166 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

168 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

171 #ifde‡
__˝lu•lus


175 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

177 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

183 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

184 
	s«me
 { \

185 
ty≥
 *
¶h_fú°
; \

186 }

	)

188 
	#SLIST_CLASS_HEAD
(
«me
, 
ty≥
) \

189 
	s«me
 { \

190 
˛ass
 
ty≥
 *
¶h_fú°
; \

191 }

	)

193 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

194 { 
NULL
 }

	)

196 
	#SLIST_ENTRY
(
ty≥
) \

198 
ty≥
 *
¶e_√xt
; \

199 }

	)

201 
	#SLIST_CLASS_ENTRY
(
ty≥
) \

203 
˛ass
 
ty≥
 *
¶e_√xt
; \

204 }

	)

209 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

210 
	#QMD_SLIST_CHECK_PREVPTR
(
¥evp
, 
ñm
) do { \

211 i‡(*(
¥evp
Ë!(
ñm
)) \

212 
	`∑nic
("BadÖrevptr *(%p) == %p != %p", \

213 (
¥evp
), *’ªvp), (
ñm
)); \

214 } 0)

	)

216 
	#QMD_SLIST_CHECK_PREVPTR
(
¥evp
, 
ñm
)

	)

219 
	#SLIST_CONCAT
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

220 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`SLIST_FIRST
(
hód1
); \

221 i‡(
cuªlm
 =
NULL
) { \

222 i‡((
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
)Ë!
NULL
) \

223 
	`SLIST_INIT
(
hód2
); \

224 } i‡(
	`SLIST_FIRST
(
hód2
Ë!
NULL
) { \

225 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!
NULL
) \

226 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

227 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë
	`SLIST_FIRST
(
hód2
); \

228 
	`SLIST_INIT
(
hód2
); \

230 } 0)

	)

232 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

234 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

236 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

237 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

238 (
v¨
); \

239 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

241 
	#SLIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

242 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

243 (
v¨
); \

244 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

246 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

247 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

248 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

249 (
v¨
Ë(
tv¨
))

	)

251 
	#SLIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

252 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

253 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

254 (
v¨
Ë(
tv¨
))

	)

256 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

257 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

258 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

259 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

261 
	#SLIST_INIT
(
hód
) do { \

262 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

263 } 0)

	)

265 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

266 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

267 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

268 } 0)

	)

270 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

271 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

272 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

273 } 0)

	)

275 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

277 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

278 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
¶e_√xt
); \

279 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

280 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

283 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`SLIST_FIRST
(
hód
); \

284 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

285 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

286 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

288 
	`TRASHIT
(*
ﬁd√xt
); \

289 } 0)

	)

291 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

292 
	`SLIST_NEXT
(
ñm
, 
fõld
) = \

293 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field); \

294 } 0)

	)

296 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

297 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

298 } 0)

	)

300 
	#SLIST_REMOVE_PREVPTR
(
¥evp
, 
ñm
, 
fõld
) do { \

301 
	`QMD_SLIST_CHECK_PREVPTR
(
¥evp
, 
ñm
); \

302 *(
¥evp
Ë
	`SLIST_NEXT
(
ñm
, 
fõld
); \

303 
	`TRASHIT
((
ñm
)->
fõld
.
¶e_√xt
); \

304 } 0)

	)

306 
	#SLIST_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

307 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`SLIST_FIRST
(
hód1
); \

308 
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
); \

309 
	`SLIST_FIRST
(
hód2
Ë
sw≠_fú°
; \

310 } 0)

	)

315 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

316 
	s«me
 { \

317 
ty≥
 *
°qh_fú°
; \

318 
ty≥
 **
°qh_œ°
; \

319 }

	)

321 
	#STAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

322 
	s«me
 { \

323 
˛ass
 
ty≥
 *
°qh_fú°
; \

324 
˛ass
 
ty≥
 **
°qh_œ°
; \

325 }

	)

327 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

328 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

330 
	#STAILQ_ENTRY
(
ty≥
) \

332 
ty≥
 *
°qe_√xt
; \

333 }

	)

335 
	#STAILQ_CLASS_ENTRY
(
ty≥
) \

337 
˛ass
 
ty≥
 *
°qe_√xt
; \

338 }

	)

343 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

344 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

345 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

346 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

347 
	`STAILQ_INIT
((
hód2
)); \

349 } 0)

	)

351 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

353 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

355 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

356 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

357 (
v¨
); \

358 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

360 
	#STAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

361 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

362 (
v¨
); \

363 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

365 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

366 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

367 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

368 (
v¨
Ë(
tv¨
))

	)

370 
	#STAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

371 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

372 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

373 (
v¨
Ë(
tv¨
))

	)

375 
	#STAILQ_INIT
(
hód
) do { \

376 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

377 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

378 } 0)

	)

380 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

381 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

382 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

383 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

384 } 0)

	)

386 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

387 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

388 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

389 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

390 } 0)

	)

392 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

393 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

394 *(
hód
)->
°qh_œ°
 = (
ñm
); \

395 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

396 } 0)

	)

398 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

399 (
	`STAILQ_EMPTY
((
hód
)Ë? 
NULL
 : \

400 
	`__c⁄èöîof
((
hód
)->
°qh_œ°
, \

401 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
°qe_√xt
))

	)

403 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

405 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

406 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
°qe_√xt
); \

407 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

408 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

411 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`STAILQ_FIRST
(
hód
); \

412 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

413 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

414 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

416 
	`TRASHIT
(*
ﬁd√xt
); \

417 } 0)

	)

419 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

420 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

421 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) \

422 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

423 } 0)

	)

425 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

426 i‡((
	`STAILQ_FIRST
((
hód
)) = \

427 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

428 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

429 } 0)

	)

431 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

432 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

433 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

434 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

435 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

436 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

437 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

438 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

439 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

440 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

441 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

442 } 0)

	)

448 
	#LIST_HEAD
(
«me
, 
ty≥
) \

449 
	s«me
 { \

450 
ty≥
 *
lh_fú°
; \

451 }

	)

453 
	#LIST_CLASS_HEAD
(
«me
, 
ty≥
) \

454 
	s«me
 { \

455 
˛ass
 
ty≥
 *
lh_fú°
; \

456 }

	)

458 
	#LIST_HEAD_INITIALIZER
(
hód
) \

459 { 
NULL
 }

	)

461 
	#LIST_ENTRY
(
ty≥
) \

463 
ty≥
 *
À_√xt
; \

464 
ty≥
 **
À_¥ev
; \

465 }

	)

467 
	#LIST_CLASS_ENTRY
(
ty≥
) \

469 
˛ass
 
ty≥
 *
À_√xt
; \

470 
˛ass
 
ty≥
 **
À_¥ev
; \

471 }

	)

477 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

484 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

485 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

486 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

487 &
	`LIST_FIRST
((
hód
))) \

488 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

489 } 0)

	)

497 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

498 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

499 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

500 &((
ñm
)->
fõld
.
À_√xt
)) \

501 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

502 } 0)

	)

509 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

510 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

511 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

512 } 0)

	)

514 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

515 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

516 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

519 
	#LIST_CONCAT
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

520 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`LIST_FIRST
(
hód1
); \

521 i‡(
cuªlm
 =
NULL
) { \

522 i‡((
	`LIST_FIRST
(
hód1
ËLIST_FIRST(
hód2
)Ë!
NULL
) { \

523 
	`LIST_FIRST
(
hód2
)->
fõld
.
À_¥ev
 = \

524 &
	`LIST_FIRST
((
hód1
)); \

525 
	`LIST_INIT
(
hód2
); \

527 } i‡(
	`LIST_FIRST
(
hód2
Ë!
NULL
) { \

528 
	`LIST_NEXT
(
cuªlm
, 
fõld
Ë!
NULL
) \

529 
cuªlm
 = 
	`LIST_NEXT
(cuªlm, 
fõld
); \

530 
	`LIST_NEXT
(
cuªlm
, 
fõld
Ë
	`LIST_FIRST
(
hód2
); \

531 
	`LIST_FIRST
(
hód2
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
(
cuªlm
, field); \

532 
	`LIST_INIT
(
hód2
); \

534 } 0)

	)

536 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

538 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

540 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

541 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

542 (
v¨
); \

543 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

545 
	#LIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

546 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

547 (
v¨
); \

548 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

550 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

551 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

552 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

553 (
v¨
Ë(
tv¨
))

	)

555 
	#LIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

556 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

557 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

558 (
v¨
Ë(
tv¨
))

	)

560 
	#LIST_INIT
(
hód
) do { \

561 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

562 } 0)

	)

564 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

565 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

566 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

567 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

568 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

569 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

570 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

571 } 0)

	)

573 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

574 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

575 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

576 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

577 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

578 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

579 } 0)

	)

581 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

582 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

583 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

584 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

585 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

586 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

587 } 0)

	)

589 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

591 
	#LIST_PREV
(
ñm
, 
hód
, 
ty≥
, 
fõld
) \

592 ((
ñm
)->
fõld
.
À_¥ev
 =&
	`LIST_FIRST
((
hód
)Ë? 
NULL
 : \

593 
	`__c⁄èöîof
((
ñm
)->
fõld
.
À_¥ev
, \

594 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
À_√xt
))

	)

596 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

597 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

598 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

599 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

600 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

601 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

602 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

603 (
ñm
)->
fõld
.
À_¥ev
; \

604 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

605 
	`TRASHIT
(*
ﬁd√xt
); \

606 
	`TRASHIT
(*
ﬁd¥ev
); \

607 } 0)

	)

609 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

610 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_tmp
 = 
	`LIST_FIRST
(
hód1
); \

611 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

612 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

613 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

614 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

615 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

616 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

617 } 0)

	)

622 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

623 
	s«me
 { \

624 
ty≥
 *
tqh_fú°
; \

625 
ty≥
 **
tqh_œ°
; \

626 
TRACEBUF
 \

627 }

	)

629 
	#TAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

630 
	s«me
 { \

631 
˛ass
 
ty≥
 *
tqh_fú°
; \

632 
˛ass
 
ty≥
 **
tqh_œ°
; \

633 
TRACEBUF
 \

634 }

	)

636 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

637 { 
NULL
, &(
hód
).
tqh_fú°
, 
TRACEBUF_INITIALIZER
 }

	)

639 
	#TAILQ_ENTRY
(
ty≥
) \

641 
ty≥
 *
tqe_√xt
; \

642 
ty≥
 **
tqe_¥ev
; \

643 
TRACEBUF
 \

644 }

	)

646 
	#TAILQ_CLASS_ENTRY
(
ty≥
) \

648 
˛ass
 
ty≥
 *
tqe_√xt
; \

649 
˛ass
 
ty≥
 **
tqe_¥ev
; \

650 
TRACEBUF
 \

651 }

	)

656 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

663 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

664 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

665 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

666 &
	`TAILQ_FIRST
((
hód
))) \

667 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

668 } 0)

	)

675 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

676 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

677 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

678 } 0)

	)

686 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

687 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

688 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

689 &((
ñm
)->
fõld
.
tqe_√xt
)) \

690 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

691 } 0)

	)

698 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

699 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

700 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

701 } 0)

	)

703 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

704 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

705 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

706 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

709 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

710 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

711 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

712 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

713 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

714 
	`TAILQ_INIT
((
hód2
)); \

715 
	`QMD_TRACE_HEAD
(
hód1
); \

716 
	`QMD_TRACE_HEAD
(
hód2
); \

718 } 0)

	)

720 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

722 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

724 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

725 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

726 (
v¨
); \

727 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

729 
	#TAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

730 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

731 (
v¨
); \

732 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

734 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

735 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

736 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

737 (
v¨
Ë(
tv¨
))

	)

739 
	#TAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

740 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

741 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

742 (
v¨
Ë(
tv¨
))

	)

744 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

745 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

746 (
v¨
); \

747 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

749 
	#TAILQ_FOREACH_REVERSE_FROM
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

750 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

751 (
v¨
); \

752 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

754 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

755 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

756 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

757 (
v¨
Ë(
tv¨
))

	)

759 
	#TAILQ_FOREACH_REVERSE_FROM_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

760 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

761 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

762 (
v¨
Ë(
tv¨
))

	)

764 
	#TAILQ_INIT
(
hód
) do { \

765 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

766 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

767 
	`QMD_TRACE_HEAD
(
hód
); \

768 } 0)

	)

770 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

771 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

772 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

773 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

774 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

776 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

777 
	`QMD_TRACE_HEAD
(
hód
); \

779 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

780 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

781 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

782 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

783 } 0)

	)

785 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

786 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

787 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

788 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

789 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

790 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

791 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

792 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

793 } 0)

	)

795 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

796 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

797 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

798 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

799 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

801 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

802 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

803 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

804 
	`QMD_TRACE_HEAD
(
hód
); \

805 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

806 } 0)

	)

808 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

809 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

810 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

811 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

812 *(
hód
)->
tqh_œ°
 = (
ñm
); \

813 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

814 
	`QMD_TRACE_HEAD
(
hód
); \

815 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

816 } 0)

	)

818 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

819 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

828 
	#TAILQ_LAST_FAST
(
hód
, 
ty≥
, 
fõld
) \

829 (
	`TAILQ_EMPTY
(
hód
Ë? 
NULL
 : 
	`__c⁄èöîof
((hód)->
tqh_œ°
, 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
tqe_√xt
))

	)

831 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

833 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

834 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

836 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

837 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

838 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

839 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

840 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

841 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

842 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

843 (
ñm
)->
fõld
.
tqe_¥ev
; \

845 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

846 
	`QMD_TRACE_HEAD
(
hód
); \

848 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

849 
	`TRASHIT
(*
ﬁd√xt
); \

850 
	`TRASHIT
(*
ﬁd¥ev
); \

851 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

852 } 0)

	)

854 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

855 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

856 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

857 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

858 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

859 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

860 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

861 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

862 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

864 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

865 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

866 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

868 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

869 } 0)

	)

	@/usr/include/sys/resourcevar.h

35 #i‚def 
_SYS_RESOURCEVAR_H_


36 
	#_SYS_RESOURCEVAR_H_


	)

38 
	~<sys/ªsour˚.h
>

39 
	~<sys/queue.h
>

40 #ifde‡
_KERNEL


41 
	~<sys/_lock.h
>

42 
	~<sys/_muãx.h
>

56 
	sp°©s
 {

57 
	#p°©_°¨tzîo
 
p_¸u


	)

58 
rußge
 
	mp_¸u
;

59 
ôimîvÆ
 
	mp_timî
[3];

60 
	#p°©_ídzîo
 
p°©_°¨tc›y


	)

62 
	#p°©_°¨tc›y
 
p_¥of


	)

63 
	su¥of
 {

64 
ˇddr_t
 
	m¥_ba£
;

65 
u_l⁄g
 
	m¥_size
;

66 
u_l⁄g
 
	m¥_off
;

67 
u_l⁄g
 
	m¥_sˇÀ
;

68 } 
	mp_¥of
;

69 
	#p°©_ídc›y
 
p_°¨t


	)

70 
timevÆ
 
	mp_°¨t
;

73 #ifde‡
_KERNEL


80 
	s∂imô
 {

81 
æimô
 
	m∂_æimô
[
RLIM_NLIMITS
];

82 
	m∂_ªf˙t
;

85 
	gøc˘
;

97 
	suidöfo
 {

98 
LIST_ENTRY
(
uidöfo
Ë
	mui_hash
;

99 
u_l⁄g
 
	mui_vmsize
;

100 
	mui_sbsize
;

101 
	mui_¥oc˙t
;

102 
	mui_±s˙t
;

103 
	mui_kq˙t
;

104 
	mui_umtx˙t
;

105 
uid_t
 
	mui_uid
;

106 
u_öt
 
	mui_ªf
;

107 #ifdef 
RACCT


108 
øc˘
 *
	mui_øc˘
;

112 
	#UIDINFO_VMSIZE_LOCK
(
ui
Ë
	`mtx_lock
(&((ui)->
ui_vmsize_mtx
))

	)

113 
	#UIDINFO_VMSIZE_UNLOCK
(
ui
Ë
	`mtx_u∆ock
(&((ui)->
ui_vmsize_mtx
))

	)

115 
	g¥oc
;

116 
	grußge_ext
;

117 
	gthªad
;

119 
addupc_öå
(
thªad
 *
td
, 
uötÂå_t
 
pc
, 
u_öt
 
ticks
);

120 
addupc_èsk
(
thªad
 *
td
, 
uötÂå_t
 
pc
, 
u_öt
 
ticks
);

121 
ˇlc¸u
(
¥oc
 *
p
, 
timevÆ
 *
up
, timevÆ *
•
);

122 
ˇl¸u
(
¥oc
 *
p
, 
timevÆ
 *
up
, timevÆ *
•
);

123 
chgkq˙t
(
uidöfo
 *
uù
, 
diff
, 
æim_t
 
max
);

124 
chg¥oc˙t
(
uidöfo
 *
uù
, 
diff
, 
æim_t
 
maxvÆ
);

125 
chgsbsize
(
uidöfo
 *
uù
, 
u_öt
 *
hiw©
, u_öà
to
,

126 
æim_t
 
maxvÆ
);

127 
chg±s˙t
(
uidöfo
 *
uù
, 
diff
, 
æim_t
 
maxvÆ
);

128 
chgumtx˙t
(
uidöfo
 *
uù
, 
diff
, 
æim_t
 
maxvÆ
);

129 
kîn_¥oc_£ålimô
(
thªad
 *
td
, 
¥oc
 *
p
, 
u_öt
 
which
,

130 
æimô
 *
limp
);

131 
∂imô


132 *
lim_Æloc
();

133 
lim_c›y
(
∂imô
 *
d°
, ∂imô *
§c
);

134 
æim_t
 
lim_cur
(
thªad
 *
td
, 
which
);

135 
æim_t
 
lim_cur_¥oc
(
¥oc
 *
p
, 
which
);

136 
lim_f‹k
(
¥oc
 *
p1
, ¥o¯*
p2
);

137 
lim_‰ì
(
∂imô
 *
limp
);

138 
∂imô


139 *
lim_hﬁd
(
∂imô
 *
limp
);

140 
æim_t
 
lim_max
(
thªad
 *
td
, 
which
);

141 
æim_t
 
lim_max_¥oc
(
¥oc
 *
p
, 
which
);

142 
lim_æimô
(
thªad
 *
td
, 
which
, 
æimô
 *
æp
);

143 
lim_æimô_¥oc
(
¥oc
 *
p
, 
which
, 
æimô
 *
æp
);

144 
ruadd
(
rußge
 *
ru
, 
rußge_ext
 *
rux
, rußgê*
ru2
,

145 
rußge_ext
 *
rux2
);

146 
rucﬁÀ˘
(
rußge
 *
ru
, rußgê*
ru2
);

147 
ru„tch
(
¥oc
 *
p
, 
rußge
 *
ru
);

148 
ru„tchˇlc
(
¥oc
 *
p
, 
rußge
 *
ru
, 
timevÆ
 *
up
,

149 
timevÆ
 *
•
);

150 
ru„tchtd
(
thªad
 *
td
, 
rußge
 *
ru
);

151 
ruxagg
(
¥oc
 *
p
, 
thªad
 *
td
);

152 
uidöfo


153 *
uiföd
(
uid_t
 
uid
);

154 
ui‰ì
(
uidöfo
 *
uù
);

155 
uihashöô
();

156 
uihﬁd
(
uidöfo
 *
uù
);

157 #ifdef 
RACCT


158 
ui_øc˘_f‹óch
((*
ˇŒback
)(
øc˘
 *racct,

159 *
¨g2
, *
¨g3
), (*
¥e
)(), (*
po°
)(),

160 *
¨g2
, *
¨g3
);

	@/usr/include/sys/rman.h

34 #i‚de‡
_SYS_RMAN_H_


35 
	#_SYS_RMAN_H_
 1

	)

37 #i‚def 
_KERNEL


38 
	~<sys/queue.h
>

40 
	~<machöe/_bus.h
>

41 
	~<machöe/ªsour˚.h
>

44 
	#RF_ALLOCATED
 0x0001

	)

45 
	#RF_ACTIVE
 0x0002

	)

46 
	#RF_SHAREABLE
 0x0004

	)

47 
	#RF_SPARE1
 0x0008

	)

48 
	#RF_SPARE2
 0x0010

	)

49 
	#RF_FIRSTSHARE
 0x0020

	)

50 
	#RF_PREFETCHABLE
 0x0040

	)

51 
	#RF_OPTIONAL
 0x0080

	)

52 
	#RF_UNMAPPED
 0x0100

	)

54 
	#RF_ALIGNMENT_SHIFT
 10

	)

55 
	#RF_ALIGNMENT_MASK
 (0x003F << 
RF_ALIGNMENT_SHIFT
)

	)

57 
	#RF_ALIGNMENT_LOG2
(
x
Ë((xË<< 
RF_ALIGNMENT_SHIFT
)

	)

58 
	#RF_ALIGNMENT
(
x
Ë(((xË& 
RF_ALIGNMENT_MASK
Ë>> 
RF_ALIGNMENT_SHIFT
)

	)

60 
	erm™_ty≥
 { 
	mRMAN_UNINIT
 = 0, 
	mRMAN_GAUGE
, 
	mRMAN_ARRAY
 };

65 
	#RM_TEXTLEN
 32

	)

67 
	#RM_MAX_END
 (~(
rm™_ªs_t
)0)

	)

69 
	#RMAN_IS_DEFAULT_RANGE
(
s
,
e
Ë((sË=0 && (eË=
RM_MAX_END
)

	)

74 
	su_ªsour˚
 {

75 
uöçå_t
 
	mr_h™dÀ
;

76 
uöçå_t
 
	mr_∑ª¡
;

77 
uöçå_t
 
	mr_devi˚
;

78 
	mr_dev«me
[
RM_TEXTLEN
];

80 
rm™_ªs_t
 
	mr_°¨t
;

81 
rm™_ªs_t
 
	mr_size
;

82 
u_öt
 
	mr_Êags
;

85 
	su_rm™
 {

86 
uöçå_t
 
	mrm_h™dÀ
;

87 
	mrm_des¸
[
RM_TEXTLEN
];

89 
rm™_ªs_t
 
	mrm_°¨t
;

90 
rm™_ªs_t
 
	mrm_size
;

91 
rm™_ty≥
 
	mrm_ty≥
;

94 #ifde‡
_KERNEL


104 
	sªsour˚
 {

105 
ªsour˚_i
 *
	m__r_i
;

106 
bus_•a˚_èg_t
 
	mr_bu°ag
;

107 
bus_•a˚_h™dÀ_t
 
	mr_bush™dÀ
;

110 
	gªsour˚_i
;

111 
	gªsour˚_m≠
;

113 
TAILQ_HEAD
(
ªsour˚_hód
, 
ªsour˚_i
);

115 
	srm™
 {

116 
ªsour˚_hód
 
	mrm_li°
;

117 
mtx
 *
	mrm_mtx
;

118 
TAILQ_ENTRY
(
rm™
Ë
	mrm_lök
;

119 
rm™_ªs_t
 
	mrm_°¨t
;

120 
rm™_ªs_t
 
	mrm_íd
;

121 
rm™_ty≥
 
	mrm_ty≥
;

122 c⁄° *
	mrm_des¸
;

124 
TAILQ_HEAD
(
rm™_hód
, 
rm™
);

126 
rm™_a˘iv©e_ªsour˚
(
ªsour˚
 *
r
);

127 
rm™_adju°_ªsour˚
(
ªsour˚
 *
r
, 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
);

128 
rm™_fú°_‰ì_ªgi⁄
(
rm™
 *
rm
, 
rm™_ªs_t
 *
°¨t
,Ñm™_ªs_à*
íd
);

129 
bus_•a˚_h™dÀ_t
 
rm™_gë_bush™dÀ
(
ªsour˚
 *);

130 
bus_•a˚_èg_t
 
rm™_gë_bu°ag
(
ªsour˚
 *);

131 
rm™_ªs_t
 
rm™_gë_íd
(
ªsour˚
 *);

132 
devi˚_t
 
rm™_gë_devi˚
(
ªsour˚
 *);

133 
u_öt
 
rm™_gë_Êags
(
ªsour˚
 *);

134 
rm™_gë_m≠pög
(
ªsour˚
 *, 
ªsour˚_m≠
 *);

135 
rm™_gë_rid
(
ªsour˚
 *);

136 
rm™_ªs_t
 
rm™_gë_size
(
ªsour˚
 *);

137 
rm™_ªs_t
 
rm™_gë_°¨t
(
ªsour˚
 *);

138 *
rm™_gë_vútuÆ
(
ªsour˚
 *);

139 
rm™_dó˘iv©e_ªsour˚
(
ªsour˚
 *
r
);

140 
rm™_föi
(
rm™
 *
rm
);

141 
rm™_öô
(
rm™
 *
rm
);

142 
rm™_öô_‰om_ªsour˚
(
rm™
 *
rm
, 
ªsour˚
 *
r
);

143 
rm™_œ°_‰ì_ªgi⁄
(
rm™
 *
rm
, 
rm™_ªs_t
 *
°¨t
,Ñm™_ªs_à*
íd
);

144 
uöt32_t
 
rm™_make_Æignmít_Êags
(uöt32_à
size
);

145 
rm™_m™age_ªgi⁄
(
rm™
 *
rm
, 
rm™_ªs_t
 
°¨t
,Ñm™_ªs_à
íd
);

146 
rm™_is_ªgi⁄_m™agî
(
ªsour˚
 *
r
, 
rm™
 *
rm
);

147 
rm™_ªÀa£_ªsour˚
(
ªsour˚
 *
r
);

148 
ªsour˚
 *
rm™_ª£rve_ªsour˚
(
rm™
 *
rm
, 
rm™_ªs_t
 
°¨t
,

149 
rm™_ªs_t
 
íd
,Ñm™_ªs_à
cou¡
,

150 
u_öt
 
Êags
, 
devi˚_t
 
dev
);

151 
ªsour˚
 *
rm™_ª£rve_ªsour˚_bound
(
rm™
 *
rm
, 
rm™_ªs_t
 
°¨t
,

152 
rm™_ªs_t
 
íd
,Ñm™_ªs_à
cou¡
,Ñm™_ªs_à
bound
,

153 
u_öt
 
Êags
, 
devi˚_t
 
dev
);

154 
rm™_£t_bush™dÀ
(
ªsour˚
 *
_r
, 
bus_•a˚_h™dÀ_t
 
_h
);

155 
rm™_£t_bu°ag
(
ªsour˚
 *
_r
, 
bus_•a˚_èg_t
 
_t
);

156 
rm™_£t_devi˚
(
ªsour˚
 *
_r
, 
devi˚_t
 
_dev
);

157 
rm™_£t_íd
(
ªsour˚
 *
_r
, 
rm™_ªs_t
 
_íd
);

158 
rm™_£t_m≠pög
(
ªsour˚
 *, 
ªsour˚_m≠
 *);

159 
rm™_£t_rid
(
ªsour˚
 *
_r
, 
_rid
);

160 
rm™_£t_°¨t
(
ªsour˚
 *
_r
, 
rm™_ªs_t
 
_°¨t
);

161 
rm™_£t_vútuÆ
(
ªsour˚
 *
_r
, *
_v
);

163 
rm™_hód
Ñman_head;

	@/usr/include/sys/rwlock.h

31 #i‚de‡
_SYS_RWLOCK_H_


32 
	#_SYS_RWLOCK_H_


	)

34 
	~<sys/_lock.h
>

35 
	~<sys/_rwlock.h
>

36 
	~<sys/lock_¥ofûe.h
>

37 
	~<sys/lock°©.h
>

39 #ifde‡
_KERNEL


40 
	~<sys/p˝u.h
>

41 
	~<machöe/©omic.h
>

59 
	#RW_LOCK_READ
 0x01

	)

60 
	#RW_LOCK_READ_WAITERS
 0x02

	)

61 
	#RW_LOCK_WRITE_WAITERS
 0x04

	)

62 
	#RW_LOCK_WRITE_SPINNER
 0x08

	)

63 
	#RW_LOCK_WRITER_RECURSED
 0x10

	)

64 
	#RW_LOCK_FLAGMASK
 \

65 (
RW_LOCK_READ
 | 
RW_LOCK_READ_WAITERS
 | 
RW_LOCK_WRITE_WAITERS
 | \

66 
RW_LOCK_WRITE_SPINNER
 | 
RW_LOCK_WRITER_RECURSED
)

	)

67 
	#RW_LOCK_WAITERS
 (
RW_LOCK_READ_WAITERS
 | 
RW_LOCK_WRITE_WAITERS
)

	)

69 
	#RW_OWNER
(
x
Ë((xË& ~
RW_LOCK_FLAGMASK
)

	)

70 
	#RW_READERS_SHIFT
 5

	)

71 
	#RW_READERS
(
x
Ë(
	`RW_OWNER
((x)Ë>> 
RW_READERS_SHIFT
)

	)

72 
	#RW_READERS_LOCK
(
x
Ë((xË<< 
RW_READERS_SHIFT
 | 
RW_LOCK_READ
)

	)

73 
	#RW_ONE_READER
 (1 << 
RW_READERS_SHIFT
)

	)

75 
	#RW_UNLOCKED
 
	`RW_READERS_LOCK
(0)

	)

76 
	#RW_DESTROYED
 (
RW_LOCK_READ_WAITERS
 | 
RW_LOCK_WRITE_WAITERS
)

	)

78 #ifde‡
_KERNEL


80 
	#rw_ªcur£
 
lock_obje˘
.
lo_d©a


	)

82 
	#RW_READ_VALUE
(
x
Ë((x)->
rw_lock
)

	)

87 
	#_rw_wrôe_lock
(
rw
, 
tid
) \

88 
	`©omic_cmp£t_acq_±r
(&(
rw
)->
rw_lock
, 
RW_UNLOCKED
, (
tid
))

	)

90 
	#_rw_wrôe_lock_„tch
(
rw
, 
vp
, 
tid
) \

91 
	`©omic_fcmp£t_acq_±r
(&(
rw
)->
rw_lock
, 
vp
, (
tid
))

	)

94 
	#_rw_wrôe_u∆ock
(
rw
, 
tid
) \

95 
	`©omic_cmp£t_ªl_±r
(&(
rw
)->
rw_lock
, (
tid
), 
RW_UNLOCKED
)

	)

97 
	#_rw_wrôe_u∆ock_„tch
(
rw
, 
tid
) \

98 
	`©omic_fcmp£t_ªl_±r
(&(
rw
)->
rw_lock
, (
tid
), 
RW_UNLOCKED
)

	)

107 
	#__rw_wlock
(
rw
, 
tid
, 
fûe
, 
löe
) do { \

108 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

109 
uöçå_t
 
_v
 = 
RW_UNLOCKED
; \

111 i‡(
	`__¥edi˘_Ál£
(
	`LOCKSTAT_PROFILE_ENABLED
(
rw__acquúe
) || \

112 !
	`_rw_wrôe_lock_„tch
((
rw
), &
_v
, 
_tid
))) \

113 
	`_rw_wlock_h¨d
((
rw
), 
_v
, (
fûe
), (
löe
)); \

114 } 0)

	)

117 
	#__rw_wu∆ock
(
rw
, 
tid
, 
fûe
, 
löe
) do { \

118 
uöçå_t
 
_v
 = (uöçå_t)(
tid
); \

120 i‡(
	`__¥edi˘_Ál£
(
	`LOCKSTAT_PROFILE_ENABLED
(
rw__ªÀa£
) || \

121 !
	`_rw_wrôe_u∆ock_„tch
((
rw
), &
_v
))) \

122 
	`_rw_wu∆ock_h¨d
((
rw
), 
_v
, (
fûe
), (
löe
)); \

123 } 0)

	)

130 
_rw_öô_Êags
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
«me
, 
›ts
);

131 
_rw_de°roy
(vﬁ©ûê
uöçå_t
 *
c
);

132 
rw_sysöô
(*
¨g
);

133 
rw_sysöô_Êags
(*
¨g
);

134 
_rw_wow√d
(c⁄° vﬁ©ûê
uöçå_t
 *
c
);

135 
_rw_wlock_cookõ
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

136 
__rw_åy_wlock_öt
(
rwlock
 *
rw
 
LOCK_FILE_LINE_ARG_DEF
);

137 
__rw_åy_wlock
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

138 
_rw_wu∆ock_cookõ
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

139 
__rw_æock_öt
(
rwlock
 *
rw
 
LOCK_FILE_LINE_ARG_DEF
);

140 
__rw_æock
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

141 
__rw_åy_æock_öt
(
rwlock
 *
rw
 
LOCK_FILE_LINE_ARG_DEF
);

142 
__rw_åy_æock
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

143 
_rw_ru∆ock_cookõ_öt
(
rwlock
 *
rw
 
LOCK_FILE_LINE_ARG_DEF
);

144 
_rw_ru∆ock_cookõ
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

145 
__rw_wlock_h¨d
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v


146 
LOCK_FILE_LINE_ARG_DEF
);

147 
__rw_wu∆ock_h¨d
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
v


148 
LOCK_FILE_LINE_ARG_DEF
);

149 
__rw_åy_upgøde_öt
(
rwlock
 *
rw
 
LOCK_FILE_LINE_ARG_DEF
);

150 
__rw_åy_upgøde
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

151 
__rw_downgøde_öt
(
rwlock
 *
rw
 
LOCK_FILE_LINE_ARG_DEF
);

152 
__rw_downgøde
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
fûe
, 
löe
);

153 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

154 
__rw_as£π
(c⁄° vﬁ©ûê
uöçå_t
 *
c
, 
wh©
, c⁄° *
fûe
,

155 
löe
);

163 
	#rw_öô
(
rw
, 
n
) \

164 
	`_rw_öô_Êags
(&(
rw
)->
rw_lock
, 
n
, 0)

	)

165 
	#rw_öô_Êags
(
rw
, 
n
, 
o
) \

166 
	`_rw_öô_Êags
(&(
rw
)->
rw_lock
, 
n
, 
o
)

	)

167 
	#rw_de°roy
(
rw
) \

168 
	`_rw_de°roy
(&(
rw
)->
rw_lock
)

	)

169 
	#rw_wow√d
(
rw
) \

170 
	`_rw_wow√d
(&(
rw
)->
rw_lock
)

	)

171 
	#_rw_wlock
(
rw
, 
f
, 
l
) \

172 
	`_rw_wlock_cookõ
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

173 
	#_rw_åy_wlock
(
rw
, 
f
, 
l
) \

174 
	`__rw_åy_wlock
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

175 
	#_rw_wu∆ock
(
rw
, 
f
, 
l
) \

176 
	`_rw_wu∆ock_cookõ
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

177 
	#_rw_åy_æock
(
rw
, 
f
, 
l
) \

178 
	`__rw_åy_æock
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

179 #i‡
LOCK_DEBUG
 > 0

180 
	#_rw_æock
(
rw
, 
f
, 
l
) \

181 
	`__rw_æock
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

182 
	#_rw_ru∆ock
(
rw
, 
f
, 
l
) \

183 
	`_rw_ru∆ock_cookõ
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

185 
	#_rw_æock
(
rw
, 
f
, 
l
) \

186 
	`__rw_æock_öt
((
rwlock
 *)
rw
)

	)

187 
	#_rw_ru∆ock
(
rw
, 
f
, 
l
) \

188 
	`_rw_ru∆ock_cookõ_öt
((
rwlock
 *)
rw
)

	)

190 #i‡
LOCK_DEBUG
 > 0

191 
	#_rw_wlock_h¨d
(
rw
, 
v
, 
f
, 
l
) \

192 
	`__rw_wlock_h¨d
(&(
rw
)->
rw_lock
, 
v
, 
f
, 
l
)

	)

193 
	#_rw_wu∆ock_h¨d
(
rw
, 
v
, 
f
, 
l
) \

194 
	`__rw_wu∆ock_h¨d
(&(
rw
)->
rw_lock
, 
v
, 
f
, 
l
)

	)

195 
	#_rw_åy_upgøde
(
rw
, 
f
, 
l
) \

196 
	`__rw_åy_upgøde
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

197 
	#_rw_downgøde
(
rw
, 
f
, 
l
) \

198 
	`__rw_downgøde
(&(
rw
)->
rw_lock
, 
f
, 
l
)

	)

200 
	#_rw_wlock_h¨d
(
rw
, 
v
, 
f
, 
l
) \

201 
	`__rw_wlock_h¨d
(&(
rw
)->
rw_lock
, 
v
)

	)

202 
	#_rw_wu∆ock_h¨d
(
rw
, 
v
, 
f
, 
l
) \

203 
	`__rw_wu∆ock_h¨d
(&(
rw
)->
rw_lock
, 
v
)

	)

204 
	#_rw_åy_upgøde
(
rw
, 
f
, 
l
) \

205 
	`__rw_åy_upgøde_öt
(
rw
)

	)

206 
	#_rw_downgøde
(
rw
, 
f
, 
l
) \

207 
	`__rw_downgøde_öt
(
rw
)

	)

209 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

210 
	#_rw_as£π
(
rw
, 
w
, 
f
, 
l
) \

211 
	`__rw_as£π
(&(
rw
)->
rw_lock
, 
w
, 
f
, 
l
)

	)

219 #i‚de‡
LOCK_DEBUG


220 #îr‹ 
LOCK_DEBUG
 
nŸ
 
deföed
, 
ö˛ude
 <
sys
/
lock
.
h
> 
bef‹e
 <sys/
rwlock
.h>

222 #i‡
LOCK_DEBUG
 > 0 || 
deföed
(
RWLOCK_NOINLINE
)

223 
	#rw_wlock
(
rw
Ë
	`_rw_wlock
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

224 
	#rw_wu∆ock
(
rw
Ë
	`_rw_wu∆ock
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

226 
	#rw_wlock
(
rw
) \

227 
	`__rw_wlock
((
rw
), 
cuπhªad
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

228 
	#rw_wu∆ock
(
rw
) \

229 
	`__rw_wu∆ock
((
rw
), 
cuπhªad
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

231 
	#rw_æock
(
rw
Ë
	`_rw_æock
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

232 
	#rw_ru∆ock
(
rw
Ë
	`_rw_ru∆ock
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

233 
	#rw_åy_æock
(
rw
Ë
	`_rw_åy_æock
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

234 
	#rw_åy_upgøde
(
rw
Ë
	`_rw_åy_upgøde
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

235 
	#rw_åy_wlock
(
rw
Ë
	`_rw_åy_wlock
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

236 
	#rw_downgøde
(
rw
Ë
	`_rw_downgøde
(‘w), 
LOCK_FILE
, 
LOCK_LINE
)

	)

237 
	#rw_u∆ock
(
rw
) do { \

238 i‡(
	`rw_wow√d
(
rw
)) \

239 
	`rw_wu∆ock
(
rw
); \

241 
	`rw_ru∆ock
(
rw
); \

242 } 0)

	)

243 
	#rw_¶ìp
(
ch™
, 
rw
, 
¥i
, 
wmesg
, 
timo
) \

244 
	`_¶ìp
((
ch™
), &(
rw
)->
lock_obje˘
, (
¥i
), (
wmesg
), \

245 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

247 
	#rw_öôülized
(
rw
Ë
	`lock_öôülized
(&‘w)->
lock_obje˘
)

	)

249 
	srw_¨gs
 {

250 *
	mø_rw
;

251 c⁄° *
	mø_desc
;

252 
	mø_Êags
;

255 
	#RW_SYSINIT_FLAGS
(
«me
, 
rw
, 
desc
, 
Êags
) \

256 
rw_¨gs
 
«me
##
_¨gs
 = { \

257 (
rw
), \

258 (
desc
), \

259 (
Êags
), \

261 
	`SYSINIT
(
«me
##
_rw_sysöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

262 
rw_sysöô
, &
«me
##
_¨gs
); \

263 
	`SYSUNINIT
(
«me
##
_rw_sysunöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

264 
_rw_de°roy
, 
	`__DEVOLATILE
(*, &(
rw
)->
rw_lock
))

	)

266 
	#RW_SYSINIT
(
«me
, 
rw
, 
desc
Ë
	`RW_SYSINIT_FLAGS
“ame,Ñw, desc, 0)

	)

271 
	#RW_DUPOK
 0x01

	)

272 
	#RW_NOPROFILE
 0x02

	)

273 
	#RW_NOWITNESS
 0x04

	)

274 
	#RW_QUIET
 0x08

	)

275 
	#RW_RECURSE
 0x10

	)

276 
	#RW_NEW
 0x20

	)

285 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

286 
	#RA_LOCKED
 
LA_LOCKED


	)

287 
	#RA_RLOCKED
 
LA_SLOCKED


	)

288 
	#RA_WLOCKED
 
LA_XLOCKED


	)

289 
	#RA_UNLOCKED
 
LA_UNLOCKED


	)

290 
	#RA_RECURSED
 
LA_RECURSED


	)

291 
	#RA_NOTRECURSED
 
LA_NOTRECURSED


	)

294 #ifde‡
INVARIANTS


295 
	#rw_as£π
(
rw
, 
wh©
Ë
	`_rw_as£π
(‘w), (wh©), 
LOCK_FILE
, 
LOCK_LINE
)

	)

297 
	#rw_as£π
(
rw
, 
wh©
)

	)

	@/usr/include/sys/sbuf.h

33 #i‚de‡
_SYS_SBUF_H_


34 
	#_SYS_SBUF_H_


	)

36 
	~<sys/_ty≥s.h
>

38 
	gsbuf
;

39 (
	tsbuf_døö_func
)(*, const *, );

44 
	ssbuf
 {

45 *
s_buf
;

46 
sbuf_døö_func
 *
s_døö_func
;

47 *
s_døö_¨g
;

48 
s_îr‹
;

49 
ssize_t
 
s_size
;

50 
ssize_t
 
s_Àn
;

51 
	#SBUF_FIXEDLEN
 0x00000000

	)

52 
	#SBUF_AUTOEXTEND
 0x00000001

	)

53 
	#SBUF_INCLUDENUL
 0x00000002

	)

54 
	#SBUF_DRAINTOEOR
 0x00000004

	)

55 
	#SBUF_USRFLAGMSK
 0x0000fff‡

	)

56 
	#SBUF_DYNAMIC
 0x00010000

	)

57 
	#SBUF_FINISHED
 0x00020000

	)

58 
	#SBUF_DYNSTRUCT
 0x00080000

	)

59 
	#SBUF_INSECTION
 0x00100000

	)

60 
s_Êags
;

61 
ssize_t
 
s_£˘_Àn
;

62 
ssize_t
 
s_ªc_off
;

65 #i‚de‡
HD_COLUMN_MASK


66 
	#HD_COLUMN_MASK
 0xff

	)

67 
	#HD_DELIM_MASK
 0xff00

	)

68 
	#HD_OMIT_COUNT
 (1 << 16)

	)

69 
	#HD_OMIT_HEX
 (1 << 17)

	)

70 
	#HD_OMIT_CHARS
 (1 << 18)

	)

73 
__BEGIN_DECLS


77 
sbuf
 *
	`sbuf_√w
(sbuf *, *, , );

78 
	#sbuf_√w_auto
() \

79 
	`sbuf_√w
(
NULL
, NULL, 0, 
SBUF_AUTOEXTEND
)

	)

80 
	`sbuf_gë_Êags
(
sbuf
 *);

81 
	`sbuf_˛ór_Êags
(
sbuf
 *, );

82 
	`sbuf_£t_Êags
(
sbuf
 *, );

83 
	`sbuf_˛ór
(
sbuf
 *);

84 
	`sbuf_£ços
(
sbuf
 *, 
ssize_t
);

85 
	`sbuf_bˇt
(
sbuf
 *, c⁄° *, 
size_t
);

86 
	`sbuf_b˝y
(
sbuf
 *, c⁄° *, 
size_t
);

87 
	`sbuf_ˇt
(
sbuf
 *, const *);

88 
	`sbuf_˝y
(
sbuf
 *, const *);

89 
	$sbuf_¥ötf
(
sbuf
 *, const *, ...)

90 
	`__¥ötÊike
(2, 3);

91 
	$sbuf_v¥ötf
(
sbuf
 *, c⁄° *, 
__va_li°
)

92 
	`__¥ötÊike
(2, 0);

93 
	`sbuf_putc
(
sbuf
 *, );

94 
	`sbuf_£t_døö
(
sbuf
 *, 
sbuf_døö_func
 *, *);

95 
	`sbuf_åim
(
sbuf
 *);

96 
	`sbuf_îr‹
(c⁄° 
sbuf
 *);

97 
	`sbuf_föish
(
sbuf
 *);

98 *
	`sbuf_d©a
(
sbuf
 *);

99 
ssize_t
 
	`sbuf_Àn
(
sbuf
 *);

100 
	`sbuf_d⁄e
(c⁄° 
sbuf
 *);

101 
	`sbuf_dñëe
(
sbuf
 *);

102 
	`sbuf_°¨t_£˘i⁄
(
sbuf
 *, 
ssize_t
 *);

103 
ssize_t
 
	`sbuf_íd_£˘i⁄
(
sbuf
 *, ssize_t, 
size_t
, );

104 
	`sbuf_hexdump
(
sbuf
 *, const *, , const *,

106 
	`sbuf_putbuf
(
sbuf
 *);

108 #ifde‡
_KERNEL


109 
uio
;

110 
sbuf
 *
	`sbuf_ui⁄ew
(sbu‡*, 
uio
 *, *);

111 
	`sbuf_bc›yö
(
sbuf
 *, c⁄° *, 
size_t
);

112 
	`sbuf_c›yö
(
sbuf
 *, c⁄° *, 
size_t
);

114 
__END_DECLS


	@/usr/include/sys/sched.h

64 #i‚de‡
_SCHED_H_


65 
	#_SCHED_H_


	)

67 #ifde‡
_KERNEL


77 
sched_lﬂd
();

78 
sched_º_öãrvÆ
();

79 
sched_ru¬abÀ
();

84 
sched_exô
(
¥oc
 *
p
, 
thªad
 *
chûdtd
);

85 
sched_f‹k
(
thªad
 *
td
, thªad *
chûdtd
);

86 
sched_f‹k_exô
(
thªad
 *
td
);

87 
sched_˛ass
(
thªad
 *
td
, 
˛ass
);

88 
sched_ni˚
(
¥oc
 *
p
, 
ni˚
);

94 
sched_exô_thªad
(
thªad
 *
td
, thªad *
chûd
);

95 
u_öt
 
sched_e°˝u
(
thªad
 *
td
);

96 
sched_f‹k_thªad
(
thªad
 *
td
, thªad *
chûd
);

97 
sched_Ànd_¥io
(
thªad
 *
td
, 
u_ch¨
 
¥io
);

98 
sched_Ànd_u£r_¥io
(
thªad
 *
td
, 
u_ch¨
 
¥i
);

99 
fix±_t
 
sched_p˘˝u
(
thªad
 *
td
);

100 
sched_¥io
(
thªad
 *
td
, 
u_ch¨
 
¥io
);

101 
sched_¶ìp
(
thªad
 *
td
, 
¥io
);

102 
sched_swôch
(
thªad
 *
td
, thªad *
√wtd
, 
Êags
);

103 
sched_throw
(
thªad
 *
td
);

104 
sched_u∆íd_¥io
(
thªad
 *
td
, 
u_ch¨
 
¥io
);

105 
sched_u£r_¥io
(
thªad
 *
td
, 
u_ch¨
 
¥io
);

106 
sched_u£ºë_¶ow∑th
(
thªad
 *
td
);

107 
sched_wakeup
(
thªad
 *
td
);

108 #ifdef 
RACCT


109 #ifdef 
SCHED_4BSD


110 
fix±_t
 
sched_p˘˝u_dñè
(
thªad
 *
td
);

114 
ölöe
 

115 
	$sched_u£ºë
(
thªad
 *
td
)

127 
	`KASSERT
((
td
->
td_Êags
 & 
TDF_BORROWING
) == 0,

129 i‡(
	`__¥edi˘_Ál£
(
td
->
td_¥i‹ôy
 !td->
td_u£r_¥i
))

130 
	`sched_u£ºë_¶ow∑th
(
td
);

131 
	}
}

136 
sched_add
(
thªad
 *
td
, 
Êags
);

137 
sched_˛ock
(
thªad
 *
td
);

138 
sched_¥ìm±
(
thªad
 *
td
);

139 
sched_ªm
(
thªad
 *
td
);

140 
sched_ªlöquish
(
thªad
 *
td
);

141 
thªad
 *
sched_choo£
();

142 
sched_idÀtd
(*);

148 
sched_böd
(
thªad
 *
td
, 
˝u
);

149 
__ölöe
 
sched_pö
();

150 
sched_unböd
(
thªad
 *
td
);

151 
__ölöe
 
sched_u≈ö
();

152 
sched_is_bound
(
thªad
 *
td
);

153 
sched_afföôy
(
thªad
 *
td
);

159 
sched_sizeof_¥oc
();

160 
sched_sizeof_thªad
();

166 *
sched_td«me
(
thªad
 *
td
);

167 #ifde‡
KTR


168 
sched_˛ór_td«me
(
thªad
 *
td
);

171 
__ölöe
 

172 
	$sched_pö
()

174 
cuπhªad
->
td_pö√d
++;

175 
	`__compûî_memb¨
();

176 
	}
}

178 
__ölöe
 

179 
	$sched_u≈ö
()

181 
	`__compûî_memb¨
();

182 
cuπhªad
->
td_pö√d
--;

183 
	}
}

186 
	#SRQ_BORING
 0x0000

	)

187 
	#SRQ_YIELDING
 0x0001

	)

188 
	#SRQ_OURSELF
 0x0002

	)

189 
	#SRQ_INTR
 0x0004

	)

190 
	#SRQ_PREEMPTED
 0x0008

	)

191 
	#SRQ_BORROWING
 0x0010

	)

194 #ifde‡
SCHED_STATS


195 
DPCPU_DECLARE
(, 
sched_swôch_°©s
[
SWT_COUNT
]);

197 
	#SCHED_STAT_DEFINE_VAR
(
«me
, 
±r
, 
des¸
) \

198 
«me
 ## 
	`_add_¥oc
(*
dummy
 
__unu£d
) \

201 
	`SYSCTL_ADD_PROC
(
NULL
, \

202 
	`SYSCTL_STATIC_CHILDREN
(
_kîn_sched_°©s
), 
OID_AUTO
, \

203 #«me, 
CTLTYPE_LONG
|
CTLFLAG_RD
|
CTLFLAG_MPSAFE
, \

204 
±r
, 0, 
sys˘l_dp˝u_l⁄g
, "LU", 
des¸
); \

206 
	`SYSINIT
(
«me
, 
SI_SUB_LAST
, 
SI_ORDER_MIDDLE
,Çamê## 
_add_¥oc
, 
NULL
);

	)

208 
	#SCHED_STAT_DEFINE
(
«me
, 
des¸
) \

209 
	`DPCPU_DEFINE
(, 
«me
); \

210 
	`SCHED_STAT_DEFINE_VAR
(
«me
, &
	`DPCPU_NAME
“ame), 
des¸
)

	)

215 
	#SCHED_STAT_INC
(
v¨
Ë
	`DPCPU_GET
(v¨)++;

	)

217 
	#SCHED_STAT_DEFINE_VAR
(
«me
, 
des¸
, 
±r
)

	)

218 
	#SCHED_STAT_DEFINE
(
«me
, 
des¸
)

	)

219 
	#SCHED_STAT_INC
(
v¨
Ë()0

	)

225 
schedöô
();

233 
	#SCHED_FIFO
 1

	)

234 
	#SCHED_OTHER
 2

	)

235 
	#SCHED_RR
 3

	)

237 
	ssched_∑øm
 {

238 
	msched_¥i‹ôy
;

244 #i‚de‡
_KERNEL


245 
	~<sys/cdefs.h
>

246 
	~<sys/_time•ec.h
>

247 
	~<sys/_ty≥s.h
>

249 #i‚de‡
_PID_T_DECLARED


250 
__pid_t
 
	tpid_t
;

251 
	#_PID_T_DECLARED


	)

254 
__BEGIN_DECLS


255 
sched_gë_¥i‹ôy_max
();

256 
sched_gë_¥i‹ôy_mö
();

257 
sched_gë∑øm
(
pid_t
, 
sched_∑øm
 *);

258 
sched_gëscheduÀr
(
pid_t
);

259 
sched_º_gë_öãrvÆ
(
pid_t
, 
time•ec
 *);

260 
sched_£ç¨am
(
pid_t
, c⁄° 
sched_∑øm
 *);

261 
sched_£tscheduÀr
(
pid_t
, , c⁄° 
sched_∑øm
 *);

262 
sched_yõld
();

263 
	g__END_DECLS


	@/usr/include/sys/sdt.h

33 #i‚de‡
_SYS_SDT_H


34 
	#_SYS_SDT_H


	)

36 #i‚de‡
_KERNEL


38 
	#_DTRACE_VERSION
 1

	)

40 
	#DTRACE_PROBE
(
¥ov
, 
«me
) { \

41 
__dåa˚_
##
¥ov
##
___
##
	`«me
(); \

42 
__dåa˚_
##
¥ov
##
___
##
	`«me
(); \

43 }

	)

45 
	#DTRACE_PROBE1
(
¥ov
, 
«me
, 
¨g1
) { \

46 
__dåa˚_
##
¥ov
##
___
##
	`«me
(); \

47 
__dåa˚_
##
¥ov
##
___
##
	`«me
(()
¨g1
); \

48 }

	)

50 
	#DTRACE_PROBE2
(
¥ov
, 
«me
, 
¨g1
, 
¨g2
) { \

51 
__dåa˚_
##
¥ov
##
___
##
	`«me
(, \

53 
__dåa˚_
##
¥ov
##
___
##
	`«me
(()
¨g1
, \

54 ()
¨g2
); \

55 }

	)

57 
	#DTRACE_PROBE3
(
¥ov
, 
«me
, 
¨g1
, 
¨g2
, 
¨g3
) { \

58 
__dåa˚_
##
¥ov
##
___
##
	`«me
(, \

60 
__dåa˚_
##
¥ov
##
___
##
	`«me
(()
¨g1
, \

61 ()
¨g2
, ()
¨g3
); \

62 }

	)

64 
	#DTRACE_PROBE4
(
¥ov
, 
«me
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) { \

65 
__dåa˚_
##
¥ov
##
___
##
	`«me
(, \

67 
__dåa˚_
##
¥ov
##
___
##
	`«me
(()
¨g1
, \

68 ()
¨g2
, ()
¨g3
, \

69 ()
¨g4
); \

70 }

	)

72 
	#DTRACE_PROBE5
(
¥ov
, 
«me
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) { \

73 
__dåa˚_
##
¥ov
##
___
##
	`«me
(, \

75 
__dåa˚_
##
¥ov
##
___
##
	`«me
(()
¨g1
, \

76 ()
¨g2
, ()
¨g3
, \

77 ()
¨g4
, ()
¨g5
); \

78 }

	)

82 
	~<sys/cdefs.h
>

83 
	~<sys/lökî_£t.h
>

85 vﬁ©ûê
boﬁ
 
sdt_¥obes_íabÀd
;

87 #i‚de‡
KDTRACE_HOOKS


89 
	#SDT_PROVIDER_DEFINE
(
¥ov
)

	)

90 
	#SDT_PROVIDER_DECLARE
(
¥ov
)

	)

91 
	#SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
)

	)

92 
	#SDT_PROBE_DECLARE
(
¥ov
, 
mod
, 
func
, 
«me
)

	)

93 
	#SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

94 
	#SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 
num
, 
ty≥
, 
xty≥
)

	)

96 
	#SDT_PROBE_DEFINE0
(
¥ov
, 
mod
, 
func
, 
«me
)

	)

97 
	#SDT_PROBE_DEFINE1
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
)

	)

98 
	#SDT_PROBE_DEFINE2
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
)

	)

99 
	#SDT_PROBE_DEFINE3
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
)

	)

100 
	#SDT_PROBE_DEFINE4
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

101 
	#SDT_PROBE_DEFINE5
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

102 
	#SDT_PROBE_DEFINE6
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, \

103 
¨g3
, 
¨g4
, 
¨g5
)

	)

104 
	#SDT_PROBE_DEFINE7
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, \

105 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

107 
	#SDT_PROBE0
(
¥ov
, 
mod
, 
func
, 
«me
)

	)

108 
	#SDT_PROBE1
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
)

	)

109 
	#SDT_PROBE2
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
)

	)

110 
	#SDT_PROBE3
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
)

	)

111 
	#SDT_PROBE4
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

112 
	#SDT_PROBE5
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

113 
	#SDT_PROBE6
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

114 
	#SDT_PROBE7
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

115 
¨g6
)

	)

117 
	#SDT_PROBE_DEFINE0_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
)

	)

118 
	#SDT_PROBE_DEFINE1_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
)

	)

119 
	#SDT_PROBE_DEFINE2_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

120 
¨g1
, 
x¨g1
)

	)

121 
	#SDT_PROBE_DEFINE3_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

122 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
)

	)

123 
	#SDT_PROBE_DEFINE4_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

124 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
)

	)

125 
	#SDT_PROBE_DEFINE5_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

126 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
, 
¨g4
, 
x¨g4
)

	)

127 
	#SDT_PROBE_DEFINE6_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

128 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
, 
¨g4
, 
x¨g4
, 
¨g5
, 
x¨g5
)

	)

129 
	#SDT_PROBE_DEFINE7_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

130 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
, 
¨g4
, 
x¨g4
, 
¨g5
, 
x¨g5
, 
¨g6
, \

131 
x¨g6
)

	)

133 
	#DTRACE_PROBE
(
«me
)

	)

134 
	#DTRACE_PROBE1
(
«me
, 
ty≥0
, 
¨g0
)

	)

135 
	#DTRACE_PROBE2
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
)

	)

136 
	#DTRACE_PROBE3
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
, 
ty≥2
, 
¨g2
)

	)

137 
	#DTRACE_PROBE4
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
, 
ty≥2
, 
¨g2
, 
ty≥3
, 
¨g3
)

	)

138 
	#DTRACE_PROBE5
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
, 
ty≥2
, 
¨g2
, 
ty≥3
, 
¨g3
,\

139 
ty≥4
, 
¨g4
)

	)

143 
SET_DECLARE
(
sdt_¥ovidîs_£t
, 
sdt_¥ovidî
);

144 
SET_DECLARE
(
sdt_¥obes_£t
, 
sdt_¥obe
);

145 
SET_DECLARE
(
sdt_¨gty≥s_£t
, 
sdt_¨gty≥
);

147 
	#SDT_PROVIDER_DEFINE
(
¥ov
) \

148 
sdt_¥ovidî
 
sdt_¥ovidî_
##
¥ov
[1] = { \

149 { #¥ov, { 
NULL
, NULL }, 0, 0 } \

151 
	`DATA_SET
(
sdt_¥ovidîs_£t
, 
sdt_¥ovidî_
##
¥ov
);

	)

153 
	#SDT_PROVIDER_DECLARE
(
¥ov
) \

154 
sdt_¥ovidî
 
sdt_¥ovidî_
##
¥ov
[1]

	)

156 
	#SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
) \

157 
sdt_¥obe
 
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
[1] = { \

158 { (
sdt_¥obe
), 
sdt_¥ovidî_
##
¥ov
, \

159 { 
NULL
, NULL }, { NULL, NULL }, #mod, #func, #name, 0, 0, \

160 
NULL
 } \

162 
	`DATA_SET
(
sdt_¥obes_£t
, 
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
);

	)

164 
	#SDT_PROBE_DECLARE
(
¥ov
, 
mod
, 
func
, 
«me
) \

165 
sdt_¥obe
 
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
[1]

	)

167 
	#SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) do { \

168 i‡(
	`__¥edi˘_Ál£
(
sdt_¥obes_íabÀd
)) { \

169 i‡(
	`__¥edi˘_Ál£
(
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
->
id
)) \

170 (*
sdt_¥obe_func
)(
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
->
id
, \

171 (
uöçå_t
Ë
¨g0
, (uöçå_tË
¨g1
, (uöçå_tË
¨g2
, \

172 (
uöçå_t
Ë
¨g3
, (uöçå_tË
¨g4
); \

174 } 0)

	)

176 
	#SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 
num
, 
ty≥
, 
xty≥
) \

177 
sdt_¨gty≥
 
sdè_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
##
num
[1] \

178 { { 
num
, 
ty≥
, 
xty≥
, { 
NULL
, NULL }, \

179 
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
 } \

181 
	`DATA_SET
(
sdt_¨gty≥s_£t
, 
sdè_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
##
num
);

	)

183 
	#SDT_PROBE_DEFINE0
(
¥ov
, 
mod
, 
func
, 
«me
) \

184 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
)

	)

186 
	#SDT_PROBE_DEFINE1
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
) \

187 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

188 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
NULL
)

	)

190 
	#SDT_PROBE_DEFINE2
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
) \

191 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

192 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
NULL
); \

193 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
NULL
)

	)

195 
	#SDT_PROBE_DEFINE3
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
)\

196 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

197 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
NULL
); \

198 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
NULL
); \

199 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
NULL
)

	)

201 
	#SDT_PROBE_DEFINE4
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
) \

202 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

203 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
NULL
); \

204 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
NULL
); \

205 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
NULL
); \

206 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
NULL
)

	)

208 
	#SDT_PROBE_DEFINE5
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

209 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

210 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
NULL
); \

211 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
NULL
); \

212 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
NULL
); \

213 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
NULL
); \

214 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 4, 
¨g4
, 
NULL
)

	)

216 
	#SDT_PROBE_DEFINE6
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
,\

217 
¨g4
, 
¨g5
) \

218 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

219 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
NULL
); \

220 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
NULL
); \

221 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
NULL
); \

222 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
NULL
); \

223 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 4, 
¨g4
, 
NULL
); \

224 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 5, 
¨g5
, 
NULL
)

	)

226 
	#SDT_PROBE_DEFINE7
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
,\

227 
¨g4
, 
¨g5
, 
¨g6
) \

228 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

229 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
NULL
); \

230 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
NULL
); \

231 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
NULL
); \

232 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
NULL
); \

233 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 4, 
¨g4
, 
NULL
); \

234 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 5, 
¨g5
, 
NULL
); \

235 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 6, 
¨g6
, 
NULL
)

	)

237 
	#SDT_PROBE_DEFINE0_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
) \

238 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
)

	)

240 
	#SDT_PROBE_DEFINE1_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
) \

241 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

242 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
x¨g0
)

	)

244 
	#SDT_PROBE_DEFINE2_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

245 
¨g1
, 
x¨g1
) \

246 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

247 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
x¨g0
); \

248 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
x¨g1
)

	)

250 
	#SDT_PROBE_DEFINE3_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

251 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
) \

252 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

253 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
x¨g0
); \

254 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
x¨g1
); \

255 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
x¨g2
)

	)

257 
	#SDT_PROBE_DEFINE4_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

258 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
) \

259 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

260 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
x¨g0
); \

261 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
x¨g1
); \

262 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
x¨g2
); \

263 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
x¨g3
)

	)

265 
	#SDT_PROBE_DEFINE5_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

266 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
, 
¨g4
, 
x¨g4
) \

267 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

268 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
x¨g0
); \

269 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
x¨g1
); \

270 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
x¨g2
); \

271 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
x¨g3
); \

272 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 4, 
¨g4
, 
x¨g4
)

	)

274 
	#SDT_PROBE_DEFINE6_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

275 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
, 
¨g4
, 
x¨g4
, 
¨g5
, 
x¨g5
) \

276 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

277 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
x¨g0
); \

278 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
x¨g1
); \

279 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
x¨g2
); \

280 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
x¨g3
); \

281 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 4, 
¨g4
, 
x¨g4
); \

282 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 5, 
¨g5
, 
x¨g5
)

	)

284 
	#SDT_PROBE_DEFINE7_XLATE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
x¨g0
, \

285 
¨g1
, 
x¨g1
, 
¨g2
, 
x¨g2
, 
¨g3
, 
x¨g3
, 
¨g4
, 
x¨g4
, 
¨g5
, 
x¨g5
, 
¨g6
, \

286 
x¨g6
) \

287 
	`SDT_PROBE_DEFINE
(
¥ov
, 
mod
, 
func
, 
«me
); \

288 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 
¨g0
, 
x¨g0
); \

289 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 1, 
¨g1
, 
x¨g1
); \

290 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 2, 
¨g2
, 
x¨g2
); \

291 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 3, 
¨g3
, 
x¨g3
); \

292 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 4, 
¨g4
, 
x¨g4
); \

293 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 5, 
¨g5
, 
x¨g5
); \

294 
	`SDT_PROBE_ARGTYPE
(
¥ov
, 
mod
, 
func
, 
«me
, 6, 
¨g6
, 
x¨g6
)

	)

296 
	#SDT_PROBE0
(
¥ov
, 
mod
, 
func
, 
«me
) \

297 
	`SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 0, 0, 0, 0, 0)

	)

298 
	#SDT_PROBE1
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
) \

299 
	`SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 0, 0, 0, 0)

	)

300 
	#SDT_PROBE2
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
) \

301 
	`SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 0, 0, 0)

	)

302 
	#SDT_PROBE3
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
) \

303 
	`SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 0, 0)

	)

304 
	#SDT_PROBE4
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
) \

305 
	`SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 0)

	)

306 
	#SDT_PROBE5
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

307 
	`SDT_PROBE
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

308 
	#SDT_PROBE6
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

310 i‡(
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
->
id
) \

311 (*((*)(
uöt32_t
, 
uöçå_t
, uintptr_t, uintptr_t, \

312 
uöçå_t
, uöçå_t, uöçå_t))
sdt_¥obe_func
)( \

313 
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
->
id
, \

314 (
uöçå_t
)
¨g0
, (uöçå_t)
¨g1
, (uöçå_t)
¨g2
, \

315 (
uöçå_t
)
¨g3
, (uöçå_t)
¨g4
, (uöçå_t)
¨g5
);\

316 } 0)

	)

317 
	#SDT_PROBE7
(
¥ov
, 
mod
, 
func
, 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

318 
¨g6
) \

320 i‡(
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
->
id
) \

321 (*((*)(
uöt32_t
, 
uöçå_t
, uintptr_t, uintptr_t, \

322 
uöçå_t
, uintptr_t, uintptr_t, uintptr_t)) \

323 
sdt_¥obe_func
)( \

324 
sdt_
##
¥ov
##
_
##
mod
##_##
func
##_##
«me
->
id
, \

325 (
uöçå_t
)
¨g0
, (uöçå_t)
¨g1
, (uöçå_t)
¨g2
, \

326 (
uöçå_t
)
¨g3
, (uöçå_t)
¨g4
, (uöçå_t)
¨g5
, \

327 (
uöçå_t
)
¨g6
); \

328 } 0)

	)

330 
	#DTRACE_PROBE_IMPL_START
(
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) do { \

331 
	`SDT_PROBE_DEFINE
(
sdt
, , , 
«me
); \

332 
	`SDT_PROBE
(
sdt
, , , 
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
);

	)

333 
	#DTRACE_PROBE_IMPL_END
 } 0)

	)

335 
	#DTRACE_PROBE
(
«me
) \

336 
	`DTRACE_PROBE_IMPL_START
(
«me
, 0, 0, 0, 0, 0) \

337 
DTRACE_PROBE_IMPL_END


	)

339 
	#DTRACE_PROBE1
(
«me
, 
ty≥0
, 
¨g0
) \

340 
	`DTRACE_PROBE_IMPL_START
(
«me
, 
¨g0
, 0, 0, 0, 0) \

341 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 0, #ty≥0, 
NULL
); \

342 
DTRACE_PROBE_IMPL_END


	)

344 
	#DTRACE_PROBE2
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
) \

345 
	`DTRACE_PROBE_IMPL_START
(
«me
, 
¨g0
, 
¨g1
, 0, 0, 0) \

346 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 0, #ty≥0, 
NULL
); \

347 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 1, #ty≥1, 
NULL
); \

348 
DTRACE_PROBE_IMPL_END


	)

350 
	#DTRACE_PROBE3
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
, 
ty≥2
, 
¨g2
) \

351 
	`DTRACE_PROBE_IMPL_START
(
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 0, 0) \

352 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 0, #ty≥0, 
NULL
); \

353 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 1, #ty≥1, 
NULL
); \

354 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 2, #ty≥2, 
NULL
); \

355 
DTRACE_PROBE_IMPL_END


	)

357 
	#DTRACE_PROBE4
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
, 
ty≥2
, 
¨g2
, 
ty≥3
, 
¨g3
) \

358 
	`DTRACE_PROBE_IMPL_START
(
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 0) \

359 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 0, #ty≥0, 
NULL
); \

360 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 1, #ty≥1, 
NULL
); \

361 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 2, #ty≥2, 
NULL
); \

362 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 3, #ty≥3, 
NULL
); \

363 
DTRACE_PROBE_IMPL_END


	)

365 
	#DTRACE_PROBE5
(
«me
, 
ty≥0
, 
¨g0
, 
ty≥1
, 
¨g1
, 
ty≥2
, 
¨g2
, 
ty≥3
, 
¨g3
, \

366 
ty≥4
, 
¨g4
) \

367 
	`DTRACE_PROBE_IMPL_START
(
«me
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

368 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 0, #ty≥0, 
NULL
); \

369 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 1, #ty≥1, 
NULL
); \

370 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 2, #ty≥2, 
NULL
); \

371 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 3, #ty≥3, 
NULL
); \

372 
	`SDT_PROBE_ARGTYPE
(
sdt
, , , 
«me
, 4, #ty≥4, 
NULL
); \

373 
DTRACE_PROBE_IMPL_END


	)

381 (*
	tsdt_¥obe_func_t
)(
	tuöt32_t
, 
	tuöçå_t
 
	t¨g0
, uöçå_à
	t¨g1
,

382 
	tuöçå_t
 
	t¨g2
, uöçå_à
	t¨g3
, uöçå_à
	t¨g4
);

387 
sdt_¥obe_func_t
 
sdt_¥obe_func
;

389 
sdt_¥obe
;

390 
sdt_¥ovidî
;

391 
lökî_fûe
;

393 
	ssdt_¨gty≥
 {

394 
ndx
;

395 c⁄° *
ty≥
;

396 c⁄° *
xty≥
;

397 
	`TAILQ_ENTRY
(
sdt_¨gty≥
)

398 
¨gty≥_íåy
;

399 
sdt_¥obe
 *
¥obe
;

402 
	ssdt_¥obe
 {

403 
vîsi⁄
;

404 
sdt_¥ovidî
 *
¥ov
;

405 
	`TAILQ_ENTRY
(
sdt_¥obe
)

406 
¥obe_íåy
;

407 
	`TAILQ_HEAD
(, 
sdt_¨gty≥
Ë
¨gty≥_li°
;

408 c⁄° *
mod
;

409 c⁄° *
func
;

410 c⁄° *
«me
;

411 
id_t
 
id
;

412 
n_¨gs
;

413 
lökî_fûe
 *
sdç_lf
;

416 
	ssdt_¥ovidî
 {

417 *
«me
;

418 
	`TAILQ_ENTRY
(
sdt_¥ovidî
)

419 
¥ov_íåy
;

420 
uöçå_t
 
id
;

421 
sdt_ªfs
;

424 
	`sdt_¥obe_°ub
(
uöt32_t
, 
uöçå_t
, uintptr_t, uintptr_t, uintptr_t,

425 
uöçå_t
);

427 
	`SDT_PROVIDER_DECLARE
(
sdt
);

	@/usr/include/sys/selinfo.h

35 #i‚de‡
_SYS_SELINFO_H_


36 
	#_SYS_SELINFO_H_


	)

38 
	~<sys/evít.h
>

40 
	g£lfd
;

41 
TAILQ_HEAD
(
£lfdli°
, 
£lfd
);

47 
	s£löfo
 {

48 
£lfdli°
 
	msi_tdli°
;

49 
k∆i°
 
	msi_nŸe
;

50 
mtx
 *
	msi_mtx
;

53 
	#SEL_WAITING
(
si
Ë(!
	`TAILQ_EMPTY
(&(si)->
si_tdli°
))

	)

55 #ifde‡
_KERNEL


56 
£ldøö
(
£löfo
 *
sù
);

57 
£Ãec‹d
(
thªad
 *
£À˘‹
, 
£löfo
 *
sù
);

58 
£lwakeup
(
£löfo
 *
sù
);

59 
£lwakeuµri
(
£löfo
 *
sù
, 
¥i
);

60 
£…dföi
(
thªad
 *
td
);

	@/usr/include/sys/sglist.h

41 #i‚de‡
__SGLIST_H__


42 
	#__SGLIST_H__


	)

44 
	~<sys/ªfcou¡.h
>

46 
	ssgli°_£g
 {

47 
vm_∑ddr_t
 
	mss_∑ddr
;

48 
size_t
 
	mss_Àn
;

51 
	ssgli°
 {

52 
sgli°_£g
 *
	msg_£gs
;

53 
u_öt
 
	msg_ªfs
;

54 
u_sh‹t
 
	msg_n£g
;

55 
u_sh‹t
 
	msg_max£g
;

58 
	gbio
;

59 
	gmbuf
;

60 
	guio
;

62 
__ölöe
 

63 
	$sgli°_öô
(
sgli°
 *
sg
, 
u_sh‹t
 
max£gs
, 
sgli°_£g
 *
£gs
)

66 
sg
->
sg_£gs
 = 
£gs
;

67 
sg
->
sg_n£g
 = 0;

68 
sg
->
sg_max£g
 = 
max£gs
;

69 
	`ªfcou¡_öô
(&
sg
->
sg_ªfs
, 1);

70 
	}
}

72 
__ölöe
 

73 
	$sgli°_ª£t
(
sgli°
 *
sg
)

76 
sg
->
sg_n£g
 = 0;

77 
	}
}

79 
__ölöe
 
sgli°
 *

80 
	$sgli°_hﬁd
(
sgli°
 *
sg
)

83 
	`ªfcou¡_acquúe
(&
sg
->
sg_ªfs
);

84  (
sg
);

85 
	}
}

87 
sgli°
 *
sgli°_Æloc
(
n£gs
, 
mÊags
);

88 
sgli°_≠≥nd
(
sgli°
 *
sg
, *
buf
, 
size_t
 
Àn
);

89 
sgli°_≠≥nd_bio
(
sgli°
 *
sg
, 
bio
 *
bp
);

90 
sgli°_≠≥nd_mbuf
(
sgli°
 *
sg
, 
mbuf
 *
m0
);

91 
sgli°_≠≥nd_phys
(
sgli°
 *
sg
, 
vm_∑ddr_t
 
∑ddr
,

92 
size_t
 
Àn
);

93 
sgli°_≠≥nd_sgli°
(
sgli°
 *
sg
, sgli° *
sour˚
,

94 
size_t
 
off£t
, size_à
Àngth
);

95 
sgli°_≠≥nd_uio
(
sgli°
 *
sg
, 
uio
 *uio);

96 
sgli°_≠≥nd_u£r
(
sgli°
 *
sg
, *
buf
, 
size_t
 
Àn
,

97 
thªad
 *
td
);

98 
sgli°_≠≥nd_vm∑ges
(
sgli°
 *
sg
, 
vm_∑ge_t
 *
m
, 
size_t
 
pgoff
,

99 
size_t
 
Àn
);

100 
sgli°
 *
sgli°_buûd
(*
buf
, 
size_t
 
Àn
, 
mÊags
);

101 
sgli°
 *
sgli°_˛⁄e
(sgli° *
sg
, 
mÊags
);

102 
sgli°_c⁄sume_uio
(
sgli°
 *
sg
, 
uio
 *uio, 
size_t
 
ªsid
);

103 
sgli°_cou¡
(*
buf
, 
size_t
 
Àn
);

104 
sgli°_cou¡_vm∑ges
(
vm_∑ge_t
 *
m
, 
size_t
 
pgoff
, size_à
Àn
);

105 
sgli°_‰ì
(
sgli°
 *
sg
);

106 
sgli°_joö
(
sgli°
 *
fú°
, sgli° *
£c⁄d
);

107 
size_t
 
sgli°_Àngth
(
sgli°
 *
sg
);

108 
sgli°_¶i˚
(
sgli°
 *
‹igöÆ
, sgli° **
¶i˚
,

109 
size_t
 
off£t
, size_à
Àngth
, 
mÊags
);

110 
sgli°_•lô
(
sgli°
 *
‹igöÆ
, sgli° **
hód
,

111 
size_t
 
Àngth
, 
mÊags
);

	@/usr/include/sys/signalvar.h

35 #i‚de‡
_SYS_SIGNALVAR_H_


36 
	#_SYS_SIGNALVAR_H_


	)

38 
	~<sys/queue.h
>

39 
	~<sys/_lock.h
>

40 
	~<sys/_muãx.h
>

41 
	~<sys/sig«l.h
>

54 
	ssiga˘s
 {

55 
sig_t
 
	mps_siga˘
[
_SIG_MAXSIG
];

56 
sig£t_t
 
	mps_ˇtchmask
[
_SIG_MAXSIG
];

57 
sig£t_t
 
	mps_sig⁄°ack
;

58 
sig£t_t
 
	mps_sigöå
;

59 
sig£t_t
 
	mps_sigª£t
;

60 
sig£t_t
 
	mps_signode„r
;

61 
sig£t_t
 
	mps_sigöfo
;

62 
sig£t_t
 
	mps_sigign‹e
;

63 
sig£t_t
 
	mps_sigˇtch
;

64 
sig£t_t
 
	mps_‰ìbsd4
;

65 
sig£t_t
 
	mps_osig£t
;

66 
sig£t_t
 
	mps_u£πømp
;

67 
	mps_Êag
;

68 
u_öt
 
	mps_ªf˙t
;

69 
mtx
 
	mps_mtx
;

72 
	#PS_NOCLDWAIT
 0x0001

	)

73 
	#PS_NOCLDSTOP
 0x0002

	)

74 
	#PS_CLDSIGIGN
 0x0004

	)

76 #ifde‡
_KERNEL


78 #ifde‡
COMPAT_43


80 
osigc⁄ãxt
 
	msi_sc
;

81 
	msi_signo
;

82 
	msi_code
;

83 
sigvÆ
 
	msi_vÆue
;

84 } 
	tosigöfo_t
;

86 
	sosiga˘i⁄
 {

88 (*
	m__ß_h™dÀr
)();

89 (*
	m__ß_siga˘i⁄
)(, 
	mosigöfo_t
 *, *);

90 } 
	m__siga˘i⁄_u
;

91 
osig£t_t
 
	mß_mask
;

92 
	mß_Êags
;

95 
	t__osigöfoh™dÀr_t
(, 
	tosigöfo_t
 *, *);

99 
	#SIG_CATCH
 ((
__sigh™dÀr_t
 *)2)

	)

105 
	#SIGACTION
(
p
, 
sig
Ë’->
p_siga˘s
->
ps_siga˘
[
	`_SIG_IDX
(sig)])

	)

112 
	#SIGADDSET
(
£t
, 
signo
) \

113 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] |
	`_SIG_BIT
(signo))

	)

115 
	#SIGDELSET
(
£t
, 
signo
) \

116 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] &~
	`_SIG_BIT
(signo))

	)

118 
	#SIGEMPTYSET
(
£t
) \

120 
__i
; \

121 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

122 (
£t
).
__bôs
[
__i
] = 0; \

123 } 0)

	)

125 
	#SIGFILLSET
(
£t
) \

127 
__i
; \

128 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

129 (
£t
).
__bôs
[
__i
] = ~0U; \

130 } 0)

	)

132 
	#SIGISMEMBER
(
£t
, 
signo
) \

133 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] & 
	`_SIG_BIT
(signo))

	)

135 
	#SIGISEMPTY
(
£t
Ë(
	`__sigi£m±y
(&(£t)))

	)

136 
	#SIGNOTEMPTY
(
£t
Ë(!
	`__sigi£m±y
(&(£t)))

	)

138 
	#SIGSETEQ
(
£t1
, 
£t2
Ë(
	`__sig£ãq
(&(£t1), &(£t2)))

	)

139 
	#SIGSETNEQ
(
£t1
, 
£t2
Ë(!
	`__sig£ãq
(&(£t1), &(£t2)))

	)

141 
	#SIGSETOR
(
£t1
, 
£t2
) \

143 
__i
; \

144 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

145 (
£t1
).
__bôs
[
__i
] |(
£t2
).__bits[__i]; \

146 } 0)

	)

148 
	#SIGSETAND
(
£t1
, 
£t2
) \

150 
__i
; \

151 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

152 (
£t1
).
__bôs
[
__i
] &(
£t2
).__bits[__i]; \

153 } 0)

	)

155 
	#SIGSETNAND
(
£t1
, 
£t2
) \

157 
__i
; \

158 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

159 (
£t1
).
__bôs
[
__i
] &~(
£t2
).__bits[__i]; \

160 } 0)

	)

162 
	#SIGSETLO
(
£t1
, 
£t2
Ë((£t1).
__bôs
[0] = (£t2).__bôs[0])

	)

163 
	#SIGSETOLD
(
£t
, 
o£t
Ë((£t).
__bôs
[0] = (o£t))

	)

165 
	#SIG_CANTMASK
(
£t
) \

166 
	`SIGDELSET
(
£t
, 
SIGKILL
), SIGDELSET(£t, 
SIGSTOP
)

	)

168 
	#SIG_STOPSIGMASK
(
£t
) \

169 
	`SIGDELSET
(
£t
, 
SIGSTOP
), SIGDELSET(£t, 
SIGTSTP
), \

170 
	`SIGDELSET
(
£t
, 
SIGTTIN
), SIGDELSET(£t, 
SIGTTOU
)

	)

172 
	#SIG_CONTSIGMASK
(
£t
) \

173 
	`SIGDELSET
(
£t
, 
SIGCONT
)

	)

175 
	#sigˇ¡mask
 (
	`sigmask
(
SIGKILL
Ë| sigmask(
SIGSTOP
))

	)

177 
	#SIG2OSIG
(
sig
, 
osig
Ë(osig = (sig).
__bôs
[0])

	)

178 
	#OSIG2SIG
(
osig
, 
sig
Ë
	`SIGEMPTYSET
(sig); (sig).
__bôs
[0] = 
	)
osig

180 
__ölöe
 

181 
	$__sigi£m±y
(
sig£t_t
 *
£t
)

183 
i
;

185 
i
 = 0; i < 
_SIG_WORDS
; i++) {

186 i‡(
£t
->
__bôs
[
i
])

190 
	}
}

192 
__ölöe
 

193 
	$__sig£ãq
(
sig£t_t
 *
£t1
, sig£t_à*
£t2
)

195 
i
;

197 
i
 = 0; i < 
_SIG_WORDS
; i++) {

198 i‡(
£t1
->
__bôs
[
i
] !
£t2
->__bits[i])

202 
	}
}

204 #ifde‡
COMPAT_FREEBSD6


205 
	sosigevít
 {

206 
	msigev_nŸify
;

208 
	m__sigev_signo
;

209 
	m__sigev_nŸify_kqueue
;

210 } 
	m__sigev_u
;

211 
sigvÆ
 
	msigev_vÆue
;

215 
	sksigöfo
 {

216 
TAILQ_ENTRY
(
ksigöfo
Ë
	mksi_lök
;

217 
sigöfo_t
 
	mksi_öfo
;

218 
	mksi_Êags
;

219 
sigqueue
 *
	mksi_sigq
;

220 } 
	tksigöfo_t
;

222 
	#ksi_signo
 
ksi_öfo
.
si_signo


	)

223 
	#ksi_î∫o
 
ksi_öfo
.
si_î∫o


	)

224 
	#ksi_code
 
ksi_öfo
.
si_code


	)

225 
	#ksi_pid
 
ksi_öfo
.
si_pid


	)

226 
	#ksi_uid
 
ksi_öfo
.
si_uid


	)

227 
	#ksi_°©us
 
ksi_öfo
.
si_°©us


	)

228 
	#ksi_addr
 
ksi_öfo
.
si_addr


	)

229 
	#ksi_vÆue
 
ksi_öfo
.
si_vÆue


	)

230 
	#ksi_b™d
 
ksi_öfo
.
si_b™d


	)

231 
	#ksi_å≠no
 
ksi_öfo
.
si_å≠no


	)

232 
	#ksi_ovîrun
 
ksi_öfo
.
si_ovîrun


	)

233 
	#ksi_timîid
 
ksi_öfo
.
si_timîid


	)

234 
	#ksi_mqd
 
ksi_öfo
.
si_mqd


	)

237 
	#KSI_TRAP
 0x01

	)

238 
	#KSI_EXT
 0x02

	)

239 
	#KSI_INS
 0x04

	)

240 
	#KSI_SIGQ
 0x08

	)

241 
	#KSI_HEAD
 0x10

	)

242 
	#KSI_PTRACE
 0x20

	)

243 
	#KSI_COPYMASK
 (
KSI_TRAP
 | 
KSI_SIGQ
 | 
KSI_PTRACE
)

	)

245 
	#KSI_ONQ
(
ksi
Ë((ksi)->
ksi_sigq
 !
NULL
)

	)

247 
	ssigqueue
 {

248 
sig£t_t
 
	msq_sig«ls
;

249 
sig£t_t
 
	msq_kûl
;

250 
sig£t_t
 
	msq_±ø˚
;

251 
TAILQ_HEAD
(, 
ksigöfo
Ë
	msq_li°
;

252 
¥oc
 *
	msq_¥oc
;

253 
	msq_Êags
;

254 } 
	tsigqueue_t
;

257 
	#SQ_INIT
 0x01

	)

259 #ifde‡
_KERNEL


262 
	#SIGPENDING
(
td
) \

263 ((!
	`SIGISEMPTY
((
td
)->
td_sigli°
) && \

264 !
	`sig£tmasked
(&(
td
)->
td_sigli°
, &—d)->
td_sigmask
)) || \

265 (!
	`SIGISEMPTY
((
td
)->
td_¥oc
->
p_sigli°
) && \

266 !
	`sig£tmasked
(&(
td
)->
td_¥oc
->
p_sigli°
, &—d)->
td_sigmask
)))

	)

272 
__ölöe
 

273 
	$sig£tmasked
(
sig£t_t
 *
£t
, sig£t_à*
mask
)

275 
i
;

277 
i
 = 0; i < 
_SIG_WORDS
; i++) {

278 i‡(
£t
->
__bôs
[
i
] & ~
mask
->__bits[i])

282 
	}
}

284 
	#ksigöfo_öô
(
ksi
) \

286 
	`bzîo
(
ksi
, (
ksigöfo_t
)); \

287 } 0)

	)

289 
	#ksigöfo_öô_å≠
(
ksi
) \

291 
ksigöfo_t
 *
kp
 = 
ksi
; \

292 
	`bzîo
(
kp
, (
ksigöfo_t
)); \

293 
kp
->
ksi_Êags
 |
KSI_TRAP
; \

294 } 0)

	)

296 
__ölöe
 

297 
	$ksigöfo_c›y
(
ksigöfo_t
 *
§c
, ksigöfo_à*
d°
)

299 (
d°
)->
ksi_öfo
 = 
§c
->ksi_info;

300 (
d°
)->
ksi_Êags
 = (
§c
->ksi_Êag†& 
KSI_COPYMASK
);

301 
	}
}

303 
__ölöe
 

304 
	$ksigöfo_£t_sigev
(
ksigöfo_t
 *
d°
, 
sigevít
 *
sigev
)

306 
d°
->
ksi_signo
 = 
sigev
->
sigev_signo
;

307 
d°
->
ksi_vÆue
 = 
sigev
->
sigev_vÆue
;

308 
	}
}

310 
	gpgΩ
;

311 
	g¥oc
;

312 
	gsigio
;

313 
	gthªad
;

319 
	#SIGIO_LOCK
(Ë
	`mtx_lock
(&
sigio_lock
)

	)

320 
	#SIGIO_TRYLOCK
(Ë
	`mtx_åylock
(&
sigio_lock
)

	)

321 
	#SIGIO_UNLOCK
(Ë
	`mtx_u∆ock
(&
sigio_lock
)

	)

322 
	#SIGIO_LOCKED
(Ë
	`mtx_ow√d
(&
sigio_lock
)

	)

323 
	#SIGIO_ASSERT
(
ty≥
Ë
	`mtx_as£π
(&
sigio_lock
,Åy≥)

	)

325 
mtx
 
sigio_lock
;

328 
	#SIGPROCMASK_OLD
 0x0001

	)

329 
	#SIGPROCMASK_PROC_LOCKED
 0x0002

	)

330 
	#SIGPROCMASK_PS_LOCKED
 0x0004

	)

338 
	#SIGDEFERSTOP_NOP
 0

	)

339 
	#SIGDEFERSTOP_OFF
 1

	)

340 
	#SIGDEFERSTOP_SILENT
 2

	)

341 
	#SIGDEFERSTOP_EINTR
 3

	)

342 
	#SIGDEFERSTOP_ERESTART
 4

	)

344 
	#SIGDEFERSTOP_VAL_NCHG
 (-1Ë

	)

345 
sigde„r°›_im∂
(
mode
);

346 
sigÆlow°›_im∂
(
¥ev
);

348 
ölöe
 

349 
	$sigde„r°›
(
mode
)

352 i‡(
	`__¥edi˘_åue
(
mode
 =
SIGDEFERSTOP_NOP
))

353  (
SIGDEFERSTOP_VAL_NCHG
);

354  (
	`sigde„r°›_im∂
(
mode
));

355 
	}
}

357 
ölöe
 

358 
	$sigÆlow°›
(
¥ev
)

361 i‡(
	`__¥edi˘_åue
(
¥ev
 =
SIGDEFERSTOP_VAL_NCHG
))

363 
	`sigÆlow°›_im∂
(
¥ev
);

364 
	}
}

366 
cursig
(
thªad
 *
td
);

367 
execsigs
(
¥oc
 *
p
);

368 
gsig«l
(
pgid
, 
sig
, 
ksigöfo_t
 *
ksi
);

369 
kûÕroc
(
¥oc
 *
p
, *
why
);

370 
ksigöfo_t
 * 
ksigöfo_Æloc
(
waô
);

371 
ksigöfo_‰ì
(
ksigöfo_t
 *
ksi
);

372 
pksig«l
(
¥oc
 *
p
, 
sig
, 
ksigöfo_t
 *
ksi
);

373 
pgsigio
(
sigio
 **
sigi›
, 
sig
, 
check˘ty
);

374 
pgsig«l
(
pgΩ
 *pgΩ, 
sig
, 
check˘ty
, 
ksigöfo_t
 *
ksi
);

375 
po°sig
(
sig
);

376 
kîn_psig«l
(
¥oc
 *
p
, 
sig
);

377 
±ø˚°›
(
thªad
 *
td
, 
sig
, 
ksigöfo_t
 *
si
);

378 
£ndsig
(
sig_t
 
ˇtchî
, 
ksigöfo_t
 *
ksi
, 
sig£t_t
 *
ªtmask
);

379 
siga˘s
 *
siga˘s_Æloc
();

380 
siga˘s_c›y
(
siga˘s
 *
de°
, siga˘†*
§c
);

381 
siga˘s_‰ì
(
siga˘s
 *
ps
);

382 
siga˘s
 *
siga˘s_hﬁd
(siga˘†*
ps
);

383 
siga˘s_sh¨ed
(
siga˘s
 *
ps
);

384 
	$sigexô
(
thªad
 *
td
, 
sig
Ë
__dód2
;

385 
	`sigev_födtd
(
¥oc
 *
p
, 
sigevít
 *
sigev
, 
thªad
 **);

386 
	`sig_ffs
(
sig£t_t
 *
£t
);

387 
	`sigöô
(
¥oc
 *
p
);

388 
	`signŸify
(
thªad
 *
td
);

389 
	`sigqueue_dñëe
(
sigqueue
 *
queue
, 
sig
);

390 
	`sigqueue_dñëe_¥oc
(
¥oc
 *
p
, 
sig
);

391 
	`sigqueue_Êush
(
sigqueue
 *
queue
);

392 
	`sigqueue_öô
(
sigqueue
 *
queue
, 
¥oc
 *
p
);

393 
	`sigqueue_èke
(
ksigöfo_t
 *
ksi
);

394 
	`tdksig«l
(
thªad
 *
td
, 
sig
, 
ksigöfo_t
 *
ksi
);

395 
	`td£ndsig«l
(
¥oc
 *
p
, 
thªad
 *
td
, 
sig
,

396 
ksigöfo_t
 *
ksi
);

397 
	`tdsig˛ónup
(
thªad
 *
td
);

398 
	`tdsig«l
(
thªad
 *
td
, 
sig
);

399 
	`å≠sig«l
(
thªad
 *
td
, 
ksigöfo_t
 *
ksi
);

	@/usr/include/sys/smp.h

14 #i‚de‡
_SYS_SMP_H_


15 
	#_SYS_SMP_H_


	)

17 #ifde‡
_KERNEL


19 #i‚de‡
LOCORE


21 
	~<sys/˝u£t.h
>

22 
	~<sys/queue.h
>

29 
	mTOPO_TYPE_DUMMY
,

31 
	mTOPO_TYPE_PU
,

33 
	mTOPO_TYPE_CORE
,

35 
	mTOPO_TYPE_CACHE
,

37 
	mTOPO_TYPE_PKG
,

39 
	mTOPO_TYPE_NODE
,

42 
	mTOPO_TYPE_GROUP
,

44 
	mTOPO_TYPE_SYSTEM


45 } 
	tt›o_node_ty≥
;

48 
	thwid_t
;

50 
	t˝uid_t
;

53 
	st›o_node
 {

54 
t›o_node
 *
	m∑ª¡
;

55 
TAILQ_HEAD
(
t›o_chûdªn
, 
t›o_node
Ë
	mchûdªn
;

56 
TAILQ_ENTRY
(
t›o_node
Ë
	msiblögs
;

57 
˝u£t_t
 
	m˝u£t
;

58 
t›o_node_ty≥
 
	mty≥
;

59 
uöçå_t
 
	msubty≥
;

60 
hwid_t
 
	mhwid
;

61 
˝uid_t
 
	mid
;

62 
	mnchûdªn
;

63 
	m˝u_cou¡
;

79 
	s˝u_group
 {

80 
˝u_group
 *
	mcg_∑ª¡
;

81 
˝u_group
 *
	mcg_chûd
;

82 
˝u£t_t
 
	mcg_mask
;

83 
öt32_t
 
	mcg_cou¡
;

84 
öt16_t
 
	mcg_chûdªn
;

85 
öt8_t
 
	mcg_Àvñ
;

86 
öt8_t
 
	mcg_Êags
;

89 
˝u_group
 *
	t˝u_group_t
;

95 
	#CG_SHARE_NONE
 0

	)

96 
	#CG_SHARE_L1
 1

	)

97 
	#CG_SHARE_L2
 2

	)

98 
	#CG_SHARE_L3
 3

	)

100 
	#MAX_CACHE_LEVELS
 
CG_SHARE_L3


	)

105 
	#CG_FLAG_HTT
 0x01

	)

106 
	#CG_FLAG_SMT
 0x02

	)

107 
	#CG_FLAG_THREAD
 (
CG_FLAG_HTT
 | 
CG_FLAG_SMT
Ë

	)

112 #ifde‡
SMP


113 
t›o_öô_node
(
t›o_node
 *
node
);

114 
t›o_öô_roŸ
(
t›o_node
 *
roŸ
);

115 
t›o_node
 * 
t›o_add_node_by_hwid
(t›o_nodê*
∑ª¡
, 
hwid
,

116 
t›o_node_ty≥
 
ty≥
, 
uöçå_t
 
subty≥
);

117 
t›o_node
 * 
t›o_föd_node_by_hwid
(t›o_nodê*
∑ª¡
, 
hwid
,

118 
t›o_node_ty≥
 
ty≥
, 
uöçå_t
 
subty≥
);

119 
t›o_¥omŸe_chûd
(
t›o_node
 *
chûd
);

120 
t›o_node
 * 
t›o_√xt_node
(t›o_nodê*
t›
,

121 
t›o_node
 *
node
);

122 
t›o_node
 * 
t›o_√xt_n⁄chûd_node
(t›o_nodê*
t›
,

123 
t›o_node
 *
node
);

124 
t›o_£t_pu_id
(
t›o_node
 *
node
, 
˝uid_t
 
id
);

126 
	et›o_Àvñ
 {

127 
	mTOPO_LEVEL_PKG
 = 0,

133 
	mTOPO_LEVEL_GROUP
,

134 
	mTOPO_LEVEL_CACHEGROUP
,

135 
	mTOPO_LEVEL_CORE
,

136 
	mTOPO_LEVEL_THREAD
,

137 
	mTOPO_LEVEL_COUNT


139 
	st›o_™Æysis
 {

140 
	mítôõs
[
TOPO_LEVEL_COUNT
];

142 
t›o_™Æyze
(
t›o_node
 *
t›o_roŸ
, 
Æl
,

143 
t›o_™Æysis
 *
ªsu…s
);

145 
	#TOPO_FOREACH
(
i
, 
roŸ
) \

146 
i
 = 
roŸ
; i !
NULL
; i = 
	`t›o_√xt_node
‘oŸ, i))

	)

148 
˝u_group
 *
smp_t›o
();

149 
˝u_group
 *
smp_t›o_Æloc
(
u_öt
 
cou¡
);

150 
˝u_group
 *
smp_t›o_n⁄e
();

151 
˝u_group
 *
smp_t›o_1Àvñ
(
l1sh¨e
, 
l1cou¡
, 
l1Êags
);

152 
˝u_group
 *
smp_t›o_2Àvñ
(
l2sh¨e
, 
l2cou¡
, 
l1sh¨e
,

153 
l1cou¡
, 
l1Êags
);

154 
˝u_group
 *
smp_t›o_föd
(˝u_grou∞*
t›
, 
˝u
);

156 (*
˝u°›_ª°¨tfunc
)();

157 
smp_˝us
;

159 vﬁ©ûê
˝u£t_t
 
ªsumög_˝us
;

160 vﬁ©ûê
˝u£t_t
 
°¨ãd_˝us
;

161 vﬁ©ûê
˝u£t_t
 
°›≥d_˝us
;

162 vﬁ©ûê
˝u£t_t
 
su•íded_˝us
;

163 vﬁ©ûê
˝u£t_t
 
t‹esume_˝us
;

164 
˝u£t_t
 
h…_˝us_mask
;

165 
˝u£t_t
 
logiˇl_˝us_mask
;

168 
u_öt
 
mp_maxid
;

169 
mp_max˝us
;

170 
mp_n˝us
;

171 vﬁ©ûê
smp_°¨ãd
;

173 
˝u£t_t
 
Æl_˝us
;

174 
˝u£t_t
 
˝u£t_domaö
[
MAXMEMDOM
];

181 
	#CPU_ABSENT
(
x_˝u
Ë(!
	`CPU_ISSET
(x_˝u, &
Æl_˝us
))

	)

191 
	#CPU_FOREACH
(
i
) \

192 (
i
Ë0; (iË<
mp_maxid
; (i)++) \

193 i‡(!
	`CPU_ABSENT
((
i
)))

	)

195 
__ölöe
 

196 
	$˝u_fú°
()

198 
i
;

200 
i
 = 0;; i++)

201 i‡(!
	`CPU_ABSENT
(
i
))

202  (
i
);

203 
	}
}

205 
__ölöe
 

206 
	$˝u_√xt
(
i
)

210 
i
++;

211 i‡(
i
 > 
mp_maxid
)

212 
i
 = 0;

213 i‡(!
	`CPU_ABSENT
(
i
))

214  (
i
);

216 
	}
}

218 
	#CPU_FIRST
(Ë
	`˝u_fú°
()

	)

219 
	#CPU_NEXT
(
i
Ë
	`˝u_√xt
((i))

	)

221 #ifde‡
SMP


241 
	gthªad
;

243 
˝u_group
 *
˝u_t›o
();

244 
˝u_mp_™noun˚
();

245 
˝u_mp_¥obe
();

246 
˝u_mp_£tmaxid
();

247 
˝u_mp_°¨t
();

249 
f‹w¨d_sig«l
(
thªad
 *);

250 
ª°¨t_˝us
(
˝u£t_t
);

251 
°›_˝us
(
˝u£t_t
);

252 
°›_˝us_h¨d
(
˝u£t_t
);

253 #i‡
deföed
(
__amd64__
Ë|| deföed(
__i386__
)

254 
su•íd_˝us
(
˝u£t_t
);

255 
ªsume_˝us
(
˝u£t_t
);

258 
smp_ªndezvous_a˘i⁄
();

259 
mtx
 
smp_ùi_mtx
;

263 
quõs˚_Æl_˝us
(const *, );

264 
quõs˚_˝us
(
˝u£t_t
, const *, );

265 
smp_no_ªndezvous_b¨rõr
(*);

266 
smp_ªndezvous
((*)(*),

269 *
¨g
);

270 
	`smp_ªndezvous_˝us
(
˝u£t_t
,

274 *
¨g
);

	@/usr/include/sys/socket.h

35 #i‚de‡
_SYS_SOCKET_H_


36 
	#_SYS_SOCKET_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/_ty≥s.h
>

40 
	~<sys/_iovec.h
>

41 
	~<machöe/_Æign.h
>

50 #i‡
__BSD_VISIBLE


51 #i‚de‡
_GID_T_DECLARED


52 
__gid_t
 
	tgid_t
;

53 
	#_GID_T_DECLARED


	)

56 #i‚de‡
_OFF_T_DECLARED


57 
__off_t
 
	toff_t
;

58 
	#_OFF_T_DECLARED


	)

61 #i‚de‡
_PID_T_DECLARED


62 
__pid_t
 
	tpid_t
;

63 
	#_PID_T_DECLARED


	)

67 #i‚de‡
_SA_FAMILY_T_DECLARED


68 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

69 
	#_SA_FAMILY_T_DECLARED


	)

72 #i‚de‡
_SOCKLEN_T_DECLARED


73 
__sockÀn_t
 
	tsockÀn_t
;

74 
	#_SOCKLEN_T_DECLARED


	)

77 #i‚de‡
_SSIZE_T_DECLARED


78 
__ssize_t
 
	tssize_t
;

79 
	#_SSIZE_T_DECLARED


	)

82 #i‡
__BSD_VISIBLE


83 #i‚de‡
_UID_T_DECLARED


84 
__uid_t
 
	tuid_t
;

85 
	#_UID_T_DECLARED


	)

89 #i‚de‡
_UINT32_T_DECLARED


90 
__uöt32_t
 
	tuöt32_t
;

91 
	#_UINT32_T_DECLARED


	)

94 #i‚de‡
_UINTPTR_T_DECLARED


95 
__uöçå_t
 
	tuöçå_t
;

96 
	#_UINTPTR_T_DECLARED


	)

102 
	#SOCK_STREAM
 1

	)

103 
	#SOCK_DGRAM
 2

	)

104 
	#SOCK_RAW
 3

	)

105 #i‡
__BSD_VISIBLE


106 
	#SOCK_RDM
 4

	)

108 
	#SOCK_SEQPACKET
 5

	)

110 #i‡
__BSD_VISIBLE


114 
	#SOCK_CLOEXEC
 0x10000000

	)

115 
	#SOCK_NONBLOCK
 0x20000000

	)

116 #ifde‡
_KERNEL


121 
	#ACCEPT4_INHERIT
 0x1

	)

122 
	#ACCEPT4_COMPAT
 0x2

	)

129 
	#SO_DEBUG
 0x00000001

	)

130 
	#SO_ACCEPTCONN
 0x00000002

	)

131 
	#SO_REUSEADDR
 0x00000004

	)

132 
	#SO_KEEPALIVE
 0x00000008

	)

133 
	#SO_DONTROUTE
 0x00000010

	)

134 
	#SO_BROADCAST
 0x00000020

	)

135 #i‡
__BSD_VISIBLE


136 
	#SO_USELOOPBACK
 0x00000040

	)

138 
	#SO_LINGER
 0x00000080

	)

139 
	#SO_OOBINLINE
 0x00000100

	)

140 #i‡
__BSD_VISIBLE


141 
	#SO_REUSEPORT
 0x00000200

	)

142 
	#SO_TIMESTAMP
 0x00000400

	)

143 
	#SO_NOSIGPIPE
 0x00000800

	)

144 
	#SO_ACCEPTFILTER
 0x00001000

	)

145 
	#SO_BINTIME
 0x00002000

	)

147 
	#SO_NO_OFFLOAD
 0x00004000

	)

148 
	#SO_NO_DDP
 0x00008000

	)

149 
	#SO_REUSEPORT_LB
 0x00010000

	)

154 
	#SO_SNDBUF
 0x1001

	)

155 
	#SO_RCVBUF
 0x1002

	)

156 
	#SO_SNDLOWAT
 0x1003

	)

157 
	#SO_RCVLOWAT
 0x1004

	)

158 
	#SO_SNDTIMEO
 0x1005

	)

159 
	#SO_RCVTIMEO
 0x1006

	)

160 
	#SO_ERROR
 0x1007

	)

161 
	#SO_TYPE
 0x1008

	)

162 #i‡
__BSD_VISIBLE


163 
	#SO_LABEL
 0x1009

	)

164 
	#SO_PEERLABEL
 0x1010

	)

165 
	#SO_LISTENQLIMIT
 0x1011

	)

166 
	#SO_LISTENQLEN
 0x1012

	)

167 
	#SO_LISTENINCQLEN
 0x1013

	)

168 
	#SO_SETFIB
 0x1014

	)

169 
	#SO_USER_COOKIE
 0x1015

	)

170 
	#SO_PROTOCOL
 0x1016

	)

171 
	#SO_PROTOTYPE
 
SO_PROTOCOL


	)

172 
	#SO_TS_CLOCK
 0x1017

	)

173 
	#SO_MAX_PACING_RATE
 0x1018

	)

174 
	#SO_DOMAIN
 0x1019

	)

177 #i‡
__BSD_VISIBLE


178 
	#SO_TS_REALTIME_MICRO
 0

	)

179 
	#SO_TS_BINTIME
 1

	)

180 
	#SO_TS_REALTIME
 2

	)

181 
	#SO_TS_MONOTONIC
 3

	)

182 
	#SO_TS_DEFAULT
 
SO_TS_REALTIME_MICRO


	)

183 
	#SO_TS_CLOCK_MAX
 
SO_TS_MONOTONIC


	)

191 #i‡
__BSD_VISIBLE


192 
	#SO_VENDOR
 0x80000000

	)

198 
	slögî
 {

199 
	ml_⁄off
;

200 
	ml_lögî
;

203 #i‡
__BSD_VISIBLE


204 
	sac˚±_fûãr_¨g
 {

205 
	maf_«me
[16];

206 
	maf_¨g
[256-16];

213 
	#SOL_SOCKET
 0xfff‡

	)

218 
	#AF_UNSPEC
 0

	)

219 #i‡
__BSD_VISIBLE


220 
	#AF_LOCAL
 
AF_UNIX


	)

222 
	#AF_UNIX
 1

	)

223 
	#AF_INET
 2

	)

224 #i‡
__BSD_VISIBLE


225 
	#AF_IMPLINK
 3

	)

226 
	#AF_PUP
 4

	)

227 
	#AF_CHAOS
 5

	)

228 
	#AF_NETBIOS
 6

	)

229 
	#AF_ISO
 7

	)

230 
	#AF_OSI
 
AF_ISO


	)

231 
	#AF_ECMA
 8

	)

232 
	#AF_DATAKIT
 9

	)

233 
	#AF_CCITT
 10

	)

234 
	#AF_SNA
 11

	)

235 
	#AF_DEC√t
 12

	)

236 
	#AF_DLI
 13

	)

237 
	#AF_LAT
 14

	)

238 
	#AF_HYLINK
 15

	)

239 
	#AF_APPLETALK
 16

	)

240 
	#AF_ROUTE
 17

	)

241 
	#AF_LINK
 18

	)

242 
	#p£udo_AF_XTP
 19

	)

243 
	#AF_COIP
 20

	)

244 
	#AF_CNT
 21

	)

245 
	#p£udo_AF_RTIP
 22

	)

246 
	#AF_IPX
 23

	)

247 
	#AF_SIP
 24

	)

248 
	#p£udo_AF_PIP
 25

	)

249 
	#AF_ISDN
 26

	)

250 
	#AF_E164
 
AF_ISDN


	)

251 
	#p£udo_AF_KEY
 27

	)

253 
	#AF_INET6
 28

	)

254 #i‡
__BSD_VISIBLE


255 
	#AF_NATM
 29

	)

256 
	#AF_ATM
 30

	)

257 
	#p£udo_AF_HDRCMPLT
 31

	)

260 
	#AF_NETGRAPH
 32

	)

261 
	#AF_SLOW
 33

	)

262 
	#AF_SCLUSTER
 34

	)

263 
	#AF_ARP
 35

	)

264 
	#AF_BLUETOOTH
 36

	)

265 
	#AF_IEEE80211
 37

	)

266 
	#AF_INET_SDP
 40

	)

267 
	#AF_INET6_SDP
 42

	)

268 
	#AF_MAX
 42

	)

274 
	#AF_VENDOR00
 39

	)

275 
	#AF_VENDOR01
 41

	)

276 
	#AF_VENDOR02
 43

	)

277 
	#AF_VENDOR03
 45

	)

278 
	#AF_VENDOR04
 47

	)

279 
	#AF_VENDOR05
 49

	)

280 
	#AF_VENDOR06
 51

	)

281 
	#AF_VENDOR07
 53

	)

282 
	#AF_VENDOR08
 55

	)

283 
	#AF_VENDOR09
 57

	)

284 
	#AF_VENDOR10
 59

	)

285 
	#AF_VENDOR11
 61

	)

286 
	#AF_VENDOR12
 63

	)

287 
	#AF_VENDOR13
 65

	)

288 
	#AF_VENDOR14
 67

	)

289 
	#AF_VENDOR15
 69

	)

290 
	#AF_VENDOR16
 71

	)

291 
	#AF_VENDOR17
 73

	)

292 
	#AF_VENDOR18
 75

	)

293 
	#AF_VENDOR19
 77

	)

294 
	#AF_VENDOR20
 79

	)

295 
	#AF_VENDOR21
 81

	)

296 
	#AF_VENDOR22
 83

	)

297 
	#AF_VENDOR23
 85

	)

298 
	#AF_VENDOR24
 87

	)

299 
	#AF_VENDOR25
 89

	)

300 
	#AF_VENDOR26
 91

	)

301 
	#AF_VENDOR27
 93

	)

302 
	#AF_VENDOR28
 95

	)

303 
	#AF_VENDOR29
 97

	)

304 
	#AF_VENDOR30
 99

	)

305 
	#AF_VENDOR31
 101

	)

306 
	#AF_VENDOR32
 103

	)

307 
	#AF_VENDOR33
 105

	)

308 
	#AF_VENDOR34
 107

	)

309 
	#AF_VENDOR35
 109

	)

310 
	#AF_VENDOR36
 111

	)

311 
	#AF_VENDOR37
 113

	)

312 
	#AF_VENDOR38
 115

	)

313 
	#AF_VENDOR39
 117

	)

314 
	#AF_VENDOR40
 119

	)

315 
	#AF_VENDOR41
 121

	)

316 
	#AF_VENDOR42
 123

	)

317 
	#AF_VENDOR43
 125

	)

318 
	#AF_VENDOR44
 127

	)

319 
	#AF_VENDOR45
 129

	)

320 
	#AF_VENDOR46
 131

	)

321 
	#AF_VENDOR47
 133

	)

328 
	ssockaddr
 {

329 
	mß_Àn
;

330 
ß_Ámûy_t
 
	mß_Ámûy
;

331 
	mß_d©a
[14];

333 #i‡
__BSD_VISIBLE


334 
	#SOCK_MAXADDRLEN
 255

	)

340 
	ssock¥Ÿo
 {

341 
	m•_Ámûy
;

342 
	m•_¥Ÿocﬁ
;

346 
	~<sys/_sockaddr_°‹age.h
>

348 #i‡
__BSD_VISIBLE


352 
	#PF_UNSPEC
 
AF_UNSPEC


	)

353 
	#PF_LOCAL
 
AF_LOCAL


	)

354 
	#PF_UNIX
 
PF_LOCAL


	)

355 
	#PF_INET
 
AF_INET


	)

356 
	#PF_IMPLINK
 
AF_IMPLINK


	)

357 
	#PF_PUP
 
AF_PUP


	)

358 
	#PF_CHAOS
 
AF_CHAOS


	)

359 
	#PF_NETBIOS
 
AF_NETBIOS


	)

360 
	#PF_ISO
 
AF_ISO


	)

361 
	#PF_OSI
 
AF_ISO


	)

362 
	#PF_ECMA
 
AF_ECMA


	)

363 
	#PF_DATAKIT
 
AF_DATAKIT


	)

364 
	#PF_CCITT
 
AF_CCITT


	)

365 
	#PF_SNA
 
AF_SNA


	)

366 
	#PF_DEC√t
 
AF_DEC√t


	)

367 
	#PF_DLI
 
AF_DLI


	)

368 
	#PF_LAT
 
AF_LAT


	)

369 
	#PF_HYLINK
 
AF_HYLINK


	)

370 
	#PF_APPLETALK
 
AF_APPLETALK


	)

371 
	#PF_ROUTE
 
AF_ROUTE


	)

372 
	#PF_LINK
 
AF_LINK


	)

373 
	#PF_XTP
 
p£udo_AF_XTP


	)

374 
	#PF_COIP
 
AF_COIP


	)

375 
	#PF_CNT
 
AF_CNT


	)

376 
	#PF_SIP
 
AF_SIP


	)

377 
	#PF_IPX
 
AF_IPX


	)

378 
	#PF_RTIP
 
p£udo_AF_RTIP


	)

379 
	#PF_PIP
 
p£udo_AF_PIP


	)

380 
	#PF_ISDN
 
AF_ISDN


	)

381 
	#PF_KEY
 
p£udo_AF_KEY


	)

382 
	#PF_INET6
 
AF_INET6


	)

383 
	#PF_NATM
 
AF_NATM


	)

384 
	#PF_ATM
 
AF_ATM


	)

385 
	#PF_NETGRAPH
 
AF_NETGRAPH


	)

386 
	#PF_SLOW
 
AF_SLOW


	)

387 
	#PF_SCLUSTER
 
AF_SCLUSTER


	)

388 
	#PF_ARP
 
AF_ARP


	)

389 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

390 
	#PF_IEEE80211
 
AF_IEEE80211


	)

391 
	#PF_INET_SDP
 
AF_INET_SDP


	)

392 
	#PF_INET6_SDP
 
AF_INET6_SDP


	)

394 
	#PF_MAX
 
AF_MAX


	)

413 
	#NET_RT_DUMP
 1

	)

414 
	#NET_RT_FLAGS
 2

	)

415 
	#NET_RT_IFLIST
 3

	)

416 
	#NET_RT_IFMALIST
 4

	)

417 
	#NET_RT_IFLISTL
 5

	)

424 
	#SOMAXCONN
 128

	)

430 
	smsghdr
 {

431 *
	mmsg_«me
;

432 
sockÀn_t
 
	mmsg_«mñí
;

433 
iovec
 *
	mmsg_iov
;

434 
	mmsg_iovÀn
;

435 *
	mmsg_c⁄åﬁ
;

436 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

437 
	mmsg_Êags
;

440 
	#MSG_OOB
 0x00000001

	)

441 
	#MSG_PEEK
 0x00000002

	)

442 
	#MSG_DONTROUTE
 0x00000004

	)

443 
	#MSG_EOR
 0x00000008

	)

444 
	#MSG_TRUNC
 0x00000010

	)

445 
	#MSG_CTRUNC
 0x00000020

	)

446 
	#MSG_WAITALL
 0x00000040

	)

447 #i‡
__BSD_VISIBLE


448 
	#MSG_DONTWAIT
 0x00000080

	)

449 
	#MSG_EOF
 0x00000100

	)

454 
	#MSG_NOTIFICATION
 0x00002000

	)

455 
	#MSG_NBIO
 0x00004000

	)

456 
	#MSG_COMPAT
 0x00008000

	)

458 #ifde‡
_KERNEL


459 
	#MSG_SOCALLBCK
 0x00010000

	)

461 #i‡
__POSIX_VISIBLE
 >= 200809

462 
	#MSG_NOSIGNAL
 0x00020000

	)

464 #i‡
__BSD_VISIBLE


465 
	#MSG_CMSG_CLOEXEC
 0x00040000

	)

466 
	#MSG_WAITFORONE
 0x00080000

	)

468 #ifde‡
_KERNEL


469 
	#MSG_MORETOCOME
 0x00100000

	)

478 
	scmsghdr
 {

479 
sockÀn_t
 
	mcmsg_Àn
;

480 
	mcmsg_Àvñ
;

481 
	mcmsg_ty≥
;

485 #i‡
__BSD_VISIBLE


491 
	#CMGROUP_MAX
 16

	)

500 
	scmsg¸ed
 {

501 
pid_t
 
	mcm¸ed_pid
;

502 
uid_t
 
	mcm¸ed_uid
;

503 
uid_t
 
	mcm¸ed_euid
;

504 
gid_t
 
	mcm¸ed_gid
;

505 
	mcm¸ed_ngroups
;

506 
gid_t
 
	mcm¸ed_groups
[
CMGROUP_MAX
];

512 
	ssock¸ed
 {

513 
uid_t
 
	msc_uid
;

514 
uid_t
 
	msc_euid
;

515 
gid_t
 
	msc_gid
;

516 
gid_t
 
	msc_egid
;

517 
	msc_ngroups
;

518 
gid_t
 
	msc_groups
[1];

524 
	#SOCKCREDSIZE
(
ngΩs
) \

525 ((
sock¸ed
Ë+ ((
gid_t
Ë* ((
ngΩs
Ë- 1)))

	)

530 
	#CMSG_DATA
(
cmsg
) ((*)(cmsg) + \

531 
	`_ALIGN
((
cmsghdr
)))

	)

534 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) \

535 ((*)(
cmsg
Ë=(*)0 ? 
	`CMSG_FIRSTHDR
(
mhdr
) : \

536 ((*)(
cmsg
Ë+ 
	`_ALIGN
(((
cmsghdr
 *)(cmsg))->
cmsg_Àn
) + \

537 
	`_ALIGN
((
cmsghdr
)) > \

538 (*)(
mhdr
)->
msg_c⁄åﬁ
 + (mhdr)->
msg_c⁄åﬁÀn
) ? \

539 (
cmsghdr
 *)0 : \

540 (
cmsghdr
 *)(*)((*)(
cmsg
) + \

541 
	`_ALIGN
(((
cmsghdr
 *)(
cmsg
))->
cmsg_Àn
)))

	)

547 
	#CMSG_FIRSTHDR
(
mhdr
) \

548 ((
mhdr
)->
msg_c⁄åﬁÀn
 >(
cmsghdr
) ? \

549 (
cmsghdr
 *)(
mhdr
)->
msg_c⁄åﬁ
 : \

550 (
cmsghdr
 *)0)

	)

552 #i‡
__BSD_VISIBLE


554 
	#CMSG_SPACE
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ _ALIGN÷))

	)

555 
	#CMSG_LEN
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ (l))

	)

558 #ifde‡
_KERNEL


559 
	#CMSG_ALIGN
(
n
Ë
	`_ALIGN
“)

	)

563 
	#SCM_RIGHTS
 0x01

	)

564 #i‡
__BSD_VISIBLE


565 
	#SCM_TIMESTAMP
 0x02

	)

566 
	#SCM_CREDS
 0x03

	)

567 
	#SCM_BINTIME
 0x04

	)

568 
	#SCM_REALTIME
 0x05

	)

569 
	#SCM_MONOTONIC
 0x06

	)

570 
	#SCM_TIME_INFO
 0x07

	)

572 
	ssock_time°amp_öfo
 {

573 
__uöt32_t
 
	m°_öfo_Êags
;

574 
__uöt32_t
 
	m°_öfo_∑d0
;

575 
__uöt64_t
 
	m°_öfo_rsv
[7];

578 
	#ST_INFO_HW
 0x0001

	)

579 
	#ST_INFO_HW_HPREC
 0x0002

	)

583 #i‡
__BSD_VISIBLE


587 
	sosockaddr
 {

588 
	mß_Ámûy
;

589 
	mß_d©a
[14];

595 
	somsghdr
 {

596 *
	mmsg_«me
;

597 
	mmsg_«mñí
;

598 
iovec
 *
	mmsg_iov
;

599 
	mmsg_iovÀn
;

600 *
	mmsg_ac¸ights
;

601 
	mmsg_ac¸ight¶í
;

608 
	#SHUT_RD
 0

	)

609 
	#SHUT_WR
 1

	)

610 
	#SHUT_RDWR
 2

	)

612 #i‡
__BSD_VISIBLE


615 
	#PRU_FLUSH_RD
 
SHUT_RD


	)

616 
	#PRU_FLUSH_WR
 
SHUT_WR


	)

617 
	#PRU_FLUSH_RDWR
 
SHUT_RDWR


	)

621 #i‡
__BSD_VISIBLE


625 
	ssf_hdå
 {

626 
iovec
 *
	mhódîs
;

627 
	mhdr_˙t
;

628 
iovec
 *
	måaûîs
;

629 
	mål_˙t
;

635 
	#SF_NODISKIO
 0x00000001

	)

636 
	#SF_MNOWAIT
 0x00000002

	)

637 
	#SF_SYNC
 0x00000004

	)

638 
	#SF_USER_READAHEAD
 0x00000008

	)

639 
	#SF_NOCACHE
 0x00000010

	)

640 
	#SF_FLAGS
(
rh
, 
Êags
Ë((‘hË<< 16Ë| (Êags))

	)

642 #ifde‡
_KERNEL


643 
	#SF_READAHEAD
(
Êags
Ë((ÊagsË>> 16)

	)

649 
	smmsghdr
 {

650 
msghdr
 
	mmsg_hdr
;

651 
ssize_t
 
	mmsg_Àn
;

655 #i‚def 
_KERNEL


657 
	~<sys/cdefs.h
>

659 
__BEGIN_DECLS


660 
ac˚±
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

661 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

662 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

663 #i‡
__BSD_VISIBLE


664 
ac˚±4
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict, );

665 
böd©
(, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

666 
c⁄√˘©
(, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

668 
gë≥î«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

669 
gësock«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

670 
gësock›t
(, , , * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

671 
li°í
(, );

672 
ssize_t
 
ªcv
(, *, 
size_t
, );

673 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

674 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

675 #i‡
__BSD_VISIBLE


676 
	gtime•ec
;

677 
ssize_t
 
ªcvmmsg
(, 
mmsghdr
 * 
__ª°ri˘
, 
size_t
, ,

678 c⁄° 
time•ec
 * 
__ª°ri˘
);

680 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

681 
ssize_t
 
£ndto
(, const *,

682 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

683 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

684 #i‡
__BSD_VISIBLE


685 
£ndfûe
(, , 
off_t
, 
size_t
, 
sf_hdå
 *, off_t *, );

686 
ssize_t
 
£ndmmsg
(, 
mmsghdr
 * 
__ª°ri˘
, 
size_t
, );

687 
£tfib
();

689 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

690 
shutdown
(, );

691 
sock©m¨k
();

692 
sockë
(, , );

693 
sockë∑ú
(, , , *);

694 
	g__END_DECLS


698 #ifde‡
_KERNEL


699 
	gsockë
;

701 
t˝cb
 *
so_sŸŸ˝cb
(
sockë
 *
so
);

702 
öpcb
 *
so_sŸoöpcb
(
sockë
 *
so
);

703 
sockbuf
 *
so_sockbuf_¢d
(
sockë
 *);

704 
sockbuf
 *
so_sockbuf_rcv
(
sockë
 *);

706 
so_°©e_gë
(c⁄° 
sockë
 *);

707 
so_°©e_£t
(
sockë
 *, );

709 
so_›ti⁄s_gë
(c⁄° 
sockë
 *);

710 
so_›ti⁄s_£t
(
sockë
 *, );

712 
so_îr‹_gë
(c⁄° 
sockë
 *);

713 
so_îr‹_£t
(
sockë
 *, );

715 
so_lögî_gë
(c⁄° 
sockë
 *);

716 
so_lögî_£t
(
sockë
 *, );

718 
¥Ÿosw
 *
so_¥Ÿosw_gë
(c⁄° 
sockë
 *);

719 
so_¥Ÿosw_£t
(
sockë
 *, 
¥Ÿosw
 *);

721 
so_s‹wakeup_locked
(
sockë
 *
so
);

722 
so_sowwakeup_locked
(
sockë
 *
so
);

724 
so_s‹wakeup
(
sockë
 *
so
);

725 
so_sowwakeup
(
sockë
 *
so
);

727 
so_lock
(
sockë
 *
so
);

728 
so_u∆ock
(
sockë
 *
so
);

	@/usr/include/sys/stat.h

40 #i‚de‡
_SYS_STAT_H_


41 
	#_SYS_STAT_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_time•ec.h
>

45 
	~<sys/_ty≥s.h
>

47 #i‚de‡
_BLKSIZE_T_DECLARED


48 
__blksize_t
 
	tblksize_t
;

49 
	#_BLKSIZE_T_DECLARED


	)

52 #i‚de‡
_BLKCNT_T_DECLARED


53 
__blk˙t_t
 
	tblk˙t_t
;

54 
	#_BLKCNT_T_DECLARED


	)

57 #i‚de‡
_DEV_T_DECLARED


58 
__dev_t
 
	tdev_t
;

59 
	#_DEV_T_DECLARED


	)

62 #i‚de‡
_FFLAGS_T_DECLARED


63 
__fÊags_t
 
	tfÊags_t
;

64 
	#_FFLAGS_T_DECLARED


	)

67 #i‚de‡
_GID_T_DECLARED


68 
__gid_t
 
	tgid_t
;

69 
	#_GID_T_DECLARED


	)

72 #i‚de‡
_INO_T_DECLARED


73 
__öo_t
 
	töo_t
;

74 
	#_INO_T_DECLARED


	)

77 #i‚de‡
_MODE_T_DECLARED


78 
__mode_t
 
	tmode_t
;

79 
	#_MODE_T_DECLARED


	)

82 #i‚de‡
_NLINK_T_DECLARED


83 
__∆ök_t
 
	t∆ök_t
;

84 
	#_NLINK_T_DECLARED


	)

87 #i‚de‡
_OFF_T_DECLARED


88 
__off_t
 
	toff_t
;

89 
	#_OFF_T_DECLARED


	)

92 #i‚de‡
_UID_T_DECLARED


93 
__uid_t
 
	tuid_t
;

94 
	#_UID_T_DECLARED


	)

97 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


101 
	~<sys/time.h
>

104 #ifde‡
_KERNEL


105 
	so°©
 {

106 
__uöt16_t
 
	m°_dev
;

107 
__uöt32_t
 
	m°_öo
;

108 
mode_t
 
	m°_mode
;

109 
__uöt16_t
 
	m°_∆ök
;

110 
__uöt16_t
 
	m°_uid
;

111 
__uöt16_t
 
	m°_gid
;

112 
__uöt16_t
 
	m°_rdev
;

113 
__öt32_t
 
	m°_size
;

114 
time•ec
 
	m°_©im
;

115 
time•ec
 
	m°_mtim
;

116 
time•ec
 
	m°_˘im
;

117 
__öt32_t
 
	m°_blksize
;

118 
__öt32_t
 
	m°_blocks
;

119 
fÊags_t
 
	m°_Êags
;

120 
__uöt32_t
 
	m°_gí
;

124 #i‡
deföed
(
_WANT_FREEBSD11_STAT
Ë|| deföed(
_KERNEL
)

125 
	s‰ìbsd11_°©
 {

126 
__uöt32_t
 
	m°_dev
;

127 
__uöt32_t
 
	m°_öo
;

128 
mode_t
 
	m°_mode
;

129 
__uöt16_t
 
	m°_∆ök
;

130 
uid_t
 
	m°_uid
;

131 
gid_t
 
	m°_gid
;

132 
__uöt32_t
 
	m°_rdev
;

133 
time•ec
 
	m°_©im
;

134 
time•ec
 
	m°_mtim
;

135 
time•ec
 
	m°_˘im
;

136 
off_t
 
	m°_size
;

137 
blk˙t_t
 
	m°_blocks
;

138 
blksize_t
 
	m°_blksize
;

139 
fÊags_t
 
	m°_Êags
;

140 
__uöt32_t
 
	m°_gí
;

141 
__öt32_t
 
	m°_l•¨e
;

142 
time•ec
 
	m°_búthtim
;

151 :(8 / 2Ë* (16 - ()(
time•ec
));

152 :(8 / 2Ë* (16 - ()(
time•ec
));

156 #i‡
deföed
(
__i386__
)

157 
	#__STAT_TIME_T_EXT
 1

	)

160 
	s°©
 {

161 
dev_t
 
	m°_dev
;

162 
öo_t
 
	m°_öo
;

163 
∆ök_t
 
	m°_∆ök
;

164 
mode_t
 
	m°_mode
;

165 
__öt16_t
 
	m°_∑ddög0
;

166 
uid_t
 
	m°_uid
;

167 
gid_t
 
	m°_gid
;

168 
__öt32_t
 
	m°_∑ddög1
;

169 
dev_t
 
	m°_rdev
;

170 #ifdef 
__STAT_TIME_T_EXT


171 
__öt32_t
 
	m°_©im_ext
;

173 
time•ec
 
	m°_©im
;

174 #ifdef 
__STAT_TIME_T_EXT


175 
__öt32_t
 
	m°_mtim_ext
;

177 
time•ec
 
	m°_mtim
;

178 #ifdef 
__STAT_TIME_T_EXT


179 
__öt32_t
 
	m°_˘im_ext
;

181 
time•ec
 
	m°_˘im
;

182 #ifdef 
__STAT_TIME_T_EXT


183 
__öt32_t
 
	m°_btim_ext
;

185 
time•ec
 
	m°_búthtim
;

186 
off_t
 
	m°_size
;

187 
blk˙t_t
 
	m°_blocks
;

188 
blksize_t
 
	m°_blksize
;

189 
fÊags_t
 
	m°_Êags
;

190 
__uöt64_t
 
	m°_gí
;

191 
__uöt64_t
 
	m°_•¨e
[10];

194 #ifde‡
_KERNEL


195 
	sn°©
 {

196 
__uöt32_t
 
	m°_dev
;

197 
__uöt32_t
 
	m°_öo
;

198 
__uöt32_t
 
	m°_mode
;

199 
__uöt32_t
 
	m°_∆ök
;

200 
uid_t
 
	m°_uid
;

201 
gid_t
 
	m°_gid
;

202 
__uöt32_t
 
	m°_rdev
;

203 
time•ec
 
	m°_©im
;

204 
time•ec
 
	m°_mtim
;

205 
time•ec
 
	m°_˘im
;

206 
off_t
 
	m°_size
;

207 
blk˙t_t
 
	m°_blocks
;

208 
blksize_t
 
	m°_blksize
;

209 
fÊags_t
 
	m°_Êags
;

210 
__uöt32_t
 
	m°_gí
;

211 
time•ec
 
	m°_búthtim
;

216 :(8 / 2Ë* (16 - ()(
time•ec
));

217 :(8 / 2Ë* (16 - ()(
time•ec
));

221 #i‚de‡
_KERNEL


222 
	#°_©ime
 
°_©im
.
tv_£c


	)

223 
	#°_mtime
 
°_mtim
.
tv_£c


	)

224 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

225 #i‡
__BSD_VISIBLE


226 
	#°_búthtime
 
°_búthtim
.
tv_£c


	)

230 #i‡
__BSD_VISIBLE


231 
	#°_©ime•ec
 
°_©im


	)

232 
	#°_mtime•ec
 
°_mtim


	)

233 
	#°_˘ime•ec
 
°_˘im


	)

234 
	#°_búthtime•ec
 
°_búthtim


	)

238 
	#S_ISUID
 0004000

	)

239 
	#S_ISGID
 0002000

	)

240 #i‡
__BSD_VISIBLE


241 
	#S_ISTXT
 0001000

	)

244 
	#S_IRWXU
 0000700

	)

245 
	#S_IRUSR
 0000400

	)

246 
	#S_IWUSR
 0000200

	)

247 
	#S_IXUSR
 0000100

	)

249 #i‡
__BSD_VISIBLE


250 
	#S_IREAD
 
S_IRUSR


	)

251 
	#S_IWRITE
 
S_IWUSR


	)

252 
	#S_IEXEC
 
S_IXUSR


	)

255 
	#S_IRWXG
 0000070

	)

256 
	#S_IRGRP
 0000040

	)

257 
	#S_IWGRP
 0000020

	)

258 
	#S_IXGRP
 0000010

	)

260 
	#S_IRWXO
 0000007

	)

261 
	#S_IROTH
 0000004

	)

262 
	#S_IWOTH
 0000002

	)

263 
	#S_IXOTH
 0000001

	)

265 #i‡
__XSI_VISIBLE


266 
	#S_IFMT
 0170000

	)

267 
	#S_IFIFO
 0010000

	)

268 
	#S_IFCHR
 0020000

	)

269 
	#S_IFDIR
 0040000

	)

270 
	#S_IFBLK
 0060000

	)

271 
	#S_IFREG
 0100000

	)

272 
	#S_IFLNK
 0120000

	)

273 
	#S_IFSOCK
 0140000

	)

274 
	#S_ISVTX
 0001000

	)

276 #i‡
__BSD_VISIBLE


277 
	#S_IFWHT
 0160000

	)

280 
	#S_ISDIR
(
m
Ë(((mË& 0170000Ë=0040000Ë

	)

281 
	#S_ISCHR
(
m
Ë(((mË& 0170000Ë=0020000Ë

	)

282 
	#S_ISBLK
(
m
Ë(((mË& 0170000Ë=0060000Ë

	)

283 
	#S_ISREG
(
m
Ë(((mË& 0170000Ë=0100000Ë

	)

284 
	#S_ISFIFO
(
m
Ë(((mË& 0170000Ë=0010000Ë

	)

285 #i‡
__POSIX_VISIBLE
 >= 200112

286 
	#S_ISLNK
(
m
Ë(((mË& 0170000Ë=0120000Ë

	)

287 
	#S_ISSOCK
(
m
Ë(((mË& 0170000Ë=0140000Ë

	)

289 #i‡
__BSD_VISIBLE


290 
	#S_ISWHT
(
m
Ë(((mË& 0170000Ë=0160000Ë

	)

293 #i‡
__BSD_VISIBLE


294 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

296 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

298 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

300 
	#S_BLKSIZE
 512

	)

307 
	#UF_SETTABLE
 0x0000fff‡

	)

308 
	#UF_NODUMP
 0x00000001

	)

309 
	#UF_IMMUTABLE
 0x00000002

	)

310 
	#UF_APPEND
 0x00000004

	)

311 
	#UF_OPAQUE
 0x00000008

	)

312 
	#UF_NOUNLINK
 0x00000010

	)

318 
	#UF_COMPRESSED
 0x00000020

	)

319 
	#UF_TRACKED
 0x00000040

	)

322 
	#UF_SYSTEM
 0x00000080

	)

323 
	#UF_SPARSE
 0x00000100

	)

324 
	#UF_OFFLINE
 0x00000200

	)

325 
	#UF_REPARSE
 0x00000400

	)

326 
	#UF_ARCHIVE
 0x00000800

	)

327 
	#UF_READONLY
 0x00001000

	)

329 
	#UF_HIDDEN
 0x00008000

	)

334 
	#SF_SETTABLE
 0xffff0000

	)

335 
	#SF_ARCHIVED
 0x00010000

	)

336 
	#SF_IMMUTABLE
 0x00020000

	)

337 
	#SF_APPEND
 0x00040000

	)

338 
	#SF_NOUNLINK
 0x00100000

	)

339 
	#SF_SNAPSHOT
 0x00200000

	)

341 #ifde‡
_KERNEL


345 
	#OPAQUE
 (
UF_OPAQUE
)

	)

346 
	#APPEND
 (
UF_APPEND
 | 
SF_APPEND
)

	)

347 
	#IMMUTABLE
 (
UF_IMMUTABLE
 | 
SF_IMMUTABLE
)

	)

348 
	#NOUNLINK
 (
UF_NOUNLINK
 | 
SF_NOUNLINK
)

	)

353 #i‡
__POSIX_VISIBLE
 >= 200809

354 
	#UTIME_NOW
 -1

	)

355 
	#UTIME_OMIT
 -2

	)

358 #i‚de‡
_KERNEL


359 
	g__BEGIN_DECLS


360 #i‡
__BSD_VISIBLE


361 
chÊags
(const *, );

362 
chÊagßt
(, const *, , );

364 
chmod
(c⁄° *, 
mode_t
);

365 #i‡
__BSD_VISIBLE


366 
fchÊags
(, );

368 #i‡
__POSIX_VISIBLE
 >= 200112

369 
fchmod
(, 
mode_t
);

371 #i‡
__POSIX_VISIBLE
 >= 200809

372 
fchmod©
(, c⁄° *, 
mode_t
, );

373 
futimís
(
fd
, c⁄° 
time•ec
 
times
[2]);

374 
utimíßt
(
fd
, c⁄° *
∑th
, c⁄° 
time•ec
 
times
[2],

375 
Êag
);

377 
f°©
(, 
°©
 *);

378 #i‡
__BSD_VISIBLE


379 
lchÊags
(const *, );

380 
lchmod
(c⁄° *, 
mode_t
);

382 #i‡
__POSIX_VISIBLE
 >= 200112

383 
l°©
(c⁄° * 
__ª°ri˘
, 
°©
 * __restrict);

385 
mkdú
(c⁄° *, 
mode_t
);

386 
mkfifo
(c⁄° *, 
mode_t
);

387 #i‡!
deföed
(
_MKNOD_DECLARED
Ë&& 
__XSI_VISIBLE


388 
mknod
(c⁄° *, 
mode_t
, 
dev_t
);

389 
	#_MKNOD_DECLARED


	)

391 
°©
(c⁄° * 
__ª°ri˘
, stat * __restrict);

392 
mode_t
 
umask
(mode_t);

393 #i‡
__POSIX_VISIBLE
 >= 200809

394 
f°©©
(, c⁄° *, 
°©
 *, );

395 
mkdú©
(, c⁄° *, 
mode_t
);

396 
mkfifﬂt
(, c⁄° *, 
mode_t
);

398 #i‡
__XSI_VISIBLE
 >= 700

399 
mknod©
(, c⁄° *, 
mode_t
, 
dev_t
);

401 
	g__END_DECLS


	@/usr/include/sys/sx.h

34 #i‚def 
_SYS_SX_H_


35 
	#_SYS_SX_H_


	)

37 
	~<sys/_lock.h
>

38 
	~<sys/_sx.h
>

40 #ifdef 
_KERNEL


41 
	~<sys/p˝u.h
>

42 
	~<sys/lock_¥ofûe.h
>

43 
	~<sys/lock°©.h
>

44 
	~<machöe/©omic.h
>

70 
	#SX_LOCK_SHARED
 0x01

	)

71 
	#SX_LOCK_SHARED_WAITERS
 0x02

	)

72 
	#SX_LOCK_EXCLUSIVE_WAITERS
 0x04

	)

73 
	#SX_LOCK_WRITE_SPINNER
 0x08

	)

74 
	#SX_LOCK_RECURSED
 0x10

	)

75 
	#SX_LOCK_FLAGMASK
 \

76 (
SX_LOCK_SHARED
 | 
SX_LOCK_SHARED_WAITERS
 | \

77 
SX_LOCK_EXCLUSIVE_WAITERS
 | 
SX_LOCK_RECURSED
 | 
SX_LOCK_WRITE_SPINNER
)

	)

78 
	#SX_LOCK_WAITERS
 (
SX_LOCK_SHARED_WAITERS
 | 
SX_LOCK_EXCLUSIVE_WAITERS
)

	)

80 
	#SX_OWNER
(
x
Ë((xË& ~
SX_LOCK_FLAGMASK
)

	)

81 
	#SX_SHARERS_SHIFT
 5

	)

82 
	#SX_SHARERS
(
x
Ë(
	`SX_OWNER
(xË>> 
SX_SHARERS_SHIFT
)

	)

83 
	#SX_SHARERS_LOCK
(
x
) \

84 ((
x
Ë<< 
SX_SHARERS_SHIFT
 | 
SX_LOCK_SHARED
)

	)

85 
	#SX_ONE_SHARER
 (1 << 
SX_SHARERS_SHIFT
)

	)

87 
	#SX_LOCK_UNLOCKED
 
	`SX_SHARERS_LOCK
(0)

	)

88 
	#SX_LOCK_DESTROYED
 \

89 (
SX_LOCK_SHARED_WAITERS
 | 
SX_LOCK_EXCLUSIVE_WAITERS
)

	)

91 #ifde‡
_KERNEL


93 
	#sx_ªcur£
 
lock_obje˘
.
lo_d©a


	)

95 
	#SX_READ_VALUE
(
sx
Ë((sx)->
sx_lock
)

	)

97 
	#lv_sx_ow√r
(
v
) \

98 ((
v
 & 
SX_LOCK_SHARED
Ë? 
NULL
 : (
thªad
 *)
	`SX_OWNER
(v))

	)

104 
sx_sysöô
(*
¨g
);

105 
	#sx_öô
(
sx
, 
desc
Ë
	`sx_öô_Êags
((sx), (desc), 0)

	)

106 
sx_öô_Êags
(
sx
 *sx, c⁄° *
des¸ùti⁄
, 
›ts
);

107 
sx_de°roy
(
sx
 *sx);

108 
sx_åy_¶ock_öt
(
sx
 *sx 
LOCK_FILE_LINE_ARG_DEF
);

109 
sx_åy_¶ock_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

110 
sx_åy_xlock_öt
(
sx
 *sx 
LOCK_FILE_LINE_ARG_DEF
);

111 
sx_åy_xlock_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

112 
sx_åy_upgøde_öt
(
sx
 *sx 
LOCK_FILE_LINE_ARG_DEF
);

113 
sx_åy_upgøde_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

114 
sx_downgøde_öt
(
sx
 *sx 
LOCK_FILE_LINE_ARG_DEF
);

115 
sx_downgøde_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

116 
_sx_¶ock_öt
(
sx
 *sx, 
›ts
 
LOCK_FILE_LINE_ARG_DEF
);

117 
_sx_¶ock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

118 
_sx_xlock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

119 
_sx_su∆ock_öt
(
sx
 *sx 
LOCK_FILE_LINE_ARG_DEF
);

120 
_sx_su∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

121 
_sx_xu∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

122 
_sx_xlock_h¨d
(
sx
 *sx, 
uöçå_t
 
x
, 
›ts
 
LOCK_FILE_LINE_ARG_DEF
);

123 
_sx_xu∆ock_h¨d
(
sx
 *sx, 
uöçå_t
 
x
 
LOCK_FILE_LINE_ARG_DEF
);

124 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

125 
_sx_as£π
(c⁄° 
sx
 *sx, 
wh©
, c⁄° *
fûe
, 
löe
);

127 #ifde‡
DDB


128 
sx_chaö
(
thªad
 *
td
, thªad **
ow√Ω
);

131 
	ssx_¨gs
 {

132 
sx
 *
	mß_sx
;

133 c⁄° *
	mß_desc
;

134 
	mß_Êags
;

137 
	#SX_SYSINIT_FLAGS
(
«me
, 
sxa
, 
desc
, 
Êags
) \

138 
sx_¨gs
 
«me
##
_¨gs
 = { \

139 (
sxa
), \

140 (
desc
), \

141 (
Êags
) \

143 
	`SYSINIT
(
«me
##
_sx_sysöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

144 
sx_sysöô
, &
«me
##
_¨gs
); \

145 
	`SYSUNINIT
(
«me
##
_sx_sysunöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

146 
sx_de°roy
, (
sxa
))

	)

148 
	#SX_SYSINIT
(
«me
, 
sxa
, 
desc
Ë
	`SX_SYSINIT_FLAGS
“ame, sxa, desc, 0)

	)

156 #if (
LOCK_DEBUG
 == 0)

158 
__ölöe
 

159 
	$__sx_xlock
(
sx
 *sx, 
thªad
 *
td
, 
›ts
, c⁄° *
fûe
,

160 
löe
)

162 
uöçå_t
 
tid
 = (uöçå_t)
td
;

163 
uöçå_t
 
v
 = 
SX_LOCK_UNLOCKED
;

164 
îr‹
 = 0;

166 i‡(
	`__¥edi˘_Ál£
(
	`LOCKSTAT_PROFILE_ENABLED
(
sx__acquúe
) ||

167 !
	`©omic_fcmp£t_acq_±r
(&
sx
->
sx_lock
, &
v
, 
tid
)))

168 
îr‹
 = 
	`_sx_xlock_h¨d
(
sx
, 
v
, 
›ts
);

170  (
îr‹
);

171 
	}
}

174 
__ölöe
 

175 
	$__sx_xu∆ock
(
sx
 *sx, 
thªad
 *
td
, c⁄° *
fûe
, 
löe
)

177 
uöçå_t
 
x
 = (uöçå_t)
td
;

179 i‡(
	`__¥edi˘_Ál£
(
	`LOCKSTAT_PROFILE_ENABLED
(
sx__ªÀa£
) ||

180 !
	`©omic_fcmp£t_ªl_±r
(&
sx
->
sx_lock
, &
x
, 
SX_LOCK_UNLOCKED
)))

181 
	`_sx_xu∆ock_h¨d
(
sx
, 
x
);

182 
	}
}

188 #i‚de‡
LOCK_DEBUG


191 #if (
LOCK_DEBUG
 > 0Ë|| 
deföed
(
SX_NOINLINE
)

192 
	#sx_xlock_
(
sx
, 
fûe
, 
löe
) \

193 ()
	`_sx_xlock
((
sx
), 0, (
fûe
), (
löe
))

	)

194 
	#sx_xlock_sig_
(
sx
, 
fûe
, 
löe
) \

195 
	`_sx_xlock
((
sx
), 
SX_INTERRUPTIBLE
, (
fûe
), (
löe
))

	)

196 
	#sx_xu∆ock_
(
sx
, 
fûe
, 
löe
) \

197 
	`_sx_xu∆ock
((
sx
), (
fûe
), (
löe
))

	)

199 
	#sx_xlock_
(
sx
, 
fûe
, 
löe
) \

200 ()
	`__sx_xlock
((
sx
), 
cuπhªad
, 0, (
fûe
), (
löe
))

	)

201 
	#sx_xlock_sig_
(
sx
, 
fûe
, 
löe
) \

202 
	`__sx_xlock
((
sx
), 
cuπhªad
, 
SX_INTERRUPTIBLE
, (
fûe
), (
löe
))

	)

203 
	#sx_xu∆ock_
(
sx
, 
fûe
, 
löe
) \

204 
	`__sx_xu∆ock
((
sx
), 
cuπhªad
, (
fûe
), (
löe
))

	)

206 #if (
LOCK_DEBUG
 > 0)

207 
	#sx_¶ock_
(
sx
, 
fûe
, 
löe
) \

208 ()
	`_sx_¶ock
((
sx
), 0, (
fûe
), (
löe
))

	)

209 
	#sx_¶ock_sig_
(
sx
, 
fûe
, 
löe
) \

210 
	`_sx_¶ock
((
sx
), 
SX_INTERRUPTIBLE
, (
fûe
Ë, (
löe
))

	)

211 
	#sx_su∆ock_
(
sx
, 
fûe
, 
löe
) \

212 
	`_sx_su∆ock
((
sx
), (
fûe
), (
löe
))

	)

213 
	#sx_åy_¶ock
(
sx
Ë
	`sx_åy_¶ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

214 
	#sx_åy_xlock
(
sx
Ë
	`sx_åy_xlock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

215 
	#sx_åy_upgøde
(
sx
Ë
	`sx_åy_upgøde_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

216 
	#sx_downgøde
(
sx
Ë
	`sx_downgøde_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

218 
	#sx_¶ock_
(
sx
, 
fûe
, 
löe
) \

219 ()
	`_sx_¶ock_öt
((
sx
), 0)

	)

220 
	#sx_¶ock_sig_
(
sx
, 
fûe
, 
löe
) \

221 
	`_sx_¶ock_öt
((
sx
), 
SX_INTERRUPTIBLE
)

	)

222 
	#sx_su∆ock_
(
sx
, 
fûe
, 
löe
) \

223 
	`_sx_su∆ock_öt
((
sx
))

	)

224 
	#sx_åy_¶ock
(
sx
Ë
	`sx_åy_¶ock_öt
((sx))

	)

225 
	#sx_åy_xlock
(
sx
Ë
	`sx_åy_xlock_öt
((sx))

	)

226 
	#sx_åy_upgøde
(
sx
Ë
	`sx_åy_upgøde_öt
((sx))

	)

227 
	#sx_downgøde
(
sx
Ë
	`sx_downgøde_öt
((sx))

	)

229 #ifde‡
INVARIANTS


230 
	#sx_as£π_
(
sx
, 
wh©
, 
fûe
, 
löe
) \

231 
	`_sx_as£π
((
sx
), (
wh©
), (
fûe
), (
löe
))

	)

233 
	#sx_as£π_
(
sx
, 
wh©
, 
fûe
, 
löe
Ë()0

	)

236 
	#sx_xlock
(
sx
Ë
	`sx_xlock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

237 
	#sx_xlock_sig
(
sx
Ë
	`sx_xlock_sig_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

238 
	#sx_xu∆ock
(
sx
Ë
	`sx_xu∆ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

239 
	#sx_¶ock
(
sx
Ë
	`sx_¶ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

240 
	#sx_¶ock_sig
(
sx
Ë
	`sx_¶ock_sig_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

241 
	#sx_su∆ock
(
sx
Ë
	`sx_su∆ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

242 
	#sx_as£π
(
sx
, 
wh©
Ë
	`sx_as£π_
((sx), (wh©), 
__FILE__
, 
__LINE__
)

	)

248 
	#sx_xhﬁdî
(
sx
) \

249 ((
sx
)->
sx_lock
 & 
SX_LOCK_SHARED
 ? 
NULL
 : \

250 (
thªad
 *)
	`SX_OWNER
((
sx
)->
sx_lock
))

	)

252 
	#sx_xlocked
(
sx
) \

253 (((
sx
)->
sx_lock
 & ~(
SX_LOCK_FLAGMASK
 & ~
SX_LOCK_SHARED
)) == \

254 (
uöçå_t
)
cuπhªad
)

	)

256 
	#sx_u∆ock_
(
sx
, 
fûe
, 
löe
) do { \

257 i‡(
	`sx_xlocked
(
sx
)) \

258 
	`sx_xu∆ock_
(
sx
, 
fûe
, 
löe
); \

260 
	`sx_su∆ock_
(
sx
, 
fûe
, 
löe
); \

261 } 0)

	)

263 
	#sx_u∆ock
(
sx
Ë
	`sx_u∆ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

265 
	#sx_¶ìp
(
ch™
, 
sx
, 
¥i
, 
wmesg
, 
timo
) \

266 
	`_¶ìp
((
ch™
), &(
sx
)->
lock_obje˘
, (
¥i
), (
wmesg
), \

267 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

272 
	#SX_DUPOK
 0x01

	)

273 
	#SX_NOPROFILE
 0x02

	)

274 
	#SX_NOWITNESS
 0x04

	)

275 
	#SX_QUIET
 0x08

	)

276 
	#SX_NOADAPTIVE
 0x10

	)

277 
	#SX_RECURSE
 0x20

	)

278 
	#SX_NEW
 0x40

	)

283 
	#SX_INTERRUPTIBLE
 0x40

	)

285 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

286 
	#SA_LOCKED
 
LA_LOCKED


	)

287 
	#SA_SLOCKED
 
LA_SLOCKED


	)

288 
	#SA_XLOCKED
 
LA_XLOCKED


	)

289 
	#SA_UNLOCKED
 
LA_UNLOCKED


	)

290 
	#SA_RECURSED
 
LA_RECURSED


	)

291 
	#SA_NOTRECURSED
 
LA_NOTRECURSED


	)

294 
	#SX_LOCKED
 
LA_LOCKED


	)

295 
	#SX_SLOCKED
 
LA_SLOCKED


	)

296 
	#SX_XLOCKED
 
LA_XLOCKED


	)

297 
	#SX_UNLOCKED
 
LA_UNLOCKED


	)

298 
	#SX_RECURSED
 
LA_RECURSED


	)

299 
	#SX_NOTRECURSED
 
LA_NOTRECURSED


	)

	@/usr/include/sys/syscall.h

8 
	#SYS_sysˇŒ
 0

	)

9 
	#SYS_exô
 1

	)

10 
	#SYS_f‹k
 2

	)

11 
	#SYS_ªad
 3

	)

12 
	#SYS_wrôe
 4

	)

13 
	#SYS_›í
 5

	)

14 
	#SYS_˛o£
 6

	)

15 
	#SYS_waô4
 7

	)

17 
	#SYS_lök
 9

	)

18 
	#SYS_u∆ök
 10

	)

20 
	#SYS_chdú
 12

	)

21 
	#SYS_fchdú
 13

	)

22 
	#SYS_‰ìbsd11_mknod
 14

	)

23 
	#SYS_chmod
 15

	)

24 
	#SYS_chown
 16

	)

25 
	#SYS_bªak
 17

	)

28 
	#SYS_gëpid
 20

	)

29 
	#SYS_mou¡
 21

	)

30 
	#SYS_unmou¡
 22

	)

31 
	#SYS_£tuid
 23

	)

32 
	#SYS_gëuid
 24

	)

33 
	#SYS_gëeuid
 25

	)

34 
	#SYS_±ø˚
 26

	)

35 
	#SYS_ªcvmsg
 27

	)

36 
	#SYS_£ndmsg
 28

	)

37 
	#SYS_ªcv‰om
 29

	)

38 
	#SYS_ac˚±
 30

	)

39 
	#SYS_gë≥î«me
 31

	)

40 
	#SYS_gësock«me
 32

	)

41 
	#SYS_ac˚ss
 33

	)

42 
	#SYS_chÊags
 34

	)

43 
	#SYS_fchÊags
 35

	)

44 
	#SYS_sync
 36

	)

45 
	#SYS_kûl
 37

	)

47 
	#SYS_gëµid
 39

	)

49 
	#SYS_dup
 41

	)

50 
	#SYS_‰ìbsd10_pùe
 42

	)

51 
	#SYS_gëegid
 43

	)

52 
	#SYS_¥ofû
 44

	)

53 
	#SYS_kåa˚
 45

	)

55 
	#SYS_gëgid
 47

	)

57 
	#SYS_gëlogö
 49

	)

58 
	#SYS_£éogö
 50

	)

59 
	#SYS_ac˘
 51

	)

61 
	#SYS_sigÆt°ack
 53

	)

62 
	#SYS_io˘l
 54

	)

63 
	#SYS_ªboŸ
 55

	)

64 
	#SYS_ªvoke
 56

	)

65 
	#SYS_symlök
 57

	)

66 
	#SYS_ªadlök
 58

	)

67 
	#SYS_execve
 59

	)

68 
	#SYS_umask
 60

	)

69 
	#SYS_chroŸ
 61

	)

73 
	#SYS_msync
 65

	)

74 
	#SYS_vf‹k
 66

	)

77 
	#SYS_sbrk
 69

	)

78 
	#SYS_s°k
 70

	)

80 
	#SYS_‰ìbsd11_vadvi£
 72

	)

81 
	#SYS_munm≠
 73

	)

82 
	#SYS_m¥Ÿe˘
 74

	)

83 
	#SYS_madvi£
 75

	)

86 
	#SYS_möc‹e
 78

	)

87 
	#SYS_gëgroups
 79

	)

88 
	#SYS_£tgroups
 80

	)

89 
	#SYS_gëpgΩ
 81

	)

90 
	#SYS_£çgid
 82

	)

91 
	#SYS_£tôimî
 83

	)

93 
	#SYS_sw≠⁄
 85

	)

94 
	#SYS_gëôimî
 86

	)

97 
	#SYS_gëdèbÀsize
 89

	)

98 
	#SYS_dup2
 90

	)

99 
	#SYS_f˙é
 92

	)

100 
	#SYS_£À˘
 93

	)

101 
	#SYS_fsync
 95

	)

102 
	#SYS_£çri‹ôy
 96

	)

103 
	#SYS_sockë
 97

	)

104 
	#SYS_c⁄√˘
 98

	)

106 
	#SYS_gë¥i‹ôy
 100

	)

110 
	#SYS_böd
 104

	)

111 
	#SYS_£tsock›t
 105

	)

112 
	#SYS_li°í
 106

	)

122 
	#SYS_gëtimeofday
 116

	)

123 
	#SYS_gërußge
 117

	)

124 
	#SYS_gësock›t
 118

	)

125 
	#SYS_ªadv
 120

	)

126 
	#SYS_wrôev
 121

	)

127 
	#SYS_£âimeofday
 122

	)

128 
	#SYS_fchown
 123

	)

129 
	#SYS_fchmod
 124

	)

131 
	#SYS_£åeuid
 126

	)

132 
	#SYS_£åegid
 127

	)

133 
	#SYS_ª«me
 128

	)

136 
	#SYS_Êock
 131

	)

137 
	#SYS_mkfifo
 132

	)

138 
	#SYS_£ndto
 133

	)

139 
	#SYS_shutdown
 134

	)

140 
	#SYS_sockë∑ú
 135

	)

141 
	#SYS_mkdú
 136

	)

142 
	#SYS_rmdú
 137

	)

143 
	#SYS_utimes
 138

	)

145 
	#SYS_adjtime
 140

	)

152 
	#SYS_£tsid
 147

	)

153 
	#SYS_quŸa˘l
 148

	)

156 
	#SYS_∆m_sysˇŒ
 154

	)

157 
	#SYS_nfssvc
 155

	)

161 
	#SYS_lgëfh
 160

	)

162 
	#SYS_gëfh
 161

	)

166 
	#SYS_syßrch
 165

	)

167 
	#SYS_π¥io
 166

	)

168 
	#SYS_£msys
 169

	)

169 
	#SYS_msgsys
 170

	)

170 
	#SYS_shmsys
 171

	)

173 
	#SYS_£tfib
 175

	)

174 
	#SYS_¡p_adjtime
 176

	)

175 
	#SYS_£tgid
 181

	)

176 
	#SYS_£ãgid
 182

	)

177 
	#SYS_£ãuid
 183

	)

182 
	#SYS_‰ìbsd11_°©
 188

	)

183 
	#SYS_‰ìbsd11_f°©
 189

	)

184 
	#SYS_‰ìbsd11_l°©
 190

	)

185 
	#SYS_∑thc⁄f
 191

	)

186 
	#SYS_Â©hc⁄f
 192

	)

187 
	#SYS_gëæimô
 194

	)

188 
	#SYS_£ålimô
 195

	)

189 
	#SYS_‰ìbsd11_gëdúíåõs
 196

	)

191 
	#SYS___sysˇŒ
 198

	)

195 
	#SYS___sys˘l
 202

	)

196 
	#SYS_mlock
 203

	)

197 
	#SYS_mu∆ock
 204

	)

198 
	#SYS_undñëe
 205

	)

199 
	#SYS_futimes
 206

	)

200 
	#SYS_gëpgid
 207

	)

201 
	#SYS_pﬁl
 209

	)

202 
	#SYS_‰ìbsd7___£m˘l
 220

	)

203 
	#SYS_£mgë
 221

	)

204 
	#SYS_£m›
 222

	)

206 
	#SYS_‰ìbsd7_msg˘l
 224

	)

207 
	#SYS_msggë
 225

	)

208 
	#SYS_msg¢d
 226

	)

209 
	#SYS_msgrcv
 227

	)

210 
	#SYS_shm©
 228

	)

211 
	#SYS_‰ìbsd7_shm˘l
 229

	)

212 
	#SYS_shmdt
 230

	)

213 
	#SYS_shmgë
 231

	)

214 
	#SYS_˛ock_gëtime
 232

	)

215 
	#SYS_˛ock_£âime
 233

	)

216 
	#SYS_˛ock_gëªs
 234

	)

217 
	#SYS_ktimî_¸óã
 235

	)

218 
	#SYS_ktimî_dñëe
 236

	)

219 
	#SYS_ktimî_£âime
 237

	)

220 
	#SYS_ktimî_gëtime
 238

	)

221 
	#SYS_ktimî_gëovîrun
 239

	)

222 
	#SYS_«no¶ìp
 240

	)

223 
	#SYS_ff˛ock_gëcou¡î
 241

	)

224 
	#SYS_ff˛ock_£ã°im©e
 242

	)

225 
	#SYS_ff˛ock_gëe°im©e
 243

	)

226 
	#SYS_˛ock_«no¶ìp
 244

	)

227 
	#SYS_˛ock_gë˝u˛ockid2
 247

	)

228 
	#SYS_¡p_gëtime
 248

	)

229 
	#SYS_möhîô
 250

	)

230 
	#SYS_rf‹k
 251

	)

232 
	#SYS_is£tugid
 253

	)

233 
	#SYS_lchown
 254

	)

234 
	#SYS_aio_ªad
 255

	)

235 
	#SYS_aio_wrôe
 256

	)

236 
	#SYS_lio_li°io
 257

	)

237 
	#SYS_‰ìbsd11_gëdíts
 272

	)

238 
	#SYS_lchmod
 274

	)

240 
	#SYS_lutimes
 276

	)

242 
	#SYS_‰ìbsd11_n°©
 278

	)

243 
	#SYS_‰ìbsd11_nf°©
 279

	)

244 
	#SYS_‰ìbsd11_∆°©
 280

	)

245 
	#SYS_¥ódv
 289

	)

246 
	#SYS_pwrôev
 290

	)

248 
	#SYS_fh›í
 298

	)

249 
	#SYS_‰ìbsd11_fh°©
 299

	)

250 
	#SYS_mod√xt
 300

	)

251 
	#SYS_mod°©
 301

	)

252 
	#SYS_mod‚ext
 302

	)

253 
	#SYS_modföd
 303

	)

254 
	#SYS_kldlﬂd
 304

	)

255 
	#SYS_kldu∆ﬂd
 305

	)

256 
	#SYS_kldföd
 306

	)

257 
	#SYS_kld√xt
 307

	)

258 
	#SYS_kld°©
 308

	)

259 
	#SYS_kldfú°mod
 309

	)

260 
	#SYS_gësid
 310

	)

261 
	#SYS_£åesuid
 311

	)

262 
	#SYS_£åesgid
 312

	)

264 
	#SYS_aio_ªtu∫
 314

	)

265 
	#SYS_aio_su•íd
 315

	)

266 
	#SYS_aio_ˇn˚l
 316

	)

267 
	#SYS_aio_îr‹
 317

	)

271 
	#SYS_yõld
 321

	)

274 
	#SYS_mlockÆl
 324

	)

275 
	#SYS_mu∆ockÆl
 325

	)

276 
	#SYS___gëcwd
 326

	)

277 
	#SYS_sched_£ç¨am
 327

	)

278 
	#SYS_sched_gë∑øm
 328

	)

279 
	#SYS_sched_£tscheduÀr
 329

	)

280 
	#SYS_sched_gëscheduÀr
 330

	)

281 
	#SYS_sched_yõld
 331

	)

282 
	#SYS_sched_gë_¥i‹ôy_max
 332

	)

283 
	#SYS_sched_gë_¥i‹ôy_mö
 333

	)

284 
	#SYS_sched_º_gë_öãrvÆ
 334

	)

285 
	#SYS_uåa˚
 335

	)

287 
	#SYS_kldsym
 337

	)

288 
	#SYS_jaû
 338

	)

289 
	#SYS_¬pfs_sysˇŒ
 339

	)

290 
	#SYS_sig¥ocmask
 340

	)

291 
	#SYS_sigsu•íd
 341

	)

293 
	#SYS_sig≥ndög
 343

	)

295 
	#SYS_sigtimedwaô
 345

	)

296 
	#SYS_sigwaôöfo
 346

	)

297 
	#SYS___a˛_gë_fûe
 347

	)

298 
	#SYS___a˛_£t_fûe
 348

	)

299 
	#SYS___a˛_gë_fd
 349

	)

300 
	#SYS___a˛_£t_fd
 350

	)

301 
	#SYS___a˛_dñëe_fûe
 351

	)

302 
	#SYS___a˛_dñëe_fd
 352

	)

303 
	#SYS___a˛_a˛check_fûe
 353

	)

304 
	#SYS___a˛_a˛check_fd
 354

	)

305 
	#SYS_exèâr˘l
 355

	)

306 
	#SYS_exèâr_£t_fûe
 356

	)

307 
	#SYS_exèâr_gë_fûe
 357

	)

308 
	#SYS_exèâr_dñëe_fûe
 358

	)

309 
	#SYS_aio_waôcom∂ëe
 359

	)

310 
	#SYS_gëªsuid
 360

	)

311 
	#SYS_gëªsgid
 361

	)

312 
	#SYS_kqueue
 362

	)

313 
	#SYS_‰ìbsd11_kevít
 363

	)

320 
	#SYS_exèâr_£t_fd
 371

	)

321 
	#SYS_exèâr_gë_fd
 372

	)

322 
	#SYS_exèâr_dñëe_fd
 373

	)

323 
	#SYS___£tugid
 374

	)

325 
	#SYS_óc˚ss
 376

	)

326 
	#SYS_afs3_sysˇŒ
 377

	)

327 
	#SYS_nmou¡
 378

	)

333 
	#SYS___mac_gë_¥oc
 384

	)

334 
	#SYS___mac_£t_¥oc
 385

	)

335 
	#SYS___mac_gë_fd
 386

	)

336 
	#SYS___mac_gë_fûe
 387

	)

337 
	#SYS___mac_£t_fd
 388

	)

338 
	#SYS___mac_£t_fûe
 389

	)

339 
	#SYS_kív
 390

	)

340 
	#SYS_lchÊags
 391

	)

341 
	#SYS_uuidgí
 392

	)

342 
	#SYS_£ndfûe
 393

	)

343 
	#SYS_mac_sysˇŒ
 394

	)

344 
	#SYS_‰ìbsd11_gëfs°©
 395

	)

345 
	#SYS_‰ìbsd11_°©fs
 396

	)

346 
	#SYS_‰ìbsd11_f°©fs
 397

	)

347 
	#SYS_‰ìbsd11_fh°©fs
 398

	)

348 
	#SYS_k£m_˛o£
 400

	)

349 
	#SYS_k£m_po°
 401

	)

350 
	#SYS_k£m_waô
 402

	)

351 
	#SYS_k£m_åywaô
 403

	)

352 
	#SYS_k£m_öô
 404

	)

353 
	#SYS_k£m_›í
 405

	)

354 
	#SYS_k£m_u∆ök
 406

	)

355 
	#SYS_k£m_gëvÆue
 407

	)

356 
	#SYS_k£m_de°roy
 408

	)

357 
	#SYS___mac_gë_pid
 409

	)

358 
	#SYS___mac_gë_lök
 410

	)

359 
	#SYS___mac_£t_lök
 411

	)

360 
	#SYS_exèâr_£t_lök
 412

	)

361 
	#SYS_exèâr_gë_lök
 413

	)

362 
	#SYS_exèâr_dñëe_lök
 414

	)

363 
	#SYS___mac_execve
 415

	)

364 
	#SYS_siga˘i⁄
 416

	)

365 
	#SYS_sigªtu∫
 417

	)

366 
	#SYS_gëc⁄ãxt
 421

	)

367 
	#SYS_£tc⁄ãxt
 422

	)

368 
	#SYS_sw≠c⁄ãxt
 423

	)

369 
	#SYS_sw≠off
 424

	)

370 
	#SYS___a˛_gë_lök
 425

	)

371 
	#SYS___a˛_£t_lök
 426

	)

372 
	#SYS___a˛_dñëe_lök
 427

	)

373 
	#SYS___a˛_a˛check_lök
 428

	)

374 
	#SYS_sigwaô
 429

	)

375 
	#SYS_thr_¸óã
 430

	)

376 
	#SYS_thr_exô
 431

	)

377 
	#SYS_thr_£lf
 432

	)

378 
	#SYS_thr_kûl
 433

	)

379 
	#SYS_jaû_©èch
 436

	)

380 
	#SYS_exèâr_li°_fd
 437

	)

381 
	#SYS_exèâr_li°_fûe
 438

	)

382 
	#SYS_exèâr_li°_lök
 439

	)

384 
	#SYS_k£m_timedwaô
 441

	)

385 
	#SYS_thr_su•íd
 442

	)

386 
	#SYS_thr_wake
 443

	)

387 
	#SYS_kldu∆ﬂdf
 444

	)

388 
	#SYS_audô
 445

	)

389 
	#SYS_audô⁄
 446

	)

390 
	#SYS_gëauid
 447

	)

391 
	#SYS_£èuid
 448

	)

392 
	#SYS_gëaudô
 449

	)

393 
	#SYS_£èudô
 450

	)

394 
	#SYS_gëaudô_addr
 451

	)

395 
	#SYS_£èudô_addr
 452

	)

396 
	#SYS_audô˘l
 453

	)

397 
	#SYS__umtx_›
 454

	)

398 
	#SYS_thr_√w
 455

	)

399 
	#SYS_sigqueue
 456

	)

400 
	#SYS_kmq_›í
 457

	)

401 
	#SYS_kmq_£èâr
 458

	)

402 
	#SYS_kmq_timedª˚ive
 459

	)

403 
	#SYS_kmq_timed£nd
 460

	)

404 
	#SYS_kmq_nŸify
 461

	)

405 
	#SYS_kmq_u∆ök
 462

	)

406 
	#SYS_ab‹t2
 463

	)

407 
	#SYS_thr_£t_«me
 464

	)

408 
	#SYS_aio_fsync
 465

	)

409 
	#SYS_π¥io_thªad
 466

	)

410 
	#SYS_s˘p_≥ñoff
 471

	)

411 
	#SYS_s˘p_gíîic_£ndmsg
 472

	)

412 
	#SYS_s˘p_gíîic_£ndmsg_iov
 473

	)

413 
	#SYS_s˘p_gíîic_ªcvmsg
 474

	)

414 
	#SYS_¥ód
 475

	)

415 
	#SYS_pwrôe
 476

	)

416 
	#SYS_mm≠
 477

	)

417 
	#SYS_l£ek
 478

	)

418 
	#SYS_åunˇã
 479

	)

419 
	#SYS_·runˇã
 480

	)

420 
	#SYS_thr_kûl2
 481

	)

421 
	#SYS_shm_›í
 482

	)

422 
	#SYS_shm_u∆ök
 483

	)

423 
	#SYS_˝u£t
 484

	)

424 
	#SYS_˝u£t_£tid
 485

	)

425 
	#SYS_˝u£t_gëid
 486

	)

426 
	#SYS_˝u£t_gëafföôy
 487

	)

427 
	#SYS_˝u£t_£èfföôy
 488

	)

428 
	#SYS_Ác˚sßt
 489

	)

429 
	#SYS_fchmod©
 490

	)

430 
	#SYS_fchow«t
 491

	)

431 
	#SYS_„xecve
 492

	)

432 
	#SYS_‰ìbsd11_f°©©
 493

	)

433 
	#SYS_futimeßt
 494

	)

434 
	#SYS_lök©
 495

	)

435 
	#SYS_mkdú©
 496

	)

436 
	#SYS_mkfifﬂt
 497

	)

437 
	#SYS_‰ìbsd11_mknod©
 498

	)

438 
	#SYS_›í©
 499

	)

439 
	#SYS_ªadlök©
 500

	)

440 
	#SYS_ª«mót
 501

	)

441 
	#SYS_symlök©
 502

	)

442 
	#SYS_u∆ök©
 503

	)

443 
	#SYS_posix_›í±
 504

	)

444 
	#SYS_gssd_sysˇŒ
 505

	)

445 
	#SYS_jaû_gë
 506

	)

446 
	#SYS_jaû_£t
 507

	)

447 
	#SYS_jaû_ªmove
 508

	)

448 
	#SYS_˛o£‰om
 509

	)

449 
	#SYS___£m˘l
 510

	)

450 
	#SYS_msg˘l
 511

	)

451 
	#SYS_shm˘l
 512

	)

452 
	#SYS_Õ©hc⁄f
 513

	)

454 
	#SYS___ˇp_rights_gë
 515

	)

455 
	#SYS_ˇp_íãr
 516

	)

456 
	#SYS_ˇp_gëmode
 517

	)

457 
	#SYS_pdf‹k
 518

	)

458 
	#SYS_pdkûl
 519

	)

459 
	#SYS_pdgëpid
 520

	)

460 
	#SYS_p£À˘
 522

	)

461 
	#SYS_gëlogö˛ass
 523

	)

462 
	#SYS_£éogö˛ass
 524

	)

463 
	#SYS_r˘l_gë_øc˘
 525

	)

464 
	#SYS_r˘l_gë_ruÀs
 526

	)

465 
	#SYS_r˘l_gë_limôs
 527

	)

466 
	#SYS_r˘l_add_ruÀ
 528

	)

467 
	#SYS_r˘l_ªmove_ruÀ
 529

	)

468 
	#SYS_posix_ÁŒoˇã
 530

	)

469 
	#SYS_posix_Ádvi£
 531

	)

470 
	#SYS_waô6
 532

	)

471 
	#SYS_ˇp_rights_limô
 533

	)

472 
	#SYS_ˇp_io˘ls_limô
 534

	)

473 
	#SYS_ˇp_io˘ls_gë
 535

	)

474 
	#SYS_ˇp_f˙és_limô
 536

	)

475 
	#SYS_ˇp_f˙és_gë
 537

	)

476 
	#SYS_böd©
 538

	)

477 
	#SYS_c⁄√˘©
 539

	)

478 
	#SYS_chÊagßt
 540

	)

479 
	#SYS_ac˚±4
 541

	)

480 
	#SYS_pùe2
 542

	)

481 
	#SYS_aio_mlock
 543

	)

482 
	#SYS_¥oc˘l
 544

	)

483 
	#SYS_µﬁl
 545

	)

484 
	#SYS_futimís
 546

	)

485 
	#SYS_utimíßt
 547

	)

488 
	#SYS_fd©async
 550

	)

489 
	#SYS_f°©
 551

	)

490 
	#SYS_f°©©
 552

	)

491 
	#SYS_fh°©
 553

	)

492 
	#SYS_gëdúíåõs
 554

	)

493 
	#SYS_°©fs
 555

	)

494 
	#SYS_f°©fs
 556

	)

495 
	#SYS_gëfs°©
 557

	)

496 
	#SYS_fh°©fs
 558

	)

497 
	#SYS_mknod©
 559

	)

498 
	#SYS_kevít
 560

	)

499 
	#SYS_˝u£t_gëdomaö
 561

	)

500 
	#SYS_˝u£t_£tdomaö
 562

	)

501 
	#SYS_gëøndom
 563

	)

502 
	#SYS_MAXSYSCALL
 564

	)

	@/usr/include/sys/sysctl.h

38 #i‚de‡
_SYS_SYSCTL_H_


39 
	#_SYS_SYSCTL_H_


	)

41 #ifde‡
_KERNEL


42 
	~<sys/queue.h
>

45 
	gthªad
;

55 
	#CTL_MAXNAME
 24

	)

64 
	s˘ ame
 {

65 *
	m˘l_«me
;

66 
	m˘l_ty≥
;

69 
	#CTLTYPE
 0x‡

	)

70 
	#CTLTYPE_NODE
 1

	)

71 
	#CTLTYPE_INT
 2

	)

72 
	#CTLTYPE_STRING
 3

	)

73 
	#CTLTYPE_S64
 4

	)

74 
	#CTLTYPE_OPAQUE
 5

	)

75 
	#CTLTYPE_STRUCT
 
CTLTYPE_OPAQUE


	)

76 
	#CTLTYPE_UINT
 6

	)

77 
	#CTLTYPE_LONG
 7

	)

78 
	#CTLTYPE_ULONG
 8

	)

79 
	#CTLTYPE_U64
 9

	)

80 
	#CTLTYPE_U8
 0x®

	)

81 
	#CTLTYPE_U16
 0xb

	)

82 
	#CTLTYPE_S8
 0x¯

	)

83 
	#CTLTYPE_S16
 0xd

	)

84 
	#CTLTYPE_S32
 0xê

	)

85 
	#CTLTYPE_U32
 0x‡

	)

87 
	#CTLFLAG_RD
 0x80000000

	)

88 
	#CTLFLAG_WR
 0x40000000

	)

89 
	#CTLFLAG_RW
 (
CTLFLAG_RD
|
CTLFLAG_WR
)

	)

90 
	#CTLFLAG_DORMANT
 0x20000000

	)

91 
	#CTLFLAG_ANYBODY
 0x10000000

	)

92 
	#CTLFLAG_SECURE
 0x08000000

	)

93 
	#CTLFLAG_PRISON
 0x04000000

	)

94 
	#CTLFLAG_DYN
 0x02000000

	)

95 
	#CTLFLAG_SKIP
 0x01000000

	)

96 
	#CTLMASK_SECURE
 0x00F00000

	)

97 
	#CTLFLAG_TUN
 0x00080000

	)

98 
	#CTLFLAG_RDTUN
 (
CTLFLAG_RD
|
CTLFLAG_TUN
)

	)

99 
	#CTLFLAG_RWTUN
 (
CTLFLAG_RW
|
CTLFLAG_TUN
)

	)

100 
	#CTLFLAG_MPSAFE
 0x00040000

	)

101 
	#CTLFLAG_VNET
 0x00020000

	)

102 
	#CTLFLAG_DYING
 0x00010000

	)

103 
	#CTLFLAG_CAPRD
 0x00008000

	)

104 
	#CTLFLAG_CAPWR
 0x00004000

	)

105 
	#CTLFLAG_STATS
 0x00002000

	)

106 
	#CTLFLAG_NOFETCH
 0x00001000

	)

107 
	#CTLFLAG_CAPRW
 (
CTLFLAG_CAPRD
|
CTLFLAG_CAPWR
)

	)

114 
	#CTLSHIFT_SECURE
 20

	)

115 
	#CTLFLAG_SECURE1
 (
CTLFLAG_SECURE
 | (0 << 
CTLSHIFT_SECURE
))

	)

116 
	#CTLFLAG_SECURE2
 (
CTLFLAG_SECURE
 | (1 << 
CTLSHIFT_SECURE
))

	)

117 
	#CTLFLAG_SECURE3
 (
CTLFLAG_SECURE
 | (2 << 
CTLSHIFT_SECURE
))

	)

126 
	#OID_AUTO
 (-1)

	)

132 
	#CTL_AUTO_START
 0x100

	)

134 #ifde‡
_KERNEL


135 
	~<sys/lökî_£t.h
>

137 #ifde‡
KLD_MODULE


139 
	#SYSCTL_CT_ASSERT_MASK
 
CTLTYPE


	)

141 
	#SYSCTL_CT_ASSERT_MASK
 0

	)

144 
	#SYSCTL_HANDLER_ARGS
 
sys˘l_oid
 *
oidp
, *
¨g1
, \

145 
ötmax_t
 
¨g2
, 
sys˘l_ªq
 *
ªq


	)

148 
	#REQ_UNWIRED
 1

	)

149 
	#REQ_WIRED
 2

	)

152 #i‡
deföed
(
__Ørch64__
Ë|| deföed(
__amd64__
Ë|| deföed(
__powîpc64__
) ||\

153 (
deföed
(
__mùs__
Ë&& 
	$deföed
(
__mùs_n64
))

154 
	#SCTL_MASK32
 1

	)

161 
	ssys˘l_ªq
 {

162 
thªad
 *
td
;

163 
lock
;

164 *
ﬁd±r
;

165 
size_t
 
ﬁdÀn
;

166 
size_t
 
ﬁdidx
;

167 (*
ﬁdfunc
)(
sys˘l_ªq
 *, c⁄° *, 
size_t
);

168 *
√w±r
;

169 
size_t
 
√wÀn
;

170 
size_t
 
√widx
;

171 (*
√wfunc
)(
sys˘l_ªq
 *, *, 
size_t
);

172 
size_t
 
vÆidÀn
;

173 
Êags
;

176 
	`SLIST_HEAD
(
sys˘l_oid_li°
, 
sys˘l_oid
);

182 
	ssys˘l_oid
 {

183 
sys˘l_oid_li°
 
oid_chûdªn
;

184 
sys˘l_oid_li°
 *
oid_∑ª¡
;

185 
	`SLIST_ENTRY
(
sys˘l_oid
Ë
oid_lök
;

186 
oid_numbî
;

187 
u_öt
 
oid_köd
;

188 *
oid_¨g1
;

189 
ötmax_t
 
oid_¨g2
;

190 c⁄° *
oid_«me
;

191 (*
oid_h™dÀr
)(
SYSCTL_HANDLER_ARGS
);

192 c⁄° *
oid_fmt
;

193 
oid_ªf˙t
;

194 
u_öt
 
oid_ru¬ög
;

195 c⁄° *
oid_des¸
;

196 c⁄° *
oid_œbñ
;

199 
	#SYSCTL_IN
(
r
, 
p
, 
l
Ë‘->
√wfunc
)‘,Ö,Ü)

	)

200 
	#SYSCTL_OUT
(
r
, 
p
, 
l
Ë‘->
ﬁdfunc
)‘,Ö,Ü)

	)

201 
	#SYSCTL_OUT_STR
(
r
, 
p
Ë‘->
ﬁdfunc
)‘,Ö, 
	`°æí
’Ë+ 1)

	)

203 
	`sys˘l_h™dÀ_boﬁ
(
SYSCTL_HANDLER_ARGS
);

204 
	`sys˘l_h™dÀ_8
(
SYSCTL_HANDLER_ARGS
);

205 
	`sys˘l_h™dÀ_16
(
SYSCTL_HANDLER_ARGS
);

206 
	`sys˘l_h™dÀ_32
(
SYSCTL_HANDLER_ARGS
);

207 
	`sys˘l_h™dÀ_64
(
SYSCTL_HANDLER_ARGS
);

208 
	`sys˘l_h™dÀ_öt
(
SYSCTL_HANDLER_ARGS
);

209 
	`sys˘l_m£c_to_ticks
(
SYSCTL_HANDLER_ARGS
);

210 
	`sys˘l_h™dÀ_l⁄g
(
SYSCTL_HANDLER_ARGS
);

211 
	`sys˘l_h™dÀ_°rög
(
SYSCTL_HANDLER_ARGS
);

212 
	`sys˘l_h™dÀ_›aque
(
SYSCTL_HANDLER_ARGS
);

213 
	`sys˘l_h™dÀ_cou¡î_u64
(
SYSCTL_HANDLER_ARGS
);

214 
	`sys˘l_h™dÀ_cou¡î_u64_¨øy
(
SYSCTL_HANDLER_ARGS
);

216 
	`sys˘l_h™dÀ_uma_z⁄e_max
(
SYSCTL_HANDLER_ARGS
);

217 
	`sys˘l_h™dÀ_uma_z⁄e_cur
(
SYSCTL_HANDLER_ARGS
);

219 
	`sys˘l_dp˝u_öt
(
SYSCTL_HANDLER_ARGS
);

220 
	`sys˘l_dp˝u_l⁄g
(
SYSCTL_HANDLER_ARGS
);

221 
	`sys˘l_dp˝u_quad
(
SYSCTL_HANDLER_ARGS
);

226 
	`sys˘l_ªgi°î_oid
(
sys˘l_oid
 *
oidp
);

227 
	`sys˘l_ªgi°î_dißbÀd_oid
(
sys˘l_oid
 *
oidp
);

228 
	`sys˘l_íabÀ_oid
(
sys˘l_oid
 *
oidp
);

229 
	`sys˘l_uƒegi°î_oid
(
sys˘l_oid
 *
oidp
);

232 
	#SYSCTL_DECL
(
«me
) \

233 
sys˘l_oid
 
sys˘l__
##
«me


	)

236 
	#SYSCTL_CHILDREN
(
oid_±r
Ë(&(oid_±r)->
oid_chûdªn
)

	)

237 
	#SYSCTL_PARENT
(
oid_±r
) \

238 (((
oid_±r
)->
oid_∑ª¡
 !&
sys˘l__chûdªn
) ? \

239 
	`__c⁄èöîof
((
oid_±r
)->
oid_∑ª¡
, 
sys˘l_oid
, \

240 
oid_chûdªn
Ë: (
sys˘l_oid
 *)
NULL
)

	)

241 
	#SYSCTL_STATIC_CHILDREN
(
oid_«me
Ë(&
sys˘l__
##oid_«me.
oid_chûdªn
)

	)

246 
	ssys˘l_˘x_íåy
 {

247 
sys˘l_oid
 *
íåy
;

248 
	`TAILQ_ENTRY
(
sys˘l_˘x_íåy
Ë
lök
;

251 
	`TAILQ_HEAD
(
sys˘l_˘x_li°
, 
sys˘l_˘x_íåy
);

253 
	#SYSCTL_NODE_CHILDREN
(
∑ª¡
, 
«me
) \

254 
sys˘l__
##
∑ª¡
##
_
##
«me
.
oid_chûdªn


	)

256 #i‚de‡
NO_SYSCTL_DESCR


257 
	#__DESCR
(
d
Ë
	)
d

259 
	#__DESCR
(
d
Ë""

	)

263 
	#SYSCTL_OID_RAW
(
id
, 
∑ª¡_chûd_hód
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
, 
œbñ
) \

264 
sys˘l_oid
 
id
 = { \

265 .
oid_∑ª¡
 = (
∑ª¡_chûd_hód
), \

266 .
oid_chûdªn
 = 
	`SLIST_HEAD_INITIALIZER
(&
id
.oid_children), \

267 .
oid_numbî
 = (
nbr
), \

268 .
oid_köd
 = (
köd
), \

269 .
oid_¨g1
 = (
a1
), \

270 .
oid_¨g2
 = (
a2
), \

271 .
oid_«me
 = (
«me
), \

272 .
oid_h™dÀr
 = (
h™dÀr
), \

273 .
oid_fmt
 = (
fmt
), \

274 .
oid_des¸
 = 
	`__DESCR
(
des¸
), \

275 .
oid_œbñ
 = (
œbñ
), \

276 
	}
}; \

277 
	`DATA_SET
(
sys˘l_£t
, 
id
)

	)

280 
	#SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
) \

281 
	`SYSCTL_OID_WITH_LABEL
(
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, \

282 
h™dÀr
, 
fmt
, 
des¸
, 
NULL
)

	)

284 
	#SYSCTL_OID_WITH_LABEL
(
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
, 
œbñ
) \

285 
	`SYSCTL_OID_RAW
(
sys˘l__
##
∑ª¡
##
_
##
«me
, \

286 
	`SYSCTL_CHILDREN
(&
sys˘l__
##
∑ª¡
), \

287 
nbr
, #«me, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
, 
œbñ
)

	)

290 
	#SYSCTL_OID_GLOBAL
(
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
, 
œbñ
) \

291 
	`SYSCTL_OID_RAW
(
sys˘l__
##
∑ª¡
##
_
##
«me
, \

292 
	`SYSCTL_CHILDREN
(&
sys˘l__
##
∑ª¡
), \

293 
nbr
, #«me, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
, 
œbñ
)

	)

295 
	#SYSCTL_ADD_OID
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
des¸
) \

296 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
köd
, 
a1
, 
a2
, 
h™dÀr
, 
fmt
, 
	`__DESCR
(
des¸
), 
NULL
)

	)

299 
	#SYSCTL_ROOT_NODE
(
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
) \

300 
	`SYSCTL_OID_RAW
(
sys˘l___
##
«me
, &
sys˘l__chûdªn
, \

301 
nbr
, #«me, 
CTLTYPE_NODE
|(
ac˚ss
), 
NULL
, 0, \

302 
h™dÀr
, "N", 
des¸
, 
NULL
); \

303 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

304 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_NODE
)

	)

307 
	#SYSCTL_NODE
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
) \

308 
	`SYSCTL_NODE_WITH_LABEL
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
, 
NULL
)

	)

310 
	#SYSCTL_NODE_WITH_LABEL
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
, 
œbñ
) \

311 
	`SYSCTL_OID_GLOBAL
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_NODE
|(
ac˚ss
), \

312 
NULL
, 0, 
h™dÀr
, "N", 
des¸
, 
œbñ
); \

313 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

314 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_NODE
)

	)

316 
	#SYSCTL_ADD_NODE
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
) \

317 
	`SYSCTL_ADD_NODE_WITH_LABEL
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, \

318 
h™dÀr
, 
des¸
, 
NULL
)

	)

320 
	#SYSCTL_ADD_NODE_WITH_LABEL
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
, 
œbñ
) \

322 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

323 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_NODE
); \

324 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_NODE
|(
ac˚ss
), \

325 
NULL
, 0, 
h™dÀr
, "N", 
	`__DESCR
(
des¸
), 
œbñ
); \

326 })

	)

328 
	#SYSCTL_ADD_ROOT_NODE
(
˘x
, 
nbr
, 
«me
, 
ac˚ss
, 
h™dÀr
, 
des¸
) \

330 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

331 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_NODE
); \

332 
	`sys˘l_add_oid
(
˘x
, &
sys˘l__chûdªn
, 
nbr
, 
«me
, \

333 
CTLTYPE_NODE
|(
ac˚ss
), \

334 
NULL
, 0, 
h™dÀr
, "N", 
	`__DESCR
(
des¸
), NULL); \

335 })

	)

338 
	#SYSCTL_STRING
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
¨g
, 
Àn
, 
des¸
) \

339 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_STRING
|(
ac˚ss
), \

340 
¨g
, 
Àn
, 
sys˘l_h™dÀ_°rög
, "A", 
des¸
); \

341 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

342 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_STRING
)

	)

344 
	#SYSCTL_ADD_STRING
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
¨g
, 
Àn
, 
des¸
) \

346 *
__¨g
 = (
¨g
); \

347 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

348 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_STRING
); \

349 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_STRING
|(
ac˚ss
), \

350 
__¨g
, 
Àn
, 
sys˘l_h™dÀ_°rög
, "A", 
	`__DESCR
(
des¸
), \

351 
NULL
); \

352 })

	)

355 
	#SYSCTL_NULL_BOOL_PTR
 ((
boﬁ
 *)
NULL
)

	)

356 
	#SYSCTL_BOOL
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

357 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

358 
CTLTYPE_U8
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

359 
±r
, 
vÆ
, 
sys˘l_h™dÀ_boﬁ
, "CU", 
des¸
); \

360 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 && \

361 (
boﬁ
Ë=(*(
±r
)))

	)

363 
	#SYSCTL_ADD_BOOL
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

365 
boﬁ
 *
__±r
 = (
±r
); \

366 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0); \

367 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

368 
CTLTYPE_U8
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

369 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_boﬁ
, "CU", 
	`__DESCR
(
des¸
), \

370 
NULL
); \

371 })

	)

374 
	#SYSCTL_NULL_S8_PTR
 ((
öt8_t
 *)
NULL
)

	)

375 
	#SYSCTL_S8
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

376 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

377 
CTLTYPE_S8
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

378 
±r
, 
vÆ
, 
sys˘l_h™dÀ_8
, "C", 
des¸
); \

379 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

380 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S8
) && \

381 (
öt8_t
Ë=(*(
±r
)))

	)

383 
	#SYSCTL_ADD_S8
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

385 
öt8_t
 *
__±r
 = (
±r
); \

386 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

387 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S8
); \

388 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

389 
CTLTYPE_S8
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

390 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_8
, "C", 
	`__DESCR
(
des¸
), 
NULL
); \

391 })

	)

394 
	#SYSCTL_NULL_U8_PTR
 ((
uöt8_t
 *)
NULL
)

	)

395 
	#SYSCTL_U8
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

396 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

397 
CTLTYPE_U8
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

398 
±r
, 
vÆ
, 
sys˘l_h™dÀ_8
, "CU", 
des¸
); \

399 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

400 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U8
) && \

401 (
uöt8_t
Ë=(*(
±r
)))

	)

403 
	#SYSCTL_ADD_U8
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

405 
uöt8_t
 *
__±r
 = (
±r
); \

406 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

407 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U8
); \

408 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

409 
CTLTYPE_U8
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

410 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_8
, "CU", 
	`__DESCR
(
des¸
), 
NULL
); \

411 })

	)

414 
	#SYSCTL_NULL_S16_PTR
 ((
öt16_t
 *)
NULL
)

	)

415 
	#SYSCTL_S16
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

416 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

417 
CTLTYPE_S16
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

418 
±r
, 
vÆ
, 
sys˘l_h™dÀ_16
, "S", 
des¸
); \

419 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

420 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S16
) && \

421 (
öt16_t
Ë=(*(
±r
)))

	)

423 
	#SYSCTL_ADD_S16
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

425 
öt16_t
 *
__±r
 = (
±r
); \

426 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

427 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S16
); \

428 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

429 
CTLTYPE_S16
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

430 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_16
, "S", 
	`__DESCR
(
des¸
), 
NULL
); \

431 })

	)

434 
	#SYSCTL_NULL_U16_PTR
 ((
uöt16_t
 *)
NULL
)

	)

435 
	#SYSCTL_U16
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

436 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

437 
CTLTYPE_U16
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

438 
±r
, 
vÆ
, 
sys˘l_h™dÀ_16
, "SU", 
des¸
); \

439 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

440 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U16
) && \

441 (
uöt16_t
Ë=(*(
±r
)))

	)

443 
	#SYSCTL_ADD_U16
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

445 
uöt16_t
 *
__±r
 = (
±r
); \

446 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

447 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U16
); \

448 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

449 
CTLTYPE_U16
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

450 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_16
, "SU", 
	`__DESCR
(
des¸
), 
NULL
); \

451 })

	)

454 
	#SYSCTL_NULL_S32_PTR
 ((
öt32_t
 *)
NULL
)

	)

455 
	#SYSCTL_S32
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

456 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

457 
CTLTYPE_S32
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

458 
±r
, 
vÆ
, 
sys˘l_h™dÀ_32
, "I", 
des¸
); \

459 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

460 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S32
) && \

461 (
öt32_t
Ë=(*(
±r
)))

	)

463 
	#SYSCTL_ADD_S32
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

465 
öt32_t
 *
__±r
 = (
±r
); \

466 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

467 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S32
); \

468 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

469 
CTLTYPE_S32
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

470 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_32
, "I", 
	`__DESCR
(
des¸
), 
NULL
); \

471 })

	)

474 
	#SYSCTL_NULL_U32_PTR
 ((
uöt32_t
 *)
NULL
)

	)

475 
	#SYSCTL_U32
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

476 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

477 
CTLTYPE_U32
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

478 
±r
, 
vÆ
, 
sys˘l_h™dÀ_32
, "IU", 
des¸
); \

479 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

480 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U32
) && \

481 (
uöt32_t
Ë=(*(
±r
)))

	)

483 
	#SYSCTL_ADD_U32
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

485 
uöt32_t
 *
__±r
 = (
±r
); \

486 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

487 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U32
); \

488 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

489 
CTLTYPE_U32
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

490 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_32
, "IU", 
	`__DESCR
(
des¸
), 
NULL
); \

491 })

	)

494 
	#SYSCTL_NULL_S64_PTR
 ((
öt64_t
 *)
NULL
)

	)

495 
	#SYSCTL_S64
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

496 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

497 
CTLTYPE_S64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

498 
±r
, 
vÆ
, 
sys˘l_h™dÀ_64
, "Q", 
des¸
); \

499 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

500 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S64
) && \

501 (
öt64_t
Ë=(*(
±r
)))

	)

503 
	#SYSCTL_ADD_S64
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

505 
öt64_t
 *
__±r
 = (
±r
); \

506 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

507 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S64
); \

508 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

509 
CTLTYPE_S64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

510 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_64
, "Q", 
	`__DESCR
(
des¸
), 
NULL
); \

511 })

	)

514 
	#SYSCTL_NULL_U64_PTR
 ((
uöt64_t
 *)
NULL
)

	)

515 
	#SYSCTL_U64
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

516 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

517 
CTLTYPE_U64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

518 
±r
, 
vÆ
, 
sys˘l_h™dÀ_64
, "QU", 
des¸
); \

519 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

520 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U64
) && \

521 (
uöt64_t
Ë=(*(
±r
)))

	)

523 
	#SYSCTL_ADD_U64
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

525 
uöt64_t
 *
__±r
 = (
±r
); \

526 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

527 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U64
); \

528 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

529 
CTLTYPE_U64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

530 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_64
, "QU", 
	`__DESCR
(
des¸
), 
NULL
); \

531 })

	)

534 
	#SYSCTL_NULL_INT_PTR
 ((*)
NULL
)

	)

535 
	#SYSCTL_INT
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

536 
	`SYSCTL_INT_WITH_LABEL
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
, 
NULL
)

	)

538 
	#SYSCTL_INT_WITH_LABEL
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
, 
œbñ
) \

539 
	`SYSCTL_OID_WITH_LABEL
(
∑ª¡
, 
nbr
, 
«me
, \

540 
CTLTYPE_INT
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

541 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "I", 
des¸
, 
œbñ
); \

542 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

543 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_INT
) && \

544 (Ë=(*(
±r
)))

	)

546 
	#SYSCTL_ADD_INT
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

548 *
__±r
 = (
±r
); \

549 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

550 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_INT
); \

551 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

552 
CTLTYPE_INT
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

553 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "I", 
	`__DESCR
(
des¸
), 
NULL
); \

554 })

	)

557 
	#SYSCTL_NULL_UINT_PTR
 ((*)
NULL
)

	)

558 
	#SYSCTL_UINT
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

559 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

560 
CTLTYPE_UINT
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

561 
±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "IU", 
des¸
); \

562 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

563 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_UINT
) && \

564 (Ë=(*(
±r
)))

	)

566 
	#SYSCTL_ADD_UINT
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

568 *
__±r
 = (
±r
); \

569 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

570 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_UINT
); \

571 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

572 
CTLTYPE_UINT
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

573 
__±r
, 
vÆ
, 
sys˘l_h™dÀ_öt
, "IU", 
	`__DESCR
(
des¸
), 
NULL
); \

574 })

	)

577 
	#SYSCTL_NULL_LONG_PTR
 ((*)
NULL
)

	)

578 
	#SYSCTL_LONG
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

579 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

580 
CTLTYPE_LONG
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

581 
±r
, 
vÆ
, 
sys˘l_h™dÀ_l⁄g
, "L", 
des¸
); \

582 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

583 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_LONG
) && \

584 (Ë=(*(
±r
)))

	)

586 
	#SYSCTL_ADD_LONG
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

588 *
__±r
 = (
±r
); \

589 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

590 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_LONG
); \

591 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

592 
CTLTYPE_LONG
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

593 
__±r
, 0, 
sys˘l_h™dÀ_l⁄g
, "L", 
	`__DESCR
(
des¸
), 
NULL
); \

594 })

	)

597 
	#SYSCTL_NULL_ULONG_PTR
 ((*)
NULL
)

	)

598 
	#SYSCTL_ULONG
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

599 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

600 
CTLTYPE_ULONG
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

601 
±r
, 
vÆ
, 
sys˘l_h™dÀ_l⁄g
, "LU", 
des¸
); \

602 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

603 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_ULONG
) && \

604 (Ë=(*(
±r
)))

	)

606 
	#SYSCTL_ADD_ULONG
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

608 *
__±r
 = (
±r
); \

609 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

610 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_ULONG
); \

611 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

612 
CTLTYPE_ULONG
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

613 
__±r
, 0, 
sys˘l_h™dÀ_l⁄g
, "LU", 
	`__DESCR
(
des¸
), 
NULL
); \

614 })

	)

617 
	#SYSCTL_NULL_QUAD_PTR
 ((
öt64_t
 *)
NULL
)

	)

618 
	#SYSCTL_QUAD
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

619 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

620 
CTLTYPE_S64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

621 
±r
, 
vÆ
, 
sys˘l_h™dÀ_64
, "Q", 
des¸
); \

622 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

623 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S64
) && \

624 (
öt64_t
Ë=(*(
±r
)))

	)

626 
	#SYSCTL_ADD_QUAD
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

628 
öt64_t
 *
__±r
 = (
±r
); \

629 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

630 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_S64
); \

631 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

632 
CTLTYPE_S64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

633 
__±r
, 0, 
sys˘l_h™dÀ_64
, "Q", 
	`__DESCR
(
des¸
), 
NULL
); \

634 })

	)

636 
	#SYSCTL_NULL_UQUAD_PTR
 ((
uöt64_t
 *)
NULL
)

	)

637 
	#SYSCTL_UQUAD
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
vÆ
, 
des¸
) \

638 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

639 
CTLTYPE_U64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

640 
±r
, 
vÆ
, 
sys˘l_h™dÀ_64
, "QU", 
des¸
); \

641 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

642 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U64
) && \

643 (
uöt64_t
Ë=(*(
±r
)))

	)

645 
	#SYSCTL_ADD_UQUAD
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

647 
uöt64_t
 *
__±r
 = (
±r
); \

648 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

649 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U64
); \

650 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

651 
CTLTYPE_U64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

652 
__±r
, 0, 
sys˘l_h™dÀ_64
, "QU", 
	`__DESCR
(
des¸
), 
NULL
); \

653 })

	)

656 
	#SYSCTL_ADD_UAUTO
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

658 
sys˘l_oid
 *
__ªt
; \

659 
	`CTASSERT
(((
uöt64_t
Ë=(*(
±r
)) || \

660 (Ë=(*(
±r
))) && \

661 ((
ac˚ss
Ë& 
CTLTYPE
) == 0); \

662 i‡((
uöt64_t
Ë=(*(
±r
))) { \

663 
__ªt
 = 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

664 
CTLTYPE_U64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

665 (
±r
), 0, 
sys˘l_h™dÀ_64
, "QU", \

666 
	`__DESCR
(
des¸
), 
NULL
); \

668 
__ªt
 = 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

669 
CTLTYPE_UINT
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

670 (
±r
), 0, 
sys˘l_h™dÀ_öt
, "IU", \

671 
	`__DESCR
(
des¸
), 
NULL
); \

673 
__ªt
; \

674 })

	)

677 
	#SYSCTL_COUNTER_U64
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

678 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

679 
CTLTYPE_U64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

680 (
±r
), 0, 
sys˘l_h™dÀ_cou¡î_u64
, "QU", 
des¸
); \

681 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

682 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U64
) && \

683 (
cou¡î_u64_t
Ë=(*(
±r
)) && \

684 (
uöt64_t
Ë=(**(
±r
)))

	)

686 
	#SYSCTL_ADD_COUNTER_U64
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

688 
cou¡î_u64_t
 *
__±r
 = (
±r
); \

689 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

690 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_U64
); \

691 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

692 
CTLTYPE_U64
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

693 
__±r
, 0, 
sys˘l_h™dÀ_cou¡î_u64
, "QU", 
	`__DESCR
(
des¸
), \

694 
NULL
); \

695 })

	)

698 
	#SYSCTL_COUNTER_U64_ARRAY
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
Àn
, 
des¸
) \

699 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

700 
CTLTYPE_OPAQUE
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

701 (
±r
), (
Àn
), 
sys˘l_h™dÀ_cou¡î_u64_¨øy
, "S", 
des¸
); \

702 
	`CTASSERT
((((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

703 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_OPAQUE
) && \

704 (
cou¡î_u64_t
Ë=(*(
±r
)) && \

705 (
uöt64_t
Ë=(**(
±r
)))

	)

707 
	#SYSCTL_ADD_COUNTER_U64_ARRAY
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, \

708 
±r
, 
Àn
, 
des¸
) \

710 
cou¡î_u64_t
 *
__±r
 = (
±r
); \

711 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

712 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_OPAQUE
); \

713 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

714 
CTLTYPE_OPAQUE
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

715 
__±r
, 
Àn
, 
sys˘l_h™dÀ_cou¡î_u64_¨øy
, "S", \

716 
	`__DESCR
(
des¸
), 
NULL
); \

717 })

	)

720 
	#SYSCTL_OPAQUE
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
Àn
, 
fmt
, 
des¸
) \

721 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

722 
±r
, 
Àn
, 
sys˘l_h™dÀ_›aque
, 
fmt
, 
des¸
); \

723 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

724 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_OPAQUE
)

	)

726 
	#SYSCTL_ADD_OPAQUE
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
Àn
, 
fmt
, 
des¸
) \

728 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

729 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_OPAQUE
); \

730 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

731 
±r
, 
Àn
, 
sys˘l_h™dÀ_›aque
, 
fmt
, 
	`__DESCR
(
des¸
), 
NULL
); \

732 })

	)

735 
	#SYSCTL_STRUCT
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
ty≥
, 
des¸
) \

736 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

737 
±r
, (
ty≥
), 
sys˘l_h™dÀ_›aque
, \

738 "S," #ty≥, 
des¸
); \

739 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

740 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_OPAQUE
)

	)

742 
	#SYSCTL_ADD_STRUCT
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
ty≥
, 
des¸
) \

744 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

745 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_OPAQUE
); \

746 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
CTLTYPE_OPAQUE
|(
ac˚ss
), \

747 (
±r
), (
ty≥
), \

748 
sys˘l_h™dÀ_›aque
, "S," #ty≥, 
	`__DESCR
(
des¸
), 
NULL
); \

749 })

	)

752 
	#SYSCTL_PROC
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
¨g
, 
h™dÀr
, 
fmt
, 
des¸
) \

753 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, (
ac˚ss
), \

754 
±r
, 
¨g
, 
h™dÀr
, 
fmt
, 
des¸
); \

755 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
Ë!0)

	)

757 
	#SYSCTL_ADD_PROC
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
¨g
, 
h™dÀr
, 
fmt
, 
des¸
) \

759 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) != 0); \

760 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, (
ac˚ss
), \

761 (
±r
), (
¨g
), (
h™dÀr
), (
fmt
), 
	`__DESCR
(
des¸
), 
NULL
); \

762 })

	)

765 
	#SYSCTL_UMA_MAX
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

766 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

767 
CTLTYPE_INT
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

768 (
±r
), 0, 
sys˘l_h™dÀ_uma_z⁄e_max
, "I", 
des¸
); \

769 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

770 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_INT
)

	)

772 
	#SYSCTL_ADD_UMA_MAX
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

774 
uma_z⁄e_t
 
__±r
 = (
±r
); \

775 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

776 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_INT
); \

777 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

778 
CTLTYPE_INT
 | 
CTLFLAG_MPSAFE
 | (
ac˚ss
), \

779 
__±r
, 0, 
sys˘l_h™dÀ_uma_z⁄e_max
, "I", 
	`__DESCR
(
des¸
), \

780 
NULL
); \

781 })

	)

784 
	#SYSCTL_UMA_CUR
(
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

785 
	`SYSCTL_OID
(
∑ª¡
, 
nbr
, 
«me
, \

786 
CTLTYPE_INT
 | 
CTLFLAG_MPSAFE
 | 
CTLFLAG_RD
 | (
ac˚ss
), \

787 (
±r
), 0, 
sys˘l_h™dÀ_uma_z⁄e_cur
, "I", 
des¸
); \

788 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

789 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_INT
)

	)

791 
	#SYSCTL_ADD_UMA_CUR
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, 
ac˚ss
, 
±r
, 
des¸
) \

793 
uma_z⁄e_t
 
__±r
 = (
±r
); \

794 
	`CTASSERT
(((
ac˚ss
Ë& 
CTLTYPE
) == 0 || \

795 ((
ac˚ss
Ë& 
SYSCTL_CT_ASSERT_MASK
Ë=
CTLTYPE_INT
); \

796 
	`sys˘l_add_oid
(
˘x
, 
∑ª¡
, 
nbr
, 
«me
, \

797 
CTLTYPE_INT
 | 
CTLFLAG_MPSAFE
 | 
CTLFLAG_RD
 | (
ac˚ss
), \

798 
__±r
, 0, 
sys˘l_h™dÀ_uma_z⁄e_cur
, "I", 
	`__DESCR
(
des¸
), \

799 
NULL
); \

800 })

	)

806 
	#FEATURE
(
«me
, 
desc
) \

807 
	`SYSCTL_INT_WITH_LABEL
(
_kîn_„©uªs
, 
OID_AUTO
, 
«me
, \

808 
CTLFLAG_RD
 | 
CTLFLAG_CAPRD
, 
SYSCTL_NULL_INT_PTR
, 1, 
desc
, "„©uª")

	)

815 
	#CTL_UNSPEC
 0

	)

816 
	#CTL_KERN
 1

	)

817 
	#CTL_VM
 2

	)

818 
	#CTL_VFS
 3

	)

819 
	#CTL_NET
 4

	)

820 
	#CTL_DEBUG
 5

	)

821 
	#CTL_HW
 6

	)

822 
	#CTL_MACHDEP
 7

	)

823 
	#CTL_USER
 8

	)

824 
	#CTL_P1003_1B
 9

	)

829 
	#KERN_OSTYPE
 1

	)

830 
	#KERN_OSRELEASE
 2

	)

831 
	#KERN_OSREV
 3

	)

832 
	#KERN_VERSION
 4

	)

833 
	#KERN_MAXVNODES
 5

	)

834 
	#KERN_MAXPROC
 6

	)

835 
	#KERN_MAXFILES
 7

	)

836 
	#KERN_ARGMAX
 8

	)

837 
	#KERN_SECURELVL
 9

	)

838 
	#KERN_HOSTNAME
 10

	)

839 
	#KERN_HOSTID
 11

	)

840 
	#KERN_CLOCKRATE
 12

	)

841 
	#KERN_VNODE
 13

	)

842 
	#KERN_PROC
 14

	)

843 
	#KERN_FILE
 15

	)

844 
	#KERN_PROF
 16

	)

845 
	#KERN_POSIX1
 17

	)

846 
	#KERN_NGROUPS
 18

	)

847 
	#KERN_JOB_CONTROL
 19

	)

848 
	#KERN_SAVED_IDS
 20

	)

849 
	#KERN_BOOTTIME
 21

	)

850 
	#KERN_NISDOMAINNAME
 22

	)

851 
	#KERN_UPDATEINTERVAL
 23

	)

852 
	#KERN_OSRELDATE
 24

	)

853 
	#KERN_NTP_PLL
 25

	)

854 
	#KERN_BOOTFILE
 26

	)

855 
	#KERN_MAXFILESPERPROC
 27

	)

856 
	#KERN_MAXPROCPERUID
 28

	)

857 
	#KERN_DUMPDEV
 29

	)

858 
	#KERN_IPC
 30

	)

859 
	#KERN_DUMMY
 31

	)

860 
	#KERN_PS_STRINGS
 32

	)

861 
	#KERN_USRSTACK
 33

	)

862 
	#KERN_LOGSIGEXIT
 34

	)

863 
	#KERN_IOV_MAX
 35

	)

864 
	#KERN_HOSTUUID
 36

	)

865 
	#KERN_ARND
 37

	)

866 
	#KERN_MAXPHYS
 38

	)

870 
	#KERN_PROC_ALL
 0

	)

871 
	#KERN_PROC_PID
 1

	)

872 
	#KERN_PROC_PGRP
 2

	)

873 
	#KERN_PROC_SESSION
 3

	)

874 
	#KERN_PROC_TTY
 4

	)

875 
	#KERN_PROC_UID
 5

	)

876 
	#KERN_PROC_RUID
 6

	)

877 
	#KERN_PROC_ARGS
 7

	)

878 
	#KERN_PROC_PROC
 8

	)

879 
	#KERN_PROC_SV_NAME
 9

	)

880 
	#KERN_PROC_RGID
 10

	)

881 
	#KERN_PROC_GID
 11

	)

882 
	#KERN_PROC_PATHNAME
 12

	)

883 
	#KERN_PROC_OVMMAP
 13

	)

884 
	#KERN_PROC_OFILEDESC
 14

	)

885 
	#KERN_PROC_KSTACK
 15

	)

886 
	#KERN_PROC_INC_THREAD
 0x10

	)

891 
	#KERN_PROC_VMMAP
 32

	)

892 
	#KERN_PROC_FILEDESC
 33

	)

893 
	#KERN_PROC_GROUPS
 34

	)

894 
	#KERN_PROC_ENV
 35

	)

895 
	#KERN_PROC_AUXV
 36

	)

896 
	#KERN_PROC_RLIMIT
 37

	)

897 
	#KERN_PROC_PS_STRINGS
 38

	)

898 
	#KERN_PROC_UMASK
 39

	)

899 
	#KERN_PROC_OSREL
 40

	)

900 
	#KERN_PROC_SIGTRAMP
 41

	)

901 
	#KERN_PROC_CWD
 42

	)

902 
	#KERN_PROC_NFDS
 43

	)

907 
	#KIPC_MAXSOCKBUF
 1

	)

908 
	#KIPC_SOCKBUF_WASTE
 2

	)

909 
	#KIPC_SOMAXCONN
 3

	)

910 
	#KIPC_MAX_LINKHDR
 4

	)

911 
	#KIPC_MAX_PROTOHDR
 5

	)

912 
	#KIPC_MAX_HDR
 6

	)

913 
	#KIPC_MAX_DATALEN
 7

	)

918 
	#HW_MACHINE
 1

	)

919 
	#HW_MODEL
 2

	)

920 
	#HW_NCPU
 3

	)

921 
	#HW_BYTEORDER
 4

	)

922 
	#HW_PHYSMEM
 5

	)

923 
	#HW_USERMEM
 6

	)

924 
	#HW_PAGESIZE
 7

	)

925 
	#HW_DISKNAMES
 8

	)

926 
	#HW_DISKSTATS
 9

	)

927 
	#HW_FLOATINGPT
 10

	)

928 
	#HW_MACHINE_ARCH
 11

	)

929 
	#HW_REALMEM
 12

	)

934 
	#USER_CS_PATH
 1

	)

935 
	#USER_BC_BASE_MAX
 2

	)

936 
	#USER_BC_DIM_MAX
 3

	)

937 
	#USER_BC_SCALE_MAX
 4

	)

938 
	#USER_BC_STRING_MAX
 5

	)

939 
	#USER_COLL_WEIGHTS_MAX
 6

	)

940 
	#USER_EXPR_NEST_MAX
 7

	)

941 
	#USER_LINE_MAX
 8

	)

942 
	#USER_RE_DUP_MAX
 9

	)

943 
	#USER_POSIX2_VERSION
 10

	)

944 
	#USER_POSIX2_C_BIND
 11

	)

945 
	#USER_POSIX2_C_DEV
 12

	)

946 
	#USER_POSIX2_CHAR_TERM
 13

	)

947 
	#USER_POSIX2_FORT_DEV
 14

	)

948 
	#USER_POSIX2_FORT_RUN
 15

	)

949 
	#USER_POSIX2_LOCALEDEF
 16

	)

950 
	#USER_POSIX2_SW_DEV
 17

	)

951 
	#USER_POSIX2_UPE
 18

	)

952 
	#USER_STREAM_MAX
 19

	)

953 
	#USER_TZNAME_MAX
 20

	)

955 
	#CTL_P1003_1B_ASYNCHRONOUS_IO
 1

	)

956 
	#CTL_P1003_1B_MAPPED_FILES
 2

	)

957 
	#CTL_P1003_1B_MEMLOCK
 3

	)

958 
	#CTL_P1003_1B_MEMLOCK_RANGE
 4

	)

959 
	#CTL_P1003_1B_MEMORY_PROTECTION
 5

	)

960 
	#CTL_P1003_1B_MESSAGE_PASSING
 6

	)

961 
	#CTL_P1003_1B_PRIORITIZED_IO
 7

	)

962 
	#CTL_P1003_1B_PRIORITY_SCHEDULING
 8

	)

963 
	#CTL_P1003_1B_REALTIME_SIGNALS
 9

	)

964 
	#CTL_P1003_1B_SEMAPHORES
 10

	)

965 
	#CTL_P1003_1B_FSYNC
 11

	)

966 
	#CTL_P1003_1B_SHARED_MEMORY_OBJECTS
 12

	)

967 
	#CTL_P1003_1B_SYNCHRONIZED_IO
 13

	)

968 
	#CTL_P1003_1B_TIMERS
 14

	)

969 
	#CTL_P1003_1B_AIO_LISTIO_MAX
 15

	)

970 
	#CTL_P1003_1B_AIO_MAX
 16

	)

971 
	#CTL_P1003_1B_AIO_PRIO_DELTA_MAX
 17

	)

972 
	#CTL_P1003_1B_DELAYTIMER_MAX
 18

	)

973 
	#CTL_P1003_1B_MQ_OPEN_MAX
 19

	)

974 
	#CTL_P1003_1B_PAGESIZE
 20

	)

975 
	#CTL_P1003_1B_RTSIG_MAX
 21

	)

976 
	#CTL_P1003_1B_SEM_NSEMS_MAX
 22

	)

977 
	#CTL_P1003_1B_SEM_VALUE_MAX
 23

	)

978 
	#CTL_P1003_1B_SIGQUEUE_MAX
 24

	)

979 
	#CTL_P1003_1B_TIMER_MAX
 25

	)

981 
	#CTL_P1003_1B_MAXID
 26

	)

983 #ifde‡
_KERNEL


988 
sys˘l_oid_li°
 
sys˘l__chûdªn
;

989 
SYSCTL_DECL
(
_kîn
);

990 
SYSCTL_DECL
(
_kîn_„©uªs
);

991 
SYSCTL_DECL
(
_kîn_ùc
);

992 
SYSCTL_DECL
(
_kîn_¥oc
);

993 
SYSCTL_DECL
(
_kîn_sched
);

994 
SYSCTL_DECL
(
_kîn_sched_°©s
);

995 
SYSCTL_DECL
(
_sys˘l
);

996 
SYSCTL_DECL
(
_vm
);

997 
SYSCTL_DECL
(
_vm_°©s
);

998 
SYSCTL_DECL
(
_vm_°©s_misc
);

999 
SYSCTL_DECL
(
_vfs
);

1000 
SYSCTL_DECL
(
_√t
);

1001 
SYSCTL_DECL
(
_debug
);

1002 
SYSCTL_DECL
(
_debug_sizeof
);

1003 
SYSCTL_DECL
(
_dev
);

1004 
SYSCTL_DECL
(
_hw
);

1005 
SYSCTL_DECL
(
_hw_bus
);

1006 
SYSCTL_DECL
(
_hw_bus_devi˚s
);

1007 
SYSCTL_DECL
(
_hw_bus_öfo
);

1008 
SYSCTL_DECL
(
_machdï
);

1009 
SYSCTL_DECL
(
_u£r
);

1010 
SYSCTL_DECL
(
_com∑t
);

1011 
SYSCTL_DECL
(
_ªgªssi⁄
);

1012 
SYSCTL_DECL
(
_£curôy
);

1013 
SYSCTL_DECL
(
_£curôy_bsd
);

1015 
machöe
[];

1016 
o§ñó£
[];

1017 
o°y≥
[];

1018 
kîn_idít
[];

1021 
sys˘l_oid
 *
sys˘l_add_oid
(
sys˘l_˘x_li°
 *
˛i°
,

1022 
sys˘l_oid_li°
 *
∑ª¡
, 
nbr
, c⁄° *
«me
, 
köd
,

1023 *
¨g1
, 
ötmax_t
 
¨g2
, (*
h™dÀr
)(
SYSCTL_HANDLER_ARGS
),

1024 c⁄° *
fmt
, c⁄° *
des¸
, c⁄° *
œbñ
);

1025 
	`sys˘l_ªmove_«me
(
sys˘l_oid
 *
∑ª¡
, c⁄° *
«me
, 
dñ
,

1026 
ªcur£
);

1027 
	`sys˘l_ª«me_oid
(
sys˘l_oid
 *
oidp
, c⁄° *
«me
);

1028 
	`sys˘l_move_oid
(
sys˘l_oid
 *
oidp
,

1029 
sys˘l_oid_li°
 *
∑ª¡
);

1030 
	`sys˘l_ªmove_oid
(
sys˘l_oid
 *
oidp
, 
dñ
, 
ªcur£
);

1031 
	`sys˘l_˘x_öô
(
sys˘l_˘x_li°
 *
˛i°
);

1032 
	`sys˘l_˘x_‰ì
(
sys˘l_˘x_li°
 *
˛i°
);

1033 
sys˘l_˘x_íåy
 *
	`sys˘l_˘x_íåy_add
(
sys˘l_˘x_li°
 *
˛i°
,

1034 
sys˘l_oid
 *
oidp
);

1035 
sys˘l_˘x_íåy
 *
	`sys˘l_˘x_íåy_föd
(
sys˘l_˘x_li°
 *
˛i°
,

1036 
sys˘l_oid
 *
oidp
);

1037 
	`sys˘l_˘x_íåy_dñ
(
sys˘l_˘x_li°
 *
˛i°
,

1038 
sys˘l_oid
 *
oidp
);

1040 
	`kî√l_sys˘l
(
thªad
 *
td
, *
«me
, 
u_öt
 
«mñí
, *
ﬁd
,

1041 
size_t
 *
ﬁdÀ≈
, *
√w
, size_à
√wÀn
, size_à*
ªtvÆ
,

1042 
Êags
);

1043 
	`kî√l_sys˘lby«me
(
thªad
 *
td
, *
«me
, *
ﬁd
,

1044 
size_t
 *
ﬁdÀ≈
, *
√w
, size_à
√wÀn
, size_à*
ªtvÆ
,

1045 
Êags
);

1046 
	`u£æ™d_sys˘l
(
thªad
 *
td
, *
«me
, 
u_öt
 
«mñí
, *
ﬁd
,

1047 
size_t
 *
ﬁdÀ≈
, 
ökî√l
, *
√w
, size_à
√wÀn
,

1048 
size_t
 *
ªtvÆ
, 
Êags
);

1049 
	`sys˘l_föd_oid
(*
«me
, 
u_öt
 
«mñí
, 
sys˘l_oid
 **
noid
,

1050 *
nödx
, 
sys˘l_ªq
 *
ªq
);

1051 
	`sys˘l_wlock
();

1052 
	`sys˘l_wu∆ock
();

1053 
	`sys˘l_wúe_ﬁd_buf„r
(
sys˘l_ªq
 *
ªq
, 
size_t
 
Àn
);

1055 
sbuf
;

1056 
sbuf
 *
	`sbuf_√w_f‹_sys˘l
(sbuf *, *, ,

1057 
sys˘l_ªq
 *);

1059 
	~<sys/cdefs.h
>

1061 
__BEGIN_DECLS


1062 
	`sys˘l
(c⁄° *, 
u_öt
, *, 
size_t
 *, const *, size_t);

1063 
	`sys˘lby«me
(c⁄° *, *, 
size_t
 *, const *, size_t);

1064 
	`sys˘ amëomib
(c⁄° *, *, 
size_t
 *);

1065 
__END_DECLS


	@/usr/include/sys/sysent.h

34 #i‚de‡
_SYS_SYSENT_H_


35 
	#_SYS_SYSENT_H_


	)

37 
	~<bsm/audô.h
>

39 
	gæimô
;

40 
	gsy£¡
;

41 
	gthªad
;

42 
	gksigöfo
;

43 
	gsysˇŒ_¨gs
;

45 
	esy°ø˚_¥obe_t
 {

46 
	mSYSTRACE_ENTRY
,

47 
	mSYSTRACE_RETURN
,

50 
	tsy_ˇŒ_t
(
	tthªad
 *, *);

52 (*
	tsy°ø˚_¥obe_func_t
)(
	tsysˇŒ_¨gs
 *,

53 
	tsy°ø˚_¥obe_t
, );

54 (*
	tsy°ø˚_¨gs_func_t
)(, *, 
	tuöt64_t
 *, *);

56 #ifde‡
_KERNEL


57 
boﬁ
 
sy°ø˚_íabÀd
;

59 
sy°ø˚_¥obe_func_t
 
sy°ø˚_¥obe_func
;

61 
	ssy£¡
 {

62 
sy_«rg
;

63 
sy_ˇŒ_t
 *
sy_ˇŒ
;

64 
au_evít_t
 
sy_auevít
;

65 
sy°ø˚_¨gs_func_t
 
sy_sy°ø˚_¨gs_func
;

67 
u_öt32_t
 
sy_íåy
;

68 
u_öt32_t
 
sy_ªtu∫
;

69 
u_öt32_t
 
sy_Êags
;

70 
u_öt32_t
 
sy_thr˙t
;

76 
	#SYF_CAPENABLED
 0x00000001

	)

78 
	#SY_THR_FLAGMASK
 0x7

	)

79 
	#SY_THR_STATIC
 0x1

	)

80 
	#SY_THR_DRAINING
 0x2

	)

81 
	#SY_THR_ABSENT
 0x4

	)

82 
	#SY_THR_INCR
 0x8

	)

84 #ifde‡
KLD_MODULE


85 
	#SY_THR_STATIC_KLD
 0

	)

87 
	#SY_THR_STATIC_KLD
 
SY_THR_STATIC


	)

90 
image_∑øms
;

91 
__sig£t
;

92 
å≠‰ame
;

93 
vnode
;

95 
	ssy£¡vec
 {

96 
sv_size
;

97 
sy£¡
 *
sv_èbÀ
;

98 
u_öt
 
sv_mask
;

99 
sv_îrsize
;

100 c⁄° *
sv_îπbl
;

101 (*
sv_å™°øp
)(, );

103 (*
sv_fixup
)(
ªgi°î_t
 **, 
image_∑øms
 *);

105 (*
sv_£ndsig
)((*)(), 
ksigöfo
 *, 
__sig£t
 *);

107 *
sv_sigcode
;

108 *
sv_szsigcode
;

109 *
sv_«me
;

110 (*
sv_c‹edump
)(
thªad
 *, 
vnode
 *, 
off_t
, );

112 (*
sv_imga˘_åy
)(
image_∑øms
 *);

113 
sv_mösig°ksz
;

114 
sv_∑gesize
;

115 
vm_off£t_t
 
sv_möu£r
;

116 
vm_off£t_t
 
sv_maxu£r
;

117 
vm_off£t_t
 
sv_u§°ack
;

118 
vm_off£t_t
 
sv_ps°rögs
;

119 
sv_°ack¥Ÿ
;

120 
ªgi°î_t
 *(*
sv_c›yout_°rögs
)(
image_∑øms
 *);

121 (*
sv_£åegs
)(
thªad
 *, 
image_∑øms
 *,

122 
u_l⁄g
);

123 (*
sv_fixlimô
)(
æimô
 *, );

124 
u_l⁄g
 *
sv_maxssiz
;

125 
u_öt
 
sv_Êags
;

126 (*
sv_£t_sysˇŒ_ªtvÆ
)(
thªad
 *, );

127 (*
sv_„tch_sysˇŒ_¨gs
)(
thªad
 *);

128 c⁄° **
sv_sysˇŒ«mes
;

129 
vm_off£t_t
 
sv_timekìp_ba£
;

130 
vm_off£t_t
 
sv_sh¨ed_∑ge_ba£
;

131 
vm_off£t_t
 
sv_sh¨ed_∑ge_Àn
;

132 
vm_off£t_t
 
sv_sigcode_ba£
;

133 *
sv_sh¨ed_∑ge_obj
;

134 (*
sv_schedèû
)(
thªad
 *);

135 (*
sv_thªad_dëach
)(
thªad
 *);

136 (*
sv_å≠
)(
thªad
 *);

137 
u_l⁄g
 *
sv_hwˇp
;

138 
u_l⁄g
 *
sv_hwˇp2
;

141 
	#SV_ILP32
 0x000100

	)

142 
	#SV_LP64
 0x000200

	)

143 
	#SV_IA32
 0x004000

	)

144 
	#SV_AOUT
 0x008000

	)

145 
	#SV_SHP
 0x010000

	)

146 
	#SV_CAPSICUM
 0x020000

	)

147 
	#SV_TIMEKEEP
 0x040000

	)

149 
	#SV_ABI_MASK
 0xff

	)

150 
	#SV_ABI_ERRNO
(
p
, 
e
Ë(’)->
p_sy£¡
->
sv_îrsize
 <= 0 ?É : \

151 ((
e
Ë>(
p
)->
p_sy£¡
->
sv_îrsize
 ? -1 : (p)->p_sy£¡->
sv_îπbl
[e]))

	)

152 
	#SV_PROC_FLAG
(
p
, 
x
Ë(’)->
p_sy£¡
->
sv_Êags
 & (x))

	)

153 
	#SV_PROC_ABI
(
p
Ë(’)->
p_sy£¡
->
sv_Êags
 & 
SV_ABI_MASK
)

	)

154 
	#SV_CURPROC_FLAG
(
x
Ë
	`SV_PROC_FLAG
(
cuΩroc
, x)

	)

155 
	#SV_CURPROC_ABI
(Ë
	`SV_PROC_ABI
(
cuΩroc
)

	)

157 
	#SV_ABI_LINUX
 3

	)

158 
	#SV_ABI_FREEBSD
 9

	)

159 
	#SV_ABI_CLOUDABI
 17

	)

160 
	#SV_ABI_UNDEF
 255

	)

162 #ifde‡
_KERNEL


163 
sy£¡vec
 
aout_sysvec
;

164 
sy£¡
 sysent[];

165 c⁄° *
sysˇŒ«mes
[];

167 #i‡
	`deföed
(
__amd64__
)

168 
i386_ªad_exec
;

171 
	#NO_SYSCALL
 (-1)

	)

173 
moduÀ
;

175 
	ssysˇŒ_moduÀ_d©a
 {

176 (*
chaöevh
)(
moduÀ
 *, , *);

177 *
chaö¨g
;

178 *
off£t
;

179 
sy£¡
 *
√w_sy£¡
;

180 
sy£¡
 
ﬁd_sy£¡
;

181 
Êags
;

185 
	#SYSENT_INIT_VALS
(
_sysˇŒ«me
) { \

186 .
sy_«rg
 = ((
_sysˇŒ«me
 ## 
_¨gs
 ) \

187 / (
ªgi°î_t
)), \

188 .
sy_ˇŒ
 = (
sy_ˇŒ_t
 *)&
sys_
##
_sysˇŒ«me
, \

189 .
sy_auevít
 = 
SYS_AUE_
##
_sysˇŒ«me
, \

190 .
sy_sy°ø˚_¨gs_func
 = 
NULL
, \

191 .
sy_íåy
 = 0, \

192 .
sy_ªtu∫
 = 0, \

193 .
sy_Êags
 = 0, \

194 .
sy_thr˙t
 = 0 \

195 
	}

	)
}

197 
	#MAKE_SYSENT
(
sysˇŒ«me
) \

198 
sy£¡
 
sysˇŒ«me
##
_sy£¡
 = 
	`SYSENT_INIT_VALS
(sysˇŒ«me);

	)

200 
	#MAKE_SYSENT_COMPAT
(
sysˇŒ«me
) \

201 
sy£¡
 
sysˇŒ«me
##
_sy£¡
 = { \

202 ((
sysˇŒ«me
 ## 
_¨gs
 ) \

203 / (
ªgi°î_t
)), \

204 (
sy_ˇŒ_t
 *)& 
sysˇŒ«me
, \

205 
SYS_AUE_
##
sysˇŒ«me
 \

206 }

	)

208 
	#SYSCALL_MODULE
(
«me
, 
off£t
, 
√w_sy£¡
, 
evh
, 
¨g
) \

209 
sysˇŒ_moduÀ_d©a
 
«me
##
_sysˇŒ_mod
 = { \

210 
evh
, 
¨g
, 
off£t
, 
√w_sy£¡
, { 0, 
NULL
, 
AUE_NULL
 } \

213 
moduÀd©a_t
 
«me
##
_mod
 = { \

215 
sysˇŒ_moduÀ_h™dÀr
, \

216 &
«me
##
_sysˇŒ_mod
 \

218 
	`DECLARE_MODULE
(
«me
,Çame##
_mod
, 
SI_SUB_SYSCALLS
, 
SI_ORDER_MIDDLE
)

	)

220 
	#SYSCALL_MODULE_HELPER
(
sysˇŒ«me
) \

221 
sysˇŒ«me
##
_sysˇŒ
 = 
SYS_
##syscallname; \

222 
	`MAKE_SYSENT
(
sysˇŒ«me
); \

223 
	`SYSCALL_MODULE
(
sysˇŒ«me
, \

224 & 
sysˇŒ«me
##
_sysˇŒ
, & sysˇŒ«me##
_sy£¡
, \

225 
NULL
, NULL)

	)

227 
	#SYSCALL_MODULE_PRESENT
(
sysˇŒ«me
) \

228 (
sy£¡
[
SYS_
##
sysˇŒ«me
].
sy_ˇŒ
 !(
sy_ˇŒ_t
 *)
lkmnosys
 && \

229 
sy£¡
[
SYS_
##
sysˇŒ«me
].
sy_ˇŒ
 !(
sy_ˇŒ_t
 *)
lkmªssys
)

	)

234 
	ssysˇŒ_hñ≥r_d©a
 {

235 
sy£¡
 
	m√w_sy£¡
;

236 
sy£¡
 
	mﬁd_sy£¡
;

237 
	msysˇŒ_no
;

238 
	mªgi°îed
;

240 
	#SYSCALL_INIT_HELPER_F
(
sysˇŒ«me
, 
Êags
) { \

241 .
√w_sy£¡
 = { \

242 .
sy_«rg
 = ((
sysˇŒ«me
 ## 
_¨gs
 ) \

243 / (
ªgi°î_t
)), \

244 .
sy_ˇŒ
 = (
sy_ˇŒ_t
 *)& 
sys_
 ## 
sysˇŒ«me
, \

245 .
sy_auevít
 = 
SYS_AUE_
##
sysˇŒ«me
, \

246 .
sy_Êags
 = (
Êags
) \

248 .
sysˇŒ_no
 = 
SYS_
##
sysˇŒ«me
 \

249 }

	)

250 
	#SYSCALL_INIT_HELPER_COMPAT_F
(
sysˇŒ«me
, 
Êags
) { \

251 .
√w_sy£¡
 = { \

252 .
sy_«rg
 = ((
sysˇŒ«me
 ## 
_¨gs
 ) \

253 / (
ªgi°î_t
)), \

254 .
sy_ˇŒ
 = (
sy_ˇŒ_t
 *)& 
sysˇŒ«me
, \

255 .
sy_auevít
 = 
SYS_AUE_
##
sysˇŒ«me
, \

256 .
sy_Êags
 = (
Êags
) \

258 .
sysˇŒ_no
 = 
SYS_
##
sysˇŒ«me
 \

259 }

	)

260 
	#SYSCALL_INIT_HELPER
(
sysˇŒ«me
) \

261 
	`SYSCALL_INIT_HELPER_F
(
sysˇŒ«me
, 0)

	)

262 
	#SYSCALL_INIT_HELPER_COMPAT
(
sysˇŒ«me
) \

263 
	`SYSCALL_INIT_HELPER_COMPAT_F
(
sysˇŒ«me
, 0)

	)

264 
	#SYSCALL_INIT_LAST
 { \

265 .
sysˇŒ_no
 = 
NO_SYSCALL
 \

266 }

	)

268 
sysˇŒ_moduÀ_h™dÀr
(
moduÀ
 *
mod
, 
wh©
, *
¨g
);

269 
sysˇŒ_hñ≥r_ªgi°î
(
sysˇŒ_hñ≥r_d©a
 *
sd
, 
Êags
);

270 
sysˇŒ_hñ≥r_uƒegi°î
(
sysˇŒ_hñ≥r_d©a
 *
sd
);

272 
kîn_sysˇŒ_ªgi°î
(
sy£¡
 *
sy£¡s
, *
off£t
,

273 
sy£¡
 *
√w_sy£¡
, sy£¡ *
ﬁd_sy£¡
, 
Êags
);

274 
kîn_sysˇŒ_dîegi°î
(
sy£¡
 *
sy£¡s
, 
off£t
,

275 c⁄° 
sy£¡
 *
ﬁd_sy£¡
);

276 
kîn_sysˇŒ_moduÀ_h™dÀr
(
sy£¡
 *
sy£¡s
,

277 
moduÀ
 *
mod
, 
wh©
, *
¨g
);

278 
kîn_sysˇŒ_hñ≥r_ªgi°î
(
sy£¡
 *
sy£¡s
,

279 
sysˇŒ_hñ≥r_d©a
 *
sd
, 
Êags
);

280 
kîn_sysˇŒ_hñ≥r_uƒegi°î
(
sy£¡
 *
sy£¡s
,

281 
sysˇŒ_hñ≥r_d©a
 *
sd
);

283 
	g¥oc
;

284 c⁄° *
sysˇŒ«me
(
¥oc
 *
p
, 
u_öt
 
code
);

287 
	gnosys_¨gs
;

289 
lkmnosys
(
thªad
 *, 
nosys_¨gs
 *);

290 
lkmªssys
(
thªad
 *, 
nosys_¨gs
 *);

292 
_sysˇŒ_thªad_íãr
(
thªad
 *
td
, 
sy£¡
 *
£
);

293 
_sysˇŒ_thªad_exô
(
thªad
 *
td
, 
sy£¡
 *
£
);

295 
ölöe
 

296 
	$sysˇŒ_thªad_íãr
(
thªad
 *
td
, 
sy£¡
 *
£
)

299 i‡(
	`__¥edi˘_åue
((
£
->
sy_thr˙t
 & 
SY_THR_STATIC
) != 0))

301  (
	`_sysˇŒ_thªad_íãr
(
td
, 
£
));

302 
	}
}

304 
ölöe
 

305 
	$sysˇŒ_thªad_exô
(
thªad
 *
td
, 
sy£¡
 *
£
)

308 i‡(
	`__¥edi˘_åue
((
£
->
sy_thr˙t
 & 
SY_THR_STATIC
) != 0))

310 
	`_sysˇŒ_thªad_exô
(
td
, 
£
);

311 
	}
}

313 
sh¨ed_∑ge_Æloc
(
size
, 
Æign
);

314 
sh¨ed_∑ge_fûl
(
size
, 
Æign
, c⁄° *
d©a
);

315 
sh¨ed_∑ge_wrôe
(
ba£
, 
size
, c⁄° *
d©a
);

316 
exec_sysvec_öô
(*
∑øm
);

317 
exec_öôtk
();

319 
	#INIT_SYSENTVEC
(
«me
, 
sv
) \

320 
	`SYSINIT
(
«me
, 
SI_SUB_EXEC
, 
SI_ORDER_ANY
, \

321 (
sysöô_cfunc_t
)
exec_sysvec_öô
, 
sv
);

	)

	@/usr/include/sys/syslog.h

35 #i‚de‡
_SYS_SYSLOG_H_


36 
	#_SYS_SYSLOG_H_


	)

38 
	#_PATH_LOG
 "/v¨/run/log"

	)

39 
	#_PATH_LOG_PRIV
 "/v¨/run/log¥iv"

	)

40 
	#_PATH_OLDLOG
 "/dev/log"

	)

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
((
LOG_NFACILITIES
<<3), 0)

	)

69 
	s_code
 {

70 c⁄° *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 c⁄° 
CODE
 
	g¥i‹ôy«mes
[] = {

75 { "Æît", 
LOG_ALERT
, },

76 { "¸ô", 
LOG_CRIT
, },

77 { "debug", 
LOG_DEBUG
, },

78 { "emîg", 
LOG_EMERG
, },

79 { "îr", 
LOG_ERR
, },

80 { "îr‹", 
LOG_ERR
, },

81 { "öfo", 
LOG_INFO
, },

82 { "n⁄e", 
INTERNAL_NOPRI
, },

83 { "nŸi˚", 
LOG_NOTICE
, },

84 { "∑nic", 
LOG_EMERG
, },

85 { "w¨n", 
LOG_WARNING
, },

86 { "w¨nög", 
LOG_WARNING
, },

87 { 
NULL
, -1, }

92 
	#LOG_KERN
 (0<<3Ë

	)

93 
	#LOG_USER
 (1<<3Ë

	)

94 
	#LOG_MAIL
 (2<<3Ë

	)

95 
	#LOG_DAEMON
 (3<<3Ë

	)

96 
	#LOG_AUTH
 (4<<3Ë

	)

97 
	#LOG_SYSLOG
 (5<<3Ë

	)

98 
	#LOG_LPR
 (6<<3Ë

	)

99 
	#LOG_NEWS
 (7<<3Ë

	)

100 
	#LOG_UUCP
 (8<<3Ë

	)

101 
	#LOG_CRON
 (9<<3Ë

	)

102 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

106 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_NTP
 (12<<3Ë

	)

108 
	#LOG_SECURITY
 (13<<3Ë

	)

109 
	#LOG_CONSOLE
 (14<<3Ë

	)

112 
	#LOG_LOCAL0
 (16<<3Ë

	)

113 
	#LOG_LOCAL1
 (17<<3Ë

	)

114 
	#LOG_LOCAL2
 (18<<3Ë

	)

115 
	#LOG_LOCAL3
 (19<<3Ë

	)

116 
	#LOG_LOCAL4
 (20<<3Ë

	)

117 
	#LOG_LOCAL5
 (21<<3Ë

	)

118 
	#LOG_LOCAL6
 (22<<3Ë

	)

119 
	#LOG_LOCAL7
 (23<<3Ë

	)

121 
	#LOG_NFACILITIES
 24

	)

122 
	#LOG_FACMASK
 0x03f8

	)

124 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

126 #ifde‡
SYSLOG_NAMES


127 c⁄° 
CODE
 
	gÁcûôy«mes
[] = {

128 { "auth", 
LOG_AUTH
, },

129 { "auth¥iv", 
LOG_AUTHPRIV
, },

130 { "c⁄sﬁe", 
LOG_CONSOLE
, },

131 { "¸⁄", 
LOG_CRON
, },

132 { "d´m⁄", 
LOG_DAEMON
, },

133 { "·p", 
LOG_FTP
, },

134 { "kîn", 
LOG_KERN
, },

135 { "Õr", 
LOG_LPR
, },

136 { "maû", 
LOG_MAIL
, },

137 { "m¨k", 
INTERNAL_MARK
, },

138 { "√ws", 
LOG_NEWS
, },

139 { "¡p", 
LOG_NTP
, },

140 { "£curôy", 
LOG_SECURITY
, },

141 { "sy¶og", 
LOG_SYSLOG
, },

142 { "u£r", 
LOG_USER
, },

143 { "uu˝", 
LOG_UUCP
, },

144 { "loˇl0", 
LOG_LOCAL0
, },

145 { "loˇl1", 
LOG_LOCAL1
, },

146 { "loˇl2", 
LOG_LOCAL2
, },

147 { "loˇl3", 
LOG_LOCAL3
, },

148 { "loˇl4", 
LOG_LOCAL4
, },

149 { "loˇl5", 
LOG_LOCAL5
, },

150 { "loˇl6", 
LOG_LOCAL6
, },

151 { "loˇl7", 
LOG_LOCAL7
, },

152 { 
NULL
, -1, }

156 #ifde‡
_KERNEL


157 
	#LOG_PRINTF
 -1

	)

163 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

164 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

172 
	#LOG_PID
 0x01

	)

173 
	#LOG_CONS
 0x02

	)

174 
	#LOG_ODELAY
 0x04

	)

175 
	#LOG_NDELAY
 0x08

	)

176 
	#LOG_NOWAIT
 0x10

	)

177 
	#LOG_PERROR
 0x20

	)

179 #ifde‡
_KERNEL


190 
	~<sys/cdefs.h
>

191 
	~<sys/_ty≥s.h
>

193 
__BEGIN_DECLS


194 
˛o£log
();

195 
›ílog
(const *, , );

196 
£éogmask
();

197 
	$sy¶og
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

198 #i‡
__BSD_VISIBLE


199 
	$vsy¶og
(, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

201 
__END_DECLS


	@/usr/include/sys/sysproto.h

8 #i‚de‡
_SYS_SYSPROTO_H_


9 
	#_SYS_SYSPROTO_H_


	)

11 
	~<sys/sig«l.h
>

12 
	~<sys/a˛.h
>

13 
	~<sys/˝u£t.h
>

14 
	~<sys/domaö£t.h
>

15 
	~<sys/_ffcou¡î.h
>

16 
	~<sys/_£m≠h‹e.h
>

17 
	~<sys/uc⁄ãxt.h
>

18 
	~<sys/waô.h
>

20 
	~<bsm/audô_kevíts.h
>

22 
	g¥oc
;

24 
	gthªad
;

26 
	#PAD_
(
t
Ë((
ªgi°î_t
) <= (t) ? \

27 0 : (
ªgi°î_t
Ë- (
t
))

	)

29 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


30 
	#PADL_
(
t
Ë0

	)

31 
	#PADR_
(
t
Ë
	`PAD_
—)

	)

33 
	#PADL_
(
t
Ë
	`PAD_
—)

	)

34 
	#PADR_
(
t
Ë0

	)

37 
	snosys_¨gs
 {

38 
ªgi°î_t
 
	mdummy
;

40 
	ssys_exô_¨gs
 {

41 
	mrvÆ_l_
[
PADL_
()]; 
	mrvÆ
; 
	mrvÆ_r_
[
PADR_
()];

43 
	sf‹k_¨gs
 {

44 
ªgi°î_t
 
	mdummy
;

46 
	sªad_¨gs
 {

47 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

48 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

49 
	mnbyã_l_
[
PADL_
(
size_t
)]; size_à
	mnbyã
; 
	mnbyã_r_
[
PADR_
(size_t)];

51 
	swrôe_¨gs
 {

52 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

53 
	mbuf_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mbuf
; 
	mbuf_r_
[
PADR_
(const *)];

54 
	mnbyã_l_
[
PADL_
(
size_t
)]; size_à
	mnbyã
; 
	mnbyã_r_
[
PADR_
(size_t)];

56 
	s›í_¨gs
 {

57 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

58 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

59 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

61 
	s˛o£_¨gs
 {

62 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

64 
	swaô4_¨gs
 {

65 
	mpid_l_
[
PADL_
()]; 
	mpid
; 
	mpid_r_
[
PADR_
()];

66 
	m°©us_l_
[
PADL_
(*)]; * 
	m°©us
; 
	m°©us_r_
[
PADR_
(*)];

67 
	m›ti⁄s_l_
[
PADL_
()]; 
	m›ti⁄s
; 
	m›ti⁄s_r_
[
PADR_
()];

68 
	mrußge_l_
[
PADL_
(
rußge
 *)]; rußgê* 
	mrußge
; 
	mrußge_r_
[
PADR_
(rusage *)];

70 
	slök_¨gs
 {

71 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

72 
	mlök_l_
[
PADL_
(*)]; * 
	mlök
; 
	mlök_r_
[
PADR_
(*)];

74 
	su∆ök_¨gs
 {

75 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

77 
	schdú_¨gs
 {

78 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

80 
	sfchdú_¨gs
 {

81 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

83 
	schmod_¨gs
 {

84 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

85 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

87 
	schown_¨gs
 {

88 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

89 
	muid_l_
[
PADL_
()]; 
	muid
; 
	muid_r_
[
PADR_
()];

90 
	mgid_l_
[
PADL_
()]; 
	mgid
; 
	mgid_r_
[
PADR_
()];

92 
	sbªak_¨gs
 {

93 
	mnsize_l_
[
PADL_
(*)]; * 
	mnsize
; 
	mnsize_r_
[
PADR_
(*)];

95 
	sgëpid_¨gs
 {

96 
ªgi°î_t
 
	mdummy
;

98 
	smou¡_¨gs
 {

99 
	mty≥_l_
[
PADL_
(*)]; * 
	mty≥
; 
	mty≥_r_
[
PADR_
(*)];

100 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

101 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

102 
	md©a_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	md©a
; 
	md©a_r_
[
PADR_
(caddr_t)];

104 
	sunmou¡_¨gs
 {

105 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

106 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

108 
	s£tuid_¨gs
 {

109 
	muid_l_
[
PADL_
(
uid_t
)]; uid_à
	muid
; 
	muid_r_
[
PADR_
(uid_t)];

111 
	sgëuid_¨gs
 {

112 
ªgi°î_t
 
	mdummy
;

114 
	sgëeuid_¨gs
 {

115 
ªgi°î_t
 
	mdummy
;

117 
	s±ø˚_¨gs
 {

118 
	mªq_l_
[
PADL_
()]; 
	mªq
; 
	mªq_r_
[
PADR_
()];

119 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

120 
	maddr_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	maddr
; 
	maddr_r_
[
PADR_
(caddr_t)];

121 
	md©a_l_
[
PADL_
()]; 
	md©a
; 
	md©a_r_
[
PADR_
()];

123 
	sªcvmsg_¨gs
 {

124 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

125 
	mmsg_l_
[
PADL_
(
msghdr
 *)]; msghd∏* 
	mmsg
; 
	mmsg_r_
[
PADR_
(msghdr *)];

126 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

128 
	s£ndmsg_¨gs
 {

129 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

130 
	mmsg_l_
[
PADL_
(
msghdr
 *)]; msghd∏* 
	mmsg
; 
	mmsg_r_
[
PADR_
(msghdr *)];

131 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

133 
	sªcv‰om_¨gs
 {

134 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

135 
	mbuf_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mbuf
; 
	mbuf_r_
[
PADR_
(caddr_t)];

136 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

137 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

138 
	m‰om_l_
[
PADL_
(
sockaddr
 *
__ª°ri˘
)]; sockadd∏*__ª°ri˘ 
	m‰om
; 
	m‰om_r_
[
PADR_
(sockaddr *__restrict)];

139 
	m‰omÀ«ddr_l_
[
PADL_
(
__sockÀn_t
 *
__ª°ri˘
)]; __sockÀn_à*__ª°ri˘ 
	m‰omÀ«ddr
; 
	m‰omÀ«ddr_r_
[
PADR_
(__socklen_t *__restrict)];

141 
	sac˚±_¨gs
 {

142 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

143 
	m«me_l_
[
PADL_
(
sockaddr
 *
__ª°ri˘
)]; sockadd∏*__ª°ri˘ 
	m«me
; 
	m«me_r_
[
PADR_
(sockaddr *__restrict)];

144 
	m™amñí_l_
[
PADL_
(
__sockÀn_t
 *
__ª°ri˘
)]; __sockÀn_à*__ª°ri˘ 
	m™amñí
; 
	m™amñí_r_
[
PADR_
(__socklen_t *__restrict)];

146 
	sgë≥î«me_¨gs
 {

147 
	mfdes_l_
[
PADL_
()]; 
	mfdes
; 
	mfdes_r_
[
PADR_
()];

148 
	maß_l_
[
PADL_
(
sockaddr
 *
__ª°ri˘
)]; sockadd∏*__ª°ri˘ 
	maß
; 
	maß_r_
[
PADR_
(sockaddr *__restrict)];

149 
	mÆí_l_
[
PADL_
(
__sockÀn_t
 *
__ª°ri˘
)]; __sockÀn_à*__ª°ri˘ 
	mÆí
; 
	mÆí_r_
[
PADR_
(__socklen_t *__restrict)];

151 
	sgësock«me_¨gs
 {

152 
	mfdes_l_
[
PADL_
()]; 
	mfdes
; 
	mfdes_r_
[
PADR_
()];

153 
	maß_l_
[
PADL_
(
sockaddr
 *
__ª°ri˘
)]; sockadd∏*__ª°ri˘ 
	maß
; 
	maß_r_
[
PADR_
(sockaddr *__restrict)];

154 
	mÆí_l_
[
PADL_
(
__sockÀn_t
 *
__ª°ri˘
)]; __sockÀn_à*__ª°ri˘ 
	mÆí
; 
	mÆí_r_
[
PADR_
(__socklen_t *__restrict)];

156 
	sac˚ss_¨gs
 {

157 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

158 
	mamode_l_
[
PADL_
()]; 
	mamode
; 
	mamode_r_
[
PADR_
()];

160 
	schÊags_¨gs
 {

161 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

162 
	mÊags_l_
[
PADL_
(
u_l⁄g
)]; u_l⁄g 
	mÊags
; 
	mÊags_r_
[
PADR_
(u_long)];

164 
	sfchÊags_¨gs
 {

165 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

166 
	mÊags_l_
[
PADL_
(
u_l⁄g
)]; u_l⁄g 
	mÊags
; 
	mÊags_r_
[
PADR_
(u_long)];

168 
	ssync_¨gs
 {

169 
ªgi°î_t
 
	mdummy
;

171 
	skûl_¨gs
 {

172 
	mpid_l_
[
PADL_
()]; 
	mpid
; 
	mpid_r_
[
PADR_
()];

173 
	msignum_l_
[
PADL_
()]; 
	msignum
; 
	msignum_r_
[
PADR_
()];

175 
	sgëµid_¨gs
 {

176 
ªgi°î_t
 
	mdummy
;

178 
	sdup_¨gs
 {

179 
	mfd_l_
[
PADL_
(
u_öt
)]; u_öà
	mfd
; 
	mfd_r_
[
PADR_
(u_int)];

181 
	s‰ìbsd10_pùe_¨gs
 {

182 
ªgi°î_t
 
	mdummy
;

184 
	sgëegid_¨gs
 {

185 
ªgi°î_t
 
	mdummy
;

187 
	s¥ofû_¨gs
 {

188 
	mßm∂es_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mßm∂es
; 
	mßm∂es_r_
[
PADR_
(caddr_t)];

189 
	msize_l_
[
PADL_
(
size_t
)]; size_à
	msize
; 
	msize_r_
[
PADR_
(size_t)];

190 
	moff£t_l_
[
PADL_
(
size_t
)]; size_à
	moff£t
; 
	moff£t_r_
[
PADR_
(size_t)];

191 
	msˇÀ_l_
[
PADL_
(
u_öt
)]; u_öà
	msˇÀ
; 
	msˇÀ_r_
[
PADR_
(u_int)];

193 
	skåa˚_¨gs
 {

194 
	m‚ame_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m‚ame
; 
	m‚ame_r_
[
PADR_
(const *)];

195 
	m›s_l_
[
PADL_
()]; 
	m›s
; 
	m›s_r_
[
PADR_
()];

196 
	mÁcs_l_
[
PADL_
()]; 
	mÁcs
; 
	mÁcs_r_
[
PADR_
()];

197 
	mpid_l_
[
PADL_
()]; 
	mpid
; 
	mpid_r_
[
PADR_
()];

199 
	sgëgid_¨gs
 {

200 
ªgi°î_t
 
	mdummy
;

202 
	sgëlogö_¨gs
 {

203 
	m«mebuf_l_
[
PADL_
(*)]; * 
	m«mebuf
; 
	m«mebuf_r_
[
PADR_
(*)];

204 
	m«mñí_l_
[
PADL_
(
u_öt
)]; u_öà
	m«mñí
; 
	m«mñí_r_
[
PADR_
(u_int)];

206 
	s£éogö_¨gs
 {

207 
	m«mebuf_l_
[
PADL_
(*)]; * 
	m«mebuf
; 
	m«mebuf_r_
[
PADR_
(*)];

209 
	sac˘_¨gs
 {

210 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

212 
	sosig≥ndög_¨gs
 {

213 
ªgi°î_t
 
	mdummy
;

215 
	ssigÆt°ack_¨gs
 {

216 
	mss_l_
[
PADL_
(
°ack_t
 *)]; sèck_à* 
	mss
; 
	mss_r_
[
PADR_
(stack_t *)];

217 
	moss_l_
[
PADL_
(
°ack_t
 *)]; sèck_à* 
	moss
; 
	moss_r_
[
PADR_
(stack_t *)];

219 
	sio˘l_¨gs
 {

220 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

221 
	mcom_l_
[
PADL_
(
u_l⁄g
)]; u_l⁄g 
	mcom
; 
	mcom_r_
[
PADR_
(u_long)];

222 
	md©a_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	md©a
; 
	md©a_r_
[
PADR_
(caddr_t)];

224 
	sªboŸ_¨gs
 {

225 
	m›t_l_
[
PADL_
()]; 
	m›t
; 
	m›t_r_
[
PADR_
()];

227 
	sªvoke_¨gs
 {

228 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

230 
	ssymlök_¨gs
 {

231 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

232 
	mlök_l_
[
PADL_
(*)]; * 
	mlök
; 
	mlök_r_
[
PADR_
(*)];

234 
	sªadlök_¨gs
 {

235 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

236 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

237 
	mcou¡_l_
[
PADL_
(
size_t
)]; size_à
	mcou¡
; 
	mcou¡_r_
[
PADR_
(size_t)];

239 
	sexecve_¨gs
 {

240 
	m‚ame_l_
[
PADL_
(*)]; * 
	m‚ame
; 
	m‚ame_r_
[
PADR_
(*)];

241 
	m¨gv_l_
[
PADL_
(**)]; ** 
	m¨gv
; 
	m¨gv_r_
[
PADR_
(**)];

242 
	mívv_l_
[
PADL_
(**)]; ** 
	mívv
; 
	mívv_r_
[
PADR_
(**)];

244 
	sumask_¨gs
 {

245 
	m√wmask_l_
[
PADL_
()]; 
	m√wmask
; 
	m√wmask_r_
[
PADR_
()];

247 
	schroŸ_¨gs
 {

248 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

250 
	sgë∑gesize_¨gs
 {

251 
ªgi°î_t
 
	mdummy
;

253 
	smsync_¨gs
 {

254 
	maddr_l_
[
PADL_
(*)]; * 
	maddr
; 
	maddr_r_
[
PADR_
(*)];

255 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

256 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

258 
	svf‹k_¨gs
 {

259 
ªgi°î_t
 
	mdummy
;

261 
	ssbrk_¨gs
 {

262 
	mö¸_l_
[
PADL_
()]; 
	mö¸
; 
	mö¸_r_
[
PADR_
()];

264 
	ss°k_¨gs
 {

265 
	mö¸_l_
[
PADL_
()]; 
	mö¸
; 
	mö¸_r_
[
PADR_
()];

267 
	smunm≠_¨gs
 {

268 
	maddr_l_
[
PADL_
(*)]; * 
	maddr
; 
	maddr_r_
[
PADR_
(*)];

269 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

271 
	sm¥Ÿe˘_¨gs
 {

272 
	maddr_l_
[
PADL_
(*)]; * 
	maddr
; 
	maddr_r_
[
PADR_
(*)];

273 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

274 
	m¥Ÿ_l_
[
PADL_
()]; 
	m¥Ÿ
; 
	m¥Ÿ_r_
[
PADR_
()];

276 
	smadvi£_¨gs
 {

277 
	maddr_l_
[
PADL_
(*)]; * 
	maddr
; 
	maddr_r_
[
PADR_
(*)];

278 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

279 
	mbehav_l_
[
PADL_
()]; 
	mbehav
; 
	mbehav_r_
[
PADR_
()];

281 
	smöc‹e_¨gs
 {

282 
	maddr_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	maddr
; 
	maddr_r_
[
PADR_
(const *)];

283 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

284 
	mvec_l_
[
PADL_
(*)]; * 
	mvec
; 
	mvec_r_
[
PADR_
(*)];

286 
	sgëgroups_¨gs
 {

287 
	mgid£tsize_l_
[
PADL_
(
u_öt
)]; u_öà
	mgid£tsize
; 
	mgid£tsize_r_
[
PADR_
(u_int)];

288 
	mgid£t_l_
[
PADL_
(
gid_t
 *)]; gid_à* 
	mgid£t
; 
	mgid£t_r_
[
PADR_
(gid_t *)];

290 
	s£tgroups_¨gs
 {

291 
	mgid£tsize_l_
[
PADL_
(
u_öt
)]; u_öà
	mgid£tsize
; 
	mgid£tsize_r_
[
PADR_
(u_int)];

292 
	mgid£t_l_
[
PADL_
(
gid_t
 *)]; gid_à* 
	mgid£t
; 
	mgid£t_r_
[
PADR_
(gid_t *)];

294 
	sgëpgΩ_¨gs
 {

295 
ªgi°î_t
 
	mdummy
;

297 
	s£çgid_¨gs
 {

298 
	mpid_l_
[
PADL_
()]; 
	mpid
; 
	mpid_r_
[
PADR_
()];

299 
	mpgid_l_
[
PADL_
()]; 
	mpgid
; 
	mpgid_r_
[
PADR_
()];

301 
	s£tôimî_¨gs
 {

302 
	mwhich_l_
[
PADL_
(
u_öt
)]; u_öà
	mwhich
; 
	mwhich_r_
[
PADR_
(u_int)];

303 
	môv_l_
[
PADL_
(
ôimîvÆ
 *)]; ôimîvÆ * 
	môv
; 
	môv_r_
[
PADR_
(itimerval *)];

304 
	moôv_l_
[
PADL_
(
ôimîvÆ
 *)]; ôimîvÆ * 
	moôv
; 
	moôv_r_
[
PADR_
(itimerval *)];

306 
	sowaô_¨gs
 {

307 
ªgi°î_t
 
	mdummy
;

309 
	ssw≠⁄_¨gs
 {

310 
	m«me_l_
[
PADL_
(*)]; * 
	m«me
; 
	m«me_r_
[
PADR_
(*)];

312 
	sgëôimî_¨gs
 {

313 
	mwhich_l_
[
PADL_
(
u_öt
)]; u_öà
	mwhich
; 
	mwhich_r_
[
PADR_
(u_int)];

314 
	môv_l_
[
PADL_
(
ôimîvÆ
 *)]; ôimîvÆ * 
	môv
; 
	môv_r_
[
PADR_
(itimerval *)];

316 
	sgëdèbÀsize_¨gs
 {

317 
ªgi°î_t
 
	mdummy
;

319 
	sdup2_¨gs
 {

320 
	m‰om_l_
[
PADL_
(
u_öt
)]; u_öà
	m‰om
; 
	m‰om_r_
[
PADR_
(u_int)];

321 
	mto_l_
[
PADL_
(
u_öt
)]; u_öà
	mto
; 
	mto_r_
[
PADR_
(u_int)];

323 
	sf˙é_¨gs
 {

324 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

325 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

326 
	m¨g_l_
[
PADL_
()]; 
	m¨g
; 
	m¨g_r_
[
PADR_
()];

328 
	s£À˘_¨gs
 {

329 
	mnd_l_
[
PADL_
()]; 
	mnd
; 
	mnd_r_
[
PADR_
()];

330 
	mö_l_
[
PADL_
(
fd_£t
 *)]; fd_£à* 
	mö
; 
	mö_r_
[
PADR_
(fd_set *)];

331 
	mou_l_
[
PADL_
(
fd_£t
 *)]; fd_£à* 
	mou
; 
	mou_r_
[
PADR_
(fd_set *)];

332 
	mex_l_
[
PADL_
(
fd_£t
 *)]; fd_£à* 
	mex
; 
	mex_r_
[
PADR_
(fd_set *)];

333 
	mtv_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mtv
; 
	mtv_r_
[
PADR_
(timeval *)];

335 
	sfsync_¨gs
 {

336 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

338 
	s£çri‹ôy_¨gs
 {

339 
	mwhich_l_
[
PADL_
()]; 
	mwhich
; 
	mwhich_r_
[
PADR_
()];

340 
	mwho_l_
[
PADL_
()]; 
	mwho
; 
	mwho_r_
[
PADR_
()];

341 
	m¥io_l_
[
PADL_
()]; 
	m¥io
; 
	m¥io_r_
[
PADR_
()];

343 
	ssockë_¨gs
 {

344 
	mdomaö_l_
[
PADL_
()]; 
	mdomaö
; 
	mdomaö_r_
[
PADR_
()];

345 
	mty≥_l_
[
PADL_
()]; 
	mty≥
; 
	mty≥_r_
[
PADR_
()];

346 
	m¥Ÿocﬁ_l_
[
PADL_
()]; 
	m¥Ÿocﬁ
; 
	m¥Ÿocﬁ_r_
[
PADR_
()];

348 
	sc⁄√˘_¨gs
 {

349 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

350 
	m«me_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	m«me
; 
	m«me_r_
[
PADR_
(caddr_t)];

351 
	m«mñí_l_
[
PADL_
()]; 
	m«mñí
; 
	m«mñí_r_
[
PADR_
()];

353 
	sgë¥i‹ôy_¨gs
 {

354 
	mwhich_l_
[
PADL_
()]; 
	mwhich
; 
	mwhich_r_
[
PADR_
()];

355 
	mwho_l_
[
PADL_
()]; 
	mwho
; 
	mwho_r_
[
PADR_
()];

357 
	sböd_¨gs
 {

358 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

359 
	m«me_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	m«me
; 
	m«me_r_
[
PADR_
(caddr_t)];

360 
	m«mñí_l_
[
PADL_
()]; 
	m«mñí
; 
	m«mñí_r_
[
PADR_
()];

362 
	s£tsock›t_¨gs
 {

363 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

364 
	mÀvñ_l_
[
PADL_
()]; 
	mÀvñ
; 
	mÀvñ_r_
[
PADR_
()];

365 
	m«me_l_
[
PADL_
()]; 
	m«me
; 
	m«me_r_
[
PADR_
()];

366 
	mvÆ_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mvÆ
; 
	mvÆ_r_
[
PADR_
(caddr_t)];

367 
	mvÆsize_l_
[
PADL_
()]; 
	mvÆsize
; 
	mvÆsize_r_
[
PADR_
()];

369 
	sli°í_¨gs
 {

370 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

371 
	mbacklog_l_
[
PADL_
()]; 
	mbacklog
; 
	mbacklog_r_
[
PADR_
()];

373 
	sgëtimeofday_¨gs
 {

374 
	mç_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mç
; 
	mç_r_
[
PADR_
(timeval *)];

375 
	mtzp_l_
[
PADL_
(
timez⁄e
 *)]; timez⁄ê* 
	mtzp
; 
	mtzp_r_
[
PADR_
(timezone *)];

377 
	sgërußge_¨gs
 {

378 
	mwho_l_
[
PADL_
()]; 
	mwho
; 
	mwho_r_
[
PADR_
()];

379 
	mrußge_l_
[
PADL_
(
rußge
 *)]; rußgê* 
	mrußge
; 
	mrußge_r_
[
PADR_
(rusage *)];

381 
	sgësock›t_¨gs
 {

382 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

383 
	mÀvñ_l_
[
PADL_
()]; 
	mÀvñ
; 
	mÀvñ_r_
[
PADR_
()];

384 
	m«me_l_
[
PADL_
()]; 
	m«me
; 
	m«me_r_
[
PADR_
()];

385 
	mvÆ_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mvÆ
; 
	mvÆ_r_
[
PADR_
(caddr_t)];

386 
	mavÆsize_l_
[
PADL_
(*)]; * 
	mavÆsize
; 
	mavÆsize_r_
[
PADR_
(*)];

388 
	sªadv_¨gs
 {

389 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

390 
	miovp_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miovp
; 
	miovp_r_
[
PADR_
(iovec *)];

391 
	miov˙t_l_
[
PADL_
(
u_öt
)]; u_öà
	miov˙t
; 
	miov˙t_r_
[
PADR_
(u_int)];

393 
	swrôev_¨gs
 {

394 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

395 
	miovp_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miovp
; 
	miovp_r_
[
PADR_
(iovec *)];

396 
	miov˙t_l_
[
PADL_
(
u_öt
)]; u_öà
	miov˙t
; 
	miov˙t_r_
[
PADR_
(u_int)];

398 
	s£âimeofday_¨gs
 {

399 
	mtv_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mtv
; 
	mtv_r_
[
PADR_
(timeval *)];

400 
	mtzp_l_
[
PADL_
(
timez⁄e
 *)]; timez⁄ê* 
	mtzp
; 
	mtzp_r_
[
PADR_
(timezone *)];

402 
	sfchown_¨gs
 {

403 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

404 
	muid_l_
[
PADL_
()]; 
	muid
; 
	muid_r_
[
PADR_
()];

405 
	mgid_l_
[
PADL_
()]; 
	mgid
; 
	mgid_r_
[
PADR_
()];

407 
	sfchmod_¨gs
 {

408 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

409 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

411 
	s£åeuid_¨gs
 {

412 
	mruid_l_
[
PADL_
()]; 
	mruid
; 
	mruid_r_
[
PADR_
()];

413 
	meuid_l_
[
PADL_
()]; 
	meuid
; 
	meuid_r_
[
PADR_
()];

415 
	s£åegid_¨gs
 {

416 
	mrgid_l_
[
PADL_
()]; 
	mrgid
; 
	mrgid_r_
[
PADR_
()];

417 
	megid_l_
[
PADL_
()]; 
	megid
; 
	megid_r_
[
PADR_
()];

419 
	sª«me_¨gs
 {

420 
	m‰om_l_
[
PADL_
(*)]; * 
	m‰om
; 
	m‰om_r_
[
PADR_
(*)];

421 
	mto_l_
[
PADL_
(*)]; * 
	mto
; 
	mto_r_
[
PADR_
(*)];

423 
	sÊock_¨gs
 {

424 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

425 
	mhow_l_
[
PADL_
()]; 
	mhow
; 
	mhow_r_
[
PADR_
()];

427 
	smkfifo_¨gs
 {

428 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

429 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

431 
	s£ndto_¨gs
 {

432 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

433 
	mbuf_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mbuf
; 
	mbuf_r_
[
PADR_
(caddr_t)];

434 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

435 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

436 
	mto_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mto
; 
	mto_r_
[
PADR_
(caddr_t)];

437 
	mtﬁí_l_
[
PADL_
()]; 
	mtﬁí
; 
	mtﬁí_r_
[
PADR_
()];

439 
	sshutdown_¨gs
 {

440 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

441 
	mhow_l_
[
PADL_
()]; 
	mhow
; 
	mhow_r_
[
PADR_
()];

443 
	ssockë∑ú_¨gs
 {

444 
	mdomaö_l_
[
PADL_
()]; 
	mdomaö
; 
	mdomaö_r_
[
PADR_
()];

445 
	mty≥_l_
[
PADL_
()]; 
	mty≥
; 
	mty≥_r_
[
PADR_
()];

446 
	m¥Ÿocﬁ_l_
[
PADL_
()]; 
	m¥Ÿocﬁ
; 
	m¥Ÿocﬁ_r_
[
PADR_
()];

447 
	mrsv_l_
[
PADL_
(*)]; * 
	mrsv
; 
	mrsv_r_
[
PADR_
(*)];

449 
	smkdú_¨gs
 {

450 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

451 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

453 
	srmdú_¨gs
 {

454 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

456 
	sutimes_¨gs
 {

457 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

458 
	mçå_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mçå
; 
	mçå_r_
[
PADR_
(timeval *)];

460 
	sadjtime_¨gs
 {

461 
	mdñè_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mdñè
; 
	mdñè_r_
[
PADR_
(timeval *)];

462 
	mﬁddñè_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mﬁddñè
; 
	mﬁddñè_r_
[
PADR_
(timeval *)];

464 
	sogëho°id_¨gs
 {

465 
ªgi°î_t
 
	mdummy
;

467 
	s£tsid_¨gs
 {

468 
ªgi°î_t
 
	mdummy
;

470 
	squŸa˘l_¨gs
 {

471 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

472 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

473 
	muid_l_
[
PADL_
()]; 
	muid
; 
	muid_r_
[
PADR_
()];

474 
	m¨g_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	m¨g
; 
	m¨g_r_
[
PADR_
(caddr_t)];

476 
	soquŸa_¨gs
 {

477 
ªgi°î_t
 
	mdummy
;

479 
	s∆m_sysˇŒ_¨gs
 {

480 
	mdebug_Àvñ_l_
[
PADL_
()]; 
	mdebug_Àvñ
; 
	mdebug_Àvñ_r_
[
PADR_
()];

481 
	mgø˚_≥riod_l_
[
PADL_
()]; 
	mgø˚_≥riod
; 
	mgø˚_≥riod_r_
[
PADR_
()];

482 
	maddr_cou¡_l_
[
PADL_
()]; 
	maddr_cou¡
; 
	maddr_cou¡_r_
[
PADR_
()];

483 
	maddrs_l_
[
PADL_
(**)]; ** 
	maddrs
; 
	maddrs_r_
[
PADR_
(**)];

485 
	snfssvc_¨gs
 {

486 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

487 
	m¨gp_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	m¨gp
; 
	m¨gp_r_
[
PADR_
(caddr_t)];

489 
	slgëfh_¨gs
 {

490 
	m‚ame_l_
[
PADL_
(*)]; * 
	m‚ame
; 
	m‚ame_r_
[
PADR_
(*)];

491 
	mfhp_l_
[
PADL_
(
fh™dÀ
 *)]; fh™dÀ * 
	mfhp
; 
	mfhp_r_
[
PADR_
(fhandle *)];

493 
	sgëfh_¨gs
 {

494 
	m‚ame_l_
[
PADL_
(*)]; * 
	m‚ame
; 
	m‚ame_r_
[
PADR_
(*)];

495 
	mfhp_l_
[
PADL_
(
fh™dÀ
 *)]; fh™dÀ * 
	mfhp
; 
	mfhp_r_
[
PADR_
(fhandle *)];

497 
	ssyßrch_¨gs
 {

498 
	m›_l_
[
PADL_
()]; 
	m›
; 
	m›_r_
[
PADR_
()];

499 
	m∑rms_l_
[
PADL_
(*)]; * 
	m∑rms
; 
	m∑rms_r_
[
PADR_
(*)];

501 
	sπ¥io_¨gs
 {

502 
	mfun˘i⁄_l_
[
PADL_
()]; 
	mfun˘i⁄
; 
	mfun˘i⁄_r_
[
PADR_
()];

503 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

504 
	mπp_l_
[
PADL_
(
π¥io
 *)]; π¥iÿ* 
	mπp
; 
	mπp_r_
[
PADR_
(rtprio *)];

506 
	s£msys_¨gs
 {

507 
	mwhich_l_
[
PADL_
()]; 
	mwhich
; 
	mwhich_r_
[
PADR_
()];

508 
	ma2_l_
[
PADL_
()]; 
	ma2
; 
	ma2_r_
[
PADR_
()];

509 
	ma3_l_
[
PADL_
()]; 
	ma3
; 
	ma3_r_
[
PADR_
()];

510 
	ma4_l_
[
PADL_
()]; 
	ma4
; 
	ma4_r_
[
PADR_
()];

511 
	ma5_l_
[
PADL_
()]; 
	ma5
; 
	ma5_r_
[
PADR_
()];

513 
	smsgsys_¨gs
 {

514 
	mwhich_l_
[
PADL_
()]; 
	mwhich
; 
	mwhich_r_
[
PADR_
()];

515 
	ma2_l_
[
PADL_
()]; 
	ma2
; 
	ma2_r_
[
PADR_
()];

516 
	ma3_l_
[
PADL_
()]; 
	ma3
; 
	ma3_r_
[
PADR_
()];

517 
	ma4_l_
[
PADL_
()]; 
	ma4
; 
	ma4_r_
[
PADR_
()];

518 
	ma5_l_
[
PADL_
()]; 
	ma5
; 
	ma5_r_
[
PADR_
()];

519 
	ma6_l_
[
PADL_
()]; 
	ma6
; 
	ma6_r_
[
PADR_
()];

521 
	sshmsys_¨gs
 {

522 
	mwhich_l_
[
PADL_
()]; 
	mwhich
; 
	mwhich_r_
[
PADR_
()];

523 
	ma2_l_
[
PADL_
()]; 
	ma2
; 
	ma2_r_
[
PADR_
()];

524 
	ma3_l_
[
PADL_
()]; 
	ma3
; 
	ma3_r_
[
PADR_
()];

525 
	ma4_l_
[
PADL_
()]; 
	ma4
; 
	ma4_r_
[
PADR_
()];

527 
	s£tfib_¨gs
 {

528 
	mfibnum_l_
[
PADL_
()]; 
	mfibnum
; 
	mfibnum_r_
[
PADR_
()];

530 
	s¡p_adjtime_¨gs
 {

531 
	mç_l_
[
PADL_
(
timex
 *)]; timex * 
	mç
; 
	mç_r_
[
PADR_
(timex *)];

533 
	s£tgid_¨gs
 {

534 
	mgid_l_
[
PADL_
(
gid_t
)]; gid_à
	mgid
; 
	mgid_r_
[
PADR_
(gid_t)];

536 
	s£ãgid_¨gs
 {

537 
	megid_l_
[
PADL_
(
gid_t
)]; gid_à
	megid
; 
	megid_r_
[
PADR_
(gid_t)];

539 
	s£ãuid_¨gs
 {

540 
	meuid_l_
[
PADL_
(
uid_t
)]; uid_à
	meuid
; 
	meuid_r_
[
PADR_
(uid_t)];

542 
	s∑thc⁄f_¨gs
 {

543 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

544 
	m«me_l_
[
PADL_
()]; 
	m«me
; 
	m«me_r_
[
PADR_
()];

546 
	sÂ©hc⁄f_¨gs
 {

547 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

548 
	m«me_l_
[
PADL_
()]; 
	m«me
; 
	m«me_r_
[
PADR_
()];

550 
	s__gëæimô_¨gs
 {

551 
	mwhich_l_
[
PADL_
(
u_öt
)]; u_öà
	mwhich
; 
	mwhich_r_
[
PADR_
(u_int)];

552 
	mæp_l_
[
PADL_
(
æimô
 *)]; æimô * 
	mæp
; 
	mæp_r_
[
PADR_
(rlimit *)];

554 
	s__£ålimô_¨gs
 {

555 
	mwhich_l_
[
PADL_
(
u_öt
)]; u_öà
	mwhich
; 
	mwhich_r_
[
PADR_
(u_int)];

556 
	mæp_l_
[
PADL_
(
æimô
 *)]; æimô * 
	mæp
; 
	mæp_r_
[
PADR_
(rlimit *)];

558 
	ssys˘l_¨gs
 {

559 
	m«me_l_
[
PADL_
(*)]; * 
	m«me
; 
	m«me_r_
[
PADR_
(*)];

560 
	m«mñí_l_
[
PADL_
(
u_öt
)]; u_öà
	m«mñí
; 
	m«mñí_r_
[
PADR_
(u_int)];

561 
	mﬁd_l_
[
PADL_
(*)]; * 
	mﬁd
; 
	mﬁd_r_
[
PADR_
(*)];

562 
	mﬁdÀ≈_l_
[
PADL_
(
size_t
 *)]; size_à* 
	mﬁdÀ≈
; 
	mﬁdÀ≈_r_
[
PADR_
(size_t *)];

563 
	m√w_l_
[
PADL_
(*)]; * 
	m√w
; 
	m√w_r_
[
PADR_
(*)];

564 
	m√wÀn_l_
[
PADL_
(
size_t
)]; size_à
	m√wÀn
; 
	m√wÀn_r_
[
PADR_
(size_t)];

566 
	smlock_¨gs
 {

567 
	maddr_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	maddr
; 
	maddr_r_
[
PADR_
(const *)];

568 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

570 
	smu∆ock_¨gs
 {

571 
	maddr_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	maddr
; 
	maddr_r_
[
PADR_
(const *)];

572 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

574 
	sundñëe_¨gs
 {

575 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

577 
	sfutimes_¨gs
 {

578 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

579 
	mçå_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mçå
; 
	mçå_r_
[
PADR_
(timeval *)];

581 
	sgëpgid_¨gs
 {

582 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

584 
	spﬁl_¨gs
 {

585 
	mfds_l_
[
PADL_
(
pﬁlfd
 *)]; pﬁlfd * 
	mfds
; 
	mfds_r_
[
PADR_
(pollfd *)];

586 
	mnfds_l_
[
PADL_
(
u_öt
)]; u_öà
	mnfds
; 
	mnfds_r_
[
PADR_
(u_int)];

587 
	mtimeout_l_
[
PADL_
()]; 
	mtimeout
; 
	mtimeout_r_
[
PADR_
()];

589 
	s£mgë_¨gs
 {

590 
	mkey_l_
[
PADL_
(
key_t
)]; key_à
	mkey
; 
	mkey_r_
[
PADR_
(key_t)];

591 
	mn£ms_l_
[
PADL_
()]; 
	mn£ms
; 
	mn£ms_r_
[
PADR_
()];

592 
	m£mÊg_l_
[
PADL_
()]; 
	m£mÊg
; 
	m£mÊg_r_
[
PADR_
()];

594 
	s£m›_¨gs
 {

595 
	m£mid_l_
[
PADL_
()]; 
	m£mid
; 
	m£mid_r_
[
PADR_
()];

596 
	ms›s_l_
[
PADL_
(
£mbuf
 *)]; £mbu‡* 
	ms›s
; 
	ms›s_r_
[
PADR_
(sembuf *)];

597 
	mns›s_l_
[
PADL_
(
size_t
)]; size_à
	mns›s
; 
	mns›s_r_
[
PADR_
(size_t)];

599 
	smsggë_¨gs
 {

600 
	mkey_l_
[
PADL_
(
key_t
)]; key_à
	mkey
; 
	mkey_r_
[
PADR_
(key_t)];

601 
	mmsgÊg_l_
[
PADL_
()]; 
	mmsgÊg
; 
	mmsgÊg_r_
[
PADR_
()];

603 
	smsg¢d_¨gs
 {

604 
	mmsqid_l_
[
PADL_
()]; 
	mmsqid
; 
	mmsqid_r_
[
PADR_
()];

605 
	mmsgp_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mmsgp
; 
	mmsgp_r_
[
PADR_
(const *)];

606 
	mmsgsz_l_
[
PADL_
(
size_t
)]; size_à
	mmsgsz
; 
	mmsgsz_r_
[
PADR_
(size_t)];

607 
	mmsgÊg_l_
[
PADL_
()]; 
	mmsgÊg
; 
	mmsgÊg_r_
[
PADR_
()];

609 
	smsgrcv_¨gs
 {

610 
	mmsqid_l_
[
PADL_
()]; 
	mmsqid
; 
	mmsqid_r_
[
PADR_
()];

611 
	mmsgp_l_
[
PADL_
(*)]; * 
	mmsgp
; 
	mmsgp_r_
[
PADR_
(*)];

612 
	mmsgsz_l_
[
PADL_
(
size_t
)]; size_à
	mmsgsz
; 
	mmsgsz_r_
[
PADR_
(size_t)];

613 
	mmsgtyp_l_
[
PADL_
()]; 
	mmsgtyp
; 
	mmsgtyp_r_
[
PADR_
()];

614 
	mmsgÊg_l_
[
PADL_
()]; 
	mmsgÊg
; 
	mmsgÊg_r_
[
PADR_
()];

616 
	sshm©_¨gs
 {

617 
	mshmid_l_
[
PADL_
()]; 
	mshmid
; 
	mshmid_r_
[
PADR_
()];

618 
	mshmaddr_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mshmaddr
; 
	mshmaddr_r_
[
PADR_
(const *)];

619 
	mshmÊg_l_
[
PADL_
()]; 
	mshmÊg
; 
	mshmÊg_r_
[
PADR_
()];

621 
	sshmdt_¨gs
 {

622 
	mshmaddr_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mshmaddr
; 
	mshmaddr_r_
[
PADR_
(const *)];

624 
	sshmgë_¨gs
 {

625 
	mkey_l_
[
PADL_
(
key_t
)]; key_à
	mkey
; 
	mkey_r_
[
PADR_
(key_t)];

626 
	msize_l_
[
PADL_
(
size_t
)]; size_à
	msize
; 
	msize_r_
[
PADR_
(size_t)];

627 
	mshmÊg_l_
[
PADL_
()]; 
	mshmÊg
; 
	mshmÊg_r_
[
PADR_
()];

629 
	s˛ock_gëtime_¨gs
 {

630 
	m˛ock_id_l_
[
PADL_
(
˛ockid_t
)]; clockid_à
	m˛ock_id
; 
	m˛ock_id_r_
[
PADR_
(clockid_t)];

631 
	mç_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	mç
; 
	mç_r_
[
PADR_
(timespec *)];

633 
	s˛ock_£âime_¨gs
 {

634 
	m˛ock_id_l_
[
PADL_
(
˛ockid_t
)]; clockid_à
	m˛ock_id
; 
	m˛ock_id_r_
[
PADR_
(clockid_t)];

635 
	mç_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mç
; 
	mç_r_
[
PADR_
(const timespec *)];

637 
	s˛ock_gëªs_¨gs
 {

638 
	m˛ock_id_l_
[
PADL_
(
˛ockid_t
)]; clockid_à
	m˛ock_id
; 
	m˛ock_id_r_
[
PADR_
(clockid_t)];

639 
	mç_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	mç
; 
	mç_r_
[
PADR_
(timespec *)];

641 
	sktimî_¸óã_¨gs
 {

642 
	m˛ock_id_l_
[
PADL_
(
˛ockid_t
)]; clockid_à
	m˛ock_id
; 
	m˛ock_id_r_
[
PADR_
(clockid_t)];

643 
	mevp_l_
[
PADL_
(
sigevít
 *)]; sigevíà* 
	mevp
; 
	mevp_r_
[
PADR_
(sigevent *)];

644 
	mtimîid_l_
[
PADL_
(*)]; * 
	mtimîid
; 
	mtimîid_r_
[
PADR_
(*)];

646 
	sktimî_dñëe_¨gs
 {

647 
	mtimîid_l_
[
PADL_
()]; 
	mtimîid
; 
	mtimîid_r_
[
PADR_
()];

649 
	sktimî_£âime_¨gs
 {

650 
	mtimîid_l_
[
PADL_
()]; 
	mtimîid
; 
	mtimîid_r_
[
PADR_
()];

651 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

652 
	mvÆue_l_
[
PADL_
(c⁄° 
ôimî•ec
 *)]; c⁄° ôimî•e¯* 
	mvÆue
; 
	mvÆue_r_
[
PADR_
(const itimerspec *)];

653 
	movÆue_l_
[
PADL_
(
ôimî•ec
 *)]; ôimî•e¯* 
	movÆue
; 
	movÆue_r_
[
PADR_
(itimerspec *)];

655 
	sktimî_gëtime_¨gs
 {

656 
	mtimîid_l_
[
PADL_
()]; 
	mtimîid
; 
	mtimîid_r_
[
PADR_
()];

657 
	mvÆue_l_
[
PADL_
(
ôimî•ec
 *)]; ôimî•e¯* 
	mvÆue
; 
	mvÆue_r_
[
PADR_
(itimerspec *)];

659 
	sktimî_gëovîrun_¨gs
 {

660 
	mtimîid_l_
[
PADL_
()]; 
	mtimîid
; 
	mtimîid_r_
[
PADR_
()];

662 
	s«no¶ìp_¨gs
 {

663 
	mrqç_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mrqç
; 
	mrqç_r_
[
PADR_
(const timespec *)];

664 
	mrmç_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	mrmç
; 
	mrmç_r_
[
PADR_
(timespec *)];

666 
	sff˛ock_gëcou¡î_¨gs
 {

667 
	mffcou¡_l_
[
PADL_
(
ffcou¡î
 *)]; ffcou¡î * 
	mffcou¡
; 
	mffcou¡_r_
[
PADR_
(ffcounter *)];

669 
	sff˛ock_£ã°im©e_¨gs
 {

670 
	m˚°_l_
[
PADL_
(
ff˛ock_e°im©e
 *)]; ff˛ock_e°im©ê* 
	m˚°
; 
	m˚°_r_
[
PADR_
(ffclock_estimate *)];

672 
	sff˛ock_gëe°im©e_¨gs
 {

673 
	m˚°_l_
[
PADL_
(
ff˛ock_e°im©e
 *)]; ff˛ock_e°im©ê* 
	m˚°
; 
	m˚°_r_
[
PADR_
(ffclock_estimate *)];

675 
	s˛ock_«no¶ìp_¨gs
 {

676 
	m˛ock_id_l_
[
PADL_
(
˛ockid_t
)]; clockid_à
	m˛ock_id
; 
	m˛ock_id_r_
[
PADR_
(clockid_t)];

677 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

678 
	mrqç_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mrqç
; 
	mrqç_r_
[
PADR_
(const timespec *)];

679 
	mrmç_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	mrmç
; 
	mrmç_r_
[
PADR_
(timespec *)];

681 
	s˛ock_gë˝u˛ockid2_¨gs
 {

682 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

683 
	mwhich_l_
[
PADL_
()]; 
	mwhich
; 
	mwhich_r_
[
PADR_
()];

684 
	m˛ock_id_l_
[
PADL_
(
˛ockid_t
 *)]; clockid_à* 
	m˛ock_id
; 
	m˛ock_id_r_
[
PADR_
(clockid_t *)];

686 
	s¡p_gëtime_¨gs
 {

687 
	m¡vp_l_
[
PADL_
(
¡±imevÆ
 *)]; ¡±imevÆ * 
	m¡vp
; 
	m¡vp_r_
[
PADR_
(ntptimeval *)];

689 
	smöhîô_¨gs
 {

690 
	maddr_l_
[
PADL_
(*)]; * 
	maddr
; 
	maddr_r_
[
PADR_
(*)];

691 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

692 
	möhîô_l_
[
PADL_
()]; 
	möhîô
; 
	möhîô_r_
[
PADR_
()];

694 
	srf‹k_¨gs
 {

695 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

697 
	sis£tugid_¨gs
 {

698 
ªgi°î_t
 
	mdummy
;

700 
	slchown_¨gs
 {

701 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

702 
	muid_l_
[
PADL_
()]; 
	muid
; 
	muid_r_
[
PADR_
()];

703 
	mgid_l_
[
PADL_
()]; 
	mgid
; 
	mgid_r_
[
PADR_
()];

705 
	saio_ªad_¨gs
 {

706 
	maiocbp_l_
[
PADL_
(
aiocb
 *)]; aiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *)];

708 
	saio_wrôe_¨gs
 {

709 
	maiocbp_l_
[
PADL_
(
aiocb
 *)]; aiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *)];

711 
	slio_li°io_¨gs
 {

712 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

713 
	macb_li°_l_
[
PADL_
(
aiocb
 *c⁄° *)]; aiocb *c⁄° * 
	macb_li°
; 
	macb_li°_r_
[
PADR_
(aiocb *const *)];

714 
	m√¡_l_
[
PADL_
()]; 
	m√¡
; 
	m√¡_r_
[
PADR_
()];

715 
	msig_l_
[
PADL_
(
sigevít
 *)]; sigevíà* 
	msig
; 
	msig_r_
[
PADR_
(sigevent *)];

717 
	slchmod_¨gs
 {

718 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

719 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

721 
	slutimes_¨gs
 {

722 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

723 
	mçå_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mçå
; 
	mçå_r_
[
PADR_
(timeval *)];

725 
	s¥ódv_¨gs
 {

726 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

727 
	miovp_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miovp
; 
	miovp_r_
[
PADR_
(iovec *)];

728 
	miov˙t_l_
[
PADL_
(
u_öt
)]; u_öà
	miov˙t
; 
	miov˙t_r_
[
PADR_
(u_int)];

729 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

731 
	spwrôev_¨gs
 {

732 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

733 
	miovp_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miovp
; 
	miovp_r_
[
PADR_
(iovec *)];

734 
	miov˙t_l_
[
PADL_
(
u_öt
)]; u_öà
	miov˙t
; 
	miov˙t_r_
[
PADR_
(u_int)];

735 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

737 
	sfh›í_¨gs
 {

738 
	mu_fhp_l_
[
PADL_
(c⁄° 
fh™dÀ
 *)]; c⁄° fh™dÀ * 
	mu_fhp
; 
	mu_fhp_r_
[
PADR_
(const fhandle *)];

739 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

741 
	smod√xt_¨gs
 {

742 
	mmodid_l_
[
PADL_
()]; 
	mmodid
; 
	mmodid_r_
[
PADR_
()];

744 
	smod°©_¨gs
 {

745 
	mmodid_l_
[
PADL_
()]; 
	mmodid
; 
	mmodid_r_
[
PADR_
()];

746 
	m°©_l_
[
PADL_
(
moduÀ_°©
 *)]; moduÀ_°© * 
	m°©
; 
	m°©_r_
[
PADR_
(module_stat *)];

748 
	smod‚ext_¨gs
 {

749 
	mmodid_l_
[
PADL_
()]; 
	mmodid
; 
	mmodid_r_
[
PADR_
()];

751 
	smodföd_¨gs
 {

752 
	m«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m«me
; 
	m«me_r_
[
PADR_
(const *)];

754 
	skldlﬂd_¨gs
 {

755 
	mfûe_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mfûe
; 
	mfûe_r_
[
PADR_
(const *)];

757 
	skldu∆ﬂd_¨gs
 {

758 
	mfûeid_l_
[
PADL_
()]; 
	mfûeid
; 
	mfûeid_r_
[
PADR_
()];

760 
	skldföd_¨gs
 {

761 
	mfûe_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mfûe
; 
	mfûe_r_
[
PADR_
(const *)];

763 
	skld√xt_¨gs
 {

764 
	mfûeid_l_
[
PADL_
()]; 
	mfûeid
; 
	mfûeid_r_
[
PADR_
()];

766 
	skld°©_¨gs
 {

767 
	mfûeid_l_
[
PADL_
()]; 
	mfûeid
; 
	mfûeid_r_
[
PADR_
()];

768 
	m°©_l_
[
PADL_
(
kld_fûe_°©
 *)]; kld_fûe_°© * 
	m°©
; 
	m°©_r_
[
PADR_
(kld_file_stat *)];

770 
	skldfú°mod_¨gs
 {

771 
	mfûeid_l_
[
PADL_
()]; 
	mfûeid
; 
	mfûeid_r_
[
PADR_
()];

773 
	sgësid_¨gs
 {

774 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

776 
	s£åesuid_¨gs
 {

777 
	mruid_l_
[
PADL_
(
uid_t
)]; uid_à
	mruid
; 
	mruid_r_
[
PADR_
(uid_t)];

778 
	meuid_l_
[
PADL_
(
uid_t
)]; uid_à
	meuid
; 
	meuid_r_
[
PADR_
(uid_t)];

779 
	msuid_l_
[
PADL_
(
uid_t
)]; uid_à
	msuid
; 
	msuid_r_
[
PADR_
(uid_t)];

781 
	s£åesgid_¨gs
 {

782 
	mrgid_l_
[
PADL_
(
gid_t
)]; gid_à
	mrgid
; 
	mrgid_r_
[
PADR_
(gid_t)];

783 
	megid_l_
[
PADL_
(
gid_t
)]; gid_à
	megid
; 
	megid_r_
[
PADR_
(gid_t)];

784 
	msgid_l_
[
PADL_
(
gid_t
)]; gid_à
	msgid
; 
	msgid_r_
[
PADR_
(gid_t)];

786 
	saio_ªtu∫_¨gs
 {

787 
	maiocbp_l_
[
PADL_
(
aiocb
 *)]; aiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *)];

789 
	saio_su•íd_¨gs
 {

790 
	maiocbp_l_
[
PADL_
(
aiocb
 *c⁄° *)]; aiocb *c⁄° * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *const *)];

791 
	m√¡_l_
[
PADL_
()]; 
	m√¡
; 
	m√¡_r_
[
PADR_
()];

792 
	mtimeout_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mtimeout
; 
	mtimeout_r_
[
PADR_
(const timespec *)];

794 
	saio_ˇn˚l_¨gs
 {

795 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

796 
	maiocbp_l_
[
PADL_
(
aiocb
 *)]; aiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *)];

798 
	saio_îr‹_¨gs
 {

799 
	maiocbp_l_
[
PADL_
(
aiocb
 *)]; aiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *)];

801 
	syõld_¨gs
 {

802 
ªgi°î_t
 
	mdummy
;

804 
	smlockÆl_¨gs
 {

805 
	mhow_l_
[
PADL_
()]; 
	mhow
; 
	mhow_r_
[
PADR_
()];

807 
	smu∆ockÆl_¨gs
 {

808 
ªgi°î_t
 
	mdummy
;

810 
	s__gëcwd_¨gs
 {

811 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

812 
	mbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	mbuÊí
; 
	mbuÊí_r_
[
PADR_
(size_t)];

814 
	ssched_£ç¨am_¨gs
 {

815 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

816 
	m∑øm_l_
[
PADL_
(c⁄° 
sched_∑øm
 *)]; c⁄° sched_∑øm * 
	m∑øm
; 
	m∑øm_r_
[
PADR_
(const sched_param *)];

818 
	ssched_gë∑øm_¨gs
 {

819 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

820 
	m∑øm_l_
[
PADL_
(
sched_∑øm
 *)]; sched_∑øm * 
	m∑øm
; 
	m∑øm_r_
[
PADR_
(sched_param *)];

822 
	ssched_£tscheduÀr_¨gs
 {

823 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

824 
	mpﬁicy_l_
[
PADL_
()]; 
	mpﬁicy
; 
	mpﬁicy_r_
[
PADR_
()];

825 
	m∑øm_l_
[
PADL_
(c⁄° 
sched_∑øm
 *)]; c⁄° sched_∑øm * 
	m∑øm
; 
	m∑øm_r_
[
PADR_
(const sched_param *)];

827 
	ssched_gëscheduÀr_¨gs
 {

828 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

830 
	ssched_yõld_¨gs
 {

831 
ªgi°î_t
 
	mdummy
;

833 
	ssched_gë_¥i‹ôy_max_¨gs
 {

834 
	mpﬁicy_l_
[
PADL_
()]; 
	mpﬁicy
; 
	mpﬁicy_r_
[
PADR_
()];

836 
	ssched_gë_¥i‹ôy_mö_¨gs
 {

837 
	mpﬁicy_l_
[
PADL_
()]; 
	mpﬁicy
; 
	mpﬁicy_r_
[
PADR_
()];

839 
	ssched_º_gë_öãrvÆ_¨gs
 {

840 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

841 
	möãrvÆ_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	möãrvÆ
; 
	möãrvÆ_r_
[
PADR_
(timespec *)];

843 
	suåa˚_¨gs
 {

844 
	maddr_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	maddr
; 
	maddr_r_
[
PADR_
(const *)];

845 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

847 
	skldsym_¨gs
 {

848 
	mfûeid_l_
[
PADL_
()]; 
	mfûeid
; 
	mfûeid_r_
[
PADR_
()];

849 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

850 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

852 
	sjaû_¨gs
 {

853 
	mjaû_l_
[
PADL_
(
jaû
 *)]; jaû * 
	mjaû
; 
	mjaû_r_
[
PADR_
(jail *)];

855 
	s¬pfs_sysˇŒ_¨gs
 {

856 
	m›î©i⁄_l_
[
PADL_
()]; 
	m›î©i⁄
; 
	m›î©i⁄_r_
[
PADR_
()];

857 
	ma_∑thP_l_
[
PADL_
(*)]; * 
	ma_∑thP
; 
	ma_∑thP_r_
[
PADR_
(*)];

858 
	ma_›code_l_
[
PADL_
()]; 
	ma_›code
; 
	ma_›code_r_
[
PADR_
()];

859 
	ma_∑ømsP_l_
[
PADL_
(*)]; * 
	ma_∑ømsP
; 
	ma_∑ømsP_r_
[
PADR_
(*)];

860 
	ma_fﬁlowSymlöks_l_
[
PADL_
()]; 
	ma_fﬁlowSymlöks
; 
	ma_fﬁlowSymlöks_r_
[
PADR_
()];

862 
	ssig¥ocmask_¨gs
 {

863 
	mhow_l_
[
PADL_
()]; 
	mhow
; 
	mhow_r_
[
PADR_
()];

864 
	m£t_l_
[
PADL_
(c⁄° 
sig£t_t
 *)]; c⁄° sig£t_à* 
	m£t
; 
	m£t_r_
[
PADR_
(const sigset_t *)];

865 
	mo£t_l_
[
PADL_
(
sig£t_t
 *)]; sig£t_à* 
	mo£t
; 
	mo£t_r_
[
PADR_
(sigset_t *)];

867 
	ssigsu•íd_¨gs
 {

868 
	msigmask_l_
[
PADL_
(c⁄° 
sig£t_t
 *)]; c⁄° sig£t_à* 
	msigmask
; 
	msigmask_r_
[
PADR_
(const sigset_t *)];

870 
	ssig≥ndög_¨gs
 {

871 
	m£t_l_
[
PADL_
(
sig£t_t
 *)]; sig£t_à* 
	m£t
; 
	m£t_r_
[
PADR_
(sigset_t *)];

873 
	ssigtimedwaô_¨gs
 {

874 
	m£t_l_
[
PADL_
(c⁄° 
sig£t_t
 *)]; c⁄° sig£t_à* 
	m£t
; 
	m£t_r_
[
PADR_
(const sigset_t *)];

875 
	möfo_l_
[
PADL_
(
sigöfo_t
 *)]; sigöfo_à* 
	möfo
; 
	möfo_r_
[
PADR_
(siginfo_t *)];

876 
	mtimeout_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mtimeout
; 
	mtimeout_r_
[
PADR_
(const timespec *)];

878 
	ssigwaôöfo_¨gs
 {

879 
	m£t_l_
[
PADL_
(c⁄° 
sig£t_t
 *)]; c⁄° sig£t_à* 
	m£t
; 
	m£t_r_
[
PADR_
(const sigset_t *)];

880 
	möfo_l_
[
PADL_
(
sigöfo_t
 *)]; sigöfo_à* 
	möfo
; 
	möfo_r_
[
PADR_
(siginfo_t *)];

882 
	s__a˛_gë_fûe_¨gs
 {

883 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

884 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

885 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

887 
	s__a˛_£t_fûe_¨gs
 {

888 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

889 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

890 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

892 
	s__a˛_gë_fd_¨gs
 {

893 
	mfûedes_l_
[
PADL_
()]; 
	mfûedes
; 
	mfûedes_r_
[
PADR_
()];

894 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

895 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

897 
	s__a˛_£t_fd_¨gs
 {

898 
	mfûedes_l_
[
PADL_
()]; 
	mfûedes
; 
	mfûedes_r_
[
PADR_
()];

899 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

900 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

902 
	s__a˛_dñëe_fûe_¨gs
 {

903 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

904 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

906 
	s__a˛_dñëe_fd_¨gs
 {

907 
	mfûedes_l_
[
PADL_
()]; 
	mfûedes
; 
	mfûedes_r_
[
PADR_
()];

908 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

910 
	s__a˛_a˛check_fûe_¨gs
 {

911 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

912 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

913 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

915 
	s__a˛_a˛check_fd_¨gs
 {

916 
	mfûedes_l_
[
PADL_
()]; 
	mfûedes
; 
	mfûedes_r_
[
PADR_
()];

917 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

918 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

920 
	sexèâr˘l_¨gs
 {

921 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

922 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

923 
	mfûíame_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mfûíame
; 
	mfûíame_r_
[
PADR_
(const *)];

924 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

925 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

927 
	sexèâr_£t_fûe_¨gs
 {

928 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

929 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

930 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

931 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

932 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

934 
	sexèâr_gë_fûe_¨gs
 {

935 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

936 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

937 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

938 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

939 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

941 
	sexèâr_dñëe_fûe_¨gs
 {

942 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

943 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

944 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

946 
	saio_waôcom∂ëe_¨gs
 {

947 
	maiocbp_l_
[
PADL_
(
aiocb
 **)]; aiocb ** 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb **)];

948 
	mtimeout_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	mtimeout
; 
	mtimeout_r_
[
PADR_
(timespec *)];

950 
	sgëªsuid_¨gs
 {

951 
	mruid_l_
[
PADL_
(
uid_t
 *)]; uid_à* 
	mruid
; 
	mruid_r_
[
PADR_
(uid_t *)];

952 
	meuid_l_
[
PADL_
(
uid_t
 *)]; uid_à* 
	meuid
; 
	meuid_r_
[
PADR_
(uid_t *)];

953 
	msuid_l_
[
PADL_
(
uid_t
 *)]; uid_à* 
	msuid
; 
	msuid_r_
[
PADR_
(uid_t *)];

955 
	sgëªsgid_¨gs
 {

956 
	mrgid_l_
[
PADL_
(
gid_t
 *)]; gid_à* 
	mrgid
; 
	mrgid_r_
[
PADR_
(gid_t *)];

957 
	megid_l_
[
PADL_
(
gid_t
 *)]; gid_à* 
	megid
; 
	megid_r_
[
PADR_
(gid_t *)];

958 
	msgid_l_
[
PADL_
(
gid_t
 *)]; gid_à* 
	msgid
; 
	msgid_r_
[
PADR_
(gid_t *)];

960 
	skqueue_¨gs
 {

961 
ªgi°î_t
 
	mdummy
;

963 
	sexèâr_£t_fd_¨gs
 {

964 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

965 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

966 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

967 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

968 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

970 
	sexèâr_gë_fd_¨gs
 {

971 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

972 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

973 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

974 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

975 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

977 
	sexèâr_dñëe_fd_¨gs
 {

978 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

979 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

980 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

982 
	s__£tugid_¨gs
 {

983 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

985 
	sóc˚ss_¨gs
 {

986 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

987 
	mamode_l_
[
PADL_
()]; 
	mamode
; 
	mamode_r_
[
PADR_
()];

989 
	safs3_sysˇŒ_¨gs
 {

990 
	msysˇŒ_l_
[
PADL_
()]; 
	msysˇŒ
; 
	msysˇŒ_r_
[
PADR_
()];

991 
	m∑rm1_l_
[
PADL_
()]; 
	m∑rm1
; 
	m∑rm1_r_
[
PADR_
()];

992 
	m∑rm2_l_
[
PADL_
()]; 
	m∑rm2
; 
	m∑rm2_r_
[
PADR_
()];

993 
	m∑rm3_l_
[
PADL_
()]; 
	m∑rm3
; 
	m∑rm3_r_
[
PADR_
()];

994 
	m∑rm4_l_
[
PADL_
()]; 
	m∑rm4
; 
	m∑rm4_r_
[
PADR_
()];

995 
	m∑rm5_l_
[
PADL_
()]; 
	m∑rm5
; 
	m∑rm5_r_
[
PADR_
()];

996 
	m∑rm6_l_
[
PADL_
()]; 
	m∑rm6
; 
	m∑rm6_r_
[
PADR_
()];

998 
	snmou¡_¨gs
 {

999 
	miovp_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miovp
; 
	miovp_r_
[
PADR_
(iovec *)];

1000 
	miov˙t_l_
[
PADL_
()]; 
	miov˙t
; 
	miov˙t_r_
[
PADR_
()];

1001 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1003 
	s__mac_gë_¥oc_¨gs
 {

1004 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1006 
	s__mac_£t_¥oc_¨gs
 {

1007 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1009 
	s__mac_gë_fd_¨gs
 {

1010 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1011 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1013 
	s__mac_gë_fûe_¨gs
 {

1014 
	m∑th_p_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th_p
; 
	m∑th_p_r_
[
PADR_
(const *)];

1015 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1017 
	s__mac_£t_fd_¨gs
 {

1018 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1019 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1021 
	s__mac_£t_fûe_¨gs
 {

1022 
	m∑th_p_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th_p
; 
	m∑th_p_r_
[
PADR_
(const *)];

1023 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1025 
	skív_¨gs
 {

1026 
	mwh©_l_
[
PADL_
()]; 
	mwh©
; 
	mwh©_r_
[
PADR_
()];

1027 
	m«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m«me
; 
	m«me_r_
[
PADR_
(const *)];

1028 
	mvÆue_l_
[
PADL_
(*)]; * 
	mvÆue
; 
	mvÆue_r_
[
PADR_
(*)];

1029 
	mÀn_l_
[
PADL_
()]; 
	mÀn
; 
	mÀn_r_
[
PADR_
()];

1031 
	slchÊags_¨gs
 {

1032 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1033 
	mÊags_l_
[
PADL_
(
u_l⁄g
)]; u_l⁄g 
	mÊags
; 
	mÊags_r_
[
PADR_
(u_long)];

1035 
	suuidgí_¨gs
 {

1036 
	m°‹e_l_
[
PADL_
(
uuid
 *)]; uuid * 
	m°‹e
; 
	m°‹e_r_
[
PADR_
(uuid *)];

1037 
	mcou¡_l_
[
PADL_
()]; 
	mcou¡
; 
	mcou¡_r_
[
PADR_
()];

1039 
	s£ndfûe_¨gs
 {

1040 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1041 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

1042 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

1043 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

1044 
	mhdå_l_
[
PADL_
(
sf_hdå
 *)]; sf_hdå * 
	mhdå
; 
	mhdå_r_
[
PADR_
(sf_hdtr *)];

1045 
	msbyãs_l_
[
PADL_
(
off_t
 *)]; off_à* 
	msbyãs
; 
	msbyãs_r_
[
PADR_
(off_t *)];

1046 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1048 
	smac_sysˇŒ_¨gs
 {

1049 
	mpﬁicy_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mpﬁicy
; 
	mpﬁicy_r_
[
PADR_
(const *)];

1050 
	mˇŒ_l_
[
PADL_
()]; 
	mˇŒ
; 
	mˇŒ_r_
[
PADR_
()];

1051 
	m¨g_l_
[
PADL_
(*)]; * 
	m¨g
; 
	m¨g_r_
[
PADR_
(*)];

1053 
	sk£m_˛o£_¨gs
 {

1054 
	mid_l_
[
PADL_
(
£mid_t
)]; semid_à
	mid
; 
	mid_r_
[
PADR_
(semid_t)];

1056 
	sk£m_po°_¨gs
 {

1057 
	mid_l_
[
PADL_
(
£mid_t
)]; semid_à
	mid
; 
	mid_r_
[
PADR_
(semid_t)];

1059 
	sk£m_waô_¨gs
 {

1060 
	mid_l_
[
PADL_
(
£mid_t
)]; semid_à
	mid
; 
	mid_r_
[
PADR_
(semid_t)];

1062 
	sk£m_åywaô_¨gs
 {

1063 
	mid_l_
[
PADL_
(
£mid_t
)]; semid_à
	mid
; 
	mid_r_
[
PADR_
(semid_t)];

1065 
	sk£m_öô_¨gs
 {

1066 
	midp_l_
[
PADL_
(
£mid_t
 *)]; semid_à* 
	midp
; 
	midp_r_
[
PADR_
(semid_t *)];

1067 
	mvÆue_l_
[
PADL_
()]; 
	mvÆue
; 
	mvÆue_r_
[
PADR_
()];

1069 
	sk£m_›í_¨gs
 {

1070 
	midp_l_
[
PADL_
(
£mid_t
 *)]; semid_à* 
	midp
; 
	midp_r_
[
PADR_
(semid_t *)];

1071 
	m«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m«me
; 
	m«me_r_
[
PADR_
(const *)];

1072 
	moÊag_l_
[
PADL_
()]; 
	moÊag
; 
	moÊag_r_
[
PADR_
()];

1073 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1074 
	mvÆue_l_
[
PADL_
()]; 
	mvÆue
; 
	mvÆue_r_
[
PADR_
()];

1076 
	sk£m_u∆ök_¨gs
 {

1077 
	m«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m«me
; 
	m«me_r_
[
PADR_
(const *)];

1079 
	sk£m_gëvÆue_¨gs
 {

1080 
	mid_l_
[
PADL_
(
£mid_t
)]; semid_à
	mid
; 
	mid_r_
[
PADR_
(semid_t)];

1081 
	mvÆ_l_
[
PADL_
(*)]; * 
	mvÆ
; 
	mvÆ_r_
[
PADR_
(*)];

1083 
	sk£m_de°roy_¨gs
 {

1084 
	mid_l_
[
PADL_
(
£mid_t
)]; semid_à
	mid
; 
	mid_r_
[
PADR_
(semid_t)];

1086 
	s__mac_gë_pid_¨gs
 {

1087 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

1088 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1090 
	s__mac_gë_lök_¨gs
 {

1091 
	m∑th_p_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th_p
; 
	m∑th_p_r_
[
PADR_
(const *)];

1092 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1094 
	s__mac_£t_lök_¨gs
 {

1095 
	m∑th_p_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th_p
; 
	m∑th_p_r_
[
PADR_
(const *)];

1096 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1098 
	sexèâr_£t_lök_¨gs
 {

1099 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1100 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

1101 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

1102 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

1103 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

1105 
	sexèâr_gë_lök_¨gs
 {

1106 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1107 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

1108 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

1109 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

1110 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

1112 
	sexèâr_dñëe_lök_¨gs
 {

1113 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1114 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

1115 
	m©å«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m©å«me
; 
	m©å«me_r_
[
PADR_
(const *)];

1117 
	s__mac_execve_¨gs
 {

1118 
	m‚ame_l_
[
PADL_
(*)]; * 
	m‚ame
; 
	m‚ame_r_
[
PADR_
(*)];

1119 
	m¨gv_l_
[
PADL_
(**)]; ** 
	m¨gv
; 
	m¨gv_r_
[
PADR_
(**)];

1120 
	mívv_l_
[
PADL_
(**)]; ** 
	mívv
; 
	mívv_r_
[
PADR_
(**)];

1121 
	mmac_p_l_
[
PADL_
(
mac
 *)]; ma¯* 
	mmac_p
; 
	mmac_p_r_
[
PADR_
(mac *)];

1123 
	ssiga˘i⁄_¨gs
 {

1124 
	msig_l_
[
PADL_
()]; 
	msig
; 
	msig_r_
[
PADR_
()];

1125 
	ma˘_l_
[
PADL_
(c⁄° 
siga˘i⁄
 *)]; c⁄° siga˘i⁄ * 
	ma˘
; 
	ma˘_r_
[
PADR_
(const sigaction *)];

1126 
	mﬂ˘_l_
[
PADL_
(
siga˘i⁄
 *)]; siga˘i⁄ * 
	mﬂ˘
; 
	mﬂ˘_r_
[
PADR_
(sigaction *)];

1128 
	ssigªtu∫_¨gs
 {

1129 
	msig˙txp_l_
[
PADL_
(c⁄° 
__uc⁄ãxt
 *)]; c⁄° __uc⁄ãxà* 
	msig˙txp
; 
	msig˙txp_r_
[
PADR_
(const __ucontext *)];

1131 
	sgëc⁄ãxt_¨gs
 {

1132 
	mu˝_l_
[
PADL_
(
__uc⁄ãxt
 *)]; __uc⁄ãxà* 
	mu˝
; 
	mu˝_r_
[
PADR_
(__ucontext *)];

1134 
	s£tc⁄ãxt_¨gs
 {

1135 
	mu˝_l_
[
PADL_
(c⁄° 
__uc⁄ãxt
 *)]; c⁄° __uc⁄ãxà* 
	mu˝
; 
	mu˝_r_
[
PADR_
(const __ucontext *)];

1137 
	ssw≠c⁄ãxt_¨gs
 {

1138 
	mou˝_l_
[
PADL_
(
__uc⁄ãxt
 *)]; __uc⁄ãxà* 
	mou˝
; 
	mou˝_r_
[
PADR_
(__ucontext *)];

1139 
	mu˝_l_
[
PADL_
(c⁄° 
__uc⁄ãxt
 *)]; c⁄° __uc⁄ãxà* 
	mu˝
; 
	mu˝_r_
[
PADR_
(const __ucontext *)];

1141 
	ssw≠off_¨gs
 {

1142 
	m«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m«me
; 
	m«me_r_
[
PADR_
(const *)];

1144 
	s__a˛_gë_lök_¨gs
 {

1145 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1146 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

1147 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

1149 
	s__a˛_£t_lök_¨gs
 {

1150 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1151 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

1152 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

1154 
	s__a˛_dñëe_lök_¨gs
 {

1155 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1156 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

1158 
	s__a˛_a˛check_lök_¨gs
 {

1159 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1160 
	mty≥_l_
[
PADL_
(
a˛_ty≥_t
)];á˛_ty≥_à
	mty≥
; 
	mty≥_r_
[
PADR_
(acl_type_t)];

1161 
	ma˛p_l_
[
PADL_
(
a˛
 *)]; a˛ * 
	ma˛p
; 
	ma˛p_r_
[
PADR_
(acl *)];

1163 
	ssigwaô_¨gs
 {

1164 
	m£t_l_
[
PADL_
(c⁄° 
sig£t_t
 *)]; c⁄° sig£t_à* 
	m£t
; 
	m£t_r_
[
PADR_
(const sigset_t *)];

1165 
	msig_l_
[
PADL_
(*)]; * 
	msig
; 
	msig_r_
[
PADR_
(*)];

1167 
	sthr_¸óã_¨gs
 {

1168 
	m˘x_l_
[
PADL_
(
uc⁄ãxt_t
 *)]; uc⁄ãxt_à* 
	m˘x
; 
	m˘x_r_
[
PADR_
(ucontext_t *)];

1169 
	mid_l_
[
PADL_
(*)]; * 
	mid
; 
	mid_r_
[
PADR_
(*)];

1170 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1172 
	sthr_exô_¨gs
 {

1173 
	m°©e_l_
[
PADL_
(*)]; * 
	m°©e
; 
	m°©e_r_
[
PADR_
(*)];

1175 
	sthr_£lf_¨gs
 {

1176 
	mid_l_
[
PADL_
(*)]; * 
	mid
; 
	mid_r_
[
PADR_
(*)];

1178 
	sthr_kûl_¨gs
 {

1179 
	mid_l_
[
PADL_
()]; 
	mid
; 
	mid_r_
[
PADR_
()];

1180 
	msig_l_
[
PADL_
()]; 
	msig
; 
	msig_r_
[
PADR_
()];

1182 
	sjaû_©èch_¨gs
 {

1183 
	mjid_l_
[
PADL_
()]; 
	mjid
; 
	mjid_r_
[
PADR_
()];

1185 
	sexèâr_li°_fd_¨gs
 {

1186 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1187 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

1188 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

1189 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

1191 
	sexèâr_li°_fûe_¨gs
 {

1192 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1193 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

1194 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

1195 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

1197 
	sexèâr_li°_lök_¨gs
 {

1198 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1199 
	m©å«me•a˚_l_
[
PADL_
()]; 
	m©å«me•a˚
; 
	m©å«me•a˚_r_
[
PADR_
()];

1200 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

1201 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

1203 
	sk£m_timedwaô_¨gs
 {

1204 
	mid_l_
[
PADL_
(
£mid_t
)]; semid_à
	mid
; 
	mid_r_
[
PADR_
(semid_t)];

1205 
	mab°ime_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mab°ime
; 
	mab°ime_r_
[
PADR_
(const timespec *)];

1207 
	sthr_su•íd_¨gs
 {

1208 
	mtimeout_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mtimeout
; 
	mtimeout_r_
[
PADR_
(const timespec *)];

1210 
	sthr_wake_¨gs
 {

1211 
	mid_l_
[
PADL_
()]; 
	mid
; 
	mid_r_
[
PADR_
()];

1213 
	skldu∆ﬂdf_¨gs
 {

1214 
	mfûeid_l_
[
PADL_
()]; 
	mfûeid
; 
	mfûeid_r_
[
PADR_
()];

1215 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1217 
	saudô_¨gs
 {

1218 
	mªc‹d_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mªc‹d
; 
	mªc‹d_r_
[
PADR_
(const *)];

1219 
	mÀngth_l_
[
PADL_
(
u_öt
)]; u_öà
	mÀngth
; 
	mÀngth_r_
[
PADR_
(u_int)];

1221 
	saudô⁄_¨gs
 {

1222 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

1223 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

1224 
	mÀngth_l_
[
PADL_
(
u_öt
)]; u_öà
	mÀngth
; 
	mÀngth_r_
[
PADR_
(u_int)];

1226 
	sgëauid_¨gs
 {

1227 
	mauid_l_
[
PADL_
(
uid_t
 *)]; uid_à* 
	mauid
; 
	mauid_r_
[
PADR_
(uid_t *)];

1229 
	s£èuid_¨gs
 {

1230 
	mauid_l_
[
PADL_
(
uid_t
 *)]; uid_à* 
	mauid
; 
	mauid_r_
[
PADR_
(uid_t *)];

1232 
	sgëaudô_¨gs
 {

1233 
	maudôöfo_l_
[
PADL_
(
audôöfo
 *)]; audôöfÿ* 
	maudôöfo
; 
	maudôöfo_r_
[
PADR_
(auditinfo *)];

1235 
	s£èudô_¨gs
 {

1236 
	maudôöfo_l_
[
PADL_
(
audôöfo
 *)]; audôöfÿ* 
	maudôöfo
; 
	maudôöfo_r_
[
PADR_
(auditinfo *)];

1238 
	sgëaudô_addr_¨gs
 {

1239 
	maudôöfo_addr_l_
[
PADL_
(
audôöfo_addr
 *)]; audôöfo_add∏* 
	maudôöfo_addr
; 
	maudôöfo_addr_r_
[
PADR_
(auditinfo_addr *)];

1240 
	mÀngth_l_
[
PADL_
(
u_öt
)]; u_öà
	mÀngth
; 
	mÀngth_r_
[
PADR_
(u_int)];

1242 
	s£èudô_addr_¨gs
 {

1243 
	maudôöfo_addr_l_
[
PADL_
(
audôöfo_addr
 *)]; audôöfo_add∏* 
	maudôöfo_addr
; 
	maudôöfo_addr_r_
[
PADR_
(auditinfo_addr *)];

1244 
	mÀngth_l_
[
PADL_
(
u_öt
)]; u_öà
	mÀngth
; 
	mÀngth_r_
[
PADR_
(u_int)];

1246 
	saudô˘l_¨gs
 {

1247 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1249 
	s_umtx_›_¨gs
 {

1250 
	mobj_l_
[
PADL_
(*)]; * 
	mobj
; 
	mobj_r_
[
PADR_
(*)];

1251 
	m›_l_
[
PADL_
()]; 
	m›
; 
	m›_r_
[
PADR_
()];

1252 
	mvÆ_l_
[
PADL_
(
u_l⁄g
)]; u_l⁄g 
	mvÆ
; 
	mvÆ_r_
[
PADR_
(u_long)];

1253 
	muaddr1_l_
[
PADL_
(*)]; * 
	muaddr1
; 
	muaddr1_r_
[
PADR_
(*)];

1254 
	muaddr2_l_
[
PADL_
(*)]; * 
	muaddr2
; 
	muaddr2_r_
[
PADR_
(*)];

1256 
	sthr_√w_¨gs
 {

1257 
	m∑øm_l_
[
PADL_
(
thr_∑øm
 *)]; thr_∑øm * 
	m∑øm
; 
	m∑øm_r_
[
PADR_
(thr_param *)];

1258 
	m∑øm_size_l_
[
PADL_
()]; 
	m∑øm_size
; 
	m∑øm_size_r_
[
PADR_
()];

1260 
	ssigqueue_¨gs
 {

1261 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

1262 
	msignum_l_
[
PADL_
()]; 
	msignum
; 
	msignum_r_
[
PADR_
()];

1263 
	mvÆue_l_
[
PADL_
(*)]; * 
	mvÆue
; 
	mvÆue_r_
[
PADR_
(*)];

1265 
	skmq_›í_¨gs
 {

1266 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1267 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1268 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1269 
	m©å_l_
[
PADL_
(c⁄° 
mq_©å
 *)]; c⁄° mq_©å * 
	m©å
; 
	m©å_r_
[
PADR_
(const mq_attr *)];

1271 
	skmq_£èâr_¨gs
 {

1272 
	mmqd_l_
[
PADL_
()]; 
	mmqd
; 
	mmqd_r_
[
PADR_
()];

1273 
	m©å_l_
[
PADL_
(c⁄° 
mq_©å
 *)]; c⁄° mq_©å * 
	m©å
; 
	m©å_r_
[
PADR_
(const mq_attr *)];

1274 
	mﬂâr_l_
[
PADL_
(
mq_©å
 *)]; mq_©å * 
	mﬂâr
; 
	mﬂâr_r_
[
PADR_
(mq_attr *)];

1276 
	skmq_timedª˚ive_¨gs
 {

1277 
	mmqd_l_
[
PADL_
()]; 
	mmqd
; 
	mmqd_r_
[
PADR_
()];

1278 
	mmsg_±r_l_
[
PADL_
(*)]; * 
	mmsg_±r
; 
	mmsg_±r_r_
[
PADR_
(*)];

1279 
	mmsg_Àn_l_
[
PADL_
(
size_t
)]; size_à
	mmsg_Àn
; 
	mmsg_Àn_r_
[
PADR_
(size_t)];

1280 
	mmsg_¥io_l_
[
PADL_
(*)]; * 
	mmsg_¥io
; 
	mmsg_¥io_r_
[
PADR_
(*)];

1281 
	mabs_timeout_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mabs_timeout
; 
	mabs_timeout_r_
[
PADR_
(const timespec *)];

1283 
	skmq_timed£nd_¨gs
 {

1284 
	mmqd_l_
[
PADL_
()]; 
	mmqd
; 
	mmqd_r_
[
PADR_
()];

1285 
	mmsg_±r_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mmsg_±r
; 
	mmsg_±r_r_
[
PADR_
(const *)];

1286 
	mmsg_Àn_l_
[
PADL_
(
size_t
)]; size_à
	mmsg_Àn
; 
	mmsg_Àn_r_
[
PADR_
(size_t)];

1287 
	mmsg_¥io_l_
[
PADL_
()]; 
	mmsg_¥io
; 
	mmsg_¥io_r_
[
PADR_
()];

1288 
	mabs_timeout_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mabs_timeout
; 
	mabs_timeout_r_
[
PADR_
(const timespec *)];

1290 
	skmq_nŸify_¨gs
 {

1291 
	mmqd_l_
[
PADL_
()]; 
	mmqd
; 
	mmqd_r_
[
PADR_
()];

1292 
	msigev_l_
[
PADL_
(c⁄° 
sigevít
 *)]; c⁄° sigevíà* 
	msigev
; 
	msigev_r_
[
PADR_
(const sigevent *)];

1294 
	skmq_u∆ök_¨gs
 {

1295 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1297 
	sab‹t2_¨gs
 {

1298 
	mwhy_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mwhy
; 
	mwhy_r_
[
PADR_
(const *)];

1299 
	m«rgs_l_
[
PADL_
()]; 
	m«rgs
; 
	m«rgs_r_
[
PADR_
()];

1300 
	m¨gs_l_
[
PADL_
(**)]; ** 
	m¨gs
; 
	m¨gs_r_
[
PADR_
(**)];

1302 
	sthr_£t_«me_¨gs
 {

1303 
	mid_l_
[
PADL_
()]; 
	mid
; 
	mid_r_
[
PADR_
()];

1304 
	m«me_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m«me
; 
	m«me_r_
[
PADR_
(const *)];

1306 
	saio_fsync_¨gs
 {

1307 
	m›_l_
[
PADL_
()]; 
	m›
; 
	m›_r_
[
PADR_
()];

1308 
	maiocbp_l_
[
PADL_
(
aiocb
 *)]; aiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *)];

1310 
	sπ¥io_thªad_¨gs
 {

1311 
	mfun˘i⁄_l_
[
PADL_
()]; 
	mfun˘i⁄
; 
	mfun˘i⁄_r_
[
PADR_
()];

1312 
	mlwpid_l_
[
PADL_
(
lwpid_t
)];Üwpid_à
	mlwpid
; 
	mlwpid_r_
[
PADR_
(lwpid_t)];

1313 
	mπp_l_
[
PADL_
(
π¥io
 *)]; π¥iÿ* 
	mπp
; 
	mπp_r_
[
PADR_
(rtprio *)];

1315 
	ss˘p_≥ñoff_¨gs
 {

1316 
	msd_l_
[
PADL_
()]; 
	msd
; 
	msd_r_
[
PADR_
()];

1317 
	m«me_l_
[
PADL_
(
uöt32_t
)]; uöt32_à
	m«me
; 
	m«me_r_
[
PADR_
(uint32_t)];

1319 
	ss˘p_gíîic_£ndmsg_¨gs
 {

1320 
	msd_l_
[
PADL_
()]; 
	msd
; 
	msd_r_
[
PADR_
()];

1321 
	mmsg_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mmsg
; 
	mmsg_r_
[
PADR_
(caddr_t)];

1322 
	mmÀn_l_
[
PADL_
()]; 
	mmÀn
; 
	mmÀn_r_
[
PADR_
()];

1323 
	mto_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mto
; 
	mto_r_
[
PADR_
(caddr_t)];

1324 
	mtﬁí_l_
[
PADL_
(
__sockÀn_t
)]; __sockÀn_à
	mtﬁí
; 
	mtﬁí_r_
[
PADR_
(__socklen_t)];

1325 
	msöfo_l_
[
PADL_
(
s˘p_¢drcvöfo
 *)]; s˘p_¢drcvöfÿ* 
	msöfo
; 
	msöfo_r_
[
PADR_
(sctp_sndrcvinfo *)];

1326 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1328 
	ss˘p_gíîic_£ndmsg_iov_¨gs
 {

1329 
	msd_l_
[
PADL_
()]; 
	msd
; 
	msd_r_
[
PADR_
()];

1330 
	miov_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miov
; 
	miov_r_
[
PADR_
(iovec *)];

1331 
	miovÀn_l_
[
PADL_
()]; 
	miovÀn
; 
	miovÀn_r_
[
PADR_
()];

1332 
	mto_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mto
; 
	mto_r_
[
PADR_
(caddr_t)];

1333 
	mtﬁí_l_
[
PADL_
(
__sockÀn_t
)]; __sockÀn_à
	mtﬁí
; 
	mtﬁí_r_
[
PADR_
(__socklen_t)];

1334 
	msöfo_l_
[
PADL_
(
s˘p_¢drcvöfo
 *)]; s˘p_¢drcvöfÿ* 
	msöfo
; 
	msöfo_r_
[
PADR_
(sctp_sndrcvinfo *)];

1335 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1337 
	ss˘p_gíîic_ªcvmsg_¨gs
 {

1338 
	msd_l_
[
PADL_
()]; 
	msd
; 
	msd_r_
[
PADR_
()];

1339 
	miov_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miov
; 
	miov_r_
[
PADR_
(iovec *)];

1340 
	miovÀn_l_
[
PADL_
()]; 
	miovÀn
; 
	miovÀn_r_
[
PADR_
()];

1341 
	m‰om_l_
[
PADL_
(
sockaddr
 *)]; sockadd∏* 
	m‰om
; 
	m‰om_r_
[
PADR_
(sockaddr *)];

1342 
	m‰omÀ«ddr_l_
[
PADL_
(
__sockÀn_t
 *)]; __sockÀn_à* 
	m‰omÀ«ddr
; 
	m‰omÀ«ddr_r_
[
PADR_
(__socklen_t *)];

1343 
	msöfo_l_
[
PADL_
(
s˘p_¢drcvöfo
 *)]; s˘p_¢drcvöfÿ* 
	msöfo
; 
	msöfo_r_
[
PADR_
(sctp_sndrcvinfo *)];

1344 
	mmsg_Êags_l_
[
PADL_
(*)]; * 
	mmsg_Êags
; 
	mmsg_Êags_r_
[
PADR_
(*)];

1346 
	s¥ód_¨gs
 {

1347 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1348 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

1349 
	mnbyã_l_
[
PADL_
(
size_t
)]; size_à
	mnbyã
; 
	mnbyã_r_
[
PADR_
(size_t)];

1350 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

1352 
	spwrôe_¨gs
 {

1353 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1354 
	mbuf_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mbuf
; 
	mbuf_r_
[
PADR_
(const *)];

1355 
	mnbyã_l_
[
PADL_
(
size_t
)]; size_à
	mnbyã
; 
	mnbyã_r_
[
PADR_
(size_t)];

1356 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

1358 
	smm≠_¨gs
 {

1359 
	maddr_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	maddr
; 
	maddr_r_
[
PADR_
(caddr_t)];

1360 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

1361 
	m¥Ÿ_l_
[
PADL_
()]; 
	m¥Ÿ
; 
	m¥Ÿ_r_
[
PADR_
()];

1362 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1363 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1364 
	mpos_l_
[
PADL_
(
off_t
)]; off_à
	mpos
; 
	mpos_r_
[
PADR_
(off_t)];

1366 
	sl£ek_¨gs
 {

1367 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1368 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

1369 
	mwhí˚_l_
[
PADL_
()]; 
	mwhí˚
; 
	mwhí˚_r_
[
PADR_
()];

1371 
	såunˇã_¨gs
 {

1372 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1373 
	mÀngth_l_
[
PADL_
(
off_t
)]; off_à
	mÀngth
; 
	mÀngth_r_
[
PADR_
(off_t)];

1375 
	s·runˇã_¨gs
 {

1376 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1377 
	mÀngth_l_
[
PADL_
(
off_t
)]; off_à
	mÀngth
; 
	mÀngth_r_
[
PADR_
(off_t)];

1379 
	sthr_kûl2_¨gs
 {

1380 
	mpid_l_
[
PADL_
(
pid_t
)];Öid_à
	mpid
; 
	mpid_r_
[
PADR_
(pid_t)];

1381 
	mid_l_
[
PADL_
()]; 
	mid
; 
	mid_r_
[
PADR_
()];

1382 
	msig_l_
[
PADL_
()]; 
	msig
; 
	msig_r_
[
PADR_
()];

1384 
	sshm_›í_¨gs
 {

1385 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1386 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1387 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1389 
	sshm_u∆ök_¨gs
 {

1390 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1392 
	s˝u£t_¨gs
 {

1393 
	m£tid_l_
[
PADL_
(
˝u£tid_t
 *)]; cpu£tid_à* 
	m£tid
; 
	m£tid_r_
[
PADR_
(cpusetid_t *)];

1395 
	s˝u£t_£tid_¨gs
 {

1396 
	mwhich_l_
[
PADL_
(
˝uwhich_t
)]; cpuwhich_à
	mwhich
; 
	mwhich_r_
[
PADR_
(cpuwhich_t)];

1397 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1398 
	m£tid_l_
[
PADL_
(
˝u£tid_t
)]; cpu£tid_à
	m£tid
; 
	m£tid_r_
[
PADR_
(cpusetid_t)];

1400 
	s˝u£t_gëid_¨gs
 {

1401 
	mÀvñ_l_
[
PADL_
(
˝uÀvñ_t
)]; cpuÀvñ_à
	mÀvñ
; 
	mÀvñ_r_
[
PADR_
(cpulevel_t)];

1402 
	mwhich_l_
[
PADL_
(
˝uwhich_t
)]; cpuwhich_à
	mwhich
; 
	mwhich_r_
[
PADR_
(cpuwhich_t)];

1403 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1404 
	m£tid_l_
[
PADL_
(
˝u£tid_t
 *)]; cpu£tid_à* 
	m£tid
; 
	m£tid_r_
[
PADR_
(cpusetid_t *)];

1406 
	s˝u£t_gëafföôy_¨gs
 {

1407 
	mÀvñ_l_
[
PADL_
(
˝uÀvñ_t
)]; cpuÀvñ_à
	mÀvñ
; 
	mÀvñ_r_
[
PADR_
(cpulevel_t)];

1408 
	mwhich_l_
[
PADL_
(
˝uwhich_t
)]; cpuwhich_à
	mwhich
; 
	mwhich_r_
[
PADR_
(cpuwhich_t)];

1409 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1410 
	m˝u£tsize_l_
[
PADL_
(
size_t
)]; size_à
	m˝u£tsize
; 
	m˝u£tsize_r_
[
PADR_
(size_t)];

1411 
	mmask_l_
[
PADL_
(
˝u£t_t
 *)]; cpu£t_à* 
	mmask
; 
	mmask_r_
[
PADR_
(cpuset_t *)];

1413 
	s˝u£t_£èfföôy_¨gs
 {

1414 
	mÀvñ_l_
[
PADL_
(
˝uÀvñ_t
)]; cpuÀvñ_à
	mÀvñ
; 
	mÀvñ_r_
[
PADR_
(cpulevel_t)];

1415 
	mwhich_l_
[
PADL_
(
˝uwhich_t
)]; cpuwhich_à
	mwhich
; 
	mwhich_r_
[
PADR_
(cpuwhich_t)];

1416 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1417 
	m˝u£tsize_l_
[
PADL_
(
size_t
)]; size_à
	m˝u£tsize
; 
	m˝u£tsize_r_
[
PADR_
(size_t)];

1418 
	mmask_l_
[
PADL_
(c⁄° 
˝u£t_t
 *)]; c⁄° cpu£t_à* 
	mmask
; 
	mmask_r_
[
PADR_
(const cpuset_t *)];

1420 
	sÁc˚sßt_¨gs
 {

1421 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1422 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1423 
	mamode_l_
[
PADL_
()]; 
	mamode
; 
	mamode_r_
[
PADR_
()];

1424 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1426 
	sfchmod©_¨gs
 {

1427 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1428 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1429 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1430 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1432 
	sfchow«t_¨gs
 {

1433 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1434 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1435 
	muid_l_
[
PADL_
(
uid_t
)]; uid_à
	muid
; 
	muid_r_
[
PADR_
(uid_t)];

1436 
	mgid_l_
[
PADL_
(
gid_t
)]; gid_à
	mgid
; 
	mgid_r_
[
PADR_
(gid_t)];

1437 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1439 
	s„xecve_¨gs
 {

1440 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1441 
	m¨gv_l_
[
PADL_
(**)]; ** 
	m¨gv
; 
	m¨gv_r_
[
PADR_
(**)];

1442 
	mívv_l_
[
PADL_
(**)]; ** 
	mívv
; 
	mívv_r_
[
PADR_
(**)];

1444 
	sfutimeßt_¨gs
 {

1445 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1446 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1447 
	mtimes_l_
[
PADL_
(
timevÆ
 *)]; timevÆ * 
	mtimes
; 
	mtimes_r_
[
PADR_
(timeval *)];

1449 
	slök©_¨gs
 {

1450 
	mfd1_l_
[
PADL_
()]; 
	mfd1
; 
	mfd1_r_
[
PADR_
()];

1451 
	m∑th1_l_
[
PADL_
(*)]; * 
	m∑th1
; 
	m∑th1_r_
[
PADR_
(*)];

1452 
	mfd2_l_
[
PADL_
()]; 
	mfd2
; 
	mfd2_r_
[
PADR_
()];

1453 
	m∑th2_l_
[
PADL_
(*)]; * 
	m∑th2
; 
	m∑th2_r_
[
PADR_
(*)];

1454 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1456 
	smkdú©_¨gs
 {

1457 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1458 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1459 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1461 
	smkfifﬂt_¨gs
 {

1462 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1463 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1464 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1466 
	s›í©_¨gs
 {

1467 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1468 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1469 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1470 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1472 
	sªadlök©_¨gs
 {

1473 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1474 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1475 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

1476 
	mbufsize_l_
[
PADL_
(
size_t
)]; size_à
	mbufsize
; 
	mbufsize_r_
[
PADR_
(size_t)];

1478 
	sª«mót_¨gs
 {

1479 
	mﬁdfd_l_
[
PADL_
()]; 
	mﬁdfd
; 
	mﬁdfd_r_
[
PADR_
()];

1480 
	mﬁd_l_
[
PADL_
(*)]; * 
	mﬁd
; 
	mﬁd_r_
[
PADR_
(*)];

1481 
	m√wfd_l_
[
PADL_
()]; 
	m√wfd
; 
	m√wfd_r_
[
PADR_
()];

1482 
	m√w_l_
[
PADL_
(*)]; * 
	m√w
; 
	m√w_r_
[
PADR_
(*)];

1484 
	ssymlök©_¨gs
 {

1485 
	m∑th1_l_
[
PADL_
(*)]; * 
	m∑th1
; 
	m∑th1_r_
[
PADR_
(*)];

1486 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1487 
	m∑th2_l_
[
PADL_
(*)]; * 
	m∑th2
; 
	m∑th2_r_
[
PADR_
(*)];

1489 
	su∆ök©_¨gs
 {

1490 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1491 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1492 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1494 
	sposix_›í±_¨gs
 {

1495 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1497 
	sgssd_sysˇŒ_¨gs
 {

1498 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1500 
	sjaû_gë_¨gs
 {

1501 
	miovp_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miovp
; 
	miovp_r_
[
PADR_
(iovec *)];

1502 
	miov˙t_l_
[
PADL_
()]; 
	miov˙t
; 
	miov˙t_r_
[
PADR_
()];

1503 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1505 
	sjaû_£t_¨gs
 {

1506 
	miovp_l_
[
PADL_
(
iovec
 *)]; iove¯* 
	miovp
; 
	miovp_r_
[
PADR_
(iovec *)];

1507 
	miov˙t_l_
[
PADL_
()]; 
	miov˙t
; 
	miov˙t_r_
[
PADR_
()];

1508 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1510 
	sjaû_ªmove_¨gs
 {

1511 
	mjid_l_
[
PADL_
()]; 
	mjid
; 
	mjid_r_
[
PADR_
()];

1513 
	s˛o£‰om_¨gs
 {

1514 
	mlowfd_l_
[
PADL_
()]; 
	mlowfd
; 
	mlowfd_r_
[
PADR_
()];

1516 
	s__£m˘l_¨gs
 {

1517 
	m£mid_l_
[
PADL_
()]; 
	m£mid
; 
	m£mid_r_
[
PADR_
()];

1518 
	m£mnum_l_
[
PADL_
()]; 
	m£mnum
; 
	m£mnum_r_
[
PADR_
()];

1519 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

1520 
	m¨g_l_
[
PADL_
(
£mun
 *)]; £mu¿* 
	m¨g
; 
	m¨g_r_
[
PADR_
(semun *)];

1522 
	smsg˘l_¨gs
 {

1523 
	mmsqid_l_
[
PADL_
()]; 
	mmsqid
; 
	mmsqid_r_
[
PADR_
()];

1524 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

1525 
	mbuf_l_
[
PADL_
(
msqid_ds
 *)]; msqid_d†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(msqid_ds *)];

1527 
	sshm˘l_¨gs
 {

1528 
	mshmid_l_
[
PADL_
()]; 
	mshmid
; 
	mshmid_r_
[
PADR_
()];

1529 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

1530 
	mbuf_l_
[
PADL_
(
shmid_ds
 *)]; shmid_d†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(shmid_ds *)];

1532 
	sÕ©hc⁄f_¨gs
 {

1533 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1534 
	m«me_l_
[
PADL_
()]; 
	m«me
; 
	m«me_r_
[
PADR_
()];

1536 
	s__ˇp_rights_gë_¨gs
 {

1537 
	mvîsi⁄_l_
[
PADL_
()]; 
	mvîsi⁄
; 
	mvîsi⁄_r_
[
PADR_
()];

1538 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1539 
	mright•_l_
[
PADL_
(
ˇp_rights_t
 *)]; c≠_rights_à* 
	mright•
; 
	mright•_r_
[
PADR_
(cap_rights_t *)];

1541 
	sˇp_íãr_¨gs
 {

1542 
ªgi°î_t
 
	mdummy
;

1544 
	sˇp_gëmode_¨gs
 {

1545 
	mmodï_l_
[
PADL_
(
u_öt
 *)]; u_öà* 
	mmodï
; 
	mmodï_r_
[
PADR_
(u_int *)];

1547 
	spdf‹k_¨gs
 {

1548 
	mfdp_l_
[
PADL_
(*)]; * 
	mfdp
; 
	mfdp_r_
[
PADR_
(*)];

1549 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1551 
	spdkûl_¨gs
 {

1552 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1553 
	msignum_l_
[
PADL_
()]; 
	msignum
; 
	msignum_r_
[
PADR_
()];

1555 
	spdgëpid_¨gs
 {

1556 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1557 
	mpidp_l_
[
PADL_
(
pid_t
 *)];Öid_à* 
	mpidp
; 
	mpidp_r_
[
PADR_
(pid_t *)];

1559 
	sp£À˘_¨gs
 {

1560 
	mnd_l_
[
PADL_
()]; 
	mnd
; 
	mnd_r_
[
PADR_
()];

1561 
	mö_l_
[
PADL_
(
fd_£t
 *)]; fd_£à* 
	mö
; 
	mö_r_
[
PADR_
(fd_set *)];

1562 
	mou_l_
[
PADL_
(
fd_£t
 *)]; fd_£à* 
	mou
; 
	mou_r_
[
PADR_
(fd_set *)];

1563 
	mex_l_
[
PADL_
(
fd_£t
 *)]; fd_£à* 
	mex
; 
	mex_r_
[
PADR_
(fd_set *)];

1564 
	mts_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mts
; 
	mts_r_
[
PADR_
(const timespec *)];

1565 
	msm_l_
[
PADL_
(c⁄° 
sig£t_t
 *)]; c⁄° sig£t_à* 
	msm
; 
	msm_r_
[
PADR_
(const sigset_t *)];

1567 
	sgëlogö˛ass_¨gs
 {

1568 
	m«mebuf_l_
[
PADL_
(*)]; * 
	m«mebuf
; 
	m«mebuf_r_
[
PADR_
(*)];

1569 
	m«mñí_l_
[
PADL_
(
size_t
)]; size_à
	m«mñí
; 
	m«mñí_r_
[
PADR_
(size_t)];

1571 
	s£éogö˛ass_¨gs
 {

1572 
	m«mebuf_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m«mebuf
; 
	m«mebuf_r_
[
PADR_
(const *)];

1574 
	sr˘l_gë_øc˘_¨gs
 {

1575 
	möbuÂ_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	möbuÂ
; 
	möbuÂ_r_
[
PADR_
(const *)];

1576 
	möbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	möbuÊí
; 
	möbuÊí_r_
[
PADR_
(size_t)];

1577 
	moutbuÂ_l_
[
PADL_
(*)]; * 
	moutbuÂ
; 
	moutbuÂ_r_
[
PADR_
(*)];

1578 
	moutbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	moutbuÊí
; 
	moutbuÊí_r_
[
PADR_
(size_t)];

1580 
	sr˘l_gë_ruÀs_¨gs
 {

1581 
	möbuÂ_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	möbuÂ
; 
	möbuÂ_r_
[
PADR_
(const *)];

1582 
	möbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	möbuÊí
; 
	möbuÊí_r_
[
PADR_
(size_t)];

1583 
	moutbuÂ_l_
[
PADL_
(*)]; * 
	moutbuÂ
; 
	moutbuÂ_r_
[
PADR_
(*)];

1584 
	moutbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	moutbuÊí
; 
	moutbuÊí_r_
[
PADR_
(size_t)];

1586 
	sr˘l_gë_limôs_¨gs
 {

1587 
	möbuÂ_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	möbuÂ
; 
	möbuÂ_r_
[
PADR_
(const *)];

1588 
	möbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	möbuÊí
; 
	möbuÊí_r_
[
PADR_
(size_t)];

1589 
	moutbuÂ_l_
[
PADL_
(*)]; * 
	moutbuÂ
; 
	moutbuÂ_r_
[
PADR_
(*)];

1590 
	moutbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	moutbuÊí
; 
	moutbuÊí_r_
[
PADR_
(size_t)];

1592 
	sr˘l_add_ruÀ_¨gs
 {

1593 
	möbuÂ_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	möbuÂ
; 
	möbuÂ_r_
[
PADR_
(const *)];

1594 
	möbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	möbuÊí
; 
	möbuÊí_r_
[
PADR_
(size_t)];

1595 
	moutbuÂ_l_
[
PADL_
(*)]; * 
	moutbuÂ
; 
	moutbuÂ_r_
[
PADR_
(*)];

1596 
	moutbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	moutbuÊí
; 
	moutbuÊí_r_
[
PADR_
(size_t)];

1598 
	sr˘l_ªmove_ruÀ_¨gs
 {

1599 
	möbuÂ_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	möbuÂ
; 
	möbuÂ_r_
[
PADR_
(const *)];

1600 
	möbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	möbuÊí
; 
	möbuÊí_r_
[
PADR_
(size_t)];

1601 
	moutbuÂ_l_
[
PADL_
(*)]; * 
	moutbuÂ
; 
	moutbuÂ_r_
[
PADR_
(*)];

1602 
	moutbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	moutbuÊí
; 
	moutbuÊí_r_
[
PADR_
(size_t)];

1604 
	sposix_ÁŒoˇã_¨gs
 {

1605 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1606 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

1607 
	mÀn_l_
[
PADL_
(
off_t
)]; off_à
	mÀn
; 
	mÀn_r_
[
PADR_
(off_t)];

1609 
	sposix_Ádvi£_¨gs
 {

1610 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1611 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

1612 
	mÀn_l_
[
PADL_
(
off_t
)]; off_à
	mÀn
; 
	mÀn_r_
[
PADR_
(off_t)];

1613 
	madvi˚_l_
[
PADL_
()]; 
	madvi˚
; 
	madvi˚_r_
[
PADR_
()];

1615 
	swaô6_¨gs
 {

1616 
	midty≥_l_
[
PADL_
(
idty≥_t
)]; idty≥_à
	midty≥
; 
	midty≥_r_
[
PADR_
(idtype_t)];

1617 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1618 
	m°©us_l_
[
PADL_
(*)]; * 
	m°©us
; 
	m°©us_r_
[
PADR_
(*)];

1619 
	m›ti⁄s_l_
[
PADL_
()]; 
	m›ti⁄s
; 
	m›ti⁄s_r_
[
PADR_
()];

1620 
	mwrußge_l_
[
PADL_
(
__wrußge
 *)]; __wrußgê* 
	mwrußge
; 
	mwrußge_r_
[
PADR_
(__wrusage *)];

1621 
	möfo_l_
[
PADL_
(
sigöfo_t
 *)]; sigöfo_à* 
	möfo
; 
	möfo_r_
[
PADR_
(siginfo_t *)];

1623 
	sˇp_rights_limô_¨gs
 {

1624 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1625 
	mright•_l_
[
PADL_
(
ˇp_rights_t
 *)]; c≠_rights_à* 
	mright•
; 
	mright•_r_
[
PADR_
(cap_rights_t *)];

1627 
	sˇp_io˘ls_limô_¨gs
 {

1628 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1629 
	mcmds_l_
[
PADL_
(c⁄° 
u_l⁄g
 *)]; c⁄° u_l⁄g * 
	mcmds
; 
	mcmds_r_
[
PADR_
(const u_long *)];

1630 
	mncmds_l_
[
PADL_
(
size_t
)]; size_à
	mncmds
; 
	mncmds_r_
[
PADR_
(size_t)];

1632 
	sˇp_io˘ls_gë_¨gs
 {

1633 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1634 
	mcmds_l_
[
PADL_
(
u_l⁄g
 *)]; u_l⁄g * 
	mcmds
; 
	mcmds_r_
[
PADR_
(u_long *)];

1635 
	mmaxcmds_l_
[
PADL_
(
size_t
)]; size_à
	mmaxcmds
; 
	mmaxcmds_r_
[
PADR_
(size_t)];

1637 
	sˇp_f˙és_limô_¨gs
 {

1638 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1639 
	mf˙érights_l_
[
PADL_
(
uöt32_t
)]; uöt32_à
	mf˙érights
; 
	mf˙érights_r_
[
PADR_
(uint32_t)];

1641 
	sˇp_f˙és_gë_¨gs
 {

1642 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1643 
	mf˙éright•_l_
[
PADL_
(
uöt32_t
 *)]; uöt32_à* 
	mf˙éright•
; 
	mf˙éright•_r_
[
PADR_
(uint32_t *)];

1645 
	sböd©_¨gs
 {

1646 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1647 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

1648 
	m«me_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	m«me
; 
	m«me_r_
[
PADR_
(caddr_t)];

1649 
	m«mñí_l_
[
PADL_
()]; 
	m«mñí
; 
	m«mñí_r_
[
PADR_
()];

1651 
	sc⁄√˘©_¨gs
 {

1652 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1653 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

1654 
	m«me_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	m«me
; 
	m«me_r_
[
PADR_
(caddr_t)];

1655 
	m«mñí_l_
[
PADL_
()]; 
	m«mñí
; 
	m«mñí_r_
[
PADR_
()];

1657 
	schÊagßt_¨gs
 {

1658 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1659 
	m∑th_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	m∑th
; 
	m∑th_r_
[
PADR_
(const *)];

1660 
	mÊags_l_
[
PADL_
(
u_l⁄g
)]; u_l⁄g 
	mÊags
; 
	mÊags_r_
[
PADR_
(u_long)];

1661 
	m©Êag_l_
[
PADL_
()]; 
	m©Êag
; 
	m©Êag_r_
[
PADR_
()];

1663 
	sac˚±4_¨gs
 {

1664 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

1665 
	m«me_l_
[
PADL_
(
sockaddr
 *
__ª°ri˘
)]; sockadd∏*__ª°ri˘ 
	m«me
; 
	m«me_r_
[
PADR_
(sockaddr *__restrict)];

1666 
	m™amñí_l_
[
PADL_
(
__sockÀn_t
 *
__ª°ri˘
)]; __sockÀn_à*__ª°ri˘ 
	m™amñí
; 
	m™amñí_r_
[
PADR_
(__socklen_t *__restrict)];

1667 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1669 
	spùe2_¨gs
 {

1670 
	mfûdes_l_
[
PADL_
(*)]; * 
	mfûdes
; 
	mfûdes_r_
[
PADR_
(*)];

1671 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1673 
	saio_mlock_¨gs
 {

1674 
	maiocbp_l_
[
PADL_
(
aiocb
 *)]; aiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(aiocb *)];

1676 
	s¥oc˘l_¨gs
 {

1677 
	midty≥_l_
[
PADL_
(
idty≥_t
)]; idty≥_à
	midty≥
; 
	midty≥_r_
[
PADR_
(idtype_t)];

1678 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1679 
	mcom_l_
[
PADL_
()]; 
	mcom
; 
	mcom_r_
[
PADR_
()];

1680 
	md©a_l_
[
PADL_
(*)]; * 
	md©a
; 
	md©a_r_
[
PADR_
(*)];

1682 
	sµﬁl_¨gs
 {

1683 
	mfds_l_
[
PADL_
(
pﬁlfd
 *)]; pﬁlfd * 
	mfds
; 
	mfds_r_
[
PADR_
(pollfd *)];

1684 
	mnfds_l_
[
PADL_
(
u_öt
)]; u_öà
	mnfds
; 
	mnfds_r_
[
PADR_
(u_int)];

1685 
	mts_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mts
; 
	mts_r_
[
PADR_
(const timespec *)];

1686 
	m£t_l_
[
PADL_
(c⁄° 
sig£t_t
 *)]; c⁄° sig£t_à* 
	m£t
; 
	m£t_r_
[
PADR_
(const sigset_t *)];

1688 
	sfutimís_¨gs
 {

1689 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1690 
	mtimes_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	mtimes
; 
	mtimes_r_
[
PADR_
(timespec *)];

1692 
	sutimíßt_¨gs
 {

1693 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1694 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1695 
	mtimes_l_
[
PADL_
(
time•ec
 *)]; time•e¯* 
	mtimes
; 
	mtimes_r_
[
PADR_
(timespec *)];

1696 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1698 
	sfd©async_¨gs
 {

1699 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1701 
	sf°©_¨gs
 {

1702 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1703 
	msb_l_
[
PADL_
(
°©
 *)]; °© * 
	msb
; 
	msb_r_
[
PADR_
(stat *)];

1705 
	sf°©©_¨gs
 {

1706 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1707 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1708 
	mbuf_l_
[
PADL_
(
°©
 *)]; °© * 
	mbuf
; 
	mbuf_r_
[
PADR_
(stat *)];

1709 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

1711 
	sfh°©_¨gs
 {

1712 
	mu_fhp_l_
[
PADL_
(c⁄° 
fh™dÀ
 *)]; c⁄° fh™dÀ * 
	mu_fhp
; 
	mu_fhp_r_
[
PADR_
(const fhandle *)];

1713 
	msb_l_
[
PADL_
(
°©
 *)]; °© * 
	msb
; 
	msb_r_
[
PADR_
(stat *)];

1715 
	sgëdúíåõs_¨gs
 {

1716 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1717 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

1718 
	mcou¡_l_
[
PADL_
(
size_t
)]; size_à
	mcou¡
; 
	mcou¡_r_
[
PADR_
(size_t)];

1719 
	mba£p_l_
[
PADL_
(
off_t
 *)]; off_à* 
	mba£p
; 
	mba£p_r_
[
PADR_
(off_t *)];

1721 
	s°©fs_¨gs
 {

1722 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1723 
	mbuf_l_
[
PADL_
(
°©fs
 *)]; °©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(statfs *)];

1725 
	sf°©fs_¨gs
 {

1726 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1727 
	mbuf_l_
[
PADL_
(
°©fs
 *)]; °©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(statfs *)];

1729 
	sgëfs°©_¨gs
 {

1730 
	mbuf_l_
[
PADL_
(
°©fs
 *)]; °©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(statfs *)];

1731 
	mbufsize_l_
[
PADL_
()]; 
	mbufsize
; 
	mbufsize_r_
[
PADR_
()];

1732 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

1734 
	sfh°©fs_¨gs
 {

1735 
	mu_fhp_l_
[
PADL_
(c⁄° 
fh™dÀ
 *)]; c⁄° fh™dÀ * 
	mu_fhp
; 
	mu_fhp_r_
[
PADR_
(const fhandle *)];

1736 
	mbuf_l_
[
PADL_
(
°©fs
 *)]; °©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(statfs *)];

1738 
	smknod©_¨gs
 {

1739 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1740 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

1741 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

1742 
	mdev_l_
[
PADL_
(
dev_t
)]; dev_à
	mdev
; 
	mdev_r_
[
PADR_
(dev_t)];

1744 
	skevít_¨gs
 {

1745 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

1746 
	mch™gñi°_l_
[
PADL_
(
kevít
 *)]; kevíà* 
	mch™gñi°
; 
	mch™gñi°_r_
[
PADR_
(kevent *)];

1747 
	mnch™ges_l_
[
PADL_
()]; 
	mnch™ges
; 
	mnch™ges_r_
[
PADR_
()];

1748 
	mevíéi°_l_
[
PADL_
(
kevít
 *)]; kevíà* 
	mevíéi°
; 
	mevíéi°_r_
[
PADR_
(kevent *)];

1749 
	m√víts_l_
[
PADL_
()]; 
	m√víts
; 
	m√víts_r_
[
PADR_
()];

1750 
	mtimeout_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mtimeout
; 
	mtimeout_r_
[
PADR_
(const timespec *)];

1752 
	s˝u£t_gëdomaö_¨gs
 {

1753 
	mÀvñ_l_
[
PADL_
(
˝uÀvñ_t
)]; cpuÀvñ_à
	mÀvñ
; 
	mÀvñ_r_
[
PADR_
(cpulevel_t)];

1754 
	mwhich_l_
[
PADL_
(
˝uwhich_t
)]; cpuwhich_à
	mwhich
; 
	mwhich_r_
[
PADR_
(cpuwhich_t)];

1755 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1756 
	mdomaö£tsize_l_
[
PADL_
(
size_t
)]; size_à
	mdomaö£tsize
; 
	mdomaö£tsize_r_
[
PADR_
(size_t)];

1757 
	mmask_l_
[
PADL_
(
domaö£t_t
 *)]; domaö£t_à* 
	mmask
; 
	mmask_r_
[
PADR_
(domainset_t *)];

1758 
	mpﬁicy_l_
[
PADL_
(*)]; * 
	mpﬁicy
; 
	mpﬁicy_r_
[
PADR_
(*)];

1760 
	s˝u£t_£tdomaö_¨gs
 {

1761 
	mÀvñ_l_
[
PADL_
(
˝uÀvñ_t
)]; cpuÀvñ_à
	mÀvñ
; 
	mÀvñ_r_
[
PADR_
(cpulevel_t)];

1762 
	mwhich_l_
[
PADL_
(
˝uwhich_t
)]; cpuwhich_à
	mwhich
; 
	mwhich_r_
[
PADR_
(cpuwhich_t)];

1763 
	mid_l_
[
PADL_
(
id_t
)]; id_à
	mid
; 
	mid_r_
[
PADR_
(id_t)];

1764 
	mdomaö£tsize_l_
[
PADL_
(
size_t
)]; size_à
	mdomaö£tsize
; 
	mdomaö£tsize_r_
[
PADR_
(size_t)];

1765 
	mmask_l_
[
PADL_
(
domaö£t_t
 *)]; domaö£t_à* 
	mmask
; 
	mmask_r_
[
PADR_
(domainset_t *)];

1766 
	mpﬁicy_l_
[
PADL_
()]; 
	mpﬁicy
; 
	mpﬁicy_r_
[
PADR_
()];

1768 
	sgëøndom_¨gs
 {

1769 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

1770 
	mbuÊí_l_
[
PADL_
(
size_t
)]; size_à
	mbuÊí
; 
	mbuÊí_r_
[
PADR_
(size_t)];

1771 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

1773 
nosys
(
thªad
 *, 
nosys_¨gs
 *);

1774 
sys_sys_exô
(
thªad
 *, 
sys_exô_¨gs
 *);

1775 
sys_f‹k
(
thªad
 *, 
f‹k_¨gs
 *);

1776 
sys_ªad
(
thªad
 *, 
ªad_¨gs
 *);

1777 
sys_wrôe
(
thªad
 *, 
wrôe_¨gs
 *);

1778 
sys_›í
(
thªad
 *, 
›í_¨gs
 *);

1779 
sys_˛o£
(
thªad
 *, 
˛o£_¨gs
 *);

1780 
sys_waô4
(
thªad
 *, 
waô4_¨gs
 *);

1781 
sys_lök
(
thªad
 *, 
lök_¨gs
 *);

1782 
sys_u∆ök
(
thªad
 *, 
u∆ök_¨gs
 *);

1783 
sys_chdú
(
thªad
 *, 
chdú_¨gs
 *);

1784 
sys_fchdú
(
thªad
 *, 
fchdú_¨gs
 *);

1785 
sys_chmod
(
thªad
 *, 
chmod_¨gs
 *);

1786 
sys_chown
(
thªad
 *, 
chown_¨gs
 *);

1787 
sys_bªak
(
thªad
 *, 
bªak_¨gs
 *);

1788 
sys_gëpid
(
thªad
 *, 
gëpid_¨gs
 *);

1789 
sys_mou¡
(
thªad
 *, 
mou¡_¨gs
 *);

1790 
sys_unmou¡
(
thªad
 *, 
unmou¡_¨gs
 *);

1791 
sys_£tuid
(
thªad
 *, 
£tuid_¨gs
 *);

1792 
sys_gëuid
(
thªad
 *, 
gëuid_¨gs
 *);

1793 
sys_gëeuid
(
thªad
 *, 
gëeuid_¨gs
 *);

1794 
sys_±ø˚
(
thªad
 *, 
±ø˚_¨gs
 *);

1795 
sys_ªcvmsg
(
thªad
 *, 
ªcvmsg_¨gs
 *);

1796 
sys_£ndmsg
(
thªad
 *, 
£ndmsg_¨gs
 *);

1797 
sys_ªcv‰om
(
thªad
 *, 
ªcv‰om_¨gs
 *);

1798 
sys_ac˚±
(
thªad
 *, 
ac˚±_¨gs
 *);

1799 
sys_gë≥î«me
(
thªad
 *, 
gë≥î«me_¨gs
 *);

1800 
sys_gësock«me
(
thªad
 *, 
gësock«me_¨gs
 *);

1801 
sys_ac˚ss
(
thªad
 *, 
ac˚ss_¨gs
 *);

1802 
sys_chÊags
(
thªad
 *, 
chÊags_¨gs
 *);

1803 
sys_fchÊags
(
thªad
 *, 
fchÊags_¨gs
 *);

1804 
sys_sync
(
thªad
 *, 
sync_¨gs
 *);

1805 
sys_kûl
(
thªad
 *, 
kûl_¨gs
 *);

1806 
sys_gëµid
(
thªad
 *, 
gëµid_¨gs
 *);

1807 
sys_dup
(
thªad
 *, 
dup_¨gs
 *);

1808 
sys_gëegid
(
thªad
 *, 
gëegid_¨gs
 *);

1809 
sys_¥ofû
(
thªad
 *, 
¥ofû_¨gs
 *);

1810 
sys_kåa˚
(
thªad
 *, 
kåa˚_¨gs
 *);

1811 
sys_gëgid
(
thªad
 *, 
gëgid_¨gs
 *);

1812 
sys_gëlogö
(
thªad
 *, 
gëlogö_¨gs
 *);

1813 
sys_£éogö
(
thªad
 *, 
£éogö_¨gs
 *);

1814 
sys_ac˘
(
thªad
 *, 
ac˘_¨gs
 *);

1815 
sys_sigÆt°ack
(
thªad
 *, 
sigÆt°ack_¨gs
 *);

1816 
sys_io˘l
(
thªad
 *, 
io˘l_¨gs
 *);

1817 
sys_ªboŸ
(
thªad
 *, 
ªboŸ_¨gs
 *);

1818 
sys_ªvoke
(
thªad
 *, 
ªvoke_¨gs
 *);

1819 
sys_symlök
(
thªad
 *, 
symlök_¨gs
 *);

1820 
sys_ªadlök
(
thªad
 *, 
ªadlök_¨gs
 *);

1821 
sys_execve
(
thªad
 *, 
execve_¨gs
 *);

1822 
sys_umask
(
thªad
 *, 
umask_¨gs
 *);

1823 
sys_chroŸ
(
thªad
 *, 
chroŸ_¨gs
 *);

1824 
sys_msync
(
thªad
 *, 
msync_¨gs
 *);

1825 
sys_vf‹k
(
thªad
 *, 
vf‹k_¨gs
 *);

1826 
sys_sbrk
(
thªad
 *, 
sbrk_¨gs
 *);

1827 
sys_s°k
(
thªad
 *, 
s°k_¨gs
 *);

1828 
sys_munm≠
(
thªad
 *, 
munm≠_¨gs
 *);

1829 
sys_m¥Ÿe˘
(
thªad
 *, 
m¥Ÿe˘_¨gs
 *);

1830 
sys_madvi£
(
thªad
 *, 
madvi£_¨gs
 *);

1831 
sys_möc‹e
(
thªad
 *, 
möc‹e_¨gs
 *);

1832 
sys_gëgroups
(
thªad
 *, 
gëgroups_¨gs
 *);

1833 
sys_£tgroups
(
thªad
 *, 
£tgroups_¨gs
 *);

1834 
sys_gëpgΩ
(
thªad
 *, 
gëpgΩ_¨gs
 *);

1835 
sys_£çgid
(
thªad
 *, 
£çgid_¨gs
 *);

1836 
sys_£tôimî
(
thªad
 *, 
£tôimî_¨gs
 *);

1837 
sys_sw≠⁄
(
thªad
 *, 
sw≠⁄_¨gs
 *);

1838 
sys_gëôimî
(
thªad
 *, 
gëôimî_¨gs
 *);

1839 
sys_gëdèbÀsize
(
thªad
 *, 
gëdèbÀsize_¨gs
 *);

1840 
sys_dup2
(
thªad
 *, 
dup2_¨gs
 *);

1841 
sys_f˙é
(
thªad
 *, 
f˙é_¨gs
 *);

1842 
sys_£À˘
(
thªad
 *, 
£À˘_¨gs
 *);

1843 
sys_fsync
(
thªad
 *, 
fsync_¨gs
 *);

1844 
sys_£çri‹ôy
(
thªad
 *, 
£çri‹ôy_¨gs
 *);

1845 
sys_sockë
(
thªad
 *, 
sockë_¨gs
 *);

1846 
sys_c⁄√˘
(
thªad
 *, 
c⁄√˘_¨gs
 *);

1847 
sys_gë¥i‹ôy
(
thªad
 *, 
gë¥i‹ôy_¨gs
 *);

1848 
sys_böd
(
thªad
 *, 
böd_¨gs
 *);

1849 
sys_£tsock›t
(
thªad
 *, 
£tsock›t_¨gs
 *);

1850 
sys_li°í
(
thªad
 *, 
li°í_¨gs
 *);

1851 
sys_gëtimeofday
(
thªad
 *, 
gëtimeofday_¨gs
 *);

1852 
sys_gërußge
(
thªad
 *, 
gërußge_¨gs
 *);

1853 
sys_gësock›t
(
thªad
 *, 
gësock›t_¨gs
 *);

1854 
sys_ªadv
(
thªad
 *, 
ªadv_¨gs
 *);

1855 
sys_wrôev
(
thªad
 *, 
wrôev_¨gs
 *);

1856 
sys_£âimeofday
(
thªad
 *, 
£âimeofday_¨gs
 *);

1857 
sys_fchown
(
thªad
 *, 
fchown_¨gs
 *);

1858 
sys_fchmod
(
thªad
 *, 
fchmod_¨gs
 *);

1859 
sys_£åeuid
(
thªad
 *, 
£åeuid_¨gs
 *);

1860 
sys_£åegid
(
thªad
 *, 
£åegid_¨gs
 *);

1861 
sys_ª«me
(
thªad
 *, 
ª«me_¨gs
 *);

1862 
sys_Êock
(
thªad
 *, 
Êock_¨gs
 *);

1863 
sys_mkfifo
(
thªad
 *, 
mkfifo_¨gs
 *);

1864 
sys_£ndto
(
thªad
 *, 
£ndto_¨gs
 *);

1865 
sys_shutdown
(
thªad
 *, 
shutdown_¨gs
 *);

1866 
sys_sockë∑ú
(
thªad
 *, 
sockë∑ú_¨gs
 *);

1867 
sys_mkdú
(
thªad
 *, 
mkdú_¨gs
 *);

1868 
sys_rmdú
(
thªad
 *, 
rmdú_¨gs
 *);

1869 
sys_utimes
(
thªad
 *, 
utimes_¨gs
 *);

1870 
sys_adjtime
(
thªad
 *, 
adjtime_¨gs
 *);

1871 
sys_£tsid
(
thªad
 *, 
£tsid_¨gs
 *);

1872 
sys_quŸa˘l
(
thªad
 *, 
quŸa˘l_¨gs
 *);

1873 
sys_∆m_sysˇŒ
(
thªad
 *, 
∆m_sysˇŒ_¨gs
 *);

1874 
sys_nfssvc
(
thªad
 *, 
nfssvc_¨gs
 *);

1875 
sys_lgëfh
(
thªad
 *, 
lgëfh_¨gs
 *);

1876 
sys_gëfh
(
thªad
 *, 
gëfh_¨gs
 *);

1877 
syßrch
(
thªad
 *, 
syßrch_¨gs
 *);

1878 
sys_π¥io
(
thªad
 *, 
π¥io_¨gs
 *);

1879 
sys_£msys
(
thªad
 *, 
£msys_¨gs
 *);

1880 
sys_msgsys
(
thªad
 *, 
msgsys_¨gs
 *);

1881 
sys_shmsys
(
thªad
 *, 
shmsys_¨gs
 *);

1882 
sys_£tfib
(
thªad
 *, 
£tfib_¨gs
 *);

1883 
sys_¡p_adjtime
(
thªad
 *, 
¡p_adjtime_¨gs
 *);

1884 
sys_£tgid
(
thªad
 *, 
£tgid_¨gs
 *);

1885 
sys_£ãgid
(
thªad
 *, 
£ãgid_¨gs
 *);

1886 
sys_£ãuid
(
thªad
 *, 
£ãuid_¨gs
 *);

1887 
sys_∑thc⁄f
(
thªad
 *, 
∑thc⁄f_¨gs
 *);

1888 
sys_Â©hc⁄f
(
thªad
 *, 
Â©hc⁄f_¨gs
 *);

1889 
sys_gëæimô
(
thªad
 *, 
__gëæimô_¨gs
 *);

1890 
sys_£ålimô
(
thªad
 *, 
__£ålimô_¨gs
 *);

1891 
sys___sys˘l
(
thªad
 *, 
sys˘l_¨gs
 *);

1892 
sys_mlock
(
thªad
 *, 
mlock_¨gs
 *);

1893 
sys_mu∆ock
(
thªad
 *, 
mu∆ock_¨gs
 *);

1894 
sys_undñëe
(
thªad
 *, 
undñëe_¨gs
 *);

1895 
sys_futimes
(
thªad
 *, 
futimes_¨gs
 *);

1896 
sys_gëpgid
(
thªad
 *, 
gëpgid_¨gs
 *);

1897 
sys_pﬁl
(
thªad
 *, 
pﬁl_¨gs
 *);

1898 
sys_£mgë
(
thªad
 *, 
£mgë_¨gs
 *);

1899 
sys_£m›
(
thªad
 *, 
£m›_¨gs
 *);

1900 
sys_msggë
(
thªad
 *, 
msggë_¨gs
 *);

1901 
sys_msg¢d
(
thªad
 *, 
msg¢d_¨gs
 *);

1902 
sys_msgrcv
(
thªad
 *, 
msgrcv_¨gs
 *);

1903 
sys_shm©
(
thªad
 *, 
shm©_¨gs
 *);

1904 
sys_shmdt
(
thªad
 *, 
shmdt_¨gs
 *);

1905 
sys_shmgë
(
thªad
 *, 
shmgë_¨gs
 *);

1906 
sys_˛ock_gëtime
(
thªad
 *, 
˛ock_gëtime_¨gs
 *);

1907 
sys_˛ock_£âime
(
thªad
 *, 
˛ock_£âime_¨gs
 *);

1908 
sys_˛ock_gëªs
(
thªad
 *, 
˛ock_gëªs_¨gs
 *);

1909 
sys_ktimî_¸óã
(
thªad
 *, 
ktimî_¸óã_¨gs
 *);

1910 
sys_ktimî_dñëe
(
thªad
 *, 
ktimî_dñëe_¨gs
 *);

1911 
sys_ktimî_£âime
(
thªad
 *, 
ktimî_£âime_¨gs
 *);

1912 
sys_ktimî_gëtime
(
thªad
 *, 
ktimî_gëtime_¨gs
 *);

1913 
sys_ktimî_gëovîrun
(
thªad
 *, 
ktimî_gëovîrun_¨gs
 *);

1914 
sys_«no¶ìp
(
thªad
 *, 
«no¶ìp_¨gs
 *);

1915 
sys_ff˛ock_gëcou¡î
(
thªad
 *, 
ff˛ock_gëcou¡î_¨gs
 *);

1916 
sys_ff˛ock_£ã°im©e
(
thªad
 *, 
ff˛ock_£ã°im©e_¨gs
 *);

1917 
sys_ff˛ock_gëe°im©e
(
thªad
 *, 
ff˛ock_gëe°im©e_¨gs
 *);

1918 
sys_˛ock_«no¶ìp
(
thªad
 *, 
˛ock_«no¶ìp_¨gs
 *);

1919 
sys_˛ock_gë˝u˛ockid2
(
thªad
 *, 
˛ock_gë˝u˛ockid2_¨gs
 *);

1920 
sys_¡p_gëtime
(
thªad
 *, 
¡p_gëtime_¨gs
 *);

1921 
sys_möhîô
(
thªad
 *, 
möhîô_¨gs
 *);

1922 
sys_rf‹k
(
thªad
 *, 
rf‹k_¨gs
 *);

1923 
sys_is£tugid
(
thªad
 *, 
is£tugid_¨gs
 *);

1924 
sys_lchown
(
thªad
 *, 
lchown_¨gs
 *);

1925 
sys_aio_ªad
(
thªad
 *, 
aio_ªad_¨gs
 *);

1926 
sys_aio_wrôe
(
thªad
 *, 
aio_wrôe_¨gs
 *);

1927 
sys_lio_li°io
(
thªad
 *, 
lio_li°io_¨gs
 *);

1928 
sys_lchmod
(
thªad
 *, 
lchmod_¨gs
 *);

1929 
sys_lutimes
(
thªad
 *, 
lutimes_¨gs
 *);

1930 
sys_¥ódv
(
thªad
 *, 
¥ódv_¨gs
 *);

1931 
sys_pwrôev
(
thªad
 *, 
pwrôev_¨gs
 *);

1932 
sys_fh›í
(
thªad
 *, 
fh›í_¨gs
 *);

1933 
sys_mod√xt
(
thªad
 *, 
mod√xt_¨gs
 *);

1934 
sys_mod°©
(
thªad
 *, 
mod°©_¨gs
 *);

1935 
sys_mod‚ext
(
thªad
 *, 
mod‚ext_¨gs
 *);

1936 
sys_modföd
(
thªad
 *, 
modföd_¨gs
 *);

1937 
sys_kldlﬂd
(
thªad
 *, 
kldlﬂd_¨gs
 *);

1938 
sys_kldu∆ﬂd
(
thªad
 *, 
kldu∆ﬂd_¨gs
 *);

1939 
sys_kldföd
(
thªad
 *, 
kldföd_¨gs
 *);

1940 
sys_kld√xt
(
thªad
 *, 
kld√xt_¨gs
 *);

1941 
sys_kld°©
(
thªad
 *, 
kld°©_¨gs
 *);

1942 
sys_kldfú°mod
(
thªad
 *, 
kldfú°mod_¨gs
 *);

1943 
sys_gësid
(
thªad
 *, 
gësid_¨gs
 *);

1944 
sys_£åesuid
(
thªad
 *, 
£åesuid_¨gs
 *);

1945 
sys_£åesgid
(
thªad
 *, 
£åesgid_¨gs
 *);

1946 
sys_aio_ªtu∫
(
thªad
 *, 
aio_ªtu∫_¨gs
 *);

1947 
sys_aio_su•íd
(
thªad
 *, 
aio_su•íd_¨gs
 *);

1948 
sys_aio_ˇn˚l
(
thªad
 *, 
aio_ˇn˚l_¨gs
 *);

1949 
sys_aio_îr‹
(
thªad
 *, 
aio_îr‹_¨gs
 *);

1950 
sys_yõld
(
thªad
 *, 
yõld_¨gs
 *);

1951 
sys_mlockÆl
(
thªad
 *, 
mlockÆl_¨gs
 *);

1952 
sys_mu∆ockÆl
(
thªad
 *, 
mu∆ockÆl_¨gs
 *);

1953 
sys___gëcwd
(
thªad
 *, 
__gëcwd_¨gs
 *);

1954 
sys_sched_£ç¨am
(
thªad
 *, 
sched_£ç¨am_¨gs
 *);

1955 
sys_sched_gë∑øm
(
thªad
 *, 
sched_gë∑øm_¨gs
 *);

1956 
sys_sched_£tscheduÀr
(
thªad
 *, 
sched_£tscheduÀr_¨gs
 *);

1957 
sys_sched_gëscheduÀr
(
thªad
 *, 
sched_gëscheduÀr_¨gs
 *);

1958 
sys_sched_yõld
(
thªad
 *, 
sched_yõld_¨gs
 *);

1959 
sys_sched_gë_¥i‹ôy_max
(
thªad
 *, 
sched_gë_¥i‹ôy_max_¨gs
 *);

1960 
sys_sched_gë_¥i‹ôy_mö
(
thªad
 *, 
sched_gë_¥i‹ôy_mö_¨gs
 *);

1961 
sys_sched_º_gë_öãrvÆ
(
thªad
 *, 
sched_º_gë_öãrvÆ_¨gs
 *);

1962 
sys_uåa˚
(
thªad
 *, 
uåa˚_¨gs
 *);

1963 
sys_kldsym
(
thªad
 *, 
kldsym_¨gs
 *);

1964 
sys_jaû
(
thªad
 *, 
jaû_¨gs
 *);

1965 
sys_¬pfs_sysˇŒ
(
thªad
 *, 
¬pfs_sysˇŒ_¨gs
 *);

1966 
sys_sig¥ocmask
(
thªad
 *, 
sig¥ocmask_¨gs
 *);

1967 
sys_sigsu•íd
(
thªad
 *, 
sigsu•íd_¨gs
 *);

1968 
sys_sig≥ndög
(
thªad
 *, 
sig≥ndög_¨gs
 *);

1969 
sys_sigtimedwaô
(
thªad
 *, 
sigtimedwaô_¨gs
 *);

1970 
sys_sigwaôöfo
(
thªad
 *, 
sigwaôöfo_¨gs
 *);

1971 
sys___a˛_gë_fûe
(
thªad
 *, 
__a˛_gë_fûe_¨gs
 *);

1972 
sys___a˛_£t_fûe
(
thªad
 *, 
__a˛_£t_fûe_¨gs
 *);

1973 
sys___a˛_gë_fd
(
thªad
 *, 
__a˛_gë_fd_¨gs
 *);

1974 
sys___a˛_£t_fd
(
thªad
 *, 
__a˛_£t_fd_¨gs
 *);

1975 
sys___a˛_dñëe_fûe
(
thªad
 *, 
__a˛_dñëe_fûe_¨gs
 *);

1976 
sys___a˛_dñëe_fd
(
thªad
 *, 
__a˛_dñëe_fd_¨gs
 *);

1977 
sys___a˛_a˛check_fûe
(
thªad
 *, 
__a˛_a˛check_fûe_¨gs
 *);

1978 
sys___a˛_a˛check_fd
(
thªad
 *, 
__a˛_a˛check_fd_¨gs
 *);

1979 
sys_exèâr˘l
(
thªad
 *, 
exèâr˘l_¨gs
 *);

1980 
sys_exèâr_£t_fûe
(
thªad
 *, 
exèâr_£t_fûe_¨gs
 *);

1981 
sys_exèâr_gë_fûe
(
thªad
 *, 
exèâr_gë_fûe_¨gs
 *);

1982 
sys_exèâr_dñëe_fûe
(
thªad
 *, 
exèâr_dñëe_fûe_¨gs
 *);

1983 
sys_aio_waôcom∂ëe
(
thªad
 *, 
aio_waôcom∂ëe_¨gs
 *);

1984 
sys_gëªsuid
(
thªad
 *, 
gëªsuid_¨gs
 *);

1985 
sys_gëªsgid
(
thªad
 *, 
gëªsgid_¨gs
 *);

1986 
sys_kqueue
(
thªad
 *, 
kqueue_¨gs
 *);

1987 
sys_exèâr_£t_fd
(
thªad
 *, 
exèâr_£t_fd_¨gs
 *);

1988 
sys_exèâr_gë_fd
(
thªad
 *, 
exèâr_gë_fd_¨gs
 *);

1989 
sys_exèâr_dñëe_fd
(
thªad
 *, 
exèâr_dñëe_fd_¨gs
 *);

1990 
sys___£tugid
(
thªad
 *, 
__£tugid_¨gs
 *);

1991 
sys_óc˚ss
(
thªad
 *, 
óc˚ss_¨gs
 *);

1992 
sys_afs3_sysˇŒ
(
thªad
 *, 
afs3_sysˇŒ_¨gs
 *);

1993 
sys_nmou¡
(
thªad
 *, 
nmou¡_¨gs
 *);

1994 
sys___mac_gë_¥oc
(
thªad
 *, 
__mac_gë_¥oc_¨gs
 *);

1995 
sys___mac_£t_¥oc
(
thªad
 *, 
__mac_£t_¥oc_¨gs
 *);

1996 
sys___mac_gë_fd
(
thªad
 *, 
__mac_gë_fd_¨gs
 *);

1997 
sys___mac_gë_fûe
(
thªad
 *, 
__mac_gë_fûe_¨gs
 *);

1998 
sys___mac_£t_fd
(
thªad
 *, 
__mac_£t_fd_¨gs
 *);

1999 
sys___mac_£t_fûe
(
thªad
 *, 
__mac_£t_fûe_¨gs
 *);

2000 
sys_kív
(
thªad
 *, 
kív_¨gs
 *);

2001 
sys_lchÊags
(
thªad
 *, 
lchÊags_¨gs
 *);

2002 
sys_uuidgí
(
thªad
 *, 
uuidgí_¨gs
 *);

2003 
sys_£ndfûe
(
thªad
 *, 
£ndfûe_¨gs
 *);

2004 
sys_mac_sysˇŒ
(
thªad
 *, 
mac_sysˇŒ_¨gs
 *);

2005 
sys_k£m_˛o£
(
thªad
 *, 
k£m_˛o£_¨gs
 *);

2006 
sys_k£m_po°
(
thªad
 *, 
k£m_po°_¨gs
 *);

2007 
sys_k£m_waô
(
thªad
 *, 
k£m_waô_¨gs
 *);

2008 
sys_k£m_åywaô
(
thªad
 *, 
k£m_åywaô_¨gs
 *);

2009 
sys_k£m_öô
(
thªad
 *, 
k£m_öô_¨gs
 *);

2010 
sys_k£m_›í
(
thªad
 *, 
k£m_›í_¨gs
 *);

2011 
sys_k£m_u∆ök
(
thªad
 *, 
k£m_u∆ök_¨gs
 *);

2012 
sys_k£m_gëvÆue
(
thªad
 *, 
k£m_gëvÆue_¨gs
 *);

2013 
sys_k£m_de°roy
(
thªad
 *, 
k£m_de°roy_¨gs
 *);

2014 
sys___mac_gë_pid
(
thªad
 *, 
__mac_gë_pid_¨gs
 *);

2015 
sys___mac_gë_lök
(
thªad
 *, 
__mac_gë_lök_¨gs
 *);

2016 
sys___mac_£t_lök
(
thªad
 *, 
__mac_£t_lök_¨gs
 *);

2017 
sys_exèâr_£t_lök
(
thªad
 *, 
exèâr_£t_lök_¨gs
 *);

2018 
sys_exèâr_gë_lök
(
thªad
 *, 
exèâr_gë_lök_¨gs
 *);

2019 
sys_exèâr_dñëe_lök
(
thªad
 *, 
exèâr_dñëe_lök_¨gs
 *);

2020 
sys___mac_execve
(
thªad
 *, 
__mac_execve_¨gs
 *);

2021 
sys_siga˘i⁄
(
thªad
 *, 
siga˘i⁄_¨gs
 *);

2022 
sys_sigªtu∫
(
thªad
 *, 
sigªtu∫_¨gs
 *);

2023 
sys_gëc⁄ãxt
(
thªad
 *, 
gëc⁄ãxt_¨gs
 *);

2024 
sys_£tc⁄ãxt
(
thªad
 *, 
£tc⁄ãxt_¨gs
 *);

2025 
sys_sw≠c⁄ãxt
(
thªad
 *, 
sw≠c⁄ãxt_¨gs
 *);

2026 
sys_sw≠off
(
thªad
 *, 
sw≠off_¨gs
 *);

2027 
sys___a˛_gë_lök
(
thªad
 *, 
__a˛_gë_lök_¨gs
 *);

2028 
sys___a˛_£t_lök
(
thªad
 *, 
__a˛_£t_lök_¨gs
 *);

2029 
sys___a˛_dñëe_lök
(
thªad
 *, 
__a˛_dñëe_lök_¨gs
 *);

2030 
sys___a˛_a˛check_lök
(
thªad
 *, 
__a˛_a˛check_lök_¨gs
 *);

2031 
sys_sigwaô
(
thªad
 *, 
sigwaô_¨gs
 *);

2032 
sys_thr_¸óã
(
thªad
 *, 
thr_¸óã_¨gs
 *);

2033 
sys_thr_exô
(
thªad
 *, 
thr_exô_¨gs
 *);

2034 
sys_thr_£lf
(
thªad
 *, 
thr_£lf_¨gs
 *);

2035 
sys_thr_kûl
(
thªad
 *, 
thr_kûl_¨gs
 *);

2036 
sys_jaû_©èch
(
thªad
 *, 
jaû_©èch_¨gs
 *);

2037 
sys_exèâr_li°_fd
(
thªad
 *, 
exèâr_li°_fd_¨gs
 *);

2038 
sys_exèâr_li°_fûe
(
thªad
 *, 
exèâr_li°_fûe_¨gs
 *);

2039 
sys_exèâr_li°_lök
(
thªad
 *, 
exèâr_li°_lök_¨gs
 *);

2040 
sys_k£m_timedwaô
(
thªad
 *, 
k£m_timedwaô_¨gs
 *);

2041 
sys_thr_su•íd
(
thªad
 *, 
thr_su•íd_¨gs
 *);

2042 
sys_thr_wake
(
thªad
 *, 
thr_wake_¨gs
 *);

2043 
sys_kldu∆ﬂdf
(
thªad
 *, 
kldu∆ﬂdf_¨gs
 *);

2044 
sys_audô
(
thªad
 *, 
audô_¨gs
 *);

2045 
sys_audô⁄
(
thªad
 *, 
audô⁄_¨gs
 *);

2046 
sys_gëauid
(
thªad
 *, 
gëauid_¨gs
 *);

2047 
sys_£èuid
(
thªad
 *, 
£èuid_¨gs
 *);

2048 
sys_gëaudô
(
thªad
 *, 
gëaudô_¨gs
 *);

2049 
sys_£èudô
(
thªad
 *, 
£èudô_¨gs
 *);

2050 
sys_gëaudô_addr
(
thªad
 *, 
gëaudô_addr_¨gs
 *);

2051 
sys_£èudô_addr
(
thªad
 *, 
£èudô_addr_¨gs
 *);

2052 
sys_audô˘l
(
thªad
 *, 
audô˘l_¨gs
 *);

2053 
sys__umtx_›
(
thªad
 *, 
_umtx_›_¨gs
 *);

2054 
sys_thr_√w
(
thªad
 *, 
thr_√w_¨gs
 *);

2055 
sys_sigqueue
(
thªad
 *, 
sigqueue_¨gs
 *);

2056 
sys_kmq_›í
(
thªad
 *, 
kmq_›í_¨gs
 *);

2057 
sys_kmq_£èâr
(
thªad
 *, 
kmq_£èâr_¨gs
 *);

2058 
sys_kmq_timedª˚ive
(
thªad
 *, 
kmq_timedª˚ive_¨gs
 *);

2059 
sys_kmq_timed£nd
(
thªad
 *, 
kmq_timed£nd_¨gs
 *);

2060 
sys_kmq_nŸify
(
thªad
 *, 
kmq_nŸify_¨gs
 *);

2061 
sys_kmq_u∆ök
(
thªad
 *, 
kmq_u∆ök_¨gs
 *);

2062 
sys_ab‹t2
(
thªad
 *, 
ab‹t2_¨gs
 *);

2063 
sys_thr_£t_«me
(
thªad
 *, 
thr_£t_«me_¨gs
 *);

2064 
sys_aio_fsync
(
thªad
 *, 
aio_fsync_¨gs
 *);

2065 
sys_π¥io_thªad
(
thªad
 *, 
π¥io_thªad_¨gs
 *);

2066 
sys_s˘p_≥ñoff
(
thªad
 *, 
s˘p_≥ñoff_¨gs
 *);

2067 
sys_s˘p_gíîic_£ndmsg
(
thªad
 *, 
s˘p_gíîic_£ndmsg_¨gs
 *);

2068 
sys_s˘p_gíîic_£ndmsg_iov
(
thªad
 *, 
s˘p_gíîic_£ndmsg_iov_¨gs
 *);

2069 
sys_s˘p_gíîic_ªcvmsg
(
thªad
 *, 
s˘p_gíîic_ªcvmsg_¨gs
 *);

2070 
sys_¥ód
(
thªad
 *, 
¥ód_¨gs
 *);

2071 
sys_pwrôe
(
thªad
 *, 
pwrôe_¨gs
 *);

2072 
sys_mm≠
(
thªad
 *, 
mm≠_¨gs
 *);

2073 
sys_l£ek
(
thªad
 *, 
l£ek_¨gs
 *);

2074 
sys_åunˇã
(
thªad
 *, 
åunˇã_¨gs
 *);

2075 
sys_·runˇã
(
thªad
 *, 
·runˇã_¨gs
 *);

2076 
sys_thr_kûl2
(
thªad
 *, 
thr_kûl2_¨gs
 *);

2077 
sys_shm_›í
(
thªad
 *, 
shm_›í_¨gs
 *);

2078 
sys_shm_u∆ök
(
thªad
 *, 
shm_u∆ök_¨gs
 *);

2079 
sys_˝u£t
(
thªad
 *, 
˝u£t_¨gs
 *);

2080 
sys_˝u£t_£tid
(
thªad
 *, 
˝u£t_£tid_¨gs
 *);

2081 
sys_˝u£t_gëid
(
thªad
 *, 
˝u£t_gëid_¨gs
 *);

2082 
sys_˝u£t_gëafföôy
(
thªad
 *, 
˝u£t_gëafföôy_¨gs
 *);

2083 
sys_˝u£t_£èfföôy
(
thªad
 *, 
˝u£t_£èfföôy_¨gs
 *);

2084 
sys_Ác˚sßt
(
thªad
 *, 
Ác˚sßt_¨gs
 *);

2085 
sys_fchmod©
(
thªad
 *, 
fchmod©_¨gs
 *);

2086 
sys_fchow«t
(
thªad
 *, 
fchow«t_¨gs
 *);

2087 
sys_„xecve
(
thªad
 *, 
„xecve_¨gs
 *);

2088 
sys_futimeßt
(
thªad
 *, 
futimeßt_¨gs
 *);

2089 
sys_lök©
(
thªad
 *, 
lök©_¨gs
 *);

2090 
sys_mkdú©
(
thªad
 *, 
mkdú©_¨gs
 *);

2091 
sys_mkfifﬂt
(
thªad
 *, 
mkfifﬂt_¨gs
 *);

2092 
sys_›í©
(
thªad
 *, 
›í©_¨gs
 *);

2093 
sys_ªadlök©
(
thªad
 *, 
ªadlök©_¨gs
 *);

2094 
sys_ª«mót
(
thªad
 *, 
ª«mót_¨gs
 *);

2095 
sys_symlök©
(
thªad
 *, 
symlök©_¨gs
 *);

2096 
sys_u∆ök©
(
thªad
 *, 
u∆ök©_¨gs
 *);

2097 
sys_posix_›í±
(
thªad
 *, 
posix_›í±_¨gs
 *);

2098 
sys_gssd_sysˇŒ
(
thªad
 *, 
gssd_sysˇŒ_¨gs
 *);

2099 
sys_jaû_gë
(
thªad
 *, 
jaû_gë_¨gs
 *);

2100 
sys_jaû_£t
(
thªad
 *, 
jaû_£t_¨gs
 *);

2101 
sys_jaû_ªmove
(
thªad
 *, 
jaû_ªmove_¨gs
 *);

2102 
sys_˛o£‰om
(
thªad
 *, 
˛o£‰om_¨gs
 *);

2103 
sys___£m˘l
(
thªad
 *, 
__£m˘l_¨gs
 *);

2104 
sys_msg˘l
(
thªad
 *, 
msg˘l_¨gs
 *);

2105 
sys_shm˘l
(
thªad
 *, 
shm˘l_¨gs
 *);

2106 
sys_Õ©hc⁄f
(
thªad
 *, 
Õ©hc⁄f_¨gs
 *);

2107 
sys___ˇp_rights_gë
(
thªad
 *, 
__ˇp_rights_gë_¨gs
 *);

2108 
sys_ˇp_íãr
(
thªad
 *, 
ˇp_íãr_¨gs
 *);

2109 
sys_ˇp_gëmode
(
thªad
 *, 
ˇp_gëmode_¨gs
 *);

2110 
sys_pdf‹k
(
thªad
 *, 
pdf‹k_¨gs
 *);

2111 
sys_pdkûl
(
thªad
 *, 
pdkûl_¨gs
 *);

2112 
sys_pdgëpid
(
thªad
 *, 
pdgëpid_¨gs
 *);

2113 
sys_p£À˘
(
thªad
 *, 
p£À˘_¨gs
 *);

2114 
sys_gëlogö˛ass
(
thªad
 *, 
gëlogö˛ass_¨gs
 *);

2115 
sys_£éogö˛ass
(
thªad
 *, 
£éogö˛ass_¨gs
 *);

2116 
sys_r˘l_gë_øc˘
(
thªad
 *, 
r˘l_gë_øc˘_¨gs
 *);

2117 
sys_r˘l_gë_ruÀs
(
thªad
 *, 
r˘l_gë_ruÀs_¨gs
 *);

2118 
sys_r˘l_gë_limôs
(
thªad
 *, 
r˘l_gë_limôs_¨gs
 *);

2119 
sys_r˘l_add_ruÀ
(
thªad
 *, 
r˘l_add_ruÀ_¨gs
 *);

2120 
sys_r˘l_ªmove_ruÀ
(
thªad
 *, 
r˘l_ªmove_ruÀ_¨gs
 *);

2121 
sys_posix_ÁŒoˇã
(
thªad
 *, 
posix_ÁŒoˇã_¨gs
 *);

2122 
sys_posix_Ádvi£
(
thªad
 *, 
posix_Ádvi£_¨gs
 *);

2123 
sys_waô6
(
thªad
 *, 
waô6_¨gs
 *);

2124 
sys_ˇp_rights_limô
(
thªad
 *, 
ˇp_rights_limô_¨gs
 *);

2125 
sys_ˇp_io˘ls_limô
(
thªad
 *, 
ˇp_io˘ls_limô_¨gs
 *);

2126 
sys_ˇp_io˘ls_gë
(
thªad
 *, 
ˇp_io˘ls_gë_¨gs
 *);

2127 
sys_ˇp_f˙és_limô
(
thªad
 *, 
ˇp_f˙és_limô_¨gs
 *);

2128 
sys_ˇp_f˙és_gë
(
thªad
 *, 
ˇp_f˙és_gë_¨gs
 *);

2129 
sys_böd©
(
thªad
 *, 
böd©_¨gs
 *);

2130 
sys_c⁄√˘©
(
thªad
 *, 
c⁄√˘©_¨gs
 *);

2131 
sys_chÊagßt
(
thªad
 *, 
chÊagßt_¨gs
 *);

2132 
sys_ac˚±4
(
thªad
 *, 
ac˚±4_¨gs
 *);

2133 
sys_pùe2
(
thªad
 *, 
pùe2_¨gs
 *);

2134 
sys_aio_mlock
(
thªad
 *, 
aio_mlock_¨gs
 *);

2135 
sys_¥oc˘l
(
thªad
 *, 
¥oc˘l_¨gs
 *);

2136 
sys_µﬁl
(
thªad
 *, 
µﬁl_¨gs
 *);

2137 
sys_futimís
(
thªad
 *, 
futimís_¨gs
 *);

2138 
sys_utimíßt
(
thªad
 *, 
utimíßt_¨gs
 *);

2139 
sys_fd©async
(
thªad
 *, 
fd©async_¨gs
 *);

2140 
sys_f°©
(
thªad
 *, 
f°©_¨gs
 *);

2141 
sys_f°©©
(
thªad
 *, 
f°©©_¨gs
 *);

2142 
sys_fh°©
(
thªad
 *, 
fh°©_¨gs
 *);

2143 
sys_gëdúíåõs
(
thªad
 *, 
gëdúíåõs_¨gs
 *);

2144 
sys_°©fs
(
thªad
 *, 
°©fs_¨gs
 *);

2145 
sys_f°©fs
(
thªad
 *, 
f°©fs_¨gs
 *);

2146 
sys_gëfs°©
(
thªad
 *, 
gëfs°©_¨gs
 *);

2147 
sys_fh°©fs
(
thªad
 *, 
fh°©fs_¨gs
 *);

2148 
sys_mknod©
(
thªad
 *, 
mknod©_¨gs
 *);

2149 
sys_kevít
(
thªad
 *, 
kevít_¨gs
 *);

2150 
sys_˝u£t_gëdomaö
(
thªad
 *, 
˝u£t_gëdomaö_¨gs
 *);

2151 
sys_˝u£t_£tdomaö
(
thªad
 *, 
˝u£t_£tdomaö_¨gs
 *);

2152 
sys_gëøndom
(
thªad
 *, 
gëøndom_¨gs
 *);

2154 #ifde‡
COMPAT_43


2156 
	so¸ót_¨gs
 {

2157 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2158 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

2160 
	sﬁ£ek_¨gs
 {

2161 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2162 
	moff£t_l_
[
PADL_
()]; 
	moff£t
; 
	moff£t_r_
[
PADR_
()];

2163 
	mwhí˚_l_
[
PADL_
()]; 
	mwhí˚
; 
	mwhí˚_r_
[
PADR_
()];

2165 
	so°©_¨gs
 {

2166 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2167 
	mub_l_
[
PADL_
(
o°©
 *)]; o°© * 
	mub
; 
	mub_r_
[
PADR_
(ostat *)];

2169 
	sﬁ°©_¨gs
 {

2170 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2171 
	mub_l_
[
PADL_
(
o°©
 *)]; o°© * 
	mub
; 
	mub_r_
[
PADR_
(ostat *)];

2173 
	sosiga˘i⁄_¨gs
 {

2174 
	msignum_l_
[
PADL_
()]; 
	msignum
; 
	msignum_r_
[
PADR_
()];

2175 
	mnß_l_
[
PADL_
(
osiga˘i⁄
 *)]; osiga˘i⁄ * 
	mnß
; 
	mnß_r_
[
PADR_
(osigaction *)];

2176 
	moß_l_
[
PADL_
(
osiga˘i⁄
 *)]; osiga˘i⁄ * 
	moß
; 
	moß_r_
[
PADR_
(osigaction *)];

2178 
	sosig¥ocmask_¨gs
 {

2179 
	mhow_l_
[
PADL_
()]; 
	mhow
; 
	mhow_r_
[
PADR_
()];

2180 
	mmask_l_
[
PADL_
(
osig£t_t
)]; osig£t_à
	mmask
; 
	mmask_r_
[
PADR_
(osigset_t)];

2182 
	sof°©_¨gs
 {

2183 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2184 
	msb_l_
[
PADL_
(
o°©
 *)]; o°© * 
	msb
; 
	msb_r_
[
PADR_
(ostat *)];

2186 
	sgëkînöfo_¨gs
 {

2187 
	m›_l_
[
PADL_
()]; 
	m›
; 
	m›_r_
[
PADR_
()];

2188 
	mwhîe_l_
[
PADL_
(*)]; * 
	mwhîe
; 
	mwhîe_r_
[
PADR_
(*)];

2189 
	msize_l_
[
PADL_
(
size_t
 *)]; size_à* 
	msize
; 
	msize_r_
[
PADR_
(size_t *)];

2190 
	m¨g_l_
[
PADL_
()]; 
	m¨g
; 
	m¨g_r_
[
PADR_
()];

2192 
	somm≠_¨gs
 {

2193 
	maddr_l_
[
PADL_
(*)]; * 
	maddr
; 
	maddr_r_
[
PADR_
(*)];

2194 
	mÀn_l_
[
PADL_
()]; 
	mÀn
; 
	mÀn_r_
[
PADR_
()];

2195 
	m¥Ÿ_l_
[
PADL_
()]; 
	m¥Ÿ
; 
	m¥Ÿ_r_
[
PADR_
()];

2196 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

2197 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2198 
	mpos_l_
[
PADL_
()]; 
	mpos
; 
	mpos_r_
[
PADR_
()];

2200 
	sgëho°«me_¨gs
 {

2201 
	mho°«me_l_
[
PADL_
(*)]; * 
	mho°«me
; 
	mho°«me_r_
[
PADR_
(*)];

2202 
	mÀn_l_
[
PADL_
(
u_öt
)]; u_öà
	mÀn
; 
	mÀn_r_
[
PADR_
(u_int)];

2204 
	s£tho°«me_¨gs
 {

2205 
	mho°«me_l_
[
PADL_
(*)]; * 
	mho°«me
; 
	mho°«me_r_
[
PADR_
(*)];

2206 
	mÀn_l_
[
PADL_
(
u_öt
)]; u_öà
	mÀn
; 
	mÀn_r_
[
PADR_
(u_int)];

2208 
	so£nd_¨gs
 {

2209 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

2210 
	mbuf_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mbuf
; 
	mbuf_r_
[
PADR_
(caddr_t)];

2211 
	mÀn_l_
[
PADL_
()]; 
	mÀn
; 
	mÀn_r_
[
PADR_
()];

2212 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

2214 
	s‹ecv_¨gs
 {

2215 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

2216 
	mbuf_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mbuf
; 
	mbuf_r_
[
PADR_
(caddr_t)];

2217 
	mÀn_l_
[
PADL_
()]; 
	mÀn
; 
	mÀn_r_
[
PADR_
()];

2218 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

2220 
	sosigªtu∫_¨gs
 {

2221 
	msig˙txp_l_
[
PADL_
(
osigc⁄ãxt
 *)]; osigc⁄ãxà* 
	msig˙txp
; 
	msig˙txp_r_
[
PADR_
(osigcontext *)];

2223 
	sosigvec_¨gs
 {

2224 
	msignum_l_
[
PADL_
()]; 
	msignum
; 
	msignum_r_
[
PADR_
()];

2225 
	mnsv_l_
[
PADL_
(
sigvec
 *)]; sigve¯* 
	mnsv
; 
	mnsv_r_
[
PADR_
(sigvec *)];

2226 
	mosv_l_
[
PADL_
(
sigvec
 *)]; sigve¯* 
	mosv
; 
	mosv_r_
[
PADR_
(sigvec *)];

2228 
	sosigblock_¨gs
 {

2229 
	mmask_l_
[
PADL_
()]; 
	mmask
; 
	mmask_r_
[
PADR_
()];

2231 
	sosig£tmask_¨gs
 {

2232 
	mmask_l_
[
PADL_
()]; 
	mmask
; 
	mmask_r_
[
PADR_
()];

2234 
	sosigsu•íd_¨gs
 {

2235 
	mmask_l_
[
PADL_
(
osig£t_t
)]; osig£t_à
	mmask
; 
	mmask_r_
[
PADR_
(osigset_t)];

2237 
	sosig°ack_¨gs
 {

2238 
	mnss_l_
[
PADL_
(
sig°ack
 *)]; sig°ack * 
	mnss
; 
	mnss_r_
[
PADR_
(sigstack *)];

2239 
	moss_l_
[
PADL_
(
sig°ack
 *)]; sig°ack * 
	moss
; 
	moss_r_
[
PADR_
(sigstack *)];

2241 
	s‹ecvmsg_¨gs
 {

2242 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

2243 
	mmsg_l_
[
PADL_
(
omsghdr
 *)]; omsghd∏* 
	mmsg
; 
	mmsg_r_
[
PADR_
(omsghdr *)];

2244 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

2246 
	so£ndmsg_¨gs
 {

2247 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

2248 
	mmsg_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	mmsg
; 
	mmsg_r_
[
PADR_
(caddr_t)];

2249 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

2251 
	sŸrunˇã_¨gs
 {

2252 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2253 
	mÀngth_l_
[
PADL_
()]; 
	mÀngth
; 
	mÀngth_r_
[
PADR_
()];

2255 
	so·runˇã_¨gs
 {

2256 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2257 
	mÀngth_l_
[
PADL_
()]; 
	mÀngth
; 
	mÀngth_r_
[
PADR_
()];

2259 
	sogë≥î«me_¨gs
 {

2260 
	mfdes_l_
[
PADL_
()]; 
	mfdes
; 
	mfdes_r_
[
PADR_
()];

2261 
	maß_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	maß
; 
	maß_r_
[
PADR_
(caddr_t)];

2262 
	mÆí_l_
[
PADL_
(*)]; * 
	mÆí
; 
	mÆí_r_
[
PADR_
(*)];

2264 
	so£tho°id_¨gs
 {

2265 
	mho°id_l_
[
PADL_
()]; 
	mho°id
; 
	mho°id_r_
[
PADR_
()];

2267 
	sogëæimô_¨gs
 {

2268 
	mwhich_l_
[
PADL_
(
u_öt
)]; u_öà
	mwhich
; 
	mwhich_r_
[
PADR_
(u_int)];

2269 
	mæp_l_
[
PADL_
(
‹limô
 *)]; ‹limô * 
	mæp
; 
	mæp_r_
[
PADR_
(orlimit *)];

2271 
	so£ålimô_¨gs
 {

2272 
	mwhich_l_
[
PADL_
(
u_öt
)]; u_öà
	mwhich
; 
	mwhich_r_
[
PADR_
(u_int)];

2273 
	mæp_l_
[
PADL_
(
‹limô
 *)]; ‹limô * 
	mæp
; 
	mæp_r_
[
PADR_
(orlimit *)];

2275 
	sokûÕg_¨gs
 {

2276 
	mpgid_l_
[
PADL_
()]; 
	mpgid
; 
	mpgid_r_
[
PADR_
()];

2277 
	msignum_l_
[
PADL_
()]; 
	msignum
; 
	msignum_r_
[
PADR_
()];

2279 
	sogëdúíåõs_¨gs
 {

2280 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2281 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

2282 
	mcou¡_l_
[
PADL_
(
u_öt
)]; u_öà
	mcou¡
; 
	mcou¡_r_
[
PADR_
(u_int)];

2283 
	mba£p_l_
[
PADL_
(*)]; * 
	mba£p
; 
	mba£p_r_
[
PADR_
(*)];

2285 
o¸ót
(
thªad
 *, 
o¸ót_¨gs
 *);

2286 
ﬁ£ek
(
thªad
 *, 
ﬁ£ek_¨gs
 *);

2287 
o°©
(
thªad
 *, 
o°©_¨gs
 *);

2288 
ﬁ°©
(
thªad
 *, 
ﬁ°©_¨gs
 *);

2289 
osiga˘i⁄
(
thªad
 *, 
osiga˘i⁄_¨gs
 *);

2290 
osig¥ocmask
(
thªad
 *, 
osig¥ocmask_¨gs
 *);

2291 
osig≥ndög
(
thªad
 *, 
osig≥ndög_¨gs
 *);

2292 
of°©
(
thªad
 *, 
of°©_¨gs
 *);

2293 
ogëkînöfo
(
thªad
 *, 
gëkînöfo_¨gs
 *);

2294 
ogë∑gesize
(
thªad
 *, 
gë∑gesize_¨gs
 *);

2295 
omm≠
(
thªad
 *, 
omm≠_¨gs
 *);

2296 
owaô
(
thªad
 *, 
owaô_¨gs
 *);

2297 
ogëho°«me
(
thªad
 *, 
gëho°«me_¨gs
 *);

2298 
o£tho°«me
(
thªad
 *, 
£tho°«me_¨gs
 *);

2299 
ﬂc˚±
(
thªad
 *, 
ac˚±_¨gs
 *);

2300 
o£nd
(
thªad
 *, 
o£nd_¨gs
 *);

2301 
‹ecv
(
thªad
 *, 
‹ecv_¨gs
 *);

2302 
osigªtu∫
(
thªad
 *, 
osigªtu∫_¨gs
 *);

2303 
osigvec
(
thªad
 *, 
osigvec_¨gs
 *);

2304 
osigblock
(
thªad
 *, 
osigblock_¨gs
 *);

2305 
osig£tmask
(
thªad
 *, 
osig£tmask_¨gs
 *);

2306 
osigsu•íd
(
thªad
 *, 
osigsu•íd_¨gs
 *);

2307 
osig°ack
(
thªad
 *, 
osig°ack_¨gs
 *);

2308 
‹ecvmsg
(
thªad
 *, 
‹ecvmsg_¨gs
 *);

2309 
o£ndmsg
(
thªad
 *, 
o£ndmsg_¨gs
 *);

2310 
‹ecv‰om
(
thªad
 *, 
ªcv‰om_¨gs
 *);

2311 
Ÿrunˇã
(
thªad
 *, 
Ÿrunˇã_¨gs
 *);

2312 
o·runˇã
(
thªad
 *, 
o·runˇã_¨gs
 *);

2313 
ogë≥î«me
(
thªad
 *, 
ogë≥î«me_¨gs
 *);

2314 
ogëho°id
(
thªad
 *, 
ogëho°id_¨gs
 *);

2315 
o£tho°id
(
thªad
 *, 
o£tho°id_¨gs
 *);

2316 
ogëæimô
(
thªad
 *, 
ogëæimô_¨gs
 *);

2317 
o£ålimô
(
thªad
 *, 
o£ålimô_¨gs
 *);

2318 
okûÕg
(
thªad
 *, 
okûÕg_¨gs
 *);

2319 
oquŸa
(
thªad
 *, 
oquŸa_¨gs
 *);

2320 
ogësock«me
(
thªad
 *, 
gësock«me_¨gs
 *);

2321 
ogëdúíåõs
(
thªad
 *, 
ogëdúíåõs_¨gs
 *);

2326 #ifde‡
COMPAT_FREEBSD4


2328 
	s‰ìbsd4_gëfs°©_¨gs
 {

2329 
	mbuf_l_
[
PADL_
(
o°©fs
 *)]; o°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(ostatfs *)];

2330 
	mbufsize_l_
[
PADL_
()]; 
	mbufsize
; 
	mbufsize_r_
[
PADR_
()];

2331 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

2333 
	s‰ìbsd4_°©fs_¨gs
 {

2334 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2335 
	mbuf_l_
[
PADL_
(
o°©fs
 *)]; o°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(ostatfs *)];

2337 
	s‰ìbsd4_f°©fs_¨gs
 {

2338 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2339 
	mbuf_l_
[
PADL_
(
o°©fs
 *)]; o°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(ostatfs *)];

2341 
	s‰ìbsd4_gëdomaö«me_¨gs
 {

2342 
	mdomaö«me_l_
[
PADL_
(*)]; * 
	mdomaö«me
; 
	mdomaö«me_r_
[
PADR_
(*)];

2343 
	mÀn_l_
[
PADL_
()]; 
	mÀn
; 
	mÀn_r_
[
PADR_
()];

2345 
	s‰ìbsd4_£tdomaö«me_¨gs
 {

2346 
	mdomaö«me_l_
[
PADL_
(*)]; * 
	mdomaö«me
; 
	mdomaö«me_r_
[
PADR_
(*)];

2347 
	mÀn_l_
[
PADL_
()]; 
	mÀn
; 
	mÀn_r_
[
PADR_
()];

2349 
	s‰ìbsd4_u«me_¨gs
 {

2350 
	m«me_l_
[
PADL_
(
ut¢ame
 *)]; ut¢amê* 
	m«me
; 
	m«me_r_
[
PADR_
(utsname *)];

2352 
	s‰ìbsd4_fh°©fs_¨gs
 {

2353 
	mu_fhp_l_
[
PADL_
(c⁄° 
fh™dÀ
 *)]; c⁄° fh™dÀ * 
	mu_fhp
; 
	mu_fhp_r_
[
PADR_
(const fhandle *)];

2354 
	mbuf_l_
[
PADL_
(
o°©fs
 *)]; o°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(ostatfs *)];

2356 
	s‰ìbsd4_£ndfûe_¨gs
 {

2357 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2358 
	ms_l_
[
PADL_
()]; 
	ms
; 
	ms_r_
[
PADR_
()];

2359 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

2360 
	mnbyãs_l_
[
PADL_
(
size_t
)]; size_à
	mnbyãs
; 
	mnbyãs_r_
[
PADR_
(size_t)];

2361 
	mhdå_l_
[
PADL_
(
sf_hdå
 *)]; sf_hdå * 
	mhdå
; 
	mhdå_r_
[
PADR_
(sf_hdtr *)];

2362 
	msbyãs_l_
[
PADL_
(
off_t
 *)]; off_à* 
	msbyãs
; 
	msbyãs_r_
[
PADR_
(off_t *)];

2363 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

2365 
	s‰ìbsd4_siga˘i⁄_¨gs
 {

2366 
	msig_l_
[
PADL_
()]; 
	msig
; 
	msig_r_
[
PADR_
()];

2367 
	ma˘_l_
[
PADL_
(c⁄° 
siga˘i⁄
 *)]; c⁄° siga˘i⁄ * 
	ma˘
; 
	ma˘_r_
[
PADR_
(const sigaction *)];

2368 
	mﬂ˘_l_
[
PADL_
(
siga˘i⁄
 *)]; siga˘i⁄ * 
	mﬂ˘
; 
	mﬂ˘_r_
[
PADR_
(sigaction *)];

2370 
	s‰ìbsd4_sigªtu∫_¨gs
 {

2371 
	msig˙txp_l_
[
PADL_
(c⁄° 
uc⁄ãxt4
 *)]; c⁄° uc⁄ãxt4 * 
	msig˙txp
; 
	msig˙txp_r_
[
PADR_
(const ucontext4 *)];

2373 
‰ìbsd4_gëfs°©
(
thªad
 *, 
‰ìbsd4_gëfs°©_¨gs
 *);

2374 
‰ìbsd4_°©fs
(
thªad
 *, 
‰ìbsd4_°©fs_¨gs
 *);

2375 
‰ìbsd4_f°©fs
(
thªad
 *, 
‰ìbsd4_f°©fs_¨gs
 *);

2376 
‰ìbsd4_gëdomaö«me
(
thªad
 *, 
‰ìbsd4_gëdomaö«me_¨gs
 *);

2377 
‰ìbsd4_£tdomaö«me
(
thªad
 *, 
‰ìbsd4_£tdomaö«me_¨gs
 *);

2378 
‰ìbsd4_u«me
(
thªad
 *, 
‰ìbsd4_u«me_¨gs
 *);

2379 
‰ìbsd4_fh°©fs
(
thªad
 *, 
‰ìbsd4_fh°©fs_¨gs
 *);

2380 
‰ìbsd4_£ndfûe
(
thªad
 *, 
‰ìbsd4_£ndfûe_¨gs
 *);

2381 
‰ìbsd4_siga˘i⁄
(
thªad
 *, 
‰ìbsd4_siga˘i⁄_¨gs
 *);

2382 
‰ìbsd4_sigªtu∫
(
thªad
 *, 
‰ìbsd4_sigªtu∫_¨gs
 *);

2387 #ifde‡
COMPAT_FREEBSD6


2389 
	s‰ìbsd6_¥ód_¨gs
 {

2390 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2391 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

2392 
	mnbyã_l_
[
PADL_
(
size_t
)]; size_à
	mnbyã
; 
	mnbyã_r_
[
PADR_
(size_t)];

2393 
	m∑d_l_
[
PADL_
()]; 
	m∑d
; 
	m∑d_r_
[
PADR_
()];

2394 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

2396 
	s‰ìbsd6_pwrôe_¨gs
 {

2397 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2398 
	mbuf_l_
[
PADL_
(c⁄° *)]; c⁄° * 
	mbuf
; 
	mbuf_r_
[
PADR_
(const *)];

2399 
	mnbyã_l_
[
PADL_
(
size_t
)]; size_à
	mnbyã
; 
	mnbyã_r_
[
PADR_
(size_t)];

2400 
	m∑d_l_
[
PADL_
()]; 
	m∑d
; 
	m∑d_r_
[
PADR_
()];

2401 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

2403 
	s‰ìbsd6_mm≠_¨gs
 {

2404 
	maddr_l_
[
PADL_
(
ˇddr_t
)]; caddr_à
	maddr
; 
	maddr_r_
[
PADR_
(caddr_t)];

2405 
	mÀn_l_
[
PADL_
(
size_t
)]; size_à
	mÀn
; 
	mÀn_r_
[
PADR_
(size_t)];

2406 
	m¥Ÿ_l_
[
PADL_
()]; 
	m¥Ÿ
; 
	m¥Ÿ_r_
[
PADR_
()];

2407 
	mÊags_l_
[
PADL_
()]; 
	mÊags
; 
	mÊags_r_
[
PADR_
()];

2408 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2409 
	m∑d_l_
[
PADL_
()]; 
	m∑d
; 
	m∑d_r_
[
PADR_
()];

2410 
	mpos_l_
[
PADL_
(
off_t
)]; off_à
	mpos
; 
	mpos_r_
[
PADR_
(off_t)];

2412 
	s‰ìbsd6_l£ek_¨gs
 {

2413 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2414 
	m∑d_l_
[
PADL_
()]; 
	m∑d
; 
	m∑d_r_
[
PADR_
()];

2415 
	moff£t_l_
[
PADL_
(
off_t
)]; off_à
	moff£t
; 
	moff£t_r_
[
PADR_
(off_t)];

2416 
	mwhí˚_l_
[
PADL_
()]; 
	mwhí˚
; 
	mwhí˚_r_
[
PADR_
()];

2418 
	s‰ìbsd6_åunˇã_¨gs
 {

2419 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2420 
	m∑d_l_
[
PADL_
()]; 
	m∑d
; 
	m∑d_r_
[
PADR_
()];

2421 
	mÀngth_l_
[
PADL_
(
off_t
)]; off_à
	mÀngth
; 
	mÀngth_r_
[
PADR_
(off_t)];

2423 
	s‰ìbsd6_·runˇã_¨gs
 {

2424 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2425 
	m∑d_l_
[
PADL_
()]; 
	m∑d
; 
	m∑d_r_
[
PADR_
()];

2426 
	mÀngth_l_
[
PADL_
(
off_t
)]; off_à
	mÀngth
; 
	mÀngth_r_
[
PADR_
(off_t)];

2428 
	s‰ìbsd6_aio_ªad_¨gs
 {

2429 
	maiocbp_l_
[
PADL_
(
ﬂiocb
 *)]; ﬂiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(oaiocb *)];

2431 
	s‰ìbsd6_aio_wrôe_¨gs
 {

2432 
	maiocbp_l_
[
PADL_
(
ﬂiocb
 *)]; ﬂiocb * 
	maiocbp
; 
	maiocbp_r_
[
PADR_
(oaiocb *)];

2434 
	s‰ìbsd6_lio_li°io_¨gs
 {

2435 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

2436 
	macb_li°_l_
[
PADL_
(
ﬂiocb
 *c⁄° *)]; ﬂiocb *c⁄° * 
	macb_li°
; 
	macb_li°_r_
[
PADR_
(oaiocb *const *)];

2437 
	m√¡_l_
[
PADL_
()]; 
	m√¡
; 
	m√¡_r_
[
PADR_
()];

2438 
	msig_l_
[
PADL_
(
osigevít
 *)]; osigevíà* 
	msig
; 
	msig_r_
[
PADR_
(osigevent *)];

2440 
‰ìbsd6_¥ód
(
thªad
 *, 
‰ìbsd6_¥ód_¨gs
 *);

2441 
‰ìbsd6_pwrôe
(
thªad
 *, 
‰ìbsd6_pwrôe_¨gs
 *);

2442 
‰ìbsd6_mm≠
(
thªad
 *, 
‰ìbsd6_mm≠_¨gs
 *);

2443 
‰ìbsd6_l£ek
(
thªad
 *, 
‰ìbsd6_l£ek_¨gs
 *);

2444 
‰ìbsd6_åunˇã
(
thªad
 *, 
‰ìbsd6_åunˇã_¨gs
 *);

2445 
‰ìbsd6_·runˇã
(
thªad
 *, 
‰ìbsd6_·runˇã_¨gs
 *);

2446 
‰ìbsd6_aio_ªad
(
thªad
 *, 
‰ìbsd6_aio_ªad_¨gs
 *);

2447 
‰ìbsd6_aio_wrôe
(
thªad
 *, 
‰ìbsd6_aio_wrôe_¨gs
 *);

2448 
‰ìbsd6_lio_li°io
(
thªad
 *, 
‰ìbsd6_lio_li°io_¨gs
 *);

2453 #ifde‡
COMPAT_FREEBSD7


2455 
	s‰ìbsd7___£m˘l_¨gs
 {

2456 
	m£mid_l_
[
PADL_
()]; 
	m£mid
; 
	m£mid_r_
[
PADR_
()];

2457 
	m£mnum_l_
[
PADL_
()]; 
	m£mnum
; 
	m£mnum_r_
[
PADR_
()];

2458 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

2459 
	m¨g_l_
[
PADL_
(
£mun_ﬁd
 *)]; £mun_ﬁd * 
	m¨g
; 
	m¨g_r_
[
PADR_
(semun_old *)];

2461 
	s‰ìbsd7_msg˘l_¨gs
 {

2462 
	mmsqid_l_
[
PADL_
()]; 
	mmsqid
; 
	mmsqid_r_
[
PADR_
()];

2463 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

2464 
	mbuf_l_
[
PADL_
(
msqid_ds_ﬁd
 *)]; msqid_ds_ﬁd * 
	mbuf
; 
	mbuf_r_
[
PADR_
(msqid_ds_old *)];

2466 
	s‰ìbsd7_shm˘l_¨gs
 {

2467 
	mshmid_l_
[
PADL_
()]; 
	mshmid
; 
	mshmid_r_
[
PADR_
()];

2468 
	mcmd_l_
[
PADL_
()]; 
	mcmd
; 
	mcmd_r_
[
PADR_
()];

2469 
	mbuf_l_
[
PADL_
(
shmid_ds_ﬁd
 *)]; shmid_ds_ﬁd * 
	mbuf
; 
	mbuf_r_
[
PADR_
(shmid_ds_old *)];

2471 
‰ìbsd7___£m˘l
(
thªad
 *, 
‰ìbsd7___£m˘l_¨gs
 *);

2472 
‰ìbsd7_msg˘l
(
thªad
 *, 
‰ìbsd7_msg˘l_¨gs
 *);

2473 
‰ìbsd7_shm˘l
(
thªad
 *, 
‰ìbsd7_shm˘l_¨gs
 *);

2478 #ifde‡
COMPAT_FREEBSD10


2480 
‰ìbsd10_pùe
(
thªad
 *, 
‰ìbsd10_pùe_¨gs
 *);

2485 #ifde‡
COMPAT_FREEBSD11


2487 
	s‰ìbsd11_mknod_¨gs
 {

2488 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2489 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

2490 
	mdev_l_
[
PADL_
(
uöt32_t
)]; uöt32_à
	mdev
; 
	mdev_r_
[
PADR_
(uint32_t)];

2492 
	s‰ìbsd11_vadvi£_¨gs
 {

2493 
	m™om_l_
[
PADL_
()]; 
	m™om
; 
	m™om_r_
[
PADR_
()];

2495 
	s‰ìbsd11_°©_¨gs
 {

2496 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2497 
	mub_l_
[
PADL_
(
‰ìbsd11_°©
 *)]; ‰ìbsd11_°© * 
	mub
; 
	mub_r_
[
PADR_
(freebsd11_stat *)];

2499 
	s‰ìbsd11_f°©_¨gs
 {

2500 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2501 
	msb_l_
[
PADL_
(
‰ìbsd11_°©
 *)]; ‰ìbsd11_°© * 
	msb
; 
	msb_r_
[
PADR_
(freebsd11_stat *)];

2503 
	s‰ìbsd11_l°©_¨gs
 {

2504 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2505 
	mub_l_
[
PADL_
(
‰ìbsd11_°©
 *)]; ‰ìbsd11_°© * 
	mub
; 
	mub_r_
[
PADR_
(freebsd11_stat *)];

2507 
	s‰ìbsd11_gëdúíåõs_¨gs
 {

2508 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2509 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

2510 
	mcou¡_l_
[
PADL_
(
u_öt
)]; u_öà
	mcou¡
; 
	mcou¡_r_
[
PADR_
(u_int)];

2511 
	mba£p_l_
[
PADL_
(*)]; * 
	mba£p
; 
	mba£p_r_
[
PADR_
(*)];

2513 
	s‰ìbsd11_gëdíts_¨gs
 {

2514 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2515 
	mbuf_l_
[
PADL_
(*)]; * 
	mbuf
; 
	mbuf_r_
[
PADR_
(*)];

2516 
	mcou¡_l_
[
PADL_
(
size_t
)]; size_à
	mcou¡
; 
	mcou¡_r_
[
PADR_
(size_t)];

2518 
	s‰ìbsd11_n°©_¨gs
 {

2519 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2520 
	mub_l_
[
PADL_
(
n°©
 *)]; n°© * 
	mub
; 
	mub_r_
[
PADR_
(nstat *)];

2522 
	s‰ìbsd11_nf°©_¨gs
 {

2523 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2524 
	msb_l_
[
PADL_
(
n°©
 *)]; n°© * 
	msb
; 
	msb_r_
[
PADR_
(nstat *)];

2526 
	s‰ìbsd11_∆°©_¨gs
 {

2527 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2528 
	mub_l_
[
PADL_
(
n°©
 *)]; n°© * 
	mub
; 
	mub_r_
[
PADR_
(nstat *)];

2530 
	s‰ìbsd11_fh°©_¨gs
 {

2531 
	mu_fhp_l_
[
PADL_
(c⁄° 
fh™dÀ
 *)]; c⁄° fh™dÀ * 
	mu_fhp
; 
	mu_fhp_r_
[
PADR_
(const fhandle *)];

2532 
	msb_l_
[
PADL_
(
‰ìbsd11_°©
 *)]; ‰ìbsd11_°© * 
	msb
; 
	msb_r_
[
PADR_
(freebsd11_stat *)];

2534 
	s‰ìbsd11_kevít_¨gs
 {

2535 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2536 
	mch™gñi°_l_
[
PADL_
(
kevít_‰ìbsd11
 *)]; kevít_‰ìbsd11 * 
	mch™gñi°
; 
	mch™gñi°_r_
[
PADR_
(kevent_freebsd11 *)];

2537 
	mnch™ges_l_
[
PADL_
()]; 
	mnch™ges
; 
	mnch™ges_r_
[
PADR_
()];

2538 
	mevíéi°_l_
[
PADL_
(
kevít_‰ìbsd11
 *)]; kevít_‰ìbsd11 * 
	mevíéi°
; 
	mevíéi°_r_
[
PADR_
(kevent_freebsd11 *)];

2539 
	m√víts_l_
[
PADL_
()]; 
	m√víts
; 
	m√víts_r_
[
PADR_
()];

2540 
	mtimeout_l_
[
PADL_
(c⁄° 
time•ec
 *)]; c⁄° time•e¯* 
	mtimeout
; 
	mtimeout_r_
[
PADR_
(const timespec *)];

2542 
	s‰ìbsd11_gëfs°©_¨gs
 {

2543 
	mbuf_l_
[
PADL_
(
‰ìbsd11_°©fs
 *)]; ‰ìbsd11_°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(freebsd11_statfs *)];

2544 
	mbufsize_l_
[
PADL_
()]; 
	mbufsize
; 
	mbufsize_r_
[
PADR_
()];

2545 
	mmode_l_
[
PADL_
()]; 
	mmode
; 
	mmode_r_
[
PADR_
()];

2547 
	s‰ìbsd11_°©fs_¨gs
 {

2548 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2549 
	mbuf_l_
[
PADL_
(
‰ìbsd11_°©fs
 *)]; ‰ìbsd11_°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(freebsd11_statfs *)];

2551 
	s‰ìbsd11_f°©fs_¨gs
 {

2552 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2553 
	mbuf_l_
[
PADL_
(
‰ìbsd11_°©fs
 *)]; ‰ìbsd11_°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(freebsd11_statfs *)];

2555 
	s‰ìbsd11_fh°©fs_¨gs
 {

2556 
	mu_fhp_l_
[
PADL_
(c⁄° 
fh™dÀ
 *)]; c⁄° fh™dÀ * 
	mu_fhp
; 
	mu_fhp_r_
[
PADR_
(const fhandle *)];

2557 
	mbuf_l_
[
PADL_
(
‰ìbsd11_°©fs
 *)]; ‰ìbsd11_°©f†* 
	mbuf
; 
	mbuf_r_
[
PADR_
(freebsd11_statfs *)];

2559 
	s‰ìbsd11_f°©©_¨gs
 {

2560 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2561 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2562 
	mbuf_l_
[
PADL_
(
‰ìbsd11_°©
 *)]; ‰ìbsd11_°© * 
	mbuf
; 
	mbuf_r_
[
PADR_
(freebsd11_stat *)];

2563 
	mÊag_l_
[
PADL_
()]; 
	mÊag
; 
	mÊag_r_
[
PADR_
()];

2565 
	s‰ìbsd11_mknod©_¨gs
 {

2566 
	mfd_l_
[
PADL_
()]; 
	mfd
; 
	mfd_r_
[
PADR_
()];

2567 
	m∑th_l_
[
PADL_
(*)]; * 
	m∑th
; 
	m∑th_r_
[
PADR_
(*)];

2568 
	mmode_l_
[
PADL_
(
mode_t
)]; mode_à
	mmode
; 
	mmode_r_
[
PADR_
(mode_t)];

2569 
	mdev_l_
[
PADL_
(
uöt32_t
)]; uöt32_à
	mdev
; 
	mdev_r_
[
PADR_
(uint32_t)];

2571 
‰ìbsd11_mknod
(
thªad
 *, 
‰ìbsd11_mknod_¨gs
 *);

2572 
‰ìbsd11_vadvi£
(
thªad
 *, 
‰ìbsd11_vadvi£_¨gs
 *);

2573 
‰ìbsd11_°©
(
thªad
 *, 
‰ìbsd11_°©_¨gs
 *);

2574 
‰ìbsd11_f°©
(
thªad
 *, 
‰ìbsd11_f°©_¨gs
 *);

2575 
‰ìbsd11_l°©
(
thªad
 *, 
‰ìbsd11_l°©_¨gs
 *);

2576 
‰ìbsd11_gëdúíåõs
(
thªad
 *, 
‰ìbsd11_gëdúíåõs_¨gs
 *);

2577 
‰ìbsd11_gëdíts
(
thªad
 *, 
‰ìbsd11_gëdíts_¨gs
 *);

2578 
‰ìbsd11_n°©
(
thªad
 *, 
‰ìbsd11_n°©_¨gs
 *);

2579 
‰ìbsd11_nf°©
(
thªad
 *, 
‰ìbsd11_nf°©_¨gs
 *);

2580 
‰ìbsd11_∆°©
(
thªad
 *, 
‰ìbsd11_∆°©_¨gs
 *);

2581 
‰ìbsd11_fh°©
(
thªad
 *, 
‰ìbsd11_fh°©_¨gs
 *);

2582 
‰ìbsd11_kevít
(
thªad
 *, 
‰ìbsd11_kevít_¨gs
 *);

2583 
‰ìbsd11_gëfs°©
(
thªad
 *, 
‰ìbsd11_gëfs°©_¨gs
 *);

2584 
‰ìbsd11_°©fs
(
thªad
 *, 
‰ìbsd11_°©fs_¨gs
 *);

2585 
‰ìbsd11_f°©fs
(
thªad
 *, 
‰ìbsd11_f°©fs_¨gs
 *);

2586 
‰ìbsd11_fh°©fs
(
thªad
 *, 
‰ìbsd11_fh°©fs_¨gs
 *);

2587 
‰ìbsd11_f°©©
(
thªad
 *, 
‰ìbsd11_f°©©_¨gs
 *);

2588 
‰ìbsd11_mknod©
(
thªad
 *, 
‰ìbsd11_mknod©_¨gs
 *);

2592 
	#SYS_AUE_sysˇŒ
 
AUE_NULL


	)

2593 
	#SYS_AUE_exô
 
AUE_EXIT


	)

2594 
	#SYS_AUE_f‹k
 
AUE_FORK


	)

2595 
	#SYS_AUE_ªad
 
AUE_READ


	)

2596 
	#SYS_AUE_wrôe
 
AUE_WRITE


	)

2597 
	#SYS_AUE_›í
 
AUE_OPEN_RWTC


	)

2598 
	#SYS_AUE_˛o£
 
AUE_CLOSE


	)

2599 
	#SYS_AUE_waô4
 
AUE_WAIT4


	)

2600 
	#SYS_AUE_o¸ót
 
AUE_CREAT


	)

2601 
	#SYS_AUE_lök
 
AUE_LINK


	)

2602 
	#SYS_AUE_u∆ök
 
AUE_UNLINK


	)

2603 
	#SYS_AUE_chdú
 
AUE_CHDIR


	)

2604 
	#SYS_AUE_fchdú
 
AUE_FCHDIR


	)

2605 
	#SYS_AUE_‰ìbsd11_mknod
 
AUE_MKNOD


	)

2606 
	#SYS_AUE_chmod
 
AUE_CHMOD


	)

2607 
	#SYS_AUE_chown
 
AUE_CHOWN


	)

2608 
	#SYS_AUE_bªak
 
AUE_NULL


	)

2609 
	#SYS_AUE_‰ìbsd4_gëfs°©
 
AUE_GETFSSTAT


	)

2610 
	#SYS_AUE_ﬁ£ek
 
AUE_LSEEK


	)

2611 
	#SYS_AUE_gëpid
 
AUE_GETPID


	)

2612 
	#SYS_AUE_mou¡
 
AUE_MOUNT


	)

2613 
	#SYS_AUE_unmou¡
 
AUE_UMOUNT


	)

2614 
	#SYS_AUE_£tuid
 
AUE_SETUID


	)

2615 
	#SYS_AUE_gëuid
 
AUE_GETUID


	)

2616 
	#SYS_AUE_gëeuid
 
AUE_GETEUID


	)

2617 
	#SYS_AUE_±ø˚
 
AUE_PTRACE


	)

2618 
	#SYS_AUE_ªcvmsg
 
AUE_RECVMSG


	)

2619 
	#SYS_AUE_£ndmsg
 
AUE_SENDMSG


	)

2620 
	#SYS_AUE_ªcv‰om
 
AUE_RECVFROM


	)

2621 
	#SYS_AUE_ac˚±
 
AUE_ACCEPT


	)

2622 
	#SYS_AUE_gë≥î«me
 
AUE_GETPEERNAME


	)

2623 
	#SYS_AUE_gësock«me
 
AUE_GETSOCKNAME


	)

2624 
	#SYS_AUE_ac˚ss
 
AUE_ACCESS


	)

2625 
	#SYS_AUE_chÊags
 
AUE_CHFLAGS


	)

2626 
	#SYS_AUE_fchÊags
 
AUE_FCHFLAGS


	)

2627 
	#SYS_AUE_sync
 
AUE_SYNC


	)

2628 
	#SYS_AUE_kûl
 
AUE_KILL


	)

2629 
	#SYS_AUE_o°©
 
AUE_STAT


	)

2630 
	#SYS_AUE_gëµid
 
AUE_GETPPID


	)

2631 
	#SYS_AUE_ﬁ°©
 
AUE_LSTAT


	)

2632 
	#SYS_AUE_dup
 
AUE_DUP


	)

2633 
	#SYS_AUE_‰ìbsd10_pùe
 
AUE_PIPE


	)

2634 
	#SYS_AUE_gëegid
 
AUE_GETEGID


	)

2635 
	#SYS_AUE_¥ofû
 
AUE_PROFILE


	)

2636 
	#SYS_AUE_kåa˚
 
AUE_KTRACE


	)

2637 
	#SYS_AUE_osiga˘i⁄
 
AUE_SIGACTION


	)

2638 
	#SYS_AUE_gëgid
 
AUE_GETGID


	)

2639 
	#SYS_AUE_osig¥ocmask
 
AUE_SIGPROCMASK


	)

2640 
	#SYS_AUE_gëlogö
 
AUE_GETLOGIN


	)

2641 
	#SYS_AUE_£éogö
 
AUE_SETLOGIN


	)

2642 
	#SYS_AUE_ac˘
 
AUE_ACCT


	)

2643 
	#SYS_AUE_osig≥ndög
 
AUE_SIGPENDING


	)

2644 
	#SYS_AUE_sigÆt°ack
 
AUE_SIGALTSTACK


	)

2645 
	#SYS_AUE_io˘l
 
AUE_IOCTL


	)

2646 
	#SYS_AUE_ªboŸ
 
AUE_REBOOT


	)

2647 
	#SYS_AUE_ªvoke
 
AUE_REVOKE


	)

2648 
	#SYS_AUE_symlök
 
AUE_SYMLINK


	)

2649 
	#SYS_AUE_ªadlök
 
AUE_READLINK


	)

2650 
	#SYS_AUE_execve
 
AUE_EXECVE


	)

2651 
	#SYS_AUE_umask
 
AUE_UMASK


	)

2652 
	#SYS_AUE_chroŸ
 
AUE_CHROOT


	)

2653 
	#SYS_AUE_of°©
 
AUE_FSTAT


	)

2654 
	#SYS_AUE_ogëkînöfo
 
AUE_NULL


	)

2655 
	#SYS_AUE_ogë∑gesize
 
AUE_NULL


	)

2656 
	#SYS_AUE_msync
 
AUE_MSYNC


	)

2657 
	#SYS_AUE_vf‹k
 
AUE_VFORK


	)

2658 
	#SYS_AUE_sbrk
 
AUE_SBRK


	)

2659 
	#SYS_AUE_s°k
 
AUE_SSTK


	)

2660 
	#SYS_AUE_omm≠
 
AUE_MMAP


	)

2661 
	#SYS_AUE_‰ìbsd11_vadvi£
 
AUE_O_VADVISE


	)

2662 
	#SYS_AUE_munm≠
 
AUE_MUNMAP


	)

2663 
	#SYS_AUE_m¥Ÿe˘
 
AUE_MPROTECT


	)

2664 
	#SYS_AUE_madvi£
 
AUE_MADVISE


	)

2665 
	#SYS_AUE_möc‹e
 
AUE_MINCORE


	)

2666 
	#SYS_AUE_gëgroups
 
AUE_GETGROUPS


	)

2667 
	#SYS_AUE_£tgroups
 
AUE_SETGROUPS


	)

2668 
	#SYS_AUE_gëpgΩ
 
AUE_GETPGRP


	)

2669 
	#SYS_AUE_£çgid
 
AUE_SETPGRP


	)

2670 
	#SYS_AUE_£tôimî
 
AUE_SETITIMER


	)

2671 
	#SYS_AUE_owaô
 
AUE_WAIT4


	)

2672 
	#SYS_AUE_sw≠⁄
 
AUE_SWAPON


	)

2673 
	#SYS_AUE_gëôimî
 
AUE_GETITIMER


	)

2674 
	#SYS_AUE_ogëho°«me
 
AUE_SYSCTL


	)

2675 
	#SYS_AUE_o£tho°«me
 
AUE_SYSCTL


	)

2676 
	#SYS_AUE_gëdèbÀsize
 
AUE_GETDTABLESIZE


	)

2677 
	#SYS_AUE_dup2
 
AUE_DUP2


	)

2678 
	#SYS_AUE_f˙é
 
AUE_FCNTL


	)

2679 
	#SYS_AUE_£À˘
 
AUE_SELECT


	)

2680 
	#SYS_AUE_fsync
 
AUE_FSYNC


	)

2681 
	#SYS_AUE_£çri‹ôy
 
AUE_SETPRIORITY


	)

2682 
	#SYS_AUE_sockë
 
AUE_SOCKET


	)

2683 
	#SYS_AUE_c⁄√˘
 
AUE_CONNECT


	)

2684 
	#SYS_AUE_ﬂc˚±
 
AUE_ACCEPT


	)

2685 
	#SYS_AUE_gë¥i‹ôy
 
AUE_GETPRIORITY


	)

2686 
	#SYS_AUE_o£nd
 
AUE_SEND


	)

2687 
	#SYS_AUE_‹ecv
 
AUE_RECV


	)

2688 
	#SYS_AUE_osigªtu∫
 
AUE_SIGRETURN


	)

2689 
	#SYS_AUE_böd
 
AUE_BIND


	)

2690 
	#SYS_AUE_£tsock›t
 
AUE_SETSOCKOPT


	)

2691 
	#SYS_AUE_li°í
 
AUE_LISTEN


	)

2692 
	#SYS_AUE_osigvec
 
AUE_NULL


	)

2693 
	#SYS_AUE_osigblock
 
AUE_NULL


	)

2694 
	#SYS_AUE_osig£tmask
 
AUE_NULL


	)

2695 
	#SYS_AUE_osigsu•íd
 
AUE_NULL


	)

2696 
	#SYS_AUE_osig°ack
 
AUE_NULL


	)

2697 
	#SYS_AUE_‹ecvmsg
 
AUE_RECVMSG


	)

2698 
	#SYS_AUE_o£ndmsg
 
AUE_SENDMSG


	)

2699 
	#SYS_AUE_gëtimeofday
 
AUE_GETTIMEOFDAY


	)

2700 
	#SYS_AUE_gërußge
 
AUE_GETRUSAGE


	)

2701 
	#SYS_AUE_gësock›t
 
AUE_GETSOCKOPT


	)

2702 
	#SYS_AUE_ªadv
 
AUE_READV


	)

2703 
	#SYS_AUE_wrôev
 
AUE_WRITEV


	)

2704 
	#SYS_AUE_£âimeofday
 
AUE_SETTIMEOFDAY


	)

2705 
	#SYS_AUE_fchown
 
AUE_FCHOWN


	)

2706 
	#SYS_AUE_fchmod
 
AUE_FCHMOD


	)

2707 
	#SYS_AUE_‹ecv‰om
 
AUE_RECVFROM


	)

2708 
	#SYS_AUE_£åeuid
 
AUE_SETREUID


	)

2709 
	#SYS_AUE_£åegid
 
AUE_SETREGID


	)

2710 
	#SYS_AUE_ª«me
 
AUE_RENAME


	)

2711 
	#SYS_AUE_Ÿrunˇã
 
AUE_TRUNCATE


	)

2712 
	#SYS_AUE_o·runˇã
 
AUE_FTRUNCATE


	)

2713 
	#SYS_AUE_Êock
 
AUE_FLOCK


	)

2714 
	#SYS_AUE_mkfifo
 
AUE_MKFIFO


	)

2715 
	#SYS_AUE_£ndto
 
AUE_SENDTO


	)

2716 
	#SYS_AUE_shutdown
 
AUE_SHUTDOWN


	)

2717 
	#SYS_AUE_sockë∑ú
 
AUE_SOCKETPAIR


	)

2718 
	#SYS_AUE_mkdú
 
AUE_MKDIR


	)

2719 
	#SYS_AUE_rmdú
 
AUE_RMDIR


	)

2720 
	#SYS_AUE_utimes
 
AUE_UTIMES


	)

2721 
	#SYS_AUE_adjtime
 
AUE_ADJTIME


	)

2722 
	#SYS_AUE_ogë≥î«me
 
AUE_GETPEERNAME


	)

2723 
	#SYS_AUE_ogëho°id
 
AUE_SYSCTL


	)

2724 
	#SYS_AUE_o£tho°id
 
AUE_SYSCTL


	)

2725 
	#SYS_AUE_ogëæimô
 
AUE_GETRLIMIT


	)

2726 
	#SYS_AUE_o£ålimô
 
AUE_SETRLIMIT


	)

2727 
	#SYS_AUE_okûÕg
 
AUE_KILLPG


	)

2728 
	#SYS_AUE_£tsid
 
AUE_SETSID


	)

2729 
	#SYS_AUE_quŸa˘l
 
AUE_QUOTACTL


	)

2730 
	#SYS_AUE_oquŸa
 
AUE_O_QUOTA


	)

2731 
	#SYS_AUE_ogësock«me
 
AUE_GETSOCKNAME


	)

2732 
	#SYS_AUE_∆m_sysˇŒ
 
AUE_NULL


	)

2733 
	#SYS_AUE_nfssvc
 
AUE_NFS_SVC


	)

2734 
	#SYS_AUE_ogëdúíåõs
 
AUE_GETDIRENTRIES


	)

2735 
	#SYS_AUE_‰ìbsd4_°©fs
 
AUE_STATFS


	)

2736 
	#SYS_AUE_‰ìbsd4_f°©fs
 
AUE_FSTATFS


	)

2737 
	#SYS_AUE_lgëfh
 
AUE_LGETFH


	)

2738 
	#SYS_AUE_gëfh
 
AUE_NFS_GETFH


	)

2739 
	#SYS_AUE_‰ìbsd4_gëdomaö«me
 
AUE_SYSCTL


	)

2740 
	#SYS_AUE_‰ìbsd4_£tdomaö«me
 
AUE_SYSCTL


	)

2741 
	#SYS_AUE_‰ìbsd4_u«me
 
AUE_NULL


	)

2742 
	#SYS_AUE_syßrch
 
AUE_SYSARCH


	)

2743 
	#SYS_AUE_π¥io
 
AUE_RTPRIO


	)

2744 
	#SYS_AUE_£msys
 
AUE_SEMSYS


	)

2745 
	#SYS_AUE_msgsys
 
AUE_MSGSYS


	)

2746 
	#SYS_AUE_shmsys
 
AUE_SHMSYS


	)

2747 
	#SYS_AUE_‰ìbsd6_¥ód
 
AUE_PREAD


	)

2748 
	#SYS_AUE_‰ìbsd6_pwrôe
 
AUE_PWRITE


	)

2749 
	#SYS_AUE_£tfib
 
AUE_SETFIB


	)

2750 
	#SYS_AUE_¡p_adjtime
 
AUE_NTP_ADJTIME


	)

2751 
	#SYS_AUE_£tgid
 
AUE_SETGID


	)

2752 
	#SYS_AUE_£ãgid
 
AUE_SETEGID


	)

2753 
	#SYS_AUE_£ãuid
 
AUE_SETEUID


	)

2754 
	#SYS_AUE_‰ìbsd11_°©
 
AUE_STAT


	)

2755 
	#SYS_AUE_‰ìbsd11_f°©
 
AUE_FSTAT


	)

2756 
	#SYS_AUE_‰ìbsd11_l°©
 
AUE_LSTAT


	)

2757 
	#SYS_AUE_∑thc⁄f
 
AUE_PATHCONF


	)

2758 
	#SYS_AUE_Â©hc⁄f
 
AUE_FPATHCONF


	)

2759 
	#SYS_AUE_gëæimô
 
AUE_GETRLIMIT


	)

2760 
	#SYS_AUE_£ålimô
 
AUE_SETRLIMIT


	)

2761 
	#SYS_AUE_‰ìbsd11_gëdúíåõs
 
AUE_GETDIRENTRIES


	)

2762 
	#SYS_AUE_‰ìbsd6_mm≠
 
AUE_MMAP


	)

2763 
	#SYS_AUE_‰ìbsd6_l£ek
 
AUE_LSEEK


	)

2764 
	#SYS_AUE_‰ìbsd6_åunˇã
 
AUE_TRUNCATE


	)

2765 
	#SYS_AUE_‰ìbsd6_·runˇã
 
AUE_FTRUNCATE


	)

2766 
	#SYS_AUE___sys˘l
 
AUE_SYSCTL


	)

2767 
	#SYS_AUE_mlock
 
AUE_MLOCK


	)

2768 
	#SYS_AUE_mu∆ock
 
AUE_MUNLOCK


	)

2769 
	#SYS_AUE_undñëe
 
AUE_UNDELETE


	)

2770 
	#SYS_AUE_futimes
 
AUE_FUTIMES


	)

2771 
	#SYS_AUE_gëpgid
 
AUE_GETPGID


	)

2772 
	#SYS_AUE_pﬁl
 
AUE_POLL


	)

2773 
	#SYS_AUE_‰ìbsd7___£m˘l
 
AUE_SEMCTL


	)

2774 
	#SYS_AUE_£mgë
 
AUE_SEMGET


	)

2775 
	#SYS_AUE_£m›
 
AUE_SEMOP


	)

2776 
	#SYS_AUE_‰ìbsd7_msg˘l
 
AUE_MSGCTL


	)

2777 
	#SYS_AUE_msggë
 
AUE_MSGGET


	)

2778 
	#SYS_AUE_msg¢d
 
AUE_MSGSND


	)

2779 
	#SYS_AUE_msgrcv
 
AUE_MSGRCV


	)

2780 
	#SYS_AUE_shm©
 
AUE_SHMAT


	)

2781 
	#SYS_AUE_‰ìbsd7_shm˘l
 
AUE_SHMCTL


	)

2782 
	#SYS_AUE_shmdt
 
AUE_SHMDT


	)

2783 
	#SYS_AUE_shmgë
 
AUE_SHMGET


	)

2784 
	#SYS_AUE_˛ock_gëtime
 
AUE_NULL


	)

2785 
	#SYS_AUE_˛ock_£âime
 
AUE_CLOCK_SETTIME


	)

2786 
	#SYS_AUE_˛ock_gëªs
 
AUE_NULL


	)

2787 
	#SYS_AUE_ktimî_¸óã
 
AUE_NULL


	)

2788 
	#SYS_AUE_ktimî_dñëe
 
AUE_NULL


	)

2789 
	#SYS_AUE_ktimî_£âime
 
AUE_NULL


	)

2790 
	#SYS_AUE_ktimî_gëtime
 
AUE_NULL


	)

2791 
	#SYS_AUE_ktimî_gëovîrun
 
AUE_NULL


	)

2792 
	#SYS_AUE_«no¶ìp
 
AUE_NULL


	)

2793 
	#SYS_AUE_ff˛ock_gëcou¡î
 
AUE_NULL


	)

2794 
	#SYS_AUE_ff˛ock_£ã°im©e
 
AUE_NULL


	)

2795 
	#SYS_AUE_ff˛ock_gëe°im©e
 
AUE_NULL


	)

2796 
	#SYS_AUE_˛ock_«no¶ìp
 
AUE_NULL


	)

2797 
	#SYS_AUE_˛ock_gë˝u˛ockid2
 
AUE_NULL


	)

2798 
	#SYS_AUE_¡p_gëtime
 
AUE_NULL


	)

2799 
	#SYS_AUE_möhîô
 
AUE_MINHERIT


	)

2800 
	#SYS_AUE_rf‹k
 
AUE_RFORK


	)

2801 
	#SYS_AUE_is£tugid
 
AUE_ISSETUGID


	)

2802 
	#SYS_AUE_lchown
 
AUE_LCHOWN


	)

2803 
	#SYS_AUE_aio_ªad
 
AUE_AIO_READ


	)

2804 
	#SYS_AUE_aio_wrôe
 
AUE_AIO_WRITE


	)

2805 
	#SYS_AUE_lio_li°io
 
AUE_LIO_LISTIO


	)

2806 
	#SYS_AUE_‰ìbsd11_gëdíts
 
AUE_O_GETDENTS


	)

2807 
	#SYS_AUE_lchmod
 
AUE_LCHMOD


	)

2808 
	#SYS_AUE_lutimes
 
AUE_LUTIMES


	)

2809 
	#SYS_AUE_‰ìbsd11_n°©
 
AUE_STAT


	)

2810 
	#SYS_AUE_‰ìbsd11_nf°©
 
AUE_FSTAT


	)

2811 
	#SYS_AUE_‰ìbsd11_∆°©
 
AUE_LSTAT


	)

2812 
	#SYS_AUE_¥ódv
 
AUE_PREADV


	)

2813 
	#SYS_AUE_pwrôev
 
AUE_PWRITEV


	)

2814 
	#SYS_AUE_‰ìbsd4_fh°©fs
 
AUE_FHSTATFS


	)

2815 
	#SYS_AUE_fh›í
 
AUE_FHOPEN


	)

2816 
	#SYS_AUE_‰ìbsd11_fh°©
 
AUE_FHSTAT


	)

2817 
	#SYS_AUE_mod√xt
 
AUE_NULL


	)

2818 
	#SYS_AUE_mod°©
 
AUE_NULL


	)

2819 
	#SYS_AUE_mod‚ext
 
AUE_NULL


	)

2820 
	#SYS_AUE_modföd
 
AUE_NULL


	)

2821 
	#SYS_AUE_kldlﬂd
 
AUE_MODLOAD


	)

2822 
	#SYS_AUE_kldu∆ﬂd
 
AUE_MODUNLOAD


	)

2823 
	#SYS_AUE_kldföd
 
AUE_NULL


	)

2824 
	#SYS_AUE_kld√xt
 
AUE_NULL


	)

2825 
	#SYS_AUE_kld°©
 
AUE_NULL


	)

2826 
	#SYS_AUE_kldfú°mod
 
AUE_NULL


	)

2827 
	#SYS_AUE_gësid
 
AUE_GETSID


	)

2828 
	#SYS_AUE_£åesuid
 
AUE_SETRESUID


	)

2829 
	#SYS_AUE_£åesgid
 
AUE_SETRESGID


	)

2830 
	#SYS_AUE_aio_ªtu∫
 
AUE_AIO_RETURN


	)

2831 
	#SYS_AUE_aio_su•íd
 
AUE_AIO_SUSPEND


	)

2832 
	#SYS_AUE_aio_ˇn˚l
 
AUE_AIO_CANCEL


	)

2833 
	#SYS_AUE_aio_îr‹
 
AUE_AIO_ERROR


	)

2834 
	#SYS_AUE_‰ìbsd6_aio_ªad
 
AUE_AIO_READ


	)

2835 
	#SYS_AUE_‰ìbsd6_aio_wrôe
 
AUE_AIO_WRITE


	)

2836 
	#SYS_AUE_‰ìbsd6_lio_li°io
 
AUE_LIO_LISTIO


	)

2837 
	#SYS_AUE_yõld
 
AUE_NULL


	)

2838 
	#SYS_AUE_mlockÆl
 
AUE_MLOCKALL


	)

2839 
	#SYS_AUE_mu∆ockÆl
 
AUE_MUNLOCKALL


	)

2840 
	#SYS_AUE___gëcwd
 
AUE_GETCWD


	)

2841 
	#SYS_AUE_sched_£ç¨am
 
AUE_NULL


	)

2842 
	#SYS_AUE_sched_gë∑øm
 
AUE_NULL


	)

2843 
	#SYS_AUE_sched_£tscheduÀr
 
AUE_NULL


	)

2844 
	#SYS_AUE_sched_gëscheduÀr
 
AUE_NULL


	)

2845 
	#SYS_AUE_sched_yõld
 
AUE_NULL


	)

2846 
	#SYS_AUE_sched_gë_¥i‹ôy_max
 
AUE_NULL


	)

2847 
	#SYS_AUE_sched_gë_¥i‹ôy_mö
 
AUE_NULL


	)

2848 
	#SYS_AUE_sched_º_gë_öãrvÆ
 
AUE_NULL


	)

2849 
	#SYS_AUE_uåa˚
 
AUE_NULL


	)

2850 
	#SYS_AUE_‰ìbsd4_£ndfûe
 
AUE_SENDFILE


	)

2851 
	#SYS_AUE_kldsym
 
AUE_NULL


	)

2852 
	#SYS_AUE_jaû
 
AUE_JAIL


	)

2853 
	#SYS_AUE_¬pfs_sysˇŒ
 
AUE_NULL


	)

2854 
	#SYS_AUE_sig¥ocmask
 
AUE_SIGPROCMASK


	)

2855 
	#SYS_AUE_sigsu•íd
 
AUE_SIGSUSPEND


	)

2856 
	#SYS_AUE_‰ìbsd4_siga˘i⁄
 
AUE_SIGACTION


	)

2857 
	#SYS_AUE_sig≥ndög
 
AUE_SIGPENDING


	)

2858 
	#SYS_AUE_‰ìbsd4_sigªtu∫
 
AUE_SIGRETURN


	)

2859 
	#SYS_AUE_sigtimedwaô
 
AUE_SIGWAIT


	)

2860 
	#SYS_AUE_sigwaôöfo
 
AUE_NULL


	)

2861 
	#SYS_AUE___a˛_gë_fûe
 
AUE_ACL_GET_FILE


	)

2862 
	#SYS_AUE___a˛_£t_fûe
 
AUE_ACL_SET_FILE


	)

2863 
	#SYS_AUE___a˛_gë_fd
 
AUE_ACL_GET_FD


	)

2864 
	#SYS_AUE___a˛_£t_fd
 
AUE_ACL_SET_FD


	)

2865 
	#SYS_AUE___a˛_dñëe_fûe
 
AUE_ACL_DELETE_FILE


	)

2866 
	#SYS_AUE___a˛_dñëe_fd
 
AUE_ACL_DELETE_FD


	)

2867 
	#SYS_AUE___a˛_a˛check_fûe
 
AUE_ACL_CHECK_FILE


	)

2868 
	#SYS_AUE___a˛_a˛check_fd
 
AUE_ACL_CHECK_FD


	)

2869 
	#SYS_AUE_exèâr˘l
 
AUE_EXTATTRCTL


	)

2870 
	#SYS_AUE_exèâr_£t_fûe
 
AUE_EXTATTR_SET_FILE


	)

2871 
	#SYS_AUE_exèâr_gë_fûe
 
AUE_EXTATTR_GET_FILE


	)

2872 
	#SYS_AUE_exèâr_dñëe_fûe
 
AUE_EXTATTR_DELETE_FILE


	)

2873 
	#SYS_AUE_aio_waôcom∂ëe
 
AUE_AIO_WAITCOMPLETE


	)

2874 
	#SYS_AUE_gëªsuid
 
AUE_GETRESUID


	)

2875 
	#SYS_AUE_gëªsgid
 
AUE_GETRESGID


	)

2876 
	#SYS_AUE_kqueue
 
AUE_KQUEUE


	)

2877 
	#SYS_AUE_‰ìbsd11_kevít
 
AUE_KEVENT


	)

2878 
	#SYS_AUE_exèâr_£t_fd
 
AUE_EXTATTR_SET_FD


	)

2879 
	#SYS_AUE_exèâr_gë_fd
 
AUE_EXTATTR_GET_FD


	)

2880 
	#SYS_AUE_exèâr_dñëe_fd
 
AUE_EXTATTR_DELETE_FD


	)

2881 
	#SYS_AUE___£tugid
 
AUE_SETUGID


	)

2882 
	#SYS_AUE_óc˚ss
 
AUE_EACCESS


	)

2883 
	#SYS_AUE_afs3_sysˇŒ
 
AUE_NULL


	)

2884 
	#SYS_AUE_nmou¡
 
AUE_NMOUNT


	)

2885 
	#SYS_AUE___mac_gë_¥oc
 
AUE_NULL


	)

2886 
	#SYS_AUE___mac_£t_¥oc
 
AUE_NULL


	)

2887 
	#SYS_AUE___mac_gë_fd
 
AUE_NULL


	)

2888 
	#SYS_AUE___mac_gë_fûe
 
AUE_NULL


	)

2889 
	#SYS_AUE___mac_£t_fd
 
AUE_NULL


	)

2890 
	#SYS_AUE___mac_£t_fûe
 
AUE_NULL


	)

2891 
	#SYS_AUE_kív
 
AUE_NULL


	)

2892 
	#SYS_AUE_lchÊags
 
AUE_LCHFLAGS


	)

2893 
	#SYS_AUE_uuidgí
 
AUE_NULL


	)

2894 
	#SYS_AUE_£ndfûe
 
AUE_SENDFILE


	)

2895 
	#SYS_AUE_mac_sysˇŒ
 
AUE_NULL


	)

2896 
	#SYS_AUE_‰ìbsd11_gëfs°©
 
AUE_GETFSSTAT


	)

2897 
	#SYS_AUE_‰ìbsd11_°©fs
 
AUE_STATFS


	)

2898 
	#SYS_AUE_‰ìbsd11_f°©fs
 
AUE_FSTATFS


	)

2899 
	#SYS_AUE_‰ìbsd11_fh°©fs
 
AUE_FHSTATFS


	)

2900 
	#SYS_AUE_k£m_˛o£
 
AUE_SEMCLOSE


	)

2901 
	#SYS_AUE_k£m_po°
 
AUE_SEMPOST


	)

2902 
	#SYS_AUE_k£m_waô
 
AUE_SEMWAIT


	)

2903 
	#SYS_AUE_k£m_åywaô
 
AUE_SEMTRYWAIT


	)

2904 
	#SYS_AUE_k£m_öô
 
AUE_SEMINIT


	)

2905 
	#SYS_AUE_k£m_›í
 
AUE_SEMOPEN


	)

2906 
	#SYS_AUE_k£m_u∆ök
 
AUE_SEMUNLINK


	)

2907 
	#SYS_AUE_k£m_gëvÆue
 
AUE_SEMGETVALUE


	)

2908 
	#SYS_AUE_k£m_de°roy
 
AUE_SEMDESTROY


	)

2909 
	#SYS_AUE___mac_gë_pid
 
AUE_NULL


	)

2910 
	#SYS_AUE___mac_gë_lök
 
AUE_NULL


	)

2911 
	#SYS_AUE___mac_£t_lök
 
AUE_NULL


	)

2912 
	#SYS_AUE_exèâr_£t_lök
 
AUE_EXTATTR_SET_LINK


	)

2913 
	#SYS_AUE_exèâr_gë_lök
 
AUE_EXTATTR_GET_LINK


	)

2914 
	#SYS_AUE_exèâr_dñëe_lök
 
AUE_EXTATTR_DELETE_LINK


	)

2915 
	#SYS_AUE___mac_execve
 
AUE_NULL


	)

2916 
	#SYS_AUE_siga˘i⁄
 
AUE_SIGACTION


	)

2917 
	#SYS_AUE_sigªtu∫
 
AUE_SIGRETURN


	)

2918 
	#SYS_AUE_gëc⁄ãxt
 
AUE_NULL


	)

2919 
	#SYS_AUE_£tc⁄ãxt
 
AUE_NULL


	)

2920 
	#SYS_AUE_sw≠c⁄ãxt
 
AUE_NULL


	)

2921 
	#SYS_AUE_sw≠off
 
AUE_SWAPOFF


	)

2922 
	#SYS_AUE___a˛_gë_lök
 
AUE_ACL_GET_LINK


	)

2923 
	#SYS_AUE___a˛_£t_lök
 
AUE_ACL_SET_LINK


	)

2924 
	#SYS_AUE___a˛_dñëe_lök
 
AUE_ACL_DELETE_LINK


	)

2925 
	#SYS_AUE___a˛_a˛check_lök
 
AUE_ACL_CHECK_LINK


	)

2926 
	#SYS_AUE_sigwaô
 
AUE_SIGWAIT


	)

2927 
	#SYS_AUE_thr_¸óã
 
AUE_THR_CREATE


	)

2928 
	#SYS_AUE_thr_exô
 
AUE_THR_EXIT


	)

2929 
	#SYS_AUE_thr_£lf
 
AUE_NULL


	)

2930 
	#SYS_AUE_thr_kûl
 
AUE_THR_KILL


	)

2931 
	#SYS_AUE_jaû_©èch
 
AUE_JAIL_ATTACH


	)

2932 
	#SYS_AUE_exèâr_li°_fd
 
AUE_EXTATTR_LIST_FD


	)

2933 
	#SYS_AUE_exèâr_li°_fûe
 
AUE_EXTATTR_LIST_FILE


	)

2934 
	#SYS_AUE_exèâr_li°_lök
 
AUE_EXTATTR_LIST_LINK


	)

2935 
	#SYS_AUE_k£m_timedwaô
 
AUE_SEMWAIT


	)

2936 
	#SYS_AUE_thr_su•íd
 
AUE_NULL


	)

2937 
	#SYS_AUE_thr_wake
 
AUE_NULL


	)

2938 
	#SYS_AUE_kldu∆ﬂdf
 
AUE_MODUNLOAD


	)

2939 
	#SYS_AUE_audô
 
AUE_AUDIT


	)

2940 
	#SYS_AUE_audô⁄
 
AUE_AUDITON


	)

2941 
	#SYS_AUE_gëauid
 
AUE_GETAUID


	)

2942 
	#SYS_AUE_£èuid
 
AUE_SETAUID


	)

2943 
	#SYS_AUE_gëaudô
 
AUE_GETAUDIT


	)

2944 
	#SYS_AUE_£èudô
 
AUE_SETAUDIT


	)

2945 
	#SYS_AUE_gëaudô_addr
 
AUE_GETAUDIT_ADDR


	)

2946 
	#SYS_AUE_£èudô_addr
 
AUE_SETAUDIT_ADDR


	)

2947 
	#SYS_AUE_audô˘l
 
AUE_AUDITCTL


	)

2948 
	#SYS_AUE__umtx_›
 
AUE_NULL


	)

2949 
	#SYS_AUE_thr_√w
 
AUE_THR_NEW


	)

2950 
	#SYS_AUE_sigqueue
 
AUE_NULL


	)

2951 
	#SYS_AUE_kmq_›í
 
AUE_MQ_OPEN


	)

2952 
	#SYS_AUE_kmq_£èâr
 
AUE_MQ_SETATTR


	)

2953 
	#SYS_AUE_kmq_timedª˚ive
 
AUE_MQ_TIMEDRECEIVE


	)

2954 
	#SYS_AUE_kmq_timed£nd
 
AUE_MQ_TIMEDSEND


	)

2955 
	#SYS_AUE_kmq_nŸify
 
AUE_MQ_NOTIFY


	)

2956 
	#SYS_AUE_kmq_u∆ök
 
AUE_MQ_UNLINK


	)

2957 
	#SYS_AUE_ab‹t2
 
AUE_NULL


	)

2958 
	#SYS_AUE_thr_£t_«me
 
AUE_NULL


	)

2959 
	#SYS_AUE_aio_fsync
 
AUE_AIO_FSYNC


	)

2960 
	#SYS_AUE_π¥io_thªad
 
AUE_RTPRIO


	)

2961 
	#SYS_AUE_s˘p_≥ñoff
 
AUE_SCTP_PEELOFF


	)

2962 
	#SYS_AUE_s˘p_gíîic_£ndmsg
 
AUE_SCTP_GENERIC_SENDMSG


	)

2963 
	#SYS_AUE_s˘p_gíîic_£ndmsg_iov
 
AUE_SCTP_GENERIC_SENDMSG_IOV


	)

2964 
	#SYS_AUE_s˘p_gíîic_ªcvmsg
 
AUE_SCTP_GENERIC_RECVMSG


	)

2965 
	#SYS_AUE_¥ód
 
AUE_PREAD


	)

2966 
	#SYS_AUE_pwrôe
 
AUE_PWRITE


	)

2967 
	#SYS_AUE_mm≠
 
AUE_MMAP


	)

2968 
	#SYS_AUE_l£ek
 
AUE_LSEEK


	)

2969 
	#SYS_AUE_åunˇã
 
AUE_TRUNCATE


	)

2970 
	#SYS_AUE_·runˇã
 
AUE_FTRUNCATE


	)

2971 
	#SYS_AUE_thr_kûl2
 
AUE_THR_KILL2


	)

2972 
	#SYS_AUE_shm_›í
 
AUE_SHMOPEN


	)

2973 
	#SYS_AUE_shm_u∆ök
 
AUE_SHMUNLINK


	)

2974 
	#SYS_AUE_˝u£t
 
AUE_NULL


	)

2975 
	#SYS_AUE_˝u£t_£tid
 
AUE_NULL


	)

2976 
	#SYS_AUE_˝u£t_gëid
 
AUE_NULL


	)

2977 
	#SYS_AUE_˝u£t_gëafföôy
 
AUE_NULL


	)

2978 
	#SYS_AUE_˝u£t_£èfföôy
 
AUE_NULL


	)

2979 
	#SYS_AUE_Ác˚sßt
 
AUE_FACCESSAT


	)

2980 
	#SYS_AUE_fchmod©
 
AUE_FCHMODAT


	)

2981 
	#SYS_AUE_fchow«t
 
AUE_FCHOWNAT


	)

2982 
	#SYS_AUE_„xecve
 
AUE_FEXECVE


	)

2983 
	#SYS_AUE_‰ìbsd11_f°©©
 
AUE_FSTATAT


	)

2984 
	#SYS_AUE_futimeßt
 
AUE_FUTIMESAT


	)

2985 
	#SYS_AUE_lök©
 
AUE_LINKAT


	)

2986 
	#SYS_AUE_mkdú©
 
AUE_MKDIRAT


	)

2987 
	#SYS_AUE_mkfifﬂt
 
AUE_MKFIFOAT


	)

2988 
	#SYS_AUE_‰ìbsd11_mknod©
 
AUE_MKNODAT


	)

2989 
	#SYS_AUE_›í©
 
AUE_OPENAT_RWTC


	)

2990 
	#SYS_AUE_ªadlök©
 
AUE_READLINKAT


	)

2991 
	#SYS_AUE_ª«mót
 
AUE_RENAMEAT


	)

2992 
	#SYS_AUE_symlök©
 
AUE_SYMLINKAT


	)

2993 
	#SYS_AUE_u∆ök©
 
AUE_UNLINKAT


	)

2994 
	#SYS_AUE_posix_›í±
 
AUE_POSIX_OPENPT


	)

2995 
	#SYS_AUE_gssd_sysˇŒ
 
AUE_NULL


	)

2996 
	#SYS_AUE_jaû_gë
 
AUE_JAIL_GET


	)

2997 
	#SYS_AUE_jaû_£t
 
AUE_JAIL_SET


	)

2998 
	#SYS_AUE_jaû_ªmove
 
AUE_JAIL_REMOVE


	)

2999 
	#SYS_AUE_˛o£‰om
 
AUE_CLOSEFROM


	)

3000 
	#SYS_AUE___£m˘l
 
AUE_SEMCTL


	)

3001 
	#SYS_AUE_msg˘l
 
AUE_MSGCTL


	)

3002 
	#SYS_AUE_shm˘l
 
AUE_SHMCTL


	)

3003 
	#SYS_AUE_Õ©hc⁄f
 
AUE_LPATHCONF


	)

3004 
	#SYS_AUE___ˇp_rights_gë
 
AUE_CAP_RIGHTS_GET


	)

3005 
	#SYS_AUE_ˇp_íãr
 
AUE_CAP_ENTER


	)

3006 
	#SYS_AUE_ˇp_gëmode
 
AUE_CAP_GETMODE


	)

3007 
	#SYS_AUE_pdf‹k
 
AUE_PDFORK


	)

3008 
	#SYS_AUE_pdkûl
 
AUE_PDKILL


	)

3009 
	#SYS_AUE_pdgëpid
 
AUE_PDGETPID


	)

3010 
	#SYS_AUE_p£À˘
 
AUE_SELECT


	)

3011 
	#SYS_AUE_gëlogö˛ass
 
AUE_GETLOGINCLASS


	)

3012 
	#SYS_AUE_£éogö˛ass
 
AUE_SETLOGINCLASS


	)

3013 
	#SYS_AUE_r˘l_gë_øc˘
 
AUE_NULL


	)

3014 
	#SYS_AUE_r˘l_gë_ruÀs
 
AUE_NULL


	)

3015 
	#SYS_AUE_r˘l_gë_limôs
 
AUE_NULL


	)

3016 
	#SYS_AUE_r˘l_add_ruÀ
 
AUE_NULL


	)

3017 
	#SYS_AUE_r˘l_ªmove_ruÀ
 
AUE_NULL


	)

3018 
	#SYS_AUE_posix_ÁŒoˇã
 
AUE_POSIX_FALLOCATE


	)

3019 
	#SYS_AUE_posix_Ádvi£
 
AUE_POSIX_FADVISE


	)

3020 
	#SYS_AUE_waô6
 
AUE_WAIT6


	)

3021 
	#SYS_AUE_ˇp_rights_limô
 
AUE_CAP_RIGHTS_LIMIT


	)

3022 
	#SYS_AUE_ˇp_io˘ls_limô
 
AUE_CAP_IOCTLS_LIMIT


	)

3023 
	#SYS_AUE_ˇp_io˘ls_gë
 
AUE_CAP_IOCTLS_GET


	)

3024 
	#SYS_AUE_ˇp_f˙és_limô
 
AUE_CAP_FCNTLS_LIMIT


	)

3025 
	#SYS_AUE_ˇp_f˙és_gë
 
AUE_CAP_FCNTLS_GET


	)

3026 
	#SYS_AUE_böd©
 
AUE_BINDAT


	)

3027 
	#SYS_AUE_c⁄√˘©
 
AUE_CONNECTAT


	)

3028 
	#SYS_AUE_chÊagßt
 
AUE_CHFLAGSAT


	)

3029 
	#SYS_AUE_ac˚±4
 
AUE_ACCEPT


	)

3030 
	#SYS_AUE_pùe2
 
AUE_PIPE


	)

3031 
	#SYS_AUE_aio_mlock
 
AUE_AIO_MLOCK


	)

3032 
	#SYS_AUE_¥oc˘l
 
AUE_PROCCTL


	)

3033 
	#SYS_AUE_µﬁl
 
AUE_POLL


	)

3034 
	#SYS_AUE_futimís
 
AUE_FUTIMES


	)

3035 
	#SYS_AUE_utimíßt
 
AUE_FUTIMESAT


	)

3036 
	#SYS_AUE_fd©async
 
AUE_FSYNC


	)

3037 
	#SYS_AUE_f°©
 
AUE_FSTAT


	)

3038 
	#SYS_AUE_f°©©
 
AUE_FSTATAT


	)

3039 
	#SYS_AUE_fh°©
 
AUE_FHSTAT


	)

3040 
	#SYS_AUE_gëdúíåõs
 
AUE_GETDIRENTRIES


	)

3041 
	#SYS_AUE_°©fs
 
AUE_STATFS


	)

3042 
	#SYS_AUE_f°©fs
 
AUE_FSTATFS


	)

3043 
	#SYS_AUE_gëfs°©
 
AUE_GETFSSTAT


	)

3044 
	#SYS_AUE_fh°©fs
 
AUE_FHSTATFS


	)

3045 
	#SYS_AUE_mknod©
 
AUE_MKNODAT


	)

3046 
	#SYS_AUE_kevít
 
AUE_KEVENT


	)

3047 
	#SYS_AUE_˝u£t_gëdomaö
 
AUE_NULL


	)

3048 
	#SYS_AUE_˝u£t_£tdomaö
 
AUE_NULL


	)

3049 
	#SYS_AUE_gëøndom
 
AUE_NULL


	)

3051 #unde‡
PAD_


3052 #unde‡
PADL_


3053 #unde‡
PADR_


	@/usr/include/sys/systm.h

40 #i‚de‡
_SYS_SYSTM_H_


41 
	#_SYS_SYSTM_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<machöe/©omic.h
>

45 
	~<machöe/˝ufunc.h
>

46 
	~<sys/ˇŒout.h
>

47 
	~<sys/queue.h
>

48 
	~<sys/°döt.h
>

50 
__NULLABILITY_PRAGMA_PUSH


52 
cﬁd
;

53 
su•íd_blocked
;

54 
ªboŸög
;

55 c⁄° *
∑nic°r
;

56 
vîsi⁄
[];

57 
compûî_vîsi⁄
[];

58 
c›yright
[];

59 
k°ack_∑ges
;

61 
u_l⁄g
 
∑gesizes
[];

62 
physmem
;

63 
ªÆmem
;

65 *
roŸdev«mes
[2];

67 
boŸhowto
;

68 
boŸvîbo£
;

70 
maxu£rs
;

71 
ngroups_max
;

72 
vm_gue°
;

80 
	eVM_GUEST
 { 
	mVM_GUEST_NO
 = 0, 
	mVM_GUEST_VM
, 
	mVM_GUEST_XEN
, 
	mVM_GUEST_HV
,

81 
	mVM_GUEST_VMWARE
, 
	mVM_GUEST_KVM
, 
	mVM_GUEST_BHYVE
, 
	mVM_LAST
 };

89 
	$∑nic
(c⁄° *, ...Ë
__dód2
 
	`__¥ötÊike
(1, 2);

90 
	$v∑nic
(c⁄° *, 
__va_li°
Ë
__dód2
 
	`__¥ötÊike
(1, 0);

92 #i‡
	`deföed
(
WITNESS
Ë|| deföed(
INVARIANT_SUPPORT
)

93 #ifde‡
KASSERT_PANIC_OPTIONAL


94 
	$kas£π_∑nic
(c⁄° *
fmt
, ...Ë
	`__¥ötÊike
(1, 2);

96 
	#kas£π_∑nic
 
∑nic


	)

100 #ifdef 
INVARIANTS


101 
	#KASSERT
(
exp
,
msg
) do { \

102 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) \

103 
kas£π_∑nic
 
msg
; \

104 
	}
} 0)

	)

105 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

106 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) { \

107 
	`vn_¥ötf
(
vp
, "VNASSERT failed\n"); \

108 
kas£π_∑nic
 
msg
; \

110 } 0)

	)

112 
	#KASSERT
(
exp
,
msg
) do { \

113 } 0)

	)

115 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

116 } 0)

	)

119 #i‚de‡
CTASSERT


120 
	#CTASSERT
(
x
Ë
	`_Sètic_as£π
(x, "compûe-timêas£πi⁄ faûed")

	)

123 #i‡
deföed
(
_KERNEL
)

124 
	~<sys/∑øm.h
>

125 
	~<sys/p˝u.h
>

126 
	~<sys/kpûôe.h
>

136 
	#ASSERT_ATOMIC_LOAD_PTR
(
v¨
, 
msg
) \

137 
	`KASSERT
((
v¨
) == (*) && \

138 ((
uöçå_t
)&(
v¨
Ë& ((*Ë- 1)Ë=0, 
msg
)

	)

143 
	#CRITICAL_ASSERT
(
td
) \

144 
	`KASSERT
((
td
)->
td_¸ô√°
 >1, ("NŸ i¿¸ôiˇ»£˘i⁄"));

	)

152 
	#SCHEDULER_STOPPED_TD
(
td
) ({ \

153 
	`MPASS
((
td
Ë=
cuπhªad
); \

154 
	`__¥edi˘_Ál£
((
td
)->
td_°›sched
); \

155 })

	)

156 
	#SCHEDULER_STOPPED
(Ë
	`SCHEDULER_STOPPED_TD
(
cuπhªad
)

	)

161 
	#__ªad_mo°ly
 
	`__£˘i⁄
(".d©a.ªad_mo°ly")

	)

162 
	#__ªad_‰equíéy
 
	`__£˘i⁄
(".d©a.ªad_‰equíéy")

	)

163 
	#__ex˛usive_ˇche_löe
 
	`__Æig√d
(
CACHE_LINE_SIZE
) \

164 
	`__£˘i⁄
(".d©a.ex˛usive_ˇche_löe")

	)

171 
o§ñd©e
;

172 
boﬁ
 
dy«mic_kív
;

173 
mtx
 
kív_lock
;

174 *
kîn_ívp
;

175 *
md_ívp
;

176 
°©ic_ív
[];

177 
°©ic_höts
[];

179 **
kívp
;

181 c⁄° *
zîo_ªgi⁄
;

183 
unm≠≥d_buf_Ælowed
;

185 #ifde‡
__LP64__


186 
	#IOSIZE_MAX
 
	`iosize_max
()

	)

187 
	#DEVFS_IOSIZE_MAX
 
	`devfs_iosize_max
()

	)

189 
	#IOSIZE_MAX
 
SSIZE_MAX


	)

190 
	#DEVFS_IOSIZE_MAX
 
SSIZE_MAX


	)

197 
	göpcb
;

198 
	glock_obje˘
;

199 
	gmÆloc_ty≥
;

200 
	gmtx
;

201 
	g¥oc
;

202 
	gsockë
;

203 
	gthªad
;

204 
	gây
;

205 
	gu¸ed
;

206 
	guio
;

207 
	g_jmp_buf
;

208 
	gå≠‰ame
;

209 
	gevíâimî
;

211 
	$£tjmp
(
_jmp_buf
 *Ë
__ªtu∫s_twi˚
;

212 
	$l⁄gjmp
(
_jmp_buf
 *, Ë
__dód2
;

213 
	`dump°©us
(
vm_off£t_t
 
addr
, 
off_t
 
cou¡
);

214 
	`nuŒ›
();

215 
	`e›nŸsuµ
();

216 
	`uªadc
(, 
uio
 *);

217 
	`hashde°roy
(*, 
mÆloc_ty≥
 *, 
u_l⁄g
);

218 *
	`hashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
hashmask
);

219 *
	`hashöô_Êags
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
,

220 
u_l⁄g
 *
hashmask
, 
Êags
);

221 
	#HASH_NOWAIT
 0x00000001

	)

222 
	#HASH_WAITOK
 0x00000002

	)

224 *
	`phashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
√¡rõs
);

225 *
	`phashöô_Êags
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
√¡rõs
,

226 
Êags
);

227 
	`g_waôidÀ
();

229 
	`˝u_boŸ
();

230 
	`˝u_Êush_dˇche
(*, 
size_t
);

231 
	`˝u_roŸc⁄f
();

232 
	`¸ôiˇl_íãr_KBI
();

233 
	`¸ôiˇl_exô_KBI
();

234 
	`¸ôiˇl_exô_¥ìm±
();

235 
	`öô_∑øm1
();

236 
	`öô_∑øm2
(
phy•ages
);

237 
	`öô_°©ic_kív
(*, 
size_t
);

238 
	`èbÀfuŒ
(const *);

240 #i‡
	`deföed
(
KLD_MODULE
Ë|| deföed(
KTR_CRITICAL
Ë|| !deföed(
_KERNEL
Ë|| deföed(
GENOFFSET
)

241 
	#¸ôiˇl_íãr
(Ë
	`¸ôiˇl_íãr_KBI
()

	)

242 
	#¸ôiˇl_exô
(Ë
	`¸ôiˇl_exô_KBI
()

	)

244 
__ölöe
 

245 
	$¸ôiˇl_íãr
()

247 
thªad_lôe
 *
td
;

249 
td
 = (
thªad_lôe
 *)
cuπhªad
;

250 
td
->
td_¸ô√°
++;

251 
	`__compûî_memb¨
();

252 
	}
}

254 
__ölöe
 

255 
	$¸ôiˇl_exô
()

257 
thªad_lôe
 *
td
;

259 
td
 = (
thªad_lôe
 *)
cuπhªad
;

260 
	`KASSERT
(
td
->
td_¸ô√°
 != 0,

262 
	`__compûî_memb¨
();

263 
td
->
td_¸ô√°
--;

264 
	`__compûî_memb¨
();

265 i‡(
	`__¥edi˘_Ál£
(
td
->
td_owïªem±
))

266 
	`¸ôiˇl_exô_¥ìm±
();

268 
	}
}

272 #ifde‡ 
EARLY_PRINTF


273 
	tóæy_putc_t
(
	tch
);

274 
óæy_putc_t
 *
óæy_putc
;

276 
kv¥ötf
(const *, (*)(, *), *, ,

277 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

278 
	$log
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

279 
	`log_c⁄sﬁe
(
uio
 *);

280 
	$vlog
(, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

281 
	$a•rötf
(**
ªt
, 
mÆloc_ty≥
 *
mç
, c⁄° *
f‹m©
,

282 ...Ë
	`__¥ötÊike
(3, 4);

283 
	$¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

284 
	$¢¥ötf
(*, 
size_t
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

285 
	$•rötf
(*
buf
, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

286 
	$u¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

287 
	$v¥ötf
(c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

288 
	$va•rötf
(**
ªt
, 
mÆloc_ty≥
 *
mç
, c⁄° *
f‹m©
,

289 
__va_li°
 
≠
Ë
	`__¥ötÊike
(3, 0);

290 
	$v¢¥ötf
(*, 
size_t
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

291 
	$v¢Ωrötf
(*, 
size_t
, , c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(4, 0);

292 
	$v•rötf
(*
buf
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

293 
	$ây¥ötf
(
ây
 *, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

294 
	$ssˇnf
(c⁄° *, c⁄° * 
_N⁄nuŒ
, ...Ë
	`__sˇnÊike
(2, 3);

295 
	$vssˇnf
(c⁄° * 
_N⁄nuŒ
, c⁄° * _N⁄nuŒ, 
__va_li°
Ë
	`__sˇnÊike
(2, 0);

296 
	`°πﬁ
(const *, **, );

297 
u_l⁄g
 
	`°πoul
(const *, **, );

298 
quad_t
 
	`°πoq
(const *, **, );

299 
u_quad_t
 
	`°πouq
(const *, **, );

300 
	$çrötf
(
¥oc
 *
p
, 
¥i
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

301 
	$vçrötf
(
¥oc
 *, , c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

302 
	`hexdump
(c⁄° *
±r
, 
Àngth
, c⁄° *
hdr
, 
Êags
);

303 
	#HD_COLUMN_MASK
 0xff

	)

304 
	#HD_DELIM_MASK
 0xff00

	)

305 
	#HD_OMIT_COUNT
 (1 << 16)

	)

306 
	#HD_OMIT_HEX
 (1 << 17)

	)

307 
	#HD_OMIT_CHARS
 (1 << 18)

	)

309 
	#ovbc›y
(
f
, 
t
, 
l
Ë
	`bc›y
((f), (t), (l))

	)

310 
	`bc›y
(c⁄° * 
_N⁄nuŒ
 
‰om
, * _N⁄nuŒ 
to
, 
size_t
 
Àn
);

311 
	#bc›y
(
‰om
, 
to
, 
Àn
Ë
	`__buûtö_memmove
(—o), (‰om), (Àn))

	)

312 
	`bzîo
(* 
_N⁄nuŒ
 
buf
, 
size_t
 
Àn
);

313 
	#bzîo
(
buf
, 
Àn
Ë
	`__buûtö_mem£t
((buf), 0, (Àn))

	)

314 
	`ex∂icô_bzîo
(* 
_N⁄nuŒ
, 
size_t
);

315 
	`bcmp
(c⁄° *
b1
, c⁄° *
b2
, 
size_t
 
Àn
);

316 
	#bcmp
(
b1
, 
b2
, 
Àn
Ë
	`__buûtö_memcmp
((b1), (b2), (Àn))

	)

318 *
	`mem£t
(* 
_N⁄nuŒ
 
buf
, 
c
, 
size_t
 
Àn
);

319 
	#mem£t
(
buf
, 
c
, 
Àn
Ë
	`__buûtö_mem£t
((buf), (c), (Àn))

	)

320 *
	`mem˝y
(* 
_N⁄nuŒ
 
to
, c⁄° * _N⁄nuŒ 
‰om
, 
size_t
 
Àn
);

321 
	#mem˝y
(
to
, 
‰om
, 
Àn
Ë
	`__buûtö_mem˝y
(—o), (‰om), (Àn))

	)

322 *
	`memmove
(* 
_N⁄nuŒ
 
de°
, c⁄° * _N⁄nuŒ 
§c
, 
size_t
 
n
);

323 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memmove
((de°), (§c), (n))

	)

324 
	`memcmp
(c⁄° *
b1
, c⁄° *
b2
, 
size_t
 
Àn
);

325 
	#memcmp
(
b1
, 
b2
, 
Àn
Ë
	`__buûtö_memcmp
((b1), (b2), (Àn))

	)

327 *
	`mem£t_óæy
(* 
_N⁄nuŒ
 
buf
, 
c
, 
size_t
 
Àn
);

328 
	#bzîo_óæy
(
buf
, 
Àn
Ë
	`mem£t_óæy
((buf), 0, (Àn))

	)

329 *
	`mem˝y_óæy
(* 
_N⁄nuŒ
 
to
, c⁄° * _N⁄nuŒ 
‰om
, 
size_t
 
Àn
);

330 *
	`memmove_óæy
(* 
_N⁄nuŒ
 
de°
, c⁄° * _N⁄nuŒ 
§c
, 
size_t
 
n
);

331 
	#bc›y_óæy
(
‰om
, 
to
, 
Àn
Ë
	`memmove_óæy
(—o), (‰om), (Àn))

	)

333 
	`c›y°r
(c⁄° * 
_N⁄nuŒ
 
__ª°ri˘
 
kÁddr
,

334 * 
_N⁄nuŒ
 
__ª°ri˘
 
kdaddr
, 
size_t
 
Àn
,

335 
size_t
 * 
__ª°ri˘
 
Ànc›õd
);

336 
	`c›yö°r
(c⁄° * 
__ª°ri˘
 
udaddr
,

337 * 
_N⁄nuŒ
 
__ª°ri˘
 
kaddr
, 
size_t
 
Àn
,

338 
size_t
 * 
__ª°ri˘
 
Ànc›õd
);

339 
	`c›yö
(c⁄° * 
__ª°ri˘
 
udaddr
,

340 * 
_N⁄nuŒ
 
__ª°ri˘
 
kaddr
, 
size_t
 
Àn
);

341 
	`c›yö_noÁu…
(c⁄° * 
__ª°ri˘
 
udaddr
,

342 * 
_N⁄nuŒ
 
__ª°ri˘
 
kaddr
, 
size_t
 
Àn
);

343 
	`c›yout
(c⁄° * 
_N⁄nuŒ
 
__ª°ri˘
 
kaddr
,

344 * 
__ª°ri˘
 
udaddr
, 
size_t
 
Àn
);

345 
	`c›yout_noÁu…
(c⁄° * 
_N⁄nuŒ
 
__ª°ri˘
 
kaddr
,

346 * 
__ª°ri˘
 
udaddr
, 
size_t
 
Àn
);

348 
	`fubyã
(vﬁ©ûêc⁄° *
ba£
);

349 
	`fuw‹d
(vﬁ©ûêc⁄° *
ba£
);

350 
	`fuw‹d16
(vﬁ©ûêc⁄° *
ba£
);

351 
öt32_t
 
	`fuw‹d32
(vﬁ©ûêc⁄° *
ba£
);

352 
öt64_t
 
	`fuw‹d64
(vﬁ©ûêc⁄° *
ba£
);

353 
	`fuew‹d
(vﬁ©ûêc⁄° *
ba£
, *
vÆ
);

354 
	`fuew‹d32
(vﬁ©ûêc⁄° *
ba£
, 
öt32_t
 *
vÆ
);

355 
	`fuew‹d64
(vﬁ©ûêc⁄° *
ba£
, 
öt64_t
 *
vÆ
);

356 
	`subyã
(vﬁ©ûê*
ba£
, 
byã
);

357 
	`suw‹d
(vﬁ©ûê*
ba£
, 
w‹d
);

358 
	`suw‹d16
(vﬁ©ûê*
ba£
, 
w‹d
);

359 
	`suw‹d32
(vﬁ©ûê*
ba£
, 
öt32_t
 
w‹d
);

360 
	`suw‹d64
(vﬁ©ûê*
ba£
, 
öt64_t
 
w‹d
);

361 
uöt32_t
 
	`ˇsuw‹d32
(vﬁ©ûêuöt32_à*
ba£
, uöt32_à
ﬁdvÆ
, uöt32_à
√wvÆ
);

362 
u_l⁄g
 
	`ˇsuw‹d
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
ﬁdvÆ
, u_l⁄g 
√wvÆ
);

363 
	`ˇsuew‹d32
(vﬁ©ûê
uöt32_t
 *
ba£
, uöt32_à
ﬁdvÆ
, uöt32_à*
ﬁdvÆp
,

364 
uöt32_t
 
√wvÆ
);

365 
	`ˇsuew‹d
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
ﬁdvÆ
, u_l⁄g *
ﬁdvÆp
,

366 
u_l⁄g
 
√wvÆ
);

368 
	`ªÆôexpúe
(*);

370 
	`sysbìp
(
hîtz
, 
≥riod
);

372 
	`h¨d˛ock
(
˙t
, 
u£rmode
);

373 
	`h¨d˛ock_sync
(
˝u
);

374 
	`so·˛ock
(*);

375 
	`°©˛ock
(
˙t
, 
u£rmode
);

376 
	`¥of˛ock
(
˙t
, 
u£rmode
, 
uötÂå_t
 
pc
);

378 
	`h¨d˛ocköå
();

380 
	`°¨çrof˛ock
(
¥oc
 *);

381 
	`°›¥of˛ock
(
¥oc
 *);

382 
	`˝u_°¨çrof˛ock
();

383 
	`˝u_°›¥of˛ock
();

384 
	`su•íd˛ock
();

385 
	`ªsume˛ock
();

386 
sbötime_t
 
	`˝u_idÀ˛ock
();

387 
	`˝u_a˘ive˛ock
();

388 
	`˝u_√w_ˇŒout
(
˝u
, 
sbötime_t
 
bt
, sbötime_à
bt_›t
);

389 
	`˝u_ë_‰equícy
(
evíâimî
 *
ë
, 
uöt64_t
 
√w‰eq
);

390 
˝u_dißbÀ_c2_¶ìp
;

391 
˝u_dißbÀ_c3_¶ìp
;

393 *
	`kîn_gëív
(c⁄° *
«me
);

394 
	`‰ìív
(*
ív
);

395 
	`gëív_öt
(c⁄° *
«me
, *
d©a
);

396 
	`gëív_uöt
(c⁄° *
«me
, *
d©a
);

397 
	`gëív_l⁄g
(c⁄° *
«me
, *
d©a
);

398 
	`gëív_ul⁄g
(c⁄° *
«me
, *
d©a
);

399 
	`gëív_°rög
(c⁄° *
«me
, *
d©a
, 
size
);

400 
	`gëív_öt64
(c⁄° *
«me
, 
öt64_t
 *
d©a
);

401 
	`gëív_uöt64
(c⁄° *
«me
, 
uöt64_t
 *
d©a
);

402 
	`gëív_quad
(c⁄° *
«me
, 
quad_t
 *
d©a
);

403 
	`kîn_£ãnv
(c⁄° *
«me
, c⁄° *
vÆue
);

404 
	`kîn_un£ãnv
(c⁄° *
«me
);

405 
	`ã°ív
(c⁄° *
«me
);

407 
	`gëív_¨øy
(c⁄° *
«me
, *
d©a
, 
size
, *
psize
,

408 
ty≥_size
, 
boﬁ
 
Ælow_sig√d
);

409 
	#GETENV_UNSIGNED
 
Ál£


	)

410 
	#GETENV_SIGNED
 
åue


	)

412 
	$uöt64_t
 (
	t˝u_tick_f
)();

413 
	`£t_˝utickî
(
˝u_tick_f
 *
func
, 
uöt64_t
 
‰eq
, 
v¨
);

414 
˝u_tick_f
 *
˝u_ticks
;

415 
uöt64_t
 
	`˝u_tickøã
();

416 
uöt64_t
 
	`˝utick2u£c
(uöt64_à
tick
);

418 #ifde‡
APM_FIXUP_CALLTODO


419 
timevÆ
;

420 
	`adju°_timeout_ˇŒtodo
(
timevÆ
 *
time_ch™ge
);

423 
	~<sys/libkîn.h
>

426 
	`c⁄söô
();

427 
	`˝u_öô˛ocks
();

428 
	`˝u_öô˛ocks_b•
();

429 
	`˝u_öô˛ocks_≠
();

430 
	`u§öfoöô
();

433 
	$kîn_ªboŸ
(Ë
__dód2
;

434 
	`shutdown_ni˚
();

437 
	ttimeout_t
(*);

438 
	#CALLOUT_HANDLE_INITIALIZER
(
h™dÀ
) \

439 { 
NULL
 
	}

	)
}

441 
ˇŒout_h™dÀ_öô
(
ˇŒout_h™dÀ
 *);

442 
ˇŒout_h™dÀ
 
timeout
(
timeout_t
 *, *, );

443 
u¡imeout
(
timeout_t
 *, *, 
ˇŒout_h™dÀ
);

446 
__ölöe
 
öåmask_t
 
	$•lbio
(Ë{  0; 
	}
}

447 
__ölöe
 
öåmask_t
 
	$•lˇm
(Ë{  0; 
	}
}

448 
__ölöe
 
öåmask_t
 
	$•l˛ock
(Ë{  0; 
	}
}

449 
__ölöe
 
öåmask_t
 
	$•lhigh
(Ë{  0; 
	}
}

450 
__ölöe
 
öåmask_t
 
	$•limp
(Ë{  0; 
	}
}

451 
__ölöe
 
öåmask_t
 
	$• ë
(Ë{  0; 
	}
}

452 
__ölöe
 
öåmask_t
 
	$•…ty
(Ë{  0; 
	}
}

453 
__ölöe
 
	$•lx
(
öåmask_t
 
ùl
 
__unu£d
Ë{ ; 
	}
}

459 
_¶ìp
(* 
_N⁄nuŒ
 
ch™
, 
lock_obje˘
 *
lock
, 
¥i
,

460 c⁄° *
wmesg
, 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
);

461 
	#m¶ìp
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
timo
) \

462 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), \

463 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

464 
	#m¶ìp_sbt
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
bt
, 
¥
, 
Êags
) \

465 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), (
bt
), (
¥
), \

466 (
Êags
))

	)

467 
m¶ìp_•ö_sbt
(* 
_N⁄nuŒ
 
ch™
, 
mtx
 *mtx,

468 c⁄° *
wmesg
, 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
);

469 
	#m¶ìp_•ö
(
ch™
, 
mtx
, 
wmesg
, 
timo
) \

470 
	`m¶ìp_•ö_sbt
((
ch™
), (
mtx
), (
wmesg
), 
tick_sbt
 * (
timo
), \

471 0, 
C_HARDCLOCK
)

	)

472 
∑u£_sbt
(c⁄° *
wmesg
, 
sbötime_t
 
sbt
, sbötime_à
¥
,

473 
Êags
);

474 
	#∑u£
(
wmesg
, 
timo
) \

475 
	`∑u£_sbt
((
wmesg
), 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

476 
	#∑u£_sig
(
wmesg
, 
timo
) \

477 
	`∑u£_sbt
((
wmesg
), 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
 | 
C_CATCH
)

	)

478 
	#t¶ìp
(
ch™
, 
¥i
, 
wmesg
, 
timo
) \

479 
	`_¶ìp
((
ch™
), 
NULL
, (
¥i
), (
wmesg
), 
tick_sbt
 * (
timo
), \

480 0, 
C_HARDCLOCK
)

	)

481 
	#t¶ìp_sbt
(
ch™
, 
¥i
, 
wmesg
, 
bt
, 
¥
, 
Êags
) \

482 
	`_¶ìp
((
ch™
), 
NULL
, (
¥i
), (
wmesg
), (
bt
), (
¥
), (
Êags
))

	)

483 
wakeup
(* 
ch™
);

484 
wakeup_⁄e
(* 
ch™
);

490 
	gcdev
;

491 
dev_t
 
dev2udev
(
cdev
 *
x
);

492 c⁄° *
devt⁄ame
(
cdev
 *cdev);

494 #ifde‡
__LP64__


495 
size_t
 
devfs_iosize_max
();

496 
size_t
 
iosize_max
();

499 
pﬁl_no_pﬁl
(
evíts
);

502 
DELAY
(
u£c
);

505 
	groŸ_hﬁd_tokí
;

507 
roŸ_hﬁd_tokí
 *
roŸ_mou¡_hﬁd
(c⁄° *
idítifõr
);

508 
roŸ_mou¡_ªl
(
roŸ_hﬁd_tokí
 *
h
);

509 
roŸ_mou¡ed
();

515 
	guƒhdr
;

516 
uƒhdr
 *
√w_uƒhdr
(
low
, 
high
, 
mtx
 *
muãx
);

517 
öô_uƒhdr
(
uƒhdr
 *
uh
, 
low
, 
high
, 
mtx
 *
muãx
);

518 
dñëe_uƒhdr
(
uƒhdr
 *
uh
);

519 
˛ór_uƒhdr
(
uƒhdr
 *
uh
);

520 
˛ón_uƒhdr
(
uƒhdr
 *
uh
);

521 
˛ón_uƒhdæ
(
uƒhdr
 *
uh
);

522 
Æloc_uƒ
(
uƒhdr
 *
uh
);

523 
Æloc_uƒ_•ecific
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

524 
Æloc_uƒl
(
uƒhdr
 *
uh
);

525 
‰ì_uƒ
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

527 
öå_¥of_°ack_u£
(
thªad
 *
td
, 
å≠‰ame
 *
‰ame
);

529 
cou¡ed_w¨nög
(*
cou¡î
, c⁄° *
msg
);

534 
	gdevi˚
;

535 
_g⁄e_ö
(
maj‹
, c⁄° *
msg
);

536 
_g⁄e_ö_dev
(
devi˚
 *
dev
, 
maj‹
, c⁄° *
msg
);

537 #ifde‡
NO_OBSOLETE_CODE


538 
	#__g⁄e_ok
(
m
, 
msg
) \

539 
	`_Sètic_as£π
(
m
 < 
	`P_OSREL_MAJOR
(
__FªeBSD_vîsi⁄
)), \

540 "Obsﬁëêcode" 
msg
);

	)

542 
	#__g⁄e_ok
(
m
, 
msg
)

	)

544 
	#g⁄e_ö
(
maj‹
, 
msg
Ë
	`__g⁄e_ok
(maj‹, msgË
	`_g⁄e_ö
(maj‹, msg)

	)

545 
	#g⁄e_ö_dev
(
dev
, 
maj‹
, 
msg
Ë
	`__g⁄e_ok
(maj‹, msgË
	`_g⁄e_ö_dev
(dev, maj‹, msg)

	)

546 
	#g⁄e_by_f˝101_dev
(
dev
) \

547 
	`g⁄e_ö_dev
((
dev
), 13, \

548 "£êhâps://gôhub.com/‰ìbsd/f˝/blob/ma°î/f˝-0101.md")

	)

550 
	g__NULLABILITY_PRAGMA_POP


	@/usr/include/sys/taskqueue.h

31 #i‚de‡
_SYS_TASKQUEUE_H_


32 
	#_SYS_TASKQUEUE_H_


	)

34 #i‚de‡
_KERNEL


38 
	~<sys/queue.h
>

39 
	~<sys/_èsk.h
>

40 
	~<sys/_ˇŒout.h
>

41 
	~<sys/_˝u£t.h
>

43 
	gèskqueue
;

44 
	gèskqgroup
;

45 
	gthªad
;

47 
	stimeout_èsk
 {

48 
èskqueue
 *
	mq
;

49 
èsk
 
	mt
;

50 
ˇŒout
 
	mc
;

51 
	mf
;

54 
	eèskqueue_ˇŒback_ty≥
 {

55 
	mTASKQUEUE_CALLBACK_TYPE_INIT
,

56 
	mTASKQUEUE_CALLBACK_TYPE_SHUTDOWN
,

58 
	#TASKQUEUE_CALLBACK_TYPE_MIN
 
TASKQUEUE_CALLBACK_TYPE_INIT


	)

59 
	#TASKQUEUE_CALLBACK_TYPE_MAX
 
TASKQUEUE_CALLBACK_TYPE_SHUTDOWN


	)

60 
	#TASKQUEUE_NUM_CALLBACKS
 
TASKQUEUE_CALLBACK_TYPE_MAX
 + 1

	)

61 
	#TASKQUEUE_NAMELEN
 32

	)

63 (*
	tèskqueue_ˇŒback_‚
)(*
	tc⁄ãxt
);

72 (*
	tèskqueue_íqueue_‚
)(*
	tc⁄ãxt
);

74 
èskqueue
 *
	`èskqueue_¸óã
(c⁄° *
«me
, 
mÊags
,

75 
èskqueue_íqueue_‚
 
íqueue
,

76 *
c⁄ãxt
);

77 
	$èskqueue_°¨t_thªads
(
èskqueue
 **
tqp
, 
cou¡
, 
¥i
,

78 c⁄° *
«me
, ...Ë
	`__¥ötÊike
(4, 5);

79 
	$èskqueue_°¨t_thªads_˝u£t
(
èskqueue
 **
tqp
, 
cou¡
,

80 
¥i
, 
˝u£t_t
 *
mask
, c⁄° *
«me
, ...Ë
	`__¥ötÊike
(5, 6);

81 
	`èskqueue_íqueue
(
èskqueue
 *
queue
, 
èsk
 *task);

82 
	`èskqueue_íqueue_timeout
(
èskqueue
 *
queue
,

83 
timeout_èsk
 *timeout_èsk, 
ticks
);

84 
	`èskqueue_íqueue_timeout_sbt
(
èskqueue
 *
queue
,

85 
timeout_èsk
 *timeout_èsk, 
sbötime_t
 
sbt
, sbötime_à
¥
,

86 
Êags
);

87 
	`èskqueue_pﬁl_is_busy
(
èskqueue
 *
queue
, 
èsk
 *task);

88 
	`èskqueue_ˇn˚l
(
èskqueue
 *
queue
, 
èsk
 *task,

89 
u_öt
 *
≥ndp
);

90 
	`èskqueue_ˇn˚l_timeout
(
èskqueue
 *
queue
,

91 
timeout_èsk
 *timeout_èsk, 
u_öt
 *
≥ndp
);

92 
	`èskqueue_døö
(
èskqueue
 *
queue
, 
èsk
 *task);

93 
	`èskqueue_døö_timeout
(
èskqueue
 *
queue
,

94 
timeout_èsk
 *timeout_task);

95 
	`èskqueue_døö_Æl
(
èskqueue
 *
queue
);

96 
	`èskqueue_‰ì
(
èskqueue
 *
queue
);

97 
	`èskqueue_run
(
èskqueue
 *
queue
);

98 
	`èskqueue_block
(
èskqueue
 *
queue
);

99 
	`èskqueue_unblock
(
èskqueue
 *
queue
);

100 
	`èskqueue_membî
(
èskqueue
 *
queue
, 
thªad
 *
td
);

101 
	`èskqueue_£t_ˇŒback
(
èskqueue
 *
queue
,

102 
èskqueue_ˇŒback_ty≥
 
cb_ty≥
,

103 
èskqueue_ˇŒback_‚
 
ˇŒback
, *
c⁄ãxt
);

105 
	#TASK_INITIALIZER
(
¥i‹ôy
, 
func
, 
c⁄ãxt
) \

106 { .
è_≥ndög
 = 0, \

107 .
è_¥i‹ôy
 = (
¥i‹ôy
), \

108 .
è_func
 = (
func
), \

109 .
è_c⁄ãxt
 = (
c⁄ãxt
Ë
	}

	)
}

114 
èskqueue_thªad_lo›
(*
¨g
);

115 
èskqueue_thªad_íqueue
(*
c⁄ãxt
);

120 
	#TASK_INIT
(
èsk
, 
¥i‹ôy
, 
func
, 
c⁄ãxt
) do { \

121 (
èsk
)->
è_≥ndög
 = 0; \

122 (
èsk
)->
è_¥i‹ôy
 = (
¥i‹ôy
); \

123 (
èsk
)->
è_func
 = (
func
); \

124 (
èsk
)->
è_c⁄ãxt
 = (
c⁄ãxt
); \

125 } 0)

	)

127 
_timeout_èsk_öô
(
èskqueue
 *
queue
,

128 
timeout_èsk
 *timeout_èsk, 
¥i‹ôy
, 
èsk_‚_t
 
func
,

129 *
c⁄ãxt
);

130 
	#TIMEOUT_TASK_INIT
(
queue
, 
timeout_èsk
, 
¥i‹ôy
, 
func
, 
c⁄ãxt
) \

131 
	`_timeout_èsk_öô
(
queue
, 
timeout_èsk
, 
¥i‹ôy
, 
func
, 
c⁄ãxt
);

	)

136 
	#TASKQUEUE_DECLARE
(
«me
) \

137 
èskqueue
 *
èskqueue_
##
«me


	)

142 
	#TASKQUEUE_DEFINE
(
«me
, 
íqueue
, 
c⁄ãxt
, 
öô
) \

144 
èskqueue
 *
èskqueue_
##
«me
; \

147 
èskqueue_deföe_
##
	`«me
(*
¨g
) \

149 
èskqueue_
##
«me
 = \

150 
	`èskqueue_¸óã
(#«me, 
M_WAITOK
, (
íqueue
), (
c⁄ãxt
)); \

151 
öô
; \

154 
	`SYSINIT
(
èskqueue_
##
«me
, 
SI_SUB_TASKQ
, 
SI_ORDER_SECOND
, \

155 
èskqueue_deföe_
##
«me
, 
NULL
); \

157 
__hack


	)

158 
	#TASKQUEUE_DEFINE_THREAD
(
«me
) \

159 
	`TASKQUEUE_DEFINE
(
«me
, 
èskqueue_thªad_íqueue
, &
èskqueue_
##name, \

160 
	`èskqueue_°¨t_thªads
(&
èskqueue_
##
«me
, 1, 
PWAIT
, \

161 "%†èskq", #«me))

	)

166 
	#TASKQUEUE_FAST_DEFINE
(
«me
, 
íqueue
, 
c⁄ãxt
, 
öô
) \

168 
èskqueue
 *
èskqueue_
##
«me
; \

171 
èskqueue_deföe_
##
	`«me
(*
¨g
) \

173 
èskqueue_
##
«me
 = \

174 
	`èskqueue_¸óã_Á°
(#«me, 
M_WAITOK
, (
íqueue
), \

175 (
c⁄ãxt
)); \

176 
öô
; \

179 
	`SYSINIT
(
èskqueue_
##
«me
, 
SI_SUB_TASKQ
, 
SI_ORDER_SECOND
, \

180 
èskqueue_deföe_
##
«me
, 
NULL
); \

182 
__hack


	)

183 
	#TASKQUEUE_FAST_DEFINE_THREAD
(
«me
) \

184 
	`TASKQUEUE_FAST_DEFINE
(
«me
, 
èskqueue_thªad_íqueue
, \

185 &
èskqueue_
##
«me
, 
	`èskqueue_°¨t_thªads
(&taskqueue_##name \

186 1, 
PWAIT
, "%†èskq", #«me))

	)

193 
TASKQUEUE_DECLARE
(
swi_gü¡
);

194 
TASKQUEUE_DECLARE
(
swi
);

200 
TASKQUEUE_DECLARE
(
thªad
);

208 
TASKQUEUE_DECLARE
(
Á°
);

209 
èskqueue
 *
èskqueue_¸óã_Á°
(c⁄° *
«me
, 
mÊags
,

210 
èskqueue_íqueue_‚
 
íqueue
,

211 *
c⁄ãxt
);

	@/usr/include/sys/timex.h

35 #i‚de‡
_SYS_TIMEX_H_


36 
	#_SYS_TIMEX_H_
 1

	)

38 
	#NTP_API
 4

	)

40 #ifde‡
__FªeBSD__


41 
	~<sys/_time•ec.h
>

54 
	#MAXPHASE
 500000000L

	)

55 
	#MAXFREQ
 500000L

	)

56 
	#MINSEC
 256

	)

57 
	#MAXSEC
 2048

	)

58 
	#NANOSECOND
 1000000000L

	)

59 
	#SCALE_PPM
 (65536 / 1000Ë

	)

60 
	#MAXTC
 10

	)

65 
	#MOD_OFFSET
 0x0001

	)

66 
	#MOD_FREQUENCY
 0x0002

	)

67 
	#MOD_MAXERROR
 0x0004

	)

68 
	#MOD_ESTERROR
 0x0008

	)

69 
	#MOD_STATUS
 0x0010

	)

70 
	#MOD_TIMECONST
 0x0020

	)

71 
	#MOD_PPSMAX
 0x0040

	)

72 
	#MOD_TAI
 0x0080

	)

73 
	#MOD_MICRO
 0x1000

	)

74 
	#MOD_NANO
 0x2000

	)

75 
	#MOD_CLKB
 0x4000

	)

76 
	#MOD_CLKA
 0x8000

	)

81 
	#STA_PLL
 0x0001

	)

82 
	#STA_PPSFREQ
 0x0002

	)

83 
	#STA_PPSTIME
 0x0004

	)

84 
	#STA_FLL
 0x0008

	)

85 
	#STA_INS
 0x0010

	)

86 
	#STA_DEL
 0x0020

	)

87 
	#STA_UNSYNC
 0x0040

	)

88 
	#STA_FREQHOLD
 0x0080

	)

89 
	#STA_PPSSIGNAL
 0x0100

	)

90 
	#STA_PPSJITTER
 0x0200

	)

91 
	#STA_PPSWANDER
 0x0400

	)

92 
	#STA_PPSERROR
 0x0800

	)

93 
	#STA_CLOCKERR
 0x1000

	)

94 
	#STA_NANO
 0x2000

	)

95 
	#STA_MODE
 0x4000

	)

96 
	#STA_CLK
 0x8000

	)

98 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

99 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

104 
	#TIME_OK
 0

	)

105 
	#TIME_INS
 1

	)

106 
	#TIME_DEL
 2

	)

107 
	#TIME_OOP
 3

	)

108 
	#TIME_WAIT
 4

	)

109 
	#TIME_ERROR
 5

	)

114 
	s¡±imevÆ
 {

115 
time•ec
 
	mtime
;

116 
	mmaxîr‹
;

117 
	me°îr‹
;

118 
	mèi
;

119 
	mtime_°©e
;

129 
	stimex
 {

130 
	mmodes
;

131 
	moff£t
;

132 
	m‰eq
;

133 
	mmaxîr‹
;

134 
	me°îr‹
;

135 
	m°©us
;

136 
	mc⁄°™t
;

137 
	m¥ecisi⁄
;

138 
	mtﬁî™˚
;

146 
	mµs‰eq
;

147 
	mjôãr
;

148 
	mshi·
;

149 
	m°abû
;

150 
	mjô˙t
;

151 
	mˇl˙t
;

152 
	mîr˙t
;

153 
	m°b˙t
;

156 #ifde‡
__FªeBSD__


158 #ifde‡
_KERNEL


159 
¡p_upd©e_£c⁄d
(
öt64_t
 *
adju°mít
, 
time_t
 *
√w£c
);

161 
	~<sys/cdefs.h
>

163 
__BEGIN_DECLS


164 
¡p_adjtime
(
timex
 *);

165 
¡p_gëtime
(
¡±imevÆ
 *);

166 
	g__END_DECLS


	@/usr/include/sys/tree.h

32 #i‚def 
_SYS_TREE_H_


33 
	#_SYS_TREE_H_


	)

35 
	~<sys/cdefs.h
>

64 
	#SPLAY_HEAD
(
«me
, 
ty≥
) \

65 
	s«me
 { \

66 
ty≥
 *
•h_roŸ
; \

67 }

	)

69 
	#SPLAY_INITIALIZER
(
roŸ
) \

70 { 
NULL
 }

	)

72 
	#SPLAY_INIT
(
roŸ
) do { \

73 (
roŸ
)->
•h_roŸ
 = 
NULL
; \

74 }  0)

	)

76 
	#SPLAY_ENTRY
(
ty≥
) \

78 
ty≥
 *
•e_À·
; \

79 
ty≥
 *
•e_right
; \

80 }

	)

82 
	#SPLAY_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_À·


	)

83 
	#SPLAY_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
•e_right


	)

84 
	#SPLAY_ROOT
(
hód
Ë(hód)->
•h_roŸ


	)

85 
	#SPLAY_EMPTY
(
hód
Ë(
	`SPLAY_ROOT
(hódË=
NULL
)

	)

88 
	#SPLAY_ROTATE_RIGHT
(
hód
, 
tmp
, 
fõld
) do { \

89 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
tmp
, field); \

90 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

91 (
hód
)->
•h_roŸ
 = 
tmp
; \

92 }  0)

	)

94 
	#SPLAY_ROTATE_LEFT
(
hód
, 
tmp
, 
fõld
) do { \

95 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
tmp
, field); \

96 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

97 (
hód
)->
•h_roŸ
 = 
tmp
; \

98 }  0)

	)

100 
	#SPLAY_LINKLEFT
(
hód
, 
tmp
, 
fõld
) do { \

101 
	`SPLAY_LEFT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

102 
tmp
 = (
hód
)->
•h_roŸ
; \

103 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
); \

104 }  0)

	)

106 
	#SPLAY_LINKRIGHT
(
hód
, 
tmp
, 
fõld
) do { \

107 
	`SPLAY_RIGHT
(
tmp
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

108 
tmp
 = (
hód
)->
•h_roŸ
; \

109 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
); \

110 }  0)

	)

112 
	#SPLAY_ASSEMBLE
(
hód
, 
node
, 
À·
, 
right
, 
fõld
) do { \

113 
	`SPLAY_RIGHT
(
À·
, 
fõld
Ë
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, field); \

114 
	`SPLAY_LEFT
(
right
, 
fõld
Ë
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, field);\

115 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_RIGHT
(
node
, field); \

116 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
	`SPLAY_LEFT
(
node
, field); \

117 }  0)

	)

121 
	#SPLAY_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

122 
«me
##
	`_SPLAY
(«mê*, 
ty≥
 *); \

123 
«me
##
	`_SPLAY_MINMAX
(name *, ); \

124 
ty≥
 *
«me
##
	`_SPLAY_INSERT
(name *, type *); \

125 
ty≥
 *
«me
##
	`_SPLAY_REMOVE
(name *, type *); \

128 
__ölöe
 
ty≥
 * \

129 
«me
##
	`_SPLAY_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

131 i‡(
	`SPLAY_EMPTY
(
hód
)) \

132 (
NULL
); \

133 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

134 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) \

135  (
hód
->
•h_roŸ
); \

136  (
NULL
); \

139 
__ölöe
 
ty≥
 * \

140 
«me
##
	`_SPLAY_NEXT
(«mê*
hód
, 
ty≥
 *
ñm
) \

142 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

143 i‡(
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë!
NULL
) { \

144 
ñm
 = 
	`SPLAY_RIGHT
”lm, 
fõld
); \

145 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë!
NULL
) { \

146 
ñm
 = 
	`SPLAY_LEFT
”lm, 
fõld
); \

149 
ñm
 = 
NULL
; \

150  (
ñm
); \

153 
__ölöe
 
ty≥
 * \

154 
«me
##
	`_SPLAY_MIN_MAX
(«mê*
hód
, 
vÆ
) \

156 
«me
##
	`_SPLAY_MINMAX
(
hód
, 
vÆ
); \

157  (
	`SPLAY_ROOT
(
hód
)); \

158 }

	)

163 
	#SPLAY_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

164 
ty≥
 * \

165 
«me
##
	`_SPLAY_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

167 i‡(
	`SPLAY_EMPTY
(
hód
)) { \

168 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë
	`SPLAY_RIGHT
”lm, fõldË
NULL
; \

170 
__comp
; \

171 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

172 
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
); \

173 if(
__comp
 < 0) { \

174 
	`SPLAY_LEFT
(
ñm
, 
fõld
ËSPLAY_LEFT((
hód
)->
•h_roŸ
, field);\

175 
	`SPLAY_RIGHT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

176 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

177 } i‡(
__comp
 > 0) { \

178 
	`SPLAY_RIGHT
(
ñm
, 
fõld
ËSPLAY_RIGHT((
hód
)->
•h_roŸ
, field);\

179 
	`SPLAY_LEFT
(
ñm
, 
fõld
Ë(
hód
)->
•h_roŸ
; \

180 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
NULL
; \

182  ((
hód
)->
•h_roŸ
); \

184 (
hód
)->
•h_roŸ
 = (
ñm
); \

185  (
NULL
); \

188 
ty≥
 * \

189 
«me
##
	`_SPLAY_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

191 
ty≥
 *
__tmp
; \

192 i‡(
	`SPLAY_EMPTY
(
hód
)) \

193  (
NULL
); \

194 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

195 i‡((
cmp
)(
ñm
, (
hód
)->
•h_roŸ
) == 0) { \

196 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
) { \

197 (
hód
)->
•h_roŸ
 = 
	`SPLAY_RIGHT
((hód)->•h_roŸ, 
fõld
);\

199 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

200 (
hód
)->
•h_roŸ
 = 
	`SPLAY_LEFT
((hód)->•h_roŸ, 
fõld
);\

201 
«me
##
	`_SPLAY
(
hód
, 
ñm
); \

202 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë
__tmp
; \

204  (
ñm
); \

206  (
NULL
); \

210 
«me
##
	`_SPLAY
(«mê*
hód
, 
ty≥
 *
ñm
) \

212 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

213 
__comp
; \

215 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

216 
__À·
 = 
__right
 = &
__node
; \

218 (
__comp
 = (
cmp
)(
ñm
, (
hód
)->
•h_roŸ
)) != 0) { \

219 i‡(
__comp
 < 0) { \

220 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

221 i‡(
__tmp
 =
NULL
) \

223 i‡((
cmp
)(
ñm
, 
__tmp
) < 0){ \

224 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

225 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

228 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

229 } i‡(
__comp
 > 0) { \

230 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

231 i‡(
__tmp
 =
NULL
) \

233 i‡((
cmp
)(
ñm
, 
__tmp
) > 0){ \

234 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

235 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

238 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

241 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

247 
«me
##
	`_SPLAY_MINMAX
(«mê*
hód
, 
__comp
) \

249 
ty≥
 
__node
, *
__À·
, *
__right
, *
__tmp
; \

251 
	`SPLAY_LEFT
(&
__node
, 
fõld
Ë
	`SPLAY_RIGHT
(&__node, fõldË
NULL
;\

252 
__À·
 = 
__right
 = &
__node
; \

255 i‡(
__comp
 < 0) { \

256 
__tmp
 = 
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
); \

257 i‡(
__tmp
 =
NULL
) \

259 i‡(
__comp
 < 0){ \

260 
	`SPLAY_ROTATE_RIGHT
(
hód
, 
__tmp
, 
fõld
); \

261 i‡(
	`SPLAY_LEFT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

264 
	`SPLAY_LINKLEFT
(
hód
, 
__right
, 
fõld
); \

265 } i‡(
__comp
 > 0) { \

266 
__tmp
 = 
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
); \

267 i‡(
__tmp
 =
NULL
) \

269 i‡(
__comp
 > 0) { \

270 
	`SPLAY_ROTATE_LEFT
(
hód
, 
__tmp
, 
fõld
); \

271 i‡(
	`SPLAY_RIGHT
((
hód
)->
•h_roŸ
, 
fõld
Ë=
NULL
)\

274 
	`SPLAY_LINKRIGHT
(
hód
, 
__À·
, 
fõld
); \

277 
	`SPLAY_ASSEMBLE
(
hód
, &
__node
, 
__À·
, 
__right
, 
fõld
); \

278 }

	)

280 
	#SPLAY_NEGINF
 -1

	)

281 
	#SPLAY_INF
 1

	)

283 
	#SPLAY_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_INSERT
(x, y)

	)

284 
	#SPLAY_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_REMOVE
(x, y)

	)

285 
	#SPLAY_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_FIND
(x, y)

	)

286 
	#SPLAY_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_SPLAY_NEXT
(x, y)

	)

287 
	#SPLAY_MIN
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

288 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_NEGINF
))

	)

289 
	#SPLAY_MAX
(
«me
, 
x
Ë(
	`SPLAY_EMPTY
(xË? 
NULL
 \

290 : 
«me
##
	`_SPLAY_MIN_MAX
(
x
, 
SPLAY_INF
))

	)

292 
	#SPLAY_FOREACH
(
x
, 
«me
, 
hód
) \

293 (
x
Ë
	`SPLAY_MIN
(
«me
, 
hód
); \

294 (
x
Ë!
NULL
; \

295 (
x
Ë
	`SPLAY_NEXT
(
«me
, 
hód
, x))

	)

298 
	#RB_HEAD
(
«me
, 
ty≥
) \

299 
	s«me
 { \

300 
ty≥
 *
rbh_roŸ
; \

301 }

	)

303 
	#RB_INITIALIZER
(
roŸ
) \

304 { 
NULL
 }

	)

306 
	#RB_INIT
(
roŸ
) do { \

307 (
roŸ
)->
rbh_roŸ
 = 
NULL
; \

308 }  0)

	)

310 
	#RB_BLACK
 0

	)

311 
	#RB_RED
 1

	)

312 
	#RB_ENTRY
(
ty≥
) \

314 
ty≥
 *
rbe_À·
; \

315 
ty≥
 *
rbe_right
; \

316 
ty≥
 *
rbe_∑ª¡
; \

317 
rbe_cﬁ‹
; \

318 }

	)

320 
	#RB_LEFT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_À·


	)

321 
	#RB_RIGHT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_right


	)

322 
	#RB_PARENT
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_∑ª¡


	)

323 
	#RB_COLOR
(
ñm
, 
fõld
Ë”lm)->fõld.
rbe_cﬁ‹


	)

324 
	#RB_ROOT
(
hód
Ë(hód)->
rbh_roŸ


	)

325 
	#RB_EMPTY
(
hód
Ë(
	`RB_ROOT
(hódË=
NULL
)

	)

327 
	#RB_SET
(
ñm
, 
∑ª¡
, 
fõld
) do { \

328 
	`RB_PARENT
(
ñm
, 
fõld
Ë
∑ª¡
; \

329 
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
”lm, fõldË
NULL
; \

330 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_RED
; \

331 }  0)

	)

333 
	#RB_SET_BLACKRED
(
bœck
, 
ªd
, 
fõld
) do { \

334 
	`RB_COLOR
(
bœck
, 
fõld
Ë
RB_BLACK
; \

335 
	`RB_COLOR
(
ªd
, 
fõld
Ë
RB_RED
; \

336 }  0)

	)

338 #i‚de‡
RB_AUGMENT


339 
	#RB_AUGMENT
(
x
Ëdÿ{} 0)

	)

342 
	#RB_ROTATE_LEFT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

343 (
tmp
Ë
	`RB_RIGHT
(
ñm
, 
fõld
); \

344 i‡((
	`RB_RIGHT
(
ñm
, 
fõld
Ë
	`RB_LEFT
(
tmp
, fõld)Ë!
NULL
) { \

345 
	`RB_PARENT
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË(
ñm
); \

347 
	`RB_AUGMENT
(
ñm
); \

348 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, fõld)Ë!
NULL
) { \

349 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

350 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

352 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

354 (
hód
)->
rbh_roŸ
 = (
tmp
); \

355 
	`RB_LEFT
(
tmp
, 
fõld
Ë(
ñm
); \

356 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

357 
	`RB_AUGMENT
(
tmp
); \

358 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

359 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

360 }  0)

	)

362 
	#RB_ROTATE_RIGHT
(
hód
, 
ñm
, 
tmp
, 
fõld
) do { \

363 (
tmp
Ë
	`RB_LEFT
(
ñm
, 
fõld
); \

364 i‡((
	`RB_LEFT
(
ñm
, 
fõld
Ë
	`RB_RIGHT
(
tmp
, fõld)Ë!
NULL
) { \

365 
	`RB_PARENT
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË(
ñm
); \

367 
	`RB_AUGMENT
(
ñm
); \

368 i‡((
	`RB_PARENT
(
tmp
, 
fõld
ËRB_PARENT(
ñm
, fõld)Ë!
NULL
) { \

369 i‡((
ñm
Ë=
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)) \

370 
	`RB_LEFT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

372 
	`RB_RIGHT
(
	`RB_PARENT
(
ñm
, 
fõld
), fõldË(
tmp
); \

374 (
hód
)->
rbh_roŸ
 = (
tmp
); \

375 
	`RB_RIGHT
(
tmp
, 
fõld
Ë(
ñm
); \

376 
	`RB_PARENT
(
ñm
, 
fõld
Ë(
tmp
); \

377 
	`RB_AUGMENT
(
tmp
); \

378 i‡((
	`RB_PARENT
(
tmp
, 
fõld
))) \

379 
	`RB_AUGMENT
(
	`RB_PARENT
(
tmp
, 
fõld
)); \

380 }  0)

	)

383 
	#RB_PROTOTYPE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

384 
	`RB_PROTOTYPE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
,)

	)

385 
	#RB_PROTOTYPE_STATIC
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

386 
	`RB_PROTOTYPE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
__unu£d
 )

	)

387 
	#RB_PROTOTYPE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

388 
	`RB_PROTOTYPE_INSERT_COLOR
(
«me
, 
ty≥
, 
©å
); \

389 
	`RB_PROTOTYPE_REMOVE_COLOR
(
«me
, 
ty≥
, 
©å
); \

390 
	`RB_PROTOTYPE_INSERT
(
«me
, 
ty≥
, 
©å
); \

391 
	`RB_PROTOTYPE_REMOVE
(
«me
, 
ty≥
, 
©å
); \

392 
	`RB_PROTOTYPE_FIND
(
«me
, 
ty≥
, 
©å
); \

393 
	`RB_PROTOTYPE_NFIND
(
«me
, 
ty≥
, 
©å
); \

394 
	`RB_PROTOTYPE_NEXT
(
«me
, 
ty≥
, 
©å
); \

395 
	`RB_PROTOTYPE_PREV
(
«me
, 
ty≥
, 
©å
); \

396 
	`RB_PROTOTYPE_MINMAX
(
«me
, 
ty≥
, 
©å
);

	)

397 
	#RB_PROTOTYPE_INSERT_COLOR
(
«me
, 
ty≥
, 
©å
) \

398 
©å
 
«me
##
	`_RB_INSERT_COLOR
(«mê*, 
ty≥
 *)

	)

399 
	#RB_PROTOTYPE_REMOVE_COLOR
(
«me
, 
ty≥
, 
©å
) \

400 
©å
 
«me
##
	`_RB_REMOVE_COLOR
(«mê*, 
ty≥
 *, ty≥ *)

	)

401 
	#RB_PROTOTYPE_REMOVE
(
«me
, 
ty≥
, 
©å
) \

402 
©å
 
ty≥
 *
«me
##
	`_RB_REMOVE
(«mê*, ty≥ *)

	)

403 
	#RB_PROTOTYPE_INSERT
(
«me
, 
ty≥
, 
©å
) \

404 
©å
 
ty≥
 *
«me
##
	`_RB_INSERT
(«mê*, ty≥ *)

	)

405 
	#RB_PROTOTYPE_FIND
(
«me
, 
ty≥
, 
©å
) \

406 
©å
 
ty≥
 *
«me
##
	`_RB_FIND
(«mê*, ty≥ *)

	)

407 
	#RB_PROTOTYPE_NFIND
(
«me
, 
ty≥
, 
©å
) \

408 
©å
 
ty≥
 *
«me
##
	`_RB_NFIND
(«mê*, ty≥ *)

	)

409 
	#RB_PROTOTYPE_NEXT
(
«me
, 
ty≥
, 
©å
) \

410 
©å
 
ty≥
 *
«me
##
	`_RB_NEXT
(ty≥ *)

	)

411 
	#RB_PROTOTYPE_PREV
(
«me
, 
ty≥
, 
©å
) \

412 
©å
 
ty≥
 *
«me
##
	`_RB_PREV
(ty≥ *)

	)

413 
	#RB_PROTOTYPE_MINMAX
(
«me
, 
ty≥
, 
©å
) \

414 
©å
 
ty≥
 *
«me
##
	`_RB_MINMAX
(«mê*, )

	)

419 
	#RB_GENERATE
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

420 
	`RB_GENERATE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
,)

	)

421 
	#RB_GENERATE_STATIC
(
«me
, 
ty≥
, 
fõld
, 
cmp
) \

422 
	`RB_GENERATE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
__unu£d
 )

	)

423 
	#RB_GENERATE_INTERNAL
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

424 
	`RB_GENERATE_INSERT_COLOR
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

425 
	`RB_GENERATE_REMOVE_COLOR
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

426 
	`RB_GENERATE_INSERT
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

427 
	`RB_GENERATE_REMOVE
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

428 
	`RB_GENERATE_FIND
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

429 
	`RB_GENERATE_NFIND
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

430 
	`RB_GENERATE_NEXT
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

431 
	`RB_GENERATE_PREV
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

432 
	`RB_GENERATE_MINMAX
(
«me
, 
ty≥
, 
fõld
, 
©å
)

	)

434 
	#RB_GENERATE_INSERT_COLOR
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

435 
©å
 \

436 
«me
##
	`_RB_INSERT_COLOR
(«mê*
hód
, 
ty≥
 *
ñm
) \

438 
ty≥
 *
∑ª¡
, *
g∑ª¡
, *
tmp
; \

439 (
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
)Ë!
NULL
 && \

440 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë=
RB_RED
) { \

441 
g∑ª¡
 = 
	`RB_PARENT
(
∑ª¡
, 
fõld
); \

442 i‡(
∑ª¡
 =
	`RB_LEFT
(
g∑ª¡
, 
fõld
)) { \

443 
tmp
 = 
	`RB_RIGHT
(
g∑ª¡
, 
fõld
); \

444 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

445 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

446 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

447 
ñm
 = 
g∑ª¡
; \

450 i‡(
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

451 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

452 
tmp
 = 
∑ª¡
; \

453 
∑ª¡
 = 
ñm
; \

454 
ñm
 = 
tmp
; \

456 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

457 
	`RB_ROTATE_RIGHT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

459 
tmp
 = 
	`RB_LEFT
(
g∑ª¡
, 
fõld
); \

460 i‡(
tmp
 && 
	`RB_COLOR
—mp, 
fõld
Ë=
RB_RED
) { \

461 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_BLACK
; \

462 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
);\

463 
ñm
 = 
g∑ª¡
; \

466 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

467 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

468 
tmp
 = 
∑ª¡
; \

469 
∑ª¡
 = 
ñm
; \

470 
ñm
 = 
tmp
; \

472 
	`RB_SET_BLACKRED
(
∑ª¡
, 
g∑ª¡
, 
fõld
); \

473 
	`RB_ROTATE_LEFT
(
hód
, 
g∑ª¡
, 
tmp
, 
fõld
); \

476 
	`RB_COLOR
(
hód
->
rbh_roŸ
, 
fõld
Ë
RB_BLACK
; \

477 }

	)

479 
	#RB_GENERATE_REMOVE_COLOR
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

480 
©å
 \

481 
«me
##
	`_RB_REMOVE_COLOR
(«mê*
hód
, 
ty≥
 *
∑ª¡
, ty≥ *
ñm
) \

483 
ty≥
 *
tmp
; \

484 (
ñm
 =
NULL
 || 
	`RB_COLOR
”lm, 
fõld
Ë=
RB_BLACK
) && \

485 
ñm
 !
	`RB_ROOT
(
hód
)) { \

486 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) { \

487 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

488 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

489 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

490 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

491 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

493 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

494 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

495 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

496 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

497 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

498 
ñm
 = 
∑ª¡
; \

499 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

501 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

502 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

503 
ty≥
 *
ﬁe·
; \

504 i‡((
ﬁe·
 = 
	`RB_LEFT
(
tmp
, 
fõld
)) \

505 !
NULL
) \

506 
	`RB_COLOR
(
ﬁe·
, 
fõld
Ë
RB_BLACK
;\

507 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

508 
	`RB_ROTATE_RIGHT
(
hód
, 
tmp
, 
ﬁe·
, 
fõld
);\

509 
tmp
 = 
	`RB_RIGHT
(
∑ª¡
, 
fõld
); \

511 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

512 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

513 i‡(
	`RB_RIGHT
(
tmp
, 
fõld
)) \

514 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

515 
	`RB_ROTATE_LEFT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

516 
ñm
 = 
	`RB_ROOT
(
hód
); \

520 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

521 i‡(
	`RB_COLOR
(
tmp
, 
fõld
Ë=
RB_RED
) { \

522 
	`RB_SET_BLACKRED
(
tmp
, 
∑ª¡
, 
fõld
); \

523 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

524 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

526 i‡((
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

527 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) &&\

528 (
	`RB_RIGHT
(
tmp
, 
fõld
Ë=
NULL
 || \

529 
	`RB_COLOR
(
	`RB_RIGHT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
)) {\

530 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

531 
ñm
 = 
∑ª¡
; \

532 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

534 i‡(
	`RB_LEFT
(
tmp
, 
fõld
Ë=
NULL
 || \

535 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË=
RB_BLACK
) {\

536 
ty≥
 *
‹ight
; \

537 i‡((
‹ight
 = 
	`RB_RIGHT
(
tmp
, 
fõld
)) \

538 !
NULL
) \

539 
	`RB_COLOR
(
‹ight
, 
fõld
Ë
RB_BLACK
;\

540 
	`RB_COLOR
(
tmp
, 
fõld
Ë
RB_RED
; \

541 
	`RB_ROTATE_LEFT
(
hód
, 
tmp
, 
‹ight
, 
fõld
);\

542 
tmp
 = 
	`RB_LEFT
(
∑ª¡
, 
fõld
); \

544 
	`RB_COLOR
(
tmp
, 
fõld
ËRB_COLOR(
∑ª¡
, field);\

545 
	`RB_COLOR
(
∑ª¡
, 
fõld
Ë
RB_BLACK
; \

546 i‡(
	`RB_LEFT
(
tmp
, 
fõld
)) \

547 
	`RB_COLOR
(
	`RB_LEFT
(
tmp
, 
fõld
), fõldË
RB_BLACK
;\

548 
	`RB_ROTATE_RIGHT
(
hód
, 
∑ª¡
, 
tmp
, 
fõld
);\

549 
ñm
 = 
	`RB_ROOT
(
hód
); \

554 i‡(
ñm
) \

555 
	`RB_COLOR
(
ñm
, 
fõld
Ë
RB_BLACK
; \

556 }

	)

558 
	#RB_GENERATE_REMOVE
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

559 
©å
 
ty≥
 * \

560 
«me
##
	`_RB_REMOVE
(«mê*
hód
, 
ty≥
 *
ñm
) \

562 
ty≥
 *
chûd
, *
∑ª¡
, *
ﬁd
 = 
ñm
; \

563 
cﬁ‹
; \

564 i‡(
	`RB_LEFT
(
ñm
, 
fõld
Ë=
NULL
) \

565 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

566 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
Ë=
NULL
) \

567 
chûd
 = 
	`RB_LEFT
(
ñm
, 
fõld
); \

569 
ty≥
 *
À·
; \

570 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

571 (
À·
 = 
	`RB_LEFT
(
ñm
, 
fõld
)Ë!
NULL
) \

572 
ñm
 = 
À·
; \

573 
chûd
 = 
	`RB_RIGHT
(
ñm
, 
fõld
); \

574 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

575 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

576 i‡(
chûd
) \

577 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

578 i‡(
∑ª¡
) { \

579 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

580 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

582 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

583 
	`RB_AUGMENT
(
∑ª¡
); \

585 
	`RB_ROOT
(
hód
Ë
chûd
; \

586 i‡(
	`RB_PARENT
(
ñm
, 
fõld
Ë=
ﬁd
) \

587 
∑ª¡
 = 
ñm
; \

588 (
ñm
)->
fõld
 = (
ﬁd
)->field; \

589 i‡(
	`RB_PARENT
(
ﬁd
, 
fõld
)) { \

590 i‡(
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), field) == old)\

591 
	`RB_LEFT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

593 
	`RB_RIGHT
(
	`RB_PARENT
(
ﬁd
, 
fõld
), fõldË
ñm
;\

594 
	`RB_AUGMENT
(
	`RB_PARENT
(
ﬁd
, 
fõld
)); \

596 
	`RB_ROOT
(
hód
Ë
ñm
; \

597 
	`RB_PARENT
(
	`RB_LEFT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

598 i‡(
	`RB_RIGHT
(
ﬁd
, 
fõld
)) \

599 
	`RB_PARENT
(
	`RB_RIGHT
(
ﬁd
, 
fõld
), fõldË
ñm
; \

600 i‡(
∑ª¡
) { \

601 
À·
 = 
∑ª¡
; \

603 
	`RB_AUGMENT
(
À·
); \

604 } (
À·
 = 
	`RB_PARENT
÷e·, 
fõld
)Ë!
NULL
); \

606 
cﬁ‹
; \

608 
∑ª¡
 = 
	`RB_PARENT
(
ñm
, 
fõld
); \

609 
cﬁ‹
 = 
	`RB_COLOR
(
ñm
, 
fõld
); \

610 i‡(
chûd
) \

611 
	`RB_PARENT
(
chûd
, 
fõld
Ë
∑ª¡
; \

612 i‡(
∑ª¡
) { \

613 i‡(
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë=
ñm
) \

614 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
chûd
; \

616 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
chûd
; \

617 
	`RB_AUGMENT
(
∑ª¡
); \

619 
	`RB_ROOT
(
hód
Ë
chûd
; \

620 
cﬁ‹
: \

621 i‡(
cﬁ‹
 =
RB_BLACK
) \

622 
«me
##
	`_RB_REMOVE_COLOR
(
hód
, 
∑ª¡
, 
chûd
); \

623  (
ﬁd
); \

625 

	)

626 
	#RB_GENERATE_INSERT
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

628 
©å
 
ty≥
 * \

629 
«me
##
	`_RB_INSERT
(«mê*
hód
, 
ty≥
 *
ñm
) \

631 
ty≥
 *
tmp
; \

632 
ty≥
 *
∑ª¡
 = 
NULL
; \

633 
comp
 = 0; \

634 
tmp
 = 
	`RB_ROOT
(
hód
); \

635 
tmp
) { \

636 
∑ª¡
 = 
tmp
; \

637 
comp
 = (
cmp
)(
ñm
, 
∑ª¡
); \

638 i‡(
comp
 < 0) \

639 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

640 i‡(
comp
 > 0) \

641 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

643  (
tmp
); \

645 
	`RB_SET
(
ñm
, 
∑ª¡
, 
fõld
); \

646 i‡(
∑ª¡
 !
NULL
) { \

647 i‡(
comp
 < 0) \

648 
	`RB_LEFT
(
∑ª¡
, 
fõld
Ë
ñm
; \

650 
	`RB_RIGHT
(
∑ª¡
, 
fõld
Ë
ñm
; \

651 
	`RB_AUGMENT
(
∑ª¡
); \

653 
	`RB_ROOT
(
hód
Ë
ñm
; \

654 
«me
##
	`_RB_INSERT_COLOR
(
hód
, 
ñm
); \

655  (
NULL
); \

656 }

	)

658 
	#RB_GENERATE_FIND
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

660 
©å
 
ty≥
 * \

661 
«me
##
	`_RB_FIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

663 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

664 
comp
; \

665 
tmp
) { \

666 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

667 i‡(
comp
 < 0) \

668 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

669 i‡(
comp
 > 0) \

670 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

672  (
tmp
); \

674  (
NULL
); \

675 }

	)

677 
	#RB_GENERATE_NFIND
(
«me
, 
ty≥
, 
fõld
, 
cmp
, 
©å
) \

679 
©å
 
ty≥
 * \

680 
«me
##
	`_RB_NFIND
(«mê*
hód
, 
ty≥
 *
ñm
) \

682 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

683 
ty≥
 *
ªs
 = 
NULL
; \

684 
comp
; \

685 
tmp
) { \

686 
comp
 = 
	`cmp
(
ñm
, 
tmp
); \

687 i‡(
comp
 < 0) { \

688 
ªs
 = 
tmp
; \

689 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

691 i‡(
comp
 > 0) \

692 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

694  (
tmp
); \

696  (
ªs
); \

697 }

	)

699 
	#RB_GENERATE_NEXT
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

701 
©å
 
ty≥
 * \

702 
«me
##
	`_RB_NEXT
(
ty≥
 *
ñm
) \

704 i‡(
	`RB_RIGHT
(
ñm
, 
fõld
)) { \

705 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

706 
	`RB_LEFT
(
ñm
, 
fõld
)) \

707 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

709 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

710 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

711 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

713 
	`RB_PARENT
(
ñm
, 
fõld
) && \

714 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

715 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

716 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

719  (
ñm
); \

720 }

	)

722 
	#RB_GENERATE_PREV
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

724 
©å
 
ty≥
 * \

725 
«me
##
	`_RB_PREV
(
ty≥
 *
ñm
) \

727 i‡(
	`RB_LEFT
(
ñm
, 
fõld
)) { \

728 
ñm
 = 
	`RB_LEFT
”lm, 
fõld
); \

729 
	`RB_RIGHT
(
ñm
, 
fõld
)) \

730 
ñm
 = 
	`RB_RIGHT
”lm, 
fõld
); \

732 i‡(
	`RB_PARENT
(
ñm
, 
fõld
) && \

733 (
ñm
 =
	`RB_RIGHT
(
	`RB_PARENT
”lm, 
fõld
), field))) \

734 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

736 
	`RB_PARENT
(
ñm
, 
fõld
) && \

737 (
ñm
 =
	`RB_LEFT
(
	`RB_PARENT
”lm, 
fõld
), field)))\

738 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

739 
ñm
 = 
	`RB_PARENT
”lm, 
fõld
); \

742  (
ñm
); \

743 }

	)

745 
	#RB_GENERATE_MINMAX
(
«me
, 
ty≥
, 
fõld
, 
©å
) \

746 
©å
 
ty≥
 * \

747 
«me
##
	`_RB_MINMAX
(«mê*
hód
, 
vÆ
) \

749 
ty≥
 *
tmp
 = 
	`RB_ROOT
(
hód
); \

750 
ty≥
 *
∑ª¡
 = 
NULL
; \

751 
tmp
) { \

752 
∑ª¡
 = 
tmp
; \

753 i‡(
vÆ
 < 0) \

754 
tmp
 = 
	`RB_LEFT
—mp, 
fõld
); \

756 
tmp
 = 
	`RB_RIGHT
—mp, 
fõld
); \

758  (
∑ª¡
); \

759 }

	)

761 
	#RB_NEGINF
 -1

	)

762 
	#RB_INF
 1

	)

764 
	#RB_INSERT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_INSERT
(x, y)

	)

765 
	#RB_REMOVE
(
«me
, 
x
, 
y
Ë«me##
	`_RB_REMOVE
(x, y)

	)

766 
	#RB_FIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_FIND
(x, y)

	)

767 
	#RB_NFIND
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NFIND
(x, y)

	)

768 
	#RB_NEXT
(
«me
, 
x
, 
y
Ë«me##
	`_RB_NEXT
(y)

	)

769 
	#RB_PREV
(
«me
, 
x
, 
y
Ë«me##
	`_RB_PREV
(y)

	)

770 
	#RB_MIN
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_NEGINF
)

	)

771 
	#RB_MAX
(
«me
, 
x
Ë«me##
	`_RB_MINMAX
(x, 
RB_INF
)

	)

773 
	#RB_FOREACH
(
x
, 
«me
, 
hód
) \

774 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

775 (
x
Ë!
NULL
; \

776 (
x
Ë
«me
##
	`_RB_NEXT
(x))

	)

778 
	#RB_FOREACH_FROM
(
x
, 
«me
, 
y
) \

779 (
x
Ë(
y
); \

780 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_NEXT
(x), (x) != NULL); \

781 (
x
Ë(
y
))

	)

783 
	#RB_FOREACH_SAFE
(
x
, 
«me
, 
hód
, 
y
) \

784 (
x
Ë
	`RB_MIN
(
«me
, 
hód
); \

785 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_NEXT
(x), (x) != NULL); \

786 (
x
Ë(
y
))

	)

788 
	#RB_FOREACH_REVERSE
(
x
, 
«me
, 
hód
) \

789 (
x
Ë
	`RB_MAX
(
«me
, 
hód
); \

790 (
x
Ë!
NULL
; \

791 (
x
Ë
«me
##
	`_RB_PREV
(x))

	)

793 
	#RB_FOREACH_REVERSE_FROM
(
x
, 
«me
, 
y
) \

794 (
x
Ë(
y
); \

795 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_PREV
(x), (x) != NULL); \

796 (
x
Ë(
y
))

	)

798 
	#RB_FOREACH_REVERSE_SAFE
(
x
, 
«me
, 
hód
, 
y
) \

799 (
x
Ë
	`RB_MAX
(
«me
, 
hód
); \

800 ((
x
Ë!
NULL
Ë&& ((
y
Ë
«me
##
	`_RB_PREV
(x), (x) != NULL); \

801 (
x
Ë(
y
))

	)

	@/usr/include/sys/tslog.h

29 #i‚de‡
_TSLOG_H_


30 
	#_TSLOG_H_


	)

32 #ifde‡
TSLOG


33 
	~<sys/_ty≥s.h
>

34 
	~<sys/p˝u.h
>

37 
	#TS_ENTER
 0

	)

38 
	#TS_EXIT
 1

	)

39 
	#TS_THREAD
 2

	)

40 
	#TS_EVENT
 3

	)

42 
	#TSENTER
(Ë
	`TSRAW
(
cuπhªad
, 
TS_ENTER
, 
__func__
, 
NULL
)

	)

43 
	#TSENTER2
(
x
Ë
	`TSRAW
(
cuπhªad
, 
TS_ENTER
, 
__func__
, x)

	)

44 
	#TSEXIT
(Ë
	`TSRAW
(
cuπhªad
, 
TS_EXIT
, 
__func__
, 
NULL
)

	)

45 
	#TSEXIT2
(
x
Ë
	`TSRAW
(
cuπhªad
, 
TS_EXIT
, 
__func__
, x)

	)

46 
	#TSTHREAD
(
td
, 
x
Ë
	`TSRAW
—d, 
TS_THREAD
, x, 
NULL
)

	)

47 
	#TSEVENT
(
x
Ë
	`TSRAW
(
cuπhªad
, 
TS_EVENT
, x, 
NULL
)

	)

48 
	#TSEVENT2
(
x
, 
y
Ë
	`TSRAW
(
cuπhªad
, 
TS_EVENT
, x, y)

	)

49 
	#TSLINE
(Ë
	`TSEVENT2
(
__FILE__
, 
	`__XSTRING
(
__LINE__
))

	)

50 
	#TSWAIT
(
x
Ë
	`TSEVENT2
("WAIT", x);

	)

51 
	#TSUNWAIT
(
x
Ë
	`TSEVENT2
("UNWAIT", x);

	)

52 
	#TSHOLD
(
x
Ë
	`TSEVENT2
("HOLD", x);

	)

53 
	#TSRELEASE
(
x
Ë
	`TSEVENT2
("RELEASE", x);

	)

55 #ifde‡
TSLOG


56 
	#TSRAW
(
a
, 
b
, 
c
, 
d
Ë
	`t¶og
◊, b, c, d)

	)

57 
t¶og
(*, , const *, const *);

59 
	#TSRAW
(
a
, 
b
, 
c
, 
d
Ë

	)

	@/usr/include/sys/types.h

40 #i‚de‡
_SYS_TYPES_H_


41 
	#_SYS_TYPES_H_


	)

43 
	~<sys/cdefs.h
>

46 
	~<machöe/ídün.h
>

47 
	~<sys/_ty≥s.h
>

49 
	~<sys/_±hªadty≥s.h
>

51 #i‡
__BSD_VISIBLE


52 
	tu_ch¨
;

53 
	tu_sh‹t
;

54 
	tu_öt
;

55 
	tu_l⁄g
;

56 #i‚de‡
_KERNEL


57 
	tush‹t
;

58 
	tuöt
;

65 
	~<sys/_°döt.h
>

67 
__uöt8_t
 
	tu_öt8_t
;

68 
__uöt16_t
 
	tu_öt16_t
;

69 
__uöt32_t
 
	tu_öt32_t
;

70 
__uöt64_t
 
	tu_öt64_t
;

72 
__uöt64_t
 
	tu_quad_t
;

73 
__öt64_t
 
	tquad_t
;

74 
quad_t
 * 
	tqaddr_t
;

76 * 
	tˇddr_t
;

77 c⁄° * 
	tc_ˇddr_t
;

79 #i‚de‡
_BLKSIZE_T_DECLARED


80 
__blksize_t
 
	tblksize_t
;

81 
	#_BLKSIZE_T_DECLARED


	)

84 
__˝uwhich_t
 
	t˝uwhich_t
;

85 
__˝uÀvñ_t
 
	t˝uÀvñ_t
;

86 
__˝u£tid_t
 
	t˝u£tid_t
;

88 #i‚de‡
_BLKCNT_T_DECLARED


89 
__blk˙t_t
 
	tblk˙t_t
;

90 
	#_BLKCNT_T_DECLARED


	)

93 #i‚de‡
_CLOCK_T_DECLARED


94 
__˛ock_t
 
	t˛ock_t
;

95 
	#_CLOCK_T_DECLARED


	)

98 #i‚de‡
_CLOCKID_T_DECLARED


99 
__˛ockid_t
 
	t˛ockid_t
;

100 
	#_CLOCKID_T_DECLARED


	)

103 
__¸ôiˇl_t
 
	t¸ôiˇl_t
;

104 
__öt64_t
 
	tdaddr_t
;

106 #i‚de‡
_DEV_T_DECLARED


107 
__dev_t
 
	tdev_t
;

108 
	#_DEV_T_DECLARED


	)

111 #i‚de‡
_FFLAGS_T_DECLARED


112 
__fÊags_t
 
	tfÊags_t
;

113 
	#_FFLAGS_T_DECLARED


	)

116 
__fix±_t
 
	tfix±_t
;

118 #i‚de‡
_FSBLKCNT_T_DECLARED


119 
__fsblk˙t_t
 
	tfsblk˙t_t
;

120 
__fsfû˙t_t
 
	tfsfû˙t_t
;

121 
	#_FSBLKCNT_T_DECLARED


	)

124 #i‚de‡
_GID_T_DECLARED


125 
__gid_t
 
	tgid_t
;

126 
	#_GID_T_DECLARED


	)

129 #i‚de‡
_IN_ADDR_T_DECLARED


130 
__uöt32_t
 
	tö_addr_t
;

131 
	#_IN_ADDR_T_DECLARED


	)

134 #i‚de‡
_IN_PORT_T_DECLARED


135 
__uöt16_t
 
	tö_p‹t_t
;

136 
	#_IN_PORT_T_DECLARED


	)

139 #i‚de‡
_ID_T_DECLARED


140 
__id_t
 
	tid_t
;

141 
	#_ID_T_DECLARED


	)

144 #i‚de‡
_INO_T_DECLARED


145 
__öo_t
 
	töo_t
;

146 
	#_INO_T_DECLARED


	)

149 #i‚de‡
_KEY_T_DECLARED


150 
__key_t
 
	tkey_t
;

151 
	#_KEY_T_DECLARED


	)

154 #i‚de‡
_LWPID_T_DECLARED


155 
__lwpid_t
 
	tlwpid_t
;

156 
	#_LWPID_T_DECLARED


	)

159 #i‚de‡
_MODE_T_DECLARED


160 
__mode_t
 
	tmode_t
;

161 
	#_MODE_T_DECLARED


	)

164 #i‚de‡
_ACCMODE_T_DECLARED


165 
__accmode_t
 
	taccmode_t
;

166 
	#_ACCMODE_T_DECLARED


	)

169 #i‚de‡
_NLINK_T_DECLARED


170 
__∆ök_t
 
	t∆ök_t
;

171 
	#_NLINK_T_DECLARED


	)

174 #i‚de‡
_OFF_T_DECLARED


175 
__off_t
 
	toff_t
;

176 
	#_OFF_T_DECLARED


	)

179 #i‚de‡
_OFF64_T_DECLARED


180 
__off64_t
 
	toff64_t
;

181 
	#_OFF64_T_DECLARED


	)

184 #i‚de‡
_PID_T_DECLARED


185 
__pid_t
 
	tpid_t
;

186 
	#_PID_T_DECLARED


	)

189 
__ªgi°î_t
 
	tªgi°î_t
;

191 #i‚de‡
_RLIM_T_DECLARED


192 
__æim_t
 
	tæim_t
;

193 
	#_RLIM_T_DECLARED


	)

196 
__öt64_t
 
	tsbötime_t
;

198 
__£gsz_t
 
	t£gsz_t
;

200 #i‚de‡
_SIZE_T_DECLARED


201 
__size_t
 
	tsize_t
;

202 
	#_SIZE_T_DECLARED


	)

205 #i‚de‡
_SSIZE_T_DECLARED


206 
__ssize_t
 
	tssize_t
;

207 
	#_SSIZE_T_DECLARED


	)

210 #i‚de‡
_SUSECONDS_T_DECLARED


211 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

212 
	#_SUSECONDS_T_DECLARED


	)

215 #i‚de‡
_TIME_T_DECLARED


216 
__time_t
 
	ttime_t
;

217 
	#_TIME_T_DECLARED


	)

220 #i‚de‡
_TIMER_T_DECLARED


221 
__timî_t
 
	ttimî_t
;

222 
	#_TIMER_T_DECLARED


	)

225 #i‚de‡
_MQD_T_DECLARED


226 
__mqd_t
 
	tmqd_t
;

227 
	#_MQD_T_DECLARED


	)

230 
__u_ªgi°î_t
 
	tu_ªgi°î_t
;

232 #i‚de‡
_UID_T_DECLARED


233 
__uid_t
 
	tuid_t
;

234 
	#_UID_T_DECLARED


	)

237 #i‚de‡
_USECONDS_T_DECLARED


238 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

239 
	#_USECONDS_T_DECLARED


	)

242 #i‚de‡
_CAP_IOCTL_T_DECLARED


243 
	#_CAP_IOCTL_T_DECLARED


	)

244 
	tˇp_io˘l_t
;

247 #i‚de‡
_CAP_RIGHTS_T_DECLARED


248 
	#_CAP_RIGHTS_T_DECLARED


	)

249 
	gˇp_rights
;

251 
ˇp_rights
 
	tˇp_rights_t
;

260 
__uöt64_t
 
	tkvaddr_t
;

261 
__uöt64_t
 
	tksize_t
;

263 
__vm_off£t_t
 
	tvm_off£t_t
;

264 
__öt64_t
 
	tvm_ooff£t_t
;

265 
__vm_∑ddr_t
 
	tvm_∑ddr_t
;

266 
__uöt64_t
 
	tvm_pödex_t
;

267 
__vm_size_t
 
	tvm_size_t
;

269 
__rm™_ªs_t
 
	trm™_ªs_t
;

271 #ifde‡
_KERNEL


272 
	tboﬁón_t
;

273 
devi˚
 *
	tdevi˚_t
;

274 
__ötÂå_t
 
	tötÂå_t
;

286 
__uöt32_t
 
	töåmask_t
;

288 
__uötÂå_t
 
	tuötÂå_t
;

289 
__uöt64_t
 
	tuoff_t
;

290 
	tvm_mem©å_t
;

291 
vm_∑ge
 *
	tvm_∑ge_t
;

293 #i‡!
deföed
(
__boﬁ_åue_Ál£_¨e_deföed
Ë&& !deföed(
__˝lu•lus
)

294 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

295 
	#Ál£
 0

	)

296 
	#åue
 1

	)

297 #i‡
__STDC_VERSION__
 < 199901L && 
__GNUC__
 < 3 && !
deföed
(
__INTEL_COMPILER
)

298 
	t_Boﬁ
;

300 
_Boﬁ
 
	tboﬁ
;

303 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

312 #ifde‡
__POPCNT__


313 
	#__bôcou¡64
(
x
Ë
	`__buûtö_p›cou¡Œ
((
__uöt64_t
)(x))

	)

314 
	#__bôcou¡32
(
x
Ë
	`__buûtö_p›cou¡
((
__uöt32_t
)(x))

	)

315 
	#__bôcou¡16
(
x
Ë
	`__buûtö_p›cou¡
((
__uöt16_t
)(x))

	)

316 
	#__bôcou¡l
(
x
Ë
	`__buûtö_p›cou¡l
(()(x))

	)

317 
	#__bôcou¡
(
x
Ë
	`__buûtö_p›cou¡
(()(x))

	)

323 
__ölöe
 
__uöt16_t


324 
	$__bôcou¡16
(
__uöt16_t
 
_x
)

327 
_x
 = (_x & 0x5555) + ((_x & 0xaaaa) >> 1);

328 
_x
 = (_x & 0x3333) + ((_x & 0xcccc) >> 2);

329 
_x
 = (_x + (_x >> 4)) & 0x0f0f;

330 
_x
 = (_x + (_x >> 8)) & 0x00ff;

331  (
_x
);

332 
	}
}

334 
__ölöe
 
__uöt32_t


335 
	$__bôcou¡32
(
__uöt32_t
 
_x
)

338 
_x
 = (_x & 0x55555555) + ((_x & 0xaaaaaaaa) >> 1);

339 
_x
 = (_x & 0x33333333) + ((_x & 0xcccccccc) >> 2);

340 
_x
 = (_x + (_x >> 4)) & 0x0f0f0f0f;

341 
_x
 = (_x + (_x >> 8));

342 
_x
 = (_x + (_x >> 16)) & 0x000000ff;

343  (
_x
);

344 
	}
}

346 #ifde‡
__LP64__


347 
__ölöe
 
__uöt64_t


348 
	$__bôcou¡64
(
__uöt64_t
 
_x
)

351 
_x
 = (_x & 0x5555555555555555) + ((_x & 0xaaaaaaaaaaaaaaaa) >> 1);

352 
_x
 = (_x & 0x3333333333333333) + ((_x & 0xcccccccccccccccc) >> 2);

353 
_x
 = (_x + (_x >> 4)) & 0x0f0f0f0f0f0f0f0f;

354 
_x
 = (_x + (_x >> 8));

355 
_x
 = (_x + (_x >> 16));

356 
_x
 = (_x + (_x >> 32)) & 0x000000ff;

357  (
_x
);

358 
	}
}

360 
	#__bôcou¡l
(
x
Ë
	`__bôcou¡64
(()(x))

	)

362 
__ölöe
 
__uöt64_t


363 
	$__bôcou¡64
(
__uöt64_t
 
_x
)

366  (
	`__bôcou¡32
(
_x
 >> 32) + __bitcount32(_x));

367 
	}
}

369 
	#__bôcou¡l
(
x
Ë
	`__bôcou¡32
(()(x))

	)

371 
	#__bôcou¡
(
x
Ë
	`__bôcou¡32
(()(x))

	)

374 #i‡
__BSD_VISIBLE


376 
	~<sys/£À˘.h
>

389 
	#maj‹
(
d
Ë
	`__maj‹
(d)

	)

390 
__ölöe
 

391 
	$__maj‹
(
dev_t
 
_d
)

393  (((
_d
 >> 32) & 0xffffff00) | ((_d >> 8) & 0xff));

394 
	}
}

395 
	#mö‹
(
d
Ë
	`__mö‹
(d)

	)

396 
__ölöe
 

397 
	$__mö‹
(
dev_t
 
_d
)

399  (((
_d
 >> 24) & 0xff00) | (_d & 0xffff00ff));

400 
	}
}

401 
	#makedev
(
M
, 
m
Ë
	`__makedev
((M), (m))

	)

402 
__ölöe
 
dev_t


403 
	$__makedev
(
_M
, 
_m
)

405  (((
dev_t
)(
_M
 & 0xffffff00) << 32) | ((_M & 0xff) << 8) |

406 ((
dev_t
)(
_m
 & 0xff00) << 24) | (_m & 0xffff00ff));

407 
	}
}

414 #i‚de‡
_KERNEL


415 
	g__BEGIN_DECLS


416 #i‚de‡
_FTRUNCATE_DECLARED


417 
	#_FTRUNCATE_DECLARED


	)

418 
·runˇã
(, 
off_t
);

420 #i‚de‡
_LSEEK_DECLARED


421 
	#_LSEEK_DECLARED


	)

422 
off_t
 
l£ek
(, off_t, );

424 #i‚de‡
_MMAP_DECLARED


425 
	#_MMAP_DECLARED


	)

426 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

428 #i‚de‡
_TRUNCATE_DECLARED


429 
	#_TRUNCATE_DECLARED


	)

430 
åunˇã
(c⁄° *, 
off_t
);

432 
	g__END_DECLS


	@/usr/include/sys/uio.h

35 #i‚de‡
_SYS_UIO_H_


36 
	#_SYS_UIO_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/_ty≥s.h
>

40 
	~<sys/_iovec.h
>

41 
	~<sys/_uio.h
>

43 #i‚de‡
_SSIZE_T_DECLARED


44 
__ssize_t
 
	tssize_t
;

45 
	#_SSIZE_T_DECLARED


	)

48 #i‚de‡
_OFF_T_DECLARED


49 
__off_t
 
	toff_t
;

50 
	#_OFF_T_DECLARED


	)

53 #ifde‡
_KERNEL


55 
	suio
 {

56 
iovec
 *
	muio_iov
;

57 
	muio_iov˙t
;

58 
off_t
 
	muio_off£t
;

59 
ssize_t
 
	muio_ªsid
;

60 
uio_£g
 
	muio_£gÊg
;

61 
uio_rw
 
	muio_rw
;

62 
thªad
 *
	muio_td
;

76 
	#UIO_MAXIOV
 1024

	)

78 
	gvm_obje˘
;

79 
	gvm_∑ge
;

80 
	gbus_dma_£gmít
;

82 
uio
 *
˛⁄euio
(uiÿ*
ui›
);

83 
c›yö‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

84 
size_t
 
Àn
, 
£g
);

85 
c›yöiov
(c⁄° 
iovec
 *
iovp
, 
u_öt
 
iov˙t
, iove¯**
iov
,

86 
îr‹
);

87 
c›yö°r‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

88 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
c›õd
, 
£g
);

89 
c›yöuio
(c⁄° 
iovec
 *
iovp
, 
u_öt
 
iov˙t
, 
uio
 **
ui›
);

90 
c›yout_m≠
(
thªad
 *
td
, 
vm_off£t_t
 *
addr
, 
size_t
 
sz
);

91 
c›yout_unm≠
(
thªad
 *
td
, 
vm_off£t_t
 
addr
, 
size_t
 
sz
);

92 
physc›yö
(*
§c
, 
vm_∑ddr_t
 
d°
, 
size_t
 
Àn
);

93 
physc›yout
(
vm_∑ddr_t
 
§c
, *
d°
, 
size_t
 
Àn
);

94 
physc›yö_vli°
(
bus_dma_£gmít
 *
§c
, 
off_t
 
off£t
,

95 
vm_∑ddr_t
 
d°
, 
size_t
 
Àn
);

96 
physc›yout_vli°
(
vm_∑ddr_t
 
§c
, 
bus_dma_£gmít
 *
d°
,

97 
off_t
 
off£t
, 
size_t
 
Àn
);

98 
uiomove
(*
˝
, 
n
, 
uio
 *uio);

99 
uiomove_‰ombuf
(*
buf
, 
buÊí
, 
uio
 *uio);

100 
uiomove_‰omphys
(
vm_∑ge
 *
ma
[], 
vm_off£t_t
 
off£t
, 
n
,

101 
uio
 *uio);

102 
uiomove_noÁu…
(*
˝
, 
n
, 
uio
 *uio);

103 
uiomove_obje˘
(
vm_obje˘
 *
obj
, 
off_t
 
obj_size
, 
uio
 *uio);

107 
__BEGIN_DECLS


108 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

109 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

110 #i‡
__BSD_VISIBLE


111 
ssize_t
 
¥ódv
(, c⁄° 
iovec
 *, , 
off_t
);

112 
ssize_t
 
pwrôev
(, c⁄° 
iovec
 *, , 
off_t
);

114 
	g__END_DECLS


	@/usr/include/sys/vmmeter.h

35 #i‚de‡
_SYS_VMMETER_H_


36 
	#_SYS_VMMETER_H_


	)

42 
	#MAXSLP
 20

	)

44 
	svmtŸÆ
 {

45 
uöt64_t
 
	mt_vm
;

46 
uöt64_t
 
	mt_avm
;

47 
uöt64_t
 
	mt_rm
;

48 
uöt64_t
 
	mt_¨m
;

49 
uöt64_t
 
	mt_vmshr
;

50 
uöt64_t
 
	mt_avmshr
;

51 
uöt64_t
 
	mt_rmshr
;

52 
uöt64_t
 
	mt_¨mshr
;

53 
uöt64_t
 
	mt_‰ì
;

54 
öt16_t
 
	mt_rq
;

55 
öt16_t
 
	mt_dw
;

57 
öt16_t
 
	mt_pw
;

58 
öt16_t
 
	mt_¶
;

59 
öt16_t
 
	mt_sw
;

61 
uöt16_t
 
	mt_∑d
[3];

64 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_VMMETER
)

65 
	~<sys/cou¡î.h
>

67 #ifde‡
_KERNEL


68 
	#VMMETER_ALIGNED
 
	`__Æig√d
(
CACHE_LINE_SIZE
)

	)

70 
	#VMMETER_ALIGNED


	)

79 
	svmmëî
 {

83 
cou¡î_u64_t
 
	mv_swtch
;

84 
cou¡î_u64_t
 
	mv_å≠
;

85 
cou¡î_u64_t
 
	mv_sysˇŒ
;

86 
cou¡î_u64_t
 
	mv_öå
;

87 
cou¡î_u64_t
 
	mv_so·
;

91 
cou¡î_u64_t
 
	mv_vm_Áu…s
;

92 
cou¡î_u64_t
 
	mv_io_Áu…s
;

93 
cou¡î_u64_t
 
	mv_cow_Áu…s
;

94 
cou¡î_u64_t
 
	mv_cow_›tim
;

95 
cou¡î_u64_t
 
	mv_zfod
;

96 
cou¡î_u64_t
 
	mv_ozfod
;

97 
cou¡î_u64_t
 
	mv_sw≠ö
;

98 
cou¡î_u64_t
 
	mv_sw≠out
;

99 
cou¡î_u64_t
 
	mv_sw≠pgsö
;

100 
cou¡î_u64_t
 
	mv_sw≠pgsout
;

101 
cou¡î_u64_t
 
	mv_vnodeö
;

102 
cou¡î_u64_t
 
	mv_vnodeout
;

103 
cou¡î_u64_t
 
	mv_vnodïgsö
;

104 
cou¡î_u64_t
 
	mv_vnodïgsout
;

105 
cou¡î_u64_t
 
	mv_öå™s
;

106 
cou¡î_u64_t
 
	mv_ªa˘iv©ed
;

107 
cou¡î_u64_t
 
	mv_pdwakeups
;

108 
cou¡î_u64_t
 
	mv_pd∑ges
;

109 
cou¡î_u64_t
 
	mv_pdsh‹tÁŒs
;

111 
cou¡î_u64_t
 
	mv_d‰ì
;

112 
cou¡î_u64_t
 
	mv_p‰ì
;

113 
cou¡î_u64_t
 
	mv_t‰ì
;

117 
cou¡î_u64_t
 
	mv_f‹ks
;

118 
cou¡î_u64_t
 
	mv_vf‹ks
;

119 
cou¡î_u64_t
 
	mv_rf‹ks
;

120 
cou¡î_u64_t
 
	mv_kthªads
;

121 
cou¡î_u64_t
 
	mv_f‹k∑ges
;

122 
cou¡î_u64_t
 
	mv_vf‹k∑ges
;

123 
cou¡î_u64_t
 
	mv_rf‹k∑ges
;

124 
cou¡î_u64_t
 
	mv_kthªad∑ges
;

125 
cou¡î_u64_t
 
	mv_wúe_cou¡
;

126 
	#VM_METER_NCOUNTERS
 \

127 (
	`off£tof
(
vmmëî
, 
v_∑ge_size
Ë/ (
cou¡î_u64_t
))

	)

131 
u_öt
 
	mv_∑ge_size
;

132 
u_öt
 
	mv_∑ge_cou¡
;

133 
u_öt
 
	mv_‰ì_ª£rved
;

134 
u_öt
 
	mv_‰ì_èrgë
;

135 
u_öt
 
	mv_‰ì_mö
;

136 
u_öt
 
	mv_öa˘ive_èrgë
;

137 
u_öt
 
	mv_∑geout_‰ì_mö
;

138 
u_öt
 
	mv_öãºu±_‰ì_mö
;

139 
u_öt
 
	mv_‰ì_£vîe
;

143 #ifde‡
_KERNEL


145 
	~<sys/domaö£t.h
>

147 
vmmëî
 
vm_˙t
;

148 
domaö£t_t
 
Æl_domaös
;

149 
domaö£t_t
 
vm_mö_domaös
;

150 
domaö£t_t
 
vm_£vîe_domaös
;

152 
	#VM_CNT_ADD
(
v¨
, 
x
Ë
	`cou¡î_u64_add
(
vm_˙t
.v¨, x)

	)

153 
	#VM_CNT_INC
(
v¨
Ë
	`VM_CNT_ADD
(v¨, 1)

	)

154 
	#VM_CNT_FETCH
(
v¨
Ë
	`cou¡î_u64_„tch
(
vm_˙t
.v¨)

	)

156 
ölöe
 

157 
	$vm_wúe_add
(
˙t
)

160 
	`VM_CNT_ADD
(
v_wúe_cou¡
, 
˙t
);

161 
	}
}

163 
ölöe
 

164 
	$vm_wúe_sub
(
˙t
)

167 
	`VM_CNT_ADD
(
v_wúe_cou¡
, -
˙t
);

168 
	}
}

170 
u_öt
 
vm_‰ì_cou¡
();

171 
ölöe
 
u_öt


172 
	$vm_wúe_cou¡
()

175  (
	`VM_CNT_FETCH
(
v_wúe_cou¡
));

176 
	}
}

184 
ölöe
 

185 
	$vm_∑ge_cou¡_£vîe
()

188  (!
	`DOMAINSET_EMPTY
(&
vm_£vîe_domaös
));

189 
	}
}

191 
ölöe
 

192 
	$vm_∑ge_cou¡_£vîe_domaö
(
domaö
)

195  (
	`DOMAINSET_ISSET
(
domaö
, &
vm_£vîe_domaös
));

196 
	}
}

198 
ölöe
 

199 
	$vm_∑ge_cou¡_£vîe_£t
(c⁄° 
domaö£t_t
 *
mask
)

202  (
	`DOMAINSET_SUBSET
(&
vm_£vîe_domaös
, 
mask
));

203 
	}
}

214 
ölöe
 

215 
	$vm_∑ge_cou¡_mö
()

218  (!
	`DOMAINSET_EMPTY
(&
vm_mö_domaös
));

219 
	}
}

221 
ölöe
 

222 
	$vm_∑ge_cou¡_mö_domaö
(
domaö
)

225  (
	`DOMAINSET_ISSET
(
domaö
, &
vm_mö_domaös
));

226 
	}
}

228 
ölöe
 

229 
	$vm_∑ge_cou¡_mö_£t
(c⁄° 
domaö£t_t
 *
mask
)

232  (
	`DOMAINSET_SUBSET
(&
vm_mö_domaös
, 
mask
));

233 
	}
}

	@/usr/include/sys/vnode.h

35 #i‚de‡
_SYS_VNODE_H_


36 
	#_SYS_VNODE_H_


	)

38 
	~<sys/bufobj.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/lock.h
>

41 
	~<sys/lockmgr.h
>

42 
	~<sys/muãx.h
>

43 
	~<sys/øngñock.h
>

44 
	~<sys/£löfo.h
>

45 
	~<sys/uio.h
>

46 
	~<sys/a˛.h
>

47 
	~<sys/kå.h
>

58 
	evty≥
 { 
	mVNON
, 
	mVREG
, 
	mVDIR
, 
	mVBLK
, 
	mVCHR
, 
	mVLNK
, 
	mVSOCK
, 
	mVFIFO
, 
	mVBAD
,

59 
	mVMARKER
 };

66 
	g«meˇche
;

68 
	svpﬁlöfo
 {

69 
mtx
 
	mvpi_lock
;

70 
£löfo
 
	mvpi_£löfo
;

71 
	mvpi_evíts
;

72 
	mvpi_ªvíts
;

98 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KVM_VNODE
)

100 
	svnode
 {

105 c⁄° *
	mv_èg
;

106 
v›_ve˘‹
 *
	mv_›
;

107 *
	mv_d©a
;

112 
mou¡
 *
	mv_mou¡
;

113 
TAILQ_ENTRY
(
vnode
Ë
	mv_nm¡vnodes
;

119 
mou¡
 *
	mv_mou¡edhîe
;

120 
u≈cb
 *
	mv_u≈cb
;

121 
cdev
 *
	mv_rdev
;

122 
fifoöfo
 *
	mv_fifoöfo
;

129 
LIST_ENTRY
(
vnode
Ë
	mv_hashli°
;

134 
LIST_HEAD
(, 
«meˇche
Ë
	mv_ˇche_§c
;

135 
TAILQ_HEAD
(, 
«meˇche
Ë
	mv_ˇche_d°
;

136 
«meˇche
 *
	mv_ˇche_dd
;

141 
lock
 
	mv_lock
;

142 
mtx
 
	mv_öãæock
;

143 
lock
 *
	mv_v∆ock
;

148 
TAILQ_ENTRY
(
vnode
Ë
	mv_a˘‰ìli°
;

149 
bufobj
 
	mv_bufobj
;

154 
vpﬁlöfo
 *
	mv_pﬁlöfo
;

155 
œbñ
 *
	mv_œbñ
;

156 
lockf
 *
	mv_lockf
;

157 
øngñock
 
	mv_æ
;

162 
daddr_t
 
	mv_c°¨t
;

163 
daddr_t
 
	mv_œ°a
;

164 
daddr_t
 
	mv_œ°w
;

165 
	mv_˛í
;

167 
u_öt
 
	mv_hﬁd˙t
;

168 
u_öt
 
	mv_u£cou¡
;

169 
u_öt
 
	mv_iÊag
;

170 
u_öt
 
	mv_vÊag
;

171 
u_öt
 
	mv_mÊag
;

172 
	mv_wrôecou¡
;

173 
u_öt
 
	mv_hash
;

174 
vty≥
 
	mv_ty≥
;

179 
	#bo2vnode
(
bo
Ë
	`__c⁄èöîof
((bo), 
vnode
, 
v_bufobj
)

	)

182 
	#v_obje˘
 
v_bufobj
.
bo_obje˘


	)

187 
	sxvnode
 {

188 
size_t
 
	mxv_size
;

189 *
	mxv_vnode
;

190 
u_l⁄g
 
	mxv_Êag
;

191 
	mxv_u£cou¡
;

192 
	mxv_wrôecou¡
;

193 
	mxv_hﬁd˙t
;

194 
u_l⁄g
 
	mxv_id
;

195 *
	mxv_mou¡
;

196 
	mxv_numouçut
;

197 
vty≥
 
	mxv_ty≥
;

199 *
	mxvu_sockë
;

200 *
	mxvu_fifo
;

201 
dev_t
 
	mxvu_rdev
;

203 
dev_t
 
	mxvu_dev
;

204 
öo_t
 
	mxvu_öo
;

205 } 
	mxv_uns
;

206 } 
	mxv_un
;

208 
	#xv_sockë
 
xv_un
.
xvu_sockë


	)

209 
	#xv_fifo
 
xv_un
.
xvu_fifo


	)

210 
	#xv_rdev
 
xv_un
.
xvu_rdev


	)

211 
	#xv_dev
 
xv_un
.
xv_uns
.
xvu_dev


	)

212 
	#xv_öo
 
xv_un
.
xv_uns
.
xvu_öo


	)

215 
	#VN_KNLIST_EMPTY
(
vp
Ë((vp)->
v_pﬁlöfo
 =
NULL
 || \

216 
	`KNLIST_EMPTY
(&(
vp
)->
v_pﬁlöfo
->
vpi_£löfo
.
si_nŸe
))

	)

218 
	#VN_KNOTE
(
vp
, 
b
, 
a
) \

220 i‡(!
	`VN_KNLIST_EMPTY
(
vp
)) \

221 
	`KNOTE
(&
vp
->
v_pﬁlöfo
->
vpi_£löfo
.
si_nŸe
, (
b
), \

222 (
a
Ë| 
KNF_NOKQLOCK
); \

223 } 0)

	)

224 
	#VN_KNOTE_LOCKED
(
vp
, 
b
Ë
	`VN_KNOTE
(vp, b, 
KNF_LISTLOCKED
)

	)

225 
	#VN_KNOTE_UNLOCKED
(
vp
, 
b
Ë
	`VN_KNOTE
(vp, b, 0)

	)

235 
	#VI_MOUNT
 0x0020

	)

236 
	#VI_DOOMED
 0x0080

	)

237 
	#VI_FREE
 0x0100

	)

238 
	#VI_ACTIVE
 0x0200

	)

239 
	#VI_DOINGINACT
 0x0800

	)

240 
	#VI_OWEINACT
 0x1000

	)

242 
	#VV_ROOT
 0x0001

	)

243 
	#VV_ISTTY
 0x0002

	)

244 
	#VV_NOSYNC
 0x0004

	)

245 
	#VV_ETERNALDEV
 0x0008

	)

246 
	#VV_CACHEDLABEL
 0x0010

	)

247 
	#VV_TEXT
 0x0020

	)

248 
	#VV_COPYONWRITE
 0x0040

	)

249 
	#VV_SYSTEM
 0x0080

	)

250 
	#VV_PROCDEP
 0x0100

	)

251 
	#VV_NOKNOTE
 0x0200

	)

252 
	#VV_DELETED
 0x0400

	)

253 
	#VV_MD
 0x0800

	)

254 
	#VV_FORCEINSMQ
 0x1000

	)

255 
	#VV_READLINK
 0x2000

	)

257 
	#VMP_TMPMNTFREELIST
 0x0001

	)

263 
	sv©å
 {

264 
vty≥
 
	mva_ty≥
;

265 
u_sh‹t
 
	mva_mode
;

266 
u_sh‹t
 
	mva_∑ddög0
;

267 
uid_t
 
	mva_uid
;

268 
gid_t
 
	mva_gid
;

269 
∆ök_t
 
	mva_∆ök
;

270 
dev_t
 
	mva_fsid
;

271 
öo_t
 
	mva_fûeid
;

272 
u_quad_t
 
	mva_size
;

273 
	mva_blocksize
;

274 
time•ec
 
	mva_©ime
;

275 
time•ec
 
	mva_mtime
;

276 
time•ec
 
	mva_˘ime
;

277 
time•ec
 
	mva_búthtime
;

278 
u_l⁄g
 
	mva_gí
;

279 
u_l⁄g
 
	mva_Êags
;

280 
dev_t
 
	mva_rdev
;

281 
u_quad_t
 
	mva_byãs
;

282 
u_quad_t
 
	mva_fûîev
;

283 
u_öt
 
	mva_vaÊags
;

284 
	mva_•¨e
;

290 
	#VA_UTIMES_NULL
 0x01

	)

291 
	#VA_EXCLUSIVE
 0x02

	)

292 
	#VA_SYNC
 0x04

	)

299 
	#IO_UNIT
 0x0001

	)

300 
	#IO_APPEND
 0x0002

	)

301 
	#IO_NDELAY
 0x0004

	)

302 
	#IO_NODELOCKED
 0x0008

	)

303 
	#IO_ASYNC
 0x0010

	)

304 
	#IO_VMIO
 0x0020

	)

305 
	#IO_INVAL
 0x0040

	)

306 
	#IO_SYNC
 0x0080

	)

307 
	#IO_DIRECT
 0x0100

	)

308 
	#IO_NOREUSE
 0x0200

	)

309 
	#IO_EXT
 0x0400

	)

310 
	#IO_NORMAL
 0x0800

	)

311 
	#IO_NOMACCHECK
 0x1000

	)

312 
	#IO_BUFLOCKED
 0x2000

	)

313 
	#IO_RANGELOCKED
 0x4000

	)

315 
	#IO_SEQMAX
 0x7F

	)

316 
	#IO_SEQSHIFT
 16

	)

321 
	#VEXEC
 000000000100

	)

322 
	#VWRITE
 000000000200

	)

323 
	#VREAD
 000000000400

	)

324 
	#VADMIN
 000000010000

	)

325 
	#VAPPEND
 000000040000

	)

333 
	#VEXPLICIT_DENY
 000000100000

	)

334 
	#VREAD_NAMED_ATTRS
 000000200000

	)

335 
	#VWRITE_NAMED_ATTRS
 000000400000

	)

336 
	#VDELETE_CHILD
 000001000000

	)

337 
	#VREAD_ATTRIBUTES
 000002000000

	)

338 
	#VWRITE_ATTRIBUTES
 000004000000

	)

339 
	#VDELETE
 000010000000

	)

340 
	#VREAD_ACL
 000020000000

	)

341 
	#VWRITE_ACL
 000040000000

	)

342 
	#VWRITE_OWNER
 000100000000

	)

343 
	#VSYNCHRONIZE
 000200000000

	)

344 
	#VCREAT
 000400000000

	)

345 
	#VVERIFY
 001000000000

	)

350 
	#VADMIN_PERMS
 (
VADMIN
 | 
VWRITE_ATTRIBUTES
 | 
VWRITE_ACL
 | \

351 
VWRITE_OWNER
)

	)

356 
	#VSTAT_PERMS
 (
VREAD_ATTRIBUTES
 | 
VREAD_ACL
)

	)

361 
	#VMODIFY_PERMS
 (
VWRITE
 | 
VAPPEND
 | 
VADMIN_PERMS
 | 
VDELETE_CHILD
 | \

362 
VDELETE
)

	)

367 
	#VNOVAL
 (-1)

	)

372 
	#VLKTIMEOUT
 (
hz
 / 20 + 1)

	)

374 #ifde‡
_KERNEL


376 #ifde‡
MALLOC_DECLARE


377 
MALLOC_DECLARE
(
M_VNODE
);

380 
u_öt
 
ncsizeÁ˘‹
;

386 
vty≥
 
i·ovt_èb
[];

387 
vâoif_èb
[];

388 
	#IFTOVT
(
mode
Ë(
i·ovt_èb
[((modeË& 
S_IFMT
Ë>> 12])

	)

389 
	#VTTOIF
(
ödx
Ë(
vâoif_èb
[()(ödx)])

	)

390 
	#MAKEIMODE
(
ödx
, 
mode
Ë()(
	`VTTOIF
(ödxË| (mode))

	)

395 
	#SKIPSYSTEM
 0x0001

	)

396 
	#FORCECLOSE
 0x0002

	)

397 
	#WRITECLOSE
 0x0004

	)

398 
	#EARLYFLUSH
 0x0008

	)

399 
	#V_SAVE
 0x0001

	)

400 
	#V_ALT
 0x0002

	)

401 
	#V_NORMAL
 0x0004

	)

402 
	#V_CLEANONLY
 0x0008

	)

403 
	#V_VMIO
 0x0010

	)

404 
	#V_ALLOWCLEAN
 0x0020

	)

405 
	#REVOKEALL
 0x0001

	)

406 
	#V_WAIT
 0x0001

	)

407 
	#V_NOWAIT
 0x0002

	)

408 
	#V_XSLEEP
 0x0004

	)

409 
	#V_MNTREF
 0x0010

	)

411 
	#VR_START_WRITE
 0x0001

	)

412 
	#VR_NO_SUSPCLR
 0x0002

	)

414 
	#VS_SKIP_UNMOUNT
 0x0001

	)

417 
	#VREF
(
vp
Ë
	`vªf
(vp)

	)

419 #ifde‡
DIAGNOSTIC


420 
	#VATTR_NULL
(
v≠
Ë
	`v©å_nuŒ
(v≠)

	)

422 
	#VATTR_NULL
(
v≠
Ë(*(v≠Ë
va_nuŒ
Ë

	)

425 
	#NULLVP
 ((
vnode
 *)
NULL
)

	)

430 
vnode
 *
roŸvnode
;

431 
mou¡
 *
roŸdevmp
;

432 
desúedvnodes
;

433 
uma_z⁄e
 *
«mei_z⁄e
;

434 
v©å
 
va_nuŒ
;

436 
	#VI_LOCK
(
vp
Ë
	`mtx_lock
(&(vp)->
v_öãæock
)

	)

437 
	#VI_LOCK_FLAGS
(
vp
, 
Êags
Ë
	`mtx_lock_Êags
(&(vp)->
v_öãæock
, (Êags))

	)

438 
	#VI_TRYLOCK
(
vp
Ë
	`mtx_åylock
(&(vp)->
v_öãæock
)

	)

439 
	#VI_UNLOCK
(
vp
Ë
	`mtx_u∆ock
(&(vp)->
v_öãæock
)

	)

440 
	#VI_MTX
(
vp
Ë(&(vp)->
v_öãæock
)

	)

442 
	#VN_LOCK_AREC
(
vp
Ë
	`lockÆlowªcur£
((vp)->
v_v∆ock
)

	)

443 
	#VN_LOCK_ASHARE
(
vp
Ë
	`lockÆlowsh¨e
((vp)->
v_v∆ock
)

	)

444 
	#VN_LOCK_DSHARE
(
vp
Ë
	`lockdißbÀsh¨e
((vp)->
v_v∆ock
)

	)

455 
	#VDESC_MAX_VPS
 16

	)

457 
	#VDESC_VP0_WILLRELE
 0x0001

	)

458 
	#VDESC_VP1_WILLRELE
 0x0002

	)

459 
	#VDESC_VP2_WILLRELE
 0x0004

	)

460 
	#VDESC_VP3_WILLRELE
 0x0008

	)

461 
	#VDESC_NOMAP_VPP
 0x0100

	)

462 
	#VDESC_VPP_WILLRELE
 0x0200

	)

468 
	sv›_gíîic_¨gs
 {

469 
vnode›_desc
 *
	ma_desc
;

473 
	tv›_by∑ss_t
(
	tv›_gíîic_¨gs
 *);

479 
	#VDESC_NO_OFFSET
 -1

	)

484 
	svnode›_desc
 {

485 *
	mvdesc_«me
;

486 
	mvdesc_Êags
;

487 
v›_by∑ss_t
 *
	mvdesc_ˇŒ
;

495 *
	mvdesc_vp_off£ts
;

496 
	mvdesc_vµ_off£t
;

497 
	mvdesc_¸ed_off£t
;

498 
	mvdesc_thªad_off£t
;

499 
	mvdesc_comp⁄íäame_off£t
;

502 #ifde‡
_KERNEL


506 
vnode›_desc
 *
vnode›_descs
[];

508 
	#VOPARG_OFFSETOF
(
s_ty≥
, 
fõld
Ë
	`__off£tof
(s_ty≥, fõld)

	)

509 
	#VOPARG_OFFSETTO
(
s_ty≥
, 
s_off£t
, 
°ru˘_p
) \

510 ((
s_ty≥
)(((*)(
°ru˘_p
)Ë+ (
s_off£t
)))

	)

513 #ifde‡
DEBUG_VFS_LOCKS


523 
as£π_vi_locked
(
vnode
 *
vp
, c⁄° *
°r
);

524 
as£π_vi_u∆ocked
(
vnode
 *
vp
, c⁄° *
°r
);

525 
as£π_v›_ñocked
(
vnode
 *
vp
, c⁄° *
°r
);

526 
as£π_v›_locked
(
vnode
 *
vp
, c⁄° *
°r
);

527 
as£π_v›_u∆ocked
(
vnode
 *
vp
, c⁄° *
°r
);

529 
	#ASSERT_VI_LOCKED
(
vp
, 
°r
Ë
	`as£π_vi_locked
((vp), (°r))

	)

530 
	#ASSERT_VI_UNLOCKED
(
vp
, 
°r
Ë
	`as£π_vi_u∆ocked
((vp), (°r))

	)

531 
	#ASSERT_VOP_ELOCKED
(
vp
, 
°r
Ë
	`as£π_v›_ñocked
((vp), (°r))

	)

532 
	#ASSERT_VOP_LOCKED
(
vp
, 
°r
Ë
	`as£π_v›_locked
((vp), (°r))

	)

533 
	#ASSERT_VOP_UNLOCKED
(
vp
, 
°r
Ë
	`as£π_v›_u∆ocked
((vp), (°r))

	)

537 
	#ASSERT_VI_LOCKED
(
vp
, 
°r
Ë(()0)

	)

538 
	#ASSERT_VI_UNLOCKED
(
vp
, 
°r
Ë(()0)

	)

539 
	#ASSERT_VOP_ELOCKED
(
vp
, 
°r
Ë(()0)

	)

540 
	#ASSERT_VOP_LOCKED
(
vp
, 
°r
Ë(()0)

	)

541 
	#ASSERT_VOP_UNLOCKED
(
vp
, 
°r
Ë(()0)

	)

548 
	#VCALL
(
c
Ë((c)->
a_desc
->
	`vdesc_ˇŒ
(c))

	)

550 
	#DOINGASYNC
(
vp
) \

551 (((
vp
)->
v_mou¡
->
m¡_kîn_Êag
 & 
MNTK_ASYNC
) != 0 && \

552 ((
cuπhªad
->
td_pÊags
 & 
TDP_SYNCIO
Ë=0))

	)

558 
vmiodúíabÀ
;

560 
__ölöe
 

561 
	$vn_ˇnvmio
(
vnode
 *
vp
)

563 i‡(
vp
 && (vp->
v_ty≥
 =
VREG
 || (
vmiodúíabÀ
 && vp->v_ty≥ =
VDIR
)))

564 (
TRUE
);

565 (
FALSE
);

566 
	}
}

571 
	tv›_gë∑ges_iod⁄e_t
(*, 
	tvm_∑ge_t
 *, , );

572 
	~"vnode_if.h
"

575 
	#VN_OPEN_NOAUDIT
 0x00000001

	)

576 
	#VN_OPEN_NOCAPCHECK
 0x00000002

	)

577 
	#VN_OPEN_NAMECACHE
 0x00000004

	)

582 
	gcomp⁄íäame
;

583 
	gfûe
;

584 
	gmou¡
;

585 
	g«meid©a
;

586 
	go°©
;

587 
	g‰ìbsd11_°©
;

588 
	gthªad
;

589 
	g¥oc
;

590 
	g°©
;

591 
	gn°©
;

592 
	gu¸ed
;

593 
	guio
;

594 
	gv©å
;

595 
	gvfs›s
;

596 
	gvnode
;

598 (*
	tvn_gë_öo_t
)(
	tmou¡
 *, *, , 
	tvnode
 **);

600 
	`bn‹eu£li°
(
bufv
 *bufv, 
bufobj
 *
bo
, 
daddr_t
 
°¨ä
,

601 
daddr_t
 
ídn
);

603 
	`ˇche_ch™gesize
(
√whashsize
);

604 
	#ˇche_íãr
(
dvp
, 
vp
, 
˙p
) \

605 
	`ˇche_íãr_time
(
dvp
, 
vp
, 
˙p
, 
NULL
, NULL)

	)

606 
	`ˇche_íãr_time
(
vnode
 *
dvp
, vnodê*
vp
,

607 
comp⁄íäame
 *
˙p
, 
time•ec
 *
t•
,

608 
time•ec
 *
dt•
);

609 
	`ˇche_lookup
(
vnode
 *
dvp
, vnodê**
vµ
,

610 
comp⁄íäame
 *
˙p
, 
time•ec
 *
t•
, *
tick•
);

611 
	`ˇche_purge
(
vnode
 *
vp
);

612 
	`ˇche_purge_√g©ive
(
vnode
 *
vp
);

613 
	`ˇche_purgevfs
(
mou¡
 *
mp
, 
boﬁ
 
f‹˚
);

614 
	`ch™ge_dú
(
vnode
 *
vp
, 
thªad
 *
td
);

615 
	`cvt°©
(
°©
 *
°
, 
o°©
 *
o°
);

616 
	`‰ìbsd11_cvä°©
(
°©
 *
sb
, 
n°©
 *
nsb
);

617 
	`‰ìbsd11_cvt°©
(
°©
 *
°
, 
‰ìbsd11_°©
 *
o°
);

618 
	`gë√wvnode
(c⁄° *
èg
, 
mou¡
 *
mp
, 
v›_ve˘‹
 *
v›s
,

619 
vnode
 **
vµ
);

620 
	`gë√wvnode_ª£rve
(
u_öt
 
cou¡
);

621 
	`gë√wvnode_dr›_ª£rve
();

622 
	`ösm¡que1
(
vnode
 *
vp
, 
mou¡
 *
mp
,

623 (*
då
)(
vnode
 *, *), *
då_¨g
);

624 
	`ösm¡que
(
vnode
 *
vp
, 
mou¡
 *
mp
);

625 
u_quad_t
 
	`öô_va_fûîev
();

626 
	`•ìdup_syn˚r
();

627 
	`vn_v±o˙p
(
vnode
 **
vp
, 
u¸ed
 *
¸ed
, *
buf
,

628 
u_öt
 *
buÊí
);

629 
	`vn_fuŒ∑th
(
thªad
 *
td
, 
vnode
 *
vn
,

630 **
ªtbuf
, **
‰ìbuf
);

631 
	`vn_fuŒ∑th_globÆ
(
thªad
 *
td
, 
vnode
 *
vn
,

632 **
ªtbuf
, **
‰ìbuf
);

633 
vnode
 *

634 
	`vn_dú_dd_öo
(
vnode
 *
vp
);

635 
	`vn_comm«me
(
vnode
 *
vn
, *
buf
, 
u_öt
 
buÊí
);

636 
	`vn_∑th_to_globÆ_∑th
(
thªad
 *
td
, 
vnode
 *
vp
,

637 *
∑th
, 
u_öt
 
∑thÀn
);

638 
	`vac˚ss
(
vty≥
 
ty≥
, 
mode_t
 
fûe_mode
, 
uid_t
 
fûe_uid
,

639 
gid_t
 
fûe_gid
, 
accmode_t
 
accmode
, 
u¸ed
 *
¸ed
,

640 *
¥ivu£d
);

641 
	`vac˚ss_a˛_nfs4
(
vty≥
 
ty≥
, 
uid_t
 
fûe_uid
, 
gid_t
 
fûe_gid
,

642 
a˛
 *
a˛p
, 
accmode_t
 
accmode
, 
u¸ed
 *
¸ed
,

643 *
¥ivu£d
);

644 
	`vac˚ss_a˛_posix1e
(
vty≥
 
ty≥
, 
uid_t
 
fûe_uid
,

645 
gid_t
 
fûe_gid
, 
a˛
 *a˛, 
accmode_t
 
accmode
,

646 
u¸ed
 *
¸ed
, *
¥ivu£d
);

647 
	`v©å_nuŒ
(
v©å
 *
v≠
);

648 
	`vcou¡
(
vnode
 *
vp
);

649 
	#vdr›
(
vp
Ë
	`_vdr›
((vp), 0)

	)

650 
	#vdr›l
(
vp
Ë
	`_vdr›
((vp), 1)

	)

651 
	`_vdr›
(
vnode
 *, 
boﬁ
);

652 
	`vÊush
(
mou¡
 *
mp
, 
roŸªfs
, 
Êags
, 
thªad
 *
td
);

653 
	`vgë
(
vnode
 *
vp
, 
lockÊag
, 
thªad
 *
td
);

654 
	`vg⁄e
(
vnode
 *
vp
);

655 
	#vhﬁd
(
vp
Ë
	`_vhﬁd
((vp), 0)

	)

656 
	#vhﬁdl
(
vp
Ë
	`_vhﬁd
((vp), 1)

	)

657 
	`_vhﬁd
(
vnode
 *, 
boﬁ
);

658 
	`vöa˘ive
(
vnode
 *, 
thªad
 *);

659 
	`vövÆbuf
(
vnode
 *
vp
, 
ßve
, 
¶pÊag
, 
¶±imeo
);

660 
	`våuncbuf
(
vnode
 *
vp
, 
u¸ed
 *
¸ed
, 
off_t
 
Àngth
,

661 
blksize
);

662 
	`vuƒef
(
vnode
 *);

663 
	$vn_¥ötf
(
vnode
 *
vp
, c⁄° *
fmt
, ...Ë
	`__¥ötÊike
(2,3);

664 
	`vªcy˛e
(
vnode
 *
vp
);

665 
	`vªcy˛ñ
(
vnode
 *
vp
);

666 
	`vn_bm≠_£ekhﬁe
(
vnode
 *
vp
, 
u_l⁄g
 
cmd
, 
off_t
 *
off
,

667 
u¸ed
 *
¸ed
);

668 
	`vn_˛o£
(
vnode
 *
vp
,

669 
Êags
, 
u¸ed
 *
fûe_¸ed
, 
thªad
 *
td
);

670 
	`vn_föished_wrôe
(
mou¡
 *
mp
);

671 
	`vn_föished_£c⁄d¨y_wrôe
(
mou¡
 *
mp
);

672 
	`vn_isdisk
(
vnode
 *
vp
, *
îΩ
);

673 
	`_vn_lock
(
vnode
 *
vp
, 
Êags
, *
fûe
, 
löe
);

674 
	#vn_lock
(
vp
, 
Êags
Ë
	`_vn_lock
(vp, fœgs, 
__FILE__
, 
__LINE__
)

	)

675 
	`vn_›í
(
«meid©a
 *
ndp
, *
Êagp
, 
cmode
, 
fûe
 *
Â
);

676 
	`vn_›í_¸ed
(
«meid©a
 *
ndp
, *
Êagp
, 
cmode
,

677 
u_öt
 
vn_›í_Êags
, 
u¸ed
 *
¸ed
, 
fûe
 *
Â
);

678 
	`vn_›í_vnode
(
vnode
 *
vp
, 
fmode
, 
u¸ed
 *
¸ed
,

679 
thªad
 *
td
, 
fûe
 *
Â
);

680 
	`vn_∑ges_ªmove
(
vnode
 *
vp
, 
vm_pödex_t
 
°¨t
, vm_pödex_à
íd
);

681 
	`vn_pﬁÃec‹d
(
vnode
 *
vp
, 
thªad
 *
p
, 
evíts
);

682 
	`vn_rdwr
(
uio_rw
 
rw
, 
vnode
 *
vp
, *
ba£
,

683 
Àn
, 
off_t
 
off£t
, 
uio_£g
 
£gÊg
, 
ioÊg
,

684 
u¸ed
 *
a˘ive_¸ed
, u¸ed *
fûe_¸ed
, 
ssize_t
 *
¨esid
,

685 
thªad
 *
td
);

686 
	`vn_rdwr_öchunks
(
uio_rw
 
rw
, 
vnode
 *
vp
, *
ba£
,

687 
size_t
 
Àn
, 
off_t
 
off£t
, 
uio_£g
 
£gÊg
, 
ioÊg
,

688 
u¸ed
 *
a˘ive_¸ed
, u¸ed *
fûe_¸ed
, 
size_t
 *
¨esid
,

689 
thªad
 *
td
);

690 
	`vn_æimô_fsize
(c⁄° 
vnode
 *
vn
, c⁄° 
uio
 *uio,

691 
thªad
 *
td
);

692 
	`vn_°©
(
vnode
 *
vp
, 
°©
 *
sb
, 
u¸ed
 *
a˘ive_¸ed
,

693 
u¸ed
 *
fûe_¸ed
, 
thªad
 *
td
);

694 
	`vn_°¨t_wrôe
(
vnode
 *
vp
, 
mou¡
 **
mµ
, 
Êags
);

695 
	`vn_°¨t_£c⁄d¨y_wrôe
(
vnode
 *
vp
, 
mou¡
 **
mµ
,

696 
Êags
);

697 
	`vn_wrôechk
(
vnode
 *
vp
);

698 
	`vn_exèâr_gë
(
vnode
 *
vp
, 
ioÊg
, 
©å«me•a˚
,

699 c⁄° *
©å«me
, *
buÊí
, *
buf
, 
thªad
 *
td
);

700 
	`vn_exèâr_£t
(
vnode
 *
vp
, 
ioÊg
, 
©å«me•a˚
,

701 c⁄° *
©å«me
, 
buÊí
, *
buf
, 
thªad
 *
td
);

702 
	`vn_exèâr_rm
(
vnode
 *
vp
, 
ioÊg
, 
©å«me•a˚
,

703 c⁄° *
©å«me
, 
thªad
 *
td
);

704 
	`vn_vgë_öo
(
vnode
 *
vp
, 
öo_t
 
öo
, 
lkÊags
,

705 
vnode
 **
rvp
);

706 
	`vn_vgë_öo_gí
(
vnode
 *
vp
, 
vn_gë_öo_t
 
Æloc
,

707 *
Æloc_¨g
, 
lkÊags
, 
vnode
 **
rvp
);

708 
	`vn_utimes_≥rm
(
vnode
 *
vp
, 
v©å
 *
v≠
,

709 
u¸ed
 *
¸ed
, 
thªad
 *
td
);

711 
	`vn_io_Áu…_uiomove
(*
d©a
, 
x„rsize
, 
uio
 *uio);

712 
	`vn_io_Áu…_pgmove
(
vm_∑ge_t
 
ma
[], 
vm_off£t_t
 
off£t
, 
x„rsize
,

713 
uio
 *uio);

715 
	#vn_øngñock_u∆ock
(
vp
, 
cookõ
) \

716 
	`øngñock_u∆ock
(&(
vp
)->
v_æ
, (
cookõ
), 
	`VI_MTX
(vp))

	)

717 
	#vn_øngñock_u∆ock_ønge
(
vp
, 
cookõ
, 
°¨t
, 
íd
) \

718 
	`øngñock_u∆ock_ønge
(&(
vp
)->
v_æ
, (
cookõ
), (
°¨t
), (
íd
), \

719 
	`VI_MTX
(
vp
))

	)

720 
	#vn_øngñock_æock
(
vp
, 
°¨t
, 
íd
) \

721 
	`øngñock_æock
(&(
vp
)->
v_æ
, (
°¨t
), (
íd
), 
	`VI_MTX
(vp))

	)

722 
	#vn_øngñock_wlock
(
vp
, 
°¨t
, 
íd
) \

723 
	`øngñock_wlock
(&(
vp
)->
v_æ
, (
°¨t
), (
íd
), 
	`VI_MTX
(vp))

	)

725 
	`vfs_ˇche_lookup
(
v›_lookup_¨gs
 *
≠
);

726 
	`vfs_time°amp
(
time•ec
 *);

727 
	`vfs_wrôe_ªsume
(
mou¡
 *
mp
, 
Êags
);

728 
	`vfs_wrôe_su•íd
(
mou¡
 *
mp
, 
Êags
);

729 
	`vfs_wrôe_su•íd_um¡
(
mou¡
 *
mp
);

730 
	`v∆ru_‰ì
(, 
vfs›s
 *);

731 
	`v›_°dbm≠
(
v›_bm≠_¨gs
 *);

732 
	`v›_°dfd©async_buf
(
v›_fd©async_¨gs
 *);

733 
	`v›_°dfsync
(
v›_fsync_¨gs
 *);

734 
	`v›_°dgëwrôemou¡
(
v›_gëwrôemou¡_¨gs
 *);

735 
	`v›_°dgë∑ges
(
v›_gë∑ges_¨gs
 *);

736 
	`v›_°döa˘ive
(
v›_öa˘ive_¨gs
 *);

737 
	`v›_°di¶ocked
(
v›_i¶ocked_¨gs
 *);

738 
	`v›_°dkqfûãr
(
v›_kqfûãr_¨gs
 *);

739 
	`v›_°dlock
(
v›_lock1_¨gs
 *);

740 
	`v›_°dpuçages
(
v›_puçages_¨gs
 *);

741 
	`v›_°du∆ock
(
v›_u∆ock_¨gs
 *);

742 
	`v›_n›ﬁl
(
v›_pﬁl_¨gs
 *);

743 
	`v›_°dac˚ss
(
v›_ac˚ss_¨gs
 *
≠
);

744 
	`v›_°dac˚ssx
(
v›_ac˚ssx_¨gs
 *
≠
);

745 
	`v›_°dadvi£
(
v›_advi£_¨gs
 *
≠
);

746 
	`v›_°dadvlock
(
v›_advlock_¨gs
 *
≠
);

747 
	`v›_°dadvlockasync
(
v›_advlockasync_¨gs
 *
≠
);

748 
	`v›_°dadvlockpurge
(
v›_advlockpurge_¨gs
 *
≠
);

749 
	`v›_°dÆloˇã
(
v›_Æloˇã_¨gs
 *
≠
);

750 
	`v›_°d∑thc⁄f
(
v›_∑thc⁄f_¨gs
 *);

751 
	`v›_°dpﬁl
(
v›_pﬁl_¨gs
 *);

752 
	`v›_°dv±o˙p
(
v›_v±o˙p_¨gs
 *
≠
);

753 
	`v›_°dv±ofh
(
v›_v±ofh_¨gs
 *
≠
);

754 
	`v›_°du≈_böd
(
v›_u≈_böd_¨gs
 *
≠
);

755 
	`v›_°du≈_c⁄√˘
(
v›_u≈_c⁄√˘_¨gs
 *
≠
);

756 
	`v›_°du≈_dëach
(
v›_u≈_dëach_¨gs
 *
≠
);

757 
	`v›_e›nŸsuµ
(
v›_gíîic_¨gs
 *
≠
);

758 
	`v›_ebadf
(
v›_gíîic_¨gs
 *
≠
);

759 
	`v›_eövÆ
(
v›_gíîic_¨gs
 *
≠
);

760 
	`v›_í€¡
(
v›_gíîic_¨gs
 *
≠
);

761 
	`v›_íŸty
(
v›_gíîic_¨gs
 *
≠
);

762 
	`v›_nuŒ
(
v›_gíîic_¨gs
 *
≠
);

763 
	`v›_∑nic
(
v›_gíîic_¨gs
 *
≠
);

764 
	`dód_pﬁl
(
v›_pﬁl_¨gs
 *
≠
);

765 
	`dód_ªad
(
v›_ªad_¨gs
 *
≠
);

766 
	`dód_wrôe
(
v›_wrôe_¨gs
 *
≠
);

769 
	`v›_˛o£_po°
(*
a
, 
rc
);

770 
	`v›_¸óã_po°
(*
a
, 
rc
);

771 
	`v›_dñëìxèâr_po°
(*
a
, 
rc
);

772 
	`v›_lök_po°
(*
a
, 
rc
);

773 
	`v›_lookup_po°
(*
a
, 
rc
);

774 
	`v›_lookup_¥e
(*
a
);

775 
	`v›_mkdú_po°
(*
a
, 
rc
);

776 
	`v›_mknod_po°
(*
a
, 
rc
);

777 
	`v›_›í_po°
(*
a
, 
rc
);

778 
	`v›_ªad_po°
(*
a
, 
rc
);

779 
	`v›_ªaddú_po°
(*
a
, 
rc
);

780 
	`v›_ª˛aim_po°
(*
a
, 
rc
);

781 
	`v›_ªmove_po°
(*
a
, 
rc
);

782 
	`v›_ª«me_po°
(*
a
, 
rc
);

783 
	`v›_ª«me_¥e
(*
a
);

784 
	`v›_rmdú_po°
(*
a
, 
rc
);

785 
	`v›_£èâr_po°
(*
a
, 
rc
);

786 
	`v›_£ãxèâr_po°
(*
a
, 
rc
);

787 
	`v›_symlök_po°
(*
a
, 
rc
);

789 #ifde‡
DEBUG_VFS_LOCKS


790 
	`v›_°øãgy_¥e
(*
a
);

791 
	`v›_lock_¥e
(*
a
);

792 
	`v›_lock_po°
(*
a
, 
rc
);

793 
	`v›_u∆ock_po°
(*
a
, 
rc
);

794 
	`v›_u∆ock_¥e
(*
a
);

796 
	#v›_°øãgy_¥e
(
x
Ëdÿ{ 
	}
} 0)

	)

797 
	#v›_lock_¥e
(
x
Ëdÿ{ } 0)

	)

798 
	#v›_lock_po°
(
x
, 
y
Ëdÿ{ } 0)

	)

799 
	#v›_u∆ock_po°
(
x
, 
y
Ëdÿ{ } 0)

	)

800 
	#v›_u∆ock_¥e
(
x
Ëdÿ{ } 0)

	)

803 
v›_ª«me_Áû
(
v›_ª«me_¨gs
 *
≠
);

805 
	#VOP_WRITE_PRE
(
≠
) \

806 
v©å
 
va
; \

807 
îr‹
; \

808 
off_t
 
osize
, 
ooff£t
, 
noff£t
; \

810 
osize
 = 
ooff£t
 = 
noff£t
 = 0; \

811 i‡(!
	`VN_KNLIST_EMPTY
((
≠
)->
a_vp
)) { \

812 
îr‹
 = 
	`VOP_GETATTR
((
≠
)->
a_vp
, &
va
, (≠)->
a_¸ed
); \

813 i‡(
îr‹
) \

814  (
îr‹
); \

815 
ooff£t
 = (
≠
)->
a_uio
->
uio_off£t
; \

816 
osize
 = (
off_t
)
va
.
va_size
; \

817 }

	)

819 
	#VOP_WRITE_POST
(
≠
, 
ªt
) \

820 
noff£t
 = (
≠
)->
a_uio
->
uio_off£t
; \

821 i‡(
noff£t
 > 
ooff£t
 && !
	`VN_KNLIST_EMPTY
((
≠
)->
a_vp
)) { \

822 
	`VFS_KNOTE_LOCKED
((
≠
)->
a_vp
, 
NOTE_WRITE
 \

823 | (
noff£t
 > 
osize
 ? 
NOTE_EXTEND
 : 0)); \

824 }

	)

826 
	#VOP_LOCK
(
vp
, 
Êags
Ë
	`VOP_LOCK1
(vp, fœgs, 
__FILE__
, 
__LINE__
)

	)

829 
vput
(
vnode
 *
vp
);

830 
vªÀ
(
vnode
 *
vp
);

831 
vªf
(
vnode
 *
vp
);

832 
vªÊ
(
vnode
 *
vp
);

833 
vªÁ˘
(
vnode
 *
vp
);

834 
vªf˙t
(
vnode
 *
vp
);

835 
v_addpﬁlöfo
(
vnode
 *
vp
);

837 
vnode_¸óã_vobje˘
(
vnode
 *
vp
, 
off_t
 
size
, 
thªad
 *
td
);

838 
vnode_de°roy_vobje˘
(
vnode
 *
vp
);

840 
v›_ve˘‹
 
fifo_•ec›s
;

841 
v›_ve˘‹
 
dód_vnode›s
;

842 
v›_ve˘‹
 
deÁu…_vnode›s
;

844 
	#VOP_PANIC
 ((*)(
uöçå_t
)
v›_∑nic
)

	)

845 
	#VOP_NULL
 ((*)(
uöçå_t
)
v›_nuŒ
)

	)

846 
	#VOP_EBADF
 ((*)(
uöçå_t
)
v›_ebadf
)

	)

847 
	#VOP_ENOTTY
 ((*)(
uöçå_t
)
v›_íŸty
)

	)

848 
	#VOP_EINVAL
 ((*)(
uöçå_t
)
v›_eövÆ
)

	)

849 
	#VOP_ENOENT
 ((*)(
uöçå_t
)
v›_í€¡
)

	)

850 
	#VOP_EOPNOTSUPP
 ((*)(
uöçå_t
)
v›_e›nŸsuµ
)

	)

853 
fifo_¥ötöfo
(
vnode
 *);

856 
	tvfs_hash_cmp_t
(
	tvnode
 *
	tvp
, *
	t¨g
);

858 
vfs_hash_ch™gesize
(
√whashsize
);

859 
vfs_hash_gë
(c⁄° 
mou¡
 *
mp
, 
u_öt
 
hash
, 
Êags
,

860 
thªad
 *
td
, 
vnode
 **
vµ
, 
vfs_hash_cmp_t
 *
‚
, *
¨g
);

861 
u_öt
 
vfs_hash_ödex
(
vnode
 *
vp
);

862 
vfs_hash_ö£π
(
vnode
 *
vp
, 
u_öt
 
hash
, 
Êags
, 
thªad
 *
td
,

863 
vnode
 **
vµ
, 
vfs_hash_cmp_t
 *
‚
, *
¨g
);

864 
vfs_hash_ªf
(c⁄° 
mou¡
 *
mp
, 
u_öt
 
hash
, 
thªad
 *
td
,

865 
vnode
 **
vµ
, 
vfs_hash_cmp_t
 *
‚
, *
¨g
);

866 
vfs_hash_ªhash
(
vnode
 *
vp
, 
u_öt
 
hash
);

867 
vfs_hash_ªmove
(
vnode
 *
vp
);

869 
vfs_kqfûãr
(
v›_kqfûãr_¨gs
 *);

870 
vfs_m¨k_©ime
(
vnode
 *
vp
, 
u¸ed
 *
¸ed
);

871 
	gdúít
;

872 
vfs_ªad_dúít
(
v›_ªaddú_¨gs
 *
≠
, 
dúít
 *
dp
, 
off_t
 
off
);

874 
vfs_unixify_accmode
(
accmode_t
 *
accmode
);

876 
vfs_u≈_ª˛aim
(
vnode
 *
vp
);

878 
£tfmode
(
thªad
 *
td
, 
u¸ed
 *
¸ed
, 
vnode
 *
vp
, 
mode
);

879 
£tfown
(
thªad
 *
td
, 
u¸ed
 *
¸ed
, 
vnode
 *
vp
, 
uid_t
 
uid
,

880 
gid_t
 
gid
);

881 
vn_chmod
(
fûe
 *
Â
, 
mode_t
 
mode
, 
u¸ed
 *
a˘ive_¸ed
,

882 
thªad
 *
td
);

883 
vn_chown
(
fûe
 *
Â
, 
uid_t
 
uid
, 
gid_t
 
gid
, 
u¸ed
 *
a˘ive_¸ed
,

884 
thªad
 *
td
);

886 
vn_fsid
(
vnode
 *
vp
, 
v©å
 *
va
);

	@/usr/include/vm/_vm_radix.h

33 #i‚de‡
__VM_RADIX_H_


34 
	#__VM_RADIX_H_


	)

39 
	svm_ødix
 {

40 
uöçå_t
 
	mπ_roŸ
;

	@/usr/include/vm/pmap.h

70 #i‚def 
_PMAP_VM_


71 
	#_PMAP_VM_


	)

78 
	spm≠_°©i°ics
 {

79 
	mªsidít_cou¡
;

80 
	mwúed_cou¡
;

82 
pm≠_°©i°ics
 *
	tpm≠_°©i°ics_t
;

92 
	~<machöe/pm≠.h
>

94 #ifde‡
_KERNEL


95 
	gthªad
;

100 
vm_off£t_t
 
kî√l_vm_íd
;

107 
	#PMAP_ENTER_NOSLEEP
 0x00000100

	)

108 
	#PMAP_ENTER_WIRED
 0x00000200

	)

109 
	#PMAP_ENTER_RESERVED
 0xFF000000

	)

119 
	#PMAP_TS_REFERENCED_MAX
 5

	)

121 
pm≠_a˘iv©e
(
thªad
 *
td
);

122 
pm≠_advi£
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
sva
, vm_off£t_à
eva
,

123 
advi˚
);

124 
pm≠_Æign_su≥Ωage
(
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
 *,

125 
vm_size_t
);

126 
pm≠_˛ór_modify
(
vm_∑ge_t
 
m
);

127 
pm≠_c›y
(
pm≠_t
,Öm≠_t, 
vm_off£t_t
, 
vm_size_t
, vm_offset_t);

128 
pm≠_c›y_∑ge
(
vm_∑ge_t
, vm_page_t);

129 
pm≠_c›y_∑ges
(
vm_∑ge_t
 
ma
[], 
vm_off£t_t
 
a_off£t
,

130 
vm_∑ge_t
 
mb
[], 
vm_off£t_t
 
b_off£t
, 
x„rsize
);

131 
pm≠_íãr
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
, 
vm_∑ge_t
 
m
,

132 
vm_¥Ÿ_t
 
¥Ÿ
, 
u_öt
 
Êags
, 
öt8_t
 
psöd
);

133 
pm≠_íãr_obje˘
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
°¨t
,

134 
vm_off£t_t
 
íd
, 
vm_∑ge_t
 
m_°¨t
, 
vm_¥Ÿ_t
 
¥Ÿ
);

135 
pm≠_íãr_quick
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
, 
vm_∑ge_t
 
m
,

136 
vm_¥Ÿ_t
 
¥Ÿ
);

137 
vm_∑ddr_t
 
pm≠_exåa˘
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
);

138 
vm_∑ge_t
 
pm≠_exåa˘_™d_hﬁd
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
,

139 
vm_¥Ÿ_t
 
¥Ÿ
);

140 
pm≠_growkî√l
(
vm_off£t_t
);

141 
pm≠_öô
();

142 
boﬁón_t
 
pm≠_is_modifõd
(
vm_∑ge_t
 
m
);

143 
boﬁón_t
 
pm≠_is_¥eÁu…abÀ
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
);

144 
boﬁón_t
 
pm≠_is_ª„ªn˚d
(
vm_∑ge_t
 
m
);

145 
boﬁón_t
 
pm≠_is_vÆid_mem©å
(
pm≠_t
, 
vm_mem©å_t
);

146 
vm_off£t_t
 
pm≠_m≠
(vm_off£t_à*, 
vm_∑ddr_t
, vm_paddr_t, );

147 
pm≠_möc‹e
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
addr
,

148 
vm_∑ddr_t
 *
locked_∑
);

149 
pm≠_obje˘_öô_±
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
addr
,

150 
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
pödex
, 
vm_size_t
 
size
);

151 
boﬁón_t
 
pm≠_∑ge_exi°s_quick
(
pm≠_t
 
pm≠
, 
vm_∑ge_t
 
m
);

152 
pm≠_∑ge_öô
(
vm_∑ge_t
 
m
);

153 
pm≠_∑ge_wúed_m≠pögs
(
vm_∑ge_t
 
m
);

154 
pm≠_pöô
(
pm≠_t
);

155 
pm≠_pöô0
(
pm≠_t
);

156 
pm≠_¥Ÿe˘
(
pm≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
);

157 
pm≠_qíãr
(
vm_off£t_t
, 
vm_∑ge_t
 *, );

158 
pm≠_qªmove
(
vm_off£t_t
, );

159 
vm_off£t_t
 
pm≠_quick_íãr_∑ge
(
vm_∑ge_t
);

160 
pm≠_quick_ªmove_∑ge
(
vm_off£t_t
);

161 
pm≠_ªÀa£
(
pm≠_t
);

162 
pm≠_ªmove
(
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

163 
pm≠_ªmove_Æl
(
vm_∑ge_t
 
m
);

164 
pm≠_ªmove_∑ges
(
pm≠_t
);

165 
pm≠_ªmove_wrôe
(
vm_∑ge_t
 
m
);

166 
pm≠_sync_iˇche
(
pm≠_t
, 
vm_off£t_t
, 
vm_size_t
);

167 
boﬁón_t
 
pm≠_ts_ª„ªn˚d
(
vm_∑ge_t
 
m
);

168 
pm≠_unwúe
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
°¨t
, vm_off£t_à
íd
);

169 
pm≠_zîo_∑ge
(
vm_∑ge_t
);

170 
pm≠_zîo_∑ge_¨ó
(
vm_∑ge_t
, 
off
, 
size
);

172 
	#pm≠_ªsidít_cou¡
(
pm
Ë(’m)->
pm_°©s
.
ªsidít_cou¡
)

	)

173 
	#pm≠_wúed_cou¡
(
pm
Ë(’m)->
pm_°©s
.
wúed_cou¡
)

	)

	@/usr/include/vm/uma.h

38 #i‚de‡
_VM_UMA_H_


39 
	#_VM_UMA_H_


	)

41 
	~<sys/∑øm.h
>

42 
	~<sys/mÆloc.h
>

45 
	#UMA_SMALLEST_UNIT
 (
PAGE_SIZE
 / 256Ë

	)

49 
	guma_z⁄e
;

51 
uma_z⁄e
 * 
	tuma_z⁄e_t
;

53 
z⁄e_døö
(
uma_z⁄e_t
);

72 (*
	tuma_˘‹
)(*
	tmem
, 
	tsize
, *
	t¨g
, 
	tÊags
);

90 (*
	tuma_dt‹
)(*
	tmem
, 
	tsize
, *
	t¨g
);

109 (*
	tuma_öô
)(*
	tmem
, 
	tsize
, 
	tÊags
);

126 (*
	tuma_föi
)(*
	tmem
, 
	tsize
);

131 (*
	tuma_imp‹t
)(*
	t¨g
, **
	t°‹e
, 
	tcou¡
, 
	tdomaö
,

132 
	tÊags
);

137 (*
	tuma_ªÀa£
)(*
	t¨g
, **
	t°‹e
, 
	tcou¡
);

181 
uma_z⁄e_t
 
	`uma_z¸óã
(c⁄° *
«me
, 
size_t
 
size
, 
uma_˘‹
 
˘‹
,

182 
uma_dt‹
 
dt‹
, 
uma_öô
 
umöô
, 
uma_föi
 
föi
,

183 
Æign
, 
uöt32_t
 
Êags
);

217 
uma_z⁄e_t
 
	`uma_z£c⁄d_¸óã
(*
«me
, 
uma_˘‹
 
˘‹
, 
uma_dt‹
 
dt‹
,

218 
uma_öô
 
zöô
, 
uma_föi
 
zföi
, 
uma_z⁄e_t
 
ma°î
);

229 
	`uma_z£c⁄d_add
(
uma_z⁄e_t
 
z⁄e
, uma_z⁄e_à
ma°î
);

240 
uma_z⁄e_t
 
	`uma_zˇche_¸óã
(*
«me
, 
size
, 
uma_˘‹
 
˘‹
, 
uma_dt‹
 
dt‹
,

241 
uma_öô
 
zöô
, 
uma_föi
 
zföi
, 
uma_imp‹t
 
zimp‹t
,

242 
uma_ªÀa£
 
zªÀa£
, *
¨g
, 
Êags
);

250 
	#UMA_ZONE_PAGEABLE
 0x0001

	)

252 
	#UMA_ZONE_ZINIT
 0x0002

	)

253 
	#UMA_ZONE_STATIC
 0x0004

	)

254 
	#UMA_ZONE_OFFPAGE
 0x0008

	)

256 
	#UMA_ZONE_MALLOC
 0x0010

	)

257 
	#UMA_ZONE_NOFREE
 0x0020

	)

258 
	#UMA_ZONE_MTXCLASS
 0x0040

	)

259 
	#UMA_ZONE_VM
 0x0080

	)

263 
	#UMA_ZONE_HASH
 0x0100

	)

267 
	#UMA_ZONE_SECONDARY
 0x0200

	)

268 
	#UMA_ZONE_NOBUCKET
 0x0400

	)

269 
	#UMA_ZONE_MAXBUCKET
 0x0800

	)

270 
	#UMA_ZONE_CACHESPREAD
 0x1000

	)

276 
	#UMA_ZONE_VTOSLAB
 0x2000

	)

277 
	#UMA_ZONE_NODUMP
 0x4000

	)

281 
	#UMA_ZONE_PCPU
 0x8000

	)

284 
	#UMA_ZONE_NUMA
 0x10000

	)

288 
	#UMA_ZONE_NOBUCKETCACHE
 0x20000

	)

298 
	#UMA_ZONE_INHERIT
 \

299 (
UMA_ZONE_OFFPAGE
 | 
UMA_ZONE_MALLOC
 | 
UMA_ZONE_NOFREE
 | \

300 
UMA_ZONE_HASH
 | 
UMA_ZONE_VTOSLAB
 | 
UMA_ZONE_PCPU
)

	)

303 
	#UMA_ALIGN_PTR
 ((*Ë- 1Ë

	)

304 
	#UMA_ALIGN_LONG
 ((Ë- 1Ë

	)

305 
	#UMA_ALIGN_INT
 ((Ë- 1Ë

	)

306 
	#UMA_ALIGN_SHORT
 ((Ë- 1Ë

	)

307 
	#UMA_ALIGN_CHAR
 ((Ë- 1Ë

	)

308 
	#UMA_ALIGN_CACHE
 (0 - 1Ë

	)

309 
	#UMA_ALIGNOF
(
ty≥
Ë(
	`_Alignof
—y≥Ë- 1Ë

	)

318 
	`uma_zde°roy
(
uma_z⁄e_t
 
z⁄e
);

334 *
	`uma_zÆloc_¨g
(
uma_z⁄e_t
 
z⁄e
, *
¨g
, 
Êags
);

335 *
	`uma_zÆloc_p˝u_¨g
(
uma_z⁄e_t
 
z⁄e
, *
¨g
, 
Êags
);

348 *
	`uma_zÆloc_domaö
(
uma_z⁄e_t
 
z⁄e
, *
¨g
, 
domaö
, 
Êags
);

356 
__ölöe
 *
	`uma_zÆloc
(
uma_z⁄e_t
 
z⁄e
, 
Êags
);

357 
__ölöe
 *
	`uma_zÆloc_p˝u
(
uma_z⁄e_t
 
z⁄e
, 
Êags
);

359 
__ölöe
 *

360 
	$uma_zÆloc
(
uma_z⁄e_t
 
z⁄e
, 
Êags
)

362  
	`uma_zÆloc_¨g
(
z⁄e
, 
NULL
, 
Êags
);

363 
	}
}

365 
__ölöe
 *

366 
	$uma_zÆloc_p˝u
(
uma_z⁄e_t
 
z⁄e
, 
Êags
)

368  
	`uma_zÆloc_p˝u_¨g
(
z⁄e
, 
NULL
, 
Êags
);

369 
	}
}

383 
uma_z‰ì_¨g
(
uma_z⁄e_t
 
z⁄e
, *
ôem
, *
¨g
);

384 
uma_z‰ì_p˝u_¨g
(
uma_z⁄e_t
 
z⁄e
, *
ôem
, *
¨g
);

394 
uma_z‰ì_domaö
(
uma_z⁄e_t
 
z⁄e
, *
ôem
, *
¨g
);

402 
__ölöe
 
uma_z‰ì
(
uma_z⁄e_t
 
z⁄e
, *
ôem
);

403 
__ölöe
 
uma_z‰ì_p˝u
(
uma_z⁄e_t
 
z⁄e
, *
ôem
);

405 
__ölöe
 

406 
	$uma_z‰ì
(
uma_z⁄e_t
 
z⁄e
, *
ôem
)

408 
	`uma_z‰ì_¨g
(
z⁄e
, 
ôem
, 
NULL
);

409 
	}
}

411 
__ölöe
 

412 
	$uma_z‰ì_p˝u
(
uma_z⁄e_t
 
z⁄e
, *
ôem
)

414 
	`uma_z‰ì_p˝u_¨g
(
z⁄e
, 
ôem
, 
NULL
);

415 
	}
}

420 
uma_zwaô
(
uma_z⁄e_t
 
z⁄e
);

436 *(*
	tuma_Æloc
)(
	tuma_z⁄e_t
 
	tz⁄e
, 
	tvm_size_t
 
	tsize
, 
	tdomaö
,

437 
	tuöt8_t
 *
	tpÊag
, 
	twaô
);

450 (*
	tuma_‰ì
)(*
	tôem
, 
	tvm_size_t
 
	tsize
, 
	tuöt8_t
 
	tpÊag
);

463 
	`uma_ª˛aim
();

475 
	`uma_£t_Æign
(
Æign
);

481 
	`uma_z⁄e_ª£rve
(
uma_z⁄e_t
 
z⁄e
, 
nôems
);

500 
	`uma_z⁄e_ª£rve_kva
(
uma_z⁄e_t
 
z⁄e
, 
nôems
);

512 
	`uma_z⁄e_£t_max
(
uma_z⁄e_t
 
z⁄e
, 
nôems
);

524 
	`uma_z⁄e_gë_max
(
uma_z⁄e_t
 
z⁄e
);

536 
	`uma_z⁄e_£t_w¨nög
(
uma_z⁄e_t
 
z⁄e
, c⁄° *
w¨nög
);

548 (*
	tuma_maxa˘i⁄_t
)(
	tuma_z⁄e_t
, );

549 
	`uma_z⁄e_£t_maxa˘i⁄
(
uma_z⁄e_t
 
z⁄e
, 
uma_maxa˘i⁄_t
);

560 
	`uma_z⁄e_gë_cur
(
uma_z⁄e_t
 
z⁄e
);

570 
	`uma_z⁄e_£t_öô
(
uma_z⁄e_t
 
z⁄e
, 
uma_öô
 
umöô
);

571 
	`uma_z⁄e_£t_föi
(
uma_z⁄e_t
 
z⁄e
, 
uma_föi
 
föi
);

581 
	`uma_z⁄e_£t_zöô
(
uma_z⁄e_t
 
z⁄e
, 
uma_öô
 
zöô
);

582 
	`uma_z⁄e_£t_zföi
(
uma_z⁄e_t
 
z⁄e
, 
uma_föi
 
zföi
);

600 
	`uma_z⁄e_£t_Ælocf
(
uma_z⁄e_t
 
z⁄e
, 
uma_Æloc
 
Ælocf
);

613 
	`uma_z⁄e_£t_‰ìf
(
uma_z⁄e_t
 
z⁄e
, 
uma_‰ì
 
‰ìf
);

618 
	#UMA_SLAB_BOOT
 0x01

	)

619 
	#UMA_SLAB_KERNEL
 0x04

	)

620 
	#UMA_SLAB_PRIV
 0x08

	)

621 
	#UMA_SLAB_OFFP
 0x10

	)

622 
	#UMA_SLAB_MALLOC
 0x20

	)

637 
	`uma_¥óŒoc
(
uma_z⁄e_t
 
z⁄e
, 
ôem˙t
);

648 
	`uma_z⁄e_exhau°ed
(
uma_z⁄e_t
 
z⁄e
);

649 
	`uma_z⁄e_exhau°ed_nﬁock
(
uma_z⁄e_t
 
z⁄e
);

654 
uma_z⁄e_t
 
p˝u_z⁄e_64
;

655 
uma_z⁄e_t
 
p˝u_z⁄e_±r
;

662 
	#UMA_STREAM_VERSION
 0x00000001

	)

663 
	suma_°ªam_hódî
 {

664 
uöt32_t
 
ush_vîsi⁄
;

665 
uöt32_t
 
ush_max˝us
;

666 
uöt32_t
 
ush_cou¡
;

667 
uöt32_t
 
_ush_∑d
;

670 
	#UTH_MAX_NAME
 32

	)

671 
	#UTH_ZONE_SECONDARY
 0x00000001

	)

672 
	suma_ty≥_hódî
 {

676 
uth_«me
[
UTH_MAX_NAME
];

677 
uöt32_t
 
uth_Æign
;

678 
uöt32_t
 
uth_size
;

679 
uöt32_t
 
uth_rsize
;

680 
uöt32_t
 
uth_max∑ges
;

681 
uöt32_t
 
uth_limô
;

686 
uöt32_t
 
uth_∑ges
;

687 
uöt32_t
 
uth_keg_‰ì
;

688 
uöt32_t
 
uth_z⁄e_‰ì
;

689 
uöt32_t
 
uth_buckësize
;

690 
uöt32_t
 
uth_z⁄e_Êags
;

691 
uöt64_t
 
uth_Ælocs
;

692 
uöt64_t
 
uth_‰ìs
;

693 
uöt64_t
 
uth_Áûs
;

694 
uöt64_t
 
uth_¶ìps
;

695 
uöt64_t
 
_uth_ª£rved1
[2];

698 
	suma_≥r˝u_°©
 {

699 
uöt64_t
 
ups_Ælocs
;

700 
uöt64_t
 
ups_‰ìs
;

701 
uöt64_t
 
ups_ˇche_‰ì
;

702 
uöt64_t
 
_ups_ª£rved
[5];

705 
	`uma_ª˛aim_wakeup
();

706 
	`uma_ª˛aim_w‹kî
(*);

708 
	`uma_limô
();

711 
	`uma_size
();

714 
	`uma_avaû
();

	@/usr/include/vm/vm.h

63 #i‚de‡
VM_H


64 
	#VM_H


	)

66 
	~<machöe/vm.h
>

68 
	tvm_öhîô_t
;

70 
	#VM_INHERIT_SHARE
 ((
vm_öhîô_t
Ë0)

	)

71 
	#VM_INHERIT_COPY
 ((
vm_öhîô_t
Ë1)

	)

72 
	#VM_INHERIT_NONE
 ((
vm_öhîô_t
Ë2)

	)

73 
	#VM_INHERIT_ZERO
 ((
vm_öhîô_t
Ë3)

	)

74 
	#VM_INHERIT_DEFAULT
 
VM_INHERIT_COPY


	)

76 
u_ch¨
 
	tvm_¥Ÿ_t
;

78 
	#VM_PROT_NONE
 ((
vm_¥Ÿ_t
Ë0x00)

	)

79 
	#VM_PROT_READ
 ((
vm_¥Ÿ_t
Ë0x01)

	)

80 
	#VM_PROT_WRITE
 ((
vm_¥Ÿ_t
Ë0x02)

	)

81 
	#VM_PROT_EXECUTE
 ((
vm_¥Ÿ_t
Ë0x04)

	)

82 
	#VM_PROT_COPY
 ((
vm_¥Ÿ_t
Ë0x08Ë

	)

83 
	#VM_PROT_PRIV_FLAG
 ((
vm_¥Ÿ_t
Ë0x10)

	)

84 
	#VM_PROT_FAULT_LOOKUP
 
VM_PROT_PRIV_FLAG


	)

85 
	#VM_PROT_QUICK_NOFAULT
 
VM_PROT_PRIV_FLAG


	)

87 
	#VM_PROT_ALL
 (
VM_PROT_READ
|
VM_PROT_WRITE
|
VM_PROT_EXECUTE
)

	)

88 
	#VM_PROT_RW
 (
VM_PROT_READ
|
VM_PROT_WRITE
)

	)

89 
	#VM_PROT_DEFAULT
 
VM_PROT_ALL


	)

91 
	eobj_ty≥
 { 
	mOBJT_DEFAULT
, 
	mOBJT_SWAP
, 
	mOBJT_VNODE
, 
	mOBJT_DEVICE
, 
	mOBJT_PHYS
,

92 
	mOBJT_DEAD
, 
	mOBJT_SG
, 
	mOBJT_MGTDEVICE
 };

93 
u_ch¨
 
	tobjty≥_t
;

95 
	gvm_m≠_obje˘
;

96 
vm_m≠_obje˘
 
	tvm_m≠_obje˘_t
;

98 
	gvm_m≠_íåy
;

99 
vm_m≠_íåy
 *
	tvm_m≠_íåy_t
;

101 
	gvm_m≠
;

102 
vm_m≠
 *
	tvm_m≠_t
;

104 
	gvm_obje˘
;

105 
vm_obje˘
 *
	tvm_obje˘_t
;

107 #i‚de‡
_KERNEL


115 
	tboﬁón_t
;

122 
	tvm_mem©å_t
;

128 
	gvm_∑ge
;

129 
vm_∑ge
 *
	tvm_∑ge_t
;

132 
	gvm_ª£rv
;

133 
vm_ª£rv
 *
	tvm_ª£rv_t
;

139 
	skva_md_öfo
 {

140 
vm_off£t_t
 
	mbuf„r_sva
;

141 
vm_off£t_t
 
	mbuf„r_eva
;

142 
vm_off£t_t
 
	m˛ón_sva
;

143 
vm_off£t_t
 
	m˛ón_eva
;

146 
kva_md_öfo
 
kmi
;

147 
vm_ksubm≠_öô
(
kva_md_öfo
 *);

149 
ﬁd_mlock
;

151 
vm_ndomaös
;

153 
	gu¸ed
;

154 
sw≠_ª£rve
(
vm_ooff£t_t
 
ö¸
);

155 
sw≠_ª£rve_by_¸ed
(
vm_ooff£t_t
 
ö¸
, 
u¸ed
 *
¸ed
);

156 
sw≠_ª£rve_f‹˚
(
vm_ooff£t_t
 
ö¸
);

157 
sw≠_ªÀa£
(
vm_ooff£t_t
 
de¸
);

158 
sw≠_ªÀa£_by_¸ed
(
vm_ooff£t_t
 
de¸
, 
u¸ed
 *
¸ed
);

159 
sw≠≥r
();

	@/usr/include/vm/vm_extern.h

35 #i‚de‡
_VM_EXTERN_H_


36 
	#_VM_EXTERN_H_


	)

38 
	gpm≠
;

39 
	g¥oc
;

40 
	gvm•a˚
;

41 
	gvnode
;

42 
	gvmem
;

44 #ifde‡
_KERNEL


45 
	gcdev
;

46 
	gcdevsw
;

47 
	gdomaö£t
;

50 
vm_off£t_t
 
kva_Æloc
(
vm_size_t
);

51 
kva_‰ì
(
vm_off£t_t
, 
vm_size_t
);

54 
vm_off£t_t
 
km≠_Æloc_waô
(
vm_m≠_t
, 
vm_size_t
);

55 
km≠_‰ì_wakeup
(
vm_m≠_t
, 
vm_off£t_t
, 
vm_size_t
);

58 
vm_off£t_t
 
kmem_Æloc_©å
(
vm_size_t
 
size
, 
Êags
,

59 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
vm_mem©å_t
 
mem©å
);

60 
vm_off£t_t
 
kmem_Æloc_©å_domaö£t
(
domaö£t
 *
ds
, 
vm_size_t
 
size
,

61 
Êags
, 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
vm_mem©å_t
 
mem©å
);

62 
vm_off£t_t
 
kmem_Æloc_c⁄tig
(
vm_size_t
 
size
, 
Êags
,

63 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
u_l⁄g
 
Æignmít
, vm_∑ddr_à
bound¨y
,

64 
vm_mem©å_t
 
mem©å
);

65 
vm_off£t_t
 
kmem_Æloc_c⁄tig_domaö£t
(
domaö£t
 *
ds
, 
vm_size_t
 
size
,

66 
Êags
, 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
u_l⁄g
 
Æignmít
,

67 
vm_∑ddr_t
 
bound¨y
, 
vm_mem©å_t
 
mem©å
);

68 
vm_off£t_t
 
kmem_mÆloc
(
vm_size_t
 
size
, 
Êags
);

69 
vm_off£t_t
 
kmem_mÆloc_domaö£t
(
domaö£t
 *
ds
, 
vm_size_t
 
size
,

70 
Êags
);

71 
kmem_‰ì
(
vm_off£t_t
 
addr
, 
vm_size_t
 
size
);

74 
kmem_back
(
vm_obje˘_t
, 
vm_off£t_t
, 
vm_size_t
, );

75 
kmem_back_domaö
(, 
vm_obje˘_t
, 
vm_off£t_t
, 
vm_size_t
, );

76 
kmem_unback
(
vm_obje˘_t
, 
vm_off£t_t
, 
vm_size_t
);

79 
kmem_boŸ°øp_‰ì
(
vm_off£t_t
, 
vm_size_t
);

80 
vm_m≠_t
 
kmem_subÆloc
(vm_m≠_t, 
vm_off£t_t
 *, vm_off£t_à*, 
vm_size_t
,

81 
boﬁón_t
);

82 
kmem_öô
(
vm_off£t_t
, vm_offset_t);

83 
kmem_öô_zîo_ªgi⁄
();

84 
kmemöô
();

86 
kî«cc
(*, , );

87 
u£øcc
(*, , );

88 
vm_Áu…
(
vm_m≠_t
, 
vm_off£t_t
, 
vm_¥Ÿ_t
, );

89 
vm_Áu…_c›y_íåy
(
vm_m≠_t
, vm_m≠_t, 
vm_m≠_íåy_t
, vm_map_entry_t,

90 
vm_ooff£t_t
 *);

91 
vm_Áu…_dißbÀ_∑geÁu…s
();

92 
vm_Áu…_íabÀ_∑geÁu…s
(
ßve
);

93 
vm_Áu…_hﬁd
(
vm_m≠_t
 
m≠
, 
vm_off£t_t
 
vaddr
, 
vm_¥Ÿ_t
 
Áu…_ty≥
,

94 
Áu…_Êags
, 
vm_∑ge_t
 *
m_hﬁd
);

95 
vm_Áu…_quick_hﬁd_∑ges
(
vm_m≠_t
 
m≠
, 
vm_off£t_t
 
addr
, 
vm_size_t
 
Àn
,

96 
vm_¥Ÿ_t
 
¥Ÿ
, 
vm_∑ge_t
 *
ma
, 
max_cou¡
);

97 
vm_f‹k¥oc
(
thªad
 *, 
¥oc
 *, thread *,

98 
vm•a˚
 *, );

99 
vm_waô¥oc
(
¥oc
 *);

100 
vm_mm≠
(
vm_m≠_t
, 
vm_off£t_t
 *, 
vm_size_t
, 
vm_¥Ÿ_t
, vm_prot_t, ,

101 
objty≥_t
, *, 
vm_ooff£t_t
);

102 
vm_mm≠_obje˘
(
vm_m≠_t
, 
vm_off£t_t
 *, 
vm_size_t
, 
vm_¥Ÿ_t
,

103 
vm_¥Ÿ_t
, , 
vm_obje˘_t
, 
vm_ooff£t_t
, 
boﬁón_t
, 
thªad
 *);

104 
vm_mm≠_to_î∫o
(
rv
);

105 
vm_mm≠_cdev
(
thªad
 *, 
vm_size_t
, 
vm_¥Ÿ_t
, vm_prot_t *,

106 *, 
cdev
 *, 
cdevsw
 *, 
vm_ooff£t_t
 *, 
vm_obje˘_t
 *);

107 
vm_mm≠_vnode
(
thªad
 *, 
vm_size_t
, 
vm_¥Ÿ_t
, vm_prot_t *, *,

108 
vnode
 *, 
vm_ooff£t_t
 *, 
vm_obje˘_t
 *, 
boﬁón_t
 *);

109 
vm_£t_∑ge_size
();

110 
vm_sync_iˇche
(
vm_m≠_t
, 
vm_off£t_t
, 
vm_size_t
);

111 (*
	tpm≠_pöô_t
)(
	tpm≠
 *pmap);

112 
vm•a˚
 *
	`vm•a˚_Æloc
(
vm_off£t_t
, vm_off£t_t, 
pm≠_pöô_t
);

113 
vm•a˚
 *
	`vm•a˚_f‹k
(vm•a˚ *, 
vm_ooff£t_t
 *);

114 
	`vm•a˚_exec
(
¥oc
 *, 
vm_off£t_t
, vm_offset_t);

115 
	`vm•a˚_unsh¨e
(
¥oc
 *);

116 
	`vm•a˚_exô
(
thªad
 *);

117 
vm•a˚
 *
	`vm•a˚_acquúe_ªf
(
¥oc
 *);

118 
	`vm•a˚_‰ì
(
vm•a˚
 *);

119 
	`vm•a˚_exô‰ì
(
¥oc
 *);

120 
	`vm•a˚_swôch_aio
(
vm•a˚
 *);

121 
	`vnode_∑gî_£tsize
(
vnode
 *, 
vm_ooff£t_t
);

122 
	`v¶ock
(*, 
size_t
);

123 
	`vsu∆ock
(*, 
size_t
);

124 
sf_buf
 *
	`vm_imga˘_m≠_∑ge
(
vm_obje˘_t
 
obje˘
, 
vm_ooff£t_t
 
off£t
);

125 
	`vm_imga˘_unm≠_∑ge
(
sf_buf
 *
sf
);

126 
	`vm_thªad_di•o£
(
thªad
 *
td
);

127 
	`vm_thªad_√w
(
thªad
 *
td
, 
∑ges
);

128 
u_öt
 
	`vm_a˘ive_cou¡
();

129 
u_öt
 
	`vm_öa˘ive_cou¡
();

130 
u_öt
 
	`vm_œundry_cou¡
();

131 
u_öt
 
	`vm_waô_cou¡
();

	@/usr/include/vm/vm_kern.h

65 #i‚de‡
_VM_VM_KERN_H_


66 
	#_VM_VM_KERN_H_


	)

69 
vm_m≠_t
 
kî√l_m≠
;

70 
vm_m≠_t
 
exec_m≠
;

71 
vm_m≠_t
 
pùe_m≠
;

72 
vmem
 *
kî√l_¨ía
;

73 
vmem
 *
kmem_¨ía
;

74 
vmem
 *
buf„r_¨ía
;

75 
vmem
 *
å™sõ¡_¨ía
;

76 
vmem
 *
memgu¨d_¨ía
;

77 
vm_off£t_t
 
sw≠bkva
;

78 
u_l⁄g
 
vm_kmem_size
;

79 
u_öt
 
exec_m≠_íåõs
;

80 
u_öt
 
exec_m≠_íåy_size
;

	@/usr/include/vm/vm_map.h

68 #i‚def 
_VM_MAP_


69 
	#_VM_MAP_


	)

71 
	~<sys/lock.h
>

72 
	~<sys/sx.h
>

73 
	~<sys/_muãx.h
>

82 
u_ch¨
 
	tvm_Êags_t
;

83 
u_öt
 
	tvm_eÊags_t
;

90 
	uvm_m≠_obje˘
 {

91 
vm_obje˘
 *
	mvm_obje˘
;

92 
vm_m≠
 *
	msub_m≠
;

101 
	svm_m≠_íåy
 {

102 
vm_m≠_íåy
 *
	m¥ev
;

103 
vm_m≠_íåy
 *
	m√xt
;

104 
vm_m≠_íåy
 *
	mÀ·
;

105 
vm_m≠_íåy
 *
	mright
;

106 
vm_off£t_t
 
	m°¨t
;

107 
vm_off£t_t
 
	míd
;

108 
vm_off£t_t
 
	m√xt_ªad
;

109 
vm_size_t
 
	madj_‰ì
;

110 
vm_size_t
 
	mmax_‰ì
;

111 
vm_m≠_obje˘
 
	mobje˘
;

112 
vm_ooff£t_t
 
	moff£t
;

113 
vm_eÊags_t
 
	meÊags
;

114 
vm_¥Ÿ_t
 
	m¥Ÿe˘i⁄
;

115 
vm_¥Ÿ_t
 
	mmax_¥Ÿe˘i⁄
;

116 
vm_öhîô_t
 
	möhîô™˚
;

117 
uöt8_t
 
	mªad_ahód
;

118 
	mwúed_cou¡
;

119 
u¸ed
 *
	m¸ed
;

120 
thªad
 *
	mwúög_thªad
;

123 
	#MAP_ENTRY_NOSYNC
 0x0001

	)

124 
	#MAP_ENTRY_IS_SUB_MAP
 0x0002

	)

125 
	#MAP_ENTRY_COW
 0x0004

	)

126 
	#MAP_ENTRY_NEEDS_COPY
 0x0008

	)

127 
	#MAP_ENTRY_NOFAULT
 0x0010

	)

128 
	#MAP_ENTRY_USER_WIRED
 0x0020

	)

130 
	#MAP_ENTRY_BEHAV_NORMAL
 0x0000

	)

131 
	#MAP_ENTRY_BEHAV_SEQUENTIAL
 0x0040

	)

132 
	#MAP_ENTRY_BEHAV_RANDOM
 0x0080

	)

133 
	#MAP_ENTRY_BEHAV_RESERVED
 0x00C0

	)

135 
	#MAP_ENTRY_BEHAV_MASK
 0x00C0

	)

137 
	#MAP_ENTRY_IN_TRANSITION
 0x0100

	)

138 
	#MAP_ENTRY_NEEDS_WAKEUP
 0x0200

	)

139 
	#MAP_ENTRY_NOCOREDUMP
 0x0400

	)

141 
	#MAP_ENTRY_GROWS_DOWN
 0x1000

	)

142 
	#MAP_ENTRY_GROWS_UP
 0x2000

	)

144 
	#MAP_ENTRY_WIRE_SKIPPED
 0x4000

	)

145 
	#MAP_ENTRY_VN_WRITECNT
 0x8000

	)

146 
	#MAP_ENTRY_GUARD
 0x10000

	)

147 
	#MAP_ENTRY_STACK_GAP_DN
 0x20000

	)

148 
	#MAP_ENTRY_STACK_GAP_UP
 0x40000

	)

150 #ifdef 
_KERNEL


151 
__ölöe
 
u_ch¨


152 
	$vm_m≠_íåy_behavi‹
(
vm_m≠_íåy_t
 
íåy
)

154  (
íåy
->
eÊags
 & 
MAP_ENTRY_BEHAV_MASK
);

155 
	}
}

157 
__ölöe
 

158 
	$vm_m≠_íåy_u£r_wúed_cou¡
(
vm_m≠_íåy_t
 
íåy
)

160 i‡(
íåy
->
eÊags
 & 
MAP_ENTRY_USER_WIRED
)

163 
	}
}

165 
__ölöe
 

166 
	$vm_m≠_íåy_sy°em_wúed_cou¡
(
vm_m≠_íåy_t
 
íåy
)

168  (
íåy
->
wúed_cou¡
 - 
	`vm_m≠_íåy_u£r_wúed_cou¡
(entry));

169 
	}
}

190 
	svm_m≠
 {

191 
vm_m≠_íåy
 
	mhódî
;

196 
sx
 
	mlock
;

197 
mtx
 
	msy°em_mtx
;

198 
	m√¡rõs
;

199 
vm_size_t
 
	msize
;

200 
u_öt
 
	mtime°amp
;

201 
u_ch¨
 
	m√eds_wakeup
;

202 
u_ch¨
 
	msy°em_m≠
;

203 
vm_Êags_t
 
	mÊags
;

204 
vm_m≠_íåy_t
 
	mroŸ
;

205 
pm≠_t
 
	mpm≠
;

206 
	mbusy
;

212 
	#MAP_WIREFUTURE
 0x01

	)

213 
	#MAP_BUSY_WAKEUP
 0x02

	)

215 #ifdef 
_KERNEL


216 #i‡
deföed
(
KLD_MODULE
Ë&& !deföed(
KLD_TIED
)

217 
	#vm_m≠_max
(
m≠
Ë
	`vm_m≠_max_KBI
((m≠))

	)

218 
	#vm_m≠_mö
(
m≠
Ë
	`vm_m≠_mö_KBI
((m≠))

	)

219 
	#vm_m≠_pm≠
(
m≠
Ë
	`vm_m≠_pm≠_KBI
((m≠))

	)

221 
__ölöe
 
vm_off£t_t


222 
	$vm_m≠_max
(c⁄° 
vm_m≠
 *
m≠
)

225  (
m≠
->
hódî
.
°¨t
);

226 
	}
}

228 
__ölöe
 
vm_off£t_t


229 
	$vm_m≠_mö
(c⁄° 
vm_m≠
 *
m≠
)

232  (
m≠
->
hódî
.
íd
);

233 
	}
}

235 
__ölöe
 
pm≠_t


236 
	$vm_m≠_pm≠
(
vm_m≠_t
 
m≠
)

238  (
m≠
->
pm≠
);

239 
	}
}

241 
__ölöe
 

242 
	$vm_m≠_modÊags
(
vm_m≠_t
 
m≠
, 
vm_Êags_t
 
£t
, vm_Êags_à
˛ór
)

244 
m≠
->
Êags
 = (m≠->Êag†| 
£t
Ë& ~
˛ór
;

245 
	}
}

255 
	svm•a˚
 {

256 
vm_m≠
 
	mvm_m≠
;

257 
shmm≠_°©e
 *
	mvm_shm
;

258 
£gsz_t
 
	mvm_swrss
;

259 
£gsz_t
 
	mvm_tsize
;

260 
£gsz_t
 
	mvm_dsize
;

261 
£gsz_t
 
	mvm_ssize
;

262 
ˇddr_t
 
	mvm_èddr
;

263 
ˇddr_t
 
	mvm_daddr
;

264 
ˇddr_t
 
	mvm_maxßddr
;

265 vﬁ©ûê
	mvm_ªf˙t
;

271 
pm≠
 
	mvm_pm≠
;

274 #ifdef 
_KERNEL


275 
__ölöe
 
pm≠_t


276 
	$vm•a˚_pm≠
(
vm•a˚
 *vmspace)

278  &
vm•a˚
->
vm_pm≠
;

279 
	}
}

282 #ifdef 
_KERNEL


293 
_vm_m≠_lock
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

294 
_vm_m≠_u∆ock
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

295 
_vm_m≠_u∆ock_™d_waô
(
vm_m≠_t
 
m≠
, 
timo
, c⁄° *
fûe
, 
löe
);

296 
_vm_m≠_lock_ªad
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

297 
_vm_m≠_u∆ock_ªad
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

298 
_vm_m≠_åylock
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

299 
_vm_m≠_åylock_ªad
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

300 
_vm_m≠_lock_upgøde
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

301 
_vm_m≠_lock_downgøde
(
vm_m≠_t
 
m≠
, c⁄° *
fûe
, 
löe
);

302 
vm_m≠_locked
(
vm_m≠_t
 
m≠
);

303 
vm_m≠_wakeup
(
vm_m≠_t
 
m≠
);

304 
vm_m≠_busy
(
vm_m≠_t
 
m≠
);

305 
vm_m≠_unbusy
(
vm_m≠_t
 
m≠
);

306 
vm_m≠_waô_busy
(
vm_m≠_t
 
m≠
);

307 
vm_off£t_t
 
vm_m≠_max_KBI
(c⁄° 
vm_m≠
 *
m≠
);

308 
vm_off£t_t
 
vm_m≠_mö_KBI
(c⁄° 
vm_m≠
 *
m≠
);

309 
pm≠_t
 
vm_m≠_pm≠_KBI
(
vm_m≠_t
 
m≠
);

311 
	#vm_m≠_lock
(
m≠
Ë
	`_vm_m≠_lock
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

312 
	#vm_m≠_u∆ock
(
m≠
Ë
	`_vm_m≠_u∆ock
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

313 
	#vm_m≠_u∆ock_™d_waô
(
m≠
, 
timo
) \

314 
	`_vm_m≠_u∆ock_™d_waô
(
m≠
, 
timo
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

315 
	#vm_m≠_lock_ªad
(
m≠
Ë
	`_vm_m≠_lock_ªad
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

316 
	#vm_m≠_u∆ock_ªad
(
m≠
Ë
	`_vm_m≠_u∆ock_ªad
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

317 
	#vm_m≠_åylock
(
m≠
Ë
	`_vm_m≠_åylock
(m≠, 
LOCK_FILE
, 
LOCK_LINE
)

	)

318 
	#vm_m≠_åylock_ªad
(
m≠
) \

319 
	`_vm_m≠_åylock_ªad
(
m≠
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

320 
	#vm_m≠_lock_upgøde
(
m≠
) \

321 
	`_vm_m≠_lock_upgøde
(
m≠
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

322 
	#vm_m≠_lock_downgøde
(
m≠
) \

323 
	`_vm_m≠_lock_downgøde
(
m≠
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

325 
vm•a˚_ªsidít_cou¡
(
vm•a˚
 *vmspace);

330 
	#MAX_KMAP
 10

	)

335 
	#MAP_INHERIT_SHARE
 0x0001

	)

336 
	#MAP_COPY_ON_WRITE
 0x0002

	)

337 
	#MAP_NOFAULT
 0x0004

	)

338 
	#MAP_PREFAULT
 0x0008

	)

339 
	#MAP_PREFAULT_PARTIAL
 0x0010

	)

340 
	#MAP_DISABLE_SYNCER
 0x0020

	)

341 
	#MAP_CHECK_EXCL
 0x0040

	)

342 
	#MAP_CREATE_GUARD
 0x0080

	)

343 
	#MAP_DISABLE_COREDUMP
 0x0100

	)

344 
	#MAP_PREFAULT_MADVISE
 0x0200

	)

345 
	#MAP_VN_WRITECOUNT
 0x0400

	)

346 
	#MAP_STACK_GROWS_DOWN
 0x1000

	)

347 
	#MAP_STACK_GROWS_UP
 0x2000

	)

348 
	#MAP_ACC_CHARGED
 0x4000

	)

349 
	#MAP_ACC_NO_CHARGE
 0x8000

	)

350 
	#MAP_CREATE_STACK_GAP_UP
 0x10000

	)

351 
	#MAP_CREATE_STACK_GAP_DN
 0x20000

	)

356 
	#VM_FAULT_NORMAL
 0

	)

357 
	#VM_FAULT_WIRE
 1

	)

358 
	#VM_FAULT_DIRTY
 2

	)

364 
	#VM_FAULT_READ_AHEAD_MIN
 7

	)

365 
	#VM_FAULT_READ_AHEAD_INIT
 15

	)

366 
	#VM_FAULT_READ_AHEAD_MAX
 
	`mö
(
	`©›
(
MAXPHYS
Ë- 1, 
UINT8_MAX
)

	)

374 
	#VMFS_NO_SPACE
 0

	)

375 
	#VMFS_ANY_SPACE
 1

	)

376 
	#VMFS_OPTIMAL_SPACE
 2

	)

377 
	#VMFS_SUPER_SPACE
 3

	)

378 
	#VMFS_ALIGNED_SPACE
(
x
Ë((xË<< 8Ë

	)

383 
	#VM_MAP_WIRE_SYSTEM
 0

	)

384 
	#VM_MAP_WIRE_USER
 1

	)

386 
	#VM_MAP_WIRE_NOHOLES
 0

	)

387 
	#VM_MAP_WIRE_HOLESOK
 2

	)

389 
	#VM_MAP_WIRE_WRITE
 4

	)

391 #ifde‡
_KERNEL


392 
boﬁón_t
 
vm_m≠_check_¥Ÿe˘i⁄
 (
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
);

393 
vm_m≠_t
 
vm_m≠_¸óã
(
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

394 
vm_m≠_dñëe
(
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t);

395 
vm_m≠_föd
(
vm_m≠_t
, 
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
 *, 
vm_size_t
,

396 
vm_off£t_t
, , 
vm_¥Ÿ_t
, vm_prot_t, );

397 
vm_m≠_föd_mö
(
vm_m≠_t
, 
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
 *,

398 
vm_size_t
, 
vm_off£t_t
, vm_off£t_t, , 
vm_¥Ÿ_t
, vm_prot_t, );

399 
vm_m≠_fixed
(
vm_m≠_t
, 
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
, 
vm_size_t
,

400 
vm_¥Ÿ_t
, vm_prot_t, );

401 
vm_m≠_föd•a˚
 (
vm_m≠_t
, 
vm_off£t_t
, 
vm_size_t
, vm_offset_t *);

402 
vm_m≠_öhîô
 (
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_öhîô_t
);

403 
vm_m≠_öô
(
vm_m≠_t
, 
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

404 
vm_m≠_ö£π
 (
vm_m≠_t
, 
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
, vm_prot_t, );

405 
vm_m≠_lookup
 (
vm_m≠_t
 *, 
vm_off£t_t
, 
vm_¥Ÿ_t
, 
vm_m≠_íåy_t
 *, 
vm_obje˘_t
 *,

406 
vm_pödex_t
 *, 
vm_¥Ÿ_t
 *, 
boﬁón_t
 *);

407 
vm_m≠_lookup_locked
(
vm_m≠_t
 *, 
vm_off£t_t
, 
vm_¥Ÿ_t
, 
vm_m≠_íåy_t
 *, 
vm_obje˘_t
 *,

408 
vm_pödex_t
 *, 
vm_¥Ÿ_t
 *, 
boﬁón_t
 *);

409 
vm_m≠_lookup_d⁄e
 (
vm_m≠_t
, 
vm_m≠_íåy_t
);

410 
boﬁón_t
 
vm_m≠_lookup_íåy
 (
vm_m≠_t
, 
vm_off£t_t
, 
vm_m≠_íåy_t
 *);

411 
vm_m≠_¥Ÿe˘
 (
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
vm_¥Ÿ_t
, 
boﬁón_t
);

412 
vm_m≠_ªmove
 (
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t);

413 
vm_m≠_sim∂ify_íåy
(
vm_m≠_t
 
m≠
, 
vm_m≠_íåy_t
 
íåy
);

414 
vm_m≠_°¨tup
 ();

415 
vm_m≠_subm≠
 (
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t, vm_map_t);

416 
vm_m≠_sync
(
vm_m≠_t
, 
vm_off£t_t
, vm_off£t_t, 
boﬁón_t
, boolean_t);

417 
vm_m≠_madvi£
 (
vm_m≠_t
, 
vm_off£t_t
, vm_offset_t, );

418 
vm_m≠_°ack
 (
vm_m≠_t
, 
vm_off£t_t
, 
vm_size_t
, 
vm_¥Ÿ_t
, vm_prot_t, );

419 
vm_m≠_unwúe
(
vm_m≠_t
 
m≠
, 
vm_off£t_t
 
°¨t
, vm_off£t_à
íd
,

420 
Êags
);

421 
vm_m≠_wúe
(
vm_m≠_t
 
m≠
, 
vm_off£t_t
 
°¨t
, vm_off£t_à
íd
,

422 
Êags
);

423 
vm•a˚_sw≠_cou¡
(
vm•a˚
 *vmspace);

	@/usr/include/vm/vm_object.h

69 #i‚def 
_VM_OBJECT_


70 
	#_VM_OBJECT_


	)

72 
	~<sys/queue.h
>

73 
	~<sys/_lock.h
>

74 
	~<sys/_muãx.h
>

75 
	~<sys/_p˘rõ.h
>

76 
	~<sys/_rwlock.h
>

77 
	~<sys/_domaö£t.h
>

79 
	~<vm/_vm_ødix.h
>

93 #i‚de‡
VM_PAGE_HAVE_PGLIST


94 
TAILQ_HEAD
(
pgli°
, 
vm_∑ge
);

95 
	#VM_PAGE_HAVE_PGLIST


	)

98 
	svm_obje˘
 {

99 
rwlock
 
	mlock
;

100 
TAILQ_ENTRY
(
vm_obje˘
Ë
	mobje˘_li°
;

101 
LIST_HEAD
(, 
vm_obje˘
Ë
	mshadow_hód
;

102 
LIST_ENTRY
(
vm_obje˘
Ë
	mshadow_li°
;

103 
pgli°
 
	mmemq
;

104 
vm_ødix
 
	mπªe
;

105 
vm_pödex_t
 
	msize
;

106 
domaö£t_ªf
 
	mdomaö
;

107 
	mgíî©i⁄
;

108 
	mªf_cou¡
;

109 
	mshadow_cou¡
;

110 
vm_mem©å_t
 
	mmem©å
;

111 
objty≥_t
 
	mty≥
;

112 
u_sh‹t
 
	mÊags
;

113 
u_sh‹t
 
	mpg_cﬁ‹
;

114 
u_öt
 
	m∑gög_ö_¥ogªss
;

115 
	mªsidít_∑ge_cou¡
;

116 
vm_obje˘
 *
	mbackög_obje˘
;

117 
vm_ooff£t_t
 
	mbackög_obje˘_off£t
;

118 
TAILQ_ENTRY
(
vm_obje˘
Ë
	m∑gî_obje˘_li°
;

119 
LIST_HEAD
(, 
vm_ª£rv
Ë
	mrvq
;

120 *
	mh™dÀ
;

128 
off_t
 
	mv≈_size
;

129 
vm_ooff£t_t
 
	mwrôem≠pögs
;

130 } 
	mv≈
;

138 
TAILQ_HEAD
(, 
vm_∑ge
Ë
	mdevp_pgli°
;

139 
cdev_∑gî_›s
 *
	m›s
;

140 
cdev
 *
	mdev
;

141 } 
	mdevp
;

149 
TAILQ_HEAD
(, 
vm_∑ge
Ë
	msgp_pgli°
;

150 } 
	msgp
;

168 *
	mswp_tmpfs
;

169 
p˘rõ
 
	mswp_blks
;

170 } 
	mswp
;

171 } 
	mun_∑gî
;

172 
u¸ed
 *
	m¸ed
;

173 
vm_ooff£t_t
 
	mch¨ge
;

174 *
	mumtx_d©a
;

180 
	#OBJ_FICTITIOUS
 0x0001

	)

181 
	#OBJ_UNMANAGED
 0x0002

	)

182 
	#OBJ_POPULATE
 0x0004

	)

183 
	#OBJ_DEAD
 0x0008

	)

184 
	#OBJ_NOSPLIT
 0x0010

	)

185 
	#OBJ_UMTXDEAD
 0x0020

	)

186 
	#OBJ_PIPWNT
 0x0040

	)

187 
	#OBJ_PG_DTOR
 0x0080

	)

188 
	#OBJ_MIGHTBEDIRTY
 0x0100

	)

189 
	#OBJ_TMPFS_NODE
 0x0200

	)

190 
	#OBJ_TMPFS_DIRTY
 0x0400

	)

191 
	#OBJ_COLORED
 0x1000

	)

192 
	#OBJ_ONEMAPPING
 0x2000

	)

193 
	#OBJ_DISCONNECTWNT
 0x4000

	)

194 
	#OBJ_TMPFS
 0x8000

	)

209 
	#IDX_TO_OFF
(
idx
Ë(((
vm_ooff£t_t
)(idx)Ë<< 
PAGE_SHIFT
)

	)

210 
	#OFF_TO_IDX
(
off
Ë((
vm_pödex_t
)(((
vm_ooff£t_t
)(off)Ë>> 
PAGE_SHIFT
))

	)

211 
	#UOFF_TO_IDX
(
off
Ë(((
vm_pödex_t
)(off)Ë>> 
PAGE_SHIFT
)

	)

212 
	#OBJ_MAX_SIZE
 (
	`UOFF_TO_IDX
(
UINT64_MAX
Ë+ 1)

	)

214 #ifdef 
_KERNEL


216 
	#OBJPC_SYNC
 0x1

	)

217 
	#OBJPC_INVAL
 0x2

	)

218 
	#OBJPC_NOSYNC
 0x4

	)

223 
	#OBJPR_CLEANONLY
 0x1

	)

224 
	#OBJPR_NOTMAPPED
 0x2

	)

226 
TAILQ_HEAD
(
obje˘_q
, 
vm_obje˘
);

228 
obje˘_q
 
vm_obje˘_li°
;

229 
mtx
 
vm_obje˘_li°_mtx
;

231 
vm_obje˘
 
kî√l_obje˘_°‹e
;

234 
	#kî√l_obje˘
 (&
kî√l_obje˘_°‹e
)

	)

235 
	#kmem_obje˘
 (&
kî√l_obje˘_°‹e
)

	)

237 
	#VM_OBJECT_ASSERT_LOCKED
(
obje˘
) \

238 
	`rw_as£π
(&(
obje˘
)->
lock
, 
RA_LOCKED
)

	)

239 
	#VM_OBJECT_ASSERT_RLOCKED
(
obje˘
) \

240 
	`rw_as£π
(&(
obje˘
)->
lock
, 
RA_RLOCKED
)

	)

241 
	#VM_OBJECT_ASSERT_WLOCKED
(
obje˘
) \

242 
	`rw_as£π
(&(
obje˘
)->
lock
, 
RA_WLOCKED
)

	)

243 
	#VM_OBJECT_ASSERT_UNLOCKED
(
obje˘
) \

244 
	`rw_as£π
(&(
obje˘
)->
lock
, 
RA_UNLOCKED
)

	)

245 
	#VM_OBJECT_LOCK_DOWNGRADE
(
obje˘
) \

246 
	`rw_downgøde
(&(
obje˘
)->
lock
)

	)

247 
	#VM_OBJECT_RLOCK
(
obje˘
) \

248 
	`rw_æock
(&(
obje˘
)->
lock
)

	)

249 
	#VM_OBJECT_RUNLOCK
(
obje˘
) \

250 
	`rw_ru∆ock
(&(
obje˘
)->
lock
)

	)

251 
	#VM_OBJECT_SLEEP
(
obje˘
, 
wch™
, 
¥i
, 
wmesg
, 
timo
) \

252 
	`rw_¶ìp
((
wch™
), &(
obje˘
)->
lock
, (
¥i
), (
wmesg
), (
timo
))

	)

253 
	#VM_OBJECT_TRYRLOCK
(
obje˘
) \

254 
	`rw_åy_æock
(&(
obje˘
)->
lock
)

	)

255 
	#VM_OBJECT_TRYWLOCK
(
obje˘
) \

256 
	`rw_åy_wlock
(&(
obje˘
)->
lock
)

	)

257 
	#VM_OBJECT_TRYUPGRADE
(
obje˘
) \

258 
	`rw_åy_upgøde
(&(
obje˘
)->
lock
)

	)

259 
	#VM_OBJECT_WLOCK
(
obje˘
) \

260 
	`rw_wlock
(&(
obje˘
)->
lock
)

	)

261 
	#VM_OBJECT_WOWNED
(
obje˘
) \

262 
	`rw_wow√d
(&(
obje˘
)->
lock
)

	)

263 
	#VM_OBJECT_WUNLOCK
(
obje˘
) \

264 
	`rw_wu∆ock
(&(
obje˘
)->
lock
)

	)

269 
__ölöe
 

270 
	$vm_obje˘_£t_Êag
(
vm_obje˘_t
 
obje˘
, 
u_sh‹t
 
bôs
)

273 
obje˘
->
Êags
 |
bôs
;

274 
	}
}

290 
__ölöe
 

291 
	$vm_obje˘_cﬁ‹
(
vm_obje˘_t
 
obje˘
, 
u_sh‹t
 
cﬁ‹
)

294 i‡((
obje˘
->
Êags
 & 
OBJ_COLORED
) == 0) {

295 
obje˘
->
pg_cﬁ‹
 = 
cﬁ‹
;

296 
obje˘
->
Êags
 |
OBJ_COLORED
;

298 
	}
}

300 
__ölöe
 
boﬁ


301 
	$vm_obje˘_ª£rv
(
vm_obje˘_t
 
obje˘
)

304 i‡(
obje˘
 !
NULL
 &&

305 (
obje˘
->
Êags
 & (
OBJ_COLORED
 | 
OBJ_FICTITIOUS
)) == OBJ_COLORED) {

306  (
åue
);

308  (
Ál£
);

309 
	}
}

311 
vm_obje˘_˛ór_Êag
(
vm_obje˘_t
 
obje˘
, 
u_sh‹t
 
bôs
);

312 
vm_obje˘_pù_add
(
vm_obje˘_t
 
obje˘
, 
i
);

313 
vm_obje˘_pù_subåa˘
(
vm_obje˘_t
 
obje˘
, 
i
);

314 
vm_obje˘_pù_wakeup
(
vm_obje˘_t
 
obje˘
);

315 
vm_obje˘_pù_wakeu≤
(
vm_obje˘_t
 
obje˘
, 
i
);

316 
vm_obje˘_pù_waô
(
vm_obje˘_t
 
obje˘
, *
waôid
);

318 
umtx_shm_obje˘_öô
(
vm_obje˘_t
 
obje˘
);

319 
umtx_shm_obje˘_ãrmö©ed
(
vm_obje˘_t
 
obje˘
);

320 
umtx_shm_vnobj_≥rsi°ít
;

322 
vm_obje˘_t
 
vm_obje˘_Æloˇã
 (
objty≥_t
, 
vm_pödex_t
);

323 
boﬁón_t
 
vm_obje˘_cﬂÀs˚
(
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_size_t
, vm_size_t,

324 
boﬁón_t
);

325 
vm_obje˘_cﬁœp£
 (
vm_obje˘_t
);

326 
vm_obje˘_dóŒoˇã
 (
vm_obje˘_t
);

327 
vm_obje˘_de°roy
 (
vm_obje˘_t
);

328 
vm_obje˘_ãrmö©e
 (
vm_obje˘_t
);

329 
vm_obje˘_£t_wrôóbÀ_dúty
 (
vm_obje˘_t
);

330 
vm_obje˘_öô
 ();

331 
vm_obje˘_madvi£
(
vm_obje˘_t
, 
vm_pödex_t
, vm_pindex_t, );

332 
boﬁón_t
 
vm_obje˘_∑ge_˛ón
(
vm_obje˘_t
 
obje˘
, 
vm_ooff£t_t
 
°¨t
,

333 
vm_ooff£t_t
 
íd
, 
Êags
);

334 
vm_obje˘_∑ge_n‹eu£
(
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
°¨t
,

335 
vm_pödex_t
 
íd
);

336 
vm_obje˘_∑ge_ªmove
(
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
°¨t
,

337 
vm_pödex_t
 
íd
, 
›ti⁄s
);

338 
boﬁón_t
 
vm_obje˘_p›uœã
(
vm_obje˘_t
, 
vm_pödex_t
, vm_pindex_t);

339 
vm_obje˘_¥öt
(
addr
, 
boﬁón_t
 
have_addr
, 
cou¡
, *
modif
);

340 
vm_obje˘_ª„ªn˚
 (
vm_obje˘_t
);

341 
vm_obje˘_ª„ªn˚_locked
(
vm_obje˘_t
);

342 
vm_obje˘_£t_mem©å
(
vm_obje˘_t
 
obje˘
, 
vm_mem©å_t
 
mem©å
);

343 
vm_obje˘_shadow
 (
vm_obje˘_t
 *, 
vm_ooff£t_t
 *, 
vm_size_t
);

344 
vm_obje˘_•lô
(
vm_m≠_íåy_t
);

345 
boﬁón_t
 
vm_obje˘_sync
(
vm_obje˘_t
, 
vm_ooff£t_t
, 
vm_size_t
, boolean_t,

346 
boﬁón_t
);

347 
vm_obje˘_unwúe
(
vm_obje˘_t
 
obje˘
, 
vm_ooff£t_t
 
off£t
,

348 
vm_size_t
 
Àngth
, 
uöt8_t
 
queue
);

349 
vnode
 *
vm_obje˘_vnode
(
vm_obje˘_t
 
obje˘
);

	@/usr/include/vm/vm_page.h

69 #i‚def 
_VM_PAGE_


70 
	#_VM_PAGE_


	)

72 
	~<vm/pm≠.h
>

174 #i‡
PAGE_SIZE
 == 4096

175 
	#VM_PAGE_BITS_ALL
 0xffu

	)

176 
uöt8_t
 
	tvm_∑ge_bôs_t
;

177 #ñi‡
PAGE_SIZE
 == 8192

178 
	#VM_PAGE_BITS_ALL
 0xffffu

	)

179 
uöt16_t
 
	tvm_∑ge_bôs_t
;

180 #ñi‡
PAGE_SIZE
 == 16384

181 
	#VM_PAGE_BITS_ALL
 0xffffffffu

	)

182 
uöt32_t
 
	tvm_∑ge_bôs_t
;

183 #ñi‡
PAGE_SIZE
 == 32768

184 
	#VM_PAGE_BITS_ALL
 0xfffffffffffffffÊu

	)

185 
uöt64_t
 
	tvm_∑ge_bôs_t
;

188 
	svm_∑ge
 {

190 
TAILQ_ENTRY
(
vm_∑ge
Ë
	mq
;

192 
SLIST_ENTRY
(
vm_∑ge
Ë
	mss
;

193 *
	mpv
;

194 } 
	ms
;

196 
u_l⁄g
 
	mp
;

197 
u_l⁄g
 
	mv
;

198 } 
	mmemgu¨d
;

199 } 
	m∂öks
;

200 
TAILQ_ENTRY
(
vm_∑ge
Ë
	mli°q
;

201 
vm_obje˘_t
 
	mobje˘
;

202 
vm_pödex_t
 
	mpödex
;

203 
vm_∑ddr_t
 
	mphys_addr
;

204 
md_∑ge
 
	mmd
;

205 
u_öt
 
	mwúe_cou¡
;

206 vﬁ©ûê
u_öt
 
	mbusy_lock
;

207 
uöt16_t
 
	mhﬁd_cou¡
;

208 
uöt16_t
 
	mÊags
;

209 
uöt8_t
 
	maÊags
;

210 
uöt8_t
 
	moÊags
;

211 
uöt8_t
 
	mqueue
;

212 
öt8_t
 
	mpsöd
;

213 
öt8_t
 
	m£göd
;

214 
uöt8_t
 
	m‹dî
;

215 
uöt8_t
 
	mpoﬁ
;

216 
u_ch¨
 
	ma˘_cou¡
;

219 
vm_∑ge_bôs_t
 
	mvÆid
;

220 
vm_∑ge_bôs_t
 
	mdúty
;

237 
	#VPO_KMEM_EXEC
 0x01

	)

238 
	#VPO_SWAPSLEEP
 0x02

	)

239 
	#VPO_UNMANAGED
 0x04

	)

240 
	#VPO_SWAPINPROG
 0x08

	)

241 
	#VPO_NOSYNC
 0x10

	)

250 
	#VPB_BIT_SHARED
 0x01

	)

251 
	#VPB_BIT_EXCLUSIVE
 0x02

	)

252 
	#VPB_BIT_WAITERS
 0x04

	)

253 
	#VPB_BIT_FLAGMASK
 \

254 (
VPB_BIT_SHARED
 | 
VPB_BIT_EXCLUSIVE
 | 
VPB_BIT_WAITERS
)

	)

256 
	#VPB_SHARERS_SHIFT
 3

	)

257 
	#VPB_SHARERS
(
x
) \

258 (((
x
Ë& ~
VPB_BIT_FLAGMASK
Ë>> 
VPB_SHARERS_SHIFT
)

	)

259 
	#VPB_SHARERS_WORD
(
x
Ë((xË<< 
VPB_SHARERS_SHIFT
 | 
VPB_BIT_SHARED
)

	)

260 
	#VPB_ONE_SHARER
 (1 << 
VPB_SHARERS_SHIFT
)

	)

262 
	#VPB_SINGLE_EXCLUSIVER
 
VPB_BIT_EXCLUSIVE


	)

264 
	#VPB_UNBUSIED
 
	`VPB_SHARERS_WORD
(0)

	)

266 
	#PQ_NONE
 255

	)

267 
	#PQ_INACTIVE
 0

	)

268 
	#PQ_ACTIVE
 1

	)

269 
	#PQ_LAUNDRY
 2

	)

270 
	#PQ_UNSWAPPABLE
 3

	)

271 
	#PQ_COUNT
 4

	)

273 #i‚de‡
VM_PAGE_HAVE_PGLIST


274 
TAILQ_HEAD
(
pgli°
, 
vm_∑ge
);

275 
	#VM_PAGE_HAVE_PGLIST


	)

277 
SLIST_HEAD
(
•gli°
, 
vm_∑ge
);

279 #ifde‡
_KERNEL


280 
vm_∑ge_t
 
bogus_∑ge
;

283 
mtx_∑dÆign
 
∑_lock
[];

285 #i‡
deföed
(
__¨m__
)

286 
	#PDRSHIFT
 
PDR_SHIFT


	)

287 #ñi‡!
deföed
(
PDRSHIFT
)

288 
	#PDRSHIFT
 21

	)

291 
	#∑_ödex
(
∑
Ë(’aË>> 
PDRSHIFT
)

	)

292 
	#PA_LOCKPTR
(
∑
Ë((
mtx
 *)(&
∑_lock
[
	`∑_ödex
’aË% 
PA_LOCK_COUNT
]))

	)

293 
	#PA_LOCKOBJPTR
(
∑
Ë((
lock_obje˘
 *)
	`PA_LOCKPTR
(’a)))

	)

294 
	#PA_LOCK
(
∑
Ë
	`mtx_lock
(
	`PA_LOCKPTR
’a))

	)

295 
	#PA_TRYLOCK
(
∑
Ë
	`mtx_åylock
(
	`PA_LOCKPTR
’a))

	)

296 
	#PA_UNLOCK
(
∑
Ë
	`mtx_u∆ock
(
	`PA_LOCKPTR
’a))

	)

297 
	#PA_UNLOCK_COND
(
∑
) \

299 i‡((
∑
) != 0) { \

300 
	`PA_UNLOCK
((
∑
)); \

301 (
∑
) = 0; \

303 } 0)

	)

305 
	#PA_LOCK_ASSERT
(
∑
, 
a
Ë
	`mtx_as£π
(
	`PA_LOCKPTR
’a), (a))

	)

307 #i‡
deföed
(
KLD_MODULE
Ë&& !deföed(
KLD_TIED
)

308 
	#vm_∑ge_lock
(
m
Ë
	`vm_∑ge_lock_KBI
((m), 
LOCK_FILE
, 
LOCK_LINE
)

	)

309 
	#vm_∑ge_u∆ock
(
m
Ë
	`vm_∑ge_u∆ock_KBI
((m), 
LOCK_FILE
, 
LOCK_LINE
)

	)

310 
	#vm_∑ge_åylock
(
m
Ë
	`vm_∑ge_åylock_KBI
((m), 
LOCK_FILE
, 
LOCK_LINE
)

	)

312 
	#vm_∑ge_lock±r
(
m
Ë(
	`PA_LOCKPTR
(
	`VM_PAGE_TO_PHYS
((m))))

	)

313 
	#vm_∑ge_lock
(
m
Ë
	`mtx_lock
(
	`vm_∑ge_lock±r
((m)))

	)

314 
	#vm_∑ge_u∆ock
(
m
Ë
	`mtx_u∆ock
(
	`vm_∑ge_lock±r
((m)))

	)

315 
	#vm_∑ge_åylock
(
m
Ë
	`mtx_åylock
(
	`vm_∑ge_lock±r
((m)))

	)

317 #i‡
deföed
(
INVARIANTS
)

318 
	#vm_∑ge_as£π_locked
(
m
) \

319 
	`vm_∑ge_as£π_locked_KBI
((
m
), 
__FILE__
, 
__LINE__
)

	)

320 
	#vm_∑ge_lock_as£π
(
m
, 
a
) \

321 
	`vm_∑ge_lock_as£π_KBI
((
m
), (
a
), 
__FILE__
, 
__LINE__
)

	)

323 
	#vm_∑ge_as£π_locked
(
m
)

	)

324 
	#vm_∑ge_lock_as£π
(
m
, 
a
)

	)

365 
	#PGA_WRITEABLE
 0x01

	)

366 
	#PGA_REFERENCED
 0x02

	)

367 
	#PGA_EXECUTABLE
 0x04

	)

368 
	#PGA_ENQUEUED
 0x08

	)

369 
	#PGA_DEQUEUE
 0x10

	)

370 
	#PGA_REQUEUE
 0x20

	)

371 
	#PGA_REQUEUE_HEAD
 0x40

	)

373 
	#PGA_QUEUE_STATE_MASK
 (
PGA_ENQUEUED
 | 
PGA_DEQUEUE
 | 
PGA_REQUEUE
 | \

374 
PGA_REQUEUE_HEAD
)

	)

380 
	#PG_FICTITIOUS
 0x0004

	)

381 
	#PG_ZERO
 0x0008

	)

382 
	#PG_MARKER
 0x0010

	)

383 
	#PG_NODUMP
 0x0080

	)

384 
	#PG_UNHOLDFREE
 0x0100

	)

389 
	#ACT_DECLINE
 1

	)

390 
	#ACT_ADVANCE
 3

	)

391 
	#ACT_INIT
 5

	)

392 
	#ACT_MAX
 64

	)

394 #ifde‡
_KERNEL


396 
	~<sys/sy°m.h
>

398 
	~<machöe/©omic.h
>

424 
vm_∑ge_t
 
vm_∑ge_¨øy
;

425 
vm_∑ge_¨øy_size
;

426 
fú°_∑ge
;

428 
	#VM_PAGE_TO_PHYS
(
íåy
Ë(”¡ry)->
phys_addr
)

	)

435 
vm_∑ge_t
 
PHYS_TO_VM_PAGE
(
vm_∑ddr_t
 
∑
);

457 
	#VM_ALLOC_NORMAL
 0

	)

458 
	#VM_ALLOC_INTERRUPT
 1

	)

459 
	#VM_ALLOC_SYSTEM
 2

	)

460 
	#VM_ALLOC_CLASS_MASK
 3

	)

461 
	#VM_ALLOC_WAITOK
 0x0008

	)

462 
	#VM_ALLOC_WAITFAIL
 0x0010

	)

463 
	#VM_ALLOC_WIRED
 0x0020

	)

464 
	#VM_ALLOC_ZERO
 0x0040

	)

465 
	#VM_ALLOC_NOOBJ
 0x0100

	)

466 
	#VM_ALLOC_NOBUSY
 0x0200

	)

467 
	#VM_ALLOC_IGN_SBUSY
 0x1000

	)

468 
	#VM_ALLOC_NODUMP
 0x2000

	)

469 
	#VM_ALLOC_SBUSY
 0x4000

	)

470 
	#VM_ALLOC_NOWAIT
 0x8000

	)

471 
	#VM_ALLOC_COUNT_SHIFT
 16

	)

472 
	#VM_ALLOC_COUNT
(
cou¡
Ë((cou¡Ë<< 
VM_ALLOC_COUNT_SHIFT
)

	)

474 #ifde‡
M_NOWAIT


475 
ölöe
 

476 
	$mÆloc2vm_Êags
(
mÆloc_Êags
)

478 
pÊags
;

480 
	`KASSERT
((
mÆloc_Êags
 & 
M_USE_RESERVE
) == 0 ||

481 (
mÆloc_Êags
 & 
M_NOWAIT
) != 0,

483 
pÊags
 = (
mÆloc_Êags
 & 
M_USE_RESERVE
Ë!0 ? 
VM_ALLOC_INTERRUPT
 :

484 
VM_ALLOC_SYSTEM
;

485 i‡((
mÆloc_Êags
 & 
M_ZERO
) != 0)

486 
pÊags
 |
VM_ALLOC_ZERO
;

487 i‡((
mÆloc_Êags
 & 
M_NODUMP
) != 0)

488 
pÊags
 |
VM_ALLOC_NODUMP
;

489 i‡((
mÆloc_Êags
 & 
M_NOWAIT
))

490 
pÊags
 |
VM_ALLOC_NOWAIT
;

491 i‡((
mÆloc_Êags
 & 
M_WAITOK
))

492 
pÊags
 |
VM_ALLOC_WAITOK
;

493  (
pÊags
);

494 
	}
}

505 
	#PS_ALL_DIRTY
 0x1

	)

506 
	#PS_ALL_VALID
 0x2

	)

507 
	#PS_NONE_BUSY
 0x4

	)

509 
vm_∑ge_busy_downgøde
(
vm_∑ge_t
 
m
);

510 
vm_∑ge_busy_¶ìp
(
vm_∑ge_t
 
m
, c⁄° *
msg
, 
boﬁ
 
n⁄sh¨ed
);

511 
vm_∑ge_Êash
(
vm_∑ge_t
 
m
);

512 
vm_∑ge_hﬁd
(
vm_∑ge_t
 
mem
);

513 
vm_∑ge_unhﬁd
(
vm_∑ge_t
 
mem
);

514 
vm_∑ge_‰ì
(
vm_∑ge_t
 
m
);

515 
vm_∑ge_‰ì_zîo
(
vm_∑ge_t
 
m
);

517 
vm_∑ge_a˘iv©e
 (
vm_∑ge_t
);

518 
vm_∑ge_advi£
(
vm_∑ge_t
 
m
, 
advi˚
);

519 
vm_∑ge_t
 
vm_∑ge_Æloc
(
vm_obje˘_t
, 
vm_pödex_t
, );

520 
vm_∑ge_t
 
vm_∑ge_Æloc_domaö
(
vm_obje˘_t
, 
vm_pödex_t
, , );

521 
vm_∑ge_t
 
vm_∑ge_Æloc_a·î
(
vm_obje˘_t
, 
vm_pödex_t
, , vm_page_t);

522 
vm_∑ge_t
 
vm_∑ge_Æloc_domaö_a·î
(
vm_obje˘_t
, 
vm_pödex_t
, , ,

523 
vm_∑ge_t
);

524 
vm_∑ge_t
 
vm_∑ge_Æloc_c⁄tig
(
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
pödex
, 
ªq
,

525 
u_l⁄g
 
≈ages
, 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, u_l⁄g 
Æignmít
,

526 
vm_∑ddr_t
 
bound¨y
, 
vm_mem©å_t
 
mem©å
);

527 
vm_∑ge_t
 
vm_∑ge_Æloc_c⁄tig_domaö
(
vm_obje˘_t
 
obje˘
,

528 
vm_pödex_t
 
pödex
, 
domaö
, 
ªq
, 
u_l⁄g
 
≈ages
, 
vm_∑ddr_t
 
low
,

529 
vm_∑ddr_t
 
high
, 
u_l⁄g
 
Æignmít
, vm_∑ddr_à
bound¨y
,

530 
vm_mem©å_t
 
mem©å
);

531 
vm_∑ge_t
 
vm_∑ge_Æloc_‰ìli°
(, );

532 
vm_∑ge_t
 
vm_∑ge_Æloc_‰ìli°_domaö
(, , );

533 
boﬁ
 
vm_∑ge_bœckli°_add
(
vm_∑ddr_t
 
∑
, boﬁ 
vîbo£
);

534 
vm_∑ge_ch™ge_lock
(
vm_∑ge_t
 
m
, 
mtx
 **mtx);

535 
vm_∑ge_t
 
vm_∑ge_gøb
 (
vm_obje˘_t
, 
vm_pödex_t
, );

536 
vm_∑ge_gøb_∑ges
(
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
pödex
, 
ÆlocÊags
,

537 
vm_∑ge_t
 *
ma
, 
cou¡
);

538 
vm_∑ge_dó˘iv©e
(
vm_∑ge_t
);

539 
vm_∑ge_dó˘iv©e_n‹eu£
(
vm_∑ge_t
);

540 
vm_∑ge_dequeue
(
vm_∑ge_t
 
m
);

541 
vm_∑ge_dequeue_de„ºed
(
vm_∑ge_t
 
m
);

542 
vm_∑ge_døö_pqb©ch
();

543 
vm_∑ge_t
 
vm_∑ge_föd_Àa°
(
vm_obje˘_t
, 
vm_pödex_t
);

544 
boﬁ
 
vm_∑ge_‰ì_¥ï
(
vm_∑ge_t
 
m
);

545 
vm_∑ge_t
 
vm_∑ge_gëÁke
(
vm_∑ddr_t
 
∑ddr
, 
vm_mem©å_t
 
mem©å
);

546 
vm_∑ge_öôÁke
(
vm_∑ge_t
 
m
, 
vm_∑ddr_t
 
∑ddr
, 
vm_mem©å_t
 
mem©å
);

547 
vm_∑ge_ö£π
 (
vm_∑ge_t
, 
vm_obje˘_t
, 
vm_pödex_t
);

548 
vm_∑ge_œundî
(
vm_∑ge_t
 
m
);

549 
vm_∑ge_t
 
vm_∑ge_lookup
 (
vm_obje˘_t
, 
vm_pödex_t
);

550 
vm_∑ge_t
 
vm_∑ge_√xt
(vm_∑ge_à
m
);

551 
vm_∑ge_∑_åyªlock
(
pm≠_t
, 
vm_∑ddr_t
, vm_paddr_t *);

552 
vm_∑gequeue
 *
vm_∑ge_∑gequeue
(
vm_∑ge_t
 
m
);

553 
vm_∑ge_t
 
vm_∑ge_¥ev
(vm_∑ge_à
m
);

554 
boﬁ
 
vm_∑ge_ps_ã°
(
vm_∑ge_t
 
m
, 
Êags
, vm_∑ge_à
skù_m
);

555 
vm_∑ge_putÁke
(
vm_∑ge_t
 
m
);

556 
vm_∑ge_ªadahód_föish
(
vm_∑ge_t
 
m
);

557 
boﬁ
 
vm_∑ge_ª˛aim_c⁄tig
(
ªq
, 
u_l⁄g
 
≈ages
, 
vm_∑ddr_t
 
low
,

558 
vm_∑ddr_t
 
high
, 
u_l⁄g
 
Æignmít
, vm_∑ddr_à
bound¨y
);

559 
boﬁ
 
vm_∑ge_ª˛aim_c⁄tig_domaö
(
domaö
, 
ªq
, 
u_l⁄g
 
≈ages
,

560 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
u_l⁄g
 
Æignmít
, vm_∑ddr_à
bound¨y
);

561 
vm_∑ge_ª„ªn˚
(
vm_∑ge_t
 
m
);

562 
vm_∑ge_ªmove
 (
vm_∑ge_t
);

563 
vm_∑ge_ª«me
 (
vm_∑ge_t
, 
vm_obje˘_t
, 
vm_pödex_t
);

564 
vm_∑ge_t
 
vm_∑ge_ª∂a˚
(vm_∑ge_à
m√w
, 
vm_obje˘_t
 
obje˘
,

565 
vm_pödex_t
 
pödex
);

566 
vm_∑ge_ªqueue
(
vm_∑ge_t
 
m
);

567 
vm_∑ge_sbusõd
(
vm_∑ge_t
 
m
);

568 
vm_∑ge_t
 
vm_∑ge_sˇn_c⁄tig
(
u_l⁄g
 
≈ages
, vm_∑ge_à
m_°¨t
,

569 
vm_∑ge_t
 
m_íd
, 
u_l⁄g
 
Æignmít
, 
vm_∑ddr_t
 
bound¨y
, 
›ti⁄s
);

570 
vm_∑ge_£t_vÆid_ønge
(
vm_∑ge_t
 
m
, 
ba£
, 
size
);

571 
vm_∑ge_¶ìp_if_busy
(
vm_∑ge_t
 
m
, c⁄° *
msg
);

572 
vm_off£t_t
 
vm_∑ge_°¨tup
(vm_off£t_à
vaddr
);

573 
vm_∑ge_sunbusy
(
vm_∑ge_t
 
m
);

574 
boﬁ
 
vm_∑ge_åy_to_‰ì
(
vm_∑ge_t
 
m
);

575 
vm_∑ge_åysbusy
(
vm_∑ge_t
 
m
);

576 
vm_∑ge_unhﬁd_∑ges
(
vm_∑ge_t
 *
ma
, 
cou¡
);

577 
vm_∑ge_unsw≠∑bÀ
(
vm_∑ge_t
 
m
);

578 
boﬁ
 
vm_∑ge_unwúe
(
vm_∑ge_t
 
m
, 
uöt8_t
 
queue
);

579 
boﬁ
 
vm_∑ge_unwúe_noq
(
vm_∑ge_t
 
m
);

580 
vm_∑ge_upd©eÁke
(
vm_∑ge_t
 
m
, 
vm_∑ddr_t
 
∑ddr
, 
vm_mem©å_t
 
mem©å
);

581 
vm_∑ge_wúe
 (
vm_∑ge_t
);

582 
vm_∑ge_xunbusy_h¨d
(
vm_∑ge_t
 
m
);

583 
vm_∑ge_xunbusy_maybñocked
(
vm_∑ge_t
 
m
);

584 
vm_∑ge_£t_vÆid˛ón
 (
vm_∑ge_t
, , );

585 
vm_∑ge_˛ór_dúty
 (
vm_∑ge_t
, , );

586 
vm_∑ge_£t_övÆid
 (
vm_∑ge_t
, , );

587 
vm_∑ge_is_vÆid
 (
vm_∑ge_t
, , );

588 
vm_∑ge_ã°_dúty
 (
vm_∑ge_t
);

589 
vm_∑ge_bôs_t
 
vm_∑ge_bôs
(
ba£
, 
size
);

590 
vm_∑ge_zîo_övÆid
(
vm_∑ge_t
 
m
, 
boﬁón_t
 
£tvÆid
);

591 
vm_∑ge_‰ì_toq
(
vm_∑ge_t
 
m
);

592 
vm_∑ge_‰ì_∑ges_toq
(
•gli°
 *
‰ì
, 
boﬁ
 
upd©e_wúe_cou¡
);

594 
vm_∑ge_dúty_KBI
(
vm_∑ge_t
 
m
);

595 
vm_∑ge_lock_KBI
(
vm_∑ge_t
 
m
, c⁄° *
fûe
, 
löe
);

596 
vm_∑ge_u∆ock_KBI
(
vm_∑ge_t
 
m
, c⁄° *
fûe
, 
löe
);

597 
vm_∑ge_åylock_KBI
(
vm_∑ge_t
 
m
, c⁄° *
fûe
, 
löe
);

598 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

599 
vm_∑ge_as£π_locked_KBI
(
vm_∑ge_t
 
m
, c⁄° *
fûe
, 
löe
);

600 
vm_∑ge_lock_as£π_KBI
(
vm_∑ge_t
 
m
, 
a
, c⁄° *
fûe
, 
löe
);

603 
	#vm_∑ge_as£π_sbusõd
(
m
) \

604 
	`KASSERT
(
	`vm_∑ge_sbusõd
(
m
), \

606 (
m
), 
__FILE__
, 
__LINE__
))

	)

608 
	#vm_∑ge_as£π_unbusõd
(
m
) \

609 
	`KASSERT
(!
	`vm_∑ge_busõd
(
m
), \

611 (
m
), 
__FILE__
, 
__LINE__
))

	)

613 
	#vm_∑ge_as£π_xbusõd
(
m
) \

614 
	`KASSERT
(
	`vm_∑ge_xbusõd
(
m
), \

616 (
m
), 
__FILE__
, 
__LINE__
))

	)

618 
	#vm_∑ge_busõd
(
m
) \

619 ((
m
)->
busy_lock
 !
VPB_UNBUSIED
)

	)

621 
	#vm_∑ge_sbusy
(
m
) do { \

622 i‡(!
	`vm_∑ge_åysbusy
(
m
)) \

623 
	`∑nic
("%s:Öagê%∞Áûed sh¨ed busyög", 
__func__
, \

624 (
m
)); \

625 } 0)

	)

627 
	#vm_∑ge_åyxbusy
(
m
) \

628 (
	`©omic_cmp£t_acq_öt
(&(
m
)->
busy_lock
, 
VPB_UNBUSIED
, \

629 
VPB_SINGLE_EXCLUSIVER
))

	)

631 
	#vm_∑ge_xbusõd
(
m
) \

632 (((
m
)->
busy_lock
 & 
VPB_SINGLE_EXCLUSIVER
Ë!0)

	)

634 
	#vm_∑ge_xbusy
(
m
) do { \

635 i‡(!
	`vm_∑ge_åyxbusy
(
m
)) \

636 
	`∑nic
("%s:Öagê%∞ÁûedÉx˛usivêbusyög", 
__func__
, \

637 (
m
)); \

638 } 0)

	)

641 
	#vm_∑ge_xunbusy
(
m
) do { \

642 i‡(!
	`©omic_cmp£t_ªl_öt
(&(
m
)->
busy_lock
, \

643 
VPB_SINGLE_EXCLUSIVER
, 
VPB_UNBUSIED
)) \

644 
	`vm_∑ge_xunbusy_h¨d
(
m
); \

645 } 0)

	)

647 #ifde‡
INVARIANTS


648 
vm_∑ge_obje˘_lock_as£π
(
vm_∑ge_t
 
m
);

649 
	#VM_PAGE_OBJECT_LOCK_ASSERT
(
m
Ë
	`vm_∑ge_obje˘_lock_as£π
(m)

	)

650 
vm_∑ge_as£π_pga_wrôóbÀ
(
vm_∑ge_t
 
m
, 
uöt8_t
 
bôs
);

651 
	#VM_PAGE_ASSERT_PGA_WRITEABLE
(
m
, 
bôs
) \

652 
	`vm_∑ge_as£π_pga_wrôóbÀ
(
m
, 
bôs
)

	)

654 
	#VM_PAGE_OBJECT_LOCK_ASSERT
(
m
Ë()0

	)

655 
	#VM_PAGE_ASSERT_PGA_WRITEABLE
(
m
, 
bôs
Ë()0

	)

664 
CTASSERT
(
off£tof
(
vm_∑ge
, 
aÊags
Ë% (
uöt32_t
) == 0);

669 
ölöe
 

670 
	$vm_∑ge_aÊag_˛ór
(
vm_∑ge_t
 
m
, 
uöt8_t
 
bôs
)

672 
uöt32_t
 *
addr
, 
vÆ
;

677 i‡((
bôs
 & 
PGA_REFERENCED
) != 0)

678 
	`vm_∑ge_as£π_locked
(
m
);

685 
addr
 = (*)&
m
->
aÊags
;

686 
	`KASSERT
(((
uöçå_t
)
addr
 & ((
uöt32_t
) - 1)) == 0,

688 
vÆ
 = 
bôs
;

689 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


690 
vÆ
 <<= 24;

692 
	`©omic_˛ór_32
(
addr
, 
vÆ
);

693 
	}
}

698 
ölöe
 

699 
	$vm_∑ge_aÊag_£t
(
vm_∑ge_t
 
m
, 
uöt8_t
 
bôs
)

701 
uöt32_t
 *
addr
, 
vÆ
;

703 
	`VM_PAGE_ASSERT_PGA_WRITEABLE
(
m
, 
bôs
);

710 
addr
 = (*)&
m
->
aÊags
;

711 
	`KASSERT
(((
uöçå_t
)
addr
 & ((
uöt32_t
) - 1)) == 0,

713 
vÆ
 = 
bôs
;

714 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


715 
vÆ
 <<= 24;

717 
	`©omic_£t_32
(
addr
, 
vÆ
);

718 
	}
}

730 
__ölöe
 

731 
	$vm_∑ge_dúty
(
vm_∑ge_t
 
m
)

735 #i‡(
	`deföed
(
KLD_MODULE
Ë&& !deföed(
KLD_TIED
)Ë|| deföed(
INVARIANTS
)

736 
	`vm_∑ge_dúty_KBI
(
m
);

738 
m
->
dúty
 = 
VM_PAGE_BITS_ALL
;

740 
	}
}

747 
__ölöe
 

748 
	$vm_∑ge_undúty
(
vm_∑ge_t
 
m
)

751 
	`VM_PAGE_OBJECT_LOCK_ASSERT
(
m
);

752 
m
->
dúty
 = 0;

753 
	}
}

755 
ölöe
 

756 
	$vm_∑ge_ª∂a˚_checked
(
vm_∑ge_t
 
m√w
, 
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
pödex
,

757 
vm_∑ge_t
 
mﬁd
)

759 
vm_∑ge_t
 
mªt
;

761 
mªt
 = 
	`vm_∑ge_ª∂a˚
(
m√w
, 
obje˘
, 
pödex
);

762 
	`KASSERT
(
mªt
 =
mﬁd
,

763 ("övÆidÖagêª∂a˚mít, mﬁd=%p, mªt=%p", 
mﬁd
, 
mªt
));

766 ()
mﬁd
;

767 ()
mªt
;

768 
	}
}

776 
ölöe
 
uöt8_t


777 
	$vm_∑ge_queue
(
vm_∑ge_t
 
m
)

780 
	`vm_∑ge_as£π_locked
(
m
);

782 i‡((
m
->
aÊags
 & 
PGA_DEQUEUE
) != 0)

783  (
PQ_NONE
);

784 
	`©omic_thªad_„n˚_acq
();

785  (
m
->
queue
);

786 
	}
}

788 
ölöe
 
boﬁ


789 
	$vm_∑ge_a˘ive
(
vm_∑ge_t
 
m
)

792  (
	`vm_∑ge_queue
(
m
Ë=
PQ_ACTIVE
);

793 
	}
}

795 
ölöe
 
boﬁ


796 
	$vm_∑ge_öa˘ive
(
vm_∑ge_t
 
m
)

799  (
	`vm_∑ge_queue
(
m
Ë=
PQ_INACTIVE
);

800 
	}
}

802 
ölöe
 
boﬁ


803 
	$vm_∑ge_ö_œundry
(
vm_∑ge_t
 
m
)

805 
uöt8_t
 
queue
;

807 
queue
 = 
	`vm_∑ge_queue
(
m
);

808  (
queue
 =
PQ_LAUNDRY
 || queuê=
PQ_UNSWAPPABLE
);

809 
	}
}

816 
ölöe
 
boﬁ


817 
	$vm_∑ge_hñd
(
vm_∑ge_t
 
m
)

820  (
m
->
hﬁd_cou¡
 > 0 || m->
wúe_cou¡
 > 0);

821 
	}
}

	@/usr/include/vm/vm_pageout.h

65 #i‚de‡
_VM_VM_PAGEOUT_H_


66 
	#_VM_VM_PAGEOUT_H_


	)

68 #ifde‡
_KERNEL


78 
vm_∑ge_max_wúed
;

79 
vm_∑geout_∑ge_cou¡
;

81 
	#VM_OOM_MEM
 1

	)

82 
	#VM_OOM_SWAPZ
 2

	)

87 
	#VM_LOW_KMEM
 0x01

	)

88 
	#VM_LOW_PAGES
 0x02

	)

98 
vm_waô
(
vm_obje˘_t
 
obj
);

99 
vm_waôpÁu…
(
domaö£t
 *);

100 
vm_waô_domaö
(
domaö
);

101 
vm_waô_mö
();

102 
vm_waô_£vîe
();

104 
vm_∑geout_Êush
(
vm_∑ge_t
 *, , , , *, 
boﬁón_t
 *);

105 
vm_∑geout_oom
(
sh‹ège
);

107 
vm_sw≠out_run
();

108 
vm_sw≠out_run_idÀ
();

	@/usr/include/vm/vm_pager.h

44 #i‚def 
_VM_PAGER_


45 
	#_VM_PAGER_


	)

47 
	~<sys/queue.h
>

49 
TAILQ_HEAD
(
∑gîl°
, 
vm_obje˘
);

51 
	tpgo_öô_t
();

52 
vm_obje˘_t
 
	tpgo_Æloc_t
(*, 
	tvm_ooff£t_t
, 
	tvm_¥Ÿ_t
, vm_ooffset_t,

53 
	tu¸ed
 *);

54 
	tpgo_dóŒoc_t
(
	tvm_obje˘_t
);

55 
	tpgo_gë∑ges_t
(
	tvm_obje˘_t
, 
	tvm_∑ge_t
 *, , *, *);

56 
	tpgo_gë∑ges_iod⁄e_t
(*, 
	tvm_∑ge_t
 *, , );

57 
	tpgo_gë∑ges_async_t
(
	tvm_obje˘_t
, 
	tvm_∑ge_t
 *, , *, *,

58 
	tpgo_gë∑ges_iod⁄e_t
, *);

59 
	tpgo_puçages_t
(
	tvm_obje˘_t
, 
	tvm_∑ge_t
 *, , , *);

60 
boﬁón_t
 
	tpgo_ha•age_t
(
	tvm_obje˘_t
, 
	tvm_pödex_t
, *, *);

61 
	tpgo_p›uœã_t
(
	tvm_obje˘_t
, 
	tvm_pödex_t
, , 
	tvm_¥Ÿ_t
,

62 
	tvm_pödex_t
 *, vm_pindex_t *);

63 
	tpgo_∑geunsw≠≥d_t
(
	tvm_∑ge_t
);

65 
	s∑gî›s
 {

66 
pgo_öô_t
 *
	mpgo_öô
;

67 
pgo_Æloc_t
 *
	mpgo_Æloc
;

68 
pgo_dóŒoc_t
 *
	mpgo_dóŒoc
;

69 
pgo_gë∑ges_t
 *
	mpgo_gë∑ges
;

70 
pgo_gë∑ges_async_t
 *
	mpgo_gë∑ges_async
;

71 
pgo_puçages_t
 *
	mpgo_puçages
;

72 
pgo_ha•age_t
 *
	mpgo_ha•age
;

73 
pgo_p›uœã_t
 *
	mpgo_p›uœã
;

74 
pgo_∑geunsw≠≥d_t
 *
	mpgo_∑geunsw≠≥d
;

77 
∑gî›s
 
deÁu…∑gî›s
;

78 
∑gî›s
 
sw≠∑gî›s
;

79 
∑gî›s
 
vnodïagî›s
;

80 
∑gî›s
 
devi˚∑gî›s
;

81 
∑gî›s
 
phy•agî›s
;

82 
∑gî›s
 
sg∑gî›s
;

83 
∑gî›s
 
mgtdevi˚∑gî›s
;

94 
	#VM_PAGER_OK
 0

	)

95 
	#VM_PAGER_BAD
 1

	)

96 
	#VM_PAGER_FAIL
 2

	)

97 
	#VM_PAGER_PEND
 3

	)

98 
	#VM_PAGER_ERROR
 4

	)

99 
	#VM_PAGER_AGAIN
 5

	)

101 
	#VM_PAGER_PUT_SYNC
 0x0001

	)

102 
	#VM_PAGER_PUT_INVAL
 0x0002

	)

103 
	#VM_PAGER_PUT_NOREUSE
 0x0004

	)

104 
	#VM_PAGER_CLUSTER_OK
 0x0008

	)

106 #ifde‡
_KERNEL


108 
∑gî›s
 *
∑gîèb
[];

109 
mtx_∑dÆign
 
pbuf_mtx
;

111 
vm_obje˘_t
 
vm_∑gî_Æloˇã
(
objty≥_t
, *, 
vm_ooff£t_t
, 
vm_¥Ÿ_t
,

112 
vm_ooff£t_t
, 
u¸ed
 *);

113 
vm_∑gî_buf„röô
();

114 
vm_∑gî_dóŒoˇã
(
vm_obje˘_t
);

115 
vm_∑gî_gë_∑ges
(
vm_obje˘_t
, 
vm_∑ge_t
 *, , *, *);

116 
vm_∑gî_gë_∑ges_async
(
vm_obje˘_t
, 
vm_∑ge_t
 *, , *, *,

117 
pgo_gë∑ges_iod⁄e_t
, *);

118 
vm_∑gî_öô
();

119 
vm_obje˘_t
 
vm_∑gî_obje˘_lookup
(
∑gîl°
 *, *);

121 
__ölöe
 

122 
	$vm_∑gî_put_∑ges
(

123 
vm_obje˘_t
 
obje˘
,

124 
vm_∑ge_t
 *
m
,

125 
cou¡
,

126 
Êags
,

127 *
πvÆs


130 
	`VM_OBJECT_ASSERT_WLOCKED
(
obje˘
);

131 (*
∑gîèb
[
obje˘
->
ty≥
]->
pgo_puçages
)

132 (
obje˘
, 
m
, 
cou¡
, 
Êags
, 
πvÆs
);

133 
	}
}

145 
__ölöe
 
boﬁón_t


146 
	$vm_∑gî_has_∑ge
(

147 
vm_obje˘_t
 
obje˘
,

148 
vm_pödex_t
 
off£t
,

149 *
bef‹e
,

150 *
a·î


152 
boﬁón_t
 
ªt
;

154 
	`VM_OBJECT_ASSERT_WLOCKED
(
obje˘
);

155 
ªt
 = (*
∑gîèb
[
obje˘
->
ty≥
]->
pgo_ha•age
)

156 (
obje˘
, 
off£t
, 
bef‹e
, 
a·î
);

157  (
ªt
);

158 
	}
}

160 
__ölöe
 

161 
	$vm_∑gî_p›uœã
(
vm_obje˘_t
 
obje˘
, 
vm_pödex_t
 
pidx
, 
Áu…_ty≥
,

162 
vm_¥Ÿ_t
 
max_¥Ÿ
, 
vm_pödex_t
 *
fú°
, vm_pödex_à*
œ°
)

165 
	`MPASS
((
obje˘
->
Êags
 & 
OBJ_POPULATE
) != 0);

166 
	`MPASS
(
pidx
 < 
obje˘
->
size
);

167 
	`MPASS
(
obje˘
->
∑gög_ö_¥ogªss
 > 0);

168  ((*
∑gîèb
[
obje˘
->
ty≥
]->
pgo_p›uœã
)(obje˘, 
pidx
,

169 
Áu…_ty≥
, 
max_¥Ÿ
, 
fú°
, 
œ°
));

170 
	}
}

186 
__ölöe
 

187 
	$vm_∑gî_∑ge_unsw≠≥d
(
vm_∑ge_t
 
m
)

190 
	`VM_OBJECT_ASSERT_LOCKED
(
m
->
obje˘
);

191 i‡(
∑gîèb
[
m
->
obje˘
->
ty≥
]->
pgo_∑geunsw≠≥d
)

192 (*
∑gîèb
[
m
->
obje˘
->
ty≥
]->
pgo_∑geunsw≠≥d
)(m);

193 
	}
}

195 
	scdev_∑gî_›s
 {

196 (*
	mcdev_pg_Áu…
)(
vm_obje˘_t
 
	mvm_obj
, 
vm_ooff£t_t
 
	moff£t
,

197 
	m¥Ÿ
, 
vm_∑ge_t
 *
	mmªs
);

198 (*
	mcdev_pg_p›uœã
)(
vm_obje˘_t
 
	mvm_obj
, 
vm_pödex_t
 
	mpidx
,

199 
	mÁu…_ty≥
, 
vm_¥Ÿ_t
 
	mmax_¥Ÿ
, 
vm_pödex_t
 *
	mfú°
,

200 
vm_pödex_t
 *
	mœ°
);

201 (*
	mcdev_pg_˘‹
)(*
	mh™dÀ
, 
vm_ooff£t_t
 
	msize
, 
vm_¥Ÿ_t
 
	m¥Ÿ
,

202 
vm_ooff£t_t
 
	mfoff
, 
u¸ed
 *
	m¸ed
, 
u_sh‹t
 *
	mcﬁ‹
);

203 (*
	mcdev_pg_dt‹
)(*
	mh™dÀ
);

206 
vm_obje˘_t
 
cdev_∑gî_Æloˇã
(*
h™dÀ
, 
obj_ty≥
 
ç
,

207 
cdev_∑gî_›s
 *
›s
, 
vm_ooff£t_t
 
size
, 
vm_¥Ÿ_t
 
¥Ÿ
,

208 
vm_ooff£t_t
 
foff
, 
u¸ed
 *
¸ed
);

209 
vm_obje˘_t
 
cdev_∑gî_lookup
(*
h™dÀ
);

210 
cdev_∑gî_‰ì_∑ge
(
vm_obje˘_t
 
obje˘
, 
vm_∑ge_t
 
m
);

	@/usr/include/vm/vm_param.h

69 #i‚def 
_VM_PARAM_


70 
	#_VM_PARAM_


	)

72 
	~<machöe/vm∑øm.h
>

77 
	#VM_TOTAL
 1

	)

78 
	#VM_METER
 
VM_TOTAL


	)

79 
	#VM_LOADAVG
 2

	)

80 
	#VM_V_FREE_MIN
 3

	)

81 
	#VM_V_FREE_TARGET
 4

	)

82 
	#VM_V_FREE_RESERVED
 5

	)

83 
	#VM_V_INACTIVE_TARGET
 6

	)

84 
	#VM_OBSOLETE_7
 7

	)

85 
	#VM_OBSOLETE_8
 8

	)

86 
	#VM_V_PAGEOUT_FREE_MIN
 9

	)

87 
	#VM_OBSOLETE_10
 10

	)

88 
	#VM_SWAPPING_ENABLED
 11

	)

89 
	#VM_OVERCOMMIT
 12

	)

90 
	#VM_MAXID
 13

	)

95 
	#XSWDEV_VERSION
 2

	)

96 
	sxswdev
 {

97 
u_öt
 
	mxsw_vîsi⁄
;

98 
dev_t
 
	mxsw_dev
;

99 
	mxsw_Êags
;

100 
	mxsw_nblks
;

101 
	mxsw_u£d
;

107 
	#KERN_SUCCESS
 0

	)

108 
	#KERN_INVALID_ADDRESS
 1

	)

109 
	#KERN_PROTECTION_FAILURE
 2

	)

110 
	#KERN_NO_SPACE
 3

	)

111 
	#KERN_INVALID_ARGUMENT
 4

	)

112 
	#KERN_FAILURE
 5

	)

113 
	#KERN_RESOURCE_SHORTAGE
 6

	)

114 
	#KERN_NOT_RECEIVER
 7

	)

115 
	#KERN_NO_ACCESS
 8

	)

117 #i‚de‡
PA_LOCK_COUNT


118 #ifde‡
SMP


119 
	#PA_LOCK_COUNT
 32

	)

121 
	#PA_LOCK_COUNT
 1

	)

125 #i‚de‡
ASSEMBLER


126 #ifde‡
_KERNEL


127 
	#num_∑ges
(
x
) \

128 ((
vm_off£t_t
)((((vm_off£t_t)(
x
)Ë+ 
PAGE_MASK
Ë>> 
PAGE_SHIFT
))

	)

129 
maxtsiz
;

130 
dÊdsiz
;

131 
maxdsiz
;

132 
dÊssiz
;

133 
maxssiz
;

134 
sgrowsiz
;

	@/usr/include/vm/vm_phys.h

40 #i‚def 
_VM_PHYS_H_


41 
	#_VM_PHYS_H_


	)

43 #ifde‡
_KERNEL


46 
	smem_afföôy
 {

47 
vm_∑ddr_t
 
	m°¨t
;

48 
vm_∑ddr_t
 
	míd
;

49 
	mdomaö
;

51 #ifde‡
NUMA


52 
mem_afföôy
 *mem_affinity;

53 *
mem_loˇlôy
;

56 
	svm_‰ìli°
 {

57 
pgli°
 
	m∂
;

58 
	ml˙t
;

61 
	svm_phys_£g
 {

62 
vm_∑ddr_t
 
	m°¨t
;

63 
vm_∑ddr_t
 
	míd
;

64 
vm_∑ge_t
 
	mfú°_∑ge
;

65 
	mdomaö
;

66 
vm_‰ìli°
 (*
‰ì_queues
)[
VM_NFREEPOOL
][
VM_NFREEORDER
];

69 
vm_phys_£g
 
vm_phys_£gs
[];

70 
vm_phys_n£gs
;

75 
vm_phys_add_£g
(
vm_∑ddr_t
 
°¨t
, vm_∑ddr_à
íd
);

76 
vm_∑ge_t
 
vm_phys_Æloc_c⁄tig
(
domaö
, 
u_l⁄g
 
≈ages
, 
vm_∑ddr_t
 
low
,

77 
vm_∑ddr_t
 
high
, 
u_l⁄g
 
Æignmít
, vm_∑ddr_à
bound¨y
);

78 
vm_∑ge_t
 
vm_phys_Æloc_‰ìli°_∑ges
(
domaö
, 
‰ìli°
, 
poﬁ
,

79 
‹dî
);

80 
vm_phys_Æloc_≈ages
(
domaö
, 
poﬁ
, 
≈ages
, 
vm_∑ge_t
 
ma
[]);

81 
vm_∑ge_t
 
vm_phys_Æloc_∑ges
(
domaö
, 
poﬁ
, 
‹dî
);

82 
vm_phys_domaö_m©ch
(
¥e„r
, 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
);

83 
vm_phys_fi˘ôious_ªg_ønge
(
vm_∑ddr_t
 
°¨t
, vm_∑ddr_à
íd
,

84 
vm_mem©å_t
 
mem©å
);

85 
vm_phys_fi˘ôious_uƒeg_ønge
(
vm_∑ddr_t
 
°¨t
, vm_∑ddr_à
íd
);

86 
vm_∑ge_t
 
vm_phys_fi˘ôious_to_vm_∑ge
(
vm_∑ddr_t
 
∑
);

87 
vm_phys_‰ì_c⁄tig
(
vm_∑ge_t
 
m
, 
u_l⁄g
 
≈ages
);

88 
vm_phys_‰ì_∑ges
(
vm_∑ge_t
 
m
, 
‹dî
);

89 
vm_phys_öô
();

90 
vm_∑ge_t
 
vm_phys_∑ddr_to_vm_∑ge
(
vm_∑ddr_t
 
∑
);

91 
vm_phys_ªgi°î_domaös
(
ndomaös
, 
mem_afföôy
 *
afföôy
,

92 *
loˇlôy
);

93 
vm_∑ge_t
 
vm_phys_sˇn_c⁄tig
(
domaö
, 
u_l⁄g
 
≈ages
, 
vm_∑ddr_t
 
low
,

94 
vm_∑ddr_t
 
high
, 
u_l⁄g
 
Æignmít
, vm_∑ddr_à
bound¨y
, 
›ti⁄s
);

95 
vm_phys_£t_poﬁ
(
poﬁ
, 
vm_∑ge_t
 
m
, 
‹dî
);

96 
boﬁón_t
 
vm_phys_un‰ì_∑ge
(
vm_∑ge_t
 
m
);

97 
vm_phys_mem_afföôy
(
f
, 
t
);

105 
ölöe
 

106 
	$vm_phys_domaö
(
vm_∑ge_t
 
m
)

108 #ifde‡
NUMA


109 
domn
, 
£göd
;

112 
£göd
 = 
m
->segind;

113 
	`KASSERT
(
£göd
 < 
vm_phys_n£gs
, ("£göd %d m %p", segöd, 
m
));

114 
domn
 = 
vm_phys_£gs
[
£göd
].
domaö
;

115 
	`KASSERT
(
domn
 < 
vm_ndomaös
, ("domaö %d m %p", domn, 
m
));

116  (
domn
);

120 
	}
}

	@/usr/include/x86/_align.h

43 #i‚de‡
_X86_INCLUDE__ALIGN_H_


44 
	#_X86_INCLUDE__ALIGN_H_


	)

51 
	#_ALIGNBYTES
 ((
__ªgi°î_t
Ë- 1)

	)

52 
	#_ALIGN
(
p
Ë(((
__uöçå_t
)’Ë+ 
_ALIGNBYTES
Ë& ~_ALIGNBYTES)

	)

	@/usr/include/x86/_inttypes.h

35 #i‚de‡
_MACHINE_INTTYPES_H_


36 
	#_MACHINE_INTTYPES_H_


	)

42 #ifde‡
__LP64__


43 
	#__PRI64
 "l"

	)

44 
	#__PRI±r
 "l"

	)

46 
	#__PRI64
 "Œ"

	)

47 
	#__PRI±r


	)

52 
	#PRId8
 "d"

	)

53 
	#PRId16
 "d"

	)

54 
	#PRId32
 "d"

	)

55 
	#PRId64
 
__PRI64
"d"

	)

56 
	#PRIdLEAST8
 "d"

	)

57 
	#PRIdLEAST16
 "d"

	)

58 
	#PRIdLEAST32
 "d"

	)

59 
	#PRIdLEAST64
 
__PRI64
"d"

	)

60 
	#PRIdFAST8
 "d"

	)

61 
	#PRIdFAST16
 "d"

	)

62 
	#PRIdFAST32
 "d"

	)

63 
	#PRIdFAST64
 
__PRI64
"d"

	)

64 
	#PRIdMAX
 "jd"

	)

65 
	#PRIdPTR
 
__PRI±r
"d"

	)

67 
	#PRIi8
 "i"

	)

68 
	#PRIi16
 "i"

	)

69 
	#PRIi32
 "i"

	)

70 
	#PRIi64
 
__PRI64
"i"

	)

71 
	#PRIiLEAST8
 "i"

	)

72 
	#PRIiLEAST16
 "i"

	)

73 
	#PRIiLEAST32
 "i"

	)

74 
	#PRIiLEAST64
 
__PRI64
"i"

	)

75 
	#PRIiFAST8
 "i"

	)

76 
	#PRIiFAST16
 "i"

	)

77 
	#PRIiFAST32
 "i"

	)

78 
	#PRIiFAST64
 
__PRI64
"i"

	)

79 
	#PRIiMAX
 "ji"

	)

80 
	#PRIiPTR
 
__PRI±r
"i"

	)

84 
	#PRIo8
 "o"

	)

85 
	#PRIo16
 "o"

	)

86 
	#PRIo32
 "o"

	)

87 
	#PRIo64
 
__PRI64
"o"

	)

88 
	#PRIoLEAST8
 "o"

	)

89 
	#PRIoLEAST16
 "o"

	)

90 
	#PRIoLEAST32
 "o"

	)

91 
	#PRIoLEAST64
 
__PRI64
"o"

	)

92 
	#PRIoFAST8
 "o"

	)

93 
	#PRIoFAST16
 "o"

	)

94 
	#PRIoFAST32
 "o"

	)

95 
	#PRIoFAST64
 
__PRI64
"o"

	)

96 
	#PRIoMAX
 "jo"

	)

97 
	#PRIoPTR
 
__PRI±r
"o"

	)

99 
	#PRIu8
 "u"

	)

100 
	#PRIu16
 "u"

	)

101 
	#PRIu32
 "u"

	)

102 
	#PRIu64
 
__PRI64
"u"

	)

103 
	#PRIuLEAST8
 "u"

	)

104 
	#PRIuLEAST16
 "u"

	)

105 
	#PRIuLEAST32
 "u"

	)

106 
	#PRIuLEAST64
 
__PRI64
"u"

	)

107 
	#PRIuFAST8
 "u"

	)

108 
	#PRIuFAST16
 "u"

	)

109 
	#PRIuFAST32
 "u"

	)

110 
	#PRIuFAST64
 
__PRI64
"u"

	)

111 
	#PRIuMAX
 "ju"

	)

112 
	#PRIuPTR
 
__PRI±r
"u"

	)

114 
	#PRIx8
 "x"

	)

115 
	#PRIx16
 "x"

	)

116 
	#PRIx32
 "x"

	)

117 
	#PRIx64
 
__PRI64
"x"

	)

118 
	#PRIxLEAST8
 "x"

	)

119 
	#PRIxLEAST16
 "x"

	)

120 
	#PRIxLEAST32
 "x"

	)

121 
	#PRIxLEAST64
 
__PRI64
"x"

	)

122 
	#PRIxFAST8
 "x"

	)

123 
	#PRIxFAST16
 "x"

	)

124 
	#PRIxFAST32
 "x"

	)

125 
	#PRIxFAST64
 
__PRI64
"x"

	)

126 
	#PRIxMAX
 "jx"

	)

127 
	#PRIxPTR
 
__PRI±r
"x"

	)

129 
	#PRIX8
 "X"

	)

130 
	#PRIX16
 "X"

	)

131 
	#PRIX32
 "X"

	)

132 
	#PRIX64
 
__PRI64
"X"

	)

133 
	#PRIXLEAST8
 "X"

	)

134 
	#PRIXLEAST16
 "X"

	)

135 
	#PRIXLEAST32
 "X"

	)

136 
	#PRIXLEAST64
 
__PRI64
"X"

	)

137 
	#PRIXFAST8
 "X"

	)

138 
	#PRIXFAST16
 "X"

	)

139 
	#PRIXFAST32
 "X"

	)

140 
	#PRIXFAST64
 
__PRI64
"X"

	)

141 
	#PRIXMAX
 "jX"

	)

142 
	#PRIXPTR
 
__PRI±r
"X"

	)

146 
	#SCNd8
 "hhd"

	)

147 
	#SCNd16
 "hd"

	)

148 
	#SCNd32
 "d"

	)

149 
	#SCNd64
 
__PRI64
"d"

	)

150 
	#SCNdLEAST8
 "hhd"

	)

151 
	#SCNdLEAST16
 "hd"

	)

152 
	#SCNdLEAST32
 "d"

	)

153 
	#SCNdLEAST64
 
__PRI64
"d"

	)

154 
	#SCNdFAST8
 "d"

	)

155 
	#SCNdFAST16
 "d"

	)

156 
	#SCNdFAST32
 "d"

	)

157 
	#SCNdFAST64
 
__PRI64
"d"

	)

158 
	#SCNdMAX
 "jd"

	)

159 
	#SCNdPTR
 
__PRI±r
"d"

	)

161 
	#SCNi8
 "hhi"

	)

162 
	#SCNi16
 "hi"

	)

163 
	#SCNi32
 "i"

	)

164 
	#SCNi64
 
__PRI64
"i"

	)

165 
	#SCNiLEAST8
 "hhi"

	)

166 
	#SCNiLEAST16
 "hi"

	)

167 
	#SCNiLEAST32
 "i"

	)

168 
	#SCNiLEAST64
 
__PRI64
"i"

	)

169 
	#SCNiFAST8
 "i"

	)

170 
	#SCNiFAST16
 "i"

	)

171 
	#SCNiFAST32
 "i"

	)

172 
	#SCNiFAST64
 
__PRI64
"i"

	)

173 
	#SCNiMAX
 "ji"

	)

174 
	#SCNiPTR
 
__PRI±r
"i"

	)

178 
	#SCNo8
 "hho"

	)

179 
	#SCNo16
 "ho"

	)

180 
	#SCNo32
 "o"

	)

181 
	#SCNo64
 
__PRI64
"o"

	)

182 
	#SCNoLEAST8
 "hho"

	)

183 
	#SCNoLEAST16
 "ho"

	)

184 
	#SCNoLEAST32
 "o"

	)

185 
	#SCNoLEAST64
 
__PRI64
"o"

	)

186 
	#SCNoFAST8
 "o"

	)

187 
	#SCNoFAST16
 "o"

	)

188 
	#SCNoFAST32
 "o"

	)

189 
	#SCNoFAST64
 
__PRI64
"o"

	)

190 
	#SCNoMAX
 "jo"

	)

191 
	#SCNoPTR
 
__PRI±r
"o"

	)

193 
	#SCNu8
 "hhu"

	)

194 
	#SCNu16
 "hu"

	)

195 
	#SCNu32
 "u"

	)

196 
	#SCNu64
 
__PRI64
"u"

	)

197 
	#SCNuLEAST8
 "hhu"

	)

198 
	#SCNuLEAST16
 "hu"

	)

199 
	#SCNuLEAST32
 "u"

	)

200 
	#SCNuLEAST64
 
__PRI64
"u"

	)

201 
	#SCNuFAST8
 "u"

	)

202 
	#SCNuFAST16
 "u"

	)

203 
	#SCNuFAST32
 "u"

	)

204 
	#SCNuFAST64
 
__PRI64
"u"

	)

205 
	#SCNuMAX
 "ju"

	)

206 
	#SCNuPTR
 
__PRI±r
"u"

	)

208 
	#SCNx8
 "hhx"

	)

209 
	#SCNx16
 "hx"

	)

210 
	#SCNx32
 "x"

	)

211 
	#SCNx64
 
__PRI64
"x"

	)

212 
	#SCNxLEAST8
 "hhx"

	)

213 
	#SCNxLEAST16
 "hx"

	)

214 
	#SCNxLEAST32
 "x"

	)

215 
	#SCNxLEAST64
 
__PRI64
"x"

	)

216 
	#SCNxFAST8
 "x"

	)

217 
	#SCNxFAST16
 "x"

	)

218 
	#SCNxFAST32
 "x"

	)

219 
	#SCNxFAST64
 
__PRI64
"x"

	)

220 
	#SCNxMAX
 "jx"

	)

221 
	#SCNxPTR
 
__PRI±r
"x"

	)

	@/usr/include/x86/_limits.h

35 #i‚def 
_MACHINE__LIMITS_H_


36 
	#_MACHINE__LIMITS_H_


	)

47 
	#__CHAR_BIT
 8

	)

49 
	#__SCHAR_MAX
 0x7‡

	)

50 
	#__SCHAR_MIN
 (-0x7‡- 1Ë

	)

52 
	#__UCHAR_MAX
 0xf‡

	)

54 
	#__USHRT_MAX
 0xfff‡

	)

55 
	#__SHRT_MAX
 0x7ff‡

	)

56 
	#__SHRT_MIN
 (-0x7ff‡- 1Ë

	)

58 
	#__UINT_MAX
 0xfffffff‡

	)

59 
	#__INT_MAX
 0x7ffffff‡

	)

60 
	#__INT_MIN
 (-0x7ffffff‡- 1Ë

	)

62 #ifdef 
__LP64__


63 
	#__ULONG_MAX
 0xfffffffffffffff‡

	)

64 
	#__LONG_MAX
 0x7ffffffffffffff‡

	)

65 
	#__LONG_MIN
 (-0x7ffffffffffffff‡- 1Ë

	)

67 
	#__ULONG_MAX
 0xffffffffUL

	)

68 
	#__LONG_MAX
 0x7fffffffL

	)

69 
	#__LONG_MIN
 (-0x7fffffffL - 1)

	)

73 
	#__ULLONG_MAX
 0xffffffffffffffffULL

	)

74 
	#__LLONG_MAX
 0x7fffffffffffffffLL

	)

75 
	#__LLONG_MIN
 (-0x7fffffffffffffffLL - 1Ë

	)

77 #ifdef 
__LP64__


78 
	#__SSIZE_MAX
 
__LONG_MAX


	)

79 
	#__SIZE_T_MAX
 
__ULONG_MAX


	)

80 
	#__OFF_MAX
 
__LONG_MAX


	)

81 
	#__OFF_MIN
 
__LONG_MIN


	)

83 
	#__UQUAD_MAX
 
__ULONG_MAX


	)

84 
	#__QUAD_MAX
 
__LONG_MAX


	)

85 
	#__QUAD_MIN
 
__LONG_MIN


	)

86 
	#__LONG_BIT
 64

	)

88 
	#__SSIZE_MAX
 
__INT_MAX


	)

89 
	#__SIZE_T_MAX
 
__UINT_MAX


	)

90 
	#__OFF_MAX
 
__LLONG_MAX


	)

91 
	#__OFF_MIN
 
__LLONG_MIN


	)

92 
	#__UQUAD_MAX
 
__ULLONG_MAX


	)

93 
	#__QUAD_MAX
 
__LLONG_MAX


	)

94 
	#__QUAD_MIN
 
__LLONG_MIN


	)

95 
	#__LONG_BIT
 32

	)

98 
	#__WORD_BIT
 32

	)

101 
	#__MINSIGSTKSZ
 (512 * 4)

	)

	@/usr/include/x86/_stdint.h

42 #i‚de‡
_MACHINE__STDINT_H_


43 
	#_MACHINE__STDINT_H_


	)

45 
	~<machöe/_limôs.h
>

47 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

49 
	#INT8_C
(
c
Ë(c)

	)

50 
	#INT16_C
(
c
Ë(c)

	)

51 
	#INT32_C
(
c
Ë(c)

	)

53 
	#UINT8_C
(
c
Ë(c)

	)

54 
	#UINT16_C
(
c
Ë(c)

	)

55 
	#UINT32_C
(
c
Ë(¯## 
U
)

	)

57 #ifdef 
__LP64__


58 
	#INT64_C
(
c
Ë(¯## 
L
)

	)

59 
	#UINT64_C
(
c
Ë(¯## 
UL
)

	)

61 
	#INT64_C
(
c
Ë(¯## 
LL
)

	)

62 
	#UINT64_C
(
c
Ë(¯## 
ULL
)

	)

65 
	#INTMAX_C
(
c
Ë
	`INT64_C
(c)

	)

66 
	#UINTMAX_C
(
c
Ë
	`UINT64_C
(c)

	)

70 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

76 
	#INT8_MIN
 (-0x7f-1)

	)

77 
	#INT16_MIN
 (-0x7fff-1)

	)

78 
	#INT32_MIN
 (-0x7fffffff-1)

	)

80 
	#INT8_MAX
 0x7f

	)

81 
	#INT16_MAX
 0x7fff

	)

82 
	#INT32_MAX
 0x7fffffff

	)

84 
	#UINT8_MAX
 0xff

	)

85 
	#UINT16_MAX
 0xffff

	)

86 
	#UINT32_MAX
 0xffffffffU

	)

88 #ifde‡
__LP64__


89 
	#INT64_MIN
 (-0x7fffffffffffffff-1)

	)

90 
	#INT64_MAX
 0x7fffffffffffffff

	)

91 
	#UINT64_MAX
 0xffffffffffffffff

	)

93 
	#INT64_MIN
 (-0x7fffffffffffffffLL-1)

	)

94 
	#INT64_MAX
 0x7fffffffffffffffLL

	)

95 
	#UINT64_MAX
 0xffffffffffffffffULL

	)

103 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

104 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

105 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

106 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

109 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

110 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

111 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

112 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

115 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

116 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

117 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

118 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

125 
	#INT_FAST8_MIN
 
INT32_MIN


	)

126 
	#INT_FAST16_MIN
 
INT32_MIN


	)

127 
	#INT_FAST32_MIN
 
INT32_MIN


	)

128 
	#INT_FAST64_MIN
 
INT64_MIN


	)

131 
	#INT_FAST8_MAX
 
INT32_MAX


	)

132 
	#INT_FAST16_MAX
 
INT32_MAX


	)

133 
	#INT_FAST32_MAX
 
INT32_MAX


	)

134 
	#INT_FAST64_MAX
 
INT64_MAX


	)

137 
	#UINT_FAST8_MAX
 
UINT32_MAX


	)

138 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

139 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

140 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

146 #ifdef 
__LP64__


147 
	#INTPTR_MIN
 
INT64_MIN


	)

148 
	#INTPTR_MAX
 
INT64_MAX


	)

149 
	#UINTPTR_MAX
 
UINT64_MAX


	)

151 
	#INTPTR_MIN
 
INT32_MIN


	)

152 
	#INTPTR_MAX
 
INT32_MAX


	)

153 
	#UINTPTR_MAX
 
UINT32_MAX


	)

160 
	#INTMAX_MIN
 
INT64_MIN


	)

161 
	#INTMAX_MAX
 
INT64_MAX


	)

162 
	#UINTMAX_MAX
 
UINT64_MAX


	)

168 #ifdef 
__LP64__


170 
	#PTRDIFF_MIN
 
INT64_MIN


	)

171 
	#PTRDIFF_MAX
 
INT64_MAX


	)

174 
	#SIG_ATOMIC_MIN
 
__LONG_MIN


	)

175 
	#SIG_ATOMIC_MAX
 
__LONG_MAX


	)

178 
	#SIZE_MAX
 
UINT64_MAX


	)

180 
	#PTRDIFF_MIN
 
INT32_MIN


	)

181 
	#PTRDIFF_MAX
 
INT32_MAX


	)

182 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

183 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

184 
	#SIZE_MAX
 
UINT32_MAX


	)

188 
	#WINT_MIN
 
INT32_MIN


	)

189 
	#WINT_MAX
 
INT32_MAX


	)

	@/usr/include/x86/_types.h

41 #i‚de‡
_MACHINE__TYPES_H_


42 
	#_MACHINE__TYPES_H_


	)

44 #i‚de‡
_SYS_CDEFS_H_


45 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


48 
	~<machöe/_limôs.h
>

50 
	#__NO_STRICT_ALIGNMENT


	)

55 sig√d 
	t__öt8_t
;

56 
	t__uöt8_t
;

57 
	t__öt16_t
;

58 
	t__uöt16_t
;

59 
	t__öt32_t
;

60 
	t__uöt32_t
;

61 #ifdef 
__LP64__


62 
	t__öt64_t
;

63 
	t__uöt64_t
;

65 
__exãnsi⁄__


66 
	t__öt64_t
;

67 
__exãnsi⁄__


68 
	t__uöt64_t
;

74 #ifdef 
__LP64__


75 
__öt32_t
 
	t__˛ock_t
;

76 
__öt64_t
 
	t__¸ôiˇl_t
;

77 #i‚de‡
_STANDALONE


78 
	t__doubÀ_t
;

79 
	t__Êﬂt_t
;

81 
__öt64_t
 
	t__ötÂå_t
;

82 
__öt64_t
 
	t__öçå_t
;

84 
	t__˛ock_t
;

85 
__öt32_t
 
	t__¸ôiˇl_t
;

86 #i‚de‡
_STANDALONE


87 
	t__doubÀ_t
;

88 
	t__Êﬂt_t
;

90 
__öt32_t
 
	t__ötÂå_t
;

91 
__öt32_t
 
	t__öçå_t
;

93 
__öt64_t
 
	t__ötmax_t
;

94 
__öt32_t
 
	t__öt_Á°8_t
;

95 
__öt32_t
 
	t__öt_Á°16_t
;

96 
__öt32_t
 
	t__öt_Á°32_t
;

97 
__öt64_t
 
	t__öt_Á°64_t
;

98 
__öt8_t
 
	t__öt_Àa°8_t
;

99 
__öt16_t
 
	t__öt_Àa°16_t
;

100 
__öt32_t
 
	t__öt_Àa°32_t
;

101 
__öt64_t
 
	t__öt_Àa°64_t
;

102 #ifdef 
__LP64__


103 
__öt64_t
 
	t__±rdiff_t
;

104 
__öt64_t
 
	t__ªgi°î_t
;

105 
__öt64_t
 
	t__£gsz_t
;

106 
__uöt64_t
 
	t__size_t
;

107 
__öt64_t
 
	t__ssize_t
;

108 
__öt64_t
 
	t__time_t
;

109 
__uöt64_t
 
	t__uötÂå_t
;

110 
__uöt64_t
 
	t__uöçå_t
;

112 
__öt32_t
 
	t__±rdiff_t
;

113 
__öt32_t
 
	t__ªgi°î_t
;

114 
__öt32_t
 
	t__£gsz_t
;

115 
__uöt32_t
 
	t__size_t
;

116 
__öt32_t
 
	t__ssize_t
;

117 
__öt32_t
 
	t__time_t
;

118 
__uöt32_t
 
	t__uötÂå_t
;

119 
__uöt32_t
 
	t__uöçå_t
;

121 
__uöt64_t
 
	t__uötmax_t
;

122 
__uöt32_t
 
	t__uöt_Á°8_t
;

123 
__uöt32_t
 
	t__uöt_Á°16_t
;

124 
__uöt32_t
 
	t__uöt_Á°32_t
;

125 
__uöt64_t
 
	t__uöt_Á°64_t
;

126 
__uöt8_t
 
	t__uöt_Àa°8_t
;

127 
__uöt16_t
 
	t__uöt_Àa°16_t
;

128 
__uöt32_t
 
	t__uöt_Àa°32_t
;

129 
__uöt64_t
 
	t__uöt_Àa°64_t
;

130 #ifdef 
__LP64__


131 
__uöt64_t
 
	t__u_ªgi°î_t
;

132 
__uöt64_t
 
	t__vm_off£t_t
;

133 
__uöt64_t
 
	t__vm_∑ddr_t
;

134 
__uöt64_t
 
	t__vm_size_t
;

136 
__uöt32_t
 
	t__u_ªgi°î_t
;

137 
__uöt32_t
 
	t__vm_off£t_t
;

138 #ifde‡
PAE


139 
__uöt64_t
 
	t__vm_∑ddr_t
;

141 
__uöt32_t
 
	t__vm_∑ddr_t
;

143 
__uöt32_t
 
	t__vm_size_t
;

145 
	t___wch¨_t
;

147 
	#__WCHAR_MIN
 
__INT_MIN


	)

148 
	#__WCHAR_MAX
 
__INT_MAX


	)

	@/usr/include/x86/acpica_machdep.h

38 #i‚de‡
__ACPICA_MACHDEP_H__


39 
	#__ACPICA_MACHDEP_H__


	)

41 #ifde‡
_KERNEL


50 
	#ACPI_SYSTEM_XFACE


	)

51 
	#ACPI_EXTERNAL_XFACE


	)

52 
	#ACPI_INTERNAL_XFACE


	)

53 
	#ACPI_INTERNAL_VAR_XFACE


	)

57 
	#ACPI_ASM_MACROS


	)

58 
	#BREAKPOINT3


	)

59 
	#ACPI_DISABLE_IRQS
(Ë
	`dißbÀ_öå
()

	)

60 
	#ACPI_ENABLE_IRQS
(Ë
	`íabÀ_öå
()

	)

62 
	#ACPI_FLUSH_CPU_CACHE
(Ë
	`wbövd
()

	)

65 
a˝i_acquúe_globÆ_lock
(vﬁ©ûê
uöt32_t
 *);

66 
a˝i_ªÀa£_globÆ_lock
(vﬁ©ûê
uöt32_t
 *);

67 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acq
) do { \

68 (
Acq
Ë
	`a˝i_acquúe_globÆ_lock
(&((
GL±r
)->
GlobÆLock
)); \

69 } 0)

	)

70 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Acq
) do { \

71 (
Acq
Ë
	`a˝i_ªÀa£_globÆ_lock
(&((
GL±r
)->
GlobÆLock
)); \

72 } 0)

	)

74 
	göå_åiggî
;

75 
	göå_pﬁ¨ôy
;

77 
a˝i_SëDeÁu…I¡rModñ
(
modñ
);

78 
a˝i_˝u_c1
();

79 
a˝i_˝u_idÀ_mwaô
(
uöt32_t
 
mwaô_höt
);

80 *
a˝i_m≠_èbÀ
(
vm_∑ddr_t
 
∑
, c⁄° *
sig
);

81 
a˝i_unm≠_èbÀ
(*
èbÀ
);

82 
vm_∑ddr_t
 
a˝i_föd_èbÀ
(c⁄° *
sig
);

83 
madt_∑r£_öãºu±_vÆues
(*
íåy
,

84 
öå_åiggî
 *
åig
, 
öå_pﬁ¨ôy
 *
pﬁ
);

86 
madt_found_sci_ovîride
;

	@/usr/include/x86/apicvar.h

31 #i‚de‡
_X86_APICVAR_H_


32 
	#_X86_APICVAR_H_


	)

79 
	#xAPIC_MAX_APIC_ID
 0x„

	)

80 
	#xAPIC_ID_ALL
 0xff

	)

81 
	#MAX_APIC_ID
 0x200

	)

82 
	#APIC_ID_ALL
 0xffffffff

	)

84 
	#IOAPIC_MAX_ID
 
xAPIC_MAX_APIC_ID


	)

87 
	#APIC_IO_INTS
 (
IDT_IO_INTS
 + 16)

	)

88 
	#APIC_NUM_IOINTS
 191

	)

91 
	#APIC_TIMER_INT
 (
APIC_IO_INTS
 + 
APIC_NUM_IOINTS
)

	)

109 
	#APIC_LOCAL_INTS
 240

	)

110 
	#APIC_ERROR_INT
 
APIC_LOCAL_INTS


	)

111 
	#APIC_THERMAL_INT
 (
APIC_LOCAL_INTS
 + 1)

	)

112 
	#APIC_CMC_INT
 (
APIC_LOCAL_INTS
 + 2)

	)

113 
	#APIC_IPI_INTS
 (
APIC_LOCAL_INTS
 + 3)

	)

115 
	#IPI_RENDEZVOUS
 (
APIC_IPI_INTS
Ë

	)

116 
	#IPI_INVLTLB
 (
APIC_IPI_INTS
 + 1Ë

	)

117 
	#IPI_INVLPG
 (
APIC_IPI_INTS
 + 2)

	)

118 
	#IPI_INVLRNG
 (
APIC_IPI_INTS
 + 3)

	)

119 
	#IPI_INVLCACHE
 (
APIC_IPI_INTS
 + 4)

	)

121 
	#IPI_BITMAP_VECTOR
 (
APIC_IPI_INTS
 + 5)

	)

124 
	#IPI_AST
 0

	)

125 
	#IPI_PREEMPT
 1

	)

126 
	#IPI_HARDCLOCK
 2

	)

127 
	#IPI_BITMAP_LAST
 
IPI_HARDCLOCK


	)

128 
	#IPI_IS_BITMAPED
(
x
Ë((xË<
IPI_BITMAP_LAST
)

	)

130 
	#IPI_STOP
 (
APIC_IPI_INTS
 + 6Ë

	)

131 
	#IPI_SUSPEND
 (
APIC_IPI_INTS
 + 7Ë

	)

132 
	#IPI_DYN_FIRST
 (
APIC_IPI_INTS
 + 8)

	)

133 
	#IPI_DYN_LAST
 (253Ë

	)

139 
	#IPI_NMI_FIRST
 254

	)

140 
	#IPI_TRACE
 254

	)

141 
	#IPI_STOP_HARD
 255

	)

147 
	#APIC_SPURIOUS_INT
 255

	)

149 #i‚de‡
LOCORE


151 
	#APIC_IPI_DEST_SELF
 -1

	)

152 
	#APIC_IPI_DEST_ALL
 -2

	)

153 
	#APIC_IPI_DEST_OTHERS
 -3

	)

155 
	#APIC_BUS_UNKNOWN
 -1

	)

156 
	#APIC_BUS_ISA
 0

	)

157 
	#APIC_BUS_EISA
 1

	)

158 
	#APIC_BUS_PCI
 2

	)

159 
	#APIC_BUS_MAX
 
APIC_BUS_PCI


	)

161 
	#IRQ_EXTINT
 -1

	)

162 
	#IRQ_NMI
 -2

	)

163 
	#IRQ_SMI
 -3

	)

164 
	#IRQ_DISABLED
 -4

	)

170 
	s≠ic_íumî©‹
 {

171 c⁄° *
	m≠ic_«me
;

172 (*
	m≠ic_¥obe
)();

173 (*
	m≠ic_¥obe_˝us
)();

174 (*
	m≠ic_£tup_loˇl
)();

175 (*
	m≠ic_£tup_io
)();

176 
SLIST_ENTRY
(
≠ic_íumî©‹
Ë
	m≠ic_√xt
;

179 
öth™d_t


180 
IDTVEC
(
≠ic_i§1
), IDTVEC(
≠ic_i§2
), IDTVEC(
≠ic_i§3
),

181 
IDTVEC
(
≠ic_i§4
), IDTVEC(
≠ic_i§5
), IDTVEC(
≠ic_i§6
),

182 
IDTVEC
(
≠ic_i§7
), IDTVEC(
cmcöt
), IDTVEC(
îr‹öt
),

183 
IDTVEC
(
•uriousöt
), IDTVEC(
timîöt
),

184 
IDTVEC
(
≠ic_i§1_±i
), IDTVEC(
≠ic_i§2_±i
), IDTVEC(
≠ic_i§3_±i
),

185 
IDTVEC
(
≠ic_i§4_±i
), IDTVEC(
≠ic_i§5_±i
), IDTVEC(
≠ic_i§6_±i
),

186 
IDTVEC
(
≠ic_i§7_±i
), IDTVEC(
cmcöt_±i
), IDTVEC(
îr‹öt_±i
),

187 
IDTVEC
(
•uriousöt_±i
), IDTVEC(
timîöt_±i
);

189 
vm_∑ddr_t
 
œpic_∑ddr
;

190 *
≠ic_˝uids
;

192 
≠ic_ªgi°î_íumî©‹
(
≠ic_íumî©‹
 *
íumî©‹
);

193 *
iﬂpic_¸óã
(
vm_∑ddr_t
 
addr
, 
öt32_t
 
≠ic_id
, 
ötba£
);

194 
iﬂpic_dißbÀ_pö
(*
cookõ
, 
u_öt
 
pö
);

195 
iﬂpic_gë_ve˘‹
(*
cookõ
, 
u_öt
 
pö
);

196 
iﬂpic_ªgi°î
(*
cookõ
);

197 
iﬂpic_ªm≠_ve˘‹
(*
cookõ
, 
u_öt
 
pö
, 
ve˘‹
);

198 
iﬂpic_£t_bus
(*
cookõ
, 
u_öt
 
pö
, 
bus_ty≥
);

199 
iﬂpic_£t_extöt
(*
cookõ
, 
u_öt
 
pö
);

200 
iﬂpic_£t_nmi
(*
cookõ
, 
u_öt
 
pö
);

201 
iﬂpic_£t_pﬁ¨ôy
(*
cookõ
, 
u_öt
 
pö
, 
öå_pﬁ¨ôy
 
pﬁ
);

202 
iﬂpic_£t_åiggîmode
(*
cookõ
, 
u_öt
 
pö
,

203 
öå_åiggî
 
åiggî
);

204 
iﬂpic_£t_smi
(*
cookõ
, 
u_öt
 
pö
);

210 
	s≠ic_›s
 {

211 (*
	m¸óã
)(
	mu_öt
, );

212 (*
	möô
)(
	mvm_∑ddr_t
);

213 (*
	mx≠ic_mode
)();

214 
boﬁ
 (*
is_x2≠ic
)();

215 (*
	m£tup
)();

216 (*
	mdump
)(const *);

217 (*
	mdißbÀ
)();

218 (*
	meoi
)();

219 (*
	mid
)();

220 (*
	möå_≥ndög
)(
	mu_öt
);

221 (*
	m£t_logiˇl_id
)(
	mu_öt
, u_int, u_int);

222 
u_öt
 (*
˝uid
)(
	mu_öt
);

225 
u_öt
 (*
Æloc_ve˘‹
)(
	mu_öt
, u_int);

226 
u_öt
 (*
Æloc_ve˘‹s
)(
	mu_öt
, u_int *, u_int, u_int);

227 (*
	míabÀ_ve˘‹
)(
	mu_öt
, u_int);

228 (*
	mdißbÀ_ve˘‹
)(
	mu_öt
, u_int);

229 (*
	m‰ì_ve˘‹
)(
	mu_öt
, u_int, u_int);

233 (*
	míabÀ_pmc
)();

234 (*
	mdißbÀ_pmc
)();

235 (*
	mªíabÀ_pmc
)();

238 (*
	míabÀ_cmc
)();

241 (*
	míabÀ_mˇ_ñvt
)();

244 (*
	mùi_øw
)(
	mªgi°î_t
, 
	mu_öt
);

245 (*
	mùi_ve˘‹ed
)(
	mu_öt
, );

246 (*
	mùi_waô
)();

247 (*
	mùi_Æloc
)(
öth™d_t
 *
	mùifunc
);

248 (*
	mùi_‰ì
)(
	mve˘‹
);

251 (*
	m£t_lvt_mask
)(
	mu_öt
, u_öt, 
	mu_ch¨
);

252 (*
	m£t_lvt_mode
)(
	mu_öt
, u_öt, 
	mu_öt32_t
);

253 (*
	m£t_lvt_pﬁ¨ôy
)(
	mu_öt
, u_öt, 
	möå_pﬁ¨ôy
);

254 (*
	m£t_lvt_åiggîmode
)(
	mu_öt
, u_öt, 
	möå_åiggî
);

257 
≠ic_›s
ápic_ops;

259 
ölöe
 

260 
	$œpic_¸óã
(
u_öt
 
≠ic_id
, 
boŸ_˝u
)

263 
≠ic_›s
.
	`¸óã
(
≠ic_id
, 
boŸ_˝u
);

264 
	}
}

266 
ölöe
 

267 
	$œpic_öô
(
vm_∑ddr_t
 
addr
)

270 
≠ic_›s
.
	`öô
(
addr
);

271 
	}
}

273 
ölöe
 

274 
	$œpic_x≠ic_mode
()

277 
≠ic_›s
.
	`x≠ic_mode
();

278 
	}
}

280 
ölöe
 
boﬁ


281 
	$œpic_is_x2≠ic
()

284  (
≠ic_›s
.
	`is_x2≠ic
());

285 
	}
}

287 
ölöe
 

288 
	$œpic_£tup
(
boŸ
)

291 
≠ic_›s
.
	`£tup
(
boŸ
);

292 
	}
}

294 
ölöe
 

295 
	$œpic_dump
(c⁄° *
°r
)

298 
≠ic_›s
.
	`dump
(
°r
);

299 
	}
}

301 
ölöe
 

302 
	$œpic_dißbÀ
()

305 
≠ic_›s
.
	`dißbÀ
();

306 
	}
}

308 
ölöe
 

309 
	$œpic_eoi
()

312 
≠ic_›s
.
	`eoi
();

313 
	}
}

315 
ölöe
 

316 
	$œpic_id
()

319  (
≠ic_›s
.
	`id
());

320 
	}
}

322 
ölöe
 

323 
	$œpic_öå_≥ndög
(
u_öt
 
ve˘‹
)

326  (
≠ic_›s
.
	`öå_≥ndög
(
ve˘‹
));

327 
	}
}

330 
ölöe
 

331 
	$œpic_£t_logiˇl_id
(
u_öt
 
≠ic_id
, u_öà
˛u°î
, u_öà
˛u°î_id
)

334 
≠ic_›s
.
	`£t_logiˇl_id
(
≠ic_id
, 
˛u°î
, 
˛u°î_id
);

335 
	}
}

337 
ölöe
 
u_öt


338 
	$≠ic_˝uid
(
u_öt
 
≠ic_id
)

341  (
≠ic_›s
.
	`˝uid
(
≠ic_id
));

342 
	}
}

344 
ölöe
 
u_öt


345 
	$≠ic_Æloc_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
úq
)

348  (
≠ic_›s
.
	`Æloc_ve˘‹
(
≠ic_id
, 
úq
));

349 
	}
}

351 
ölöe
 
u_öt


352 
	$≠ic_Æloc_ve˘‹s
(
u_öt
 
≠ic_id
, u_öà*
úqs
, u_öà
cou¡
, u_öà
Æign
)

355  (
≠ic_›s
.
	`Æloc_ve˘‹s
(
≠ic_id
, 
úqs
, 
cou¡
, 
Æign
));

356 
	}
}

358 
ölöe
 

359 
	$≠ic_íabÀ_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
ve˘‹
)

362 
≠ic_›s
.
	`íabÀ_ve˘‹
(
≠ic_id
, 
ve˘‹
);

363 
	}
}

365 
ölöe
 

366 
	$≠ic_dißbÀ_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
ve˘‹
)

369 
≠ic_›s
.
	`dißbÀ_ve˘‹
(
≠ic_id
, 
ve˘‹
);

370 
	}
}

372 
ölöe
 

373 
	$≠ic_‰ì_ve˘‹
(
u_öt
 
≠ic_id
, u_öà
ve˘‹
, u_öà
úq
)

376 
≠ic_›s
.
	`‰ì_ve˘‹
(
≠ic_id
, 
ve˘‹
, 
úq
);

377 
	}
}

379 
ölöe
 

380 
	$œpic_íabÀ_pmc
()

383  (
≠ic_›s
.
	`íabÀ_pmc
());

384 
	}
}

386 
ölöe
 

387 
	$œpic_dißbÀ_pmc
()

390 
≠ic_›s
.
	`dißbÀ_pmc
();

391 
	}
}

393 
ölöe
 

394 
	$œpic_ªíabÀ_pmc
()

397 
≠ic_›s
.
	`ªíabÀ_pmc
();

398 
	}
}

400 
ölöe
 

401 
	$œpic_íabÀ_cmc
()

404 
≠ic_›s
.
	`íabÀ_cmc
();

405 
	}
}

407 
ölöe
 

408 
	$œpic_íabÀ_mˇ_ñvt
()

411  (
≠ic_›s
.
	`íabÀ_mˇ_ñvt
());

412 
	}
}

414 
ölöe
 

415 
	$œpic_ùi_øw
(
ªgi°î_t
 
i¸lo
, 
u_öt
 
de°
)

418 
≠ic_›s
.
	`ùi_øw
(
i¸lo
, 
de°
);

419 
	}
}

421 
ölöe
 

422 
	$œpic_ùi_ve˘‹ed
(
u_öt
 
ve˘‹
, 
de°
)

425 
≠ic_›s
.
	`ùi_ve˘‹ed
(
ve˘‹
, 
de°
);

426 
	}
}

428 
ölöe
 

429 
	$œpic_ùi_waô
(
dñay
)

432  (
≠ic_›s
.
	`ùi_waô
(
dñay
));

433 
	}
}

435 
ölöe
 

436 
	$œpic_ùi_Æloc
(
öth™d_t
 *
ùifunc
)

439  (
≠ic_›s
.
	`ùi_Æloc
(
ùifunc
));

440 
	}
}

442 
ölöe
 

443 
	$œpic_ùi_‰ì
(
ve˘‹
)

446  (
≠ic_›s
.
	`ùi_‰ì
(
ve˘‹
));

447 
	}
}

449 
ölöe
 

450 
	$œpic_£t_lvt_mask
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
u_ch¨
 
masked
)

453  (
≠ic_›s
.
	`£t_lvt_mask
(
≠ic_id
, 
lvt
, 
masked
));

454 
	}
}

456 
ölöe
 

457 
	$œpic_£t_lvt_mode
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
u_öt32_t
 
mode
)

460  (
≠ic_›s
.
	`£t_lvt_mode
(
≠ic_id
, 
lvt
, 
mode
));

461 
	}
}

463 
ölöe
 

464 
	$œpic_£t_lvt_pﬁ¨ôy
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
öå_pﬁ¨ôy
 
pﬁ
)

467  (
≠ic_›s
.
	`£t_lvt_pﬁ¨ôy
(
≠ic_id
, 
lvt
, 
pﬁ
));

468 
	}
}

470 
ölöe
 

471 
	$œpic_£t_lvt_åiggîmode
(
u_öt
 
≠ic_id
, u_öà
lvt
, 
öå_åiggî
 
åiggî
)

474  (
≠ic_›s
.
	`£t_lvt_åiggîmode
(
≠ic_id
, 
lvt
, 
åiggî
));

475 
	}
}

477 
œpic_h™dÀ_cmc
();

478 
œpic_h™dÀ_îr‹
();

479 
œpic_h™dÀ_öå
(
ve˘‹
, 
å≠‰ame
 *
‰ame
);

480 
œpic_h™dÀ_timî
(
å≠‰ame
 *
‰ame
);

482 
iﬂpic_gë_rid
(
u_öt
 
≠ic_id
, 
uöt16_t
 *
ridp
);

484 
x2≠ic_mode
;

485 
œpic_eoi_suµªssi⁄
;

487 #ifde‡
_SYS_SYSCTL_H_


488 
SYSCTL_DECL
(
_hw_≠ic
);

	@/usr/include/x86/apm_bios.h

18 #i‚de‡
_X86_APM_BIOS_H_


19 
	#_X86_APM_BIOS_H_


	)

21 #i‚de‡
_KERNEL


22 
	~<sys/ty≥s.h
>

24 
	~<sys/ioccom.h
>

27 
	#APM_BIOS
 0x53

	)

28 
	#APM_INT
 0x15

	)

31 
	#APM_16BIT_SUPPORT
 0x01

	)

32 
	#APM_32BIT_SUPPORT
 0x02

	)

33 
	#APM_CPUIDLE_SLOW
 0x04

	)

34 
	#APM_DISABLED
 0x08

	)

35 
	#APM_DISENGAGED
 0x10

	)

38 
	#APM_OURADDR
 0x00080000

	)

41 
	#APM_INSTCHECK
 0x00

	)

42 
	#APM_REALCONNECT
 0x01

	)

43 
	#APM_PROT16CONNECT
 0x02

	)

44 
	#APM_PROT32CONNECT
 0x03

	)

45 
	#APM_DISCONNECT
 0x04

	)

46 
	#APM_CPUIDLE
 0x05

	)

47 
	#APM_CPUBUSY
 0x06

	)

48 
	#APM_SETPWSTATE
 0x07

	)

49 
	#APM_ENABLEDISABLEPM
 0x08

	)

50 
	#APM_RESTOREDEFAULT
 0x09

	)

51 
	#APM_GETPWSTATUS
 0x0a

	)

52 
	#APM_GETPMEVENT
 0x0b

	)

53 
	#APM_GETPWSTATE
 0x0c

	)

54 
	#APM_ENABLEDISABLEDPM
 0x0d

	)

55 
	#APM_DRVVERSION
 0x0e

	)

56 
	#APM_ENGAGEDISENGAGEPM
 0x0f

	)

57 
	#APM_GETCAPABILITIES
 0x10

	)

58 
	#APM_RESUMETIMER
 0x11

	)

59 
	#APM_RESUMEONRING
 0x12

	)

60 
	#APM_TIMERREQUESTS
 0x13

	)

61 
	#APM_OEMFUNC
 0x80

	)

64 
	#APME_OK
 0x00

	)

65 
	#APME_PMDISABLED
 0x01

	)

66 
	#APME_REALESTABLISHED
 0x02

	)

67 
	#APME_NOTCONNECTED
 0x03

	)

68 
	#APME_PROT16ESTABLISHED
 0x05

	)

69 
	#APME_PROT16NOTSUPPORTED
 0x06

	)

70 
	#APME_PROT32ESTABLISHED
 0x07

	)

71 
	#APME_PROT32NOTDUPPORTED
 0x08

	)

72 
	#APME_UNKNOWNDEVICEID
 0x09

	)

73 
	#APME_OUTOFRANGE
 0x0a

	)

74 
	#APME_NOTENGAGED
 0x0b

	)

75 
	#APME_CANTENTERSTATE
 0x60

	)

76 
	#APME_NOPMEVENT
 0x80

	)

77 
	#APME_NOAPMPRESENT
 0x86

	)

81 
	#PMDV_APMBIOS
 0x0000

	)

82 
	#PMDV_ALLDEV
 0x0001

	)

83 
	#PMDV_DISP0
 0x0100

	)

84 
	#PMDV_DISP1
 0x0101

	)

85 
	#PMDV_DISPALL
 0x01ff

	)

86 
	#PMDV_2NDSTORAGE0
 0x0200

	)

87 
	#PMDV_2NDSTORAGE1
 0x0201

	)

88 
	#PMDV_2NDSTORAGE2
 0x0202

	)

89 
	#PMDV_2NDSTORAGE3
 0x0203

	)

90 
	#PMDV_PARALLEL0
 0x0300

	)

91 
	#PMDV_PARALLEL1
 0x0301

	)

92 
	#PMDV_SERIAL0
 0x0400

	)

93 
	#PMDV_SERIAL1
 0x0401

	)

94 
	#PMDV_SERIAL2
 0x0402

	)

95 
	#PMDV_SERIAL3
 0x0403

	)

96 
	#PMDV_SERIAL4
 0x0404

	)

97 
	#PMDV_SERIAL5
 0x0405

	)

98 
	#PMDV_SERIAL6
 0x0406

	)

99 
	#PMDV_SERIAL7
 0x0407

	)

100 
	#PMDV_NET0
 0x0500

	)

101 
	#PMDV_NET1
 0x0501

	)

102 
	#PMDV_NET2
 0x0502

	)

103 
	#PMDV_NET3
 0x0503

	)

104 
	#PMDV_PCMCIA0
 0x0600

	)

105 
	#PMDV_PCMCIA1
 0x0601

	)

106 
	#PMDV_PCMCIA2
 0x0602

	)

107 
	#PMDV_PCMCIA3
 0x0603

	)

109 
	#PMDV_BATT_BASE
 0x8000

	)

110 
	#PMDV_BATT0
 0x8001

	)

111 
	#PMDV_BATT1
 0x8002

	)

112 
	#PMDV_BATT_ALL
 0x80ff

	)

118 
	#PMST_APMENABLED
 0x0000

	)

119 
	#PMST_STANDBY
 0x0001

	)

120 
	#PMST_SUSPEND
 0x0002

	)

121 
	#PMST_OFF
 0x0003

	)

122 
	#PMST_LASTREQNOTIFY
 0x0004

	)

123 
	#PMST_LASTREQREJECT
 0x0005

	)

129 #i‡!
deföed
(
ASSEMBLER
Ë&& !deföed(
INITIALIZER
)

132 
	s≠mhook
 {

133 
≠mhook
 *
	mah_√xt
;

134 (*
	mah_fun
)(*
	mah_¨g
);

135 *
	mah_¨g
;

136 c⁄° *
	mah_«me
;

137 
	mah_‹dî
;

139 
	#APM_HOOK_NONE
 (-1)

	)

140 
	#APM_HOOK_SUSPEND
 0

	)

141 
	#APM_HOOK_RESUME
 1

	)

142 
	#NAPM_HOOK
 2

	)

144 #ifde‡
_KERNEL


146 
≠m_su•íd
(
°©e
);

147 
≠mhook
 *
≠m_hook_e°ablish
 (
≠mh
, apmhook *);

148 
≠m_hook_di£°ablish
 (
≠mh
, 
≠mhook
 *);

149 
≠m_˝u_idÀ
();

150 
≠m_˝u_busy
();

156 
	#APM_MIN_ORDER
 0x00

	)

157 
	#APM_MID_ORDER
 0x80

	)

158 
	#APM_MAX_ORDER
 0xff

	)

161 
	#PMEV_NOEVENT
 0x0000

	)

162 
	#PMEV_STANDBYREQ
 0x0001

	)

163 
	#PMEV_SUSPENDREQ
 0x0002

	)

164 
	#PMEV_NORMRESUME
 0x0003

	)

165 
	#PMEV_CRITRESUME
 0x0004

	)

166 
	#PMEV_BATTERYLOW
 0x0005

	)

167 
	#PMEV_POWERSTATECHANGE
 0x0006

	)

168 
	#PMEV_UPDATETIME
 0x0007

	)

169 
	#PMEV_CRITSUSPEND
 0x0008

	)

170 
	#PMEV_USERSTANDBYREQ
 0x0009

	)

171 
	#PMEV_USERSUSPENDREQ
 0x000a

	)

172 
	#PMEV_STANDBYRESUME
 0x000b

	)

173 
	#PMEV_CAPABILITIESCHANGE
 0x000c

	)

178 
	#PMEV_DEFAULT
 0xfffffff‡

	)

180 #i‡!
deföed
(
ASSEMBLER
Ë&& !deföed(
INITIALIZER
)

186 
	s≠m_öfo_ﬁd
 {

187 
u_öt
 
	mai_maj‹
;

188 
u_öt
 
	mai_mö‹
;

189 
u_öt
 
	mai_a˛öe
;

190 
u_öt
 
	mai_b©t_°©
;

191 
u_öt
 
	mai_b©t_li„
;

192 
u_öt
 
	mai_°©us
;

193 } *
	t≠m_öfo_ﬁd_t
;

201 
	s≠m_öfo
 {

202 
u_öt
 
	mai_öfovîsi⁄
;

203 
u_öt
 
	mai_maj‹
;

204 
u_öt
 
	mai_mö‹
;

205 
u_öt
 
	mai_a˛öe
;

206 
u_öt
 
	mai_b©t_°©
;

207 
u_öt
 
	mai_b©t_li„
;

208 
	mai_b©t_time
;

209 
u_öt
 
	mai_°©us
;

210 
u_öt
 
	mai_b©ãrõs
;

211 
u_öt
 
	mai_ˇ∑bûôõs
;

212 
u_öt
 
	mai_•¨e
[6];

213 } *
	t≠m_öfo_t
;

216 
	#APM_BATT_HIGH
 0x01

	)

217 
	#APM_BATT_LOW
 0x02

	)

218 
	#APM_BATT_CRITICAL
 0x04

	)

219 
	#APM_BATT_CHARGING
 0x08

	)

220 
	#APM_BATT_NOT_PRESENT
 0x10

	)

221 
	#APM_BATT_NO_SYSTEM
 0x80

	)

223 
	s≠m_pw°©us
 {

224 
u_öt
 
	m≠_devi˚
;

225 
u_öt
 
	m≠_a˛öe
;

226 
u_öt
 
	m≠_b©t_°©
;

227 
u_öt
 
	m≠_b©t_Êag
;

228 
u_öt
 
	m≠_b©t_li„
;

229 
	m≠_b©t_time
;

230 } *
	t≠m_pw°©us_t
;

232 
	s≠m_bios_¨g
 {

233 
uöt32_t
 
	móx
;

234 
uöt32_t
 
	mebx
;

235 
uöt32_t
 
	mecx
;

236 
uöt32_t
 
	medx
;

237 
uöt32_t
 
	mesi
;

238 
uöt32_t
 
	medi
;

241 
	s≠m_evít_öfo
 {

242 
u_öt
 
	mty≥
;

243 
u_öt
 
	mödex
;

244 
u_öt
 
	m•¨e
[8];

247 
	#APMIO_SUSPEND
 
	`_IO
('P', 1)

	)

248 
	#APMIO_GETINFO_OLD
 
	`_IOR
('P', 2, 
≠m_öfo_ﬁd
)

	)

249 
	#APMIO_ENABLE
 
	`_IO
('P', 5)

	)

250 
	#APMIO_DISABLE
 
	`_IO
('P', 6)

	)

251 
	#APMIO_HALTCPU
 
	`_IO
('P', 7)

	)

252 
	#APMIO_NOTHALTCPU
 
	`_IO
('P', 8)

	)

253 
	#APMIO_DISPLAY
 
	`_IOW
('P', 9, )

	)

254 
	#APMIO_BIOS
 
	`_IOWR
('P', 10, 
≠m_bios_¨g
)

	)

255 
	#APMIO_GETINFO
 
	`_IOR
('P', 11, 
≠m_öfo
)

	)

256 
	#APMIO_STANDBY
 
	`_IO
('P', 12)

	)

257 
	#APMIO_GETPWSTATUS
 
	`_IOWR
('P', 13, 
≠m_pw°©us
)

	)

259 
	#APMIO_NEXTEVENT
 
	`_IOR
('A', 100, 
≠m_evít_öfo
)

	)

260 
	#APMIO_REJECTLASTREQ
 
	`_IO
('P', 101)

	)

	@/usr/include/x86/bus.h

99 #i‚de‡
_X86_BUS_H_


100 
	#_X86_BUS_H_


	)

102 
	~<machöe/_bus.h
>

103 
	~<machöe/˝ufunc.h
>

105 #i‚de‡
__GNUCLIKE_ASM


112 
	#X86_BUS_SPACE_IO
 0

	)

113 
	#X86_BUS_SPACE_MEM
 1

	)

115 
	#BUS_SPACE_MAXSIZE_24BIT
 0xFFFFFF

	)

116 
	#BUS_SPACE_MAXSIZE_32BIT
 0xFFFFFFFF

	)

117 
	#BUS_SPACE_MAXSIZE
 0xFFFFFFFF

	)

118 
	#BUS_SPACE_MAXADDR_24BIT
 0xFFFFFF

	)

119 
	#BUS_SPACE_MAXADDR_32BIT
 0xFFFFFFFF

	)

120 #i‡
deföed
(
__amd64__
Ë|| deföed(
PAE
)

121 
	#BUS_SPACE_MAXADDR_48BIT
 0xFFFFFFFFFFFFULL

	)

122 
	#BUS_SPACE_MAXADDR
 0xFFFFFFFFFFFFFFFFULL

	)

124 
	#BUS_SPACE_MAXADDR
 0xFFFFFFFF

	)

127 
	#BUS_SPACE_INVALID_DATA
 (~0)

	)

128 
	#BUS_SPACE_UNRESTRICTED
 (~0)

	)

134 
bus_•a˚_m≠
(
bus_•a˚_èg_t
 
èg
, 
bus_addr_t
 
addr
, 
bus_size_t
 
size
,

135 
Êags
, 
bus_•a˚_h™dÀ_t
 *
bshp
);

141 
bus_•a˚_unm≠
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

142 
bus_size_t
 
size
);

148 
__ölöe
 
bus_•a˚_subªgi⁄
(
bus_•a˚_èg_t
 
t
,

149 
bus_•a˚_h™dÀ_t
 
bsh
,

150 
bus_size_t
 
off£t
, bus_size_à
size
,

151 
bus_•a˚_h™dÀ_t
 *
nbshp
);

153 
__ölöe
 

154 
	$bus_•a˚_subªgi⁄
(
bus_•a˚_èg_t
 
t
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
,

155 
bus_size_t
 
off£t
, bus_size_à
size
 
__unu£d
,

156 
bus_•a˚_h™dÀ_t
 *
nbshp
)

159 *
nbshp
 = 
bsh
 + 
off£t
;

161 
	}
}

167 
bus_•a˚_Æloc
(
bus_•a˚_èg_t
 
t
, 
bus_addr_t
 
r°¨t
,

168 
bus_addr_t
 
ªnd
, 
bus_size_t
 
size
, bus_size_à
Æign
,

169 
bus_size_t
 
bound¨y
, 
Êags
, 
bus_addr_t
 *
addΩ
,

170 
bus_•a˚_h™dÀ_t
 *
bshp
);

176 
__ölöe
 
bus_•a˚_‰ì
(
bus_•a˚_èg_t
 
t
, 
bus_•a˚_h™dÀ_t
 
bsh
,

177 
bus_size_t
 
size
);

179 
__ölöe
 

180 
	$bus_•a˚_‰ì
(
bus_•a˚_èg_t
 
t
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
 __unused,

181 
bus_size_t
 
size
 
__unu£d
)

183 
	}
}

190 
__ölöe
 
u_öt8_t
 
bus_•a˚_ªad_1
(
bus_•a˚_èg_t
 
èg
,

191 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

192 
bus_size_t
 
off£t
);

194 
__ölöe
 
u_öt16_t
 
bus_•a˚_ªad_2
(
bus_•a˚_èg_t
 
èg
,

195 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

196 
bus_size_t
 
off£t
);

198 
__ölöe
 
u_öt32_t
 
bus_•a˚_ªad_4
(
bus_•a˚_èg_t
 
èg
,

199 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

200 
bus_size_t
 
off£t
);

202 #ifde‡
__amd64__


203 
__ölöe
 
uöt64_t
 
bus_•a˚_ªad_8
(
bus_•a˚_èg_t
 
èg
,

204 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

205 
bus_size_t
 
off£t
);

208 
__ölöe
 
u_öt8_t


209 
	$bus_•a˚_ªad_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

210 
bus_size_t
 
off£t
)

213 i‡(
èg
 =
X86_BUS_SPACE_IO
)

214  (
	`öb
(
h™dÀ
 + 
off£t
));

215  (*(vﬁ©ûê
u_öt8_t
 *)(
h™dÀ
 + 
off£t
));

216 
	}
}

218 
__ölöe
 
u_öt16_t


219 
	$bus_•a˚_ªad_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

220 
bus_size_t
 
off£t
)

223 i‡(
èg
 =
X86_BUS_SPACE_IO
)

224  (
	`öw
(
h™dÀ
 + 
off£t
));

225  (*(vﬁ©ûê
u_öt16_t
 *)(
h™dÀ
 + 
off£t
));

226 
	}
}

228 
__ölöe
 
u_öt32_t


229 
	$bus_•a˚_ªad_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

230 
bus_size_t
 
off£t
)

233 i‡(
èg
 =
X86_BUS_SPACE_IO
)

234  (
	`öl
(
h™dÀ
 + 
off£t
));

235  (*(vﬁ©ûê
u_öt32_t
 *)(
h™dÀ
 + 
off£t
));

236 
	}
}

238 #ifde‡
__amd64__


239 
__ölöe
 
uöt64_t


240 
	$bus_•a˚_ªad_8
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

241 
bus_size_t
 
off£t
)

244 i‡(
èg
 =
X86_BUS_SPACE_IO
)

245  (
BUS_SPACE_INVALID_DATA
);

246  (*(vﬁ©ûê
uöt64_t
 *)(
h™dÀ
 + 
off£t
));

247 
	}
}

254 
__ölöe
 
bus_•a˚_ªad_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

255 
bus_•a˚_h™dÀ_t
 
bsh
,

256 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
,

257 
size_t
 
cou¡
);

259 
__ölöe
 
bus_•a˚_ªad_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

260 
bus_•a˚_h™dÀ_t
 
bsh
,

261 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
,

262 
size_t
 
cou¡
);

264 
__ölöe
 
bus_•a˚_ªad_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

265 
bus_•a˚_h™dÀ_t
 
bsh
,

266 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
,

267 
size_t
 
cou¡
);

269 
__ölöe
 

270 
	$bus_•a˚_ªad_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

271 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

274 i‡(
èg
 =
X86_BUS_SPACE_IO
)

275 
	`ösb
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

277 #ifde‡
__GNUCLIKE_ASM


278 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movb (%2),%%al \n\
 \n\
 1b" :

283 "=D" (
addr
), "=c" (
cou¡
) :

284 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

288 
	}
}

290 
__ölöe
 

291 
	$bus_•a˚_ªad_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

292 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

295 i‡(
èg
 =
X86_BUS_SPACE_IO
)

296 
	`ösw
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

298 #ifde‡
__GNUCLIKE_ASM


299 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movw (%2),%%ax \n\
 \n\
 1b" :

304 "=D" (
addr
), "=c" (
cou¡
) :

305 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

309 
	}
}

311 
__ölöe
 

312 
	$bus_•a˚_ªad_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

313 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

316 i‡(
èg
 =
X86_BUS_SPACE_IO
)

317 
	`ö¶
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

319 #ifde‡
__GNUCLIKE_ASM


320 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movl (%2),%%eax \n\
 \n\
 1b" :

325 "=D" (
addr
), "=c" (
cou¡
) :

326 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

330 
	}
}

333 
	#bus_•a˚_ªad_mu…i_8
 !!! 
bus_•a˚_ªad_mu…i_8
 
unim∂emíãd
 !!!

	)

341 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

342 
bus_•a˚_h™dÀ_t
 
bsh
,

343 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
,

344 
size_t
 
cou¡
);

346 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

347 
bus_•a˚_h™dÀ_t
 
bsh
,

348 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
,

349 
size_t
 
cou¡
);

351 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

352 
bus_•a˚_h™dÀ_t
 
bsh
,

353 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
,

354 
size_t
 
cou¡
);

357 
__ölöe
 

358 
	$bus_•a˚_ªad_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

359 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

362 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

363 
_p‹t_
 = 
bsh
 + 
off£t
;

364 #ifde‡
__GNUCLIKE_ASM


365 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inb %w2,%%al \n\
 \n\
 %2 \n\
 1b" :

371 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

372 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

376 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

377 #ifde‡
__GNUCLIKE_ASM


378 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

382 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

383 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

387 
	}
}

389 
__ölöe
 

390 
	$bus_•a˚_ªad_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

391 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

394 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

395 
_p‹t_
 = 
bsh
 + 
off£t
;

396 #ifde‡
__GNUCLIKE_ASM


397 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inw %w2,%%ax \n\
 \n\
 $2,%2 \n\
 1b" :

403 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

404 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

408 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

409 #ifde‡
__GNUCLIKE_ASM


410 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

414 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

415 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

419 
	}
}

421 
__ölöe
 

422 
	$bus_•a˚_ªad_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

423 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

426 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

427 
_p‹t_
 = 
bsh
 + 
off£t
;

428 #ifde‡
__GNUCLIKE_ASM


429 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inl %w2,%%eax \n\
 \n\
 $4,%2 \n\
 1b" :

435 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

436 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

440 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

441 #ifde‡
__GNUCLIKE_ASM


442 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

446 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

447 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

451 
	}
}

454 
	#bus_•a˚_ªad_ªgi⁄_8
 !!! 
bus_•a˚_ªad_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

462 
__ölöe
 
bus_•a˚_wrôe_1
(
bus_•a˚_èg_t
 
èg
,

463 
bus_•a˚_h™dÀ_t
 
bsh
,

464 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
);

466 
__ölöe
 
bus_•a˚_wrôe_2
(
bus_•a˚_èg_t
 
èg
,

467 
bus_•a˚_h™dÀ_t
 
bsh
,

468 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
);

470 
__ölöe
 
bus_•a˚_wrôe_4
(
bus_•a˚_èg_t
 
èg
,

471 
bus_•a˚_h™dÀ_t
 
bsh
,

472 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
);

474 #ifde‡
__amd64__


475 
__ölöe
 
bus_•a˚_wrôe_8
(
bus_•a˚_èg_t
 
èg
,

476 
bus_•a˚_h™dÀ_t
 
bsh
,

477 
bus_size_t
 
off£t
, 
uöt64_t
 
vÆue
);

480 
__ölöe
 

481 
	$bus_•a˚_wrôe_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

482 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
)

485 i‡(
èg
 =
X86_BUS_SPACE_IO
)

486 
	`outb
(
bsh
 + 
off£t
, 
vÆue
);

488 *(vﬁ©ûê
u_öt8_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

489 
	}
}

491 
__ölöe
 

492 
	$bus_•a˚_wrôe_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

493 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
)

496 i‡(
èg
 =
X86_BUS_SPACE_IO
)

497 
	`outw
(
bsh
 + 
off£t
, 
vÆue
);

499 *(vﬁ©ûê
u_öt16_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

500 
	}
}

502 
__ölöe
 

503 
	$bus_•a˚_wrôe_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

504 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
)

507 i‡(
èg
 =
X86_BUS_SPACE_IO
)

508 
	`oué
(
bsh
 + 
off£t
, 
vÆue
);

510 *(vﬁ©ûê
u_öt32_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

511 
	}
}

513 #ifde‡
__amd64__


514 
__ölöe
 

515 
	$bus_•a˚_wrôe_8
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

516 
bus_size_t
 
off£t
, 
uöt64_t
 
vÆue
)

519 i‡(
èg
 =
X86_BUS_SPACE_IO
)

522 *(vﬁ©ûê
uöt64_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

523 
	}
}

531 
__ölöe
 
bus_•a˚_wrôe_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

532 
bus_•a˚_h™dÀ_t
 
bsh
,

533 
bus_size_t
 
off£t
,

534 c⁄° 
u_öt8_t
 *
addr
,

535 
size_t
 
cou¡
);

536 
__ölöe
 
bus_•a˚_wrôe_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

537 
bus_•a˚_h™dÀ_t
 
bsh
,

538 
bus_size_t
 
off£t
,

539 c⁄° 
u_öt16_t
 *
addr
,

540 
size_t
 
cou¡
);

542 
__ölöe
 
bus_•a˚_wrôe_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

543 
bus_•a˚_h™dÀ_t
 
bsh
,

544 
bus_size_t
 
off£t
,

545 c⁄° 
u_öt32_t
 *
addr
,

546 
size_t
 
cou¡
);

548 
__ölöe
 

549 
	$bus_•a˚_wrôe_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

550 
bus_size_t
 
off£t
, c⁄° 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

553 i‡(
èg
 =
X86_BUS_SPACE_IO
)

554 
	`outsb
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

556 #ifde‡
__GNUCLIKE_ASM


557 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsb \n\
 %%al,(%2) \n\
 1b" :

562 "=S" (
addr
), "=c" (
cou¡
) :

563 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

567 
	}
}

569 
__ölöe
 

570 
	$bus_•a˚_wrôe_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

571 
bus_size_t
 
off£t
, c⁄° 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

574 i‡(
èg
 =
X86_BUS_SPACE_IO
)

575 
	`outsw
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

577 #ifde‡
__GNUCLIKE_ASM


578 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsw \n\
 %%ax,(%2) \n\
 1b" :

583 "=S" (
addr
), "=c" (
cou¡
) :

584 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

588 
	}
}

590 
__ölöe
 

591 
	$bus_•a˚_wrôe_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

592 
bus_size_t
 
off£t
, c⁄° 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

595 i‡(
èg
 =
X86_BUS_SPACE_IO
)

596 
	`out¶
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

598 #ifde‡
__GNUCLIKE_ASM


599 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsl \n\
 %%eax,(%2) \n\
 1b" :

604 "=S" (
addr
), "=c" (
cou¡
) :

605 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

609 
	}
}

612 
	#bus_•a˚_wrôe_mu…i_8
(
t
, 
h
, 
o
, 
a
, 
c
) \

613 !!! 
bus_•a˚_wrôe_mu…i_8
 
unim∂emíãd
 !!!

	)

621 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

622 
bus_•a˚_h™dÀ_t
 
bsh
,

623 
bus_size_t
 
off£t
,

624 c⁄° 
u_öt8_t
 *
addr
,

625 
size_t
 
cou¡
);

626 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

627 
bus_•a˚_h™dÀ_t
 
bsh
,

628 
bus_size_t
 
off£t
,

629 c⁄° 
u_öt16_t
 *
addr
,

630 
size_t
 
cou¡
);

631 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

632 
bus_•a˚_h™dÀ_t
 
bsh
,

633 
bus_size_t
 
off£t
,

634 c⁄° 
u_öt32_t
 *
addr
,

635 
size_t
 
cou¡
);

637 
__ölöe
 

638 
	$bus_•a˚_wrôe_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

639 
bus_size_t
 
off£t
, c⁄° 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

642 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

643 
_p‹t_
 = 
bsh
 + 
off£t
;

644 #ifde‡
__GNUCLIKE_ASM


645 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsb \n\
 %%al,%w0 \n\
 %0 \n\
 1b" :

651 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

652 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

656 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

657 #ifde‡
__GNUCLIKE_ASM


658 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

662 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

663 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

667 
	}
}

669 
__ölöe
 

670 
	$bus_•a˚_wrôe_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

671 
bus_size_t
 
off£t
, c⁄° 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

674 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

675 
_p‹t_
 = 
bsh
 + 
off£t
;

676 #ifde‡
__GNUCLIKE_ASM


677 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsw \n\
 %%ax,%w0 \n\
 $2,%0 \n\
 1b" :

683 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

684 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

688 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

689 #ifde‡
__GNUCLIKE_ASM


690 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

694 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

695 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

699 
	}
}

701 
__ölöe
 

702 
	$bus_•a˚_wrôe_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

703 
bus_size_t
 
off£t
, c⁄° 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

706 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

707 
_p‹t_
 = 
bsh
 + 
off£t
;

708 #ifde‡
__GNUCLIKE_ASM


709 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsl \n\
 %%eax,%w0 \n\
 $4,%0 \n\
 1b" :

715 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

716 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

720 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

721 #ifde‡
__GNUCLIKE_ASM


722 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

726 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

727 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

731 
	}
}

734 
	#bus_•a˚_wrôe_ªgi⁄_8
 \

735 !!! 
bus_•a˚_wrôe_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

743 
__ölöe
 
bus_•a˚_£t_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

744 
bus_•a˚_h™dÀ_t
 
bsh
,

745 
bus_size_t
 
off£t
,

746 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
);

747 
__ölöe
 
bus_•a˚_£t_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

748 
bus_•a˚_h™dÀ_t
 
bsh
,

749 
bus_size_t
 
off£t
,

750 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
);

751 
__ölöe
 
bus_•a˚_£t_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

752 
bus_•a˚_h™dÀ_t
 
bsh
,

753 
bus_size_t
 
off£t
,

754 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
);

756 
__ölöe
 

757 
	$bus_•a˚_£t_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

758 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
)

760 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

762 i‡(
èg
 =
X86_BUS_SPACE_IO
)

763 
cou¡
--)

764 
	`outb
(
addr
, 
vÆue
);

766 
cou¡
--)

767 *(vﬁ©ûê
u_öt8_t
 *)(
addr
Ë
vÆue
;

768 
	}
}

770 
__ölöe
 

771 
	$bus_•a˚_£t_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

772 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
)

774 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

776 i‡(
èg
 =
X86_BUS_SPACE_IO
)

777 
cou¡
--)

778 
	`outw
(
addr
, 
vÆue
);

780 
cou¡
--)

781 *(vﬁ©ûê
u_öt16_t
 *)(
addr
Ë
vÆue
;

782 
	}
}

784 
__ölöe
 

785 
	$bus_•a˚_£t_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

786 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
)

788 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

790 i‡(
èg
 =
X86_BUS_SPACE_IO
)

791 
cou¡
--)

792 
	`oué
(
addr
, 
vÆue
);

794 
cou¡
--)

795 *(vﬁ©ûê
u_öt32_t
 *)(
addr
Ë
vÆue
;

796 
	}
}

799 
	#bus_•a˚_£t_mu…i_8
 !!! 
bus_•a˚_£t_mu…i_8
 
unim∂emíãd
 !!!

	)

807 
__ölöe
 
bus_•a˚_£t_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

808 
bus_•a˚_h™dÀ_t
 
bsh
,

809 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
,

810 
size_t
 
cou¡
);

811 
__ölöe
 
bus_•a˚_£t_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

812 
bus_•a˚_h™dÀ_t
 
bsh
,

813 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
,

814 
size_t
 
cou¡
);

815 
__ölöe
 
bus_•a˚_£t_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

816 
bus_•a˚_h™dÀ_t
 
bsh
,

817 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
,

818 
size_t
 
cou¡
);

820 
__ölöe
 

821 
	$bus_•a˚_£t_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

822 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
)

824 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

826 i‡(
èg
 =
X86_BUS_SPACE_IO
)

827 ; 
cou¡
 !0; cou¡--, 
addr
++)

828 
	`outb
(
addr
, 
vÆue
);

830 ; 
cou¡
 !0; cou¡--, 
addr
++)

831 *(vﬁ©ûê
u_öt8_t
 *)(
addr
Ë
vÆue
;

832 
	}
}

834 
__ölöe
 

835 
	$bus_•a˚_£t_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

836 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
)

838 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

840 i‡(
èg
 =
X86_BUS_SPACE_IO
)

841 ; 
cou¡
 !0; cou¡--, 
addr
 += 2)

842 
	`outw
(
addr
, 
vÆue
);

844 ; 
cou¡
 !0; cou¡--, 
addr
 += 2)

845 *(vﬁ©ûê
u_öt16_t
 *)(
addr
Ë
vÆue
;

846 
	}
}

848 
__ölöe
 

849 
	$bus_•a˚_£t_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

850 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
)

852 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

854 i‡(
èg
 =
X86_BUS_SPACE_IO
)

855 ; 
cou¡
 !0; cou¡--, 
addr
 += 4)

856 
	`oué
(
addr
, 
vÆue
);

858 ; 
cou¡
 !0; cou¡--, 
addr
 += 4)

859 *(vﬁ©ûê
u_öt32_t
 *)(
addr
Ë
vÆue
;

860 
	}
}

863 
	#bus_•a˚_£t_ªgi⁄_8
 !!! 
bus_•a˚_£t_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

871 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

872 
bus_•a˚_h™dÀ_t
 
bsh1
,

873 
bus_size_t
 
off1
,

874 
bus_•a˚_h™dÀ_t
 
bsh2
,

875 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

877 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

878 
bus_•a˚_h™dÀ_t
 
bsh1
,

879 
bus_size_t
 
off1
,

880 
bus_•a˚_h™dÀ_t
 
bsh2
,

881 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

883 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

884 
bus_•a˚_h™dÀ_t
 
bsh1
,

885 
bus_size_t
 
off1
,

886 
bus_•a˚_h™dÀ_t
 
bsh2
,

887 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

889 
__ölöe
 

890 
	$bus_•a˚_c›y_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

891 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

892 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

894 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

895 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

897 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

898 i‡(
addr1
 >
addr2
) {

900 ; 
cou¡
 !0; cou¡--, 
addr1
++, 
addr2
++)

901 
	`outb
(
addr2
, 
	`öb
(
addr1
));

904 
addr1
 +(
cou¡
 - 1), 
addr2
 += (count - 1);

905 
cou¡
 !0; cou¡--, 
addr1
--, 
addr2
--)

906 
	`outb
(
addr2
, 
	`öb
(
addr1
));

909 i‡(
addr1
 >
addr2
) {

911 ; 
cou¡
 !0; cou¡--, 
addr1
++, 
addr2
++)

912 *(vﬁ©ûê
u_öt8_t
 *)(
addr2
) =

913 *(vﬁ©ûê
u_öt8_t
 *)(
addr1
);

916 
addr1
 +(
cou¡
 - 1), 
addr2
 += (count - 1);

917 
cou¡
 !0; cou¡--, 
addr1
--, 
addr2
--)

918 *(vﬁ©ûê
u_öt8_t
 *)(
addr2
) =

919 *(vﬁ©ûê
u_öt8_t
 *)(
addr1
);

922 
	}
}

924 
__ölöe
 

925 
	$bus_•a˚_c›y_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

926 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

927 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

929 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

930 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

932 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

933 i‡(
addr1
 >
addr2
) {

935 ; 
cou¡
 !0; cou¡--, 
addr1
 +2, 
addr2
 += 2)

936 
	`outw
(
addr2
, 
	`öw
(
addr1
));

939 
addr1
 +2 * (
cou¡
 - 1), 
addr2
 += 2 * (count - 1);

940 
cou¡
 !0; cou¡--, 
addr1
 -2, 
addr2
 -= 2)

941 
	`outw
(
addr2
, 
	`öw
(
addr1
));

944 i‡(
addr1
 >
addr2
) {

946 ; 
cou¡
 !0; cou¡--, 
addr1
 +2, 
addr2
 += 2)

947 *(vﬁ©ûê
u_öt16_t
 *)(
addr2
) =

948 *(vﬁ©ûê
u_öt16_t
 *)(
addr1
);

951 
addr1
 +2 * (
cou¡
 - 1), 
addr2
 += 2 * (count - 1);

952 
cou¡
 !0; cou¡--, 
addr1
 -2, 
addr2
 -= 2)

953 *(vﬁ©ûê
u_öt16_t
 *)(
addr2
) =

954 *(vﬁ©ûê
u_öt16_t
 *)(
addr1
);

957 
	}
}

959 
__ölöe
 

960 
	$bus_•a˚_c›y_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

961 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

962 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

964 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

965 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

967 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

968 i‡(
addr1
 >
addr2
) {

970 ; 
cou¡
 !0; cou¡--, 
addr1
 +4, 
addr2
 += 4)

971 
	`oué
(
addr2
, 
	`öl
(
addr1
));

974 
addr1
 +4 * (
cou¡
 - 1), 
addr2
 += 4 * (count - 1);

975 
cou¡
 !0; cou¡--, 
addr1
 -4, 
addr2
 -= 4)

976 
	`oué
(
addr2
, 
	`öl
(
addr1
));

979 i‡(
addr1
 >
addr2
) {

981 ; 
cou¡
 !0; cou¡--, 
addr1
 +4, 
addr2
 += 4)

982 *(vﬁ©ûê
u_öt32_t
 *)(
addr2
) =

983 *(vﬁ©ûê
u_öt32_t
 *)(
addr1
);

986 
addr1
 +4 * (
cou¡
 - 1), 
addr2
 += 4 * (count - 1);

987 
cou¡
 !0; cou¡--, 
addr1
 -4, 
addr2
 -= 4)

988 *(vﬁ©ûê
u_öt32_t
 *)(
addr2
) =

989 *(vﬁ©ûê
u_öt32_t
 *)(
addr1
);

992 
	}
}

995 
	#bus_•a˚_c›y_ªgi⁄_8
 !!! 
bus_•a˚_c›y_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

1009 
	#BUS_SPACE_BARRIER_READ
 0x01

	)

1010 
	#BUS_SPACE_BARRIER_WRITE
 0x02

	)

1012 
__ölöe
 

1013 
	$bus_•a˚_b¨rõr
(
bus_•a˚_èg_t
 
èg
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
 __unused,

1014 
bus_size_t
 
off£t
 
__unu£d
, bus_size_à
Àn
 __unu£d, 
Êags
)

1016 #ifde‡
__GNUCLIKE_ASM


1017 i‡(
Êags
 & 
BUS_SPACE_BARRIER_READ
)

1018 #ifde‡
__amd64__


1019 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,0(%%rsp)" : : : "memory");

1021 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,0(%%esp)" : : : "memory");

1024 
	`__compûî_memb¨
();

1026 
	}
}

1028 #ifde‡
BUS_SPACE_NO_LEGACY


1029 #unde‡
öb


1030 #unde‡
outb


1031 
	#öb
(
a
Ë
compûî_îr‹


	)

1032 
	#öw
(
a
Ë
compûî_îr‹


	)

1033 
	#öl
(
a
Ë
compûî_îr‹


	)

1034 
	#outb
(
a
, 
b
Ë
compûî_îr‹


	)

1035 
	#outw
(
a
, 
b
Ë
compûî_îr‹


	)

1036 
	#oué
(
a
, 
b
Ë
compûî_îr‹


	)

1039 
	~<machöe/bus_dma.h
>

1045 
	#bus_•a˚_ªad_°ªam_1
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_1
(—), (h), (o))

	)

1046 
	#bus_•a˚_ªad_°ªam_2
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_2
(—), (h), (o))

	)

1047 
	#bus_•a˚_ªad_°ªam_4
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_4
(—), (h), (o))

	)

1049 
	#bus_•a˚_ªad_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1050 
	`bus_•a˚_ªad_mu…i_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1051 
	#bus_•a˚_ªad_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1052 
	`bus_•a˚_ªad_mu…i_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1053 
	#bus_•a˚_ªad_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1054 
	`bus_•a˚_ªad_mu…i_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1056 
	#bus_•a˚_wrôe_°ªam_1
(
t
, 
h
, 
o
, 
v
) \

1057 
	`bus_•a˚_wrôe_1
((
t
), (
h
), (
o
), (
v
))

	)

1058 
	#bus_•a˚_wrôe_°ªam_2
(
t
, 
h
, 
o
, 
v
) \

1059 
	`bus_•a˚_wrôe_2
((
t
), (
h
), (
o
), (
v
))

	)

1060 
	#bus_•a˚_wrôe_°ªam_4
(
t
, 
h
, 
o
, 
v
) \

1061 
	`bus_•a˚_wrôe_4
((
t
), (
h
), (
o
), (
v
))

	)

1063 
	#bus_•a˚_wrôe_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1064 
	`bus_•a˚_wrôe_mu…i_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1065 
	#bus_•a˚_wrôe_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1066 
	`bus_•a˚_wrôe_mu…i_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1067 
	#bus_•a˚_wrôe_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1068 
	`bus_•a˚_wrôe_mu…i_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1070 
	#bus_•a˚_£t_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
v
, 
c
) \

1071 
	`bus_•a˚_£t_mu…i_1
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1072 
	#bus_•a˚_£t_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
v
, 
c
) \

1073 
	`bus_•a˚_£t_mu…i_2
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1074 
	#bus_•a˚_£t_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
v
, 
c
) \

1075 
	`bus_•a˚_£t_mu…i_4
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1077 
	#bus_•a˚_ªad_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1078 
	`bus_•a˚_ªad_ªgi⁄_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1079 
	#bus_•a˚_ªad_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1080 
	`bus_•a˚_ªad_ªgi⁄_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1081 
	#bus_•a˚_ªad_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1082 
	`bus_•a˚_ªad_ªgi⁄_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1084 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1085 
	`bus_•a˚_wrôe_ªgi⁄_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1086 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1087 
	`bus_•a˚_wrôe_ªgi⁄_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1088 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1089 
	`bus_•a˚_wrôe_ªgi⁄_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1091 
	#bus_•a˚_£t_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
v
, 
c
) \

1092 
	`bus_•a˚_£t_ªgi⁄_1
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1093 
	#bus_•a˚_£t_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
v
, 
c
) \

1094 
	`bus_•a˚_£t_ªgi⁄_2
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1095 
	#bus_•a˚_£t_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
v
, 
c
) \

1096 
	`bus_•a˚_£t_ªgi⁄_4
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1098 
	#bus_•a˚_c›y_ªgi⁄_°ªam_1
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1099 
	`bus_•a˚_c›y_ªgi⁄_1
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

1100 
	#bus_•a˚_c›y_ªgi⁄_°ªam_2
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1101 
	`bus_•a˚_c›y_ªgi⁄_2
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

1102 
	#bus_•a˚_c›y_ªgi⁄_°ªam_4
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1103 
	`bus_•a˚_c›y_ªgi⁄_4
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

	@/usr/include/x86/bus_dma.h

29 #i‚de‡
_X86_BUS_DMA_H_


30 
	#_X86_BUS_DMA_H_


	)

32 
	#WANT_INLINE_DMAMAP


	)

33 
	~<sys/bus_dma.h
>

34 
	~<sys/_nuŒ.h
>

36 
	~<x86/busdma_im∂.h
>

42 
ölöe
 

43 
	$bus_dmam≠_¸óã
(
bus_dma_èg_t
 
dm©
, 
Êags
, 
bus_dmam≠_t
 *
m≠p
)

45 
bus_dma_èg_comm⁄
 *
tc
;

47 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

48  (
tc
->
im∂
->
	`m≠_¸óã
(
dm©
, 
Êags
, 
m≠p
));

49 
	}
}

55 
ölöe
 

56 
	$bus_dmam≠_de°roy
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
)

58 
bus_dma_èg_comm⁄
 *
tc
;

60 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

61  (
tc
->
im∂
->
	`m≠_de°roy
(
dm©
, 
m≠
));

62 
	}
}

69 
ölöe
 

70 
	$bus_dmamem_Æloc
(
bus_dma_èg_t
 
dm©
, ** 
vaddr
, 
Êags
,

71 
bus_dmam≠_t
 *
m≠p
)

73 
bus_dma_èg_comm⁄
 *
tc
;

75 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

76  (
tc
->
im∂
->
	`mem_Æloc
(
dm©
, 
vaddr
, 
Êags
, 
m≠p
));

77 
	}
}

83 
ölöe
 

84 
	$bus_dmamem_‰ì
(
bus_dma_èg_t
 
dm©
, *
vaddr
, 
bus_dmam≠_t
 
m≠
)

86 
bus_dma_èg_comm⁄
 *
tc
;

88 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

89 
tc
->
im∂
->
	`mem_‰ì
(
dm©
, 
vaddr
, 
m≠
);

90 
	}
}

95 
ölöe
 

96 
	$bus_dmam≠_u∆ﬂd
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
)

98 
bus_dma_èg_comm⁄
 *
tc
;

100 i‡(
m≠
 !
NULL
) {

101 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

102 
tc
->
im∂
->
	`m≠_u∆ﬂd
(
dm©
, 
m≠
);

104 
	}
}

106 
ölöe
 

107 
	$bus_dmam≠_sync
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
bus_dmasync_›_t
 
›
)

109 
bus_dma_èg_comm⁄
 *
tc
;

111 i‡(
m≠
 !
NULL
) {

112 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

113 
tc
->
im∂
->
	`m≠_sync
(
dm©
, 
m≠
, 
›
);

115 
	}
}

121 
ölöe
 

122 
	$_bus_dmam≠_lﬂd_phys
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
vm_∑ddr_t
 
buf
,

123 
bus_size_t
 
buÊí
, 
Êags
, 
bus_dma_£gmít_t
 *
£gs
, *
£gp
)

125 
bus_dma_èg_comm⁄
 *
tc
;

127 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

128  (
tc
->
im∂
->
	`lﬂd_phys
(
dm©
, 
m≠
, 
buf
, 
buÊí
, 
Êags
, 
£gs
,

129 
£gp
));

130 
	}
}

132 
ölöe
 

133 
	$_bus_dmam≠_lﬂd_ma
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
vm_∑ge
 **
ma
,

134 
bus_size_t
 
éí
, 
ma_offs
, 
Êags
, 
bus_dma_£gmít_t
 *
£gs
,

135 *
£gp
)

137 
bus_dma_èg_comm⁄
 *
tc
;

139 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

140  (
tc
->
im∂
->
	`lﬂd_ma
(
dm©
, 
m≠
, 
ma
, 
éí
, 
ma_offs
, 
Êags
,

141 
£gs
, 
£gp
));

142 
	}
}

148 
ölöe
 

149 
	$_bus_dmam≠_lﬂd_buf„r
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, *
buf
,

150 
bus_size_t
 
buÊí
, 
pm≠
 *pm≠, 
Êags
, 
bus_dma_£gmít_t
 *
£gs
,

151 *
£gp
)

153 
bus_dma_èg_comm⁄
 *
tc
;

155 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

156  (
tc
->
im∂
->
	`lﬂd_buf„r
(
dm©
, 
m≠
, 
buf
, 
buÊí
, 
pm≠
, 
Êags
, 
£gs
,

157 
£gp
));

158 
	}
}

160 
ölöe
 

161 
	$_bus_dmam≠_waôok
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

162 
memdesc
 *
mem
, 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
, *
ˇŒback_¨g
)

164 
bus_dma_èg_comm⁄
 *
tc
;

166 i‡(
m≠
 !
NULL
) {

167 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

168 
tc
->
im∂
->
	`m≠_waôok
(
dm©
, 
m≠
, 
mem
, 
ˇŒback
, 
ˇŒback_¨g
);

170 
	}
}

172 
ölöe
 
bus_dma_£gmít_t
 *

173 
	$_bus_dmam≠_com∂ëe
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

174 
bus_dma_£gmít_t
 *
£gs
, 
n£gs
, 
îr‹
)

176 
bus_dma_èg_comm⁄
 *
tc
;

178 
tc
 = (
bus_dma_èg_comm⁄
 *)
dm©
;

179  (
tc
->
im∂
->
	`m≠_com∂ëe
(
dm©
, 
m≠
, 
£gs
, 
n£gs
, 
îr‹
));

180 
	}
}

	@/usr/include/x86/busdma_impl.h

34 #i‚def 
__X86_BUSDMA_IMPL_H


35 
	#__X86_BUSDMA_IMPL_H


	)

37 
	sbus_dma_èg_comm⁄
 {

38 
bus_dma_im∂
 *
	mim∂
;

39 
bus_dma_èg_comm⁄
 *
	m∑ª¡
;

40 
bus_size_t
 
	mÆignmít
;

41 
bus_addr_t
 
	mbound¨y
;

42 
bus_addr_t
 
	mlowaddr
;

43 
bus_addr_t
 
	mhighaddr
;

44 
bus_dma_fûãr_t
 *
	mfûãr
;

45 *
	mfûãørg
;

46 
bus_size_t
 
	mmaxsize
;

47 
u_öt
 
	mn£gmíts
;

48 
bus_size_t
 
	mmax£gsz
;

49 
	mÊags
;

50 
bus_dma_lock_t
 *
	mlockfunc
;

51 *
	mlockfunˇrg
;

52 
	mªf_cou¡
;

53 
	mdomaö
;

56 
	sbus_dma_im∂
 {

57 (*
	mèg_¸óã
)(
bus_dma_èg_t
 
	m∑ª¡
,

58 
bus_size_t
 
	mÆignmít
, 
bus_addr_t
 
	mbound¨y
, bus_addr_à
	mlowaddr
,

59 
bus_addr_t
 
	mhighaddr
, 
bus_dma_fûãr_t
 *
	mfûãr
,

60 *
	mfûãørg
, 
bus_size_t
 
	mmaxsize
, 
	mn£gmíts
,

61 
bus_size_t
 
	mmax£gsz
, 
	mÊags
, 
bus_dma_lock_t
 *
	mlockfunc
,

62 *
	mlockfunˇrg
, 
bus_dma_èg_t
 *
	mdm©
);

63 (*
	mèg_de°roy
)(
bus_dma_èg_t
 
	mdm©
);

64 (*
	mèg_£t_domaö
)(
	mbus_dma_èg_t
);

65 (*
	mm≠_¸óã
)(
bus_dma_èg_t
 
	mdm©
, 
	mÊags
, 
bus_dmam≠_t
 *
	mm≠p
);

66 (*
	mm≠_de°roy
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
);

67 (*
	mmem_Æloc
)(
bus_dma_èg_t
 
	mdm©
, ** 
	mvaddr
, 
	mÊags
,

68 
bus_dmam≠_t
 *
	mm≠p
);

69 (*
	mmem_‰ì
)(
bus_dma_èg_t
 
	mdm©
, *
	mvaddr
, 
bus_dmam≠_t
 
	mm≠
);

70 (*
	mlﬂd_ma
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

71 
vm_∑ge
 **
	mma
, 
bus_size_t
 
	méí
, 
	mma_offs
, 
	mÊags
,

72 
bus_dma_£gmít_t
 *
	m£gs
, *
	m£gp
);

73 (*
	mlﬂd_phys
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

74 
vm_∑ddr_t
 
	mbuf
, 
bus_size_t
 
	mbuÊí
, 
	mÊags
,

75 
bus_dma_£gmít_t
 *
	m£gs
, *
	m£gp
);

76 (*
	mlﬂd_buf„r
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

77 *
	mbuf
, 
bus_size_t
 
	mbuÊí
, 
pm≠
 *
	mpm≠
, 
	mÊags
,

78 
bus_dma_£gmít_t
 *
	m£gs
, *
	m£gp
);

79 (*
	mm≠_waôok
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

80 
memdesc
 *
	mmem
, 
bus_dmam≠_ˇŒback_t
 *
	mˇŒback
,

81 *
	mˇŒback_¨g
);

82 
	mbus_dma_£gmít_t
 *(*
	mm≠_com∂ëe
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

83 
bus_dma_£gmít_t
 *
	m£gs
, 
	mn£gs
, 
	mîr‹
);

84 (*
	mm≠_u∆ﬂd
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
);

85 (*
	mm≠_sync
)(
bus_dma_èg_t
 
	mdm©
, 
bus_dmam≠_t
 
	mm≠
,

86 
bus_dmasync_›_t
 
	m›
);

89 
bus_dma_dÊt_lock
(*
¨g
, 
bus_dma_lock_›_t
 
›
);

90 
bus_dma_run_fûãr
(
bus_dma_èg_comm⁄
 *
dm©
, 
bus_addr_t
 
∑ddr
);

91 
comm⁄_bus_dma_èg_¸óã
(
bus_dma_èg_comm⁄
 *
∑ª¡
,

92 
bus_size_t
 
Æignmít
,

93 
bus_addr_t
 
bound¨y
, bus_addr_à
lowaddr
, bus_addr_à
highaddr
,

94 
bus_dma_fûãr_t
 *
fûãr
, *
fûãørg
, 
bus_size_t
 
maxsize
,

95 
n£gmíts
, 
bus_size_t
 
max£gsz
, 
Êags
, 
bus_dma_lock_t
 *
lockfunc
,

96 *
lockfunˇrg
, 
size_t
 
sz
, **
dm©
);

98 
bus_dma_im∂
 
bus_dma_boun˚_im∂
;

	@/usr/include/x86/cputypes.h

30 #i‚de‡
_X86_CPUTYPES_H_


31 
	#_X86_CPUTYPES_H_


	)

36 
	#CPU_VENDOR_NSC
 0x100b

	)

37 
	#CPU_VENDOR_IBM
 0x1014

	)

38 
	#CPU_VENDOR_AMD
 0x1022

	)

39 
	#CPU_VENDOR_SIS
 0x1039

	)

40 
	#CPU_VENDOR_UMC
 0x1060

	)

41 
	#CPU_VENDOR_NEXGEN
 0x1074

	)

42 
	#CPU_VENDOR_CYRIX
 0x1078

	)

43 
	#CPU_VENDOR_IDT
 0x111d

	)

44 
	#CPU_VENDOR_TRANSMETA
 0x1279

	)

45 
	#CPU_VENDOR_INTEL
 0x8086

	)

46 
	#CPU_VENDOR_RISE
 0xdód2bad

	)

47 
	#CPU_VENDOR_CENTAUR
 
CPU_VENDOR_IDT


	)

	@/usr/include/x86/dump.h

30 #i‚de‡
_MACHINE_DUMP_H_


31 
	#_MACHINE_DUMP_H_


	)

33 #ifde‡
__amd64__


34 
	#KERNELDUMP_ARCH_VERSION
 
KERNELDUMP_AMD64_VERSION


	)

35 
	#EM_VALUE
 
EM_X86_64


	)

37 
	#KERNELDUMP_ARCH_VERSION
 
KERNELDUMP_I386_VERSION


	)

38 
	#EM_VALUE
 
EM_386


	)

42 
	#DUMPSYS_MD_PA_NPAIRS
 10

	)

43 
	#DUMPSYS_NUM_AUX_HDRS
 0

	)

45 
ölöe
 

46 
	$dumpsys_∑_öô
()

49 
	`dumpsys_gí_∑_öô
();

50 
	}
}

52 
ölöe
 
dump_∑
 *

53 
	$dumpsys_∑_√xt
(
dump_∑
 *
p
)

56  (
	`dumpsys_gí_∑_√xt
(
p
));

57 
	}
}

59 
ölöe
 

60 
	$dumpsys_wböv_Æl
()

63 
	`dumpsys_gí_wböv_Æl
();

64 
	}
}

66 
ölöe
 

67 
	$dumpsys_unm≠_chunk
(
vm_∑ddr_t
 
∑
, 
size_t
 
s
, *
va
)

70 
	`dumpsys_gí_unm≠_chunk
(
∑
, 
s
, 
va
);

71 
	}
}

73 
ölöe
 

74 
	$dumpsys_wrôe_aux_hódîs
(
dum≥röfo
 *
di
)

77  (
	`dumpsys_gí_wrôe_aux_hódîs
(
di
));

78 
	}
}

80 
ölöe
 

81 
	$dumpsys
(
dum≥röfo
 *
di
)

84  (
	`dumpsys_gíîic
(
di
));

85 
	}
}

	@/usr/include/x86/elf.h

31 #i‚de‡
_MACHINE_ELF_H_


32 
	#_MACHINE_ELF_H_
 1

	)

34 #i‡
deföed
(
__i386__
Ë|| deföed(
_MACHINE_ELF_WANT_32BIT
)

40 
	~<sys/ñf32.h
>

41 #i‡
deföed
(
__ELF_WORD_SIZE
) && __ELF_WORD_SIZE == 64

42 
	~<sys/ñf64.h
>

45 #i‚de‡
__ELF_WORD_SIZE


46 
	#__ELF_WORD_SIZE
 32

	)

49 
	~<sys/ñf_gíîic.h
>

51 
	#ELF_ARCH
 
EM_386


	)

53 
	#ELF_MACHINE_OK
(
x
Ë((xË=
EM_386
 || (xË=
EM_486
)

	)

63 
	ma_ty≥
;

65 
	ma_vÆ
;

66 *
	ma_±r
;

67 (*
	ma_f˙
)();

68 } 
	ma_un
;

69 } 
	tElf32_Auxöfo
;

71 #i‡
__ELF_WORD_SIZE
 == 64

74 
	mÁke
;

75 } 
	tElf64_Auxöfo
;

78 
__ElfTy≥
(
Auxöfo
);

81 
	#AT_NULL
 0

	)

82 
	#AT_IGNORE
 1

	)

83 
	#AT_EXECFD
 2

	)

84 
	#AT_PHDR
 3

	)

85 
	#AT_PHENT
 4

	)

86 
	#AT_PHNUM
 5

	)

87 
	#AT_PAGESZ
 6

	)

88 
	#AT_BASE
 7

	)

89 
	#AT_FLAGS
 8

	)

90 
	#AT_ENTRY
 9

	)

91 
	#AT_NOTELF
 10

	)

92 
	#AT_UID
 11

	)

93 
	#AT_EUID
 12

	)

94 
	#AT_GID
 13

	)

95 
	#AT_EGID
 14

	)

96 
	#AT_EXECPATH
 15

	)

97 
	#AT_CANARY
 16

	)

98 
	#AT_CANARYLEN
 17

	)

99 
	#AT_OSRELDATE
 18

	)

100 
	#AT_NCPUS
 19

	)

101 
	#AT_PAGESIZES
 20

	)

102 
	#AT_PAGESIZESLEN
 21

	)

103 
	#AT_TIMEKEEP
 22

	)

104 
	#AT_STACKPROT
 23

	)

105 
	#AT_EHDRFLAGS
 24

	)

106 
	#AT_HWCAP
 25

	)

107 
	#AT_HWCAP2
 26

	)

109 
	#AT_COUNT
 27

	)

115 
	#R_386_COUNT
 38

	)

118 
	#ELF_TARG_CLASS
 
ELFCLASS32


	)

119 
	#ELF_TARG_DATA
 
ELFDATA2LSB


	)

120 
	#ELF_TARG_MACH
 
EM_386


	)

121 
	#ELF_TARG_VER
 1

	)

123 
	#ET_DYN_LOAD_ADDR
 0x01001000

	)

125 #ñi‡
deföed
(
__amd64__
)

131 #i‚de‡
__ELF_WORD_SIZE


132 
	#__ELF_WORD_SIZE
 64

	)

134 
	~<sys/ñf32.h
>

135 
	~<sys/ñf64.h
>

136 
	~<sys/ñf_gíîic.h
>

138 
	#ELF_ARCH
 
EM_X86_64


	)

139 
	#ELF_ARCH32
 
EM_386


	)

141 
	#ELF_MACHINE_OK
(
x
Ë((xË=
EM_X86_64
)

	)

150 
	ma_ty≥
;

152 
	ma_vÆ
;

153 } 
	ma_un
;

154 } 
	tElf32_Auxöfo
;

158 
	ma_ty≥
;

160 
	ma_vÆ
;

161 *
	ma_±r
;

162 (*
	ma_f˙
)();

163 } 
	ma_un
;

164 } 
	tElf64_Auxöfo
;

166 
__ElfTy≥
(
Auxöfo
);

169 
	#AT_NULL
 0

	)

170 
	#AT_IGNORE
 1

	)

171 
	#AT_EXECFD
 2

	)

172 
	#AT_PHDR
 3

	)

173 
	#AT_PHENT
 4

	)

174 
	#AT_PHNUM
 5

	)

175 
	#AT_PAGESZ
 6

	)

176 
	#AT_BASE
 7

	)

177 
	#AT_FLAGS
 8

	)

178 
	#AT_ENTRY
 9

	)

179 
	#AT_NOTELF
 10

	)

180 
	#AT_UID
 11

	)

181 
	#AT_EUID
 12

	)

182 
	#AT_GID
 13

	)

183 
	#AT_EGID
 14

	)

184 
	#AT_EXECPATH
 15

	)

185 
	#AT_CANARY
 16

	)

186 
	#AT_CANARYLEN
 17

	)

187 
	#AT_OSRELDATE
 18

	)

188 
	#AT_NCPUS
 19

	)

189 
	#AT_PAGESIZES
 20

	)

190 
	#AT_PAGESIZESLEN
 21

	)

191 
	#AT_TIMEKEEP
 22

	)

192 
	#AT_STACKPROT
 23

	)

193 
	#AT_EHDRFLAGS
 24

	)

194 
	#AT_HWCAP
 25

	)

195 
	#AT_HWCAP2
 26

	)

197 
	#AT_COUNT
 27

	)

203 
	#R_X86_64_COUNT
 24

	)

206 #i‡
__ELF_WORD_SIZE
 == 32

207 
	#ELF_TARG_CLASS
 
ELFCLASS32


	)

209 
	#ELF_TARG_CLASS
 
ELFCLASS64


	)

211 
	#ELF_TARG_DATA
 
ELFDATA2LSB


	)

212 
	#ELF_TARG_MACH
 
EM_X86_64


	)

213 
	#ELF_TARG_VER
 1

	)

215 #i‡
__ELF_WORD_SIZE
 == 32

216 
	#ET_DYN_LOAD_ADDR
 0x01001000

	)

218 
	#ET_DYN_LOAD_ADDR
 0x01021000

	)

	@/usr/include/x86/endian.h

35 #i‚de‡
_MACHINE_ENDIAN_H_


36 
	#_MACHINE_ENDIAN_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/_ty≥s.h
>

44 
	#_QUAD_HIGHWORD
 1

	)

45 
	#_QUAD_LOWWORD
 0

	)

51 
	#_LITTLE_ENDIAN
 1234

	)

52 
	#_BIG_ENDIAN
 4321

	)

53 
	#_PDP_ENDIAN
 3412

	)

55 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

61 #i‡
__BSD_VISIBLE


62 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

63 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

64 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

65 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

68 
	#__bsw≠16_gí
(
x
Ë(
__uöt16_t
)((xË<< 8 | (xË>> 8)

	)

69 
	#__bsw≠32_gí
(
x
) \

70 (((
__uöt32_t
)
	`__bsw≠16
((
x
Ë& 0xffffË<< 16Ë| __bsw≠16((xË>> 16))

	)

71 
	#__bsw≠64_gí
(
x
) \

72 (((
__uöt64_t
)
	`__bsw≠32
((
x
Ë& 0xffffffffË<< 32Ë| __bsw≠32((xË>> 32))

	)

74 #ifde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


75 
	#__bsw≠16
(
x
) \

76 ((
__uöt16_t
)(
	`__buûtö_c⁄°™t_p
(
x
) ? \

77 
	`__bsw≠16_gí
((
__uöt16_t
)(
x
)Ë: 
	`__bsw≠16_v¨
(x)))

	)

78 
	#__bsw≠32
(
x
) \

79 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

80 
	`__bsw≠32_gí
((
__uöt32_t
)(
x
)Ë: 
	`__bsw≠32_v¨
(x))

	)

81 
	#__bsw≠64
(
x
) \

82 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

83 
	`__bsw≠64_gí
((
__uöt64_t
)(
x
)Ë: 
	`__bsw≠64_v¨
(x))

	)

86 
	#__bsw≠16
(
x
Ë
	`__bsw≠16_v¨
(x)

	)

87 
	#__bsw≠32
(
x
Ë
	`__bsw≠32_v¨
(x)

	)

88 
	#__bsw≠64
(
x
Ë
	`__bsw≠64_v¨
(x)

	)

93 
__ölöe
 
__uöt16_t


94 
	$__bsw≠16_v¨
(
__uöt16_t
 
_x
)

97  (
	`__bsw≠16_gí
(
_x
));

98 
	}
}

100 
__ölöe
 
__uöt32_t


101 
	$__bsw≠32_v¨
(
__uöt32_t
 
_x
)

104 #ifde‡
__GNUCLIKE_ASM


105 
	`__asm
("bsw≠ %0" : "+r" (
_x
));

106  (
_x
);

108  (
	`__bsw≠32_gí
(
_x
));

110 
	}
}

112 
__ölöe
 
__uöt64_t


113 
	$__bsw≠64_v¨
(
__uöt64_t
 
_x
)

116 #i‡
	`deföed
(
__amd64__
Ë&& deföed(
__GNUCLIKE_ASM
)

117 
	`__asm
("bsw≠ %0" : "+r" (
_x
));

118  (
_x
);

124  (
	`__bsw≠64_gí
(
_x
));

126 
	}
}

128 
	#__ht⁄l
(
x
Ë
	`__bsw≠32
(x)

	)

129 
	#__ht⁄s
(
x
Ë
	`__bsw≠16
(x)

	)

130 
	#__¡ohl
(
x
Ë
	`__bsw≠32
(x)

	)

131 
	#__¡ohs
(
x
Ë
	`__bsw≠16
(x)

	)

	@/usr/include/x86/fdt.h

31 #i‚de‡
_MACHINE_FDT_H_


32 
	#_MACHINE_FDT_H_


	)

34 
__BEGIN_DECLS


35 
x86_öô_fdt
();

36 
	g__END_DECLS


	@/usr/include/x86/float.h

35 #i‚de‡
_MACHINE_FLOAT_H_


36 
	#_MACHINE_FLOAT_H_
 1

	)

38 
	~<sys/cdefs.h
>

40 
__BEGIN_DECLS


41 
__Êt_rounds
();

42 
	g__END_DECLS


44 
	#FLT_RADIX
 2

	)

45 
	#FLT_ROUNDS
 
	`__Êt_rounds
()

	)

46 #i‡
__ISO_C_VISIBLE
 >= 1999

47 #ifde‡
__LP64__


48 
	#FLT_EVAL_METHOD
 0

	)

50 
	#FLT_EVAL_METHOD
 (-1Ë

	)

52 
	#DECIMAL_DIG
 21

	)

55 
	#FLT_MANT_DIG
 24

	)

56 
	#FLT_EPSILON
 1.19209290E-07F

	)

57 
	#FLT_DIG
 6

	)

58 
	#FLT_MIN_EXP
 (-125Ë

	)

59 
	#FLT_MIN
 1.17549435E-38F

	)

60 
	#FLT_MIN_10_EXP
 (-37Ë

	)

61 
	#FLT_MAX_EXP
 128

	)

62 
	#FLT_MAX
 3.40282347E+38F

	)

63 
	#FLT_MAX_10_EXP
 38

	)

64 #i‡
__ISO_C_VISIBLE
 >= 2011

65 
	#FLT_TRUE_MIN
 1.40129846E-45F

	)

66 
	#FLT_DECIMAL_DIG
 9

	)

67 
	#FLT_HAS_SUBNORM
 1

	)

70 
	#DBL_MANT_DIG
 53

	)

71 
	#DBL_EPSILON
 2.2204460492503131E-16

	)

72 
	#DBL_DIG
 15

	)

73 
	#DBL_MIN_EXP
 (-1021)

	)

74 
	#DBL_MIN
 2.2250738585072014E-308

	)

75 
	#DBL_MIN_10_EXP
 (-307)

	)

76 
	#DBL_MAX_EXP
 1024

	)

77 
	#DBL_MAX
 1.7976931348623157E+308

	)

78 
	#DBL_MAX_10_EXP
 308

	)

79 #i‡
__ISO_C_VISIBLE
 >= 2011

80 
	#DBL_TRUE_MIN
 4.9406564584124654E-324

	)

81 
	#DBL_DECIMAL_DIG
 17

	)

82 
	#DBL_HAS_SUBNORM
 1

	)

85 
	#LDBL_MANT_DIG
 64

	)

86 
	#LDBL_EPSILON
 1.0842021724855044340E-19L

	)

87 
	#LDBL_DIG
 18

	)

88 
	#LDBL_MIN_EXP
 (-16381)

	)

89 
	#LDBL_MIN
 3.3621031431120935063E-4932L

	)

90 
	#LDBL_MIN_10_EXP
 (-4931)

	)

91 
	#LDBL_MAX_EXP
 16384

	)

92 
	#LDBL_MAX
 1.1897314953572317650E+4932L

	)

93 
	#LDBL_MAX_10_EXP
 4932

	)

94 #i‡
__ISO_C_VISIBLE
 >= 2011

95 
	#LDBL_TRUE_MIN
 3.6451995318824746025E-4951L

	)

96 
	#LDBL_DECIMAL_DIG
 21

	)

97 
	#LDBL_HAS_SUBNORM
 1

	)

	@/usr/include/x86/fpu.h

41 #i‚de‡
_X86_FPU_H_


42 
	#_X86_FPU_H_


	)

45 
	sív87
 {

46 
öt32_t
 
	mí_cw
;

47 
öt32_t
 
	mí_sw
;

48 
öt32_t
 
	mí_tw
;

49 
öt32_t
 
	mí_fù
;

50 
uöt16_t
 
	mí_fcs
;

51 
uöt16_t
 
	mí_›code
;

52 
öt32_t
 
	mí_foo
;

53 
öt32_t
 
	mí_fos
;

57 
	sÂacc87
 {

58 
uöt8_t
 
	mÂ_byãs
[10];

62 
	sßve87
 {

63 
ív87
 
	msv_ív
;

64 
Âacc87
 
	msv_ac
[8];

65 
uöt8_t
 
	msv_∑d0
[4];

66 
uöt8_t
 
	msv_∑d
[64];

70 
	sxmmacc
 {

71 
uöt8_t
 
	mxmm_byãs
[16];

75 
	symmacc
 {

76 
uöt8_t
 
	mymm_byãs
[16];

80 #ifde‡
__i386__


81 
	#__ívxmm32
 
ívxmm


	)

83 
	#__ívxmm32
 
ívxmm32


	)

84 
	#__ívxmm64
 
ívxmm


	)

87 
	s__ívxmm32
 {

88 
uöt16_t
 
	mí_cw
;

89 
uöt16_t
 
	mí_sw
;

90 
uöt16_t
 
	mí_tw
;

91 
uöt16_t
 
	mí_›code
;

92 
uöt32_t
 
	mí_fù
;

93 
uöt16_t
 
	mí_fcs
;

94 
uöt16_t
 
	mí_∑d0
;

95 
uöt32_t
 
	mí_foo
;

96 
uöt16_t
 
	mí_fos
;

97 
uöt16_t
 
	mí_∑d1
;

98 
uöt32_t
 
	mí_mxc§
;

99 
uöt32_t
 
	mí_mxc§_mask
;

102 
	s__ívxmm64
 {

103 
uöt16_t
 
	mí_cw
;

104 
uöt16_t
 
	mí_sw
;

105 
uöt8_t
 
	mí_tw
;

106 
uöt8_t
 
	mí_zîo
;

107 
uöt16_t
 
	mí_›code
;

108 
uöt64_t
 
	mí_rù
;

109 
uöt64_t
 
	mí_rdp
;

110 
uöt32_t
 
	mí_mxc§
;

111 
uöt32_t
 
	mí_mxc§_mask
;

115 
	sßvexmm
 {

116 
__ívxmm32
 
	msv_ív
;

118 
Âacc87
 
	mÂ_acc
;

119 
uöt8_t
 
	mÂ_∑d
[6];

120 } 
	msv_Â
[8];

121 
xmmacc
 
	msv_xmm
[8];

122 
uöt8_t
 
	msv_∑d
[224];

123 } 
__Æig√d
(16);

125 #ifde‡
__i386__


126 
	ußveÂu
 {

127 
ßve87
 
	msv_87
;

128 
ßvexmm
 
	msv_xmm
;

132 
	sßveÂu
 {

133 
__ívxmm64
 
	msv_ív
;

135 
Âacc87
 
	mÂ_acc
;

136 
uöt8_t
 
	mÂ_∑d
[6];

137 } 
	msv_Â
[8];

138 
xmmacc
 
	msv_xmm
[16];

139 
uöt8_t
 
	msv_∑d
[96];

140 } 
__Æig√d
(16);

143 
	sx°©e_hdr
 {

144 
uöt64_t
 
	mx°©e_bv
;

145 
uöt64_t
 
	mx°©e_xcomp_bv
;

146 
uöt8_t
 
	mx°©e_r§v0
[8];

147 
uöt8_t
 
	mx°©e_r§v
[40];

149 
	#XSTATE_XCOMP_BV_COMPACT
 (1ULL << 63)

	)

151 
	sßvexmm_x°©e
 {

152 
x°©e_hdr
 
	msx_hd
;

153 
ymmacc
 
	msx_ymm
[16];

156 
	sßvexmm_ymm
 {

157 
__ívxmm32
 
	msv_ív
;

159 
Âacc87
 
	mÂ_acc
;

160 
öt8_t
 
	mÂ_∑d
[6];

161 } 
	msv_Â
[8];

162 
xmmacc
 
	msv_xmm
[16];

163 
uöt8_t
 
	msv_∑d
[96];

164 
ßvexmm_x°©e
 
	msv_x°©e
;

165 } 
__Æig√d
(64);

167 
	sßveÂu_x°©e
 {

168 
x°©e_hdr
 
	msx_hd
;

169 
ymmacc
 
	msx_ymm
[16];

172 
	sßveÂu_ymm
 {

173 
__ívxmm64
 
	msv_ív
;

175 
Âacc87
 
	mÂ_acc
;

176 
öt8_t
 
	mÂ_∑d
[6];

177 } 
	msv_Â
[8];

178 
xmmacc
 
	msv_xmm
[16];

179 
uöt8_t
 
	msv_∑d
[96];

180 
ßveÂu_x°©e
 
	msv_x°©e
;

181 } 
__Æig√d
(64);

183 #unde‡
__ívxmm32


184 #unde‡
__ívxmm64


204 
	#__INITIAL_FPUCW__
 0x037F

	)

205 
	#__INITIAL_FPUCW_I386__
 0x127F

	)

206 
	#__INITIAL_NPXCW__
 
__INITIAL_FPUCW_I386__


	)

207 
	#__INITIAL_MXCSR__
 0x1F80

	)

208 
	#__INITIAL_MXCSR_MASK__
 0xFFBF

	)

215 
	#X86_XSTATE_XCR0_OFFSET
 464

	)

	@/usr/include/x86/frame.h

39 #i‚de‡
_MACHINE_FRAME_H_


40 
	#_MACHINE_FRAME_H_
 1

	)

46 #ifde‡
__i386__


51 
	så≠‰ame
 {

52 
	mtf_fs
;

53 
	mtf_es
;

54 
	mtf_ds
;

55 
	mtf_edi
;

56 
	mtf_esi
;

57 
	mtf_ebp
;

58 
	mtf_i•
;

59 
	mtf_ebx
;

60 
	mtf_edx
;

61 
	mtf_ecx
;

62 
	mtf_óx
;

63 
	mtf_å≠no
;

65 
	mtf_îr
;

66 
	mtf_eù
;

67 
	mtf_cs
;

68 
	mtf_eÊags
;

70 
	mtf_e•
;

71 
	mtf_ss
;

76 
	så≠‰ame_vm86
 {

77 
	mtf_fs
;

78 
	mtf_es
;

79 
	mtf_ds
;

80 
	mtf_edi
;

81 
	mtf_esi
;

82 
	mtf_ebp
;

83 
	mtf_i•
;

84 
	mtf_ebx
;

85 
	mtf_edx
;

86 
	mtf_ecx
;

87 
	mtf_óx
;

88 
	mtf_å≠no
;

90 
	mtf_îr
;

91 
	mtf_eù
;

92 
	mtf_cs
;

93 
	mtf_eÊags
;

95 
	mtf_e•
;

96 
	mtf_ss
;

98 
	mtf_vm86_es
;

99 
	mtf_vm86_ds
;

100 
	mtf_vm86_fs
;

101 
	mtf_vm86_gs
;

111 
	#TF_HAS_STACKREGS
(
tf
Ë
	`TRAPF_USERMODE
—f)

	)

114 #ifde‡
__amd64__


122 
	så≠‰ame
 {

123 
ªgi°î_t
 
	mtf_rdi
;

124 
ªgi°î_t
 
	mtf_rsi
;

125 
ªgi°î_t
 
	mtf_rdx
;

126 
ªgi°î_t
 
	mtf_rcx
;

127 
ªgi°î_t
 
	mtf_r8
;

128 
ªgi°î_t
 
	mtf_r9
;

129 
ªgi°î_t
 
	mtf_øx
;

130 
ªgi°î_t
 
	mtf_rbx
;

131 
ªgi°î_t
 
	mtf_rbp
;

132 
ªgi°î_t
 
	mtf_r10
;

133 
ªgi°î_t
 
	mtf_r11
;

134 
ªgi°î_t
 
	mtf_r12
;

135 
ªgi°î_t
 
	mtf_r13
;

136 
ªgi°î_t
 
	mtf_r14
;

137 
ªgi°î_t
 
	mtf_r15
;

138 
uöt32_t
 
	mtf_å≠no
;

139 
uöt16_t
 
	mtf_fs
;

140 
uöt16_t
 
	mtf_gs
;

141 
ªgi°î_t
 
	mtf_addr
;

142 
uöt32_t
 
	mtf_Êags
;

143 
uöt16_t
 
	mtf_es
;

144 
uöt16_t
 
	mtf_ds
;

146 
ªgi°î_t
 
	mtf_îr
;

147 
ªgi°î_t
 
	mtf_rù
;

148 
ªgi°î_t
 
	mtf_cs
;

149 
ªgi°î_t
 
	mtf_rÊags
;

151 
ªgi°î_t
 
	mtf_r•
;

152 
ªgi°î_t
 
	mtf_ss
;

155 
	#TF_HASSEGS
 0x1

	)

156 
	#TF_HASBASES
 0x2

	)

157 
	#TF_HASFPXSTATE
 0x4

	)

	@/usr/include/x86/intr_machdep.h

31 #i‚de‡
__X86_INTR_MACHDEP_H__


32 
	#__X86_INTR_MACHDEP_H__


	)

34 #ifde‡
_KERNEL


61 
	#NUM_MSI_INTS
 512

	)

62 
	#MINIMUM_MSI_INT
 256

	)

64 
u_öt
 
fú°_msi_úq
;

65 
u_öt
 
num_io_úqs
;

70 
	#MSI_INTEL_ADDR_BASE
 0x„e00000

	)

72 #i‚de‡
LOCORE


74 
	töth™d_t
();

76 
	#IDTVEC
(
«me
Ë
	`__CONCAT
(
X
,«me)

	)

78 
	göt§c
;

85 
	spic
 {

86 (*
	mpic_ªgi°î_sour˚s
)(
	mpic
 *);

87 (*
	mpic_íabÀ_sour˚
)(
	möt§c
 *);

88 (*
	mpic_dißbÀ_sour˚
)(
	möt§c
 *, );

89 (*
	mpic_eoi_sour˚
)(
	möt§c
 *);

90 (*
	mpic_íabÀ_öå
)(
	möt§c
 *);

91 (*
	mpic_dißbÀ_öå
)(
	möt§c
 *);

92 (*
	mpic_ve˘‹
)(
	möt§c
 *);

93 (*
	mpic_sour˚_≥ndög
)(
	möt§c
 *);

94 (*
	mpic_su•íd
)(
	mpic
 *);

95 (*
	mpic_ªsume
)(
	mpic
 *, 
boﬁ
 
	msu•íd_ˇn˚Œed
);

96 (*
	mpic_c⁄fig_öå
)(
	möt§c
 *, 
	möå_åiggî
,

97 
	möå_pﬁ¨ôy
);

98 (*
	mpic_assign_˝u
)(
	möt§c
 *, 
u_öt
 
	m≠ic_id
);

99 (*
	mpic_ª¥ogøm_pö
)(
	möt§c
 *);

100 
TAILQ_ENTRY
(
pic
Ë
	mpics
;

105 
	mPIC_EOI
,

106 
	mPIC_NO_EOI
,

115 
	söt§c
 {

116 
pic
 *
	mis_pic
;

117 
öå_evít
 *
	mis_evít
;

118 
u_l⁄g
 *
	mis_cou¡
;

119 
u_l⁄g
 *
	mis_°øycou¡
;

120 
u_öt
 
	mis_ödex
;

121 
u_öt
 
	mis_h™dÀrs
;

122 
u_öt
 
	mis_domaö
;

123 
u_öt
 
	mis_˝u
;

126 
	gå≠‰ame
;

128 #ifde‡
SMP


129 
˝u£t_t
 
öå_˝us
;

131 
mtx
 
icu_lock
;

132 
ñ¸_found
;

133 #ifde‡
SMP


134 
msix_dißbÀ_migøti⁄
;

137 #i‚de‡
DEV_ATPIC


138 
©pic_ª£t
();

141 
ñ¸_¥obe
();

142 
öå_åiggî
 
ñ¸_ªad_åiggî
(
u_öt
 
úq
);

143 
ñ¸_ªsume
();

144 
ñ¸_wrôe_åiggî
(
u_öt
 
úq
, 
öå_åiggî
 
åiggî
);

145 #ifde‡
SMP


146 
öå_add_˝u
(
u_öt
 
˝u
);

148 
öå_add_h™dÀr
(c⁄° *
«me
, 
ve˘‹
, 
drivî_fûãr_t
 
fûãr
,

149 
drivî_öå_t
 
h™dÀr
, *
¨g
, 
öå_ty≥
 
Êags
, **
cookõp
,

150 
domaö
);

151 #ifde‡
SMP


152 
öå_böd
(
u_öt
 
ve˘‹
, 
u_ch¨
 
˝u
);

154 
öå_c⁄fig_öå
(
ve˘‹
, 
öå_åiggî
 
åig
,

155 
öå_pﬁ¨ôy
 
pﬁ
);

156 
öå_des¸ibe
(
u_öt
 
ve˘‹
, *
ih
, c⁄° *
des¸
);

157 
öå_execuã_h™dÀrs
(
öt§c
 *
i§c
, 
å≠‰ame
 *
‰ame
);

158 
u_öt
 
öå_√xt_˝u
(
domaö
);

159 
öt§c
 *
öå_lookup_sour˚
(
ve˘‹
);

160 
öå_ªgi°î_pic
(
pic
 *pic);

161 
öå_ªgi°î_sour˚
(
öt§c
 *
i§c
);

162 
öå_ªmove_h™dÀr
(*
cookõ
);

163 
öå_ªsume
(
boﬁ
 
su•íd_ˇn˚Œed
);

164 
öå_su•íd
();

165 
öå_ª¥ogøm
();

166 
öå˙t_add
(c⁄° *
«me
, 
u_l⁄g
 **
cou¡p
);

167 
√xus_add_úq
(
u_l⁄g
 
úq
);

168 
msi_Æloc
(
devi˚_t
 
dev
, 
cou¡
, 
maxcou¡
, *
úqs
);

169 
msi_öô
();

170 
msi_m≠
(
úq
, 
uöt64_t
 *
addr
, 
uöt32_t
 *
d©a
);

171 
msi_ªÀa£
(*
úqs
, 
cou¡
);

172 
msix_Æloc
(
devi˚_t
 
dev
, *
úq
);

173 
msix_ªÀa£
(
úq
);

174 #ifde‡
XENHVM


175 
xí_öå_Æloc_úqs
();

	@/usr/include/x86/metadata.h

29 #i‚de‡
_MACHINE_METADATA_H_


30 
	#_MACHINE_METADATA_H_


	)

32 
	#MODINFOMD_SMAP
 0x1001

	)

33 
	#MODINFOMD_SMAP_XATTR
 0x1002

	)

34 
	#MODINFOMD_DTBP
 0x1003

	)

35 
	#MODINFOMD_EFI_MAP
 0x1004

	)

36 
	#MODINFOMD_EFI_FB
 0x1005

	)

37 
	#MODINFOMD_MODULEP
 0x1006

	)

39 
	sefi_m≠_hódî
 {

40 
uöt64_t
 
	mmem‹y_size
;

41 
uöt64_t
 
	mdes¸ùt‹_size
;

42 
uöt32_t
 
	mdes¸ùt‹_vîsi⁄
;

45 
	sefi_fb
 {

46 
uöt64_t
 
	mfb_addr
;

47 
uöt64_t
 
	mfb_size
;

48 
uöt32_t
 
	mfb_height
;

49 
uöt32_t
 
	mfb_width
;

50 
uöt32_t
 
	mfb_°ride
;

51 
uöt32_t
 
	mfb_mask_ªd
;

52 
uöt32_t
 
	mfb_mask_gªí
;

53 
uöt32_t
 
	mfb_mask_blue
;

54 
uöt32_t
 
	mfb_mask_ª£rved
;

	@/usr/include/x86/ofw_machdep.h

31 #i‚de‡
_MACHINE_OFW_MACHDEP_H_


32 
	#_MACHINE_OFW_MACHDEP_H_


	)

34 
	~<machöe/bus.h
>

35 
	~<vm/vm.h
>

37 
uöt32_t
 
	t˚Œ_t
;

39 
	smem_ªgi⁄
 {

40 
vm_off£t_t
 
	mmr_°¨t
;

41 
vm_size_t
 
	mmr_size
;

	@/usr/include/x86/pci_cfgreg.h

32 #i‚de‡
__X86_PCI_CFGREG_H__


33 
	#__X86_PCI_CFGREG_H__


	)

35 
	#CONF1_ADDR_PORT
 0x0cf8

	)

36 
	#CONF1_DATA_PORT
 0x0cfc

	)

38 
	#CONF1_ENABLE
 0x80000000ul

	)

39 
	#CONF1_ENABLE_CHK
 0x80000000ul

	)

40 
	#CONF1_ENABLE_MSK
 0x7f000000ul

	)

41 
	#CONF1_ENABLE_CHK1
 0xff000001ul

	)

42 
	#CONF1_ENABLE_MSK1
 0x80000001ul

	)

43 
	#CONF1_ENABLE_RES1
 0x80000000ul

	)

45 
	#CONF2_ENABLE_PORT
 0x0cf8

	)

46 
	#CONF2_FORWARD_PORT
 0x0cÁ

	)

48 
	#CONF2_ENABLE_CHK
 0x0e

	)

49 
	#CONF2_ENABLE_RES
 0x0e

	)

51 
rm™_ªs_t
 
ho°b_Æloc_°¨t
(
ty≥
,Ñm™_ªs_à
°¨t
,Ñm™_ªs_à
íd
,Ñm™_ªs_à
cou¡
);

52 
pcõ_cfgªg›í
(
uöt64_t
 
ba£
, 
uöt8_t
 
möbus
, uöt8_à
maxbus
);

53 
pci_cfgªg›í
();

54 
u_öt32_t
 
pci_cfgªgªad
(
bus
, 
¶Ÿ
, 
func
, 
ªg
, 
byãs
);

55 
pci_cfgªgwrôe
(
bus
, 
¶Ÿ
, 
func
, 
ªg
, 
u_öt32_t
 
d©a
, 
byãs
);

56 #ifde‡
__HAVE_PIR


57 
pci_pú_›í
();

58 
pci_pú_¥obe
(
bus
, 
ªquúe_∑r£
);

59 
pci_pú_rouã_öãºu±
(
bus
, 
devi˚
, 
func
, 
pö
);

	@/usr/include/x86/psl.h

38 #i‚de‡
_MACHINE_PSL_H_


39 
	#_MACHINE_PSL_H_


	)

44 
	#PSL_C
 0x00000001

	)

45 
	#PSL_PF
 0x00000004

	)

46 
	#PSL_AF
 0x00000010

	)

47 
	#PSL_Z
 0x00000040

	)

48 
	#PSL_N
 0x00000080

	)

49 
	#PSL_T
 0x00000100

	)

50 
	#PSL_I
 0x00000200

	)

51 
	#PSL_D
 0x00000400

	)

52 
	#PSL_V
 0x00000800

	)

53 
	#PSL_IOPL
 0x00003000

	)

54 
	#PSL_NT
 0x00004000

	)

55 
	#PSL_RF
 0x00010000

	)

56 
	#PSL_VM
 0x00020000

	)

57 
	#PSL_AC
 0x00040000

	)

58 
	#PSL_VIF
 0x00080000

	)

59 
	#PSL_VIP
 0x00100000

	)

60 
	#PSL_ID
 0x00200000

	)

67 
	#PSL_RESERVED_DEFAULT
 0x00000002

	)

73 
	#PSL_KERNEL
 
PSL_RESERVED_DEFAULT


	)

74 
	#PSL_USER
 (
PSL_RESERVED_DEFAULT
 | 
PSL_I
)

	)

91 
	#PSL_USERCHANGE
 (
PSL_C
 | 
PSL_PF
 | 
PSL_AF
 | 
PSL_Z
 | 
PSL_N
 | 
PSL_T
 \

92 | 
PSL_D
 | 
PSL_V
 | 
PSL_NT
 | 
PSL_RF
 | 
PSL_AC
 | 
PSL_ID
)

	)

	@/usr/include/x86/ptrace.h

35 #i‚de‡
_MACHINE_PTRACE_H_


36 
	#_MACHINE_PTRACE_H_


	)

38 
	#__HAVE_PTRACE_MACHDEP


	)

45 #ifde‡
__i386__


46 
	#PT_GETXMMREGS
 (
PT_FIRSTMACH
 + 0)

	)

47 
	#PT_SETXMMREGS
 (
PT_FIRSTMACH
 + 1)

	)

49 #ifde‡
_KERNEL


50 
	#PT_GETXSTATE_OLD
 (
PT_FIRSTMACH
 + 2)

	)

51 
	#PT_SETXSTATE_OLD
 (
PT_FIRSTMACH
 + 3)

	)

53 
	#PT_GETXSTATE_INFO
 (
PT_FIRSTMACH
 + 4)

	)

54 
	#PT_GETXSTATE
 (
PT_FIRSTMACH
 + 5)

	)

55 
	#PT_SETXSTATE
 (
PT_FIRSTMACH
 + 6)

	)

56 
	#PT_GETFSBASE
 (
PT_FIRSTMACH
 + 7)

	)

57 
	#PT_SETFSBASE
 (
PT_FIRSTMACH
 + 8)

	)

58 
	#PT_GETGSBASE
 (
PT_FIRSTMACH
 + 9)

	)

59 
	#PT_SETGSBASE
 (
PT_FIRSTMACH
 + 10)

	)

62 
	s±ø˚_x°©e_öfo
 {

63 
uöt64_t
 
	mxßve_mask
;

64 
uöt32_t
 
	mxßve_Àn
;

	@/usr/include/x86/pvclock.h

29 #i‚de‡
X86_PVCLOCK


30 
	#X86_PVCLOCK


	)

32 
	spv˛ock_v˝u_time_öfo
 {

33 
uöt32_t
 
	mvîsi⁄
;

34 
uöt32_t
 
	m∑d0
;

35 
uöt64_t
 
	mtsc_time°amp
;

36 
uöt64_t
 
	msy°em_time
;

37 
uöt32_t
 
	mtsc_to_sy°em_mul
;

38 
öt8_t
 
	mtsc_shi·
;

39 
uöt8_t
 
	mÊags
;

40 
uöt8_t
 
	m∑d
[2];

43 
	#PVCLOCK_FLAG_TSC_STABLE
 0x01

	)

44 
	#PVCLOCK_FLAG_GUEST_PASUED
 0x02

	)

46 
	spv˛ock_wÆl_˛ock
 {

47 
uöt32_t
 
	mvîsi⁄
;

48 
uöt32_t
 
	m£c
;

49 
uöt32_t
 
	mn£c
;

52 
pv˛ock_ªsume
();

53 
uöt64_t
 
pv˛ock_gë_œ°_cy˛es
();

54 
uöt64_t
 
pv˛ock_tsc_‰eq
(
pv˛ock_v˝u_time_öfo
 *
ti
);

55 
uöt64_t
 
pv˛ock_gë_timecou¡
(
pv˛ock_v˝u_time_öfo
 *
ti
);

56 
pv˛ock_gë_wÆl˛ock
(
pv˛ock_wÆl_˛ock
 *
wc
,

57 
time•ec
 *
ts
);

	@/usr/include/x86/reg.h

39 #i‚de‡
_MACHINE_REG_H_


40 
	#_MACHINE_REG_H_


	)

42 
	~<machöe/_ty≥s.h
>

44 #ifde‡
__i386__


56 
	#tFS
 (0)

	)

57 
	#tES
 (1)

	)

58 
	#tDS
 (2)

	)

59 
	#tEDI
 (3)

	)

60 
	#tESI
 (4)

	)

61 
	#tEBP
 (5)

	)

62 
	#tISP
 (6)

	)

63 
	#tEBX
 (7)

	)

64 
	#tEDX
 (8)

	)

65 
	#tECX
 (9)

	)

66 
	#tEAX
 (10)

	)

67 
	#tERR
 (12)

	)

68 
	#tEIP
 (13)

	)

69 
	#tCS
 (14)

	)

70 
	#tEFLAGS
 (15)

	)

71 
	#tESP
 (16)

	)

72 
	#tSS
 (17)

	)

81 
	#tGS
 (18)

	)

85 #ifdef 
__i386__


86 
	#__ªg32
 
ªg


	)

87 
	#__Âªg32
 
Âªg


	)

88 
	#__dbªg32
 
dbªg


	)

90 
	#__ªg32
 
ªg32


	)

91 
	#__ªg64
 
ªg


	)

92 
	#__Âªg32
 
Âªg32


	)

93 
	#__Âªg64
 
Âªg


	)

94 
	#__dbªg32
 
dbªg32


	)

95 
	#__dbªg64
 
dbªg


	)

96 
	#__HAVE_REG32


	)

102 
	s__ªg32
 {

103 
__uöt32_t
 
	mr_fs
;

104 
__uöt32_t
 
	mr_es
;

105 
__uöt32_t
 
	mr_ds
;

106 
__uöt32_t
 
	mr_edi
;

107 
__uöt32_t
 
	mr_esi
;

108 
__uöt32_t
 
	mr_ebp
;

109 
__uöt32_t
 
	mr_i•
;

110 
__uöt32_t
 
	mr_ebx
;

111 
__uöt32_t
 
	mr_edx
;

112 
__uöt32_t
 
	mr_ecx
;

113 
__uöt32_t
 
	mr_óx
;

114 
__uöt32_t
 
	mr_å≠no
;

115 
__uöt32_t
 
	mr_îr
;

116 
__uöt32_t
 
	mr_eù
;

117 
__uöt32_t
 
	mr_cs
;

118 
__uöt32_t
 
	mr_eÊags
;

119 
__uöt32_t
 
	mr_e•
;

120 
__uöt32_t
 
	mr_ss
;

121 
__uöt32_t
 
	mr_gs
;

124 
	s__ªg64
 {

125 
__öt64_t
 
	mr_r15
;

126 
__öt64_t
 
	mr_r14
;

127 
__öt64_t
 
	mr_r13
;

128 
__öt64_t
 
	mr_r12
;

129 
__öt64_t
 
	mr_r11
;

130 
__öt64_t
 
	mr_r10
;

131 
__öt64_t
 
	mr_r9
;

132 
__öt64_t
 
	mr_r8
;

133 
__öt64_t
 
	mr_rdi
;

134 
__öt64_t
 
	mr_rsi
;

135 
__öt64_t
 
	mr_rbp
;

136 
__öt64_t
 
	mr_rbx
;

137 
__öt64_t
 
	mr_rdx
;

138 
__öt64_t
 
	mr_rcx
;

139 
__öt64_t
 
	mr_øx
;

140 
__uöt32_t
 
	mr_å≠no
;

141 
__uöt16_t
 
	mr_fs
;

142 
__uöt16_t
 
	mr_gs
;

143 
__uöt32_t
 
	mr_îr
;

144 
__uöt16_t
 
	mr_es
;

145 
__uöt16_t
 
	mr_ds
;

146 
__öt64_t
 
	mr_rù
;

147 
__öt64_t
 
	mr_cs
;

148 
__öt64_t
 
	mr_rÊags
;

149 
__öt64_t
 
	mr_r•
;

150 
__öt64_t
 
	mr_ss
;

160 
	s__Âªg32
 {

161 
__uöt32_t
 
	mÂr_ív
[7];

162 
__uöt8_t
 
	mÂr_acc
[8][10];

163 
__uöt32_t
 
	mÂr_ex_sw
;

164 
__uöt8_t
 
	mÂr_∑d
[64];

167 
	s__Âªg64
 {

168 
__uöt64_t
 
	mÂr_ív
[4];

169 
__uöt8_t
 
	mÂr_acc
[8][16];

170 
__uöt8_t
 
	mÂr_xacc
[16][16];

171 
__uöt64_t
 
	mÂr_•¨e
[12];

177 
	sxmmªg
 {

183 
__uöt32_t
 
	mxmm_ív
[8];

184 
__uöt8_t
 
	mxmm_acc
[8][16];

185 
__uöt8_t
 
	mxmm_ªg
[8][16];

186 
__uöt8_t
 
	mxmm_∑d
[224];

192 
	s__dbªg32
 {

193 
__uöt32_t
 
	mdr
[8];

200 
	s__dbªg64
 {

201 
__uöt64_t
 
	mdr
[16];

209 
	#DBREG_DR6_RESERVED1
 0xffff0ff0

	)

210 
	#DBREG_DR6_BMASK
 0x000f

	)

211 
	#DBREG_DR6_B
(
i
Ë(1 << (i))

	)

212 
	#DBREG_DR6_BD
 0x2000

	)

213 
	#DBREG_DR6_BS
 0x4000

	)

214 
	#DBREG_DR6_BT
 0x8000

	)

216 
	#DBREG_DR7_RESERVED1
 0x0400

	)

217 
	#DBREG_DR7_LOCAL_ENABLE
 0x01

	)

218 
	#DBREG_DR7_GLOBAL_ENABLE
 0x02

	)

219 
	#DBREG_DR7_LEN_1
 0x00

	)

220 
	#DBREG_DR7_LEN_2
 0x01

	)

221 
	#DBREG_DR7_LEN_4
 0x03

	)

222 
	#DBREG_DR7_LEN_8
 0x02

	)

223 
	#DBREG_DR7_EXEC
 0x00

	)

224 
	#DBREG_DR7_WRONLY
 0x01

	)

225 
	#DBREG_DR7_RDWR
 0x03

	)

226 
	#DBREG_DR7_MASK
(
i
) \

227 ((
__u_ªgi°î_t
)(0xfË<< ((
i
Ë* 4 + 16Ë| 0x3 << (iË* 2)

	)

228 
	#DBREG_DR7_SET
(
i
, 
Àn
, 
ac˚ss
, 
íabÀ
) \

229 ((
__u_ªgi°î_t
)((
Àn
Ë<< 2 | (
ac˚ss
)Ë<< ((
i
) * 4 + 16) | \

230 (
íabÀ
Ë<< (
i
Ë* 2)

	)

231 
	#DBREG_DR7_GD
 0x2000

	)

232 
	#DBREG_DR7_ENABLED
(
d
, 
i
Ë(((dË& 0x3 << (iË* 2Ë!0)

	)

233 
	#DBREG_DR7_ACCESS
(
d
, 
i
Ë((dË>> ((iË* 4 + 16Ë& 0x3)

	)

234 
	#DBREG_DR7_LEN
(
d
, 
i
Ë((dË>> ((iË* 4 + 18Ë& 0x3)

	)

236 
	#DBREG_DRX
(
d
,
x
Ë((d)->
dr
[(x)]Ë

	)

239 #unde‡
__ªg32


240 #unde‡
__ªg64


241 #unde‡
__Âªg32


242 #unde‡
__Âªg64


243 #unde‡
__dbªg32


244 #unde‡
__dbªg64


246 #ifde‡
_KERNEL


247 
	gthªad
;

252 
fûl_ªgs
(
thªad
 *, 
ªg
 *);

253 
fûl_‰ame_ªgs
(
å≠‰ame
 *, 
ªg
 *);

254 
£t_ªgs
(
thªad
 *, 
ªg
 *);

255 
fûl_Âªgs
(
thªad
 *, 
Âªg
 *);

256 
£t_Âªgs
(
thªad
 *, 
Âªg
 *);

257 
fûl_dbªgs
(
thªad
 *, 
dbªg
 *);

258 
£t_dbªgs
(
thªad
 *, 
dbªg
 *);

259 #ifde‡
COMPAT_FREEBSD32


260 
fûl_ªgs32
(
thªad
 *, 
ªg32
 *);

261 
£t_ªgs32
(
thªad
 *, 
ªg32
 *);

262 
fûl_Âªgs32
(
thªad
 *, 
Âªg32
 *);

263 
£t_Âªgs32
(
thªad
 *, 
Âªg32
 *);

264 
fûl_dbªgs32
(
thªad
 *, 
dbªg32
 *);

265 
£t_dbªgs32
(
thªad
 *, 
dbªg32
 *);

	@/usr/include/x86/segments.h

39 #i‚de‡
_X86_SEGMENTS_H_


40 
	#_X86_SEGMENTS_H_


	)

49 
	#SEL_RPL_MASK
 3

	)

50 
	#ISPL
(
s
Ë((s)&3Ë

	)

51 
	#SEL_KPL
 0

	)

52 
	#SEL_UPL
 3

	)

53 
	#ISLDT
(
s
Ë((s)&
SEL_LDT
Ë

	)

54 
	#SEL_LDT
 4

	)

55 
	#IDXSEL
(
s
Ë(((s)>>3Ë& 0x1fffË

	)

56 
	#LSEL
(
s
,
r
Ë(((s)<<3Ë| 
SEL_LDT
 |ÑË

	)

57 
	#GSEL
(
s
,
r
Ë(((s)<<3Ë|ÑË

	)

64 
	s£gmít_des¸ùt‹
 {

65 
	msd_lﬁimô
:16;

66 
	msd_loba£
:24;

67 
	msd_ty≥
:5;

68 
	msd_d∂
:2;

69 
	msd_p
:1;

70 
	msd_hûimô
:4;

71 
	msd_xx
:2;

72 
	msd_def32
:1;

73 
	msd_gøn
:1;

74 
	msd_hiba£
:8;

75 } 
	g__∑cked
;

77 
	su£r_£gmít_des¸ùt‹
 {

78 
	msd_lﬁimô
:16;

79 
	msd_loba£
:24;

80 
	msd_ty≥
:5;

81 
	msd_d∂
:2;

82 
	msd_p
:1;

83 
	msd_hûimô
:4;

84 
	msd_xx
:1;

85 
	msd_l⁄g
:1;

86 
	msd_def32
:1;

87 
	msd_gøn
:1;

88 
	msd_hiba£
:8;

89 } 
	g__∑cked
;

91 
	#USD_GETBASE
(
sd
Ë(((sd)->
sd_loba£
Ë| (sd)->
sd_hiba£
 << 24)

	)

92 
	#USD_SETBASE
(
sd
, 
b
Ë(sd)->
sd_loba£
 = (b); \

93 (
sd
)->
sd_hiba£
 = ((
b
Ë>> 24);

	)

94 
	#USD_GETLIMIT
(
sd
Ë(((sd)->
sd_lﬁimô
Ë| (sd)->
sd_hûimô
 << 16)

	)

95 
	#USD_SETLIMIT
(
sd
, 
l
Ë(sd)->
sd_lﬁimô
 = (l); \

96 (
sd
)->
sd_hûimô
 = ((
l
Ë>> 16);

	)

98 #ifde‡
__i386__


102 
	sg©e_des¸ùt‹
 {

103 
	mgd_looff£t
:16;

104 
	mgd_£À˘‹
:16;

105 
	mgd_°k˝y
:5;

106 
	mgd_xx
:3;

107 
	mgd_ty≥
:5;

108 
	mgd_d∂
:2;

109 
	mgd_p
:1;

110 
	mgd_hioff£t
:16;

111 } 
	g__∑cked
;

116 
	udes¸ùt‹
 {

117 
£gmít_des¸ùt‹
 
	msd
;

118 
g©e_des¸ùt‹
 
	mgd
;

125 
	sg©e_des¸ùt‹
 {

126 
uöt64_t
 
	mgd_looff£t
:16;

127 
uöt64_t
 
	mgd_£À˘‹
:16;

128 
uöt64_t
 
	mgd_i°
:3;

129 
uöt64_t
 
	mgd_xx
:5;

130 
uöt64_t
 
	mgd_ty≥
:5;

131 
uöt64_t
 
	mgd_d∂
:2;

132 
uöt64_t
 
	mgd_p
:1;

133 
uöt64_t
 
	mgd_hioff£t
:48;

134 
uöt64_t
 
	msd_xx1
:32;

135 } 
	g__∑cked
;

140 
	udes¸ùt‹
 {

141 
u£r_£gmít_des¸ùt‹
 
	msd
;

142 
g©e_des¸ùt‹
 
	mgd
;

147 
	#SDT_SYSNULL
 0

	)

148 
	#SDT_SYS286TSS
 1

	)

149 
	#SDT_SYSLDT
 2

	)

150 
	#SDT_SYS286BSY
 3

	)

151 
	#SDT_SYS286CGT
 4

	)

152 
	#SDT_SYSTASKGT
 5

	)

153 
	#SDT_SYS286IGT
 6

	)

154 
	#SDT_SYS286TGT
 7

	)

155 
	#SDT_SYSNULL2
 8

	)

156 
	#SDT_SYS386TSS
 9

	)

157 
	#SDT_SYSTSS
 9

	)

158 
	#SDT_SYSNULL3
 10

	)

159 
	#SDT_SYS386BSY
 11

	)

160 
	#SDT_SYSBSY
 11

	)

161 
	#SDT_SYS386CGT
 12

	)

162 
	#SDT_SYSCGT
 12

	)

163 
	#SDT_SYSNULL4
 13

	)

164 
	#SDT_SYS386IGT
 14

	)

165 
	#SDT_SYSIGT
 14

	)

166 
	#SDT_SYS386TGT
 15

	)

167 
	#SDT_SYSTGT
 15

	)

170 
	#SDT_MEMRO
 16

	)

171 
	#SDT_MEMROA
 17

	)

172 
	#SDT_MEMRW
 18

	)

173 
	#SDT_MEMRWA
 19

	)

174 
	#SDT_MEMROD
 20

	)

175 
	#SDT_MEMRODA
 21

	)

176 
	#SDT_MEMRWD
 22

	)

177 
	#SDT_MEMRWDA
 23

	)

178 
	#SDT_MEME
 24

	)

179 
	#SDT_MEMEA
 25

	)

180 
	#SDT_MEMER
 26

	)

181 
	#SDT_MEMERA
 27

	)

182 
	#SDT_MEMEC
 28

	)

183 
	#SDT_MEMEAC
 29

	)

184 
	#SDT_MEMERC
 30

	)

185 
	#SDT_MEMERAC
 31

	)

190 
	#NIDT
 256

	)

191 
	#NRSVIDT
 32

	)

196 
	#IDT_DE
 0

	)

197 
	#IDT_DB
 1

	)

198 
	#IDT_NMI
 2

	)

199 
	#IDT_BP
 3

	)

200 
	#IDT_OF
 4

	)

201 
	#IDT_BR
 5

	)

202 
	#IDT_UD
 6

	)

203 
	#IDT_NM
 7

	)

204 
	#IDT_DF
 8

	)

205 
	#IDT_FPUGP
 9

	)

206 
	#IDT_TS
 10

	)

207 
	#IDT_NP
 11

	)

208 
	#IDT_SS
 12

	)

209 
	#IDT_GP
 13

	)

210 
	#IDT_PF
 14

	)

211 
	#IDT_MF
 16

	)

212 
	#IDT_AC
 17

	)

213 
	#IDT_MC
 18

	)

214 
	#IDT_XF
 19

	)

215 
	#IDT_IO_INTS
 
NRSVIDT


	)

216 
	#IDT_SYSCALL
 0x80

	)

217 
	#IDT_DTRACE_RET
 0x92

	)

218 
	#IDT_EVTCHN
 0x93

	)

220 #i‡
deföed
(
__i386__
)

226 
	#GNULL_SEL
 0

	)

227 
	#GPRIV_SEL
 1

	)

228 
	#GUFS_SEL
 2

	)

229 
	#GUGS_SEL
 3

	)

230 
	#GCODE_SEL
 4

	)

231 
	#GDATA_SEL
 5

	)

232 
	#GUCODE_SEL
 6

	)

233 
	#GUDATA_SEL
 7

	)

234 
	#GBIOSLOWMEM_SEL
 8

	)

235 
	#GPROC0_SEL
 9

	)

236 
	#GLDT_SEL
 10

	)

237 
	#GUSERLDT_SEL
 11

	)

238 
	#GPANIC_SEL
 12

	)

239 
	#GBIOSCODE32_SEL
 13

	)

240 
	#GBIOSCODE16_SEL
 14

	)

241 
	#GBIOSDATA_SEL
 15

	)

242 
	#GBIOSUTIL_SEL
 16

	)

243 
	#GBIOSARGS_SEL
 17

	)

244 
	#GNDIS_SEL
 18

	)

245 
	#NGDT
 19

	)

250 
	#LSYS5CALLS_SEL
 0

	)

251 
	#LSYS5SIGR_SEL
 1

	)

252 
	#LUCODE_SEL
 3

	)

253 
	#LUDATA_SEL
 5

	)

254 
	#NLDT
 (
LUDATA_SEL
 + 1)

	)

260 
	#GNULL_SEL
 0

	)

261 
	#GNULL2_SEL
 1

	)

262 
	#GUFS32_SEL
 2

	)

263 
	#GUGS32_SEL
 3

	)

264 
	#GCODE_SEL
 4

	)

265 
	#GDATA_SEL
 5

	)

266 
	#GUCODE32_SEL
 6

	)

267 
	#GUDATA_SEL
 7

	)

268 
	#GUCODE_SEL
 8

	)

269 
	#GPROC0_SEL
 9

	)

271 
	#GUSERLDT_SEL
 11

	)

273 
	#NGDT
 13

	)

	@/usr/include/x86/setjmp.h

34 #i‚de‡
_MACHINE_SETJMP_H_


35 
	#_MACHINE_SETJMP_H_


	)

37 
	~<sys/cdefs.h
>

39 
	#_JBLEN
 12

	)

46 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


47 
	s_sigjmp_buf
 { 
	m_sjb
[
_JBLEN
]; } 
	tsigjmp_buf
[1];

50 
	s_jmp_buf
 { 
	m_jb
[
_JBLEN
]; } 
	tjmp_buf
[1];

	@/usr/include/x86/sigframe.h

33 #i‚de‡
_X86_SIGFRAME_H_


34 
	#_X86_SIGFRAME_H_


	)

40 #ifde‡
__i386__


41 
	ssig‰ame
 {

49 
ªgi°î_t
 
	msf_signum
;

50 
ªgi°î_t
 
	msf_sigöfo
;

51 
ªgi°î_t
 
	msf_uc⁄ãxt
;

52 
ªgi°î_t
 
	msf_addr
;

55 
__sigöfoh™dÀr_t
 *
	msf_a˘i⁄
;

56 
__sigh™dÀr_t
 *
	msf_h™dÀr
;

57 } 
	msf_ahu
;

58 
uc⁄ãxt_t
 
	msf_uc
;

59 
sigöfo_t
 
	msf_si
;

63 #ifde‡
__amd64__


64 
	ssig‰ame
 {

66 
__sigöfoh™dÀr_t
 *
	msf_a˘i⁄
;

67 
__sigh™dÀr_t
 *
	msf_h™dÀr
;

68 } 
	msf_ahu
;

69 
uc⁄ãxt_t
 
	msf_uc
;

70 
sigöfo_t
 
	msf_si
;

	@/usr/include/x86/signal.h

36 #i‚de‡
_X86_SIGNAL_H


37 
	#_X86_SIGNAL_H
 1

	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_sig£t.h
>

46 #ifde‡
__i386__


47 
	tsig_©omic_t
;

49 #i‡
__BSD_VISIBLE


50 
	ssigc⁄ãxt
 {

51 
__sig£t
 
	msc_mask
;

52 
	msc_⁄°ack
;

53 
	msc_gs
;

54 
	msc_fs
;

55 
	msc_es
;

56 
	msc_ds
;

57 
	msc_edi
;

58 
	msc_esi
;

59 
	msc_ebp
;

60 
	msc_i•
;

61 
	msc_ebx
;

62 
	msc_edx
;

63 
	msc_ecx
;

64 
	msc_óx
;

65 
	msc_å≠no
;

66 
	msc_îr
;

67 
	msc_eù
;

68 
	msc_cs
;

69 
	msc_eÊ
;

70 
	msc_e•
;

71 
	msc_ss
;

72 
	msc_Àn
;

77 
	msc_Âf‹m©
;

78 
	msc_ow√dÂ
;

79 
	msc_Êags
;

80 
	msc_Â°©e
[128] 
__Æig√d
(16);

82 
	msc_fsba£
;

83 
	msc_gsba£
;

85 
	msc_xÂu°©e
;

86 
	msc_xÂu°©e_Àn
;

88 
	msc_•¨e2
[4];

91 
	#sc_•
 
sc_e•


	)

92 
	#sc_Â
 
sc_ebp


	)

93 
	#sc_pc
 
sc_eù


	)

94 
	#sc_ps
 
sc_eÊ


	)

95 
	#sc_eÊags
 
sc_eÊ


	)

100 #ifde‡
__amd64__


101 
	tsig_©omic_t
;

103 #i‡
__BSD_VISIBLE


114 
	ssigc⁄ãxt
 {

115 
__sig£t
 
	msc_mask
;

116 
	msc_⁄°ack
;

117 
	msc_rdi
;

118 
	msc_rsi
;

119 
	msc_rdx
;

120 
	msc_rcx
;

121 
	msc_r8
;

122 
	msc_r9
;

123 
	msc_øx
;

124 
	msc_rbx
;

125 
	msc_rbp
;

126 
	msc_r10
;

127 
	msc_r11
;

128 
	msc_r12
;

129 
	msc_r13
;

130 
	msc_r14
;

131 
	msc_r15
;

132 
	msc_å≠no
;

133 
	msc_fs
;

134 
	msc_gs
;

135 
	msc_addr
;

136 
	msc_Êags
;

137 
	msc_es
;

138 
	msc_ds
;

139 
	msc_îr
;

140 
	msc_rù
;

141 
	msc_cs
;

142 
	msc_rÊags
;

143 
	msc_r•
;

144 
	msc_ss
;

145 
	msc_Àn
;

150 
	msc_Âf‹m©
;

151 
	msc_ow√dÂ
;

152 
	msc_Â°©e
[64] 
__Æig√d
(16);

154 
	msc_fsba£
;

155 
	msc_gsba£
;

157 
	msc_xÂu°©e
;

158 
	msc_xÂu°©e_Àn
;

160 
	msc_•¨e
[4];

	@/usr/include/x86/specialreg.h

35 #i‚de‡
_MACHINE_SPECIALREG_H_


36 
	#_MACHINE_SPECIALREG_H_


	)

41 
	#CR0_PE
 0x00000001

	)

42 
	#CR0_MP
 0x00000002

	)

43 
	#CR0_EM
 0x00000004

	)

44 
	#CR0_TS
 0x00000008

	)

45 
	#CR0_PG
 0x80000000

	)

50 
	#CR0_NE
 0x00000020

	)

51 
	#CR0_WP
 0x00010000

	)

53 
	#CR0_AM
 0x00040000

	)

54 
	#CR0_NW
 0x20000000

	)

55 
	#CR0_CD
 0x40000000

	)

57 
	#CR3_PCID_SAVE
 0x8000000000000000

	)

58 
	#CR3_PCID_MASK
 0xfff

	)

63 
	#CR4_VME
 0x00000001

	)

64 
	#CR4_PVI
 0x00000002

	)

65 
	#CR4_TSD
 0x00000004

	)

66 
	#CR4_DE
 0x00000008

	)

67 
	#CR4_PSE
 0x00000010

	)

68 
	#CR4_PAE
 0x00000020

	)

69 
	#CR4_MCE
 0x00000040

	)

70 
	#CR4_PGE
 0x00000080

	)

71 
	#CR4_PCE
 0x00000100

	)

72 
	#CR4_FXSR
 0x00000200

	)

73 
	#CR4_XMM
 0x00000400

	)

74 
	#CR4_VMXE
 0x00002000

	)

75 
	#CR4_FSGSBASE
 0x00010000

	)

76 
	#CR4_PCIDE
 0x00020000

	)

77 
	#CR4_XSAVE
 0x00040000

	)

78 
	#CR4_SMEP
 0x00100000

	)

79 
	#CR4_SMAP
 0x00200000

	)

84 
	#EFER_SCE
 0x000000001

	)

85 
	#EFER_LME
 0x000000100

	)

86 
	#EFER_LMA
 0x000000400

	)

87 
	#EFER_NXE
 0x000000800

	)

88 
	#EFER_SVM
 0x000001000

	)

89 
	#EFER_LMSLE
 0x000002000

	)

90 
	#EFER_FFXSR
 0x000004000

	)

91 
	#EFER_TCE
 0x000008000

	)

96 
	#XCR0
 0

	)

98 
	#XFEATURE_ENABLED_X87
 0x00000001

	)

99 
	#XFEATURE_ENABLED_SSE
 0x00000002

	)

100 
	#XFEATURE_ENABLED_YMM_HI128
 0x00000004

	)

101 
	#XFEATURE_ENABLED_AVX
 
XFEATURE_ENABLED_YMM_HI128


	)

102 
	#XFEATURE_ENABLED_BNDREGS
 0x00000008

	)

103 
	#XFEATURE_ENABLED_BNDCSR
 0x00000010

	)

104 
	#XFEATURE_ENABLED_OPMASK
 0x00000020

	)

105 
	#XFEATURE_ENABLED_ZMM_HI256
 0x00000040

	)

106 
	#XFEATURE_ENABLED_HI16_ZMM
 0x00000080

	)

108 
	#XFEATURE_AVX
 \

109 (
XFEATURE_ENABLED_X87
 | 
XFEATURE_ENABLED_SSE
 | 
XFEATURE_ENABLED_AVX
)

	)

110 
	#XFEATURE_AVX512
 \

111 (
XFEATURE_ENABLED_OPMASK
 | 
XFEATURE_ENABLED_ZMM_HI256
 | \

112 
XFEATURE_ENABLED_HI16_ZMM
)

	)

113 
	#XFEATURE_MPX
 \

114 (
XFEATURE_ENABLED_BNDREGS
 | 
XFEATURE_ENABLED_BNDCSR
)

	)

119 
	#CPUID_FPU
 0x00000001

	)

120 
	#CPUID_VME
 0x00000002

	)

121 
	#CPUID_DE
 0x00000004

	)

122 
	#CPUID_PSE
 0x00000008

	)

123 
	#CPUID_TSC
 0x00000010

	)

124 
	#CPUID_MSR
 0x00000020

	)

125 
	#CPUID_PAE
 0x00000040

	)

126 
	#CPUID_MCE
 0x00000080

	)

127 
	#CPUID_CX8
 0x00000100

	)

128 
	#CPUID_APIC
 0x00000200

	)

129 
	#CPUID_B10
 0x00000400

	)

130 
	#CPUID_SEP
 0x00000800

	)

131 
	#CPUID_MTRR
 0x00001000

	)

132 
	#CPUID_PGE
 0x00002000

	)

133 
	#CPUID_MCA
 0x00004000

	)

134 
	#CPUID_CMOV
 0x00008000

	)

135 
	#CPUID_PAT
 0x00010000

	)

136 
	#CPUID_PSE36
 0x00020000

	)

137 
	#CPUID_PSN
 0x00040000

	)

138 
	#CPUID_CLFSH
 0x00080000

	)

139 
	#CPUID_B20
 0x00100000

	)

140 
	#CPUID_DS
 0x00200000

	)

141 
	#CPUID_ACPI
 0x00400000

	)

142 
	#CPUID_MMX
 0x00800000

	)

143 
	#CPUID_FXSR
 0x01000000

	)

144 
	#CPUID_SSE
 0x02000000

	)

145 
	#CPUID_XMM
 0x02000000

	)

146 
	#CPUID_SSE2
 0x04000000

	)

147 
	#CPUID_SS
 0x08000000

	)

148 
	#CPUID_HTT
 0x10000000

	)

149 
	#CPUID_TM
 0x20000000

	)

150 
	#CPUID_IA64
 0x40000000

	)

151 
	#CPUID_PBE
 0x80000000

	)

153 
	#CPUID2_SSE3
 0x00000001

	)

154 
	#CPUID2_PCLMULQDQ
 0x00000002

	)

155 
	#CPUID2_DTES64
 0x00000004

	)

156 
	#CPUID2_MON
 0x00000008

	)

157 
	#CPUID2_DS_CPL
 0x00000010

	)

158 
	#CPUID2_VMX
 0x00000020

	)

159 
	#CPUID2_SMX
 0x00000040

	)

160 
	#CPUID2_EST
 0x00000080

	)

161 
	#CPUID2_TM2
 0x00000100

	)

162 
	#CPUID2_SSSE3
 0x00000200

	)

163 
	#CPUID2_CNXTID
 0x00000400

	)

164 
	#CPUID2_SDBG
 0x00000800

	)

165 
	#CPUID2_FMA
 0x00001000

	)

166 
	#CPUID2_CX16
 0x00002000

	)

167 
	#CPUID2_XTPR
 0x00004000

	)

168 
	#CPUID2_PDCM
 0x00008000

	)

169 
	#CPUID2_PCID
 0x00020000

	)

170 
	#CPUID2_DCA
 0x00040000

	)

171 
	#CPUID2_SSE41
 0x00080000

	)

172 
	#CPUID2_SSE42
 0x00100000

	)

173 
	#CPUID2_X2APIC
 0x00200000

	)

174 
	#CPUID2_MOVBE
 0x00400000

	)

175 
	#CPUID2_POPCNT
 0x00800000

	)

176 
	#CPUID2_TSCDLT
 0x01000000

	)

177 
	#CPUID2_AESNI
 0x02000000

	)

178 
	#CPUID2_XSAVE
 0x04000000

	)

179 
	#CPUID2_OSXSAVE
 0x08000000

	)

180 
	#CPUID2_AVX
 0x10000000

	)

181 
	#CPUID2_F16C
 0x20000000

	)

182 
	#CPUID2_RDRAND
 0x40000000

	)

183 
	#CPUID2_HV
 0x80000000

	)

189 
	#CPUTPM1_SENSOR
 0x00000001

	)

190 
	#CPUTPM1_TURBO
 0x00000002

	)

191 
	#CPUTPM1_ARAT
 0x00000004

	)

192 
	#CPUTPM2_EFFREQ
 0x00000001

	)

197 
	#CPUPT_CR3
 (1 << 0Ë

	)

198 
	#CPUPT_PSB
 (1 << 1Ë

	)

199 
	#CPUPT_IPF
 (1 << 2Ë

	)

200 
	#CPUPT_MTC
 (1 << 3Ë

	)

201 
	#CPUPT_PRW
 (1 << 4Ë

	)

202 
	#CPUPT_PWR
 (1 << 5Ë

	)

205 
	#CPUPT_TOPA
 (1 << 0Ë

	)

206 
	#CPUPT_TOPA_MULTI
 (1 << 1Ë

	)

207 
	#CPUPT_SINGLE
 (1 << 2Ë

	)

208 
	#CPUPT_TT_OUT
 (1 << 3Ë

	)

209 
	#CPUPT_LINEAR_IP
 (1 << 31Ë

	)

212 
	#CPUPT_NADDR_S
 0

	)

213 
	#CPUPT_NADDR_M
 (0x7 << 
CPUPT_NADDR_S
)

	)

214 
	#CPUPT_MTC_BITMAP_S
 16

	)

215 
	#CPUPT_MTC_BITMAP_M
 (0xfff‡<< 
CPUPT_MTC_BITMAP_S
)

	)

218 
	#CPUPT_CT_BITMAP_S
 0

	)

219 
	#CPUPT_CT_BITMAP_M
 (0xfff‡<< 
CPUPT_CT_BITMAP_S
)

	)

220 
	#CPUPT_PFE_BITMAP_S
 16

	)

221 
	#CPUPT_PFE_BITMAP_M
 (0xfff‡<< 
CPUPT_PFE_BITMAP_S
)

	)

226 
	#AMDID_SYSCALL
 0x00000800

	)

227 
	#AMDID_MP
 0x00080000

	)

228 
	#AMDID_NX
 0x00100000

	)

229 
	#AMDID_EXT_MMX
 0x00400000

	)

230 
	#AMDID_FFXSR
 0x02000000

	)

231 
	#AMDID_PAGE1GB
 0x04000000

	)

232 
	#AMDID_RDTSCP
 0x08000000

	)

233 
	#AMDID_LM
 0x20000000

	)

234 
	#AMDID_EXT_3DNOW
 0x40000000

	)

235 
	#AMDID_3DNOW
 0x80000000

	)

237 
	#AMDID2_LAHF
 0x00000001

	)

238 
	#AMDID2_CMP
 0x00000002

	)

239 
	#AMDID2_SVM
 0x00000004

	)

240 
	#AMDID2_EXT_APIC
 0x00000008

	)

241 
	#AMDID2_CR8
 0x00000010

	)

242 
	#AMDID2_ABM
 0x00000020

	)

243 
	#AMDID2_SSE4A
 0x00000040

	)

244 
	#AMDID2_MAS
 0x00000080

	)

245 
	#AMDID2_PREFETCH
 0x00000100

	)

246 
	#AMDID2_OSVW
 0x00000200

	)

247 
	#AMDID2_IBS
 0x00000400

	)

248 
	#AMDID2_XOP
 0x00000800

	)

249 
	#AMDID2_SKINIT
 0x00001000

	)

250 
	#AMDID2_WDT
 0x00002000

	)

251 
	#AMDID2_LWP
 0x00008000

	)

252 
	#AMDID2_FMA4
 0x00010000

	)

253 
	#AMDID2_TCE
 0x00020000

	)

254 
	#AMDID2_NODE_ID
 0x00080000

	)

255 
	#AMDID2_TBM
 0x00200000

	)

256 
	#AMDID2_TOPOLOGY
 0x00400000

	)

257 
	#AMDID2_PCXC
 0x00800000

	)

258 
	#AMDID2_PNXC
 0x01000000

	)

259 
	#AMDID2_DBE
 0x04000000

	)

260 
	#AMDID2_PTSC
 0x08000000

	)

261 
	#AMDID2_PTSCEL2I
 0x10000000

	)

262 
	#AMDID2_MWAITX
 0x20000000

	)

267 
	#CPUID_STEPPING
 0x0000000f

	)

268 
	#CPUID_MODEL
 0x000000f0

	)

269 
	#CPUID_FAMILY
 0x00000f00

	)

270 
	#CPUID_EXT_MODEL
 0x000f0000

	)

271 
	#CPUID_EXT_FAMILY
 0x0ff00000

	)

272 #ifde‡
__i386__


273 
	#CPUID_TO_MODEL
(
id
) \

274 ((((
id
Ë& 
CPUID_MODEL
) >> 4) | \

275 ((((
id
Ë& 
CPUID_FAMILY
) >= 0x600) ? \

276 (((
id
Ë& 
CPUID_EXT_MODEL
Ë>> 12Ë: 0))

	)

277 
	#CPUID_TO_FAMILY
(
id
) \

278 ((((
id
Ë& 
CPUID_FAMILY
) >> 8) + \

279 ((((
id
Ë& 
CPUID_FAMILY
) == 0xf00) ? \

280 (((
id
Ë& 
CPUID_EXT_FAMILY
Ë>> 20Ë: 0))

	)

282 
	#CPUID_TO_MODEL
(
id
) \

283 ((((
id
Ë& 
CPUID_MODEL
) >> 4) | \

284 (((
id
Ë& 
CPUID_EXT_MODEL
Ë>> 12))

	)

285 
	#CPUID_TO_FAMILY
(
id
) \

286 ((((
id
Ë& 
CPUID_FAMILY
) >> 8) + \

287 (((
id
Ë& 
CPUID_EXT_FAMILY
Ë>> 20))

	)

293 
	#CPUID_BRAND_INDEX
 0x000000ff

	)

294 
	#CPUID_CLFUSH_SIZE
 0x0000ff00

	)

295 
	#CPUID_HTT_CORES
 0x00ff0000

	)

296 
	#CPUID_LOCAL_APIC_ID
 0xff000000

	)

301 
	#CPUID5_MON_MIN_SIZE
 0x0000fff‡

	)

302 
	#CPUID5_MON_MAX_SIZE
 0x0000fff‡

	)

303 
	#CPUID5_MON_MWAIT_EXT
 0x00000001

	)

304 
	#CPUID5_MWAIT_INTRBREAK
 0x00000002

	)

309 
	#MWAIT_C0
 0xf0

	)

310 
	#MWAIT_C1
 0x00

	)

311 
	#MWAIT_C2
 0x10

	)

312 
	#MWAIT_C3
 0x20

	)

313 
	#MWAIT_C4
 0x30

	)

319 
	#MWAIT_INTRBREAK
 0x00000001

	)

324 
	#CPUID_PERF_STAT
 0x00000001

	)

325 
	#CPUID_PERF_BIAS
 0x00000008

	)

330 
	#CPUID_TYPE_INVAL
 0

	)

331 
	#CPUID_TYPE_SMT
 1

	)

332 
	#CPUID_TYPE_CORE
 2

	)

337 
	#CPUID_EXTSTATE_XSAVEOPT
 0x00000001

	)

338 
	#CPUID_EXTSTATE_XSAVEC
 0x00000002

	)

339 
	#CPUID_EXTSTATE_XINUSE
 0x00000004

	)

340 
	#CPUID_EXTSTATE_XSAVES
 0x00000008

	)

345 
	#AMDRAS_MCA_OF_RECOV
 0x00000001

	)

346 
	#AMDRAS_SUCCOR
 0x00000002

	)

347 
	#AMDRAS_HW_ASSERT
 0x00000004

	)

348 
	#AMDRAS_SCALABLE_MCA
 0x00000008

	)

349 
	#AMDRAS_PFEH_SUPPORT
 0x00000010

	)

354 
	#AMDPM_TS
 0x00000001

	)

355 
	#AMDPM_FID
 0x00000002

	)

356 
	#AMDPM_VID
 0x00000004

	)

357 
	#AMDPM_TTP
 0x00000008

	)

358 
	#AMDPM_TM
 0x00000010

	)

359 
	#AMDPM_STC
 0x00000020

	)

360 
	#AMDPM_100MHZ_STEPS
 0x00000040

	)

361 
	#AMDPM_HW_PSTATE
 0x00000080

	)

362 
	#AMDPM_TSC_INVARIANT
 0x00000100

	)

363 
	#AMDPM_CPB
 0x00000200

	)

368 
	#AMDFEID_CLZERO
 0x00000001

	)

369 
	#AMDFEID_IRPERF
 0x00000002

	)

370 
	#AMDFEID_XSAVEERPTR
 0x00000004

	)

375 
	#AMDID_CMP_CORES
 0x000000ff

	)

376 
	#AMDID_COREID_SIZE
 0x0000f000

	)

377 
	#AMDID_COREID_SIZE_SHIFT
 12

	)

382 
	#CPUID_STDEXT_FSGSBASE
 0x00000001

	)

383 
	#CPUID_STDEXT_TSC_ADJUST
 0x00000002

	)

384 
	#CPUID_STDEXT_SGX
 0x00000004

	)

385 
	#CPUID_STDEXT_BMI1
 0x00000008

	)

386 
	#CPUID_STDEXT_HLE
 0x00000010

	)

387 
	#CPUID_STDEXT_AVX2
 0x00000020

	)

388 
	#CPUID_STDEXT_FDP_EXC
 0x00000040

	)

389 
	#CPUID_STDEXT_SMEP
 0x00000080

	)

390 
	#CPUID_STDEXT_BMI2
 0x00000100

	)

391 
	#CPUID_STDEXT_ERMS
 0x00000200

	)

392 
	#CPUID_STDEXT_INVPCID
 0x00000400

	)

393 
	#CPUID_STDEXT_RTM
 0x00000800

	)

394 
	#CPUID_STDEXT_PQM
 0x00001000

	)

395 
	#CPUID_STDEXT_NFPUSG
 0x00002000

	)

396 
	#CPUID_STDEXT_MPX
 0x00004000

	)

397 
	#CPUID_STDEXT_PQE
 0x00008000

	)

398 
	#CPUID_STDEXT_AVX512F
 0x00010000

	)

399 
	#CPUID_STDEXT_AVX512DQ
 0x00020000

	)

400 
	#CPUID_STDEXT_RDSEED
 0x00040000

	)

401 
	#CPUID_STDEXT_ADX
 0x00080000

	)

402 
	#CPUID_STDEXT_SMAP
 0x00100000

	)

403 
	#CPUID_STDEXT_AVX512IFMA
 0x00200000

	)

404 
	#CPUID_STDEXT_PCOMMIT
 0x00400000

	)

405 
	#CPUID_STDEXT_CLFLUSHOPT
 0x00800000

	)

406 
	#CPUID_STDEXT_CLWB
 0x01000000

	)

407 
	#CPUID_STDEXT_PROCTRACE
 0x02000000

	)

408 
	#CPUID_STDEXT_AVX512PF
 0x04000000

	)

409 
	#CPUID_STDEXT_AVX512ER
 0x08000000

	)

410 
	#CPUID_STDEXT_AVX512CD
 0x10000000

	)

411 
	#CPUID_STDEXT_SHA
 0x20000000

	)

412 
	#CPUID_STDEXT_AVX512BW
 0x40000000

	)

413 
	#CPUID_STDEXT_AVX512VL
 0x80000000

	)

418 
	#CPUID_STDEXT2_PREFETCHWT1
 0x00000001

	)

419 
	#CPUID_STDEXT2_UMIP
 0x00000004

	)

420 
	#CPUID_STDEXT2_PKU
 0x00000008

	)

421 
	#CPUID_STDEXT2_OSPKE
 0x00000010

	)

422 
	#CPUID_STDEXT2_RDPID
 0x00400000

	)

423 
	#CPUID_STDEXT2_SGXLC
 0x40000000

	)

428 
	#CPUID_STDEXT3_IBPB
 0x04000000

	)

429 
	#CPUID_STDEXT3_STIBP
 0x08000000

	)

430 
	#CPUID_STDEXT3_L1D_FLUSH
 0x10000000

	)

431 
	#CPUID_STDEXT3_ARCH_CAP
 0x20000000

	)

432 
	#CPUID_STDEXT3_SSBD
 0x80000000

	)

435 
	#IA32_ARCH_CAP_RDCL_NO
 0x00000001

	)

436 
	#IA32_ARCH_CAP_IBRS_ALL
 0x00000002

	)

437 
	#IA32_ARCH_CAP_RSBA
 0x00000004

	)

438 
	#IA32_ARCH_CAP_SKIP_L1DFL_VMENTRY
 0x00000008

	)

439 
	#IA32_ARCH_CAP_SSB_NO
 0x00000010

	)

444 
	#AMD_VENDOR_ID
 "AuthíticAMD"

	)

445 
	#CENTAUR_VENDOR_ID
 "CíèurHauls"

	)

446 
	#CYRIX_VENDOR_ID
 "CyrixIn°ód"

	)

447 
	#INTEL_VENDOR_ID
 "GíuöeI¡ñ"

	)

448 
	#NEXGEN_VENDOR_ID
 "NexGíDriví"

	)

449 
	#NSC_VENDOR_ID
 "Geodêby NSC"

	)

450 
	#RISE_VENDOR_ID
 "Ri£Ri£Ri£"

	)

451 
	#SIS_VENDOR_ID
 "SiS SiS SiS "

	)

452 
	#TRANSMETA_VENDOR_ID
 "GíuöeTMx86"

	)

453 
	#UMC_VENDOR_ID
 "UMC UMC UMC "

	)

458 
	#MSR_P5_MC_ADDR
 0x000

	)

459 
	#MSR_P5_MC_TYPE
 0x001

	)

460 
	#MSR_TSC
 0x010

	)

461 
	#MSR_P5_CESR
 0x011

	)

462 
	#MSR_P5_CTR0
 0x012

	)

463 
	#MSR_P5_CTR1
 0x013

	)

464 
	#MSR_IA32_PLATFORM_ID
 0x017

	)

465 
	#MSR_APICBASE
 0x01b

	)

466 
	#MSR_EBL_CR_POWERON
 0x02a

	)

467 
	#MSR_TEST_CTL
 0x033

	)

468 
	#MSR_IA32_FEATURE_CONTROL
 0x03a

	)

469 
	#MSR_IA32_SPEC_CTRL
 0x048

	)

470 
	#MSR_IA32_PRED_CMD
 0x049

	)

471 
	#MSR_BIOS_UPDT_TRIG
 0x079

	)

472 
	#MSR_BBL_CR_D0
 0x088

	)

473 
	#MSR_BBL_CR_D1
 0x089

	)

474 
	#MSR_BBL_CR_D2
 0x08a

	)

475 
	#MSR_BIOS_SIGN
 0x08b

	)

476 
	#MSR_PERFCTR0
 0x0c1

	)

477 
	#MSR_PERFCTR1
 0x0c2

	)

478 
	#MSR_PLATFORM_INFO
 0x0˚

	)

479 
	#MSR_MPERF
 0x0e7

	)

480 
	#MSR_APERF
 0x0e8

	)

481 
	#MSR_IA32_EXT_CONFIG
 0x0ì

	)

482 
	#MSR_MTRRˇp
 0x0„

	)

483 
	#MSR_IA32_ARCH_CAP
 0x10a

	)

484 
	#MSR_IA32_FLUSH_CMD
 0x10b

	)

485 
	#MSR_BBL_CR_ADDR
 0x116

	)

486 
	#MSR_BBL_CR_DECC
 0x118

	)

487 
	#MSR_BBL_CR_CTL
 0x119

	)

488 
	#MSR_BBL_CR_TRIG
 0x11a

	)

489 
	#MSR_BBL_CR_BUSY
 0x11b

	)

490 
	#MSR_BBL_CR_CTL3
 0x11e

	)

491 
	#MSR_SYSENTER_CS_MSR
 0x174

	)

492 
	#MSR_SYSENTER_ESP_MSR
 0x175

	)

493 
	#MSR_SYSENTER_EIP_MSR
 0x176

	)

494 
	#MSR_MCG_CAP
 0x179

	)

495 
	#MSR_MCG_STATUS
 0x17a

	)

496 
	#MSR_MCG_CTL
 0x17b

	)

497 
	#MSR_EVNTSEL0
 0x186

	)

498 
	#MSR_EVNTSEL1
 0x187

	)

499 
	#MSR_THERM_CONTROL
 0x19a

	)

500 
	#MSR_THERM_INTERRUPT
 0x19b

	)

501 
	#MSR_THERM_STATUS
 0x19c

	)

502 
	#MSR_IA32_MISC_ENABLE
 0x1a0

	)

503 
	#MSR_IA32_TEMPERATURE_TARGET
 0x1a2

	)

504 
	#MSR_TURBO_RATIO_LIMIT
 0x1ad

	)

505 
	#MSR_TURBO_RATIO_LIMIT1
 0x1´

	)

506 
	#MSR_DEBUGCTLMSR
 0x1d9

	)

507 
	#MSR_LASTBRANCHFROMIP
 0x1db

	)

508 
	#MSR_LASTBRANCHTOIP
 0x1dc

	)

509 
	#MSR_LASTINTFROMIP
 0x1dd

	)

510 
	#MSR_LASTINTTOIP
 0x1de

	)

511 
	#MSR_ROB_CR_BKUPTMPDR6
 0x1e0

	)

512 
	#MSR_MTRRV¨Ba£
 0x200

	)

513 
	#MSR_MTRR64kBa£
 0x250

	)

514 
	#MSR_MTRR16kBa£
 0x258

	)

515 
	#MSR_MTRR4kBa£
 0x268

	)

516 
	#MSR_PAT
 0x277

	)

517 
	#MSR_MC0_CTL2
 0x280

	)

518 
	#MSR_MTRRdefTy≥
 0x2ff

	)

519 
	#MSR_MC0_CTL
 0x400

	)

520 
	#MSR_MC0_STATUS
 0x401

	)

521 
	#MSR_MC0_ADDR
 0x402

	)

522 
	#MSR_MC0_MISC
 0x403

	)

523 
	#MSR_MC1_CTL
 0x404

	)

524 
	#MSR_MC1_STATUS
 0x405

	)

525 
	#MSR_MC1_ADDR
 0x406

	)

526 
	#MSR_MC1_MISC
 0x407

	)

527 
	#MSR_MC2_CTL
 0x408

	)

528 
	#MSR_MC2_STATUS
 0x409

	)

529 
	#MSR_MC2_ADDR
 0x40a

	)

530 
	#MSR_MC2_MISC
 0x40b

	)

531 
	#MSR_MC3_CTL
 0x40c

	)

532 
	#MSR_MC3_STATUS
 0x40d

	)

533 
	#MSR_MC3_ADDR
 0x40e

	)

534 
	#MSR_MC3_MISC
 0x40f

	)

535 
	#MSR_MC4_CTL
 0x410

	)

536 
	#MSR_MC4_STATUS
 0x411

	)

537 
	#MSR_MC4_ADDR
 0x412

	)

538 
	#MSR_MC4_MISC
 0x413

	)

539 
	#MSR_RAPL_POWER_UNIT
 0x606

	)

540 
	#MSR_PKG_ENERGY_STATUS
 0x611

	)

541 
	#MSR_DRAM_ENERGY_STATUS
 0x619

	)

542 
	#MSR_PP0_ENERGY_STATUS
 0x639

	)

543 
	#MSR_PP1_ENERGY_STATUS
 0x641

	)

544 
	#MSR_TSC_DEADLINE
 0x6e0

	)

549 
	#MSR_VMX_BASIC
 0x480

	)

550 
	#MSR_VMX_PINBASED_CTLS
 0x481

	)

551 
	#MSR_VMX_PROCBASED_CTLS
 0x482

	)

552 
	#MSR_VMX_EXIT_CTLS
 0x483

	)

553 
	#MSR_VMX_ENTRY_CTLS
 0x484

	)

554 
	#MSR_VMX_CR0_FIXED0
 0x486

	)

555 
	#MSR_VMX_CR0_FIXED1
 0x487

	)

556 
	#MSR_VMX_CR4_FIXED0
 0x488

	)

557 
	#MSR_VMX_CR4_FIXED1
 0x489

	)

558 
	#MSR_VMX_PROCBASED_CTLS2
 0x48b

	)

559 
	#MSR_VMX_EPT_VPID_CAP
 0x48c

	)

560 
	#MSR_VMX_TRUE_PINBASED_CTLS
 0x48d

	)

561 
	#MSR_VMX_TRUE_PROCBASED_CTLS
 0x48e

	)

562 
	#MSR_VMX_TRUE_EXIT_CTLS
 0x48f

	)

563 
	#MSR_VMX_TRUE_ENTRY_CTLS
 0x490

	)

569 
	#MSR_APIC_000
 0x800

	)

570 
	#MSR_APIC_ID
 0x802

	)

571 
	#MSR_APIC_VERSION
 0x803

	)

572 
	#MSR_APIC_TPR
 0x808

	)

573 
	#MSR_APIC_EOI
 0x80b

	)

574 
	#MSR_APIC_LDR
 0x80d

	)

575 
	#MSR_APIC_SVR
 0x80f

	)

576 
	#MSR_APIC_ISR0
 0x810

	)

577 
	#MSR_APIC_ISR1
 0x811

	)

578 
	#MSR_APIC_ISR2
 0x812

	)

579 
	#MSR_APIC_ISR3
 0x813

	)

580 
	#MSR_APIC_ISR4
 0x814

	)

581 
	#MSR_APIC_ISR5
 0x815

	)

582 
	#MSR_APIC_ISR6
 0x816

	)

583 
	#MSR_APIC_ISR7
 0x817

	)

584 
	#MSR_APIC_TMR0
 0x818

	)

585 
	#MSR_APIC_IRR0
 0x820

	)

586 
	#MSR_APIC_ESR
 0x828

	)

587 
	#MSR_APIC_LVT_CMCI
 0x82F

	)

588 
	#MSR_APIC_ICR
 0x830

	)

589 
	#MSR_APIC_LVT_TIMER
 0x832

	)

590 
	#MSR_APIC_LVT_THERMAL
 0x833

	)

591 
	#MSR_APIC_LVT_PCINT
 0x834

	)

592 
	#MSR_APIC_LVT_LINT0
 0x835

	)

593 
	#MSR_APIC_LVT_LINT1
 0x836

	)

594 
	#MSR_APIC_LVT_ERROR
 0x837

	)

595 
	#MSR_APIC_ICR_TIMER
 0x838

	)

596 
	#MSR_APIC_CCR_TIMER
 0x839

	)

597 
	#MSR_APIC_DCR_TIMER
 0x83e

	)

598 
	#MSR_APIC_SELF_IPI
 0x83f

	)

600 
	#MSR_IA32_XSS
 0xda0

	)

605 
	#MSR_IA32_RTIT_OUTPUT_BASE
 0x560

	)

606 
	#MSR_IA32_RTIT_OUTPUT_MASK_PTRS
 0x561

	)

607 
	#MSR_IA32_RTIT_CTL
 0x570

	)

608 
	#RTIT_CTL_TRACEEN
 (1 << 0)

	)

609 
	#RTIT_CTL_CYCEN
 (1 << 1)

	)

610 
	#RTIT_CTL_OS
 (1 << 2)

	)

611 
	#RTIT_CTL_USER
 (1 << 3)

	)

612 
	#RTIT_CTL_PWREVTEN
 (1 << 4)

	)

613 
	#RTIT_CTL_FUPONPTW
 (1 << 5)

	)

614 
	#RTIT_CTL_FABRICEN
 (1 << 6)

	)

615 
	#RTIT_CTL_CR3FILTER
 (1 << 7)

	)

616 
	#RTIT_CTL_TOPA
 (1 << 8)

	)

617 
	#RTIT_CTL_MTCEN
 (1 << 9)

	)

618 
	#RTIT_CTL_TSCEN
 (1 << 10)

	)

619 
	#RTIT_CTL_DISRETC
 (1 << 11)

	)

620 
	#RTIT_CTL_PTWEN
 (1 << 12)

	)

621 
	#RTIT_CTL_BRANCHEN
 (1 << 13)

	)

622 
	#RTIT_CTL_MTC_FREQ_S
 14

	)

623 
	#RTIT_CTL_MTC_FREQ
(
n
Ë(“Ë<< 
RTIT_CTL_MTC_FREQ_S
)

	)

624 
	#RTIT_CTL_MTC_FREQ_M
 (0x‡<< 
RTIT_CTL_MTC_FREQ_S
)

	)

625 
	#RTIT_CTL_CYC_THRESH_S
 19

	)

626 
	#RTIT_CTL_CYC_THRESH_M
 (0x‡<< 
RTIT_CTL_CYC_THRESH_S
)

	)

627 
	#RTIT_CTL_PSB_FREQ_S
 24

	)

628 
	#RTIT_CTL_PSB_FREQ_M
 (0x‡<< 
RTIT_CTL_PSB_FREQ_S
)

	)

629 
	#RTIT_CTL_ADDR_CFG_S
(
n
Ë(32 + (nË* 4)

	)

630 
	#RTIT_CTL_ADDR0_CFG_S
 32

	)

631 
	#RTIT_CTL_ADDR0_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR0_CFG_S
)

	)

632 
	#RTIT_CTL_ADDR1_CFG_S
 36

	)

633 
	#RTIT_CTL_ADDR1_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR1_CFG_S
)

	)

634 
	#RTIT_CTL_ADDR2_CFG_S
 40

	)

635 
	#RTIT_CTL_ADDR2_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR2_CFG_S
)

	)

636 
	#RTIT_CTL_ADDR3_CFG_S
 44

	)

637 
	#RTIT_CTL_ADDR3_CFG_M
 (0xfULL << 
RTIT_CTL_ADDR3_CFG_S
)

	)

638 
	#MSR_IA32_RTIT_STATUS
 0x571

	)

639 
	#RTIT_STATUS_FILTEREN
 (1 << 0)

	)

640 
	#RTIT_STATUS_CONTEXTEN
 (1 << 1)

	)

641 
	#RTIT_STATUS_TRIGGEREN
 (1 << 2)

	)

642 
	#RTIT_STATUS_ERROR
 (1 << 4)

	)

643 
	#RTIT_STATUS_STOPPED
 (1 << 5)

	)

644 
	#RTIT_STATUS_PACKETBYTECNT_S
 32

	)

645 
	#RTIT_STATUS_PACKETBYTECNT_M
 (0x1ffffULL << 
RTIT_STATUS_PACKETBYTECNT_S
)

	)

646 
	#MSR_IA32_RTIT_CR3_MATCH
 0x572

	)

647 
	#MSR_IA32_RTIT_ADDR_A
(
n
Ë(0x580 + (nË* 2)

	)

648 
	#MSR_IA32_RTIT_ADDR_B
(
n
Ë(0x581 + (nË* 2)

	)

649 
	#MSR_IA32_RTIT_ADDR0_A
 0x580

	)

650 
	#MSR_IA32_RTIT_ADDR0_B
 0x581

	)

651 
	#MSR_IA32_RTIT_ADDR1_A
 0x582

	)

652 
	#MSR_IA32_RTIT_ADDR1_B
 0x583

	)

653 
	#MSR_IA32_RTIT_ADDR2_A
 0x584

	)

654 
	#MSR_IA32_RTIT_ADDR2_B
 0x585

	)

655 
	#MSR_IA32_RTIT_ADDR3_A
 0x586

	)

656 
	#MSR_IA32_RTIT_ADDR3_B
 0x587

	)

659 
	#TOPA_SIZE_S
 6

	)

660 
	#TOPA_SIZE_M
 (0x‡<< 
TOPA_SIZE_S
)

	)

661 
	#TOPA_SIZE_4K
 (0 << 
TOPA_SIZE_S
)

	)

662 
	#TOPA_SIZE_8K
 (1 << 
TOPA_SIZE_S
)

	)

663 
	#TOPA_SIZE_16K
 (2 << 
TOPA_SIZE_S
)

	)

664 
	#TOPA_SIZE_32K
 (3 << 
TOPA_SIZE_S
)

	)

665 
	#TOPA_SIZE_64K
 (4 << 
TOPA_SIZE_S
)

	)

666 
	#TOPA_SIZE_128K
 (5 << 
TOPA_SIZE_S
)

	)

667 
	#TOPA_SIZE_256K
 (6 << 
TOPA_SIZE_S
)

	)

668 
	#TOPA_SIZE_512K
 (7 << 
TOPA_SIZE_S
)

	)

669 
	#TOPA_SIZE_1M
 (8 << 
TOPA_SIZE_S
)

	)

670 
	#TOPA_SIZE_2M
 (9 << 
TOPA_SIZE_S
)

	)

671 
	#TOPA_SIZE_4M
 (10 << 
TOPA_SIZE_S
)

	)

672 
	#TOPA_SIZE_8M
 (11 << 
TOPA_SIZE_S
)

	)

673 
	#TOPA_SIZE_16M
 (12 << 
TOPA_SIZE_S
)

	)

674 
	#TOPA_SIZE_32M
 (13 << 
TOPA_SIZE_S
)

	)

675 
	#TOPA_SIZE_64M
 (14 << 
TOPA_SIZE_S
)

	)

676 
	#TOPA_SIZE_128M
 (15 << 
TOPA_SIZE_S
)

	)

677 
	#TOPA_STOP
 (1 << 4)

	)

678 
	#TOPA_INT
 (1 << 2)

	)

679 
	#TOPA_END
 (1 << 0)

	)

684 
	#APICBASE_RESERVED
 0x000002ff

	)

685 
	#APICBASE_BSP
 0x00000100

	)

686 
	#APICBASE_X2APIC
 0x00000400

	)

687 
	#APICBASE_ENABLED
 0x00000800

	)

688 
	#APICBASE_ADDRESS
 0xfffff000

	)

691 
	#IA32_FEATURE_CONTROL_LOCK
 0x01

	)

692 
	#IA32_FEATURE_CONTROL_SMX_EN
 0x02

	)

693 
	#IA32_FEATURE_CONTROL_VMX_EN
 0x04

	)

696 
	#IA32_MISC_EN_FASTSTR
 0x0000000000000001ULL

	)

697 
	#IA32_MISC_EN_ATCCE
 0x0000000000000008ULL

	)

698 
	#IA32_MISC_EN_PERFMON
 0x0000000000000080ULL

	)

699 
	#IA32_MISC_EN_PEBSU
 0x0000000000001000ULL

	)

700 
	#IA32_MISC_EN_ESSTE
 0x0000000000010000ULL

	)

701 
	#IA32_MISC_EN_MONE
 0x0000000000040000ULL

	)

702 
	#IA32_MISC_EN_LIMCPUID
 0x0000000000400000ULL

	)

703 
	#IA32_MISC_EN_xTPRD
 0x0000000000800000ULL

	)

704 
	#IA32_MISC_EN_XDD
 0x0000000400000000ULL

	)

711 
	#IA32_SPEC_CTRL_IBRS
 0x00000001

	)

712 
	#IA32_SPEC_CTRL_STIBP
 0x00000002

	)

713 
	#IA32_SPEC_CTRL_SSBD
 0x00000004

	)

716 
	#IA32_PRED_CMD_IBPB_BARRIER
 0x0000000000000001ULL

	)

719 
	#IA32_FLUSH_CMD_L1D
 0x00000001

	)

724 
	#PAT_UNCACHEABLE
 0x00

	)

725 
	#PAT_WRITE_COMBINING
 0x01

	)

726 
	#PAT_WRITE_THROUGH
 0x04

	)

727 
	#PAT_WRITE_PROTECTED
 0x05

	)

728 
	#PAT_WRITE_BACK
 0x06

	)

729 
	#PAT_UNCACHED
 0x07

	)

730 
	#PAT_VALUE
(
i
, 
m
Ë(()(mË<< (8 * (i)))

	)

731 
	#PAT_MASK
(
i
Ë
	`PAT_VALUE
(i, 0xff)

	)

736 
	#MTRR_UNCACHEABLE
 0x00

	)

737 
	#MTRR_WRITE_COMBINING
 0x01

	)

738 
	#MTRR_WRITE_THROUGH
 0x04

	)

739 
	#MTRR_WRITE_PROTECTED
 0x05

	)

740 
	#MTRR_WRITE_BACK
 0x06

	)

741 
	#MTRR_N64K
 8

	)

742 
	#MTRR_N16K
 16

	)

743 
	#MTRR_N4K
 64

	)

744 
	#MTRR_CAP_WC
 0x0000000000000400

	)

745 
	#MTRR_CAP_FIXED
 0x0000000000000100

	)

746 
	#MTRR_CAP_VCNT
 0x00000000000000ff

	)

747 
	#MTRR_DEF_ENABLE
 0x0000000000000800

	)

748 
	#MTRR_DEF_FIXED_ENABLE
 0x0000000000000400

	)

749 
	#MTRR_DEF_TYPE
 0x00000000000000ff

	)

750 
	#MTRR_PHYSBASE_PHYSBASE
 0x000ffffffffff000

	)

751 
	#MTRR_PHYSBASE_TYPE
 0x00000000000000ff

	)

752 
	#MTRR_PHYSMASK_PHYSMASK
 0x000ffffffffff000

	)

753 
	#MTRR_PHYSMASK_VALID
 0x0000000000000800

	)

758 
	#CCR0
 0xc0

	)

759 
	#CCR0_NC0
 0x01

	)

761 
	#CCR0_NC1
 0x02

	)

762 
	#CCR0_A20M
 0x04

	)

763 
	#CCR0_KEN
 0x08

	)

764 
	#CCR0_FLUSH
 0x10

	)

765 
	#CCR0_BARB
 0x20

	)

767 
	#CCR0_CO
 0x40

	)

769 
	#CCR0_SUSPEND
 0x80

	)

771 
	#CCR1
 0xc1

	)

772 
	#CCR1_RPL
 0x01

	)

773 
	#CCR1_SMI
 0x02

	)

774 
	#CCR1_SMAC
 0x04

	)

775 
	#CCR1_MMAC
 0x08

	)

776 
	#CCR1_NO_LOCK
 0x10

	)

777 
	#CCR1_SM3
 0x80

	)

779 
	#CCR2
 0xc2

	)

780 
	#CCR2_WB
 0x02

	)

781 
	#CCR2_SADS
 0x02

	)

782 
	#CCR2_LOCK_NW
 0x04

	)

783 
	#CCR2_SUSP_HLT
 0x08

	)

784 
	#CCR2_WT1
 0x10

	)

785 
	#CCR2_WPR1
 0x10

	)

786 
	#CCR2_BARB
 0x20

	)

788 
	#CCR2_BWRT
 0x40

	)

789 
	#CCR2_USE_SUSP
 0x80

	)

791 
	#CCR3
 0xc3

	)

792 
	#CCR3_SMILOCK
 0x01

	)

793 
	#CCR3_NMI
 0x02

	)

794 
	#CCR3_LINBRST
 0x04

	)

795 
	#CCR3_SMMMODE
 0x08

	)

796 
	#CCR3_MAPEN0
 0x10

	)

797 
	#CCR3_MAPEN1
 0x20

	)

798 
	#CCR3_MAPEN2
 0x40

	)

799 
	#CCR3_MAPEN3
 0x80

	)

801 
	#CCR4
 0xe8

	)

802 
	#CCR4_IOMASK
 0x07

	)

803 
	#CCR4_MEM
 0x08

	)

804 
	#CCR4_DTE
 0x10

	)

805 
	#CCR4_FASTFPE
 0x20

	)

806 
	#CCR4_CPUID
 0x80

	)

808 
	#CCR5
 0xe9

	)

809 
	#CCR5_WT_ALLOC
 0x01

	)

810 
	#CCR5_SLOP
 0x02

	)

811 
	#CCR5_LBR1
 0x10

	)

812 
	#CCR5_ARREN
 0x20

	)

814 
	#CCR6
 0xó

	)

816 
	#CCR7
 0xeb

	)

819 
	#PCR0
 0x20

	)

820 
	#PCR0_RSTK
 0x01

	)

821 
	#PCR0_BTB
 0x02

	)

822 
	#PCR0_LOOP
 0x04

	)

823 
	#PCR0_AIS
 0x08

	)

825 
	#PCR0_MLR
 0x10

	)

826 
	#PCR0_BTBRT
 0x40

	)

827 
	#PCR0_LSSER
 0x80

	)

830 
	#DIR0
 0x„

	)

831 
	#DIR1
 0xff

	)

836 
	#MCG_CAP_COUNT
 0x000000ff

	)

837 
	#MCG_CAP_CTL_P
 0x00000100

	)

838 
	#MCG_CAP_EXT_P
 0x00000200

	)

839 
	#MCG_CAP_CMCI_P
 0x00000400

	)

840 
	#MCG_CAP_TES_P
 0x00000800

	)

841 
	#MCG_CAP_EXT_CNT
 0x00ff0000

	)

842 
	#MCG_CAP_SER_P
 0x01000000

	)

843 
	#MCG_STATUS_RIPV
 0x00000001

	)

844 
	#MCG_STATUS_EIPV
 0x00000002

	)

845 
	#MCG_STATUS_MCIP
 0x00000004

	)

846 
	#MCG_CTL_ENABLE
 0xffffffffffffffff

	)

847 
	#MCG_CTL_DISABLE
 0x0000000000000000

	)

848 
	#MSR_MC_CTL
(
x
Ë(
MSR_MC0_CTL
 + (xË* 4)

	)

849 
	#MSR_MC_STATUS
(
x
Ë(
MSR_MC0_STATUS
 + (xË* 4)

	)

850 
	#MSR_MC_ADDR
(
x
Ë(
MSR_MC0_ADDR
 + (xË* 4)

	)

851 
	#MSR_MC_MISC
(
x
Ë(
MSR_MC0_MISC
 + (xË* 4)

	)

852 
	#MSR_MC_CTL2
(
x
Ë(
MSR_MC0_CTL2
 + (x)Ë

	)

853 
	#MC_STATUS_MCA_ERROR
 0x000000000000ffff

	)

854 
	#MC_STATUS_MODEL_ERROR
 0x00000000ffff0000

	)

855 
	#MC_STATUS_OTHER_INFO
 0x01ffffff00000000

	)

856 
	#MC_STATUS_COR_COUNT
 0x001fffc000000000

	)

857 
	#MC_STATUS_TES_STATUS
 0x0060000000000000

	)

858 
	#MC_STATUS_AR
 0x0080000000000000

	)

859 
	#MC_STATUS_S
 0x0100000000000000

	)

860 
	#MC_STATUS_PCC
 0x0200000000000000

	)

861 
	#MC_STATUS_ADDRV
 0x0400000000000000

	)

862 
	#MC_STATUS_MISCV
 0x0800000000000000

	)

863 
	#MC_STATUS_EN
 0x1000000000000000

	)

864 
	#MC_STATUS_UC
 0x2000000000000000

	)

865 
	#MC_STATUS_OVER
 0x4000000000000000

	)

866 
	#MC_STATUS_VAL
 0x8000000000000000

	)

867 
	#MC_MISC_RA_LSB
 0x000000000000003‡

	)

868 
	#MC_MISC_ADDRESS_MODE
 0x00000000000001c0

	)

869 
	#MC_CTL2_THRESHOLD
 0x0000000000007fff

	)

870 
	#MC_CTL2_CMCI_EN
 0x0000000040000000

	)

871 
	#MC_AMDNB_BANK
 4

	)

872 
	#MC_MISC_AMD_VAL
 0x8000000000000000

	)

873 
	#MC_MISC_AMD_CNTP
 0x4000000000000000

	)

874 
	#MC_MISC_AMD_LOCK
 0x2000000000000000

	)

875 
	#MC_MISC_AMD_INTP
 0x1000000000000000

	)

876 
	#MC_MISC_AMD_LVT_MASK
 0x00f0000000000000

	)

877 
	#MC_MISC_AMD_LVT_SHIFT
 52

	)

878 
	#MC_MISC_AMD_CNTEN
 0x0008000000000000

	)

879 
	#MC_MISC_AMD_INT_MASK
 0x0006000000000000

	)

880 
	#MC_MISC_AMD_INT_LVT
 0x0002000000000000

	)

881 
	#MC_MISC_AMD_INT_SMI
 0x0004000000000000

	)

882 
	#MC_MISC_AMD_OVERFLOW
 0x0001000000000000

	)

883 
	#MC_MISC_AMD_CNT_MASK
 0x00000fff00000000

	)

884 
	#MC_MISC_AMD_CNT_SHIFT
 32

	)

885 
	#MC_MISC_AMD_CNT_MAX
 0xfff

	)

886 
	#MC_MISC_AMD_PTR_MASK
 0x00000000ff000000

	)

887 
	#MC_MISC_AMD_PTR_SHIFT
 24

	)

900 
	#NCR1
 0xc4

	)

901 
	#NCR2
 0xc7

	)

902 
	#NCR3
 0xˇ

	)

903 
	#NCR4
 0xcd

	)

905 
	#NCR_SIZE_0K
 0

	)

906 
	#NCR_SIZE_4K
 1

	)

907 
	#NCR_SIZE_8K
 2

	)

908 
	#NCR_SIZE_16K
 3

	)

909 
	#NCR_SIZE_32K
 4

	)

910 
	#NCR_SIZE_64K
 5

	)

911 
	#NCR_SIZE_128K
 6

	)

912 
	#NCR_SIZE_256K
 7

	)

913 
	#NCR_SIZE_512K
 8

	)

914 
	#NCR_SIZE_1M
 9

	)

915 
	#NCR_SIZE_2M
 10

	)

916 
	#NCR_SIZE_4M
 11

	)

917 
	#NCR_SIZE_8M
 12

	)

918 
	#NCR_SIZE_16M
 13

	)

919 
	#NCR_SIZE_32M
 14

	)

920 
	#NCR_SIZE_4G
 15

	)

930 
	#ARR0
 0xc4

	)

931 
	#ARR1
 0xc7

	)

932 
	#ARR2
 0xˇ

	)

933 
	#ARR3
 0xcd

	)

934 
	#ARR4
 0xd0

	)

935 
	#ARR5
 0xd3

	)

936 
	#ARR6
 0xd6

	)

937 
	#ARR7
 0xd9

	)

939 
	#ARR_SIZE_0K
 0

	)

940 
	#ARR_SIZE_4K
 1

	)

941 
	#ARR_SIZE_8K
 2

	)

942 
	#ARR_SIZE_16K
 3

	)

943 
	#ARR_SIZE_32K
 4

	)

944 
	#ARR_SIZE_64K
 5

	)

945 
	#ARR_SIZE_128K
 6

	)

946 
	#ARR_SIZE_256K
 7

	)

947 
	#ARR_SIZE_512K
 8

	)

948 
	#ARR_SIZE_1M
 9

	)

949 
	#ARR_SIZE_2M
 10

	)

950 
	#ARR_SIZE_4M
 11

	)

951 
	#ARR_SIZE_8M
 12

	)

952 
	#ARR_SIZE_16M
 13

	)

953 
	#ARR_SIZE_32M
 14

	)

954 
	#ARR_SIZE_4G
 15

	)

960 
	#RCR0
 0xdc

	)

961 
	#RCR1
 0xdd

	)

962 
	#RCR2
 0xde

	)

963 
	#RCR3
 0xdf

	)

964 
	#RCR4
 0xe0

	)

965 
	#RCR5
 0xe1

	)

966 
	#RCR6
 0xe2

	)

967 
	#RCR7
 0xe3

	)

969 
	#RCR_RCD
 0x01

	)

970 
	#RCR_RCE
 0x01

	)

971 
	#RCR_WWO
 0x02

	)

972 
	#RCR_WL
 0x04

	)

973 
	#RCR_WG
 0x08

	)

974 
	#RCR_WT
 0x10

	)

975 
	#RCR_NLB
 0x20

	)

978 
	#AMD_WT_ALLOC_TME
 0x40000

	)

979 
	#AMD_WT_ALLOC_PRE
 0x20000

	)

980 
	#AMD_WT_ALLOC_FRE
 0x10000

	)

983 
	#MSR_EFER
 0xc0000080

	)

984 
	#MSR_STAR
 0xc0000081

	)

985 
	#MSR_LSTAR
 0xc0000082

	)

986 
	#MSR_CSTAR
 0xc0000083

	)

987 
	#MSR_SF_MASK
 0xc0000084

	)

988 
	#MSR_FSBASE
 0xc0000100

	)

989 
	#MSR_GSBASE
 0xc0000101

	)

990 
	#MSR_KGSBASE
 0xc0000102

	)

991 
	#MSR_PERFEVSEL0
 0xc0010000

	)

992 
	#MSR_PERFEVSEL1
 0xc0010001

	)

993 
	#MSR_PERFEVSEL2
 0xc0010002

	)

994 
	#MSR_PERFEVSEL3
 0xc0010003

	)

995 
	#MSR_K7_PERFCTR0
 0xc0010004

	)

996 
	#MSR_K7_PERFCTR1
 0xc0010005

	)

997 
	#MSR_K7_PERFCTR2
 0xc0010006

	)

998 
	#MSR_K7_PERFCTR3
 0xc0010007

	)

999 
	#MSR_SYSCFG
 0xc0010010

	)

1000 
	#MSR_HWCR
 0xc0010015

	)

1001 
	#MSR_IORRBASE0
 0xc0010016

	)

1002 
	#MSR_IORRMASK0
 0xc0010017

	)

1003 
	#MSR_IORRBASE1
 0xc0010018

	)

1004 
	#MSR_IORRMASK1
 0xc0010019

	)

1005 
	#MSR_TOP_MEM
 0xc001001®

	)

1006 
	#MSR_TOP_MEM2
 0xc001001d

	)

1007 
	#MSR_NB_CFG1
 0xc001001‡

	)

1008 
	#MSR_K8_UCODE_UPDATE
 0xc0010020

	)

1009 
	#MSR_MC0_CTL_MASK
 0xc0010044

	)

1010 
	#MSR_P_STATE_LIMIT
 0xc0010061

	)

1011 
	#MSR_P_STATE_CONTROL
 0xc0010062

	)

1012 
	#MSR_P_STATE_STATUS
 0xc0010063

	)

1013 
	#MSR_P_STATE_CONFIG
(
n
Ë(0xc0010064 + (n)Ë

	)

1014 
	#MSR_SMM_ADDR
 0xc0010112

	)

1015 
	#MSR_SMM_MASK
 0xc0010113

	)

1016 
	#MSR_VM_CR
 0xc0010114

	)

1017 
	#MSR_VM_HSAVE_PA
 0xc0010117

	)

1018 
	#MSR_AMD_CPUID07
 0xc0011002

	)

1019 
	#MSR_EXTFEATURES
 0xc0011005

	)

1020 
	#MSR_IC_CFG
 0xc0011021

	)

1023 
	#VM_CR_SVMDIS
 0x10

	)

1026 
	#VIA_HAS_RNG
 1

	)

1029 
	#VIA_HAS_AES
 1

	)

1030 
	#VIA_HAS_SHA
 2

	)

1031 
	#VIA_HAS_MM
 4

	)

1032 
	#VIA_HAS_AESCTR
 8

	)

1035 
	#VIA_CPUID_HAS_RNG
 0x000004

	)

1036 
	#VIA_CPUID_DO_RNG
 0x000008

	)

1037 
	#VIA_CPUID_HAS_ACE
 0x000040

	)

1038 
	#VIA_CPUID_DO_ACE
 0x000080

	)

1039 
	#VIA_CPUID_HAS_ACE2
 0x000100

	)

1040 
	#VIA_CPUID_DO_ACE2
 0x000200

	)

1041 
	#VIA_CPUID_HAS_PHE
 0x000400

	)

1042 
	#VIA_CPUID_DO_PHE
 0x000800

	)

1043 
	#VIA_CPUID_HAS_PMM
 0x001000

	)

1044 
	#VIA_CPUID_DO_PMM
 0x002000

	)

1047 
	#VIA_CRYPT_CWLO_ROUND_M
 0x0000000f

	)

1048 
	#VIA_CRYPT_CWLO_ALG_M
 0x00000070

	)

1049 
	#VIA_CRYPT_CWLO_ALG_AES
 0x00000000

	)

1050 
	#VIA_CRYPT_CWLO_KEYGEN_M
 0x00000080

	)

1051 
	#VIA_CRYPT_CWLO_KEYGEN_HW
 0x00000000

	)

1052 
	#VIA_CRYPT_CWLO_KEYGEN_SW
 0x00000080

	)

1053 
	#VIA_CRYPT_CWLO_NORMAL
 0x00000000

	)

1054 
	#VIA_CRYPT_CWLO_INTERMEDIATE
 0x00000100

	)

1055 
	#VIA_CRYPT_CWLO_ENCRYPT
 0x00000000

	)

1056 
	#VIA_CRYPT_CWLO_DECRYPT
 0x00000200

	)

1057 
	#VIA_CRYPT_CWLO_KEY128
 0x0000000®

	)

1058 
	#VIA_CRYPT_CWLO_KEY192
 0x0000040¯

	)

1059 
	#VIA_CRYPT_CWLO_KEY256
 0x0000080ê

	)

	@/usr/include/x86/stack.h

29 #i‚de‡
_X86_STACK_H


30 
	#_X86_STACK_H


	)

36 #ifde‡
__i386__


37 
	si386_‰ame
 {

38 
i386_‰ame
 *
	mf_‰ame
;

39 
u_öt
 
	mf_ªèddr
;

40 
u_öt
 
	mf_¨g0
;

44 #ifde‡
__amd64__


45 
	samd64_‰ame
 {

46 
amd64_‰ame
 *
	mf_‰ame
;

47 
u_l⁄g
 
	mf_ªèddr
;

50 
	si386_‰ame
 {

51 
uöt32_t
 
	mf_‰ame
;

52 
uöt32_t
 
	mf_ªèddr
;

53 
uöt32_t
 
	mf_¨g0
;

57 #ifde‡
_KERNEL


58 
°ack_nmi_h™dÀr
(
å≠‰ame
 *);

	@/usr/include/x86/stdarg.h

30 #i‚de‡
_MACHINE_STDARG_H_


31 
	#_MACHINE_STDARG_H_


	)

33 
	~<sys/_°d¨g.h
>

35 #i‚de‡
va_°¨t


36 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


	@/usr/include/x86/sysarch.h

37 #i‚de‡
_MACHINE_SYSARCH_H_


38 
	#_MACHINE_SYSARCH_H_


	)

40 
	~<sys/cdefs.h
>

42 
	#I386_GET_LDT
 0

	)

43 
	#I386_SET_LDT
 1

	)

44 
	#LDT_AUTO_ALLOC
 0xffffffff

	)

46 
	#I386_GET_IOPERM
 3

	)

47 
	#I386_SET_IOPERM
 4

	)

49 
	#I386_VM86
 6

	)

50 
	#I386_GET_FSBASE
 7

	)

51 
	#I386_SET_FSBASE
 8

	)

52 
	#I386_GET_GSBASE
 9

	)

53 
	#I386_SET_GSBASE
 10

	)

54 
	#I386_GET_XFPUSTATE
 11

	)

57 
	#AMD64_GET_FSBASE
 128

	)

58 
	#AMD64_SET_FSBASE
 129

	)

59 
	#AMD64_GET_GSBASE
 130

	)

60 
	#AMD64_SET_GSBASE
 131

	)

61 
	#AMD64_GET_XFPUSTATE
 132

	)

63 
	si386_i›îm_¨gs
 {

64 
	m°¨t
;

65 
	mÀngth
;

66 
	míabÀ
;

69 #ifde‡
__i386__


70 
	si386_ldt_¨gs
 {

71 
	m°¨t
;

72 
des¸ùt‹
 *
	mdescs
;

73 
	mnum
;

76 
	si386_vm86_¨gs
 {

77 
	msub_›
;

78 *
	msub_¨gs
;

81 
	si386_gë_xÂu°©e
 {

82 *
	maddr
;

83 
	mÀn
;

86 
	si386_ldt_¨gs
 {

87 
	m°¨t
;

88 
u£r_£gmít_des¸ùt‹
 *
descs
 
	m__∑cked
;

89 
	mnum
;

92 
	si386_gë_xÂu°©e
 {

93 
	maddr
;

94 
	mÀn
;

97 
	samd64_gë_xÂu°©e
 {

98 *
	maddr
;

99 
	mÀn
;

103 #i‚de‡
_KERNEL


104 
	gdes¸ùt‹
;

105 
	gdbªg
;

107 
__BEGIN_DECLS


108 
i386_gë_ldt
(, 
des¸ùt‹
 *, );

109 
i386_£t_ldt
(, 
des¸ùt‹
 *, );

110 
i386_gë_i›îm
(, *, *);

111 
i386_£t_i›îm
(, , );

112 
i386_vm86
(, *);

113 
i386_gë_fsba£
(**);

114 
i386_gë_gsba£
(**);

115 
i386_£t_fsba£
(*);

116 
i386_£t_gsba£
(*);

117 
i386_£t_w©ch
(, , , , 
dbªg
 *);

118 
i386_˛r_w©ch
(, 
dbªg
 *);

119 
amd64_gë_fsba£
(**);

120 
amd64_gë_gsba£
(**);

121 
amd64_£t_fsba£
(*);

122 
amd64_£t_gsba£
(*);

123 
syßrch
(, *);

124 
	g__END_DECLS


126 
	gthªad
;

127 
	gdes¸ùt‹
;

129 
i386_gë_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *);

130 
i386_£t_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *, 
des¸ùt‹
 *);

131 
i386_gë_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

132 
i386_£t_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

133 
amd64_gë_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *);

134 
amd64_£t_ldt
(
thªad
 *, 
i386_ldt_¨gs
 *,

135 
u£r_£gmít_des¸ùt‹
 *);

136 
amd64_gë_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

137 
amd64_£t_i›îm
(
thªad
 *, 
i386_i›îm_¨gs
 *);

	@/usr/include/x86/trap.h

38 #i‚de‡
_MACHINE_TRAP_H_


39 
	#_MACHINE_TRAP_H_


	)

46 
	#T_PRIVINFLT
 1

	)

47 
	#T_BPTFLT
 3

	)

48 
	#T_ARITHTRAP
 6

	)

49 
	#T_PROTFLT
 9

	)

50 
	#T_TRCTRAP
 10

	)

51 
	#T_PAGEFLT
 12

	)

52 
	#T_ALIGNFLT
 14

	)

54 
	#T_DIVIDE
 18

	)

55 
	#T_NMI
 19

	)

56 
	#T_OFLOW
 20

	)

57 
	#T_BOUND
 21

	)

58 
	#T_DNA
 22

	)

59 
	#T_DOUBLEFLT
 23

	)

60 
	#T_FPOPFLT
 24

	)

61 
	#T_TSSFLT
 25

	)

62 
	#T_SEGNPFLT
 26

	)

63 
	#T_STKFLT
 27

	)

64 
	#T_MCHK
 28

	)

65 
	#T_XMMFLT
 29

	)

66 
	#T_RESERVED
 30

	)

67 
	#T_DTRACE_RET
 32

	)

70 
	#T_USER
 0x100

	)

	@/usr/include/x86/ucontext.h

34 #i‚de‡
_X86_UCONTEXT_H_


35 
	#_X86_UCONTEXT_H_


	)

37 #ifde‡
__i386__


39 
	#_MC_HASSEGS
 0x1

	)

40 
	#_MC_HASBASES
 0x2

	)

41 
	#_MC_HASFPXSTATE
 0x4

	)

42 
	#_MC_FLAG_MASK
 (
_MC_HASSEGS
 | 
_MC_HASBASES
 | 
_MC_HASFPXSTATE
)

	)

44 
	s__mc⁄ãxt
 {

51 
__ªgi°î_t
 
	mmc_⁄°ack
;

52 
__ªgi°î_t
 
	mmc_gs
;

53 
__ªgi°î_t
 
	mmc_fs
;

54 
__ªgi°î_t
 
	mmc_es
;

55 
__ªgi°î_t
 
	mmc_ds
;

56 
__ªgi°î_t
 
	mmc_edi
;

57 
__ªgi°î_t
 
	mmc_esi
;

58 
__ªgi°î_t
 
	mmc_ebp
;

59 
__ªgi°î_t
 
	mmc_i•
;

60 
__ªgi°î_t
 
	mmc_ebx
;

61 
__ªgi°î_t
 
	mmc_edx
;

62 
__ªgi°î_t
 
	mmc_ecx
;

63 
__ªgi°î_t
 
	mmc_óx
;

64 
__ªgi°î_t
 
	mmc_å≠no
;

65 
__ªgi°î_t
 
	mmc_îr
;

66 
__ªgi°î_t
 
	mmc_eù
;

67 
__ªgi°î_t
 
	mmc_cs
;

68 
__ªgi°î_t
 
	mmc_eÊags
;

69 
__ªgi°î_t
 
	mmc_e•
;

70 
__ªgi°î_t
 
	mmc_ss
;

72 
	mmc_Àn
;

73 
	#_MC_FPFMT_NODEV
 0x10000

	)

74 
	#_MC_FPFMT_387
 0x10001

	)

75 
	#_MC_FPFMT_XMM
 0x10002

	)

76 
	mmc_Âf‹m©
;

77 
	#_MC_FPOWNED_NONE
 0x20000

	)

78 
	#_MC_FPOWNED_FPU
 0x20001

	)

79 
	#_MC_FPOWNED_PCB
 0x20002

	)

80 
	mmc_ow√dÂ
;

81 
__ªgi°î_t
 
	mmc_Êags
;

85 
	mmc_Â°©e
[128] 
__Æig√d
(16);

87 
__ªgi°î_t
 
	mmc_fsba£
;

88 
__ªgi°î_t
 
	mmc_gsba£
;

90 
__ªgi°î_t
 
	mmc_xÂu°©e
;

91 
__ªgi°î_t
 
	mmc_xÂu°©e_Àn
;

93 
	mmc_•¨e2
[4];

94 } 
	tmc⁄ãxt_t
;

97 #ifde‡
__amd64__


101 
	#_MC_HASSEGS
 0x1

	)

102 
	#_MC_HASBASES
 0x2

	)

103 
	#_MC_HASFPXSTATE
 0x4

	)

104 
	#_MC_FLAG_MASK
 (
_MC_HASSEGS
 | 
_MC_HASBASES
 | 
_MC_HASFPXSTATE
)

	)

106 
	s__mc⁄ãxt
 {

113 
__ªgi°î_t
 
	mmc_⁄°ack
;

114 
__ªgi°î_t
 
	mmc_rdi
;

115 
__ªgi°î_t
 
	mmc_rsi
;

116 
__ªgi°î_t
 
	mmc_rdx
;

117 
__ªgi°î_t
 
	mmc_rcx
;

118 
__ªgi°î_t
 
	mmc_r8
;

119 
__ªgi°î_t
 
	mmc_r9
;

120 
__ªgi°î_t
 
	mmc_øx
;

121 
__ªgi°î_t
 
	mmc_rbx
;

122 
__ªgi°î_t
 
	mmc_rbp
;

123 
__ªgi°î_t
 
	mmc_r10
;

124 
__ªgi°î_t
 
	mmc_r11
;

125 
__ªgi°î_t
 
	mmc_r12
;

126 
__ªgi°î_t
 
	mmc_r13
;

127 
__ªgi°î_t
 
	mmc_r14
;

128 
__ªgi°î_t
 
	mmc_r15
;

129 
__uöt32_t
 
	mmc_å≠no
;

130 
__uöt16_t
 
	mmc_fs
;

131 
__uöt16_t
 
	mmc_gs
;

132 
__ªgi°î_t
 
	mmc_addr
;

133 
__uöt32_t
 
	mmc_Êags
;

134 
__uöt16_t
 
	mmc_es
;

135 
__uöt16_t
 
	mmc_ds
;

136 
__ªgi°î_t
 
	mmc_îr
;

137 
__ªgi°î_t
 
	mmc_rù
;

138 
__ªgi°î_t
 
	mmc_cs
;

139 
__ªgi°î_t
 
	mmc_rÊags
;

140 
__ªgi°î_t
 
	mmc_r•
;

141 
__ªgi°î_t
 
	mmc_ss
;

143 
	mmc_Àn
;

145 
	#_MC_FPFMT_NODEV
 0x10000

	)

146 
	#_MC_FPFMT_XMM
 0x10002

	)

147 
	mmc_Âf‹m©
;

148 
	#_MC_FPOWNED_NONE
 0x20000

	)

149 
	#_MC_FPOWNED_FPU
 0x20001

	)

150 
	#_MC_FPOWNED_PCB
 0x20002

	)

151 
	mmc_ow√dÂ
;

155 
	mmc_Â°©e
[64] 
__Æig√d
(16);

157 
__ªgi°î_t
 
	mmc_fsba£
;

158 
__ªgi°î_t
 
	mmc_gsba£
;

160 
__ªgi°î_t
 
	mmc_xÂu°©e
;

161 
__ªgi°î_t
 
	mmc_xÂu°©e_Àn
;

163 
	mmc_•¨e
[4];

164 } 
	tmc⁄ãxt_t
;

	@/usr/include/x86/vdso.h

34 #i‚de‡
_X86_VDSO_H


35 
	#_X86_VDSO_H


	)

37 
	#VDSO_TIMEHANDS_MD
 \

38 
uöt32_t
 
th_x86_shi·
; \

39 
uöt32_t
 
th_x86_h≥t_idx
; \

40 
uöt32_t
 
th_ªs
[6];

	)

42 
	#VDSO_TH_ALGO_X86_TSC
 
VDSO_TH_ALGO_1


	)

43 
	#VDSO_TH_ALGO_X86_HPET
 
VDSO_TH_ALGO_2


	)

44 
	#VDSO_TH_ALGO_X86_HVTSC
 
VDSO_TH_ALGO_3


	)

46 #ifde‡
_KERNEL


47 #ifde‡
COMPAT_FREEBSD32


49 
	#VDSO_TIMEHANDS_MD32
 
VDSO_TIMEHANDS_MD


	)

	@/usr/include/x86/x86_smp.h

15 #i‚de‡
_X86_X86_SMP_H_


16 
	#_X86_X86_SMP_H_


	)

18 
	~<sys/bus.h
>

19 
	~<machöe/‰ame.h
>

20 
	~<machöe/öå_machdï.h
>

21 
	~<x86/≠icv¨.h
>

22 
	~<machöe/pcb.h
>

24 
	gpm≠
;

27 
mp_«ps
;

28 
boŸ_˝u_id
;

29 
pcb
 
°›pcbs
[];

30 
˝u_≠ic_ids
[];

31 
boŸAP
;

32 *
dp˝u
;

33 *
boŸSTK
;

34 *
boŸ°acks
[];

35 
boŸ_addªss
;

36 
boŸMP_size
;

37 vﬁ©ûê
u_öt
 
˝u_ùi_≥ndög
[];

38 vﬁ©ûê
≠s_ªady
;

39 
mtx
 
≠_boŸ_mtx
;

40 
˝u_logiˇl
;

41 
˝u_c‹es
;

42 vﬁ©ûê
uöt32_t
 
smp_éb_gíî©i⁄
;

43 
pm≠
 *
smp_éb_pm≠
;

44 
vm_off£t_t
 
smp_éb_addr1
, 
smp_éb_addr2
;

45 
u_öt
 
xhôs_gbl
[];

46 
u_öt
 
xhôs_pg
[];

47 
u_öt
 
xhôs_∫g
[];

48 
u_öt
 
ùi_globÆ
;

49 
u_öt
 
ùi_∑ge
;

50 
u_öt
 
ùi_ønge
;

51 
u_öt
 
ùi_ønge_size
;

53 
nmi_kdb_lock
;

54 
nmi_is_brﬂdˇ°
;

56 
	s˝u_öfo
 {

57 
	m˝u_¥e£¡
:1;

58 
	m˝u_b•
:1;

59 
	m˝u_dißbÀd
:1;

60 
	m˝u_hy≥πhªad
:1;

62 
˝u_öfo
 *cpu_info;

64 #ifde‡
COUNT_IPIS


65 
u_l⁄g
 *
ùi_öv…lb_cou¡s
[
MAXCPU
];

66 
u_l⁄g
 *
ùi_övÃng_cou¡s
[
MAXCPU
];

67 
u_l⁄g
 *
ùi_övÕg_cou¡s
[
MAXCPU
];

68 
u_l⁄g
 *
ùi_övlˇche_cou¡s
[
MAXCPU
];

69 
u_l⁄g
 *
ùi_ªndezvous_cou¡s
[
MAXCPU
];

73 
öth™d_t


74 
IDTVEC
(
öv…lb
),

75 
IDTVEC
(
övÕg
),

76 
IDTVEC
(
övÃng
),

77 
IDTVEC
(
övlˇche
),

78 
IDTVEC
(
ùi_öå_bôm≠_h™dÀr
),

79 
IDTVEC
(
˝u°›
),

80 
IDTVEC
(
˝usu•íd
),

81 
IDTVEC
(
ªndezvous
);

84 
assign_˝u_ids
();

85 
˝u_add
(
u_öt
 
≠ic_id
, 
boŸ_˝u
);

86 
˝u°›_h™dÀr
();

87 
˝usu•íd_h™dÀr
();

88 
Æloc_≠_åampﬁöe
(
vm_∑ddr_t
 *
physm≠
, *
physm≠_idx
);

89 
öô_£c⁄d¨y_èû
();

90 
öv…lb_h™dÀr
();

91 
övÕg_h™dÀr
();

92 
övÃng_h™dÀr
();

93 
övlˇche_h™dÀr
();

94 
öô_£c⁄d¨y
();

95 
ùi_°¨tup
(
≠ic_id
, 
ve˘‹
);

96 
ùi_Æl_but_£lf
(
u_öt
 
ùi
);

97 
ùi_bôm≠_h™dÀr
(
å≠‰ame
 
‰ame
);

98 
ùi_˝u
(
˝u
, 
u_öt
 
ùi
);

99 
ùi_nmi_h™dÀr
();

100 
ùi_£À˘ed
(
˝u£t_t
 
˝us
, 
u_öt
 
ùi
);

101 
£t_öãºu±_≠ic_ids
();

102 
smp_ˇche_Êush
();

103 
smp_masked_övÕg
(
˝u£t_t
 
mask
, 
vm_off£t_t
 
addr
, 
pm≠
 *pmap);

104 
smp_masked_övÕg_ønge
(
˝u£t_t
 
mask
, 
vm_off£t_t
 
°¨tva
,

105 
vm_off£t_t
 
ídva
, 
pm≠
 *pmap);

106 
smp_masked_öv…lb
(
˝u£t_t
 
mask
, 
pm≠
 *pmap);

107 
mem_ønge_AP_öô
();

108 
t›o_¥obe
();

109 
ùi_£nd_˝u
(
˝u
, 
u_öt
 
ùi
);

	@/usr/include/x86/x86_var.h

32 #i‚de‡
_X86_X86_VAR_H_


33 
	#_X86_X86_VAR_H_


	)

39 
Maxmem
;

40 
u_öt
 
ba£mem
;

41 
busdma_swi_≥ndög
;

42 
u_öt
 
˝u_exthigh
;

43 
u_öt
 
˝u_„©uª
;

44 
u_öt
 
˝u_„©uª2
;

45 
u_öt
 
amd_„©uª
;

46 
u_öt
 
amd_„©uª2
;

47 
u_öt
 
amd_øsˇp
;

48 
u_öt
 
amd_pmöfo
;

49 
u_öt
 
amd_exãnded_„©uª_exãnsi⁄s
;

50 
u_öt
 
vü_„©uª_∫g
;

51 
u_öt
 
vü_„©uª_x¸y±
;

52 
u_öt
 
˝u_˛Êush_löe_size
;

53 
u_öt
 
˝u_°dext_„©uª
;

54 
u_öt
 
˝u_°dext_„©uª2
;

55 
u_öt
 
˝u_°dext_„©uª3
;

56 
uöt64_t
 
˝u_ü32_¨ch_ˇps
;

57 
u_öt
 
˝u_fx§
;

58 
u_öt
 
˝u_high
;

59 
u_öt
 
˝u_id
;

60 
u_öt
 
˝u_max_ext_°©e_size
;

61 
u_öt
 
˝u_mxc§_mask
;

62 
u_öt
 
˝u_¥ocöfo
;

63 
u_öt
 
˝u_¥ocöfo2
;

64 
˝u_víd‹
[];

65 
u_öt
 
˝u_víd‹_id
;

66 
u_öt
 
˝u_m⁄_mwaô_Êags
;

67 
u_öt
 
˝u_m⁄_mö_size
;

68 
u_öt
 
˝u_m⁄_max_size
;

69 
u_öt
 
˝u_maxphyaddr
;

70 
˘x_swôch_xßve
[];

71 
u_öt
 
hv_high
;

72 
hv_víd‹
[];

73 
k°ack
[];

74 
sigcode
[];

75 
szsigcode
;

76 
vm_∑ge_dump_size
;

77 
w‹k¨ound_îøtum383
;

78 
_ud©a£l
;

79 
_ucode£l
;

80 
_ucode32£l
;

81 
_ufs£l
;

82 
_ugs£l
;

83 
u£_xßve
;

84 
uöt64_t
 
xßve_mask
;

85 
u_öt
 
max_≠ic_id
;

86 
±i
;

87 
hw_ibrs_a˘ive
;

88 
hw_ssb_a˘ive
;

90 
	gpcb
;

91 
	gthªad
;

92 
	gªg
;

93 
	gÂªg
;

94 
	gdbªg
;

95 
	gdum≥röfo
;

96 
	gå≠‰ame
;

103 
	tÆüs_f‹_öth™d_t
();

109 
__ölöe
 
vm_∑ddr_t


110 
	$˝u_gëmaxphyaddr
()

112 #i‡
	`deföed
(
__i386__
Ë&& !deföed(
PAE
)

115  ((1ULL << 
˝u_maxphyaddr
) - 1);

117 
	}
}

119 
boﬁ
 
a˝i_gë_Ádt_boŸÊags
(
uöt16_t
 *
Êag•
);

120 *
Æloc_Âußve
(
Êags
);

121 
busdma_swi
();

122 
boﬁ
 
˝u_mwaô_ußbÀ
();

123 
˝u_¥obe_amdc1e
();

124 
˝u_£åegs
();

125 
boﬁ
 
dißbÀ_wp
();

126 
ª°‹e_wp
(
boﬁ
 
ﬁd_wp
);

127 
dump_add_∑ge
(
vm_∑ddr_t
);

128 
dump_dr›_∑ge
(
vm_∑ddr_t
);

129 
föishidít˝u
();

130 
idítify_˝u1
();

131 
idítify_˝u2
();

132 
idítify_hy≥rvis‹
();

133 
öôülize˝u
();

134 
öôülize˝uˇche
();

135 
boﬁ
 
fix_˝uid
();

136 
fûlw
(
∑t
, *
ba£
, 
size_t
 
˙t
);

137 
is_physiˇl_mem‹y
(
vm_∑ddr_t
 
addr
);

138 
iß_nmi
(
cd
);

139 
h™dÀ_ibrs_íåy
();

140 
h™dÀ_ibrs_exô
();

141 
hw_ibrs_ªˇlcuœã
();

142 
hw_ssb_ªˇlcuœã
(
boﬁ
 
Æl_˝us
);

143 
nmi_ˇŒ_kdb
(
u_öt
 
˝u
, u_öà
ty≥
, 
å≠‰ame
 *
‰ame
);

144 
nmi_ˇŒ_kdb_smp
(
u_öt
 
ty≥
, 
å≠‰ame
 *
‰ame
);

145 
nmi_h™dÀ_öå
(
u_öt
 
ty≥
, 
å≠‰ame
 *
‰ame
);

146 
∑gec›y
(*
‰om
, *
to
);

147 
¥öt˝uöfo
();

148 
±i_gë_deÁu…
();

149 
u£r_dbªg_å≠
(
ªgi°î_t
 
dr6
);

150 
möidumpsys
(
dum≥röfo
 *);

151 
pcb
 *
gë_pcb_td
(
thªad
 *
td
);

	@/usr/include/bsm/audit.h

40 #i‚def 
_BSM_AUDIT_H


41 
	#_BSM_AUDIT_H


	)

43 
	~<sys/∑øm.h
>

44 
	~<sys/ty≥s.h
>

46 
	#AUDIT_RECORD_MAGIC
 0x828a0f1b

	)

47 
	#MAX_AUDIT_RECORDS
 20

	)

48 
	#MAXAUDITDATA
 (0x8000 - 1)

	)

49 
	#MAX_AUDIT_RECORD_SIZE
 
MAXAUDITDATA


	)

50 
	#MIN_AUDIT_FILE_SIZE
 (512 * 1024)

	)

58 
	#AUDIT_HARD_LIMIT_FREE_BLOCKS
 4

	)

63 
	#AUDIT_TRIGGER_MIN
 1

	)

64 
	#AUDIT_TRIGGER_LOW_SPACE
 1

	)

65 
	#AUDIT_TRIGGER_ROTATE_KERNEL
 2

	)

66 
	#AUDIT_TRIGGER_READ_FILE
 3

	)

67 
	#AUDIT_TRIGGER_CLOSE_AND_DIE
 4

	)

68 
	#AUDIT_TRIGGER_NO_SPACE
 5

	)

69 
	#AUDIT_TRIGGER_ROTATE_USER
 6

	)

70 
	#AUDIT_TRIGGER_INITIALIZE
 7

	)

71 
	#AUDIT_TRIGGER_EXPIRE_TRAILS
 8

	)

72 
	#AUDIT_TRIGGER_MAX
 8

	)

77 
	#AUDITDEV_FILENAME
 "audô"

	)

78 
	#AUDIT_TRIGGER_FILE
 ("/dev/" 
AUDITDEV_FILENAME
)

	)

83 
	#AU_DEFAUDITID
 (
uid_t
)(-1)

	)

84 
	#AU_DEFAUDITSID
 0

	)

85 
	#AU_ASSIGN_ASID
 -1

	)

90 
	#AT_IPC_MSG
 ((
u_ch¨
)1Ë

	)

91 
	#AT_IPC_SEM
 ((
u_ch¨
)2Ë

	)

92 
	#AT_IPC_SHM
 ((
u_ch¨
)3Ë

	)

97 
	#AUC_UNSET
 0

	)

98 
	#AUC_AUDITING
 1

	)

99 
	#AUC_NOAUDIT
 2

	)

100 
	#AUC_DISABLED
 -1

	)

105 
	#A_OLDGETPOLICY
 2

	)

106 
	#A_OLDSETPOLICY
 3

	)

107 
	#A_GETKMASK
 4

	)

108 
	#A_SETKMASK
 5

	)

109 
	#A_OLDGETQCTRL
 6

	)

110 
	#A_OLDSETQCTRL
 7

	)

111 
	#A_GETCWD
 8

	)

112 
	#A_GETCAR
 9

	)

113 
	#A_GETSTAT
 12

	)

114 
	#A_SETSTAT
 13

	)

115 
	#A_SETUMASK
 14

	)

116 
	#A_SETSMASK
 15

	)

117 
	#A_OLDGETCOND
 20

	)

118 
	#A_OLDSETCOND
 21

	)

119 
	#A_GETCLASS
 22

	)

120 
	#A_SETCLASS
 23

	)

121 
	#A_GETPINFO
 24

	)

122 
	#A_SETPMASK
 25

	)

123 
	#A_SETFSIZE
 26

	)

124 
	#A_GETFSIZE
 27

	)

125 
	#A_GETPINFO_ADDR
 28

	)

126 
	#A_GETKAUDIT
 29

	)

127 
	#A_SETKAUDIT
 30

	)

128 
	#A_SENDTRIGGER
 31

	)

129 
	#A_GETSINFO_ADDR
 32

	)

130 
	#A_GETPOLICY
 33

	)

131 
	#A_SETPOLICY
 34

	)

132 
	#A_GETQCTRL
 35

	)

133 
	#A_SETQCTRL
 36

	)

134 
	#A_GETCOND
 37

	)

135 
	#A_SETCOND
 38

	)

136 
	#A_GETEVENT
 39

	)

137 
	#A_SETEVENT
 40

	)

142 
	#AUDIT_CNT
 0x0001

	)

143 
	#AUDIT_AHLT
 0x0002

	)

144 
	#AUDIT_ARGV
 0x0004

	)

145 
	#AUDIT_ARGE
 0x0008

	)

146 
	#AUDIT_SEQ
 0x0010

	)

147 
	#AUDIT_WINDATA
 0x0020

	)

148 
	#AUDIT_USER
 0x0040

	)

149 
	#AUDIT_GROUP
 0x0080

	)

150 
	#AUDIT_TRAIL
 0x0100

	)

151 
	#AUDIT_PATH
 0x0200

	)

152 
	#AUDIT_SCNT
 0x0400

	)

153 
	#AUDIT_PUBLIC
 0x0800

	)

154 
	#AUDIT_ZONENAME
 0x1000

	)

155 
	#AUDIT_PERZONE
 0x2000

	)

160 
	#AQ_HIWATER
 100

	)

161 
	#AQ_MAXHIGH
 10000

	)

162 
	#AQ_LOWATER
 10

	)

163 
	#AQ_BUFSZ
 
MAXAUDITDATA


	)

164 
	#AQ_MAXBUFSZ
 1048576

	)

169 
	#AU_FS_MINFREE
 20

	)

175 
	#AU_IPv4
 4

	)

176 
	#AU_IPv6
 16

	)

178 
__BEGIN_DECLS


180 
uid_t
 
	tau_id_t
;

181 
pid_t
 
	tau_asid_t
;

182 
u_öt16_t
 
	tau_evít_t
;

183 
u_öt16_t
 
	tau_emod_t
;

184 
u_öt32_t
 
	tau_˛ass_t
;

185 
u_öt64_t
 
	tau_asÊgs_t
 
	t__©åibuã__
 ((
	tÆig√d
 (8)));

187 
	sau_tid
 {

188 
u_öt32_t
 
	mp‹t
;

189 
u_öt32_t
 
	mmachöe
;

191 
au_tid
 
	tau_tid_t
;

193 
	sau_tid_addr
 {

194 
u_öt32_t
 
	m©_p‹t
;

195 
u_öt32_t
 
	m©_ty≥
;

196 
u_öt32_t
 
	m©_addr
[4];

198 
au_tid_addr
 
	tau_tid_addr_t
;

200 
	sau_mask
 {

201 
	mam_suc˚ss
;

202 
	mam_Áûuª
;

204 
au_mask
 
	tau_mask_t
;

206 
	saudôöfo
 {

207 
au_id_t
 
	mai_auid
;

208 
au_mask_t
 
	mai_mask
;

209 
au_tid_t
 
	mai_ãrmid
;

210 
au_asid_t
 
	mai_asid
;

212 
audôöfo
 
	taudôöfo_t
;

214 
	saudôöfo_addr
 {

215 
au_id_t
 
	mai_auid
;

216 
au_mask_t
 
	mai_mask
;

217 
au_tid_addr_t
 
	mai_ãrmid
;

218 
au_asid_t
 
	mai_asid
;

219 
au_asÊgs_t
 
	mai_Êags
;

221 
audôöfo_addr
 
	taudôöfo_addr_t
;

223 
	saudôpöfo
 {

224 
pid_t
 
	m≠_pid
;

225 
au_id_t
 
	m≠_auid
;

226 
au_mask_t
 
	m≠_mask
;

227 
au_tid_t
 
	m≠_ãrmid
;

228 
au_asid_t
 
	m≠_asid
;

230 
audôpöfo
 
	taudôpöfo_t
;

232 
	saudôpöfo_addr
 {

233 
pid_t
 
	m≠_pid
;

234 
au_id_t
 
	m≠_auid
;

235 
au_mask_t
 
	m≠_mask
;

236 
au_tid_addr_t
 
	m≠_ãrmid
;

237 
au_asid_t
 
	m≠_asid
;

238 
au_asÊgs_t
 
	m≠_Êags
;

240 
audôpöfo_addr
 
	taudôpöfo_addr_t
;

242 
	sau_£ssi⁄
 {

243 
audôöfo_addr_t
 *
	mas_aü_p
;

244 
au_mask_t
 
	mas_mask
;

246 
au_£ssi⁄
 
	tau_£ssi⁄_t
;

251 
au_tokí
 
	ttokí_t
;

261 
	sau_q˘æ
 {

262 
	maq_hiw©î
;

265 
	maq_low©î
;

268 
	maq_bufsz
;

269 
	maq_dñay
;

270 
	maq_mö‰ì
;

272 
au_q˘æ
 
	tau_q˘æ_t
;

277 
	saudô_°©
 {

278 
	mas_vîsi⁄
;

279 
	mas_numevít
;

280 
	mas_gíî©ed
;

281 
	mas_n⁄©åib
;

282 
	mas_kî√l
;

283 
	mas_audô
;

284 
	mas_audô˘l
;

285 
	mas_íqueue
;

286 
	mas_wrôãn
;

287 
	mas_wblocked
;

288 
	mas_rblocked
;

289 
	mas_dr›≥d
;

290 
	mas_tŸÆsize
;

291 
	mas_memu£d
;

293 
audô_°©
 
	tau_°©_t
;

298 
	saudô_f°©
 {

299 
u_öt64_t
 
	maf_fûesz
;

300 
u_öt64_t
 
	maf_cuºsz
;

302 
audô_f°©
 
	tau_f°©_t
;

307 
	sau_ev˛ass_m≠
 {

308 
au_evít_t
 
	mec_numbî
;

309 
au_˛ass_t
 
	mec_˛ass
;

311 
au_ev˛ass_m≠
 
	tau_ev˛ass_m≠_t
;

316 
	#EVNAMEMAP_NAME_SIZE
 64

	)

317 
	sau_ev«me_m≠
 {

318 
au_evít_t
 
	mí_numbî
;

319 
	mí_«me
[
EVNAMEMAP_NAME_SIZE
];

321 
au_ev«me_m≠
 
	tau_ev«me_m≠_t
;

326 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
KERNEL
)

327 
audô
(const *, );

328 
audô⁄
(, *, );

329 
audô˘l
(const *);

330 
gëauid
(
au_id_t
 *);

331 
£èuid
(c⁄° 
au_id_t
 *);

332 
gëaudô
(
audôöfo
 *);

333 
£èudô
(c⁄° 
audôöfo
 *);

334 
gëaudô_addr
(
audôöfo_addr
 *, );

335 
£èudô_addr
(c⁄° 
audôöfo_addr
 *, );

337 #ifde‡
__APPLE_API_PRIVATE


338 
	~<mach/p‹t.h
>

339 
mach_p‹t_«me_t
 
audô_£ssi⁄_£lf
();

340 
au_asid_t
 
audô_£ssi⁄_joö
(
mach_p‹t_«me_t
 
p‹t
);

345 
	g__END_DECLS


	@/usr/include/bsm/audit_kevents.h

34 #i‚de‡
_BSM_AUDIT_KEVENTS_H_


35 
	#_BSM_AUDIT_KEVENTS_H_


	)

40 
	#AUE_IS_A_KEVENT
(
e
) (((e) > 0 && (e) < 2048) || \

41 ((
e
Ë> 43000 && (eË< 45000))

	)

52 
	#AUE_NULL
 0

	)

53 
	#AUE_EXIT
 1

	)

54 
	#AUE_FORK
 2

	)

55 
	#AUE_FORKALL
 
AUE_FORK


	)

56 
	#AUE_OPEN
 3

	)

57 
	#AUE_CREAT
 4

	)

58 
	#AUE_LINK
 5

	)

59 
	#AUE_UNLINK
 6

	)

60 
	#AUE_DELETE
 
AUE_UNLINK


	)

61 
	#AUE_EXEC
 7

	)

62 
	#AUE_CHDIR
 8

	)

63 
	#AUE_MKNOD
 9

	)

64 
	#AUE_CHMOD
 10

	)

65 
	#AUE_CHOWN
 11

	)

66 
	#AUE_UMOUNT
 12

	)

67 
	#AUE_JUNK
 13

	)

68 
	#AUE_ACCESS
 14

	)

69 
	#AUE_KILL
 15

	)

70 
	#AUE_STAT
 16

	)

71 
	#AUE_LSTAT
 17

	)

72 
	#AUE_ACCT
 18

	)

73 
	#AUE_MCTL
 19

	)

74 
	#AUE_REBOOT
 20

	)

75 
	#AUE_SYMLINK
 21

	)

76 
	#AUE_READLINK
 22

	)

77 
	#AUE_EXECVE
 23

	)

78 
	#AUE_CHROOT
 24

	)

79 
	#AUE_VFORK
 25

	)

80 
	#AUE_SETGROUPS
 26

	)

81 
	#AUE_SETPGRP
 27

	)

82 
	#AUE_SWAPON
 28

	)

83 
	#AUE_SETHOSTNAME
 29

	)

84 
	#AUE_FCNTL
 30

	)

85 
	#AUE_SETPRIORITY
 31

	)

86 
	#AUE_CONNECT
 32

	)

87 
	#AUE_ACCEPT
 33

	)

88 
	#AUE_BIND
 34

	)

89 
	#AUE_SETSOCKOPT
 35

	)

90 
	#AUE_VTRACE
 36

	)

91 
	#AUE_SETTIMEOFDAY
 37

	)

92 
	#AUE_FCHOWN
 38

	)

93 
	#AUE_FCHMOD
 39

	)

94 
	#AUE_SETREUID
 40

	)

95 
	#AUE_SETREGID
 41

	)

96 
	#AUE_RENAME
 42

	)

97 
	#AUE_TRUNCATE
 43

	)

98 
	#AUE_FTRUNCATE
 44

	)

99 
	#AUE_FLOCK
 45

	)

100 
	#AUE_SHUTDOWN
 46

	)

101 
	#AUE_MKDIR
 47

	)

102 
	#AUE_RMDIR
 48

	)

103 
	#AUE_UTIMES
 49

	)

104 
	#AUE_ADJTIME
 50

	)

105 
	#AUE_SETRLIMIT
 51

	)

106 
	#AUE_KILLPG
 52

	)

107 
	#AUE_NFS_SVC
 53

	)

108 
	#AUE_STATFS
 54

	)

109 
	#AUE_FSTATFS
 55

	)

110 
	#AUE_UNMOUNT
 56

	)

111 
	#AUE_ASYNC_DAEMON
 57

	)

112 
	#AUE_NFS_GETFH
 58

	)

113 
	#AUE_SETDOMAINNAME
 59

	)

114 
	#AUE_QUOTACTL
 60

	)

115 
	#AUE_EXPORTFS
 61

	)

116 
	#AUE_MOUNT
 62

	)

117 
	#AUE_SEMSYS
 63

	)

118 
	#AUE_MSGSYS
 64

	)

119 
	#AUE_SHMSYS
 65

	)

120 
	#AUE_BSMSYS
 66

	)

121 
	#AUE_RFSSYS
 67

	)

122 
	#AUE_FCHDIR
 68

	)

123 
	#AUE_FCHROOT
 69

	)

124 
	#AUE_VPIXSYS
 70

	)

125 
	#AUE_PATHCONF
 71

	)

126 
	#AUE_OPEN_R
 72

	)

127 
	#AUE_OPEN_RC
 73

	)

128 
	#AUE_OPEN_RT
 74

	)

129 
	#AUE_OPEN_RTC
 75

	)

130 
	#AUE_OPEN_W
 76

	)

131 
	#AUE_OPEN_WC
 77

	)

132 
	#AUE_OPEN_WT
 78

	)

133 
	#AUE_OPEN_WTC
 79

	)

134 
	#AUE_OPEN_RW
 80

	)

135 
	#AUE_OPEN_RWC
 81

	)

136 
	#AUE_OPEN_RWT
 82

	)

137 
	#AUE_OPEN_RWTC
 83

	)

138 
	#AUE_MSGCTL
 84

	)

139 
	#AUE_MSGCTL_RMID
 85

	)

140 
	#AUE_MSGCTL_SET
 86

	)

141 
	#AUE_MSGCTL_STAT
 87

	)

142 
	#AUE_MSGGET
 88

	)

143 
	#AUE_MSGRCV
 89

	)

144 
	#AUE_MSGSND
 90

	)

145 
	#AUE_SHMCTL
 91

	)

146 
	#AUE_SHMCTL_RMID
 92

	)

147 
	#AUE_SHMCTL_SET
 93

	)

148 
	#AUE_SHMCTL_STAT
 94

	)

149 
	#AUE_SHMGET
 95

	)

150 
	#AUE_SHMAT
 96

	)

151 
	#AUE_SHMDT
 97

	)

152 
	#AUE_SEMCTL
 98

	)

153 
	#AUE_SEMCTL_RMID
 99

	)

154 
	#AUE_SEMCTL_SET
 100

	)

155 
	#AUE_SEMCTL_STAT
 101

	)

156 
	#AUE_SEMCTL_GETNCNT
 102

	)

157 
	#AUE_SEMCTL_GETPID
 103

	)

158 
	#AUE_SEMCTL_GETVAL
 104

	)

159 
	#AUE_SEMCTL_GETALL
 105

	)

160 
	#AUE_SEMCTL_GETZCNT
 106

	)

161 
	#AUE_SEMCTL_SETVAL
 107

	)

162 
	#AUE_SEMCTL_SETALL
 108

	)

163 
	#AUE_SEMGET
 109

	)

164 
	#AUE_SEMOP
 110

	)

165 
	#AUE_CORE
 111

	)

166 
	#AUE_CLOSE
 112

	)

167 
	#AUE_SYSTEMBOOT
 113

	)

168 
	#AUE_ASYNC_DAEMON_EXIT
 114

	)

169 
	#AUE_NFSSVC_EXIT
 115

	)

170 
	#AUE_WRITEL
 128

	)

171 
	#AUE_WRITEVL
 129

	)

172 
	#AUE_GETAUID
 130

	)

173 
	#AUE_SETAUID
 131

	)

174 
	#AUE_GETAUDIT
 132

	)

175 
	#AUE_SETAUDIT
 133

	)

176 
	#AUE_GETUSERAUDIT
 134

	)

177 
	#AUE_SETUSERAUDIT
 135

	)

178 
	#AUE_AUDITSVC
 136

	)

179 
	#AUE_AUDITUSER
 137

	)

180 
	#AUE_AUDITON
 138

	)

181 
	#AUE_AUDITON_GTERMID
 139

	)

182 
	#AUE_AUDITON_STERMID
 140

	)

183 
	#AUE_AUDITON_GPOLICY
 141

	)

184 
	#AUE_AUDITON_SPOLICY
 142

	)

185 
	#AUE_AUDITON_GQCTRL
 145

	)

186 
	#AUE_AUDITON_SQCTRL
 146

	)

187 
	#AUE_GETKERNSTATE
 147

	)

188 
	#AUE_SETKERNSTATE
 148

	)

189 
	#AUE_GETPORTAUDIT
 149

	)

190 
	#AUE_AUDITSTAT
 150

	)

191 
	#AUE_REVOKE
 151

	)

192 
	#AUE_MAC
 152

	)

193 
	#AUE_ENTERPROM
 153

	)

194 
	#AUE_EXITPROM
 154

	)

195 
	#AUE_IFLOAT
 155

	)

196 
	#AUE_PFLOAT
 156

	)

197 
	#AUE_UPRIV
 157

	)

198 
	#AUE_IOCTL
 158

	)

199 
	#AUE_SOCKET
 183

	)

200 
	#AUE_SENDTO
 184

	)

201 
	#AUE_PIPE
 185

	)

202 
	#AUE_SOCKETPAIR
 186

	)

203 
	#AUE_SEND
 187

	)

204 
	#AUE_SENDMSG
 188

	)

205 
	#AUE_RECV
 189

	)

206 
	#AUE_RECVMSG
 190

	)

207 
	#AUE_RECVFROM
 191

	)

208 
	#AUE_READ
 192

	)

209 
	#AUE_GETDENTS
 193

	)

210 
	#AUE_LSEEK
 194

	)

211 
	#AUE_WRITE
 195

	)

212 
	#AUE_WRITEV
 196

	)

213 
	#AUE_NFS
 197

	)

214 
	#AUE_READV
 198

	)

215 
	#AUE_OSTAT
 199

	)

216 
	#AUE_SETUID
 200

	)

217 
	#AUE_STIME
 201

	)

218 
	#AUE_UTIME
 202

	)

219 
	#AUE_NICE
 203

	)

220 
	#AUE_OSETPGRP
 204

	)

221 
	#AUE_SETGID
 205

	)

222 
	#AUE_READL
 206

	)

223 
	#AUE_READVL
 207

	)

224 
	#AUE_FSTAT
 208

	)

225 
	#AUE_DUP2
 209

	)

226 
	#AUE_MMAP
 210

	)

227 
	#AUE_AUDIT
 211

	)

228 
	#AUE_PRIOCNTLSYS
 212

	)

229 
	#AUE_MUNMAP
 213

	)

230 
	#AUE_SETEGID
 214

	)

231 
	#AUE_SETEUID
 215

	)

232 
	#AUE_PUTMSG
 216

	)

233 
	#AUE_GETMSG
 217

	)

234 
	#AUE_PUTPMSG
 218

	)

235 
	#AUE_GETPMSG
 219

	)

236 
	#AUE_AUDITSYS
 220

	)

237 
	#AUE_AUDITON_GETKMASK
 221

	)

238 
	#AUE_AUDITON_SETKMASK
 222

	)

239 
	#AUE_AUDITON_GETCWD
 223

	)

240 
	#AUE_AUDITON_GETCAR
 224

	)

241 
	#AUE_AUDITON_GETSTAT
 225

	)

242 
	#AUE_AUDITON_SETSTAT
 226

	)

243 
	#AUE_AUDITON_SETUMASK
 227

	)

244 
	#AUE_AUDITON_SETSMASK
 228

	)

245 
	#AUE_AUDITON_GETCOND
 229

	)

246 
	#AUE_AUDITON_SETCOND
 230

	)

247 
	#AUE_AUDITON_GETCLASS
 231

	)

248 
	#AUE_AUDITON_SETCLASS
 232

	)

249 
	#AUE_FUSERS
 233

	)

250 
	#AUE_STATVFS
 234

	)

251 
	#AUE_XSTAT
 235

	)

252 
	#AUE_LXSTAT
 236

	)

253 
	#AUE_LCHOWN
 237

	)

254 
	#AUE_MEMCNTL
 238

	)

255 
	#AUE_SYSINFO
 239

	)

256 
	#AUE_XMKNOD
 240

	)

257 
	#AUE_FORK1
 241

	)

258 
	#AUE_MODCTL
 242

	)

259 
	#AUE_MODLOAD
 243

	)

260 
	#AUE_MODUNLOAD
 244

	)

261 
	#AUE_MODCONFIG
 245

	)

262 
	#AUE_MODADDMAJ
 246

	)

263 
	#AUE_SOCKACCEPT
 247

	)

264 
	#AUE_SOCKCONNECT
 248

	)

265 
	#AUE_SOCKSEND
 249

	)

266 
	#AUE_SOCKRECEIVE
 250

	)

267 
	#AUE_ACLSET
 251

	)

268 
	#AUE_FACLSET
 252

	)

269 
	#AUE_DOORFS
 253

	)

270 
	#AUE_DOORFS_DOOR_CALL
 254

	)

271 
	#AUE_DOORFS_DOOR_RETURN
 255

	)

272 
	#AUE_DOORFS_DOOR_CREATE
 256

	)

273 
	#AUE_DOORFS_DOOR_REVOKE
 257

	)

274 
	#AUE_DOORFS_DOOR_INFO
 258

	)

275 
	#AUE_DOORFS_DOOR_CRED
 259

	)

276 
	#AUE_DOORFS_DOOR_BIND
 260

	)

277 
	#AUE_DOORFS_DOOR_UNBIND
 261

	)

278 
	#AUE_P_ONLINE
 262

	)

279 
	#AUE_PROCESSOR_BIND
 263

	)

280 
	#AUE_INST_SYNC
 264

	)

281 
	#AUE_SOCKCONFIG
 265

	)

282 
	#AUE_SETAUDIT_ADDR
 266

	)

283 
	#AUE_GETAUDIT_ADDR
 267

	)

284 
	#AUE_UMOUNT2
 268

	)

285 
	#AUE_FSAT
 269

	)

286 
	#AUE_OPENAT_R
 270

	)

287 
	#AUE_OPENAT_RC
 271

	)

288 
	#AUE_OPENAT_RT
 272

	)

289 
	#AUE_OPENAT_RTC
 273

	)

290 
	#AUE_OPENAT_W
 274

	)

291 
	#AUE_OPENAT_WC
 275

	)

292 
	#AUE_OPENAT_WT
 276

	)

293 
	#AUE_OPENAT_WTC
 277

	)

294 
	#AUE_OPENAT_RW
 278

	)

295 
	#AUE_OPENAT_RWC
 279

	)

296 
	#AUE_OPENAT_RWT
 280

	)

297 
	#AUE_OPENAT_RWTC
 281

	)

298 
	#AUE_RENAMEAT
 282

	)

299 
	#AUE_FSTATAT
 283

	)

300 
	#AUE_FCHOWNAT
 284

	)

301 
	#AUE_FUTIMESAT
 285

	)

302 
	#AUE_UNLINKAT
 286

	)

303 
	#AUE_CLOCK_SETTIME
 287

	)

304 
	#AUE_NTP_ADJTIME
 288

	)

305 
	#AUE_SETPPRIV
 289

	)

306 
	#AUE_MODDEVPLCY
 290

	)

307 
	#AUE_MODADDPRIV
 291

	)

308 
	#AUE_CRYPTOADM
 292

	)

309 
	#AUE_CONFIGKSSL
 293

	)

310 
	#AUE_BRANDSYS
 294

	)

311 
	#AUE_PF_POLICY_ADDRULE
 295

	)

312 
	#AUE_PF_POLICY_DELRULE
 296

	)

313 
	#AUE_PF_POLICY_CLONE
 297

	)

314 
	#AUE_PF_POLICY_FLIP
 298

	)

315 
	#AUE_PF_POLICY_FLUSH
 299

	)

316 
	#AUE_PF_POLICY_ALGS
 300

	)

317 
	#AUE_PORTFS
 301

	)

325 
	#AUE_DARWIN_GETFSSTAT
 301

	)

326 
	#AUE_DARWIN_PTRACE
 302

	)

327 
	#AUE_DARWIN_CHFLAGS
 303

	)

328 
	#AUE_DARWIN_FCHFLAGS
 304

	)

329 
	#AUE_DARWIN_PROFILE
 305

	)

330 
	#AUE_DARWIN_KTRACE
 306

	)

331 
	#AUE_DARWIN_SETLOGIN
 307

	)

332 
	#AUE_DARWIN_REBOOT
 308

	)

333 
	#AUE_DARWIN_REVOKE
 309

	)

334 
	#AUE_DARWIN_UMASK
 310

	)

335 
	#AUE_DARWIN_MPROTECT
 311

	)

336 
	#AUE_DARWIN_SETPRIORITY
 312

	)

337 
	#AUE_DARWIN_SETTIMEOFDAY
 313

	)

338 
	#AUE_DARWIN_FLOCK
 314

	)

339 
	#AUE_DARWIN_MKFIFO
 315

	)

340 
	#AUE_DARWIN_POLL
 316

	)

341 
	#AUE_DARWIN_SOCKETPAIR
 317

	)

342 
	#AUE_DARWIN_FUTIMES
 318

	)

343 
	#AUE_DARWIN_SETSID
 319

	)

344 
	#AUE_DARWIN_SETPRIVEXEC
 320

	)

345 
	#AUE_DARWIN_NFSSVC
 321

	)

346 
	#AUE_DARWIN_GETFH
 322

	)

347 
	#AUE_DARWIN_QUOTACTL
 323

	)

348 
	#AUE_DARWIN_ADDPROFILE
 324

	)

349 
	#AUE_DARWIN_KDEBUGTRACE
 325

	)

350 
	#AUE_DARWIN_KDBUGTRACE
 
AUE_KDEBUGTRACE


	)

351 
	#AUE_DARWIN_FSTAT
 326

	)

352 
	#AUE_DARWIN_FPATHCONF
 327

	)

353 
	#AUE_DARWIN_GETDIRENTRIES
 328

	)

354 
	#AUE_DARWIN_TRUNCATE
 329

	)

355 
	#AUE_DARWIN_FTRUNCATE
 330

	)

356 
	#AUE_DARWIN_SYSCTL
 331

	)

357 
	#AUE_DARWIN_MLOCK
 332

	)

358 
	#AUE_DARWIN_MUNLOCK
 333

	)

359 
	#AUE_DARWIN_UNDELETE
 334

	)

360 
	#AUE_DARWIN_GETATTRLIST
 335

	)

361 
	#AUE_DARWIN_SETATTRLIST
 336

	)

362 
	#AUE_DARWIN_GETDIRENTRIESATTR
 337

	)

363 
	#AUE_DARWIN_EXCHANGEDATA
 338

	)

364 
	#AUE_DARWIN_SEARCHFS
 339

	)

365 
	#AUE_DARWIN_MINHERIT
 340

	)

366 
	#AUE_DARWIN_SEMCONFIG
 341

	)

367 
	#AUE_DARWIN_SEMOPEN
 342

	)

368 
	#AUE_DARWIN_SEMCLOSE
 343

	)

369 
	#AUE_DARWIN_SEMUNLINK
 344

	)

370 
	#AUE_DARWIN_SHMOPEN
 345

	)

371 
	#AUE_DARWIN_SHMUNLINK
 346

	)

372 
	#AUE_DARWIN_LOADSHFILE
 347

	)

373 
	#AUE_DARWIN_RESETSHFILE
 348

	)

374 
	#AUE_DARWIN_NEWSYSTEMSHREG
 349

	)

375 
	#AUE_DARWIN_PTHREADKILL
 350

	)

376 
	#AUE_DARWIN_PTHREADSIGMASK
 351

	)

377 
	#AUE_DARWIN_AUDITCTL
 352

	)

378 
	#AUE_DARWIN_RFORK
 353

	)

379 
	#AUE_DARWIN_LCHMOD
 354

	)

380 
	#AUE_DARWIN_SWAPOFF
 355

	)

381 
	#AUE_DARWIN_INITPROCESS
 356

	)

382 
	#AUE_DARWIN_MAPFD
 357

	)

383 
	#AUE_DARWIN_TASKFORPID
 358

	)

384 
	#AUE_DARWIN_PIDFORTASK
 359

	)

385 
	#AUE_DARWIN_SYSCTL_NONADMIN
 360

	)

386 
	#AUE_DARWIN_COPYFILE
 361

	)

400 
	#AUE_GETFSSTAT
 43001

	)

401 
	#AUE_PTRACE
 43002

	)

402 
	#AUE_CHFLAGS
 43003

	)

403 
	#AUE_FCHFLAGS
 43004

	)

404 
	#AUE_PROFILE
 43005

	)

405 
	#AUE_KTRACE
 43006

	)

406 
	#AUE_SETLOGIN
 43007

	)

407 
	#AUE_OPENBSM_REVOKE
 43008

	)

408 
	#AUE_UMASK
 43009

	)

409 
	#AUE_MPROTECT
 43010

	)

410 
	#AUE_MKFIFO
 43011

	)

411 
	#AUE_POLL
 43012

	)

412 
	#AUE_FUTIMES
 43013

	)

413 
	#AUE_SETSID
 43014

	)

414 
	#AUE_SETPRIVEXEC
 43015

	)

415 
	#AUE_ADDPROFILE
 43016

	)

416 
	#AUE_KDEBUGTRACE
 43017

	)

417 
	#AUE_KDBUGTRACE
 
AUE_KDEBUGTRACE


	)

418 
	#AUE_OPENBSM_FSTAT
 43018

	)

419 
	#AUE_FPATHCONF
 43019

	)

420 
	#AUE_GETDIRENTRIES
 43020

	)

421 
	#AUE_SYSCTL
 43021

	)

422 
	#AUE_MLOCK
 43022

	)

423 
	#AUE_MUNLOCK
 43023

	)

424 
	#AUE_UNDELETE
 43024

	)

425 
	#AUE_GETATTRLIST
 43025

	)

426 
	#AUE_SETATTRLIST
 43026

	)

427 
	#AUE_GETDIRENTRIESATTR
 43027

	)

428 
	#AUE_EXCHANGEDATA
 43028

	)

429 
	#AUE_SEARCHFS
 43029

	)

430 
	#AUE_MINHERIT
 43030

	)

431 
	#AUE_SEMCONFIG
 43031

	)

432 
	#AUE_SEMOPEN
 43032

	)

433 
	#AUE_SEMCLOSE
 43033

	)

434 
	#AUE_SEMUNLINK
 43034

	)

435 
	#AUE_SHMOPEN
 43035

	)

436 
	#AUE_SHMUNLINK
 43036

	)

437 
	#AUE_LOADSHFILE
 43037

	)

438 
	#AUE_RESETSHFILE
 43038

	)

439 
	#AUE_NEWSYSTEMSHREG
 43039

	)

440 
	#AUE_PTHREADKILL
 43040

	)

441 
	#AUE_PTHREADSIGMASK
 43041

	)

442 
	#AUE_AUDITCTL
 43042

	)

443 
	#AUE_RFORK
 43043

	)

444 
	#AUE_LCHMOD
 43044

	)

445 
	#AUE_SWAPOFF
 43045

	)

446 
	#AUE_INITPROCESS
 43046

	)

447 
	#AUE_MAPFD
 43047

	)

448 
	#AUE_TASKFORPID
 43048

	)

449 
	#AUE_PIDFORTASK
 43049

	)

450 
	#AUE_SYSCTL_NONADMIN
 43050

	)

451 
	#AUE_COPYFILE
 43051

	)

457 
	#AUE_LUTIMES
 43052

	)

458 
	#AUE_LCHFLAGS
 43053

	)

459 
	#AUE_SENDFILE
 43054

	)

460 
	#AUE_USELIB
 43055

	)

461 
	#AUE_GETRESUID
 43056

	)

462 
	#AUE_SETRESUID
 43057

	)

463 
	#AUE_GETRESGID
 43058

	)

464 
	#AUE_SETRESGID
 43059

	)

465 
	#AUE_WAIT4
 43060

	)

466 
	#AUE_LGETFH
 43061

	)

467 
	#AUE_FHSTATFS
 43062

	)

468 
	#AUE_FHOPEN
 43063

	)

469 
	#AUE_FHSTAT
 43064

	)

470 
	#AUE_JAIL
 43065

	)

471 
	#AUE_EACCESS
 43066

	)

472 
	#AUE_KQUEUE
 43067

	)

473 
	#AUE_KEVENT
 43068

	)

474 
	#AUE_FSYNC
 43069

	)

475 
	#AUE_NMOUNT
 43070

	)

476 
	#AUE_BDFLUSH
 43071

	)

477 
	#AUE_SETFSUID
 43072

	)

478 
	#AUE_SETFSGID
 43073

	)

479 
	#AUE_PERSONALITY
 43074

	)

480 
	#AUE_SCHED_GETSCHEDULER
 43075

	)

481 
	#AUE_SCHED_SETSCHEDULER
 43076

	)

482 
	#AUE_PRCTL
 43077

	)

483 
	#AUE_GETCWD
 43078

	)

484 
	#AUE_CAPGET
 43079

	)

485 
	#AUE_CAPSET
 43080

	)

486 
	#AUE_PIVOT_ROOT
 43081

	)

487 
	#AUE_RTPRIO
 43082

	)

488 
	#AUE_SCHED_GETPARAM
 43083

	)

489 
	#AUE_SCHED_SETPARAM
 43084

	)

490 
	#AUE_SCHED_GET_PRIORITY_MAX
 43085

	)

491 
	#AUE_SCHED_GET_PRIORITY_MIN
 43086

	)

492 
	#AUE_SCHED_RR_GET_INTERVAL
 43087

	)

493 
	#AUE_ACL_GET_FILE
 43088

	)

494 
	#AUE_ACL_SET_FILE
 43089

	)

495 
	#AUE_ACL_GET_FD
 43090

	)

496 
	#AUE_ACL_SET_FD
 43091

	)

497 
	#AUE_ACL_DELETE_FILE
 43092

	)

498 
	#AUE_ACL_DELETE_FD
 43093

	)

499 
	#AUE_ACL_CHECK_FILE
 43094

	)

500 
	#AUE_ACL_CHECK_FD
 43095

	)

501 
	#AUE_ACL_GET_LINK
 43096

	)

502 
	#AUE_ACL_SET_LINK
 43097

	)

503 
	#AUE_ACL_DELETE_LINK
 43098

	)

504 
	#AUE_ACL_CHECK_LINK
 43099

	)

505 
	#AUE_SYSARCH
 43100

	)

506 
	#AUE_EXTATTRCTL
 43101

	)

507 
	#AUE_EXTATTR_GET_FILE
 43102

	)

508 
	#AUE_EXTATTR_SET_FILE
 43103

	)

509 
	#AUE_EXTATTR_LIST_FILE
 43104

	)

510 
	#AUE_EXTATTR_DELETE_FILE
 43105

	)

511 
	#AUE_EXTATTR_GET_FD
 43106

	)

512 
	#AUE_EXTATTR_SET_FD
 43107

	)

513 
	#AUE_EXTATTR_LIST_FD
 43108

	)

514 
	#AUE_EXTATTR_DELETE_FD
 43109

	)

515 
	#AUE_EXTATTR_GET_LINK
 43110

	)

516 
	#AUE_EXTATTR_SET_LINK
 43111

	)

517 
	#AUE_EXTATTR_LIST_LINK
 43112

	)

518 
	#AUE_EXTATTR_DELETE_LINK
 43113

	)

519 
	#AUE_KENV
 43114

	)

520 
	#AUE_JAIL_ATTACH
 43115

	)

521 
	#AUE_SYSCTL_WRITE
 43116

	)

522 
	#AUE_IOPERM
 43117

	)

523 
	#AUE_READDIR
 43118

	)

524 
	#AUE_IOPL
 43119

	)

525 
	#AUE_VM86
 43120

	)

526 
	#AUE_MAC_GET_PROC
 43121

	)

527 
	#AUE_MAC_SET_PROC
 43122

	)

528 
	#AUE_MAC_GET_FD
 43123

	)

529 
	#AUE_MAC_GET_FILE
 43124

	)

530 
	#AUE_MAC_SET_FD
 43125

	)

531 
	#AUE_MAC_SET_FILE
 43126

	)

532 
	#AUE_MAC_SYSCALL
 43127

	)

533 
	#AUE_MAC_GET_PID
 43128

	)

534 
	#AUE_MAC_GET_LINK
 43129

	)

535 
	#AUE_MAC_SET_LINK
 43130

	)

536 
	#AUE_MAC_EXECVE
 43131

	)

537 
	#AUE_GETPATH_FROMFD
 43132

	)

538 
	#AUE_GETPATH_FROMADDR
 43133

	)

539 
	#AUE_MQ_OPEN
 43134

	)

540 
	#AUE_MQ_SETATTR
 43135

	)

541 
	#AUE_MQ_TIMEDRECEIVE
 43136

	)

542 
	#AUE_MQ_TIMEDSEND
 43137

	)

543 
	#AUE_MQ_NOTIFY
 43138

	)

544 
	#AUE_MQ_UNLINK
 43139

	)

545 
	#AUE_LISTEN
 43140

	)

546 
	#AUE_MLOCKALL
 43141

	)

547 
	#AUE_MUNLOCKALL
 43142

	)

548 
	#AUE_CLOSEFROM
 43143

	)

549 
	#AUE_FEXECVE
 43144

	)

550 
	#AUE_FACCESSAT
 43145

	)

551 
	#AUE_FCHMODAT
 43146

	)

552 
	#AUE_LINKAT
 43147

	)

553 
	#AUE_MKDIRAT
 43148

	)

554 
	#AUE_MKFIFOAT
 43149

	)

555 
	#AUE_MKNODAT
 43150

	)

556 
	#AUE_READLINKAT
 43151

	)

557 
	#AUE_SYMLINKAT
 43152

	)

558 
	#AUE_MAC_GETFSSTAT
 43153

	)

559 
	#AUE_MAC_GET_MOUNT
 43154

	)

560 
	#AUE_MAC_GET_LCID
 43155

	)

561 
	#AUE_MAC_GET_LCTX
 43156

	)

562 
	#AUE_MAC_SET_LCTX
 43157

	)

563 
	#AUE_MAC_MOUNT
 43158

	)

564 
	#AUE_GETLCID
 43159

	)

565 
	#AUE_SETLCID
 43160

	)

566 
	#AUE_TASKNAMEFORPID
 43161

	)

567 
	#AUE_ACCESS_EXTENDED
 43162

	)

568 
	#AUE_CHMOD_EXTENDED
 43163

	)

569 
	#AUE_FCHMOD_EXTENDED
 43164

	)

570 
	#AUE_FSTAT_EXTENDED
 43165

	)

571 
	#AUE_LSTAT_EXTENDED
 43166

	)

572 
	#AUE_MKDIR_EXTENDED
 43167

	)

573 
	#AUE_MKFIFO_EXTENDED
 43168

	)

574 
	#AUE_OPEN_EXTENDED
 43169

	)

575 
	#AUE_OPEN_EXTENDED_R
 43170

	)

576 
	#AUE_OPEN_EXTENDED_RC
 43171

	)

577 
	#AUE_OPEN_EXTENDED_RT
 43172

	)

578 
	#AUE_OPEN_EXTENDED_RTC
 43173

	)

579 
	#AUE_OPEN_EXTENDED_W
 43174

	)

580 
	#AUE_OPEN_EXTENDED_WC
 43175

	)

581 
	#AUE_OPEN_EXTENDED_WT
 43176

	)

582 
	#AUE_OPEN_EXTENDED_WTC
 43177

	)

583 
	#AUE_OPEN_EXTENDED_RW
 43178

	)

584 
	#AUE_OPEN_EXTENDED_RWC
 43179

	)

585 
	#AUE_OPEN_EXTENDED_RWT
 43180

	)

586 
	#AUE_OPEN_EXTENDED_RWTC
 43181

	)

587 
	#AUE_STAT_EXTENDED
 43182

	)

588 
	#AUE_UMASK_EXTENDED
 43183

	)

589 
	#AUE_OPENAT
 43184

	)

590 
	#AUE_POSIX_OPENPT
 43185

	)

591 
	#AUE_CAP_NEW
 43186

	)

592 
	#AUE_CAP_RIGHTS_GET
 43187

	)

593 
	#AUE_CAP_GETRIGHTS
 
AUE_CAP_RIGHTS_GET


	)

594 
	#AUE_CAP_ENTER
 43188

	)

595 
	#AUE_CAP_GETMODE
 43189

	)

596 
	#AUE_POSIX_SPAWN
 43190

	)

597 
	#AUE_FSGETPATH
 43191

	)

598 
	#AUE_PREAD
 43192

	)

599 
	#AUE_PWRITE
 43193

	)

600 
	#AUE_FSCTL
 43194

	)

601 
	#AUE_FFSCTL
 43195

	)

602 
	#AUE_LPATHCONF
 43196

	)

603 
	#AUE_PDFORK
 43197

	)

604 
	#AUE_PDKILL
 43198

	)

605 
	#AUE_PDGETPID
 43199

	)

606 
	#AUE_PDWAIT
 43200

	)

607 
	#AUE_WAIT6
 43201

	)

608 
	#AUE_CAP_RIGHTS_LIMIT
 43202

	)

609 
	#AUE_CAP_IOCTLS_LIMIT
 43203

	)

610 
	#AUE_CAP_IOCTLS_GET
 43204

	)

611 
	#AUE_CAP_FCNTLS_LIMIT
 43205

	)

612 
	#AUE_CAP_FCNTLS_GET
 43206

	)

613 
	#AUE_BINDAT
 43207

	)

614 
	#AUE_CONNECTAT
 43208

	)

615 
	#AUE_CHFLAGSAT
 43209

	)

616 
	#AUE_PREADV
 43210

	)

617 
	#AUE_PWRITEV
 43211

	)

618 
	#AUE_POSIX_FALLOCATE
 43212

	)

619 
	#AUE_AIO_MLOCK
 43213

	)

620 
	#AUE_PROCCTL
 43214

	)

621 
	#AUE_AIO_READ
 43215

	)

622 
	#AUE_AIO_WRITE
 43216

	)

623 
	#AUE_AIO_RETURN
 43217

	)

624 
	#AUE_AIO_SUSPEND
 43218

	)

625 
	#AUE_AIO_CANCEL
 43219

	)

626 
	#AUE_AIO_ERROR
 43220

	)

627 
	#AUE_AIO_WAITCOMPLETE
 43221

	)

628 
	#AUE_AIO_FSYNC
 43222

	)

629 
	#AUE_THR_CREATE
 43223

	)

630 
	#AUE_THR_NEW
 43224

	)

631 
	#AUE_THR_EXIT
 43225

	)

632 
	#AUE_THR_KILL
 43226

	)

633 
	#AUE_THR_KILL2
 43227

	)

634 
	#AUE_SETFIB
 43228

	)

635 
	#AUE_LIO_LISTIO
 43229

	)

636 
	#AUE_SETUGID
 43230

	)

637 
	#AUE_SCTP_PEELOFF
 43231

	)

638 
	#AUE_SCTP_GENERIC_SENDMSG
 43232

	)

639 
	#AUE_SCTP_GENERIC_RECVMSG
 43233

	)

640 
	#AUE_JAIL_GET
 43234

	)

641 
	#AUE_JAIL_SET
 43235

	)

642 
	#AUE_JAIL_REMOVE
 43236

	)

643 
	#AUE_GETLOGINCLASS
 43237

	)

644 
	#AUE_SETLOGINCLASS
 43238

	)

645 
	#AUE_POSIX_FADVISE
 43239

	)

646 
	#AUE_SCTP_GENERIC_SENDMSG_IOV
 43240

	)

656 
	#AUE_O_CREAT
 
AUE_OPEN_RWTC


	)

657 
	#AUE_O_EXECVE
 
AUE_NULL


	)

658 
	#AUE_O_SBREAK
 
AUE_NULL


	)

659 
	#AUE_O_LSEEK
 
AUE_NULL


	)

660 
	#AUE_O_MOUNT
 
AUE_NULL


	)

661 
	#AUE_O_UMOUNT
 
AUE_NULL


	)

662 
	#AUE_O_STAT
 
AUE_STAT


	)

663 
	#AUE_O_LSTAT
 
AUE_LSTAT


	)

664 
	#AUE_O_FSTAT
 
AUE_FSTAT


	)

665 
	#AUE_O_GETPAGESIZE
 
AUE_NULL


	)

666 
	#AUE_O_VREAD
 
AUE_NULL


	)

667 
	#AUE_O_VWRITE
 
AUE_NULL


	)

668 
	#AUE_O_MMAP
 
AUE_MMAP


	)

669 
	#AUE_O_VADVISE
 
AUE_NULL


	)

670 
	#AUE_O_VHANGUP
 
AUE_NULL


	)

671 
	#AUE_O_VLIMIT
 
AUE_NULL


	)

672 
	#AUE_O_WAIT
 
AUE_NULL


	)

673 
	#AUE_O_GETHOSTNAME
 
AUE_NULL


	)

674 
	#AUE_O_SETHOSTNAME
 
AUE_SYSCTL


	)

675 
	#AUE_O_GETDOPT
 
AUE_NULL


	)

676 
	#AUE_O_SETDOPT
 
AUE_NULL


	)

677 
	#AUE_O_ACCEPT
 
AUE_NULL


	)

678 
	#AUE_O_SEND
 
AUE_SENDMSG


	)

679 
	#AUE_O_RECV
 
AUE_RECVMSG


	)

680 
	#AUE_O_VTIMES
 
AUE_NULL


	)

681 
	#AUE_O_SIGVEC
 
AUE_NULL


	)

682 
	#AUE_O_SIGBLOCK
 
AUE_NULL


	)

683 
	#AUE_O_SIGSETMASK
 
AUE_NULL


	)

684 
	#AUE_O_SIGSTACK
 
AUE_NULL


	)

685 
	#AUE_O_RECVMSG
 
AUE_RECVMSG


	)

686 
	#AUE_O_SENDMSG
 
AUE_SENDMSG


	)

687 
	#AUE_O_VTRACE
 
AUE_NULL


	)

688 
	#AUE_O_RESUBA
 
AUE_NULL


	)

689 
	#AUE_O_RECVFROM
 
AUE_RECVFROM


	)

690 
	#AUE_O_SETREUID
 
AUE_SETREUID


	)

691 
	#AUE_O_SETREGID
 
AUE_SETREGID


	)

692 
	#AUE_O_GETDIRENTRIES
 
AUE_GETDIRENTRIES


	)

693 
	#AUE_O_TRUNCATE
 
AUE_TRUNCATE


	)

694 
	#AUE_O_FTRUNCATE
 
AUE_FTRUNCATE


	)

695 
	#AUE_O_GETPEERNAME
 
AUE_NULL


	)

696 
	#AUE_O_GETHOSTID
 
AUE_NULL


	)

697 
	#AUE_O_SETHOSTID
 
AUE_NULL


	)

698 
	#AUE_O_GETRLIMIT
 
AUE_NULL


	)

699 
	#AUE_O_SETRLIMIT
 
AUE_SETRLIMIT


	)

700 
	#AUE_O_KILLPG
 
AUE_KILL


	)

701 
	#AUE_O_SETQUOTA
 
AUE_NULL


	)

702 
	#AUE_O_QUOTA
 
AUE_NULL


	)

703 
	#AUE_O_GETSOCKNAME
 
AUE_NULL


	)

704 
	#AUE_O_GETDIREENTRIES
 
AUE_GETDIREENTRIES


	)

705 
	#AUE_O_ASYNCDAEMON
 
AUE_NULL


	)

706 
	#AUE_O_GETDOMAINNAME
 
AUE_NULL


	)

707 
	#AUE_O_SETDOMAINNAME
 
AUE_SYSCTL


	)

708 
	#AUE_O_PCFS_MOUNT
 
AUE_NULL


	)

709 
	#AUE_O_EXPORTFS
 
AUE_NULL


	)

710 
	#AUE_O_USTATE
 
AUE_NULL


	)

711 
	#AUE_O_WAIT3
 
AUE_NULL


	)

712 
	#AUE_O_RPAUSE
 
AUE_NULL


	)

713 
	#AUE_O_GETDENTS
 
AUE_NULL


	)

718 
	#AUE_ATGETMSG
 
AUE_NULL


	)

719 
	#AUE_ATPUTMSG
 
AUE_NULL


	)

720 
	#AUE_ATSOCKET
 
AUE_NULL


	)

721 
	#AUE_ATPGETREQ
 
AUE_NULL


	)

722 
	#AUE_ATPGETRSP
 
AUE_NULL


	)

723 
	#AUE_ATPSNDREQ
 
AUE_NULL


	)

724 
	#AUE_ATPSNDRSP
 
AUE_NULL


	)

725 
	#AUE_BSDTHREADCREATE
 
AUE_NULL


	)

726 
	#AUE_BSDTHREADTERMINATE
 
AUE_NULL


	)

727 
	#AUE_BSDTHREADREGISTER
 
AUE_NULL


	)

728 
	#AUE_CHUD
 
AUE_NULL


	)

729 
	#AUE_CSOPS
 
AUE_NULL


	)

730 
	#AUE_DUP
 
AUE_NULL


	)

731 
	#AUE_FDATASYNC
 
AUE_NULL


	)

732 
	#AUE_FGETATTRLIST
 
AUE_NULL


	)

733 
	#AUE_FGETXATTR
 
AUE_NULL


	)

734 
	#AUE_FLISTXATTR
 
AUE_NULL


	)

735 
	#AUE_FREMOVEXATTR
 
AUE_NULL


	)

736 
	#AUE_FSETATTRLIST
 
AUE_NULL


	)

737 
	#AUE_FSETXATTR
 
AUE_NULL


	)

738 
	#AUE_FSTATFS64
 
AUE_NULL


	)

739 
	#AUE_FSTATV
 
AUE_NULL


	)

740 
	#AUE_FSTAT64
 
AUE_NULL


	)

741 
	#AUE_FSTAT64_EXTENDED
 
AUE_NULL


	)

742 
	#AUE_GCCONTROL
 
AUE_NULL


	)

743 
	#AUE_GETDIRENTRIES64
 
AUE_NULL


	)

744 
	#AUE_GETDTABLESIZE
 
AUE_NULL


	)

745 
	#AUE_GETEGID
 
AUE_NULL


	)

746 
	#AUE_GETEUID
 
AUE_NULL


	)

747 
	#AUE_GETFSSTAT64
 
AUE_NULL


	)

748 
	#AUE_GETGID
 
AUE_NULL


	)

749 
	#AUE_GETGROUPS
 
AUE_NULL


	)

750 
	#AUE_GETITIMER
 
AUE_NULL


	)

751 
	#AUE_GETLOGIN
 
AUE_NULL


	)

752 
	#AUE_GETPEERNAME
 
AUE_NULL


	)

753 
	#AUE_GETPGID
 
AUE_NULL


	)

754 
	#AUE_GETPGRP
 
AUE_NULL


	)

755 
	#AUE_GETPID
 
AUE_NULL


	)

756 
	#AUE_GETPPID
 
AUE_NULL


	)

757 
	#AUE_GETPRIORITY
 
AUE_NULL


	)

758 
	#AUE_GETRLIMIT
 
AUE_NULL


	)

759 
	#AUE_GETRUSAGE
 
AUE_NULL


	)

760 
	#AUE_GETSGROUPS
 
AUE_NULL


	)

761 
	#AUE_GETSID
 
AUE_NULL


	)

762 
	#AUE_GETSOCKNAME
 
AUE_NULL


	)

763 
	#AUE_GETTIMEOFDAY
 
AUE_NULL


	)

764 
	#AUE_GETTID
 
AUE_NULL


	)

765 
	#AUE_GETUID
 
AUE_NULL


	)

766 
	#AUE_GETSOCKOPT
 
AUE_NULL


	)

767 
	#AUE_GETWGROUPS
 
AUE_NULL


	)

768 
	#AUE_GETXATTR
 
AUE_NULL


	)

769 
	#AUE_IDENTITYSVC
 
AUE_NULL


	)

770 
	#AUE_INITGROUPS
 
AUE_NULL


	)

771 
	#AUE_IOPOLICYSYS
 
AUE_NULL


	)

772 
	#AUE_ISSETUGID
 
AUE_NULL


	)

773 
	#AUE_LIOLISTIO
 
AUE_NULL


	)

774 
	#AUE_LISTXATTR
 
AUE_NULL


	)

775 
	#AUE_LSTATV
 
AUE_NULL


	)

776 
	#AUE_LSTAT64
 
AUE_NULL


	)

777 
	#AUE_LSTAT64_EXTENDED
 
AUE_NULL


	)

778 
	#AUE_MADVISE
 
AUE_NULL


	)

779 
	#AUE_MINCORE
 
AUE_NULL


	)

780 
	#AUE_MKCOMPLEX
 
AUE_NULL


	)

781 
	#AUE_MODWATCH
 
AUE_NULL


	)

782 
	#AUE_MSGCL
 
AUE_NULL


	)

783 
	#AUE_MSYNC
 
AUE_NULL


	)

784 
	#AUE_PROCINFO
 
AUE_NULL


	)

785 
	#AUE_PTHREADCANCELED
 
AUE_NULL


	)

786 
	#AUE_PTHREADCHDIR
 
AUE_NULL


	)

787 
	#AUE_PTHREADCONDBROADCAST
 
AUE_NULL


	)

788 
	#AUE_PTHREADCONDDESTORY
 
AUE_NULL


	)

789 
	#AUE_PTHREADCONDINIT
 
AUE_NULL


	)

790 
	#AUE_PTHREADCONDSIGNAL
 
AUE_NULL


	)

791 
	#AUE_PTHREADCONDWAIT
 
AUE_NULL


	)

792 
	#AUE_PTHREADFCHDIR
 
AUE_NULL


	)

793 
	#AUE_PTHREADMARK
 
AUE_NULL


	)

794 
	#AUE_PTHREADMUTEXDESTROY
 
AUE_NULL


	)

795 
	#AUE_PTHREADMUTEXINIT
 
AUE_NULL


	)

796 
	#AUE_PTHREADMUTEXTRYLOCK
 
AUE_NULL


	)

797 
	#AUE_PTHREADMUTEXUNLOCK
 
AUE_NULL


	)

798 
	#AUE_REMOVEXATTR
 
AUE_NULL


	)

799 
	#AUE_SBRK
 
AUE_NULL


	)

800 
	#AUE_SELECT
 
AUE_NULL


	)

801 
	#AUE_SEMDESTROY
 
AUE_NULL


	)

802 
	#AUE_SEMGETVALUE
 
AUE_NULL


	)

803 
	#AUE_SEMINIT
 
AUE_NULL


	)

804 
	#AUE_SEMPOST
 
AUE_NULL


	)

805 
	#AUE_SEMTRYWAIT
 
AUE_NULL


	)

806 
	#AUE_SEMWAIT
 
AUE_NULL


	)

807 
	#AUE_SEMWAITSIGNAL
 
AUE_NULL


	)

808 
	#AUE_SETITIMER
 
AUE_NULL


	)

809 
	#AUE_SETSGROUPS
 
AUE_NULL


	)

810 
	#AUE_SETTID
 
AUE_NULL


	)

811 
	#AUE_SETTIDWITHPID
 
AUE_NULL


	)

812 
	#AUE_SETWGROUPS
 
AUE_NULL


	)

813 
	#AUE_SETXATTR
 
AUE_NULL


	)

814 
	#AUE_SHAREDREGIONCHECK
 
AUE_NULL


	)

815 
	#AUE_SHAREDREGIONMAP
 
AUE_NULL


	)

816 
	#AUE_SIGACTION
 
AUE_NULL


	)

817 
	#AUE_SIGALTSTACK
 
AUE_NULL


	)

818 
	#AUE_SIGPENDING
 
AUE_NULL


	)

819 
	#AUE_SIGPROCMASK
 
AUE_NULL


	)

820 
	#AUE_SIGRETURN
 
AUE_NULL


	)

821 
	#AUE_SIGSUSPEND
 
AUE_NULL


	)

822 
	#AUE_SIGWAIT
 
AUE_NULL


	)

823 
	#AUE_SSTK
 
AUE_NULL


	)

824 
	#AUE_STACKSNAPSHOT
 
AUE_NULL


	)

825 
	#AUE_STATFS64
 
AUE_NULL


	)

826 
	#AUE_STATV
 
AUE_NULL


	)

827 
	#AUE_STAT64
 
AUE_NULL


	)

828 
	#AUE_STAT64_EXTENDED
 
AUE_NULL


	)

829 
	#AUE_SYNC
 
AUE_NULL


	)

830 
	#AUE_SYSCALL
 
AUE_NULL


	)

831 
	#AUE_TABLE
 
AUE_NULL


	)

832 
	#AUE_VMPRESSUREMONITOR
 
AUE_NULL


	)

833 
	#AUE_WAITEVENT
 
AUE_NULL


	)

834 
	#AUE_WAITID
 
AUE_NULL


	)

835 
	#AUE_WATCHEVENT
 
AUE_NULL


	)

836 
	#AUE_WORKQOPEN
 
AUE_NULL


	)

837 
	#AUE_WORKQOPS
 
AUE_NULL


	)

	@/usr/include/machine/atomic.h

30 #i‚de‡
_MACHINE_ATOMIC_H_


31 
	#_MACHINE_ATOMIC_H_


	)

33 #i‚de‡
_SYS_CDEFS_H_


34 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


56 
	#mb
(Ë
__asm
 
	`__vﬁ©ûe
("m„n˚;" : : : "mem‹y")

	)

57 
	#wmb
(Ë
__asm
 
	`__vﬁ©ûe
("s„n˚;" : : : "mem‹y")

	)

58 
	#rmb
(Ë
__asm
 
	`__vﬁ©ûe
("l„n˚;" : : : "mem‹y")

	)

60 
	~<sys/©omic_comm⁄.h
>

99 #i‡!
deföed
(
__GNUCLIKE_ASM
)

100 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

101 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
); \

102 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

104 
©omic_cmp£t_ch¨
(vﬁ©ûê
u_ch¨
 *
d°
, u_ch¨ 
ex≥˘
, u_ch¨ 
§c
);

105 
©omic_cmp£t_sh‹t
(vﬁ©ûê
u_sh‹t
 *
d°
, u_sh‹à
ex≥˘
, u_sh‹à
§c
);

106 
©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
ex≥˘
, u_öà
§c
);

107 
©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
ex≥˘
, u_l⁄g 
§c
);

108 
©omic_fcmp£t_ch¨
(vﬁ©ûê
u_ch¨
 *
d°
, u_ch¨ *
ex≥˘
, u_ch¨ 
§c
);

109 
©omic_fcmp£t_sh‹t
(vﬁ©ûê
u_sh‹t
 *
d°
, u_sh‹à*
ex≥˘
,

110 
u_sh‹t
 
§c
);

111 
©omic_fcmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà*
ex≥˘
, u_öà
§c
);

112 
©omic_fcmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g *
ex≥˘
, u_l⁄g 
§c
);

113 
u_öt
 
©omic_„tchadd_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

114 
u_l⁄g
 
©omic_„tchadd_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

115 
©omic_ã°™d£t_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
);

116 
©omic_ã°™d£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
);

117 
©omic_ã°™d˛ór_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
);

118 
©omic_ã°™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
);

119 
©omic_thªad_„n˚_acq
();

120 
©omic_thªad_„n˚_acq_ªl
();

121 
©omic_thªad_„n˚_ªl
();

122 
©omic_thªad_„n˚_£q_c°
();

124 
	#ATOMIC_LOAD
(
TYPE
) \

125 
u_
##
TYPE
 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûêu_##TYPE *
p
)

	)

126 
	#ATOMIC_STORE
(
TYPE
) \

127 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

135 #i‡
deföed
(
SMP
Ë|| !deföed(
_KERNEL
Ë|| deföed(
KLD_MODULE
)

136 
	#MPLOCKED
 "lock ; "

	)

138 
	#MPLOCKED


	)

146 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

147 
__ölöe
 \

148 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

150 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

151 : "+m" (*
p
) \

152 : 
	`CONS
 (
V
) \

156 
__ölöe
 \

157 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

159 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

160 : "+m" (*
p
) \

161 : 
	`CONS
 (
V
) \

164 
__hack


	)

181 
	#ATOMIC_CMPSET
(
TYPE
) \

182 
__ölöe
 \

183 
©omic_cmp£t_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
d°
, u_##TYPE 
ex≥˘
, u_##TYPE 
§c
) \

185 
u_ch¨
 
ªs
; \

187 
__asm
 
	`__vﬁ©ûe
( \

188 " " 
MPLOCKED
 " " \

192 : "=q" (
ªs
), \

193 "+m" (*
d°
), \

194 "+a" (
ex≥˘
) \

195 : "r" (
§c
) \

197  (
ªs
); \

200 
__ölöe
 \

201 
©omic_fcmp£t_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
d°
, u_##TYPE *
ex≥˘
, u_##TYPE 
§c
) \

203 
u_ch¨
 
ªs
; \

205 
__asm
 
	`__vﬁ©ûe
( \

206 " " 
MPLOCKED
 " " \

210 : "=q" (
ªs
), \

211 "+m" (*
d°
), \

212 "+a" (*
ex≥˘
) \

213 : "r" (
§c
) \

215  (
ªs
); \

216 }

	)

218 
ATOMIC_CMPSET
();

219 
ATOMIC_CMPSET
();

220 
ATOMIC_CMPSET
();

221 
ATOMIC_CMPSET
();

227 
__ölöe
 
u_öt


228 
	$©omic_„tchadd_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

231 
__asm
 
	`__vﬁ©ûe
(

232 " " 
MPLOCKED
 " "

235 : "+r" (
v
),

236 "+m" (*
p
)

238  (
v
);

239 
	}
}

245 
__ölöe
 
u_l⁄g


246 
	$©omic_„tchadd_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

249 
__asm
 
	`__vﬁ©ûe
(

250 " " 
MPLOCKED
 " "

253 : "+r" (
v
),

254 "+m" (*
p
)

256  (
v
);

257 
	}
}

259 
__ölöe
 

260 
	$©omic_ã°™d£t_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

262 
u_ch¨
 
ªs
;

264 
__asm
 
	`__vﬁ©ûe
(

265 " " 
MPLOCKED
 " "

269 : "=q" (
ªs
),

270 "+m" (*
p
)

271 : "Ir" (
v
 & 0x1f)

273  (
ªs
);

274 
	}
}

276 
__ölöe
 

277 
	$©omic_ã°™d£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
)

279 
u_ch¨
 
ªs
;

281 
__asm
 
	`__vﬁ©ûe
(

282 " " 
MPLOCKED
 " "

286 : "=q" (
ªs
),

287 "+m" (*
p
)

288 : "Jr" ((
u_l⁄g
)(
v
 & 0x3f))

290  (
ªs
);

291 
	}
}

293 
__ölöe
 

294 
	$©omic_ã°™d˛ór_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

296 
u_ch¨
 
ªs
;

298 
__asm
 
	`__vﬁ©ûe
(

299 " " 
MPLOCKED
 " "

303 : "=q" (
ªs
),

304 "+m" (*
p
)

305 : "Ir" (
v
 & 0x1f)

307  (
ªs
);

308 
	}
}

310 
__ölöe
 

311 
	$©omic_ã°™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
)

313 
u_ch¨
 
ªs
;

315 
__asm
 
	`__vﬁ©ûe
(

316 " " 
MPLOCKED
 " "

320 : "=q" (
ªs
),

321 "+m" (*
p
)

322 : "Jr" ((
u_l⁄g
)(
v
 & 0x3f))

324  (
ªs
);

325 
	}
}

346 #i‡
deföed
(
_KERNEL
)

355 
	#OFFSETOF_MONITORBUF
 0x100

	)

357 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

358 
__ölöe
 

359 
	$__°‹ñﬂd_b¨rõr
()

362 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,%%gs:%0"

363 : "+m" (*(
u_öt
 *)
OFFSETOF_MONITORBUF
) : : "memory", "cc");

364 
	}
}

366 
__ölöe
 

367 
	$__°‹ñﬂd_b¨rõr
()

370 
	`__compûî_memb¨
();

371 
	}
}

374 
__ölöe
 

375 
	$__°‹ñﬂd_b¨rõr
()

378 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,-8(%%rsp)" : : : "memory", "cc");

379 
	}
}

382 
	#ATOMIC_LOAD
(
TYPE
) \

383 
__ölöe
 
u_
##
TYPE
 \

384 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

386 
u_
##
TYPE
 
ªs
; \

388 
ªs
 = *
p
; \

389 
	`__compûî_memb¨
(); \

390  (
ªs
); \

392 
__hack


	)

394 
	#ATOMIC_STORE
(
TYPE
) \

395 
__ölöe
 \

396 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
) \

399 
	`__compûî_memb¨
(); \

400 *
p
 = 
v
; \

402 
__hack


	)

404 
__ölöe
 

405 
	$©omic_thªad_„n˚_acq
()

408 
	`__compûî_memb¨
();

409 
	}
}

411 
__ölöe
 

412 
	$©omic_thªad_„n˚_ªl
()

415 
	`__compûî_memb¨
();

416 
	}
}

418 
__ölöe
 

419 
	$©omic_thªad_„n˚_acq_ªl
()

422 
	`__compûî_memb¨
();

423 
	}
}

425 
__ölöe
 

426 
	$©omic_thªad_„n˚_£q_c°
()

429 
	`__°‹ñﬂd_b¨rõr
();

430 
	}
}

434 
ATOMIC_ASM
(
£t
, , "‹b %b1,%0", "iq", 
v
);

435 
ATOMIC_ASM
(
˛ór
, , "™db %b1,%0", "iq", ~
v
);

436 
ATOMIC_ASM
(
add
, , "addb %b1,%0", "iq", 
v
);

437 
ATOMIC_ASM
(
subåa˘
, , "subb %b1,%0", "iq", 
v
);

439 
ATOMIC_ASM
(
£t
, , "‹w %w1,%0", "ú", 
v
);

440 
ATOMIC_ASM
(
˛ór
, , "™dw %w1,%0", "ú", ~
v
);

441 
ATOMIC_ASM
(
add
, , "addw %w1,%0", "ú", 
v
);

442 
ATOMIC_ASM
(
subåa˘
, , "subw %w1,%0", "ú", 
v
);

444 
ATOMIC_ASM
(
£t
, , "‹»%1,%0", "ú", 
v
);

445 
ATOMIC_ASM
(
˛ór
, , "™d»%1,%0", "ú", ~
v
);

446 
ATOMIC_ASM
(
add
, , "add»%1,%0", "ú", 
v
);

447 
ATOMIC_ASM
(
subåa˘
, , "sub»%1,%0", "ú", 
v
);

449 
ATOMIC_ASM
(
£t
, , "‹q %1,%0", "î", 
v
);

450 
ATOMIC_ASM
(
˛ór
, , "™dq %1,%0", "î", ~
v
);

451 
ATOMIC_ASM
(
add
, , "addq %1,%0", "î", 
v
);

452 
ATOMIC_ASM
(
subåa˘
, , "subq %1,%0", "î", 
v
);

454 
	#ATOMIC_LOADSTORE
(
TYPE
) \

455 
	`ATOMIC_LOAD
(
TYPE
); \

456 
	`ATOMIC_STORE
(
TYPE
)

	)

458 
ATOMIC_LOADSTORE
();

459 
ATOMIC_LOADSTORE
();

460 
ATOMIC_LOADSTORE
();

461 
ATOMIC_LOADSTORE
();

463 #unde‡
ATOMIC_ASM


464 #unde‡
ATOMIC_LOAD


465 #unde‡
ATOMIC_STORE


466 #unde‡
ATOMIC_LOADSTORE


467 #i‚de‡
WANT_FUNCTIONS


470 #ifde‡
__GNUCLIKE_ASM


472 
__ölöe
 
u_öt


473 
	$©omic_sw≠_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

476 
__asm
 
	`__vﬁ©ûe
(

479 : "+r" (
v
),

480 "+m" (*
p
));

481  (
v
);

482 
	}
}

484 
__ölöe
 
u_l⁄g


485 
	$©omic_sw≠_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

488 
__asm
 
	`__vﬁ©ûe
(

491 : "+r" (
v
),

492 "+m" (*
p
));

493  (
v
);

494 
	}
}

498 
u_öt
 
©omic_sw≠_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

499 
u_l⁄g
 
©omic_sw≠_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

503 
	#©omic_£t_acq_ch¨
 
©omic_£t_b¨r_ch¨


	)

504 
	#©omic_£t_ªl_ch¨
 
©omic_£t_b¨r_ch¨


	)

505 
	#©omic_˛ór_acq_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

506 
	#©omic_˛ór_ªl_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

507 
	#©omic_add_acq_ch¨
 
©omic_add_b¨r_ch¨


	)

508 
	#©omic_add_ªl_ch¨
 
©omic_add_b¨r_ch¨


	)

509 
	#©omic_subåa˘_acq_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

510 
	#©omic_subåa˘_ªl_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

511 
	#©omic_cmp£t_acq_ch¨
 
©omic_cmp£t_ch¨


	)

512 
	#©omic_cmp£t_ªl_ch¨
 
©omic_cmp£t_ch¨


	)

513 
	#©omic_fcmp£t_acq_ch¨
 
©omic_fcmp£t_ch¨


	)

514 
	#©omic_fcmp£t_ªl_ch¨
 
©omic_fcmp£t_ch¨


	)

516 
	#©omic_£t_acq_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

517 
	#©omic_£t_ªl_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

518 
	#©omic_˛ór_acq_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

519 
	#©omic_˛ór_ªl_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

520 
	#©omic_add_acq_sh‹t
 
©omic_add_b¨r_sh‹t


	)

521 
	#©omic_add_ªl_sh‹t
 
©omic_add_b¨r_sh‹t


	)

522 
	#©omic_subåa˘_acq_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

523 
	#©omic_subåa˘_ªl_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

524 
	#©omic_cmp£t_acq_sh‹t
 
©omic_cmp£t_sh‹t


	)

525 
	#©omic_cmp£t_ªl_sh‹t
 
©omic_cmp£t_sh‹t


	)

526 
	#©omic_fcmp£t_acq_sh‹t
 
©omic_fcmp£t_sh‹t


	)

527 
	#©omic_fcmp£t_ªl_sh‹t
 
©omic_fcmp£t_sh‹t


	)

529 
	#©omic_£t_acq_öt
 
©omic_£t_b¨r_öt


	)

530 
	#©omic_£t_ªl_öt
 
©omic_£t_b¨r_öt


	)

531 
	#©omic_˛ór_acq_öt
 
©omic_˛ór_b¨r_öt


	)

532 
	#©omic_˛ór_ªl_öt
 
©omic_˛ór_b¨r_öt


	)

533 
	#©omic_add_acq_öt
 
©omic_add_b¨r_öt


	)

534 
	#©omic_add_ªl_öt
 
©omic_add_b¨r_öt


	)

535 
	#©omic_subåa˘_acq_öt
 
©omic_subåa˘_b¨r_öt


	)

536 
	#©omic_subåa˘_ªl_öt
 
©omic_subåa˘_b¨r_öt


	)

537 
	#©omic_cmp£t_acq_öt
 
©omic_cmp£t_öt


	)

538 
	#©omic_cmp£t_ªl_öt
 
©omic_cmp£t_öt


	)

539 
	#©omic_fcmp£t_acq_öt
 
©omic_fcmp£t_öt


	)

540 
	#©omic_fcmp£t_ªl_öt
 
©omic_fcmp£t_öt


	)

542 
	#©omic_£t_acq_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

543 
	#©omic_£t_ªl_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

544 
	#©omic_˛ór_acq_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

545 
	#©omic_˛ór_ªl_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

546 
	#©omic_add_acq_l⁄g
 
©omic_add_b¨r_l⁄g


	)

547 
	#©omic_add_ªl_l⁄g
 
©omic_add_b¨r_l⁄g


	)

548 
	#©omic_subåa˘_acq_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

549 
	#©omic_subåa˘_ªl_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

550 
	#©omic_cmp£t_acq_l⁄g
 
©omic_cmp£t_l⁄g


	)

551 
	#©omic_cmp£t_ªl_l⁄g
 
©omic_cmp£t_l⁄g


	)

552 
	#©omic_fcmp£t_acq_l⁄g
 
©omic_fcmp£t_l⁄g


	)

553 
	#©omic_fcmp£t_ªl_l⁄g
 
©omic_fcmp£t_l⁄g


	)

555 
	#©omic_ªad™d˛ór_öt
(
p
Ë
	`©omic_sw≠_öt
’, 0)

	)

556 
	#©omic_ªad™d˛ór_l⁄g
(
p
Ë
	`©omic_sw≠_l⁄g
’, 0)

	)

559 
	#©omic_£t_8
 
©omic_£t_ch¨


	)

560 
	#©omic_£t_acq_8
 
©omic_£t_acq_ch¨


	)

561 
	#©omic_£t_ªl_8
 
©omic_£t_ªl_ch¨


	)

562 
	#©omic_˛ór_8
 
©omic_˛ór_ch¨


	)

563 
	#©omic_˛ór_acq_8
 
©omic_˛ór_acq_ch¨


	)

564 
	#©omic_˛ór_ªl_8
 
©omic_˛ór_ªl_ch¨


	)

565 
	#©omic_add_8
 
©omic_add_ch¨


	)

566 
	#©omic_add_acq_8
 
©omic_add_acq_ch¨


	)

567 
	#©omic_add_ªl_8
 
©omic_add_ªl_ch¨


	)

568 
	#©omic_subåa˘_8
 
©omic_subåa˘_ch¨


	)

569 
	#©omic_subåa˘_acq_8
 
©omic_subåa˘_acq_ch¨


	)

570 
	#©omic_subåa˘_ªl_8
 
©omic_subåa˘_ªl_ch¨


	)

571 
	#©omic_lﬂd_acq_8
 
©omic_lﬂd_acq_ch¨


	)

572 
	#©omic_°‹e_ªl_8
 
©omic_°‹e_ªl_ch¨


	)

573 
	#©omic_cmp£t_8
 
©omic_cmp£t_ch¨


	)

574 
	#©omic_cmp£t_acq_8
 
©omic_cmp£t_acq_ch¨


	)

575 
	#©omic_cmp£t_ªl_8
 
©omic_cmp£t_ªl_ch¨


	)

576 
	#©omic_fcmp£t_8
 
©omic_fcmp£t_ch¨


	)

577 
	#©omic_fcmp£t_acq_8
 
©omic_fcmp£t_acq_ch¨


	)

578 
	#©omic_fcmp£t_ªl_8
 
©omic_fcmp£t_ªl_ch¨


	)

581 
	#©omic_£t_16
 
©omic_£t_sh‹t


	)

582 
	#©omic_£t_acq_16
 
©omic_£t_acq_sh‹t


	)

583 
	#©omic_£t_ªl_16
 
©omic_£t_ªl_sh‹t


	)

584 
	#©omic_˛ór_16
 
©omic_˛ór_sh‹t


	)

585 
	#©omic_˛ór_acq_16
 
©omic_˛ór_acq_sh‹t


	)

586 
	#©omic_˛ór_ªl_16
 
©omic_˛ór_ªl_sh‹t


	)

587 
	#©omic_add_16
 
©omic_add_sh‹t


	)

588 
	#©omic_add_acq_16
 
©omic_add_acq_sh‹t


	)

589 
	#©omic_add_ªl_16
 
©omic_add_ªl_sh‹t


	)

590 
	#©omic_subåa˘_16
 
©omic_subåa˘_sh‹t


	)

591 
	#©omic_subåa˘_acq_16
 
©omic_subåa˘_acq_sh‹t


	)

592 
	#©omic_subåa˘_ªl_16
 
©omic_subåa˘_ªl_sh‹t


	)

593 
	#©omic_lﬂd_acq_16
 
©omic_lﬂd_acq_sh‹t


	)

594 
	#©omic_°‹e_ªl_16
 
©omic_°‹e_ªl_sh‹t


	)

595 
	#©omic_cmp£t_16
 
©omic_cmp£t_sh‹t


	)

596 
	#©omic_cmp£t_acq_16
 
©omic_cmp£t_acq_sh‹t


	)

597 
	#©omic_cmp£t_ªl_16
 
©omic_cmp£t_ªl_sh‹t


	)

598 
	#©omic_fcmp£t_16
 
©omic_fcmp£t_sh‹t


	)

599 
	#©omic_fcmp£t_acq_16
 
©omic_fcmp£t_acq_sh‹t


	)

600 
	#©omic_fcmp£t_ªl_16
 
©omic_fcmp£t_ªl_sh‹t


	)

603 
	#©omic_£t_32
 
©omic_£t_öt


	)

604 
	#©omic_£t_acq_32
 
©omic_£t_acq_öt


	)

605 
	#©omic_£t_ªl_32
 
©omic_£t_ªl_öt


	)

606 
	#©omic_˛ór_32
 
©omic_˛ór_öt


	)

607 
	#©omic_˛ór_acq_32
 
©omic_˛ór_acq_öt


	)

608 
	#©omic_˛ór_ªl_32
 
©omic_˛ór_ªl_öt


	)

609 
	#©omic_add_32
 
©omic_add_öt


	)

610 
	#©omic_add_acq_32
 
©omic_add_acq_öt


	)

611 
	#©omic_add_ªl_32
 
©omic_add_ªl_öt


	)

612 
	#©omic_subåa˘_32
 
©omic_subåa˘_öt


	)

613 
	#©omic_subåa˘_acq_32
 
©omic_subåa˘_acq_öt


	)

614 
	#©omic_subåa˘_ªl_32
 
©omic_subåa˘_ªl_öt


	)

615 
	#©omic_lﬂd_acq_32
 
©omic_lﬂd_acq_öt


	)

616 
	#©omic_°‹e_ªl_32
 
©omic_°‹e_ªl_öt


	)

617 
	#©omic_cmp£t_32
 
©omic_cmp£t_öt


	)

618 
	#©omic_cmp£t_acq_32
 
©omic_cmp£t_acq_öt


	)

619 
	#©omic_cmp£t_ªl_32
 
©omic_cmp£t_ªl_öt


	)

620 
	#©omic_fcmp£t_32
 
©omic_fcmp£t_öt


	)

621 
	#©omic_fcmp£t_acq_32
 
©omic_fcmp£t_acq_öt


	)

622 
	#©omic_fcmp£t_ªl_32
 
©omic_fcmp£t_ªl_öt


	)

623 
	#©omic_sw≠_32
 
©omic_sw≠_öt


	)

624 
	#©omic_ªad™d˛ór_32
 
©omic_ªad™d˛ór_öt


	)

625 
	#©omic_„tchadd_32
 
©omic_„tchadd_öt


	)

626 
	#©omic_ã°™d£t_32
 
©omic_ã°™d£t_öt


	)

627 
	#©omic_ã°™d˛ór_32
 
©omic_ã°™d˛ór_öt


	)

630 
	#©omic_£t_64
 
©omic_£t_l⁄g


	)

631 
	#©omic_£t_acq_64
 
©omic_£t_acq_l⁄g


	)

632 
	#©omic_£t_ªl_64
 
©omic_£t_ªl_l⁄g


	)

633 
	#©omic_˛ór_64
 
©omic_˛ór_l⁄g


	)

634 
	#©omic_˛ór_acq_64
 
©omic_˛ór_acq_l⁄g


	)

635 
	#©omic_˛ór_ªl_64
 
©omic_˛ór_ªl_l⁄g


	)

636 
	#©omic_add_64
 
©omic_add_l⁄g


	)

637 
	#©omic_add_acq_64
 
©omic_add_acq_l⁄g


	)

638 
	#©omic_add_ªl_64
 
©omic_add_ªl_l⁄g


	)

639 
	#©omic_subåa˘_64
 
©omic_subåa˘_l⁄g


	)

640 
	#©omic_subåa˘_acq_64
 
©omic_subåa˘_acq_l⁄g


	)

641 
	#©omic_subåa˘_ªl_64
 
©omic_subåa˘_ªl_l⁄g


	)

642 
	#©omic_lﬂd_acq_64
 
©omic_lﬂd_acq_l⁄g


	)

643 
	#©omic_°‹e_ªl_64
 
©omic_°‹e_ªl_l⁄g


	)

644 
	#©omic_cmp£t_64
 
©omic_cmp£t_l⁄g


	)

645 
	#©omic_cmp£t_acq_64
 
©omic_cmp£t_acq_l⁄g


	)

646 
	#©omic_cmp£t_ªl_64
 
©omic_cmp£t_ªl_l⁄g


	)

647 
	#©omic_fcmp£t_64
 
©omic_fcmp£t_l⁄g


	)

648 
	#©omic_fcmp£t_acq_64
 
©omic_fcmp£t_acq_l⁄g


	)

649 
	#©omic_fcmp£t_ªl_64
 
©omic_fcmp£t_ªl_l⁄g


	)

650 
	#©omic_sw≠_64
 
©omic_sw≠_l⁄g


	)

651 
	#©omic_ªad™d˛ór_64
 
©omic_ªad™d˛ór_l⁄g


	)

652 
	#©omic_„tchadd_64
 
©omic_„tchadd_l⁄g


	)

653 
	#©omic_ã°™d£t_64
 
©omic_ã°™d£t_l⁄g


	)

654 
	#©omic_ã°™d˛ór_64
 
©omic_ã°™d˛ór_l⁄g


	)

657 
	#©omic_£t_±r
 
©omic_£t_l⁄g


	)

658 
	#©omic_£t_acq_±r
 
©omic_£t_acq_l⁄g


	)

659 
	#©omic_£t_ªl_±r
 
©omic_£t_ªl_l⁄g


	)

660 
	#©omic_˛ór_±r
 
©omic_˛ór_l⁄g


	)

661 
	#©omic_˛ór_acq_±r
 
©omic_˛ór_acq_l⁄g


	)

662 
	#©omic_˛ór_ªl_±r
 
©omic_˛ór_ªl_l⁄g


	)

663 
	#©omic_add_±r
 
©omic_add_l⁄g


	)

664 
	#©omic_add_acq_±r
 
©omic_add_acq_l⁄g


	)

665 
	#©omic_add_ªl_±r
 
©omic_add_ªl_l⁄g


	)

666 
	#©omic_subåa˘_±r
 
©omic_subåa˘_l⁄g


	)

667 
	#©omic_subåa˘_acq_±r
 
©omic_subåa˘_acq_l⁄g


	)

668 
	#©omic_subåa˘_ªl_±r
 
©omic_subåa˘_ªl_l⁄g


	)

669 
	#©omic_lﬂd_acq_±r
 
©omic_lﬂd_acq_l⁄g


	)

670 
	#©omic_°‹e_ªl_±r
 
©omic_°‹e_ªl_l⁄g


	)

671 
	#©omic_cmp£t_±r
 
©omic_cmp£t_l⁄g


	)

672 
	#©omic_cmp£t_acq_±r
 
©omic_cmp£t_acq_l⁄g


	)

673 
	#©omic_cmp£t_ªl_±r
 
©omic_cmp£t_ªl_l⁄g


	)

674 
	#©omic_fcmp£t_±r
 
©omic_fcmp£t_l⁄g


	)

675 
	#©omic_fcmp£t_acq_±r
 
©omic_fcmp£t_acq_l⁄g


	)

676 
	#©omic_fcmp£t_ªl_±r
 
©omic_fcmp£t_ªl_l⁄g


	)

677 
	#©omic_sw≠_±r
 
©omic_sw≠_l⁄g


	)

678 
	#©omic_ªad™d˛ór_±r
 
©omic_ªad™d˛ór_l⁄g


	)

	@/usr/include/machine/elf.h

6 
	~<x86/ñf.h
>

	@/usr/include/machine/endian.h

6 
	~<x86/ídün.h
>

	@/usr/include/machine/param.h

45 #i‚de‡
_AMD64_INCLUDE_PARAM_H_


46 
	#_AMD64_INCLUDE_PARAM_H_


	)

48 
	~<machöe/_Æign.h
>

55 
	#__HAVE_ACPI


	)

56 
	#__PCI_REROUTE_INTERRUPT


	)

58 #i‚de‡
MACHINE


59 
	#MACHINE
 "amd64"

	)

61 #i‚de‡
MACHINE_ARCH


62 
	#MACHINE_ARCH
 "amd64"

	)

64 #i‚de‡
MACHINE_ARCH32


65 
	#MACHINE_ARCH32
 "i386"

	)

68 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

69 #i‚de‡
MAXCPU


70 
	#MAXCPU
 256

	)

73 
	#MAXCPU
 1

	)

76 #i‚de‡
MAXMEMDOM


77 
	#MAXMEMDOM
 8

	)

80 
	#ALIGNBYTES
 
_ALIGNBYTES


	)

81 
	#ALIGN
(
p
Ë
	`_ALIGN
’)

	)

88 
	#ALIGNED_POINTER
(
p
, 
t
Ë1

	)

94 
	#CACHE_LINE_SHIFT
 6

	)

95 
	#CACHE_LINE_SIZE
 (1 << 
CACHE_LINE_SHIFT
)

	)

98 
	#NPTEPG
 (
PAGE_SIZE
/( (
±_íåy_t
)))

	)

99 
	#NPTEPGSHIFT
 9

	)

100 
	#PAGE_SHIFT
 12

	)

101 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
Ë

	)

102 
	#PAGE_MASK
 (
PAGE_SIZE
-1)

	)

104 
	#NPDEPG
 (
PAGE_SIZE
/( (
pd_íåy_t
)))

	)

105 
	#NPDEPGSHIFT
 9

	)

106 
	#PDRSHIFT
 21

	)

107 
	#NBPDR
 (1<<
PDRSHIFT
Ë

	)

108 
	#PDRMASK
 (
NBPDR
-1)

	)

110 
	#NPDPEPG
 (
PAGE_SIZE
/( (
pdp_íåy_t
)))

	)

111 
	#NPDPEPGSHIFT
 9

	)

112 
	#PDPSHIFT
 30

	)

113 
	#NBPDP
 (1<<
PDPSHIFT
Ë

	)

114 
	#PDPMASK
 (
NBPDP
-1)

	)

116 
	#NPML4EPG
 (
PAGE_SIZE
/( (
pml4_íåy_t
)))

	)

117 
	#NPML4EPGSHIFT
 9

	)

118 
	#PML4SHIFT
 39

	)

119 
	#NBPML4
 (1UL<<
PML4SHIFT
)

	)

120 
	#PML4MASK
 (
NBPML4
-1)

	)

122 
	#MAXPAGESIZES
 3

	)

124 
	#IOPAGES
 2

	)

130 
	#IOPERM_BITMAP_SIZE
 (
IOPAGES
 * 
PAGE_SIZE
 + 1)

	)

132 #i‚def 
KSTACK_PAGES


133 
	#KSTACK_PAGES
 4

	)

135 
	#KSTACK_GUARD_PAGES
 1

	)

140 
	#round_∑ge
(
x
Ë(((()(x)Ë+ 
PAGE_MASK
Ë& ~(PAGE_MASK))

	)

141 
	#åunc_∑ge
(
x
Ë(()(xË& ~(
PAGE_MASK
))

	)

142 
	#åunc_2m∑ge
(
x
Ë(()(xË& ~
PDRMASK
)

	)

143 
	#round_2m∑ge
(
x
Ë(((()(x)Ë+ 
PDRMASK
Ë& ~PDRMASK)

	)

144 
	#åunc_1g∑ge
(
x
Ë(()(xË& ~
PDPMASK
)

	)

146 
	#©›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

147 
	#±ﬂ
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

149 
	#amd64_bt›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

150 
	#amd64_±ob
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

152 
	#pgtok
(
x
Ë(()(xË* (
PAGE_SIZE
 / 1024))

	)

154 
	#INKERNEL
(
va
Ë(((vaË>
DMAP_MIN_ADDRESS
 && (vaË< 
DMAP_MAX_ADDRESS
) \

155 || ((
va
Ë>
VM_MIN_KERNEL_ADDRESS
 && (vaË< 
VM_MAX_KERNEL_ADDRESS
))

	)

157 #ifde‡
SMP


158 
	#SC_TABLESIZE
 1024

	)

	@/usr/include/machine/pcpu.h

31 #i‚de‡
_MACHINE_PCPU_H_


32 
	#_MACHINE_PCPU_H_


	)

34 #i‚de‡
_SYS_CDEFS_H_


38 
	#PC_PTI_STACK_SZ
 16

	)

46 
	#PCPU_MD_FIELDS
 \

47 
pc_m⁄ô‹buf
[128] 
	`__Æig√d
(128); \

48 
p˝u
 *
pc_¥v•a˚
; \

49 
pm≠
 *
pc_cuΩm≠
; \

50 
amd64tss
 *
pc_ts•
; \

51 
amd64tss
 *
pc_comm⁄ts•
; \

52 
uöt64_t
 
pc_k¸3
; \

53 
uöt64_t
 
pc_u¸3
; \

54 
uöt64_t
 
pc_ßved_u¸3
; \

55 
ªgi°î_t
 
pc_r•0
; \

56 
ªgi°î_t
 
pc_s¸©ch_r•
; \

57 
ªgi°î_t
 
pc_s¸©ch_øx
; \

58 
u_öt
 
pc_≠ic_id
; \

59 
u_öt
 
pc_a˝i_id
; \

61 
u£r_£gmít_des¸ùt‹
 *
pc_fs32p
; \

63 
u£r_£gmít_des¸ùt‹
 *
pc_gs32p
; \

65 
sy°em_£gmít_des¸ùt‹
 *
pc_ldt
; \

67 
sy°em_£gmít_des¸ùt‹
 *
pc_tss
; \

68 
uöt64_t
 
pc_pm_ßve_˙t
; \

69 
u_öt
 
pc_cmci_mask
; \

70 
uöt64_t
 
pc_dbªg
[16]; \

71 
uöt64_t
 
pc_±i_°ack
[
PC_PTI_STACK_SZ
]; \

72 
ªgi°î_t
 
pc_±i_r•0
; \

73 
pc_dbªg_cmd
; \

74 
u_öt
 
pc_v˝u_id
; \

75 
uöt32_t
 
pc_pcid_√xt
; \

76 
uöt32_t
 
pc_pcid_gí
; \

77 
uöt32_t
 
pc_smp_éb_d⁄e
; \

78 
uöt32_t
 
pc_ibpb_£t
; \

79 
__∑d
[3288]

	)

81 
	#PC_DBREG_CMD_NONE
 0

	)

82 
	#PC_DBREG_CMD_LOAD
 1

	)

84 #ifde‡
_KERNEL


86 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__GNUCLIKE___TYPEOF
)

91 
	#__p˝u_off£t
(
«me
) \

92 
	`__off£tof
(
p˝u
, 
«me
)

	)

97 
	#__p˝u_ty≥
(
«me
) \

98 
	`__ty≥of
(((
p˝u
 *)0)->
«me
)

	)

103 
	#__PCPU_PTR
(
«me
Ë
	`__exãnsi⁄__
 ({ \

104 
	`__p˝u_ty≥
(
«me
Ë*
__p
; \

106 
__asm
 
	`__vﬁ©ûe
("movq %%gs:%1,%0;áddq %2,%0" \

107 : "Ù" (
__p
) \

108 : "m" (*(
p˝u
 *)(
	`__p˝u_off£t
(
pc_¥v•a˚
))), \

109 "i" (
	`__p˝u_off£t
(
«me
))); \

111 
__p
; \

112 })

	)

117 
	#__PCPU_GET
(
«me
Ë
	`__exãnsi⁄__
 ({ \

118 
	`__p˝u_ty≥
(
«me
Ë
__ªs
; \

119 
	s__s
 { \

120 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

121 } 
__s
; \

123 i‡((
__ªs
) == 1 || (__res) == 2 || \

124 (
__ªs
) == 4 || (__res) == 8) { \

125 
__asm
 
	`__vﬁ©ûe
("mov %%gs:%1,%0" \

126 : "Ù" (
__s
) \

127 : "m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
)))); \

128 *(
__s
 *)(*)&
__ªs
 = __s; \

130 
__ªs
 = *
	`__PCPU_PTR
(
«me
); \

132 
__ªs
; \

133 })

	)

139 
	#__PCPU_ADD
(
«me
, 
vÆ
) do { \

140 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

141 
	s__s
 { \

142 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

143 } 
__s
; \

145 
__vÆ
 = (
vÆ
); \

146 i‡((
__vÆ
) == 1 || (__val) == 2 || \

147 (
__vÆ
) == 4 || (__val) == 8) { \

148 
__s
 = *(__†*)(*)&
__vÆ
; \

149 
__asm
 
	`__vﬁ©ûe
("add %1,%%gs:%0" \

150 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

151 : "r" (
__s
)); \

153 *
	`__PCPU_PTR
(
«me
Ë+
__vÆ
; \

154 } 0)

	)

160 
	#__PCPU_INC
(
«me
) do { \

161 
	`CTASSERT
((
	`__p˝u_ty≥
(
«me
)) == 1 || \

162 (
	`__p˝u_ty≥
(
«me
)) == 2 || \

163 (
	`__p˝u_ty≥
(
«me
)) == 4 || \

164 (
	`__p˝u_ty≥
(
«me
)) == 8); \

165 i‡((
	`__p˝u_ty≥
(
«me
)) == 1) { \

166 
__asm
 
	`__vﬁ©ûe
("incb %%gs:%0" \

167 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

168 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

169 } i‡((
	`__p˝u_ty≥
(
«me
)) == 2) { \

170 
__asm
 
	`__vﬁ©ûe
("incw %%gs:%0" \

171 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

172 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

173 } i‡((
	`__p˝u_ty≥
(
«me
)) == 4) { \

174 
__asm
 
	`__vﬁ©ûe
("incl %%gs:%0" \

175 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

176 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

177 } i‡((
	`__p˝u_ty≥
(
«me
)) == 8) { \

178 
__asm
 
	`__vﬁ©ûe
("incq %%gs:%0" \

179 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

180 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

182 } 0)

	)

187 
	#__PCPU_SET
(
«me
, 
vÆ
) { \

188 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

189 
	s__s
 { \

190 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

191 } 
__s
; \

193 
__vÆ
 = (
vÆ
); \

194 i‡((
__vÆ
) == 1 || (__val) == 2 || \

195 (
__vÆ
) == 4 || (__val) == 8) { \

196 
__s
 = *(__†*)(*)&
__vÆ
; \

197 
__asm
 
	`__vﬁ©ûe
("mov %1,%%gs:%0" \

198 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

199 : "r" (
__s
)); \

201 *
	`__PCPU_PTR
(
«me
Ë
__vÆ
; \

203 }

	)

205 
	#gë_p˝u
(Ë
	`__exãnsi⁄__
 ({ \

206 
p˝u
 *
__pc
; \

208 
__asm
 
	`__vﬁ©ûe
("movq %%gs:%1,%0" \

209 : "Ù" (
__pc
) \

210 : "m" (*(
p˝u
 *)(
	`__p˝u_off£t
(
pc_¥v•a˚
)))); \

211 
__pc
; \

212 })

	)

214 
	#PCPU_GET
(
membî
Ë
	`__PCPU_GET
(
pc_
 ## membî)

	)

215 
	#PCPU_ADD
(
membî
, 
vÆ
Ë
	`__PCPU_ADD
(
pc_
 ## membî, vÆ)

	)

216 
	#PCPU_INC
(
membî
Ë
	`__PCPU_INC
(
pc_
 ## membî)

	)

217 
	#PCPU_PTR
(
membî
Ë
	`__PCPU_PTR
(
pc_
 ## membî)

	)

218 
	#PCPU_SET
(
membî
, 
vÆ
Ë
	`__PCPU_SET
(
pc_
 ## membî, vÆ)

	)

220 
	#OFFSETOF_CURTHREAD
 0

	)

221 #ifde‡
__˛™g__


222 #¥agm®
˛™g
 
dügno°ic
 
push


223 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnull-dereference"

225 
__ölöe
 
__puª2
 
thªad
 *

226 
	$__cuπhªad
()

228 
thªad
 *
td
;

230 
	`__asm
("movq %%gs:%1,%0" : "Ù" (
td
)

231 : "m" (*(*)
OFFSETOF_CURTHREAD
));

232  (
td
);

233 
	}
}

234 #ifde‡
__˛™g__


235 #¥agm®
˛™g
 
dügno°ic
 
p›


237 
	#cuπhªad
 (
	`__cuπhªad
())

	)

239 
	#OFFSETOF_CURPCB
 32

	)

240 
__ölöe
 
__puª2
 
pcb
 *

241 
	$__cuΩcb
()

243 
pcb
 *pcb;

245 
	`__asm
("movq %%gs:%1,%0" : "Ù" (
pcb
Ë: "m" (*(*)
OFFSETOF_CURPCB
));

246  (
pcb
);

247 
	}
}

248 
	#cuΩcb
 (
	`__cuΩcb
())

	)

250 
	#IS_BSP
(Ë(
	`PCPU_GET
(
˝uid
Ë=0)

	)

	@/usr/include/machine/pmap.h

47 #i‚de‡
_MACHINE_PMAP_H_


48 
	#_MACHINE_PMAP_H_


	)

55 
	#X86_PG_V
 0x001

	)

56 
	#X86_PG_RW
 0x002

	)

57 
	#X86_PG_U
 0x004

	)

58 
	#X86_PG_NC_PWT
 0x008

	)

59 
	#X86_PG_NC_PCD
 0x010

	)

60 
	#X86_PG_A
 0x020

	)

61 
	#X86_PG_M
 0x040

	)

62 
	#X86_PG_PS
 0x080

	)

63 
	#X86_PG_PTE_PAT
 0x080

	)

64 
	#X86_PG_G
 0x100

	)

65 
	#X86_PG_AVAIL1
 0x200

	)

66 
	#X86_PG_AVAIL2
 0x400

	)

67 
	#X86_PG_AVAIL3
 0x800

	)

68 
	#X86_PG_PDE_PAT
 0x1000

	)

69 
	#X86_PG_NX
 (1ul<<63Ë

	)

70 
	#X86_PG_AVAIL
(
x
Ë(1u»<< (x))

	)

73 
	#X86_PG_PDE_CACHE
 (
X86_PG_PDE_PAT
 | 
X86_PG_NC_PWT
 | 
X86_PG_NC_PCD
)

	)

74 
	#X86_PG_PTE_CACHE
 (
X86_PG_PTE_PAT
 | 
X86_PG_NC_PWT
 | 
X86_PG_NC_PCD
)

	)

79 
	#EPT_PG_READ
 0x001

	)

80 
	#EPT_PG_WRITE
 0x002

	)

81 
	#EPT_PG_EXECUTE
 0x004

	)

82 
	#EPT_PG_IGNORE_PAT
 0x040

	)

83 
	#EPT_PG_PS
 0x080

	)

84 
	#EPT_PG_A
 0x100

	)

85 
	#EPT_PG_M
 0x200

	)

86 
	#EPT_PG_MEMORY_TYPE
(
x
Ë((xË<< 3Ë

	)

91 
	#PG_V
 
X86_PG_V


	)

92 
	#PG_RW
 
X86_PG_RW


	)

93 
	#PG_U
 
X86_PG_U


	)

94 
	#PG_NC_PWT
 
X86_PG_NC_PWT


	)

95 
	#PG_NC_PCD
 
X86_PG_NC_PCD


	)

96 
	#PG_A
 
X86_PG_A


	)

97 
	#PG_M
 
X86_PG_M


	)

98 
	#PG_PS
 
X86_PG_PS


	)

99 
	#PG_PTE_PAT
 
X86_PG_PTE_PAT


	)

100 
	#PG_G
 
X86_PG_G


	)

101 
	#PG_AVAIL1
 
X86_PG_AVAIL1


	)

102 
	#PG_AVAIL2
 
X86_PG_AVAIL2


	)

103 
	#PG_AVAIL3
 
X86_PG_AVAIL3


	)

104 
	#PG_PDE_PAT
 
X86_PG_PDE_PAT


	)

105 
	#PG_NX
 
X86_PG_NX


	)

106 
	#PG_PDE_CACHE
 
X86_PG_PDE_CACHE


	)

107 
	#PG_PTE_CACHE
 
X86_PG_PTE_CACHE


	)

110 
	#PG_W
 
X86_PG_AVAIL3


	)

111 
	#PG_MANAGED
 
X86_PG_AVAIL2


	)

112 
	#EPT_PG_EMUL_V
 
	`X86_PG_AVAIL
(52)

	)

113 
	#EPT_PG_EMUL_RW
 
	`X86_PG_AVAIL
(53)

	)

114 
	#PG_PROMOTED
 
	`X86_PG_AVAIL
(54Ë

	)

115 
	#PG_FRAME
 (0x000ffffffffff000ul)

	)

116 
	#PG_PS_FRAME
 (0x000ffffff„00000ul)

	)

122 
	#PG_PTE_PROMOTE
 (
PG_NX
 | 
PG_MANAGED
 | 
PG_W
 | 
PG_G
 | 
PG_PTE_CACHE
 | \

123 
PG_M
 | 
PG_A
 | 
PG_U
 | 
PG_RW
 | 
PG_V
)

	)

129 
	#PGEX_P
 0x01

	)

130 
	#PGEX_W
 0x02

	)

131 
	#PGEX_U
 0x04

	)

132 
	#PGEX_RSV
 0x08

	)

133 
	#PGEX_I
 0x10

	)

144 #ifde‡
AMD64_NPT_AWARE


145 #unde‡
PG_AVAIL1


146 #unde‡
PG_G


147 #unde‡
PG_A


148 #unde‡
PG_M


149 #unde‡
PG_PDE_PAT


150 #unde‡
PG_PDE_CACHE


151 #unde‡
PG_PTE_PAT


152 #unde‡
PG_PTE_CACHE


153 #unde‡
PG_RW


154 #unde‡
PG_V


161 
	#KVADDR
(
l4
, 
l3
, 
l2
, 
l1
) ( \

163 (()(
l4
Ë<< 
PML4SHIFT
) | \

164 (()(
l3
Ë<< 
PDPSHIFT
) | \

165 (()(
l2
Ë<< 
PDRSHIFT
) | \

166 (()(
l1
Ë<< 
PAGE_SHIFT
))

	)

168 
	#UVADDR
(
l4
, 
l3
, 
l2
, 
l1
) ( \

169 (()(
l4
Ë<< 
PML4SHIFT
) | \

170 (()(
l3
Ë<< 
PDPSHIFT
) | \

171 (()(
l2
Ë<< 
PDRSHIFT
) | \

172 (()(
l1
Ë<< 
PAGE_SHIFT
))

	)

180 
	#NKPML4E
 4

	)

182 
	#NUPML4E
 (
NPML4EPG
/2Ë

	)

183 
	#NUPDPE
 (
NUPML4E
*
NPDPEPG
)

	)

184 
	#NUPDE
 (
NUPDPE
*
NPDEPG
Ë

	)

193 
	#NDMPML4E
 8

	)

211 
	#PML4PML4I
 (
NPML4EPG
/2Ë

	)

213 
	#KPML4BASE
 (
NPML4EPG
-
NKPML4E
Ë

	)

214 
	#DMPML4I
 
	`rounddown
(
KPML4BASE
-
NDMPML4E
, NDMPML4EË

	)

216 
	#KPML4I
 (
NPML4EPG
-1)

	)

217 
	#KPDPI
 (
NPDPEPG
-2Ë

	)

220 
	#LMSPML4I
 (
PML4PML4I
 + 1)

	)

221 
	#LMEPML4I
 (
DMPML4I
 - 1)

	)

226 
	#ISA_HOLE_START
 0xa0000

	)

227 
	#ISA_HOLE_LENGTH
 (0x100000-
ISA_HOLE_START
)

	)

229 
	#PMAP_PCID_NONE
 0xffffffff

	)

230 
	#PMAP_PCID_KERN
 0

	)

231 
	#PMAP_PCID_OVERMAX
 0x1000

	)

232 
	#PMAP_PCID_OVERMAX_KERN
 0x800

	)

233 
	#PMAP_PCID_USER_PT
 0x800

	)

235 
	#PMAP_NO_CR3
 (~0UL)

	)

237 #i‚de‡
LOCORE


239 
	~<sys/queue.h
>

240 
	~<sys/_˝u£t.h
>

241 
	~<sys/_lock.h
>

242 
	~<sys/_muãx.h
>

244 
	~<vm/_vm_ødix.h
>

246 
u_öt64_t
 
	tpd_íåy_t
;

247 
u_öt64_t
 
	t±_íåy_t
;

248 
u_öt64_t
 
	tpdp_íåy_t
;

249 
u_öt64_t
 
	tpml4_íåy_t
;

254 #ifde‡
_KERNEL


255 
	#addr_PTm≠
 (
	`KVADDR
(
PML4PML4I
, 0, 0, 0))

	)

256 
	#addr_PDm≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, 0, 0))

	)

257 
	#addr_PDPm≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, 0))

	)

258 
	#addr_PML4m≠
 (
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, PML4PML4I))

	)

259 
	#addr_PML4pml4e
 (
addr_PML4m≠
 + (
PML4PML4I
 * (
pml4_íåy_t
)))

	)

260 
	#PTm≠
 ((
±_íåy_t
 *)(
addr_PTm≠
))

	)

261 
	#PDm≠
 ((
pd_íåy_t
 *)(
addr_PDm≠
))

	)

262 
	#PDPm≠
 ((
pd_íåy_t
 *)(
addr_PDPm≠
))

	)

263 
	#PML4m≠
 ((
pd_íåy_t
 *)(
addr_PML4m≠
))

	)

264 
	#PML4pml4e
 ((
pd_íåy_t
 *)(
addr_PML4pml4e
))

	)

266 
nk±
;

267 
u_öt64_t
 
KPDPphys
;

268 
u_öt64_t
 
KPML4phys
;

276 
±_íåy_t
 *
vt›ã
(
vm_off£t_t
);

277 
	#vt›hys
(
va
Ë
	`pm≠_kexåa˘
(((
vm_off£t_t
Ë(va)))

	)

279 
	#±e_lﬂd_°‹e
(
±ï
, 
±e
Ë
	`©omic_sw≠_l⁄g
’ãp,Öã)

	)

280 
	#±e_lﬂd_˛ór
(
±ï
Ë
	`©omic_sw≠_l⁄g
’ãp, 0)

	)

281 
	#±e_°‹e
(
±ï
, 
±e
) do { \

282 *(
u_l⁄g
 *)(
±ï
Ë(u_l⁄g)(
±e
); \

283 } 0)

	)

284 
	#±e_˛ór
(
±ï
Ë
	`±e_°‹e
’ãp, 0)

	)

286 
	#pde_°‹e
(
pdï
, 
pde
Ë
	`±e_°‹e
’dï,Öde)

	)

288 
±_íåy_t
 
pg_nx
;

295 
	gpv_íåy
;

296 
	gpv_chunk
;

302 
	smd_∑ge
 {

303 
TAILQ_HEAD
(, 
pv_íåy
Ë
	mpv_li°
;

304 
	mpv_gí
;

305 
	m∑t_mode
;

308 
	epm≠_ty≥
 {

309 
	mPT_X86
,

310 
	mPT_EPT
,

311 
	mPT_RVI
,

314 
	spm≠_pcids
 {

315 
uöt32_t
 
	mpm_pcid
;

316 
uöt32_t
 
	mpm_gí
;

323 
	spm≠
 {

324 
mtx
 
	mpm_mtx
;

325 
pml4_íåy_t
 *
	mpm_pml4
;

326 
pml4_íåy_t
 *
	mpm_pml4u
;

327 
uöt64_t
 
	mpm_¸3
;

328 
uöt64_t
 
	mpm_u¸3
;

329 
TAILQ_HEAD
(,
pv_chunk
Ë
	mpm_pvchunk
;

330 
˝u£t_t
 
	mpm_a˘ive
;

331 
pm≠_ty≥
 
	mpm_ty≥
;

332 
pm≠_°©i°ics
 
	mpm_°©s
;

333 
vm_ødix
 
	mpm_roŸ
;

334 
	mpm_ïtgí
;

335 
	mpm_Êags
;

336 
pm≠_pcids
 
	mpm_pcids
[
MAXCPU
];

340 
	#PMAP_NESTED_IPIMASK
 0xff

	)

341 
	#PMAP_PDE_SUPERPAGE
 (1 << 8Ë

	)

342 
	#PMAP_EMULATE_AD_BITS
 (1 << 9Ë

	)

343 
	#PMAP_SUPPORTS_EXEC_ONLY
 (1 << 10Ë

	)

345 
pm≠
 *
	tpm≠_t
;

347 #ifde‡
_KERNEL


348 
pm≠
 
kî√l_pm≠_°‹e
;

349 
	#kî√l_pm≠
 (&
kî√l_pm≠_°‹e
)

	)

351 
	#PMAP_LOCK
(
pm≠
Ë
	`mtx_lock
(&’m≠)->
pm_mtx
)

	)

352 
	#PMAP_LOCK_ASSERT
(
pm≠
, 
ty≥
) \

353 
	`mtx_as£π
(&(
pm≠
)->
pm_mtx
, (
ty≥
))

	)

354 
	#PMAP_LOCK_DESTROY
(
pm≠
Ë
	`mtx_de°roy
(&’m≠)->
pm_mtx
)

	)

355 
	#PMAP_LOCK_INIT
(
pm≠
Ë
	`mtx_öô
(&’m≠)->
pm_mtx
, "pmap", \

356 
NULL
, 
MTX_DEF
 | 
MTX_DUPOK
)

	)

357 
	#PMAP_LOCKED
(
pm≠
Ë
	`mtx_ow√d
(&’m≠)->
pm_mtx
)

	)

358 
	#PMAP_MTX
(
pm≠
Ë(&’m≠)->
pm_mtx
)

	)

359 
	#PMAP_TRYLOCK
(
pm≠
Ë
	`mtx_åylock
(&’m≠)->
pm_mtx
)

	)

360 
	#PMAP_UNLOCK
(
pm≠
Ë
	`mtx_u∆ock
(&’m≠)->
pm_mtx
)

	)

362 
pm≠_pöô_ty≥
(
pm≠_t
 
pm≠
, 
pm≠_ty≥
 
pm_ty≥
, 
Êags
);

363 
pm≠_emuœã_ac˚s£d_dúty
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
, 
·y≥
);

370 
	spv_íåy
 {

371 
vm_off£t_t
 
	mpv_va
;

372 
TAILQ_ENTRY
(
pv_íåy
Ë
	mpv_√xt
;

373 } *
	tpv_íåy_t
;

379 
	#_NPCM
 3

	)

380 
	#_NPCPV
 168

	)

381 
	#PV_CHUNK_HEADER
 \

382 
pm≠_t
 
pc_pm≠
; \

383 
	`TAILQ_ENTRY
(
pv_chunk
Ë
pc_li°
; \

384 
uöt64_t
 
pc_m≠
[
_NPCM
]; \

385 
	`TAILQ_ENTRY
(
pv_chunk
Ë
pc_Ãu
;

	)

387 
	spv_chunk_hódî
 {

388 
	mPV_CHUNK_HEADER


391 
	spv_chunk
 {

392 
PV_CHUNK_HEADER


393 
pv_íåy
 
	mpc_pvíåy
[
_NPCPV
];

396 #ifdef 
_KERNEL


398 
ˇddr_t
 
CADDR1
;

399 
±_íåy_t
 *
CMAP1
;

400 
vm_∑ddr_t
 
phys_avaû
[];

401 
vm_∑ddr_t
 
dump_avaû
[];

402 
vm_off£t_t
 
vútuÆ_avaû
;

403 
vm_off£t_t
 
vútuÆ_íd
;

404 
vm_∑ddr_t
 
dm≠limô
;

405 
pm≠_pcid_íabÀd
;

406 
övpcid_w‹ks
;

408 
	#pm≠_∑ge_gë_mem©å
(
m
Ë((
vm_mem©å_t
)(m)->
md
.
∑t_mode
)

	)

409 
	#pm≠_∑ge_is_wrôe_m≠≥d
(
m
Ë(((m)->
aÊags
 & 
PGA_WRITEABLE
Ë!0)

	)

410 
	#pm≠_unm≠bios
(
va
, 
sz
Ë
	`pm≠_unm≠dev
((va), (sz))

	)

412 
	gthªad
;

414 
pm≠_a˘iv©e_boŸ
(
pm≠_t
 
pm≠
);

415 
pm≠_a˘iv©e_sw
(
thªad
 *);

416 
pm≠_boŸ°øp
(
vm_∑ddr_t
 *);

417 
pm≠_ˇche_bôs
(
pm≠_t
 
pm≠
, 
mode
, 
boﬁón_t
 
is_pde
);

418 
pm≠_ch™ge_©å
(
vm_off£t_t
, 
vm_size_t
, );

419 
pm≠_demŸe_DMAP
(
vm_∑ddr_t
 
ba£
, 
vm_size_t
 
Àn
, 
boﬁón_t
 
övÆid©e
);

420 
pm≠_Êush_ˇche_ønge
(
vm_off£t_t
, vm_offset_t);

421 
pm≠_Êush_ˇche_phys_ønge
(
vm_∑ddr_t
, vm_∑ddr_t, 
vm_mem©å_t
);

422 
pm≠_öô_∑t
();

423 
pm≠_kíãr
(
vm_off£t_t
 
va
, 
vm_∑ddr_t
 
∑
);

424 *
pm≠_kíãr_ãmp‹¨y
(
vm_∑ddr_t
 
∑
, 
i
);

425 
vm_∑ddr_t
 
pm≠_kexåa˘
(
vm_off£t_t
);

426 
pm≠_kªmove
(
vm_off£t_t
);

427 
pm≠_œrge_m≠
(
vm_∑ddr_t
, 
vm_size_t
, **, 
vm_mem©å_t
);

428 
pm≠_œrge_m≠_wb
(*
sva
, 
vm_size_t
 
Àn
);

429 
pm≠_œrge_unm≠
(*
sva
, 
vm_size_t
 
Àn
);

430 *
pm≠_m≠bios
(
vm_∑ddr_t
, 
vm_size_t
);

431 *
pm≠_m≠dev
(
vm_∑ddr_t
, 
vm_size_t
);

432 *
pm≠_m≠dev_©å
(
vm_∑ddr_t
, 
vm_size_t
, );

433 *
pm≠_m≠dev_pcõcfg
(
vm_∑ddr_t
 
∑
, 
vm_size_t
 
size
);

434 
boﬁón_t
 
pm≠_∑ge_is_m≠≥d
(
vm_∑ge_t
 
m
);

435 
pm≠_∑ge_£t_mem©å
(
vm_∑ge_t
 
m
, 
vm_mem©å_t
 
ma
);

436 
pm≠_pöô_pml4
(
vm_∑ge_t
);

437 
boﬁ
 
pm≠_ps_íabÀd
(
pm≠_t
 
pm≠
);

438 
pm≠_unm≠dev
(
vm_off£t_t
, 
vm_size_t
);

439 
pm≠_övÆid©e_∑ge
(
pm≠_t
, 
vm_off£t_t
);

440 
pm≠_övÆid©e_ønge
(
pm≠_t
, 
vm_off£t_t
, vm_offset_t);

441 
pm≠_övÆid©e_Æl
(
pm≠_t
);

442 
pm≠_övÆid©e_ˇche
();

443 
pm≠_övÆid©e_ˇche_∑ges
(
vm_∑ge_t
 *
∑ges
, 
cou¡
);

444 
pm≠_övÆid©e_ˇche_ønge
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
);

445 
pm≠_f‹˚_övÆid©e_ˇche_ønge
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
);

446 
pm≠_gë_m≠pög
(
pm≠_t
 
pm≠
, 
vm_off£t_t
 
va
, 
uöt64_t
 *
±r
, *
num
);

447 
boﬁón_t
 
pm≠_m≠_io_å™sõ¡
(
vm_∑ge_t
 *, 
vm_off£t_t
 *, , boolean_t);

448 
pm≠_unm≠_io_å™sõ¡
(
vm_∑ge_t
 *, 
vm_off£t_t
 *, , 
boﬁón_t
);

449 
pm≠_±i_add_kva
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
, 
boﬁ
 
exec
);

450 
pm≠_±i_ªmove_kva
(
vm_off£t_t
 
sva
, vm_off£t_à
eva
);

451 
pm≠_±i_pcid_övÆid©e
(
uöt64_t
 
u¸3
, uöt64_à
k¸3
);

452 
pm≠_±i_pcid_övÕg
(
uöt64_t
 
u¸3
, uöt64_à
k¸3
, 
vm_off£t_t
 
va
);

453 
pm≠_±i_pcid_övÃng
(
uöt64_t
 
u¸3
, uöt64_à
k¸3
, 
vm_off£t_t
 
sva
,

454 
vm_off£t_t
 
eva
);

458 
__ölöe
 
vm_pödex_t


459 
	$pm≠_±e_ödex
(
vm_off£t_t
 
va
)

462  ((
va
 >> 
PAGE_SHIFT
Ë& ((1u»<< 
NPTEPGSHIFT
) - 1));

463 
	}
}

465 
__ölöe
 
vm_pödex_t


466 
	$pm≠_pde_ödex
(
vm_off£t_t
 
va
)

469  ((
va
 >> 
PDRSHIFT
Ë& ((1u»<< 
NPDEPGSHIFT
) - 1));

470 
	}
}

472 
__ölöe
 
vm_pödex_t


473 
	$pm≠_pd≥_ödex
(
vm_off£t_t
 
va
)

476  ((
va
 >> 
PDPSHIFT
Ë& ((1u»<< 
NPDPEPGSHIFT
) - 1));

477 
	}
}

479 
__ölöe
 
vm_pödex_t


480 
	$pm≠_pml4e_ödex
(
vm_off£t_t
 
va
)

483  ((
va
 >> 
PML4SHIFT
Ë& ((1u»<< 
NPML4EPGSHIFT
) - 1));

484 
	}
}

	@/usr/include/machine/proc.h

35 #i‚de‡
_MACHINE_PROC_H_


36 
	#_MACHINE_PROC_H_


	)

38 
	~<sys/queue.h
>

39 
	~<machöe/£gmíts.h
>

47 
	s¥oc_ldt
 {

48 
ˇddr_t
 
	mldt_ba£
;

49 
	mldt_ªf˙t
;

52 
	spm≠_övl_gí
 {

53 
u_l⁄g
 
	mgí
;

54 
LIST_ENTRY
(
pm≠_övl_gí
Ë
	mlök
;

60 
	smdthªad
 {

61 
	mmd_•ölock_cou¡
;

62 
ªgi°î_t
 
	mmd_ßved_Êags
;

63 
ªgi°î_t
 
	mmd_•urÊt_addr
;

64 
pm≠_övl_gí
 
	mmd_övl_gí
;

65 
ªgi°î_t
 
	mmd_efút_tmp
;

66 
	mmd_efút_dis_pf
;

69 
	smd¥oc
 {

70 
¥oc_ldt
 *
	mmd_ldt
;

71 
sy°em_£gmít_des¸ùt‹
 
	mmd_ldt_sd
;

74 
	#KINFO_PROC_SIZE
 1088

	)

75 
	#KINFO_PROC32_SIZE
 768

	)

77 
	ssysˇŒ_¨gs
 {

78 
u_öt
 
	mcode
;

79 
sy£¡
 *
	mˇŒp
;

80 
ªgi°î_t
 
	m¨gs
[8];

81 
	m«rg
;

84 #ifdef 
_KERNEL


87 
	#GET_STACK_USAGE
(
tŸÆ
, 
u£d
) do { \

88 
thªad
 *
td
 = 
cuπhªad
; \

89 (
tŸÆ
Ë
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
; \

90 (
u£d
Ë(*)
td
->
td_k°ack
 + \

91 
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
 - \

92 (*)&
td
; \

93 } 0)

	)

95 
¥oc_ldt
 *
u£r_ldt_Æloc
(
¥oc
 *, );

96 
u£r_ldt_‰ì
(
thªad
 *);

97 
	gsyßrch_¨gs
;

98 
syßrch_ldt
(
thªad
 *
td
, 
syßrch_¨gs
 *
u≠
, 
u≠_•a˚
);

99 
amd64_£t_ldt_d©a
(
thªad
 *
td
, 
°¨t
, 
num
,

100 
u£r_£gmít_des¸ùt‹
 *
descs
);

102 
mtx
 
dt_lock
;

103 
max_ldt_£gmít
;

105 
	#NARGREGS
 6

	)

	@/usr/include/machine/setjmp.h

6 
	~<x86/£tjmp.h
>

	@/usr/include/machine/vm.h

32 #i‚de‡
_MACHINE_VM_H_


33 
	#_MACHINE_VM_H_


	)

35 
	~<machöe/•ecüÃeg.h
>

38 
	#VM_MEMATTR_UNCACHEABLE
 ((
vm_mem©å_t
)
PAT_UNCACHEABLE
)

	)

39 
	#VM_MEMATTR_WRITE_COMBINING
 ((
vm_mem©å_t
)
PAT_WRITE_COMBINING
)

	)

40 
	#VM_MEMATTR_WRITE_THROUGH
 ((
vm_mem©å_t
)
PAT_WRITE_THROUGH
)

	)

41 
	#VM_MEMATTR_WRITE_PROTECTED
 ((
vm_mem©å_t
)
PAT_WRITE_PROTECTED
)

	)

42 
	#VM_MEMATTR_WRITE_BACK
 ((
vm_mem©å_t
)
PAT_WRITE_BACK
)

	)

43 
	#VM_MEMATTR_WEAK_UNCACHEABLE
 ((
vm_mem©å_t
)
PAT_UNCACHED
)

	)

45 
	#VM_MEMATTR_DEFAULT
 
VM_MEMATTR_WRITE_BACK


	)

	@/usr/include/machine/vmparam.h

47 #i‚de‡
_MACHINE_VMPARAM_H_


48 
	#_MACHINE_VMPARAM_H_
 1

	)

57 
	#MAXTSIZ
 (32768UL*1024*1024Ë

	)

58 #i‚de‡
DFLDSIZ


59 
	#DFLDSIZ
 (32768UL*1024*1024Ë

	)

61 #i‚de‡
MAXDSIZ


62 
	#MAXDSIZ
 (32768UL*1024*1024Ë

	)

64 #i‚def 
DFLSSIZ


65 
	#DFLSSIZ
 (8UL*1024*1024Ë

	)

67 #i‚def 
MAXSSIZ


68 
	#MAXSSIZ
 (512UL*1024*1024Ë

	)

70 #i‚de‡
SGROWSIZ


71 
	#SGROWSIZ
 (128UL*1024Ë

	)

79 
	#UMA_MD_SMALL_ALLOC


	)

84 
	#VM_PHYSSEG_DENSE


	)

92 
	#VM_PHYSSEG_MAX
 63

	)

100 
	#VM_NFREEPOOL
 2

	)

101 
	#VM_FREEPOOL_DEFAULT
 0

	)

102 
	#VM_FREEPOOL_DIRECT
 1

	)

110 
	#VM_NFREELIST
 3

	)

111 
	#VM_FREELIST_DEFAULT
 0

	)

112 
	#VM_FREELIST_DMA32
 1

	)

113 
	#VM_FREELIST_LOWMEM
 2

	)

115 
	#VM_LOWMEM_BOUNDARY
 (16 << 20Ë

	)

122 
	#VM_DMA32_NPAGES_THRESHOLD
 16777216

	)

132 
	#VM_NFREEORDER
 13

	)

137 #i‚def 
VM_NRESERVLEVEL


138 
	#VM_NRESERVLEVEL
 1

	)

144 #i‚def 
VM_LEVEL_0_ORDER


145 
	#VM_LEVEL_0_ORDER
 9

	)

148 #ifdef 
SMP


149 
	#PA_LOCK_COUNT
 256

	)

171 
	#VM_MIN_KERNEL_ADDRESS
 
	`KVADDR
(
KPML4BASE
, 0, 0, 0)

	)

172 
	#VM_MAX_KERNEL_ADDRESS
 
	`KVADDR
(
KPML4BASE
 + 
NKPML4E
 - 1, \

173 
NPDPEPG
-1, 
NPDEPG
-1, 
NPTEPG
-1)

	)

175 
	#DMAP_MIN_ADDRESS
 
	`KVADDR
(
DMPML4I
, 0, 0, 0)

	)

176 
	#DMAP_MAX_ADDRESS
 
	`KVADDR
(
DMPML4I
 + 
NDMPML4E
, 0, 0, 0)

	)

178 
	#LARGEMAP_MIN_ADDRESS
 
	`KVADDR
(
LMSPML4I
, 0, 0, 0)

	)

179 
	#LARGEMAP_MAX_ADDRESS
 
	`KVADDR
(
LMEPML4I
 + 1, 0, 0, 0)

	)

181 
	#KERNBASE
 
	`KVADDR
(
KPML4I
, 
KPDPI
, 0, 0)

	)

183 
	#UPT_MAX_ADDRESS
 
	`KVADDR
(
PML4PML4I
, PML4PML4I, PML4PML4I, PML4PML4I)

	)

184 
	#UPT_MIN_ADDRESS
 
	`KVADDR
(
PML4PML4I
, 0, 0, 0)

	)

186 
	#VM_MAXUSER_ADDRESS
 
	`UVADDR
(
NUPML4E
, 0, 0, 0)

	)

188 
	#SHAREDPAGE
 (
VM_MAXUSER_ADDRESS
 - 
PAGE_SIZE
)

	)

189 
	#USRSTACK
 
SHAREDPAGE


	)

191 
	#VM_MAX_ADDRESS
 
UPT_MAX_ADDRESS


	)

192 
	#VM_MIN_ADDRESS
 (0)

	)

200 
	#PMAP_HAS_DMAP
 1

	)

201 
	#PHYS_TO_DMAP
(
x
) ({ \

202 
	`KASSERT
(
dm≠limô
 =0 || (
x
) < dmaplimit, \

204 (
uötmax_t
)
x
)); \

205 (
x
Ë| 
DMAP_MIN_ADDRESS
; })

	)

207 
	#DMAP_TO_PHYS
(
x
) ({ \

208 
	`KASSERT
((
x
Ë< (
DMAP_MIN_ADDRESS
 + 
dm≠limô
) && \

209 (
x
Ë>
DMAP_MIN_ADDRESS
, \

211 (
uötmax_t
)
x
)); \

212 (
x
Ë& ~
DMAP_MIN_ADDRESS
; })

	)

217 #i‚de‡
VM_KMEM_SIZE_SCALE


218 
	#VM_KMEM_SIZE_SCALE
 (1)

	)

225 #i‚de‡
VM_KMEM_SIZE_MAX


226 
	#VM_KMEM_SIZE_MAX
 ((
VM_MAX_KERNEL_ADDRESS
 - \

227 
VM_MIN_KERNEL_ADDRESS
 + 1Ë* 3 / 5)

	)

231 #i‚de‡
VM_INITIAL_PAGEIN


232 
	#VM_INITIAL_PAGEIN
 16

	)

235 
	#ZERO_REGION_SIZE
 (2 * 1024 * 1024Ë

	)

241 
	#VM_BATCHQUEUE_SIZE
 31

	)

	@/usr/include/net/altq/if_altq.h

29 #i‚de‡
_ALTQ_IF_ALTQ_H_


30 
	#_ALTQ_IF_ALTQ_H_


	)

32 
	~<sys/lock.h
>

33 
	~<sys/muãx.h
>

34 
	~<sys/evít.h
>

36 
	gÆtq_pkèâr
; 
	gtb_ªguœt‹
; 
	gt›_cdƒ
;

41 
	siÁ…q
 {

43 
mbuf
 *
	mifq_hód
;

44 
mbuf
 *
	mifq_èû
;

45 
	mifq_Àn
;

46 
	mifq_maxÀn
;

47 
mtx
 
	mifq_mtx
;

50 
mbuf
 *
	mifq_drv_hód
;

51 
mbuf
 *
	mifq_drv_èû
;

52 
	mifq_drv_Àn
;

53 
	mifq_drv_maxÀn
;

56 
	mÆtq_ty≥
;

57 
	mÆtq_Êags
;

58 *
	mÆtq_disc
;

59 
i‚ë
 *
	mÆtq_iÂ
;

61 (*
	mÆtq_íqueue
)(
	miÁ…q
 *, 
	mmbuf
 *,

62 
	mÆtq_pkèâr
 *);

63 
	mmbuf
 *(*
	mÆtq_dequeue
)(
	miÁ…q
 *, );

64 (*
	mÆtq_ªque°
)(
	miÁ…q
 *, , *);

67 *
	mÆtq_˛fõr
;

68 *(*
	mÆtq_˛assify
)(*, 
	mmbuf
 *, );

71 
tb_ªguœt‹
 *
	mÆtq_tbr
;

74 
t›_cdƒ
 *
	mÆtq_cdƒ
;

78 #ifde‡
_KERNEL


91 
	sÆtq_pkèâr
 {

92 *
	m∑âr_˛ass
;

93 
	m∑âr_af
;

94 
ˇddr_t
 
	m∑âr_hdr
;

100 
	sÆtq_èg
 {

101 
u_öt32_t
 
	mqid
;

103 
	maf
;

104 *
	mhdr
;

116 
	stb_ªguœt‹
 {

117 
öt64_t
 
	mtbr_øã
;

118 
öt64_t
 
	mtbr_dïth
;

120 
öt64_t
 
	mtbr_tokí
;

121 
öt64_t
 
	mtbr_fûlu±ime
;

122 
u_öt64_t
 
	mtbr_œ°
;

124 
	mtbr_œ°›
;

129 
	#ALTQF_READY
 0x01

	)

130 
	#ALTQF_ENABLED
 0x02

	)

131 
	#ALTQF_CLASSIFY
 0x04

	)

132 
	#ALTQF_CNDTNING
 0x08

	)

133 
	#ALTQF_DRIVER1
 0x40

	)

136 
	#ALTQF_CANTCHANGE
 (
ALTQF_READY
)

	)

139 
	#ALTDQ_REMOVE
 1

	)

140 
	#ALTDQ_POLL
 2

	)

143 
	#ALTRQ_PURGE
 1

	)

145 
	#ALTQ_IS_READY
(
ifq
Ë((ifq)->
Ætq_Êags
 & 
ALTQF_READY
)

	)

146 #ifde‡
ALTQ


147 
	#ALTQ_IS_ENABLED
(
ifq
Ë((ifq)->
Ætq_Êags
 & 
ALTQF_ENABLED
)

	)

149 
	#ALTQ_IS_ENABLED
(
ifq
Ë0

	)

151 
	#ALTQ_NEEDS_CLASSIFY
(
ifq
Ë((ifq)->
Ætq_Êags
 & 
ALTQF_CLASSIFY
)

	)

152 
	#ALTQ_IS_CNDTNING
(
ifq
Ë((ifq)->
Ætq_Êags
 & 
ALTQF_CNDTNING
)

	)

154 
	#ALTQ_SET_CNDTNING
(
ifq
Ë((ifq)->
Ætq_Êags
 |
ALTQF_CNDTNING
)

	)

155 
	#ALTQ_CLEAR_CNDTNING
(
ifq
Ë((ifq)->
Ætq_Êags
 &~
ALTQF_CNDTNING
)

	)

156 
	#ALTQ_IS_ATTACHED
(
ifq
Ë((ifq)->
Ætq_disc
 !
NULL
)

	)

158 
	#ALTQ_ENQUEUE
(
ifq
, 
m
, 
∑
, 
îr
) \

159 (
îr
Ë(*(
ifq
)->
Ætq_íqueue
)((ifq),(
m
),(
∑
))

	)

160 
	#ALTQ_DEQUEUE
(
ifq
, 
m
) \

161 (
m
Ë(*(
ifq
)->
Ætq_dequeue
)((ifq), 
ALTDQ_REMOVE
)

	)

162 
	#ALTQ_POLL
(
ifq
, 
m
) \

163 (
m
Ë(*(
ifq
)->
Ætq_dequeue
)((ifq), 
ALTDQ_POLL
)

	)

164 
	#ALTQ_PURGE
(
ifq
) \

165 ()(*(
ifq
)->
Ætq_ªque°
)((ifq), 
ALTRQ_PURGE
, (*)0)

	)

166 
	#ALTQ_IS_EMPTY
(
ifq
Ë((ifq)->
ifq_Àn
 =0)

	)

167 
	#TBR_IS_ENABLED
(
ifq
Ë((ifq)->
Ætq_tbr
 !
NULL
)

	)

169 
Ætq_©èch
(
iÁ…q
 *, , *,

170 (*)(
iÁ…q
 *, 
mbuf
 *,

171 
Ætq_pkèâr
 *),

172 
mbuf
 *(*)(
iÁ…q
 *, ),

173 (*)(
iÁ…q
 *, , *),

175 *(*)(*, 
mbuf
 *, ));

176 
	`Ætq_dëach
(
iÁ…q
 *);

177 
	`Ætq_íabÀ
(
iÁ…q
 *);

178 
	`Ætq_dißbÀ
(
iÁ…q
 *);

179 
mbuf
 *(*
tbr_dequeue_±r
)(
iÁ…q
 *, );

180 (*
Ætq_öput
)(
mbuf
 *, );

182 
	`Ætq_ëhî˛assify
(
iÁ…q
 *, 
mbuf
 *, 
Ætq_pkèâr
 *);

	@/usr/include/net/ifq.h

35 #i‚def 
_NET_IFQ_H_


36 
	#_NET_IFQ_H_


	)

38 #ifde‡
_KERNEL


39 
	~<sys/mbuf.h
>

40 
	~<sys/buf_rög.h
>

41 
	~<√t/v√t.h
>

43 
	~<sys/lock.h
>

44 
	~<sys/muãx.h
>

50 
	#IF_DUNIT_NONE
 -1

	)

52 
	~<√t/Ætq/if_Ætq.h
>

57 
	sifqueue
 {

58 
mbuf
 *
	mifq_hód
;

59 
mbuf
 *
	mifq_èû
;

60 
	mifq_Àn
;

61 
	mifq_maxÀn
;

62 
mtx
 
	mifq_mtx
;

65 #ifde‡
_KERNEL


72 
	#IF_LOCK
(
ifq
Ë
	`mtx_lock
(&(ifq)->
ifq_mtx
)

	)

73 
	#IF_UNLOCK
(
ifq
Ë
	`mtx_u∆ock
(&(ifq)->
ifq_mtx
)

	)

74 
	#IF_LOCK_ASSERT
(
ifq
Ë
	`mtx_as£π
(&(ifq)->
ifq_mtx
, 
MA_OWNED
)

	)

75 
	#_IF_QFULL
(
ifq
Ë((ifq)->
ifq_Àn
 >(ifq)->
ifq_maxÀn
)

	)

76 
	#_IF_QLEN
(
ifq
Ë((ifq)->
ifq_Àn
)

	)

78 
	#_IF_ENQUEUE
(
ifq
, 
m
) do { \

79 (
m
)->
m_√xçkt
 = 
NULL
; \

80 i‡((
ifq
)->
ifq_èû
 =
NULL
) \

81 (
ifq
)->
ifq_hód
 = 
m
; \

83 (
ifq
)->
ifq_èû
->
m_√xçkt
 = 
m
; \

84 (
ifq
)->
ifq_èû
 = 
m
; \

85 (
ifq
)->
ifq_Àn
++; \

86 } 0)

	)

88 
	#IF_ENQUEUE
(
ifq
, 
m
) do { \

89 
	`IF_LOCK
(
ifq
); \

90 
	`_IF_ENQUEUE
(
ifq
, 
m
); \

91 
	`IF_UNLOCK
(
ifq
); \

92 } 0)

	)

94 
	#_IF_PREPEND
(
ifq
, 
m
) do { \

95 (
m
)->
m_√xçkt
 = (
ifq
)->
ifq_hód
; \

96 i‡((
ifq
)->
ifq_èû
 =
NULL
) \

97 (
ifq
)->
ifq_èû
 = (
m
); \

98 (
ifq
)->
ifq_hód
 = (
m
); \

99 (
ifq
)->
ifq_Àn
++; \

100 } 0)

	)

102 
	#IF_PREPEND
(
ifq
, 
m
) do { \

103 
	`IF_LOCK
(
ifq
); \

104 
	`_IF_PREPEND
(
ifq
, 
m
); \

105 
	`IF_UNLOCK
(
ifq
); \

106 } 0)

	)

108 
	#_IF_DEQUEUE
(
ifq
, 
m
) do { \

109 (
m
Ë(
ifq
)->
ifq_hód
; \

110 i‡(
m
) { \

111 i‡(((
ifq
)->
ifq_hód
 = (
m
)->
m_√xçkt
Ë=
NULL
) \

112 (
ifq
)->
ifq_èû
 = 
NULL
; \

113 (
m
)->
m_√xçkt
 = 
NULL
; \

114 (
ifq
)->
ifq_Àn
--; \

116 } 0)

	)

118 
	#IF_DEQUEUE
(
ifq
, 
m
) do { \

119 
	`IF_LOCK
(
ifq
); \

120 
	`_IF_DEQUEUE
(
ifq
, 
m
); \

121 
	`IF_UNLOCK
(
ifq
); \

122 } 0)

	)

124 
	#_IF_DEQUEUE_ALL
(
ifq
, 
m
) do { \

125 (
m
Ë(
ifq
)->
ifq_hód
; \

126 (
ifq
)->
ifq_hód
 = (ifq)->
ifq_èû
 = 
NULL
; \

127 (
ifq
)->
ifq_Àn
 = 0; \

128 } 0)

	)

130 
	#IF_DEQUEUE_ALL
(
ifq
, 
m
) do { \

131 
	`IF_LOCK
(
ifq
); \

132 
	`_IF_DEQUEUE_ALL
(
ifq
, 
m
); \

133 
	`IF_UNLOCK
(
ifq
); \

134 } 0)

	)

136 
	#_IF_POLL
(
ifq
, 
m
Ë((mË(ifq)->
ifq_hód
)

	)

137 
	#IF_POLL
(
ifq
, 
m
Ë
	`_IF_POLL
(ifq, m)

	)

139 
	#_IF_DRAIN
(
ifq
) do { \

140 
mbuf
 *
m
; \

142 
	`_IF_DEQUEUE
(
ifq
, 
m
); \

143 i‡(
m
 =
NULL
) \

145 
	`m_‰ìm
(
m
); \

147 } 0)

	)

149 
	#IF_DRAIN
(
ifq
) do { \

150 
	`IF_LOCK
(
ifq
); \

151 
	`_IF_DRAIN
(
ifq
); \

152 
	`IF_UNLOCK
(
ifq
); \

153 } 0)

	)

155 
if_h™doff
(
ifqueue
 *
ifq
, 
mbuf
 *
m
, 
i‚ë
 *
iÂ
,

156 
adju°
);

157 
	#IF_HANDOFF
(
ifq
, 
m
, 
iÂ
) \

158 
	`if_h™doff
((
ifqueue
 *)
ifq
, 
m
, 
iÂ
, 0)

	)

159 
	#IF_HANDOFF_ADJ
(
ifq
, 
m
, 
iÂ
, 
adj
) \

160 
	`if_h™doff
((
ifqueue
 *)
ifq
, 
m
, 
iÂ
, 
adj
)

	)

162 
if_°¨t
(
i‚ë
 *);

164 
	#IFQ_ENQUEUE
(
ifq
, 
m
, 
îr
) \

166 
	`IF_LOCK
(
ifq
); \

167 i‡(
	`ALTQ_IS_ENABLED
(
ifq
)) \

168 
	`ALTQ_ENQUEUE
(
ifq
, 
m
, 
NULL
, 
îr
); \

170 i‡(
	`_IF_QFULL
(
ifq
)) { \

171 
	`m_‰ìm
(
m
); \

172 (
îr
Ë
ENOBUFS
; \

174 
	`_IF_ENQUEUE
(
ifq
, 
m
); \

175 (
îr
) = 0; \

178 
	`IF_UNLOCK
(
ifq
); \

179 } 0)

	)

181 
	#IFQ_DEQUEUE_NOLOCK
(
ifq
, 
m
) \

183 i‡(
	`TBR_IS_ENABLED
(
ifq
)) \

184 (
m
Ë
	`tbr_dequeue_±r
(
ifq
, 
ALTDQ_REMOVE
); \

185 i‡(
	`ALTQ_IS_ENABLED
(
ifq
)) \

186 
	`ALTQ_DEQUEUE
(
ifq
, 
m
); \

188 
	`_IF_DEQUEUE
(
ifq
, 
m
); \

189 } 0)

	)

191 
	#IFQ_DEQUEUE
(
ifq
, 
m
) \

193 
	`IF_LOCK
(
ifq
); \

194 
	`IFQ_DEQUEUE_NOLOCK
(
ifq
, 
m
); \

195 
	`IF_UNLOCK
(
ifq
); \

196 } 0)

	)

198 
	#IFQ_POLL_NOLOCK
(
ifq
, 
m
) \

200 i‡(
	`TBR_IS_ENABLED
(
ifq
)) \

201 (
m
Ë
	`tbr_dequeue_±r
(
ifq
, 
ALTDQ_POLL
); \

202 i‡(
	`ALTQ_IS_ENABLED
(
ifq
)) \

203 
	`ALTQ_POLL
(
ifq
, 
m
); \

205 
	`_IF_POLL
(
ifq
, 
m
); \

206 } 0)

	)

208 
	#IFQ_POLL
(
ifq
, 
m
) \

210 
	`IF_LOCK
(
ifq
); \

211 
	`IFQ_POLL_NOLOCK
(
ifq
, 
m
); \

212 
	`IF_UNLOCK
(
ifq
); \

213 } 0)

	)

215 
	#IFQ_PURGE_NOLOCK
(
ifq
) \

217 i‡(
	`ALTQ_IS_ENABLED
(
ifq
)) { \

218 
	`ALTQ_PURGE
(
ifq
); \

220 
	`_IF_DRAIN
(
ifq
); \

221 } 0)

	)

223 
	#IFQ_PURGE
(
ifq
) \

225 
	`IF_LOCK
(
ifq
); \

226 
	`IFQ_PURGE_NOLOCK
(
ifq
); \

227 
	`IF_UNLOCK
(
ifq
); \

228 } 0)

	)

230 
	#IFQ_SET_READY
(
ifq
) \

231 dÿ{ ((
ifq
)->
Ætq_Êags
 |
ALTQF_READY
); } 0)

	)

233 
	#IFQ_LOCK
(
ifq
Ë
	`IF_LOCK
(ifq)

	)

234 
	#IFQ_UNLOCK
(
ifq
Ë
	`IF_UNLOCK
(ifq)

	)

235 
	#IFQ_LOCK_ASSERT
(
ifq
Ë
	`IF_LOCK_ASSERT
(ifq)

	)

236 
	#IFQ_IS_EMPTY
(
ifq
Ë((ifq)->
ifq_Àn
 =0)

	)

237 
	#IFQ_INC_LEN
(
ifq
Ë((ifq)->
ifq_Àn
++)

	)

238 
	#IFQ_DEC_LEN
(
ifq
Ë(--(ifq)->
ifq_Àn
)

	)

239 
	#IFQ_SET_MAXLEN
(
ifq
, 
Àn
Ë((ifq)->
ifq_maxÀn
 = (Àn))

	)

245 
	#IFQ_HANDOFF_ADJ
(
iÂ
, 
m
, 
adj
, 
îr
) \

247 
Àn
; \

248 
mÊags
; \

250 
Àn
 = (
m
)->
m_pkthdr
.len; \

251 
mÊags
 = (
m
)->
m_Êags
; \

252 
	`IFQ_ENQUEUE
(&(
iÂ
)->
if_¢d
, 
m
, 
îr
); \

253 i‡((
îr
) == 0) { \

254 
	`if_öc_cou¡î
((
iÂ
), 
IFCOUNTER_OBYTES
, 
Àn
 + (
adj
)); \

255 i‡(
mÊags
 & 
M_MCAST
) \

256 
	`if_öc_cou¡î
((
iÂ
), 
IFCOUNTER_OMCASTS
, 1); \

257 i‡(((
iÂ
)->
if_drv_Êags
 & 
IFF_DRV_OACTIVE
) == 0) \

258 
	`if_°¨t
(
iÂ
); \

260 
	`if_öc_cou¡î
((
iÂ
), 
IFCOUNTER_OQDROPS
, 1); \

261 } 0)

	)

263 
	#IFQ_HANDOFF
(
iÂ
, 
m
, 
îr
) \

264 
	`IFQ_HANDOFF_ADJ
(
iÂ
, 
m
, 0, 
îr
)

	)

266 
	#IFQ_DRV_DEQUEUE
(
ifq
, 
m
) \

268 (
m
Ë(
ifq
)->
ifq_drv_hód
; \

269 i‡(
m
) { \

270 i‡(((
ifq
)->
ifq_drv_hód
 = (
m
)->
m_√xçkt
Ë=
NULL
) \

271 (
ifq
)->
ifq_drv_èû
 = 
NULL
; \

272 (
m
)->
m_√xçkt
 = 
NULL
; \

273 (
ifq
)->
ifq_drv_Àn
--; \

275 
	`IFQ_LOCK
(
ifq
); \

276 
	`IFQ_DEQUEUE_NOLOCK
(
ifq
, 
m
); \

277 (
ifq
)->
ifq_drv_Àn
 < (ifq)->
ifq_drv_maxÀn
) { \

278 
mbuf
 *
m0
; \

279 
	`IFQ_DEQUEUE_NOLOCK
(
ifq
, 
m0
); \

280 i‡(
m0
 =
NULL
) \

282 
m0
->
m_√xçkt
 = 
NULL
; \

283 i‡((
ifq
)->
ifq_drv_èû
 =
NULL
) \

284 (
ifq
)->
ifq_drv_hód
 = 
m0
; \

286 (
ifq
)->
ifq_drv_èû
->
m_√xçkt
 = 
m0
; \

287 (
ifq
)->
ifq_drv_èû
 = 
m0
; \

288 (
ifq
)->
ifq_drv_Àn
++; \

290 
	`IFQ_UNLOCK
(
ifq
); \

292 } 0)

	)

294 
	#IFQ_DRV_PREPEND
(
ifq
, 
m
) \

296 (
m
)->
m_√xçkt
 = (
ifq
)->
ifq_drv_hód
; \

297 i‡((
ifq
)->
ifq_drv_èû
 =
NULL
) \

298 (
ifq
)->
ifq_drv_èû
 = (
m
); \

299 (
ifq
)->
ifq_drv_hód
 = (
m
); \

300 (
ifq
)->
ifq_drv_Àn
++; \

301 } 0)

	)

303 
	#IFQ_DRV_IS_EMPTY
(
ifq
) \

304 (((
ifq
)->
ifq_drv_Àn
 =0Ë&& ((ifq)->
ifq_Àn
 =0))

	)

306 
	#IFQ_DRV_PURGE
(
ifq
) \

308 
mbuf
 *
m
, *
n
 = (
ifq
)->
ifq_drv_hód
; \

309 (
m
 = 
n
Ë!
NULL
) { \

310 
n
 = 
m
->
m_√xçkt
; \

311 
	`m_‰ìm
(
m
); \

313 (
ifq
)->
ifq_drv_hód
 = (ifq)->
ifq_drv_èû
 = 
NULL
; \

314 (
ifq
)->
ifq_drv_Àn
 = 0; \

315 
	`IFQ_PURGE
(
ifq
); \

316 } 0)

	)

318 
__ölöe
 

319 
	$drbr_íqueue
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
, 
mbuf
 *
m
)

321 
îr‹
 = 0;

323 #ifde‡
ALTQ


324 i‡(
	`ALTQ_IS_ENABLED
(&
iÂ
->
if_¢d
)) {

325 
	`IFQ_ENQUEUE
(&
iÂ
->
if_¢d
, 
m
, 
îr‹
);

326 i‡(
îr‹
)

327 
	`if_öc_cou¡î
((
iÂ
), 
IFCOUNTER_OQDROPS
, 1);

328  (
îr‹
);

331 
îr‹
 = 
	`buf_rög_íqueue
(
br
, 
m
);

332 i‡(
îr‹
)

333 
	`m_‰ìm
(
m
);

335  (
îr‹
);

336 
	}
}

338 
__ölöe
 

339 
	$drbr_putback
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
, 
mbuf
 *
√w
)

345 #ifde‡
ALTQ


346 i‡(
iÂ
 !
NULL
 && 
	`ALTQ_IS_ENABLED
(&iÂ->
if_¢d
)) {

351 
	`IFQ_DRV_PREPEND
(&
iÂ
->
if_¢d
, 
√w
);

355 
	`buf_rög_putback_sc
(
br
, 
√w
);

356 
	}
}

358 
__ölöe
 
mbuf
 *

359 
	$drbr_≥ek
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
)

361 #ifde‡
ALTQ


362 
mbuf
 *
m
;

363 i‡(
iÂ
 !
NULL
 && 
	`ALTQ_IS_ENABLED
(&iÂ->
if_¢d
)) {

370 
	`IFQ_DEQUEUE
(&
iÂ
->
if_¢d
, 
m
);

371  (
m
);

374 (
	`buf_rög_≥ek_˛ór_sc
(
br
));

375 
	}
}

377 
__ölöe
 

378 
	$drbr_Êush
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
)

380 
mbuf
 *
m
;

382 #ifde‡
ALTQ


383 i‡(
iÂ
 !
NULL
 && 
	`ALTQ_IS_ENABLED
(&iÂ->
if_¢d
))

384 
	`IFQ_PURGE
(&
iÂ
->
if_¢d
);

386 (
m
 = 
	`buf_rög_dequeue_sc
(
br
)Ë!
NULL
)

387 
	`m_‰ìm
(
m
);

388 
	}
}

390 
__ölöe
 

391 
	$drbr_‰ì
(
buf_rög
 *
br
, 
mÆloc_ty≥
 *
ty≥
)

394 
	`drbr_Êush
(
NULL
, 
br
);

395 
	`buf_rög_‰ì
(
br
, 
ty≥
);

396 
	}
}

398 
__ölöe
 
mbuf
 *

399 
	$drbr_dequeue
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
)

401 #ifde‡
ALTQ


402 
mbuf
 *
m
;

404 i‡(
iÂ
 !
NULL
 && 
	`ALTQ_IS_ENABLED
(&iÂ->
if_¢d
)) {

405 
	`IFQ_DEQUEUE
(&
iÂ
->
if_¢d
, 
m
);

406  (
m
);

409  (
	`buf_rög_dequeue_sc
(
br
));

410 
	}
}

412 
__ölöe
 

413 
	$drbr_adv™˚
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
)

415 #ifde‡
ALTQ


417 i‡(
iÂ
 !
NULL
 && 
	`ALTQ_IS_ENABLED
(&iÂ->
if_¢d
))

420  (
	`buf_rög_adv™˚_sc
(
br
));

421 
	}
}

424 
__ölöe
 
mbuf
 *

425 
drbr_dequeue_c⁄d
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
,

426 (*
func
Ë(
mbuf
 *, *), *
¨g
)

428 
mbuf
 *
m
;

429 #ifde‡
ALTQ


430 i‡(
	`ALTQ_IS_ENABLED
(&
iÂ
->
if_¢d
)) {

431 
	`IFQ_LOCK
(&
iÂ
->
if_¢d
);

432 
	`IFQ_POLL_NOLOCK
(&
iÂ
->
if_¢d
, 
m
);

433 i‡(
m
 !
NULL
 && 
	`func
(m, 
¨g
) == 0) {

434 
	`IFQ_UNLOCK
(&
iÂ
->
if_¢d
);

435  (
NULL
);

437 
	`IFQ_DEQUEUE_NOLOCK
(&
iÂ
->
if_¢d
, 
m
);

438 
	`IFQ_UNLOCK
(&
iÂ
->
if_¢d
);

439  (
m
);

442 
m
 = 
	`buf_rög_≥ek
(
br
);

443 i‡(
m
 =
NULL
 || 
	`func
(m, 
¨g
) == 0)

444  (
NULL
);

446  (
	`buf_rög_dequeue_sc
(
br
));

447 
	}
}

449 
__ölöe
 

450 
	$drbr_em±y
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
)

452 #ifde‡
ALTQ


453 i‡(
	`ALTQ_IS_ENABLED
(&
iÂ
->
if_¢d
))

454  (
	`IFQ_IS_EMPTY
(&
iÂ
->
if_¢d
));

456  (
	`buf_rög_em±y
(
br
));

457 
	}
}

459 
__ölöe
 

460 
	$drbr_√eds_íqueue
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
)

462 #ifde‡
ALTQ


463 i‡(
	`ALTQ_IS_ENABLED
(&
iÂ
->
if_¢d
))

466  (!
	`buf_rög_em±y
(
br
));

467 
	}
}

469 
__ölöe
 

470 
	$drbr_öu£
(
i‚ë
 *
iÂ
, 
buf_rög
 *
br
)

472 #ifde‡
ALTQ


473 i‡(
	`ALTQ_IS_ENABLED
(&
iÂ
->
if_¢d
))

474  (
iÂ
->
if_¢d
.
ifq_Àn
);

476  (
	`buf_rög_cou¡
(
br
));

477 
	}
}

479 
ifqmaxÀn
;

481 
if_qÊush
(
i‚ë
 *);

482 
ifq_öô
(
iÁ…q
 *, 
i‚ë
 *
iÂ
);

483 
ifq_dñëe
(
iÁ…q
 *);

	@/usr/include/net/vnet.h

59 #i‚de‡
_NET_VNET_H_


60 
	#_NET_VNET_H_


	)

67 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_VNET
)

68 
	~<sys/queue.h
>

70 
	sv√t
 {

71 
LIST_ENTRY
(
v√t
Ë
	mv√t_À
;

72 
u_öt
 
	mv√t_magic_n
;

73 
u_öt
 
	mv√t_if˙t
;

74 
u_öt
 
	mv√t_sock˙t
;

75 
u_öt
 
	mv√t_°©e
;

76 *
	mv√t_d©a_mem
;

77 
uöçå_t
 
	mv√t_d©a_ba£
;

79 
	#VNET_MAGIC_N
 0x3e0d8f29

	)

85 
	#VNET_SETNAME
 "£t_v√t"

	)

86 
	#VNET_SYMPREFIX
 "v√t_íåy_"

	)

89 #ifde‡
_KERNEL


91 
	#VNET_PCPUSTAT_DECLARE
(
ty≥
, 
«me
) \

92 
	`VNET_DECLARE
(
cou¡î_u64_t
, 
«me
[(
ty≥
Ë/ (
uöt64_t
)])

	)

94 
	#VNET_PCPUSTAT_DEFINE
(
ty≥
, 
«me
) \

95 
	`VNET_DEFINE
(
cou¡î_u64_t
, 
«me
[(
ty≥
Ë/ (
uöt64_t
)])

	)

96 
	#VNET_PCPUSTAT_DEFINE_STATIC
(
ty≥
, 
«me
) \

97 
	`VNET_DEFINE_STATIC
(
cou¡î_u64_t
, 
«me
[(
ty≥
Ë/ (
uöt64_t
)])

	)

99 
	#VNET_PCPUSTAT_ALLOC
(
«me
, 
waô
) \

100 
	`COUNTER_ARRAY_ALLOC
(
	`VNET
(
«me
), \

101 (
	`VNET
(
«me
)Ë/ (
cou¡î_u64_t
), (
waô
))

	)

103 
	#VNET_PCPUSTAT_FREE
(
«me
) \

104 
	`COUNTER_ARRAY_FREE
(
	`VNET
(
«me
), (VNET“ame)Ë/ (
cou¡î_u64_t
))

	)

106 
	#VNET_PCPUSTAT_ADD
(
ty≥
, 
«me
, 
f
, 
v
) \

107 
	`cou¡î_u64_add
(
	`VNET
(
«me
)[
	`off£tof
(
ty≥
, 
f
Ë/ (
uöt64_t
)], (
v
))

	)

109 
	#VNET_PCPUSTAT_FETCH
(
ty≥
, 
«me
, 
f
) \

110 
	`cou¡î_u64_„tch
(
	`VNET
(
«me
)[
	`off£tof
(
ty≥
, 
f
Ë/ (
uöt64_t
)])

	)

112 
	#VNET_PCPUSTAT_SYSINIT
(
«me
) \

114 
v√t_
##
«me
##
	`_öô
(c⁄° *
unu£d
) \

116 
	`VNET_PCPUSTAT_ALLOC
(
«me
, 
M_WAITOK
); \

118 
	`VNET_SYSINIT
(
v√t_
 ## 
«me
 ## 
_öô
, 
SI_SUB_INIT_IF
, \

119 
SI_ORDER_FIRST
, 
v√t_
 ## 
«me
 ## 
_öô
, 
NULL
)

	)

121 
	#VNET_PCPUSTAT_SYSUNINIT
(
«me
) \

123 
v√t_
##
«me
##
	`_unöô
(c⁄° *
unu£d
) \

125 
	`VNET_PCPUSTAT_FREE
(
«me
); \

127 
	`VNET_SYSUNINIT
(
v√t_
 ## 
«me
 ## 
_unöô
, 
SI_SUB_INIT_IF
, \

128 
SI_ORDER_FIRST
, 
v√t_
 ## 
«me
 ## 
_unöô
, 
NULL
)

	)

130 #ifde‡
SYSCTL_OID


131 
	#SYSCTL_VNET_PCPUSTAT
(
∑ª¡
, 
nbr
, 
«me
, 
ty≥
, 
¨øy
, 
desc
) \

133 
¨øy
##
	`_sys˘l
(
SYSCTL_HANDLER_ARGS
) \

135 
ty≥
 
s
; \

136 
	`CTASSERT
(((
ty≥
Ë/ (
uöt64_t
)) == \

137 ((
	`VNET
(
¨øy
)Ë/ (
cou¡î_u64_t
))); \

138 
	`COUNTER_ARRAY_COPY
(
	`VNET
(
¨øy
), &
s
, (
ty≥
Ë/ (
uöt64_t
));\

139 i‡(
ªq
->
√w±r
) \

140 
	`COUNTER_ARRAY_ZERO
(
	`VNET
(
¨øy
), \

141 (
ty≥
Ë/ (
uöt64_t
)); \

142  (
	`SYSCTL_OUT
(
ªq
, &
s
, (
ty≥
))); \

144 
	`SYSCTL_PROC
(
∑ª¡
, 
nbr
, 
«me
, 
CTLFLAG_VNET
 | 
CTLTYPE_OPAQUE
 | 
CTLFLAG_RW
, \

145 
NULL
, 0, 
¨øy
 ## 
_sys˘l
, "I", 
desc
)

	)

148 #ifde‡
VIMAGE


149 
	~<sys/lock.h
>

150 
	~<sys/¥oc.h
>

151 
	~<sys/rwlock.h
>

152 
	~<sys/sx.h
>

157 
uöçå_t
 *
__°¨t_£t_v√t
;

158 
__GLOBL
(
__°¨t_£t_v√t
);

159 
uöçå_t
 *
__°›_£t_v√t
;

160 
__GLOBL
(
__°›_£t_v√t
);

162 
	#VNET_START
 (
uöçå_t
)&
__°¨t_£t_v√t


	)

163 
	#VNET_STOP
 (
uöçå_t
)&
__°›_£t_v√t


	)

168 
v√t
 *
v√t_Æloc
();

169 
v√t_de°roy
(
v√t
 *vnet);

175 
	#curv√t
 
cuπhªad
->
td_v√t


	)

181 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
VNET_DEBUG
)

182 
	#VNET_ASSERT
(
exp
, 
msg
) do { \

183 i‡(!(
exp
)) \

184 
∑nic
 
msg
; \

185 } 0)

	)

187 
	#VNET_ASSERT
(
exp
, 
msg
) do { \

188 } 0)

	)

191 #ifde‡
VNET_DEBUG


192 
v√t_log_ªcursi⁄
(
v√t
 *, const *, );

194 
	#CURVNET_SET_QUIET
(
¨g
) \

195 
	`VNET_ASSERT
((
¨g
Ë!
NULL
 && (¨g)->
v√t_magic_n
 =
VNET_MAGIC_N
, \

197 
__FILE__
, 
__LINE__
, 
__func__
, 
curv√t
, (
¨g
))); \

198 
v√t
 *
ßved_v√t
 = 
curv√t
; \

199 c⁄° *
ßved_v√t_Õush
 = 
cuπhªad
->
td_v√t_Õush
; \

200 
curv√t
 = 
¨g
; \

201 
cuπhªad
->
td_v√t_Õush
 = 
__func__
;

	)

203 
	#CURVNET_SET_VERBOSE
(
¨g
) \

204 
	`CURVNET_SET_QUIET
(
¨g
) \

205 i‡(
ßved_v√t
) \

206 
	`v√t_log_ªcursi⁄
(
ßved_v√t
, 
ßved_v√t_Õush
, 
__LINE__
);

	)

208 
	#CURVNET_SET
(
¨g
Ë
	`CURVNET_SET_VERBOSE
◊rg)

	)

210 
	#CURVNET_RESTORE
() \

211 
	`VNET_ASSERT
(
curv√t
 !
NULL
 && (
ßved_v√t
 == NULL || \

212 
ßved_v√t
->
v√t_magic_n
 =
VNET_MAGIC_N
), \

214 
__FILE__
, 
__LINE__
, 
__func__
, 
curv√t
, 
ßved_v√t
)); \

215 
curv√t
 = 
ßved_v√t
; \

216 
cuπhªad
->
td_v√t_Õush
 = 
ßved_v√t_Õush
;

	)

219 
	#CURVNET_SET_QUIET
(
¨g
) \

220 
	`VNET_ASSERT
((
¨g
Ë!
NULL
 && (¨g)->
v√t_magic_n
 =
VNET_MAGIC_N
, \

222 
__FILE__
, 
__LINE__
, 
__func__
, 
curv√t
, (
¨g
))); \

223 
v√t
 *
ßved_v√t
 = 
curv√t
; \

224 
curv√t
 = 
¨g
;

	)

226 
	#CURVNET_SET_VERBOSE
(
¨g
) \

227 
	`CURVNET_SET_QUIET
(
¨g
)

	)

229 
	#CURVNET_SET
(
¨g
Ë
	`CURVNET_SET_VERBOSE
◊rg)

	)

231 
	#CURVNET_RESTORE
() \

232 
	`VNET_ASSERT
(
curv√t
 !
NULL
 && (
ßved_v√t
 == NULL || \

233 
ßved_v√t
->
v√t_magic_n
 =
VNET_MAGIC_N
), \

235 
__FILE__
, 
__LINE__
, 
__func__
, 
curv√t
, 
ßved_v√t
)); \

236 
curv√t
 = 
ßved_v√t
;

	)

239 
v√t
 *
v√t0
;

240 
	#IS_DEFAULT_VNET
(
¨g
Ë(◊rgË=
v√t0
)

	)

242 
	#CRED_TO_VNET
(
¸
Ë(¸)->
¸_¥is⁄
->
¥_v√t


	)

243 
	#TD_TO_VNET
(
td
Ë
	`CRED_TO_VNET
(—d)->
td_u¸ed
)

	)

244 
	#P_TO_VNET
(
p
Ë
	`CRED_TO_VNET
(’)->
p_u¸ed
)

	)

251 
LIST_HEAD
(
v√t_li°_hód
, 
v√t
);

252 
v√t_li°_hód
 
v√t_hód
;

253 
rwlock
 
v√t_rwlock
;

254 
sx
 
v√t_sxlock
;

256 
	#VNET_LIST_RLOCK
(Ë
	`sx_¶ock
(&
v√t_sxlock
)

	)

257 
	#VNET_LIST_RLOCK_NOSLEEP
(Ë
	`rw_æock
(&
v√t_rwlock
)

	)

258 
	#VNET_LIST_RUNLOCK
(Ë
	`sx_su∆ock
(&
v√t_sxlock
)

	)

259 
	#VNET_LIST_RUNLOCK_NOSLEEP
(Ë
	`rw_ru∆ock
(&
v√t_rwlock
)

	)

264 
	#VNET_ITERATOR_DECL
(
¨g
Ë
v√t
 *
	)
arg

265 
	#VNET_FOREACH
(
¨g
Ë
	`LIST_FOREACH
(◊rg), &
v√t_hód
, 
v√t_À
)

	)

271 
	#VNET_NAME
(
n
Ë
v√t_íåy_
##
	)
n

272 
	#VNET_DECLARE
(
t
, 
n
Ëà
	`VNET_NAME
“)

	)

274 
	#VNET_DEFINE
(
t
, 
n
) \

275 
_hack
; 
t
 
	`VNET_NAME
(
n
Ë
	`__£˘i⁄
(
VNET_SETNAME
Ë
__u£d


	)

276 #i‡
deföed
(
KLD_MODULE
Ë&& (deföed(
__Ørch64__
Ë|| deföed(
__riscv
))

281 
	#VNET_DEFINE_STATIC
(
t
, 
n
) \

282 
t
 
	`VNET_NAME
(
n
Ë
	`__£˘i⁄
(
VNET_SETNAME
Ë
__u£d


	)

284 
	#VNET_DEFINE_STATIC
(
t
, 
n
) \

285 
t
 
	`VNET_NAME
(
n
Ë
	`__£˘i⁄
(
VNET_SETNAME
Ë
__u£d


	)

287 
	#_VNET_PTR
(
b
, 
n
Ë(
	`__ty≥of
(
	`VNET_NAME
(n))*) \

288 ((
b
Ë+ (
uöçå_t
)&
	`VNET_NAME
(
n
))

	)

290 
	#_VNET
(
b
, 
n
Ë(*
	`_VNET_PTR
(b,Ç))

	)

295 
	#VNET_VNET_PTR
(
v√t
, 
n
Ë
	`_VNET_PTR
((v√t)->
v√t_d©a_ba£
,Ç)

	)

296 
	#VNET_VNET
(
v√t
, 
n
Ë(*
	`VNET_VNET_PTR
((v√t),Ç))

	)

298 
	#VNET_PTR
(
n
Ë
	`VNET_VNET_PTR
(
curv√t
,Ç)

	)

299 
	#VNET
(
n
Ë
	`VNET_VNET
(
curv√t
,Ç)

	)

304 *
v√t_d©a_Æloc
(
size
);

305 
v√t_d©a_c›y
(*
°¨t
, 
size
);

306 
v√t_d©a_‰ì
(*
°¨t_¨g
, 
size
);

313 
	~<sys/kî√l.h
>

319 
	sv√t_sysöô
 {

320 
sysöô_sub_id
 
	msubsy°em
;

321 
sysöô_ñem_‹dî
 
	m‹dî
;

322 
sysöô_cfunc_t
 
	mfunc
;

323 c⁄° *
	m¨g
;

324 
TAILQ_ENTRY
(
v√t_sysöô
Ë
	mlök
;

327 
	#VNET_SYSINIT
(
idít
, 
subsy°em
, 
‹dî
, 
func
, 
¨g
) \

328 
v√t_sysöô
 
idít
 ## 
_v√t_öô
 = { \

329 
subsy°em
, \

330 
‹dî
, \

331 (
sysöô_cfunc_t
)(
sysöô_nfunc_t
)
func
, \

332 (
¨g
) \

334 
	`SYSINIT
(
v√t_öô_
 ## 
idít
, 
subsy°em
, 
‹dî
, \

335 
v√t_ªgi°î_sysöô
, &
idít
 ## 
_v√t_öô
); \

336 
	`SYSUNINIT
(
v√t_öô_
 ## 
idít
, 
subsy°em
, 
‹dî
, \

337 
v√t_dîegi°î_sysöô
, &
idít
 ## 
_v√t_öô
)

	)

339 
	#VNET_SYSUNINIT
(
idít
, 
subsy°em
, 
‹dî
, 
func
, 
¨g
) \

340 
v√t_sysöô
 
idít
 ## 
_v√t_unöô
 = { \

341 
subsy°em
, \

342 
‹dî
, \

343 (
sysöô_cfunc_t
)(
sysöô_nfunc_t
)
func
, \

344 (
¨g
) \

346 
	`SYSINIT
(
v√t_unöô_
 ## 
idít
, 
subsy°em
, 
‹dî
, \

347 
v√t_ªgi°î_sysunöô
, &
idít
 ## 
_v√t_unöô
); \

348 
	`SYSUNINIT
(
v√t_unöô_
 ## 
idít
, 
subsy°em
, 
‹dî
, \

349 
v√t_dîegi°î_sysunöô
, &
idít
 ## 
_v√t_unöô
)

	)

354 
v√t_sysöô
();

355 
v√t_sysunöô
();

360 
v√t_ªgi°î_sysöô
(*
¨g
);

361 
v√t_ªgi°î_sysunöô
(*
¨g
);

362 
v√t_dîegi°î_sysöô
(*
¨g
);

363 
v√t_dîegi°î_sysunöô
(*
¨g
);

368 
	~<sys/evíth™dÀr.h
>

370 
v√t_globÆ_evíth™dÀr_ôî©‹_func
(*, ...);

371 
	#VNET_GLOBAL_EVENTHANDLER_REGISTER_TAG
(
èg
, 
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

373 i‡(
	`IS_DEFAULT_VNET
(
curv√t
)) { \

374 (
èg
Ë
	`vimage_evíth™dÀr_ªgi°î
(
NULL
, #«me, 
func
, \

375 
¨g
, 
¥i‹ôy
, \

376 
v√t_globÆ_evíth™dÀr_ôî©‹_func
); \

378 } 0)

	)

379 
	#VNET_GLOBAL_EVENTHANDLER_REGISTER
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

381 i‡(
	`IS_DEFAULT_VNET
(
curv√t
)) { \

382 
	`vimage_evíth™dÀr_ªgi°î
(
NULL
, #«me, 
func
, \

383 
¨g
, 
¥i‹ôy
, \

384 
v√t_globÆ_evíth™dÀr_ôî©‹_func
); \

386 } 0)

	)

393 
	#curv√t
 
NULL


	)

395 
	#VNET_ASSERT
(
exp
, 
msg
)

	)

396 
	#CURVNET_SET
(
¨g
)

	)

397 
	#CURVNET_SET_QUIET
(
¨g
)

	)

398 
	#CURVNET_RESTORE
()

	)

400 
	#VNET_LIST_RLOCK
()

	)

401 
	#VNET_LIST_RLOCK_NOSLEEP
()

	)

402 
	#VNET_LIST_RUNLOCK
()

	)

403 
	#VNET_LIST_RUNLOCK_NOSLEEP
()

	)

404 
	#VNET_ITERATOR_DECL
(
¨g
)

	)

405 
	#VNET_FOREACH
(
¨g
)

	)

407 
	#IS_DEFAULT_VNET
(
¨g
Ë1

	)

408 
	#CRED_TO_VNET
(
¸
Ë
NULL


	)

409 
	#TD_TO_VNET
(
td
Ë
NULL


	)

410 
	#P_TO_VNET
(
p
Ë
NULL


	)

416 
	#VNET_NAME
(
n
Ë
	)
n

417 
	#VNET_DECLARE
(
t
, 
n
Ëà
	)
n

418 
	#VNET_DEFINE
(
t
, 
n
Ë
_hack
;Å 
	)
n

419 
	#VNET_DEFINE_STATIC
(
t
, 
n
Ëà
	)
n

420 
	#_VNET_PTR
(
b
, 
n
Ë&
	`VNET_NAME
“)

	)

425 
	#VNET_VNET_PTR
(
v√t
, 
n
Ë(&“))

	)

426 
	#VNET_VNET
(
v√t
, 
n
Ë“)

	)

428 
	#VNET_PTR
(
n
Ë(&“))

	)

429 
	#VNET
(
n
Ë“)

	)

435 
	#VNET_SYSINIT
(
idít
, 
subsy°em
, 
‹dî
, 
func
, 
¨g
) \

436 
	`SYSINIT
(
idít
, 
subsy°em
, 
‹dî
, 
func
, 
¨g
)

	)

437 
	#VNET_SYSUNINIT
(
idít
, 
subsy°em
, 
‹dî
, 
func
, 
¨g
) \

438 
	`SYSUNINIT
(
idít
, 
subsy°em
, 
‹dî
, 
func
, 
¨g
)

	)

443 
	#VNET_GLOBAL_EVENTHANDLER_REGISTER_TAG
(
èg
, 
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

444 (
èg
Ë
	`evíth™dÀr_ªgi°î
(
NULL
, #«me, 
func
, 
¨g
, 
¥i‹ôy
)

	)

445 
	#VNET_GLOBAL_EVENTHANDLER_REGISTER
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

446 
	`evíth™dÀr_ªgi°î
(
NULL
, #«me, 
func
, 
¨g
, 
¥i‹ôy
)

	)

	@/usr/include/netinet6/in6.h

66 #i‚de‡
__KAME_NETINET_IN_H_INCLUDED_


70 #i‚de‡
_NETINET6_IN6_H_


71 
	#_NETINET6_IN6_H_


	)

78 
	#__KAME__


	)

79 
	#__KAME_VERSION
 "FªeBSD"

	)

86 #i‡
__BSD_VISIBLE


87 
	#IPV6PORT_RESERVED
 1024

	)

88 
	#IPV6PORT_ANONMIN
 49152

	)

89 
	#IPV6PORT_ANONMAX
 65535

	)

90 
	#IPV6PORT_RESERVEDMIN
 600

	)

91 
	#IPV6PORT_RESERVEDMAX
 (
IPV6PORT_RESERVED
-1)

	)

97 
	sö6_addr
 {

99 
uöt8_t
 
	m__u6_addr8
[16];

100 
uöt16_t
 
	m__u6_addr16
[8];

101 
uöt32_t
 
	m__u6_addr32
[4];

102 } 
	m__u6_addr
;

105 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

106 #ifde‡
_KERNEL


107 
	#s6_addr8
 
__u6_addr
.
__u6_addr8


	)

108 
	#s6_addr16
 
__u6_addr
.
__u6_addr16


	)

109 
	#s6_addr32
 
__u6_addr
.
__u6_addr32


	)

112 
	#INET6_ADDRSTRLEN
 46

	)

121 #i‡
__BSD_VISIBLE


122 
	#SIN6_LEN


	)

125 
	ssockaddr_ö6
 {

126 
uöt8_t
 
	msö6_Àn
;

127 
ß_Ámûy_t
 
	msö6_Ámûy
;

128 
ö_p‹t_t
 
	msö6_p‹t
;

129 
uöt32_t
 
	msö6_Êowöfo
;

130 
ö6_addr
 
	msö6_addr
;

131 
uöt32_t
 
	msö6_sc›e_id
;

137 #ifde‡
_KERNEL


138 
	#IN6MASK0
 {{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}}

	)

139 
	#IN6MASK32
 {{{ 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, \

140 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

141 
	#IN6MASK64
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

142 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

143 
	#IN6MASK96
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

144 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}}

	)

145 
	#IN6MASK128
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

146 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf‡}}}

	)

149 #ifde‡
_KERNEL


150 c⁄° 
sockaddr_ö6
 
ß6_™y
;

152 c⁄° 
ö6_addr
 
ö6mask0
;

153 c⁄° 
ö6_addr
 
ö6mask32
;

154 c⁄° 
ö6_addr
 
ö6mask64
;

155 c⁄° 
ö6_addr
 
ö6mask96
;

156 c⁄° 
ö6_addr
 
ö6mask128
;

162 #ifde‡
_KERNEL


163 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


164 
	#IPV6_ADDR_INT32_ONE
 1

	)

165 
	#IPV6_ADDR_INT32_TWO
 2

	)

166 
	#IPV6_ADDR_INT32_MNL
 0xff010000

	)

167 
	#IPV6_ADDR_INT32_MLL
 0xff020000

	)

168 
	#IPV6_ADDR_INT32_SMP
 0x0000ffff

	)

169 
	#IPV6_ADDR_INT16_ULL
 0x„80

	)

170 
	#IPV6_ADDR_INT16_USL
 0x„c0

	)

171 
	#IPV6_ADDR_INT16_MLL
 0xff02

	)

172 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


173 
	#IPV6_ADDR_INT32_ONE
 0x01000000

	)

174 
	#IPV6_ADDR_INT32_TWO
 0x02000000

	)

175 
	#IPV6_ADDR_INT32_MNL
 0x000001ff

	)

176 
	#IPV6_ADDR_INT32_MLL
 0x000002ff

	)

177 
	#IPV6_ADDR_INT32_SMP
 0xffff0000

	)

178 
	#IPV6_ADDR_INT16_ULL
 0x80„

	)

179 
	#IPV6_ADDR_INT16_USL
 0xc0„

	)

180 
	#IPV6_ADDR_INT16_MLL
 0x02ff

	)

187 #i‡
__BSD_VISIBLE


188 
	#IN6ADDR_ANY_INIT
 \

190 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

191 
	#IN6ADDR_LOOPBACK_INIT
 \

193 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

194 
	#IN6ADDR_NODELOCAL_ALLNODES_INIT
 \

196 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

197 
	#IN6ADDR_INTFACELOCAL_ALLNODES_INIT
 \

199 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

200 
	#IN6ADDR_LINKLOCAL_ALLNODES_INIT
 \

202 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

203 
	#IN6ADDR_LINKLOCAL_ALLROUTERS_INIT
 \

205 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

	)

206 
	#IN6ADDR_LINKLOCAL_ALLV2ROUTERS_INIT
 \

208 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 }}}

	)

211 c⁄° 
ö6_addr
 
ö6addr_™y
;

212 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

213 #i‡
__BSD_VISIBLE


214 c⁄° 
ö6_addr
 
ö6addr_nodñoˇl_Æ odes
;

215 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Æ odes
;

216 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_ÆÃouãrs
;

217 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Ælv2rouãrs
;

226 #ifde‡
_KERNEL


227 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

228 (
	`bcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

230 #i‡
__BSD_VISIBLE


231 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

232 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

239 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

240 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

241 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

242 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

243 (
a
)->
__u6_addr
.
__u6_addr32
[3] =0)

	)

248 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

249 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

250 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

251 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

252 (
a
)->
__u6_addr
.
__u6_addr32
[3] =
	`¡ohl
(1))

	)

257 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

258 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

259 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

260 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

261 (
a
)->
__u6_addr
.
__u6_addr32
[3] != 0 && \

262 (
a
)->
__u6_addr
.
__u6_addr32
[3] !
	`¡ohl
(1))

	)

267 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

268 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

269 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

270 (
a
)->
__u6_addr
.
__u6_addr32
[2] =
	`¡ohl
(0x0000ffff))

	)

276 #ifde‡
_KERNEL


277 
	#IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

278 
	#IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

279 
	#IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

280 
	#IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

281 
	#IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

282 
	#IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

284 
	#__IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

285 
	#__IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

286 
	#__IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

287 
	#__IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

288 
	#__IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

289 
	#__IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

296 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

297 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

298 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

299 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

304 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(◊)->
s6_addr
[0] =0xff)

	)

306 #ifde‡
_KERNEL


307 
	#IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

309 
	#__IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

315 #ifde‡
_KERNEL


316 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

317 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

318 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_NODELOCAL
))

	)

319 
	#IN6_IS_ADDR_MC_INTFACELOCAL
(
a
) \

320 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

321 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_INTFACELOCAL
))

	)

322 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

323 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

324 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

325 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

326 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

327 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_SITELOCAL
))

	)

328 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

329 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

330 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

331 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

332 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

333 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_GLOBAL
))

	)

335 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

336 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

337 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_NODELOCAL
))

	)

338 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

339 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

340 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

341 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

342 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

343 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_SITELOCAL
))

	)

344 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

345 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

346 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

347 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

348 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

349 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_GLOBAL
))

	)

352 #ifde‡
_KERNEL


356 
	#IN6_IS_SCOPE_LINKLOCAL
(
a
) \

357 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

358 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)))

	)

359 
	#IN6_IS_SCOPE_EMBED
(
a
) \

360 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

361 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)) || \

362 (
	`IN6_IS_ADDR_MC_INTFACELOCAL
(
a
)))

	)

364 
	#IFA6_IS_DEPRECATED
(
a
) \

365 ((
a
)->
ü6_li„time
.
ü6t_∂time
 !
ND6_INFINITE_LIFETIME
 && \

366 (
u_öt32_t
)((
time_u±ime
 - (
a
)->
ü6_upd©ëime
)) > \

367 (
a
)->
ü6_li„time
.
ü6t_∂time
)

	)

368 
	#IFA6_IS_INVALID
(
a
) \

369 ((
a
)->
ü6_li„time
.
ü6t_v…ime
 !
ND6_INFINITE_LIFETIME
 && \

370 (
u_öt32_t
)((
time_u±ime
 - (
a
)->
ü6_upd©ëime
)) > \

371 (
a
)->
ü6_li„time
.
ü6t_v…ime
)

	)

377 #i‡
__BSD_VISIBLE


378 
	srouã_ö6
 {

379 
πíåy
 *
	mro_π
;

380 
Œíåy
 *
	mro_Œe
;

385 *
	mro_¥ïíd
;

386 
uöt16_t
 
	mro_∂í
;

387 
uöt16_t
 
	mro_Êags
;

388 
uöt16_t
 
	mro_mtu
;

389 
uöt16_t
 
	m•¨e
;

390 
sockaddr_ö6
 
	mro_d°
;

394 #ifde‡
_KERNEL


395 
	#MTAG_ABI_IPV6
 1444287380

	)

396 
	#IPV6_TAG_DIRECT
 0

	)

405 
	#IPV6_OPTIONS
 1

	)

406 
	#IPV6_RECVOPTS
 5

	)

407 
	#IPV6_RECVRETOPTS
 6

	)

408 
	#IPV6_RECVDSTADDR
 7

	)

409 
	#IPV6_RETOPTS
 8

	)

411 
	#IPV6_SOCKOPT_RESERVED1
 3

	)

412 
	#IPV6_UNICAST_HOPS
 4

	)

413 
	#IPV6_MULTICAST_IF
 9

	)

414 
	#IPV6_MULTICAST_HOPS
 10

	)

415 
	#IPV6_MULTICAST_LOOP
 11

	)

416 
	#IPV6_JOIN_GROUP
 12

	)

417 
	#IPV6_LEAVE_GROUP
 13

	)

418 
	#IPV6_PORTRANGE
 14

	)

419 
	#ICMP6_FILTER
 18

	)

421 #ifde‡
_KERNEL


422 
	#IPV6_2292PKTINFO
 19

	)

423 
	#IPV6_2292HOPLIMIT
 20

	)

424 
	#IPV6_2292NEXTHOP
 21

	)

425 
	#IPV6_2292HOPOPTS
 22

	)

426 
	#IPV6_2292DSTOPTS
 23

	)

427 
	#IPV6_2292RTHDR
 24

	)

428 
	#IPV6_2292PKTOPTIONS
 25

	)

431 
	#IPV6_CHECKSUM
 26

	)

432 
	#IPV6_V6ONLY
 27

	)

433 #i‚de‡
_KERNEL


434 
	#IPV6_BINDV6ONLY
 
IPV6_V6ONLY


	)

437 
	#IPV6_IPSEC_POLICY
 28

	)

440 
	#IPV6_FW_ADD
 30

	)

441 
	#IPV6_FW_DEL
 31

	)

442 
	#IPV6_FW_FLUSH
 32

	)

443 
	#IPV6_FW_ZERO
 33

	)

444 
	#IPV6_FW_GET
 34

	)

448 
	#IPV6_RTHDRDSTOPTS
 35

	)

450 
	#IPV6_RECVPKTINFO
 36

	)

451 
	#IPV6_RECVHOPLIMIT
 37

	)

452 
	#IPV6_RECVRTHDR
 38

	)

453 
	#IPV6_RECVHOPOPTS
 39

	)

454 
	#IPV6_RECVDSTOPTS
 40

	)

455 #ifde‡
_KERNEL


456 
	#IPV6_RECVRTHDRDSTOPTS
 41

	)

459 
	#IPV6_USE_MIN_MTU
 42

	)

460 
	#IPV6_RECVPATHMTU
 43

	)

462 
	#IPV6_PATHMTU
 44

	)

465 
	#IPV6_REACHCONF
 45

	)

470 
	#IPV6_PKTINFO
 46

	)

471 
	#IPV6_HOPLIMIT
 47

	)

472 
	#IPV6_NEXTHOP
 48

	)

473 
	#IPV6_HOPOPTS
 49

	)

474 
	#IPV6_DSTOPTS
 50

	)

475 
	#IPV6_RTHDR
 51

	)

477 
	#IPV6_PKTOPTIONS
 52

	)

481 
	#IPV6_RECVTCLASS
 57

	)

483 
	#IPV6_AUTOFLOWLABEL
 59

	)

485 
	#IPV6_TCLASS
 61

	)

486 
	#IPV6_DONTFRAG
 62

	)

488 
	#IPV6_PREFER_TEMPADDR
 63

	)

492 
	#IPV6_BINDANY
 64

	)

494 
	#IPV6_BINDMULTI
 65

	)

495 
	#IPV6_RSS_LISTEN_BUCKET
 66

	)

496 
	#IPV6_FLOWID
 67

	)

497 
	#IPV6_FLOWTYPE
 68

	)

498 
	#IPV6_RSSBUCKETID
 69

	)

499 
	#IPV6_RECVFLOWID
 70

	)

500 
	#IPV6_RECVRSSBUCKETID
 71

	)

502 
	#IPV6_ORIGDSTADDR
 72

	)

503 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

509 
	#IPV6_MSFILTER
 74

	)

515 
	#IPV6_RTHDR_LOOSE
 0

	)

516 
	#IPV6_RTHDR_STRICT
 1

	)

517 
	#IPV6_RTHDR_TYPE_0
 0

	)

522 
	#IPV6_DEFAULT_MULTICAST_HOPS
 1

	)

523 
	#IPV6_DEFAULT_MULTICAST_LOOP
 1

	)

530 
	#IPV6_MIN_MEMBERSHIPS
 31

	)

531 
	#IPV6_MAX_MEMBERSHIPS
 4095

	)

537 
	#IPV6_MAX_GROUP_SRC_FILTER
 512

	)

538 
	#IPV6_MAX_SOCK_SRC_FILTER
 128

	)

543 
	sùv6_mªq
 {

544 
ö6_addr
 
	mùv6mr_mu…üddr
;

545 
	mùv6mr_öãrÁ˚
;

551 
	sö6_pktöfo
 {

552 
ö6_addr
 
	mùi6_addr
;

553 
	mùi6_ifödex
;

559 
	sù6_mtuöfo
 {

560 
sockaddr_ö6
 
	mù6m_addr
;

561 
uöt32_t
 
	mù6m_mtu
;

568 
	#IPV6_PORTRANGE_DEFAULT
 0

	)

569 
	#IPV6_PORTRANGE_HIGH
 1

	)

570 
	#IPV6_PORTRANGE_LOW
 2

	)

572 #i‡
__BSD_VISIBLE


579 
	#IPV6PROTO_MAXID
 (
IPPROTO_PIM
 + 1Ë

	)

584 
	#IPV6CTL_FORWARDING
 1

	)

585 
	#IPV6CTL_SENDREDIRECTS
 2

	)

586 
	#IPV6CTL_DEFHLIM
 3

	)

587 #ifde‡
nŸyë


588 
	#IPV6CTL_DEFMTU
 4

	)

590 
	#IPV6CTL_FORWSRCRT
 5

	)

591 
	#IPV6CTL_STATS
 6

	)

592 
	#IPV6CTL_MRTSTATS
 7

	)

593 
	#IPV6CTL_MRTPROTO
 8

	)

594 
	#IPV6CTL_MAXFRAGPACKETS
 9

	)

595 
	#IPV6CTL_SOURCECHECK
 10

	)

596 
	#IPV6CTL_SOURCECHECK_LOGINT
 11

	)

597 
	#IPV6CTL_ACCEPT_RTADV
 12

	)

599 
	#IPV6CTL_LOG_INTERVAL
 14

	)

600 
	#IPV6CTL_HDRNESTLIMIT
 15

	)

601 
	#IPV6CTL_DAD_COUNT
 16

	)

602 
	#IPV6CTL_AUTO_FLOWLABEL
 17

	)

603 
	#IPV6CTL_DEFMCASTHLIM
 18

	)

604 
	#IPV6CTL_GIF_HLIM
 19

	)

605 
	#IPV6CTL_KAME_VERSION
 20

	)

606 
	#IPV6CTL_USE_DEPRECATED
 21

	)

607 
	#IPV6CTL_RR_PRUNE
 22

	)

609 
	#IPV6CTL_MAPPED_ADDR
 23

	)

611 
	#IPV6CTL_V6ONLY
 24

	)

616 
	#IPV6CTL_USETEMPADDR
 32

	)

617 
	#IPV6CTL_TEMPPLTIME
 33

	)

618 
	#IPV6CTL_TEMPVLTIME
 34

	)

619 
	#IPV6CTL_AUTO_LINKLOCAL
 35

	)

620 
	#IPV6CTL_RIP6STATS
 36

	)

621 
	#IPV6CTL_PREFER_TEMPADDR
 37

	)

622 
	#IPV6CTL_ADDRCTLPOLICY
 38

	)

623 
	#IPV6CTL_USE_DEFAULTZONE
 39

	)

625 
	#IPV6CTL_MAXFRAGS
 41

	)

627 
	#IPV6CTL_IFQ
 42

	)

628 
	#IPV6CTL_ISATAPRTR
 43

	)

630 
	#IPV6CTL_MCAST_PMTU
 44

	)

634 
	#IPV6CTL_STEALTH
 45

	)

636 
	#ICMPV6CTL_ND6_ONLINKNSRFC4861
 47

	)

637 
	#IPV6CTL_NO_RADR
 48

	)

638 
	#IPV6CTL_NORBIT_RAIF
 49

	)

640 
	#IPV6CTL_RFC6204W3
 50

	)

642 
	#IPV6CTL_INTRQMAXLEN
 51

	)

643 
	#IPV6CTL_INTRDQMAXLEN
 52

	)

645 
	#IPV6CTL_MAXFRAGSPERPACKET
 53

	)

646 
	#IPV6CTL_MAXFRAGBUCKETSIZE
 54

	)

647 
	#IPV6CTL_MAXID
 55

	)

654 
	#M_FASTFWD_OURS
 
M_PROTO1


	)

655 
	#M_IP6_NEXTHOP
 
M_PROTO2


	)

656 
	#M_IP_NEXTHOP
 
M_PROTO2


	)

657 
	#M_SKIP_FIREWALL
 
M_PROTO3


	)

658 
	#M_AUTHIPHDR
 
M_PROTO4


	)

659 
	#M_DECRYPTED
 
M_PROTO5


	)

660 
	#M_LOOP
 
M_PROTO6


	)

661 
	#M_AUTHIPDGM
 
M_PROTO7


	)

662 
	#M_RTALERT_MLD
 
M_PROTO8


	)

663 
	#M_FRAGMENTED
 
M_PROTO9


	)

665 #ifde‡
_KERNEL


666 
	gcmsghdr
;

667 
	gù6_hdr
;

669 
ö6_cksum_p£udo
(
ù6_hdr
 *, 
uöt32_t
, 
uöt8_t
, 
uöt16_t
);

670 
ö6_cksum
(
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t);

671 
ö6_cksum_∑πül
(
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t,

672 
u_öt32_t
);

673 
ö6_loˇœddr
(
ö6_addr
 *);

674 
ö6_loˇlù
(
ö6_addr
 *);

675 
ö6_ifhaßddr
(
i‚ë
 *, 
ö6_addr
 *);

676 
ö6_addrsc›e
(c⁄° 
ö6_addr
 *);

677 *
ù6_•rötf
(*, c⁄° 
ö6_addr
 *);

678 
ö6_iÁddr
 *
ö6_iÁwôhiÂ
(
i‚ë
 *, 
ö6_addr
 *);

679 
ö6_if_up
(
i‚ë
 *);

680 
	gsockaddr
;

681 
u_ch¨
 
ù6_¥Ÿox
[];

683 
ö6_sö6_2_sö
(
sockaddr_ö
 *
sö
,

684 
sockaddr_ö6
 *
sö6
);

685 
ö6_sö_2_v4m≠sö6
(
sockaddr_ö
 *
sö
,

686 
sockaddr_ö6
 *
sö6
);

687 
ö6_sö6_2_sö_ö_sock
(
sockaddr
 *
«m
);

688 
ö6_sö_2_v4m≠sö6_ö_sock
(
sockaddr
 **
«m
);

689 
addr£l_pﬁicy_öô
();

691 
	#ßtosö6
(
ß
Ë((
sockaddr_ö6
 *)(ß))

	)

692 
	#sö6toß
(
sö6
Ë((
sockaddr
 *)(sö6))

	)

693 
	#iÁtoü6
(
iÁ
Ë((
ö6_iÁddr
 *)(iÁ))

	)

697 #i‚de‡
_SIZE_T_DECLARED


698 
__size_t
 
	tsize_t
;

699 
	#_SIZE_T_DECLARED


	)

702 #i‚de‡
_SOCKLEN_T_DECLARED


703 
__sockÀn_t
 
	tsockÀn_t
;

704 
	#_SOCKLEN_T_DECLARED


	)

707 #i‡
__BSD_VISIBLE


709 
__BEGIN_DECLS


710 
	gcmsghdr
;

712 
öë6_›ti⁄_•a˚
();

713 
öë6_›ti⁄_öô
(*, 
cmsghdr
 **, );

714 
öë6_›ti⁄_≠≥nd
(
cmsghdr
 *, c⁄° 
uöt8_t
 *,

716 
uöt8_t
 *
öë6_›ti⁄_Æloc
(
cmsghdr
 *, , , );

717 
öë6_›ti⁄_√xt
(c⁄° 
cmsghdr
 *, 
uöt8_t
 **);

718 
öë6_›ti⁄_föd
(c⁄° 
cmsghdr
 *, 
uöt8_t
 **, );

720 
size_t
 
öë6_πhdr_•a˚
(, );

721 
cmsghdr
 *
öë6_πhdr_öô
(*, );

722 
öë6_πhdr_add
(
cmsghdr
 *, c⁄° 
ö6_addr
 *,

724 
öë6_πhdr_œ°h›
(
cmsghdr
 *, );

726 
öë6_πhdr_ªvî£
(c⁄° 
cmsghdr
 *, cmsghdr *);

728 
öë6_πhdr_£gmíts
(c⁄° 
cmsghdr
 *);

729 
ö6_addr
 *
öë6_πhdr_gëaddr
(
cmsghdr
 *, );

730 
öë6_πhdr_gëÊags
(c⁄° 
cmsghdr
 *, );

732 
öë6_›t_öô
(*, 
sockÀn_t
);

733 
öë6_›t_≠≥nd
(*, 
sockÀn_t
, , 
uöt8_t
, socklen_t,

734 
uöt8_t
, **);

735 
öë6_›t_föish
(*, 
sockÀn_t
, );

736 
öë6_›t_£t_vÆ
(*, , *, 
sockÀn_t
);

738 
öë6_›t_√xt
(*, 
sockÀn_t
, , 
uöt8_t
 *, socklen_t *,

740 
öë6_›t_föd
(*, 
sockÀn_t
, , 
uöt8_t
, socklen_t *,

742 
öë6_›t_gë_vÆ
(*, , *, 
sockÀn_t
);

743 
sockÀn_t
 
öë6_πh_•a˚
(, );

744 *
öë6_πh_öô
(*, 
sockÀn_t
, , );

745 
öë6_πh_add
(*, c⁄° 
ö6_addr
 *);

746 
öë6_πh_ªvî£
(const *, *);

747 
öë6_πh_£gmíts
(const *);

748 
ö6_addr
 *
öë6_πh_gëaddr
(const *, );

749 
	g__END_DECLS


	@/usr/include/netinet6/in6_var.h

66 #i‚de‡
_NETINET6_IN6_VAR_H_


67 
	#_NETINET6_IN6_VAR_H_


	)

69 
	~<sys/åì.h
>

70 
	~<sys/cou¡î.h
>

72 #ifde‡
_KERNEL


73 
	~<sys/‚v_hash.h
>

74 
	~<sys/libkîn.h
>

92 
	sö6_addæi„time
 {

93 
time_t
 
	mü6t_expúe
;

94 
time_t
 
	mü6t_¥e„ºed
;

95 
u_öt32_t
 
	mü6t_v…ime
;

96 
u_öt32_t
 
	mü6t_∂time
;

99 
	gnd_iföfo
;

100 
	gsc›e6_id
;

101 
	gŒèbÀ
;

102 
	gmld_ifso·c
;

103 
	gö6_mu…i
;

105 
	sö6_i„xåa
 {

106 
cou¡î_u64_t
 *
	mö6_if°©
;

107 
cou¡î_u64_t
 *
	micmp6_if°©
;

108 
nd_iföfo
 *
	mnd_iföfo
;

109 
sc›e6_id
 *
	msc›e6_id
;

110 
ŒèbÀ
 *
	mŒèbÀ
;

111 
mld_ifso·c
 *
	mmld_iföfo
;

114 
	#LLTABLE6
(
iÂ
Ë(((
ö6_i„xåa
 *)(iÂ)->
if_afd©a
[
AF_INET6
])->
ŒèbÀ
)

	)

116 #ifde‡
_KERNEL


118 
SLIST_HEAD
(
ö6_mu…i_hód
, 
ö6_mu…i
);

119 
MALLOC_DECLARE
(
M_IP6MADDR
);

121 
	sö6_iÁddr
 {

122 
iÁddr
 
	mü_iÁ
;

123 
	#ü_iÂ
 
ü_iÁ
.
iÁ_iÂ


	)

124 
	#ü_Êags
 
ü_iÁ
.
iÁ_Êags


	)

125 
sockaddr_ö6
 
	mü_addr
;

126 
sockaddr_ö6
 
	mü_√t
;

127 
sockaddr_ö6
 
	mü_d°addr
;

128 
sockaddr_ö6
 
	mü_¥efixmask
;

129 
u_öt32_t
 
	mü_∂í
;

130 
CK_STAILQ_ENTRY
(
ö6_iÁddr
Ë
	mü_lök
;

131 
	mü6_Êags
;

133 
ö6_addæi„time
 
	mü6_li„time
;

134 
time_t
 
	mü6_¸óãtime
;

137 
time_t
 
	mü6_upd©ëime
;

140 
nd_¥efix
 *
	mü6_nd¥
;

143 
LIST_HEAD
(, 
ö6_mu…i_mshù
Ë
	mü6_membîshùs
;

145 
CK_LIST_ENTRY
(
ö6_iÁddr
Ë
	mü6_hash
;

149 
CK_STAILQ_HEAD
(
ö6_iÁddrhód
, 
ö6_iÁddr
);

150 
CK_LIST_HEAD
(
ö6_iÁddæi°hód
, 
ö6_iÁddr
);

154 
	sö6_addΩﬁicy
 {

155 
sockaddr_ö6
 
	maddr
;

156 
sockaddr_ö6
 
	maddrmask
;

157 
	m¥e˚d
;

158 
	mœbñ
;

159 
u_quad_t
 
	mu£
;

165 
	sö6_if°©
 {

166 
uöt64_t
 
	mifs6_ö_ª˚ive
;

167 
uöt64_t
 
	mifs6_ö_hdªº
;

168 
uöt64_t
 
	mifs6_ö_toobig
;

169 
uöt64_t
 
	mifs6_ö_n‹ouã
;

170 
uöt64_t
 
	mifs6_ö_addªº
;

171 
uöt64_t
 
	mifs6_ö_¥Ÿounknown
;

173 
uöt64_t
 
	mifs6_ö_åunˇãd
;

174 
uöt64_t
 
	mifs6_ö_disˇrd
;

176 
uöt64_t
 
	mifs6_ö_dñivî
;

178 
uöt64_t
 
	mifs6_out_f‹w¨d
;

180 
uöt64_t
 
	mifs6_out_ªque°
;

182 
uöt64_t
 
	mifs6_out_disˇrd
;

183 
uöt64_t
 
	mifs6_out_‰agok
;

184 
uöt64_t
 
	mifs6_out_‰agÁû
;

185 
uöt64_t
 
	mifs6_out_‰ag¸ót
;

187 
uöt64_t
 
	mifs6_ªass_ªqd
;

189 
uöt64_t
 
	mifs6_ªass_ok
;

192 
uöt64_t
 
	mifs6_ªass_Áû
;

195 
uöt64_t
 
	mifs6_ö_mˇ°
;

196 
uöt64_t
 
	mifs6_out_mˇ°
;

203 
	sicmp6_if°©
 {

208 
uöt64_t
 
	mifs6_ö_msg
;

210 
uöt64_t
 
	mifs6_ö_îr‹
;

212 
uöt64_t
 
	mifs6_ö_d°uƒóch
;

214 
uöt64_t
 
	mifs6_ö_admö¥ohib
;

216 
uöt64_t
 
	mifs6_ö_timìx˚ed
;

218 
uöt64_t
 
	mifs6_ö_∑øm¥ob
;

220 
uöt64_t
 
	mifs6_ö_pkâoobig
;

222 
uöt64_t
 
	mifs6_ö_echo
;

224 
uöt64_t
 
	mifs6_ö_ech‹ïly
;

226 
uöt64_t
 
	mifs6_ö_rouãrsﬁicô
;

228 
uöt64_t
 
	mifs6_ö_rouãødvît
;

230 
uöt64_t
 
	mifs6_ö_√ighb‹sﬁicô
;

232 
uöt64_t
 
	mifs6_ö_√ighb‹advît
;

234 
uöt64_t
 
	mifs6_ö_ªdúe˘
;

236 
uöt64_t
 
	mifs6_ö_mldquîy
;

238 
uöt64_t
 
	mifs6_ö_mldªp‹t
;

240 
uöt64_t
 
	mifs6_ö_mldd⁄e
;

246 
uöt64_t
 
	mifs6_out_msg
;

248 
uöt64_t
 
	mifs6_out_îr‹
;

250 
uöt64_t
 
	mifs6_out_d°uƒóch
;

252 
uöt64_t
 
	mifs6_out_admö¥ohib
;

254 
uöt64_t
 
	mifs6_out_timìx˚ed
;

256 
uöt64_t
 
	mifs6_out_∑øm¥ob
;

258 
uöt64_t
 
	mifs6_out_pkâoobig
;

260 
uöt64_t
 
	mifs6_out_echo
;

262 
uöt64_t
 
	mifs6_out_ech‹ïly
;

264 
uöt64_t
 
	mifs6_out_rouãrsﬁicô
;

266 
uöt64_t
 
	mifs6_out_rouãødvît
;

268 
uöt64_t
 
	mifs6_out_√ighb‹sﬁicô
;

270 
uöt64_t
 
	mifs6_out_√ighb‹advît
;

272 
uöt64_t
 
	mifs6_out_ªdúe˘
;

274 
uöt64_t
 
	mifs6_out_mldquîy
;

276 
uöt64_t
 
	mifs6_out_mldªp‹t
;

278 
uöt64_t
 
	mifs6_out_mldd⁄e
;

281 
	sö6_i‰eq
 {

282 
	mi‰_«me
[
IFNAMSIZ
];

284 
sockaddr_ö6
 
	mi‰u_addr
;

285 
sockaddr_ö6
 
	mi‰u_d°addr
;

286 
	mi‰u_Êags
;

287 
	mi‰u_Êags6
;

288 
	mi‰u_mëric
;

289 
ˇddr_t
 
	mi‰u_d©a
;

290 
ö6_addæi„time
 
	mi‰u_li„time
;

291 
ö6_if°©
 
	mi‰u_°©
;

292 
icmp6_if°©
 
	mi‰u_icmp6°©
;

293 
u_öt32_t
 
	mi‰u_sc›e_id
[16];

294 } 
	mi‰_i‰u
;

297 
	sö6_Æü§eq
 {

298 
	mi‰a_«me
[
IFNAMSIZ
];

299 
sockaddr_ö6
 
	mi‰a_addr
;

300 
sockaddr_ö6
 
	mi‰a_d°addr
;

301 
sockaddr_ö6
 
	mi‰a_¥efixmask
;

302 
	mi‰a_Êags
;

303 
ö6_addæi„time
 
	mi‰a_li„time
;

304 
	mi‰a_vhid
;

308 
	soö6_Æü§eq
 {

309 
	mi‰a_«me
[
IFNAMSIZ
];

310 
sockaddr_ö6
 
	mi‰a_addr
;

311 
sockaddr_ö6
 
	mi‰a_d°addr
;

312 
sockaddr_ö6
 
	mi‰a_¥efixmask
;

313 
	mi‰a_Êags
;

314 
ö6_addæi„time
 
	mi‰a_li„time
;

318 
	#IN6_PREFIX_ND
 1

	)

319 
	#IN6_PREFIX_RR
 2

	)

325 
	sö6_¥Êags
 {

326 
	s¥f_ø
 {

327 
u_ch¨
 
	m⁄lök
 : 1;

328 
u_ch¨
 
	maut⁄omous
 : 1;

329 
u_ch¨
 
	mª£rved
 : 6;

330 } 
	m¥f_ø
;

331 
u_ch¨
 
	m¥f_ª£rved1
;

332 
u_sh‹t
 
	m¥f_ª£rved2
;

334 
	s¥f_º
 {

335 
u_ch¨
 
	mde¸vÆid
 : 1;

336 
u_ch¨
 
	mde¸¥efd
 : 1;

337 
u_ch¨
 
	mª£rved
 : 6;

338 } 
	m¥f_º
;

339 
u_ch¨
 
	m¥f_ª£rved3
;

340 
u_sh‹t
 
	m¥f_ª£rved4
;

343 
	sö6_¥efixªq
 {

344 
	mùr_«me
[
IFNAMSIZ
];

345 
u_ch¨
 
	mùr_‹igö
;

346 
u_ch¨
 
	mùr_∂í
;

347 
u_öt32_t
 
	mùr_v…ime
;

348 
u_öt32_t
 
	mùr_∂time
;

349 
ö6_¥Êags
 
	mùr_Êags
;

350 
sockaddr_ö6
 
	mùr_¥efix
;

353 
	#PR_ORIG_RA
 0

	)

354 
	#PR_ORIG_RR
 1

	)

355 
	#PR_ORIG_STATIC
 2

	)

356 
	#PR_ORIG_KERNEL
 3

	)

358 
	#ùr_øf_⁄lök
 
ùr_Êags
.
¥f_ø
.
⁄lök


	)

359 
	#ùr_øf_auto
 
ùr_Êags
.
¥f_ø
.
aut⁄omous


	)

361 
	#ùr_°©ef_⁄lök
 
ùr_Êags
.
¥f_°©e
.
⁄lök


	)

363 
	#ùr_ºf_de¸vÆid
 
ùr_Êags
.
¥f_º
.
de¸vÆid


	)

364 
	#ùr_ºf_de¸¥efd
 
ùr_Êags
.
¥f_º
.
de¸¥efd


	)

366 
	sö6_ºíumªq
 {

367 
	múr_«me
[
IFNAMSIZ
];

368 
u_ch¨
 
	múr_‹igö
;

369 
u_ch¨
 
	múr_m_Àn
;

370 
u_ch¨
 
	múr_m_möÀn
;

371 
u_ch¨
 
	múr_m_maxÀn
;

372 
u_ch¨
 
	múr_u_u£Àn
;

373 
u_ch¨
 
	múr_u_kì∂í
;

374 
	súr_øÊagmask
 {

375 
u_ch¨
 
	m⁄lök
 : 1;

376 
u_ch¨
 
	maut⁄omous
 : 1;

377 
u_ch¨
 
	mª£rved
 : 6;

378 } 
	múr_øÊagmask
;

379 
u_öt32_t
 
	múr_v…ime
;

380 
u_öt32_t
 
	múr_∂time
;

381 
ö6_¥Êags
 
	múr_Êags
;

382 
sockaddr_ö6
 
	múr_m©ch¥efix
;

383 
sockaddr_ö6
 
	múr_u£¥efix
;

386 
	#úr_øf_mask_⁄lök
 
úr_øÊagmask
.
⁄lök


	)

387 
	#úr_øf_mask_auto
 
úr_øÊagmask
.
aut⁄omous


	)

388 
	#úr_øf_mask_ª£rved
 
úr_øÊagmask
.
ª£rved


	)

390 
	#úr_øf_⁄lök
 
úr_Êags
.
¥f_ø
.
⁄lök


	)

391 
	#úr_øf_auto
 
úr_Êags
.
¥f_ø
.
aut⁄omous


	)

393 
	#úr_°©ef_⁄lök
 
úr_Êags
.
¥f_°©e
.
⁄lök


	)

395 
	#úr_ºf
 
úr_Êags
.
¥f_º


	)

396 
	#úr_ºf_de¸vÆid
 
úr_Êags
.
¥f_º
.
de¸vÆid


	)

397 
	#úr_ºf_de¸¥efd
 
úr_Êags
.
¥f_º
.
de¸¥efd


	)

403 
	#IA6_IN6
(
ü
Ë(&((ü)->
ü_addr
.
sö6_addr
))

	)

404 
	#IA6_DSTIN6
(
ü
Ë(&((ü)->
ü_d°addr
.
sö6_addr
))

	)

405 
	#IA6_MASKIN6
(
ü
Ë(&((ü)->
ü_¥efixmask
.
sö6_addr
))

	)

406 
	#IA6_SIN6
(
ü
Ë(&((ü)->
ü_addr
))

	)

407 
	#IA6_DSTSIN6
(
ü
Ë(&((ü)->
ü_d°addr
))

	)

408 
	#IFA_IN6
(
x
Ë(&((
sockaddr_ö6
 *)((x)->
iÁ_addr
))->
sö6_addr
)

	)

409 
	#IFA_DSTIN6
(
x
Ë(&((
sockaddr_ö6
 *)((x)->
iÁ_d°addr
))->
sö6_addr
)

	)

411 
	#IFPR_IN6
(
x
Ë(&((
sockaddr_ö6
 *)((x)->
iÂr_¥efix
))->
sö6_addr
)

	)

413 #ifde‡
_KERNEL


414 
	#IN6_ARE_MASKED_ADDR_EQUAL
(
d
, 
a
, 
m
) ( \

415 (((
d
)->
s6_addr32
[0] ^ (
a
)->s6_addr32[0]Ë& (
m
)->s6_addr32[0]) == 0 && \

416 (((
d
)->
s6_addr32
[1] ^ (
a
)->s6_addr32[1]Ë& (
m
)->s6_addr32[1]) == 0 && \

417 (((
d
)->
s6_addr32
[2] ^ (
a
)->s6_addr32[2]Ë& (
m
)->s6_addr32[2]) == 0 && \

418 (((
d
)->
s6_addr32
[3] ^ (
a
)->s6_addr32[3]Ë& (
m
)->s6_addr32[3]Ë=0 )

	)

419 
	#IN6_MASK_ADDR
(
a
, 
m
) do { \

420 (
a
)->
s6_addr32
[0] &(
m
)->s6_addr32[0]; \

421 (
a
)->
s6_addr32
[1] &(
m
)->s6_addr32[1]; \

422 (
a
)->
s6_addr32
[2] &(
m
)->s6_addr32[2]; \

423 (
a
)->
s6_addr32
[3] &(
m
)->s6_addr32[3]; \

424 } 0)

	)

427 
	#SIOCSIFADDR_IN6
 
	`_IOW
('i', 12, 
ö6_i‰eq
)

	)

428 
	#SIOCGIFADDR_IN6
 
	`_IOWR
('i', 33, 
ö6_i‰eq
)

	)

430 #ifde‡
_KERNEL


435 
	#SIOCSIFDSTADDR_IN6
 
	`_IOW
('i', 14, 
ö6_i‰eq
)

	)

436 
	#SIOCSIFNETMASK_IN6
 
	`_IOW
('i', 22, 
ö6_i‰eq
)

	)

439 
	#SIOCGIFDSTADDR_IN6
 
	`_IOWR
('i', 34, 
ö6_i‰eq
)

	)

440 
	#SIOCGIFNETMASK_IN6
 
	`_IOWR
('i', 37, 
ö6_i‰eq
)

	)

442 
	#SIOCDIFADDR_IN6
 
	`_IOW
('i', 25, 
ö6_i‰eq
)

	)

443 
	#OSIOCAIFADDR_IN6
 
	`_IOW
('i', 26, 
oö6_Æü§eq
)

	)

444 
	#SIOCAIFADDR_IN6
 
	`_IOW
('i', 27, 
ö6_Æü§eq
)

	)

446 
	#SIOCSIFPHYADDR_IN6
 
	`_IOW
('i', 70, 
ö6_Æü§eq
)

	)

447 
	#SIOCGIFPSRCADDR_IN6
 
	`_IOWR
('i', 71, 
ö6_i‰eq
)

	)

448 
	#SIOCGIFPDSTADDR_IN6
 
	`_IOWR
('i', 72, 
ö6_i‰eq
)

	)

450 
	#SIOCGIFAFLAG_IN6
 
	`_IOWR
('i', 73, 
ö6_i‰eq
)

	)

452 #ifde‡
_KERNEL


453 
	#OSIOCGIFINFO_IN6
 
	`_IOWR
('i', 76, 
ö6_⁄dúeq
)

	)

455 
	#SIOCGIFINFO_IN6
 
	`_IOWR
('i', 108, 
ö6_ndúeq
)

	)

456 
	#SIOCSIFINFO_IN6
 
	`_IOWR
('i', 109, 
ö6_ndúeq
)

	)

457 
	#SIOCSNDFLUSH_IN6
 
	`_IOWR
('i', 77, 
ö6_i‰eq
)

	)

458 
	#SIOCGNBRINFO_IN6
 
	`_IOWR
('i', 78, 
ö6_nbröfo
)

	)

459 
	#SIOCSPFXFLUSH_IN6
 
	`_IOWR
('i', 79, 
ö6_i‰eq
)

	)

460 
	#SIOCSRTRFLUSH_IN6
 
	`_IOWR
('i', 80, 
ö6_i‰eq
)

	)

462 
	#SIOCGIFALIFETIME_IN6
 
	`_IOWR
('i', 81, 
ö6_i‰eq
)

	)

463 
	#SIOCGIFSTAT_IN6
 
	`_IOWR
('i', 83, 
ö6_i‰eq
)

	)

464 
	#SIOCGIFSTAT_ICMP6
 
	`_IOWR
('i', 84, 
ö6_i‰eq
)

	)

466 
	#SIOCSDEFIFACE_IN6
 
	`_IOWR
('i', 85, 
ö6_ndi‰eq
)

	)

467 
	#SIOCGDEFIFACE_IN6
 
	`_IOWR
('i', 86, 
ö6_ndi‰eq
)

	)

469 
	#SIOCSIFINFO_FLAGS
 
	`_IOWR
('i', 87, 
ö6_ndúeq
Ë

	)

471 
	#SIOCSSCOPE6
 
	`_IOW
('i', 88, 
ö6_i‰eq
)

	)

472 
	#SIOCGSCOPE6
 
	`_IOWR
('i', 89, 
ö6_i‰eq
)

	)

473 
	#SIOCGSCOPE6DEF
 
	`_IOWR
('i', 90, 
ö6_i‰eq
)

	)

475 
	#SIOCSIFPREFIX_IN6
 
	`_IOW
('i', 100, 
ö6_¥efixªq
Ë

	)

476 
	#SIOCGIFPREFIX_IN6
 
	`_IOWR
('i', 101, 
ö6_¥efixªq
Ë

	)

477 
	#SIOCDIFPREFIX_IN6
 
	`_IOW
('i', 102, 
ö6_¥efixªq
Ë

	)

478 
	#SIOCAIFPREFIX_IN6
 
	`_IOW
('i', 103, 
ö6_ºíumªq
Ë

	)

479 
	#SIOCCIFPREFIX_IN6
 
	`_IOW
('i', 104, \

480 
ö6_ºíumªq
Ë

	)

481 
	#SIOCSGIFPREFIX_IN6
 
	`_IOW
('i', 105, \

482 
ö6_ºíumªq
Ë

	)

484 
	#SIOCGETSGCNT_IN6
 
	`_IOWR
('u', 106, \

485 
sioc_sg_ªq6
Ë

	)

486 
	#SIOCGETMIFCNT_IN6
 
	`_IOWR
('u', 107, \

487 
sioc_mif_ªq6
Ë

	)

489 
	#SIOCAADDRCTL_POLICY
 
	`_IOW
('u', 108, 
ö6_addΩﬁicy
)

	)

490 
	#SIOCDADDRCTL_POLICY
 
	`_IOW
('u', 109, 
ö6_addΩﬁicy
)

	)

492 
	#IN6_IFF_ANYCAST
 0x01

	)

493 
	#IN6_IFF_TENTATIVE
 0x02

	)

494 
	#IN6_IFF_DUPLICATED
 0x04

	)

495 
	#IN6_IFF_DETACHED
 0x08

	)

496 
	#IN6_IFF_DEPRECATED
 0x10

	)

497 
	#IN6_IFF_NODAD
 0x20

	)

500 
	#IN6_IFF_AUTOCONF
 0x40

	)

501 
	#IN6_IFF_TEMPORARY
 0x80

	)

502 
	#IN6_IFF_PREFER_SOURCE
 0x0100

	)

505 
	#IN6_IFF_NOTREADY
 (
IN6_IFF_TENTATIVE
|
IN6_IFF_DUPLICATED
)

	)

507 #ifde‡
_KERNEL


508 
	#IN6_ARE_SCOPE_CMP
(
a
,
b
Ë(◊)-(b))

	)

509 
	#IN6_ARE_SCOPE_EQUAL
(
a
,
b
Ë(◊)==(b))

	)

512 #ifde‡
_KERNEL


513 
VNET_DECLARE
(
ö6_iÁddrhód
, in6_ifaddrhead);

514 
VNET_DECLARE
(
ö6_iÁddæi°hód
 *, 
ö6_iÁddrhashtbl
);

515 
VNET_DECLARE
(
u_l⁄g
, 
ö6_iÁddrhmask
);

516 
	#V_ö6_iÁddrhód
 
	`VNET
(
ö6_iÁddrhód
)

	)

517 
	#V_ö6_iÁddrhashtbl
 
	`VNET
(
ö6_iÁddrhashtbl
)

	)

518 
	#V_ö6_iÁddrhmask
 
	`VNET
(
ö6_iÁddrhmask
)

	)

520 
	#IN6ADDR_NHASH_LOG2
 8

	)

521 
	#IN6ADDR_NHASH
 (1 << 
IN6ADDR_NHASH_LOG2
)

	)

522 
	#IN6ADDR_HASHVAL
(
x
Ë(
	`ö6_addrhash
(x))

	)

523 
	#IN6ADDR_HASH
(
x
) \

524 (&
V_ö6_iÁddrhashtbl
[
	`IN6ADDR_HASHVAL
(
x
Ë& 
V_ö6_iÁddrhmask
])

	)

526 
__ölöe
 
uöt32_t


527 
	$ö6_addrhash
(c⁄° 
ö6_addr
 *
ö6
)

529 
uöt32_t
 
x
;

531 
x
 = 
ö6
->
s6_addr32
[0] ^ in6->s6_addr32[1] ^ in6->s6_addr32[2] ^

532 
ö6
->
s6_addr32
[3];

533  (
	`‚v_32_buf
(&
x
, (x), 
FNV1_32_INIT
));

534 
	}
}

536 
rmlock
 
ö6_iÁddr_lock
;

537 
	#IN6_IFADDR_LOCK_ASSERT
(Ë
	`rm_as£π
(&
ö6_iÁddr_lock
, 
RA_LOCKED
)

	)

538 
	#IN6_IFADDR_RLOCK
(
t
Ë
	`rm_æock
(&
ö6_iÁddr_lock
, (t))

	)

539 
	#IN6_IFADDR_RLOCK_ASSERT
(Ë
	`rm_as£π
(&
ö6_iÁddr_lock
, 
RA_RLOCKED
)

	)

540 
	#IN6_IFADDR_RUNLOCK
(
t
Ë
	`rm_ru∆ock
(&
ö6_iÁddr_lock
, (t))

	)

541 
	#IN6_IFADDR_WLOCK
(Ë
	`rm_wlock
(&
ö6_iÁddr_lock
)

	)

542 
	#IN6_IFADDR_WLOCK_ASSERT
(Ë
	`rm_as£π
(&
ö6_iÁddr_lock
, 
RA_WLOCKED
)

	)

543 
	#IN6_IFADDR_WUNLOCK
(Ë
	`rm_wu∆ock
(&
ö6_iÁddr_lock
)

	)

545 
	#ö6_if°©_öc
(
iÂ
, 
èg
) \

547 i‡(
iÂ
) \

548 
	`cou¡î_u64_add
(((
ö6_i„xåa
 *) \

549 ((
iÂ
)->
if_afd©a
[
AF_INET6
]))->
ö6_if°©
[ \

550 
	`off£tof
(
ö6_if°©
, 
èg
Ë/ (
uöt64_t
)], 1);\

551 }  0)

	)

553 
u_ch¨
 
öë6˘Àºm≠
[];

554 
VNET_DECLARE
(, 
ö6_maxmtu
);

555 
	#V_ö6_maxmtu
 
	`VNET
(
ö6_maxmtu
)

	)

561 
	sù6_msour˚
 {

562 
RB_ENTRY
(
ù6_msour˚
Ë
	mim6s_lök
;

563 
ö6_addr
 
	mim6s_addr
;

564 
	sim6s_°
 {

565 
uöt16_t
 
	mex
;

566 
uöt16_t
 
	mö
;

567 } 
	mim6s_°
[2];

568 
uöt8_t
 
	mim6s_°p
;

570 
RB_HEAD
(
ù6_msour˚_åì
, 
ù6_msour˚
);

577 
	sö6_msour˚
 {

578 
RB_ENTRY
(
ù6_msour˚
Ë
	mim6s_lök
;

579 
ö6_addr
 
	mim6s_addr
;

580 
uöt8_t
 
	mim6¶_°
[2];

583 #ifde‡
_KERNEL


590 
__ölöe
 

591 
	$ù6_msour˚_cmp
(c⁄° 
ù6_msour˚
 *
a
, c⁄° ù6_msour˚ *
b
)

594  (
	`memcmp
(&
a
->
im6s_addr
, &
b
->im6s_addr, (
ö6_addr
)));

595 
	}
}

596 
RB_PROTOTYPE
(
ù6_msour˚_åì
, 
ù6_msour˚
, 
im6s_lök
, 
ù6_msour˚_cmp
);

601 
	sö6_mfûãr
 {

602 
ù6_msour˚_åì
 
	mim6f_sour˚s
;

603 
u_l⁄g
 
	mim6f_n§c
;

604 
uöt8_t
 
	mim6f_°
[2];

610 
	sö6_mu…i_mshù
 {

611 
ö6_mu…i
 *
	mi6mm_maddr
;

612 
LIST_ENTRY
(
ö6_mu…i_mshù
Ë
	mi6mm_chaö
;

637 
	sö6_mu…i
 {

638 
ö6_addr
 
	mö6m_addr
;

639 
i‚ë
 *
	mö6m_iÂ
;

640 
ifmu…üddr
 *
	mö6m_ifma
;

641 
u_öt
 
	mö6m_ªfcou¡
;

642 
u_öt
 
	mö6m_°©e
;

643 
u_öt
 
	mö6m_timî
;

646 
mld_ifso·c
 *
	mö6m_mli
;

647 
SLIST_ENTRY
(
ö6_mu…i
Ë
	mö6m_ƒñe
;

648 
ù6_msour˚_åì
 
	mö6m_§cs
;

649 
u_l⁄g
 
	mö6m_n§c
;

651 
mbufq
 
	mö6m_scq
;

653 
timevÆ
 
	mö6m_œ°g§tv
;

654 
uöt16_t
 
	mö6m_s˘imî
;

655 
uöt16_t
 
	mö6m_s¸v
;

664 
	sö6m_°
 {

665 
uöt16_t
 
	miss_fmode
;

666 
uöt16_t
 
	miss_asm
;

667 
uöt16_t
 
	miss_ex
;

668 
uöt16_t
 
	miss_ö
;

669 
uöt16_t
 
	miss_ªc
;

670 } 
	mö6m_°
[2];

673 
ö6m_disc⁄√˘
(
ö6_mu…i
 *
öm
);

674 
ifma6_ª°¨t
;

683 
__ölöe
 
uöt8_t


684 
	$im6s_gë_mode
(c⁄° 
ö6_mu…i
 *
öm
, c⁄° 
ù6_msour˚
 *
ims
,

685 
uöt8_t
 
t
)

688 
t
 = !!t;

689 i‡(
öm
->
ö6m_°
[
t
].
iss_ex
 > 0 &&

690 
öm
->
ö6m_°
[
t
].
iss_ex
 =
ims
->
im6s_°
[t].
ex
)

691  (
MCAST_EXCLUDE
);

692 i‡(
ims
->
im6s_°
[
t
].
ö
 > 0 && ims->im6s_°[t].
ex
 == 0)

693  (
MCAST_INCLUDE
);

694  (
MCAST_UNDEFINED
);

695 
	}
}

703 
mtx
 
ö6_mu…i_li°_mtx
;

704 
sx
 
ö6_mu…i_sx
;

706 
	#IN6_MULTI_LIST_LOCK
(Ë
	`mtx_lock
(&
ö6_mu…i_li°_mtx
)

	)

707 
	#IN6_MULTI_LIST_UNLOCK
(Ë
	`mtx_u∆ock
(&
ö6_mu…i_li°_mtx
)

	)

708 
	#IN6_MULTI_LIST_LOCK_ASSERT
(Ë
	`mtx_as£π
(&
ö6_mu…i_li°_mtx
, 
MA_OWNED
)

	)

709 
	#IN6_MULTI_LIST_UNLOCK_ASSERT
(Ë
	`mtx_as£π
(&
ö6_mu…i_li°_mtx
, 
MA_NOTOWNED
)

	)

711 
	#IN6_MULTI_LOCK
(Ë
	`sx_xlock
(&
ö6_mu…i_sx
)

	)

712 
	#IN6_MULTI_UNLOCK
(Ë
	`sx_xu∆ock
(&
ö6_mu…i_sx
)

	)

713 
	#IN6_MULTI_LOCK_ASSERT
(Ë
	`sx_as£π
(&
ö6_mu…i_sx
, 
SA_XLOCKED
)

	)

714 
	#IN6_MULTI_UNLOCK_ASSERT
(Ë
	`sx_as£π
(&
ö6_mu…i_sx
, 
SA_XUNLOCKED
)

	)

724 
__ölöe
 
ö6_mu…i
 *

725 
	$ö6m_lookup_locked
(
i‚ë
 *
iÂ
, c⁄° 
ö6_addr
 *
mˇddr
)

727 
ifmu…üddr
 *
ifma
;

728 
ö6_mu…i
 *
öm
;

730 
öm
 = 
NULL
;

731 
	`CK_STAILQ_FOREACH
(
ifma
, &((
iÂ
)->
if_mu…üddrs
), 
ifma_lök
) {

732 i‡(
ifma
->
ifma_addr
->
ß_Ámûy
 =
AF_INET6
) {

733 
öm
 = (
ö6_mu…i
 *)
ifma
->
ifma_¥Ÿo•ec
;

734 i‡(
öm
 =
NULL
)

736 i‡(
	`IN6_ARE_ADDR_EQUAL
(&
öm
->
ö6m_addr
, 
mˇddr
))

738 
öm
 = 
NULL
;

741  (
öm
);

742 
	}
}

749 
__ölöe
 
ö6_mu…i
 *

750 
	$ö6m_lookup
(
i‚ë
 *
iÂ
, c⁄° 
ö6_addr
 *
mˇddr
)

752 
ö6_mu…i
 *
öm
;

754 
	`IN6_MULTI_LIST_LOCK
();

755 
	`IF_ADDR_RLOCK
(
iÂ
);

756 
öm
 = 
	`ö6m_lookup_locked
(
iÂ
, 
mˇddr
);

757 
	`IF_ADDR_RUNLOCK
(
iÂ
);

758 
	`IN6_MULTI_LIST_UNLOCK
();

760  (
öm
);

761 
	}
}

764 
__ölöe
 

765 
	$ö6m_acquúe_locked
(
ö6_mu…i
 *
öm
)

768 
	`IN6_MULTI_LIST_LOCK_ASSERT
();

769 ++
öm
->
ö6m_ªfcou¡
;

770 
	}
}

772 
__ölöe
 

773 
	$ö6m_acquúe
(
ö6_mu…i
 *
öm
)

775 
	`IN6_MULTI_LIST_LOCK
();

776 
	`ö6m_acquúe_locked
(
öm
);

777 
	`IN6_MULTI_LIST_UNLOCK
();

778 
	}
}

780 
__ölöe
 

781 
	$ö6m_ªÀ_locked
(
ö6_mu…i_hód
 *
ömh
, 
ö6_mu…i
 *
öm
)

783 
	`KASSERT
(
öm
->
ö6m_ªfcou¡
 > 0, ("refcount == %d inm: %p", inm->in6m_refcount, inm));

784 
	`IN6_MULTI_LIST_LOCK_ASSERT
();

786 i‡(--
öm
->
ö6m_ªfcou¡
 == 0) {

787 
	`MPASS
(
öm
->
ö6m_iÂ
 =
NULL
);

788 
öm
->
ö6m_ifma
->
ifma_¥Ÿo•ec
 = 
NULL
;

789 
	`MPASS
(
öm
->
ö6m_ifma
->
ifma_Œifma
 =
NULL
);

790 
	`SLIST_INSERT_HEAD
(
ömh
, 
öm
, 
ö6m_ƒñe
);

792 
	}
}

794 
	gù6_m›ti⁄s
;

795 
	gsock›t
;

796 
	göpcböfo
;

799 
im6o_mc_fûãr
(c⁄° 
ù6_m›ti⁄s
 *, c⁄° 
i‚ë
 *,

800 c⁄° 
sockaddr
 *, const sockaddr *);

801 
ö6_joögroup
(
i‚ë
 *, c⁄° 
ö6_addr
 *,

802 
ö6_mfûãr
 *, 
ö6_mu…i
 **, );

803 
ö6_joögroup_locked
(
i‚ë
 *, c⁄° 
ö6_addr
 *,

804 
ö6_mfûãr
 *, 
ö6_mu…i
 **, );

805 
ö6_Àavegroup
(
ö6_mu…i
 *, 
ö6_mfûãr
 *);

806 
ö6_Àavegroup_locked
(
ö6_mu…i
 *, 
ö6_mfûãr
 *);

807 
ö6m_˛ór_ªc‹ded
(
ö6_mu…i
 *);

808 
ö6m_commô
(
ö6_mu…i
 *);

809 
ö6m_¥öt
(c⁄° 
ö6_mu…i
 *);

810 
ö6m_ªc‹d_sour˚
(
ö6_mu…i
 *, c⁄° 
ö6_addr
 *);

811 
ö6m_ªÀa£_de„ºed
(
ö6_mu…i
 *);

812 
ö6m_ªÀa£_li°_de„ºed
(
ö6_mu…i_hód
 *);

813 
ù6_‰ìm›ti⁄s
(
ù6_m›ti⁄s
 *);

814 
ù6_gëm›ti⁄s
(
öpcb
 *, 
sock›t
 *);

815 
ù6_£tm›ti⁄s
(
öpcb
 *, 
sock›t
 *);

818 
	#IN6_IFAUPDATE_DADDELAY
 0x1

	)

820 
ö6_mask2Àn
(
ö6_addr
 *, 
u_ch¨
 *);

821 
ö6_c⁄åﬁ
(
sockë
 *, 
u_l⁄g
, 
ˇddr_t
, 
i‚ë
 *,

822 
thªad
 *);

823 
ö6_upd©e_iÁ
(
i‚ë
 *, 
ö6_Æü§eq
 *,

824 
ö6_iÁddr
 *, );

825 
ö6_¥ï¨e_i‰a
(
ö6_Æü§eq
 *, c⁄° 
ö6_addr
 *,

826 c⁄° 
ö6_addr
 *);

827 
ö6_purgóddr
(
iÁddr
 *);

828 
ö6if_do_dad
(
i‚ë
 *);

829 
ö6_ßvemkludge
(
ö6_iÁddr
 *);

830 *
ö6_domiÁâach
(
i‚ë
 *);

831 
ö6_domifdëach
(
i‚ë
 *, *);

832 
ö6_domifmtu
(
i‚ë
 *);

833 
ö6_£tmaxmtu
();

834 
ö6_if2idÀn
(
i‚ë
 *);

835 
ö6_iÁddr
 *
ö6iÁ_iÂf‹lökloˇl
(
i‚ë
 *, );

836 
ö6_iÁddr
 *
ö6iÁ_iÂwôhaddr
(
i‚ë
 *, c⁄° 
ö6_addr
 *);

837 
ö6_iÁddr
 *
ö6iÁ_ifwôhaddr
(c⁄° 
ö6_addr
 *, 
uöt32_t
);

838 
ö6_iÁddr
 *
ö6iÁ_Œa⁄iÂ
(
i‚ë
 *);

839 
ö6_addr2z⁄eid
(
i‚ë
 *, 
ö6_addr
 *, 
u_öt32_t
 *);

840 
ö6_m©chÀn
(
ö6_addr
 *, in6_addr *);

841 
ö6_¨e_¥efix_equÆ
(
ö6_addr
 *, in6_addr *, );

842 
ö6_¥efixÀn2mask
(
ö6_addr
 *, );

843 
ö6_¥efix_io˘l
(
sockë
 *, 
u_l⁄g
, 
ˇddr_t
,

844 
i‚ë
 *);

845 
ö6_¥efix_add_ifid
(, 
ö6_iÁddr
 *);

846 
ö6_¥efix_ªmove_ifid
(, 
ö6_iÁddr
 *);

847 
ö6_purgïªfix
(
i‚ë
 *);

849 
ö6_is_addr_dïªˇãd
(
sockaddr_ö6
 *);

850 
ö6_§c_io˘l
(
u_l⁄g
, 
ˇddr_t
);

852 
ö6_√waddrmsg
(
ö6_iÁddr
 *, );

856 
mbuf
 *
ù6_åyf‹w¨d
(mbuf *);

857 
ö6_πªdúe˘
(
sockaddr
 *, sockaddr *, sockaddr *,

858 , 
sockaddr
 *, 
u_öt
);

859 
ö6_πªque°
(, 
sockaddr
 *, sockaddr *,

860 
sockaddr
 *, , 
πíåy
 **, 
u_öt
);

861 
ö6_πÆloc
(
rouã_ö6
 *, 
u_öt
);

862 
ö6_πÆloc_ign
(
rouã_ö6
 *, 
u_l⁄g
, 
u_öt
);

863 
πíåy
 *
ö6_πÆloc1
(
sockaddr
 *, , 
u_l⁄g
, 
u_öt
);

	@/usr/include/stdbool.h

31 #i‚de‡
__boﬁ_åue_Ál£_¨e_deföed


32 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

34 #i‚de‡
__˝lu•lus


36 
	#Ál£
 0

	)

37 
	#åue
 1

	)

39 
	#boﬁ
 
_Boﬁ


	)

40 #i‡
__STDC_VERSION__
 < 199901L && 
__GNUC__
 < 3 && !
deföed
(
__INTEL_COMPILER
)

41 
	t_Boﬁ
;

	@/usr/include/sys/_bitset.h

34 #i‚de‡
_SYS__BITSET_H_


35 
	#_SYS__BITSET_H_


	)

41 
	#_BITSET_BITS
 ((Ë* 8)

	)

43 
	#__howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

45 
	#__bô£t_w‹ds
(
_s
Ë(
	`__howm™y
(_s, 
_BITSET_BITS
))

	)

47 
	#BITSET_DEFINE
(
t
, 
_s
) \

48 
	st
 { \

49 
__bôs
[
	`__bô£t_w‹ds
((
_s
))]; \

50 }

	)

58 
	#BITSET_DEFINE_VAR
(
t
Ë
	`BITSET_DEFINE
—, 1)

	)

64 
BITSET_DEFINE
(
bô£t
, 1);

	@/usr/include/sys/_bus_dma.h

32 #i‚de‡
_SYS__BUS_DMA_H_


33 
	#_SYS__BUS_DMA_H_


	)

35 
	tbus_dmasync_›_t
;

45 
bus_dma_èg
 *
	tbus_dma_èg_t
;

52 
bus_dmam≠
 *
	tbus_dmam≠_t
;

59 
	mBUS_DMA_LOCK
 = 0x01,

60 
	mBUS_DMA_UNLOCK
 = 0x02,

61 } 
	tbus_dma_lock_›_t
;

63 
	tbus_dma_lock_t
(*, 
	tbus_dma_lock_›_t
);

	@/usr/include/sys/_callout.h

40 #i‚de‡
_SYS__CALLOUT_H


41 
	#_SYS__CALLOUT_H


	)

43 
	~<sys/queue.h
>

45 
	glock_obje˘
;

47 
LIST_HEAD
(
ˇŒout_li°
, 
ˇŒout
);

48 
SLIST_HEAD
(
ˇŒout_¶i°
, 
ˇŒout
);

49 
TAILQ_HEAD
(
ˇŒout_èûq
, 
ˇŒout
);

51 
	sˇŒout
 {

53 
LIST_ENTRY
(
ˇŒout
Ë
	mÀ
;

54 
SLIST_ENTRY
(
ˇŒout
Ë
	m¶e
;

55 
TAILQ_ENTRY
(
ˇŒout
Ë
	mtqe
;

56 } 
	mc_löks
;

57 
sbötime_t
 
	mc_time
;

58 
sbötime_t
 
	mc_¥ecisi⁄
;

59 *
	mc_¨g
;

60 (*
	mc_func
)(*);

61 
lock_obje˘
 *
	mc_lock
;

62 
	mc_Êags
;

63 
	mc_iÊags
;

64 vﬁ©ûê
	mc_˝u
;

	@/usr/include/sys/_domainset.h

31 #i‚de‡
_SYS__DOMAINSET_H_


32 
	#_SYS__DOMAINSET_H_


	)

34 
	~<sys/_bô£t.h
>

36 #ifde‡
_KERNEL


37 
	#DOMAINSET_SETSIZE
 
MAXMEMDOM


	)

40 
	#DOMAINSET_MAXSIZE
 256

	)

42 #i‚def 
DOMAINSET_SETSIZE


43 
	#DOMAINSET_SETSIZE
 
DOMAINSET_MAXSIZE


	)

46 
BITSET_DEFINE
(
_domaö£t
, 
DOMAINSET_SETSIZE
);

47 
_domaö£t
 
	tdomaö£t_t
;

54 
	gdomaö£t
;

55 
	sdomaö£t_ªf
 {

56 
domaö£t
 * vﬁ©ûê
	mdr_pﬁicy
;

57 
	mdr_ôî
;

	@/usr/include/sys/_ffcounter.h

34 #i‚de‡
_SYS__FFCOUNTER_H_


35 
	#_SYS__FFCOUNTER_H_


	)

42 
uöt64_t
 
	tffcou¡î
;

	@/usr/include/sys/_iovec.h

35 #i‚de‡
_SYS__IOVEC_H_


36 
	#_SYS__IOVEC_H_


	)

38 
	~<sys/_ty≥s.h
>

40 #i‚de‡
_SIZE_T_DECLARED


41 
__size_t
 
	tsize_t
;

42 
	#_SIZE_T_DECLARED


	)

45 
	siovec
 {

46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/sys/_pctrie.h

33 #i‚de‡
__SYS_PCTRIE_H_


34 
	#__SYS_PCTRIE_H_


	)

39 
	sp˘rõ
 {

40 
uöçå_t
 
	m±_roŸ
;

	@/usr/include/sys/_pthreadtypes.h

38 #i‚de‡
_SYS__PTHREADTYPES_H_


39 
	#_SYS__PTHREADTYPES_H_


	)

46 
	g±hªad
;

47 
	g±hªad_©å
;

48 
	g±hªad_c⁄d
;

49 
	g±hªad_c⁄d_©å
;

50 
	g±hªad_muãx
;

51 
	g±hªad_muãx_©å
;

52 
	g±hªad_⁄˚
;

53 
	g±hªad_rwlock
;

54 
	g±hªad_rwlock©å
;

55 
	g±hªad_b¨rõr
;

56 
	g±hªad_b¨rõr_©å
;

57 
	g±hªad_•ölock
;

66 #i‚de‡
_PTHREAD_T_DECLARED


67 
±hªad
 *
	t±hªad_t
;

68 
	#_PTHREAD_T_DECLARED


	)

70 
±hªad_©å
 *
	t±hªad_©å_t
;

71 
±hªad_muãx
 *
	t±hªad_muãx_t
;

72 
±hªad_muãx_©å
 *
	t±hªad_muãx©å_t
;

73 
±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

74 
±hªad_c⁄d_©å
 *
	t±hªad_c⁄d©å_t
;

75 
	t±hªad_key_t
;

76 
±hªad_⁄˚
 
	t±hªad_⁄˚_t
;

77 
±hªad_rwlock
 *
	t±hªad_rwlock_t
;

78 
±hªad_rwlock©å
 *
	t±hªad_rwlock©å_t
;

79 
±hªad_b¨rõr
 *
	t±hªad_b¨rõr_t
;

80 
±hªad_b¨rõøâr
 *
	t±hªad_b¨rõøâr_t
;

81 
±hªad_•ölock
 *
	t±hªad_•ölock_t
;

89 *
	t±hªad_addr_t
;

90 *(*
	t±hªad_°¨åoutöe_t
)(*);

95 
	s±hªad_⁄˚
 {

96 
	m°©e
;

97 
±hªad_muãx_t
 
	mmuãx
;

	@/usr/include/sys/_rmlock.h

34 #i‚de‡
_SYS__RMLOCK_H_


35 
	#_SYS__RMLOCK_H_


	)

41 
LIST_HEAD
(
rm¥iﬁi°
,
rm_¥iŸøckî
);

43 
	srm_queue
 {

44 
rm_queue
 *vﬁ©ûê
	mrmq_√xt
;

45 
rm_queue
 *vﬁ©ûê
	mrmq_¥ev
;

48 
	srmlock
 {

49 
lock_obje˘
 
	mlock_obje˘
;

50 vﬁ©ûê
˝u£t_t
 
	mrm_wrôe˝us
;

51 
LIST_HEAD
(,
rm_¥iŸøckî
Ë
	mrm_a˘iveRódîs
;

53 
lock_obje˘
 
	m_rm_wlock_obje˘
;

54 
mtx
 
	m_rm_lock_mtx
;

55 
sx
 
	m_rm_lock_sx
;

56 } 
	m_rm_lock
;

59 
	#rm_wlock_obje˘
 
_rm_lock
.
_rm_wlock_obje˘


	)

60 
	#rm_lock_mtx
 
_rm_lock
.
_rm_lock_mtx


	)

61 
	#rm_lock_sx
 
_rm_lock
.
_rm_lock_sx


	)

63 
	srm_¥iŸøckî
 {

64 
rm_queue
 
	mrmp_˝uQueue
;

65 
rmlock
 *
	mrmp_rmlock
;

66 
thªad
 *
	mrmp_thªad
;

67 
	mrmp_Êags
;

68 
LIST_ENTRY
(
rm_¥iŸøckî
Ë
	mrmp_qíåy
;

	@/usr/include/sys/_rwlock.h

31 #i‚de‡
_SYS__RWLOCK_H_


32 
	#_SYS__RWLOCK_H_


	)

34 
	~<machöe/∑øm.h
>

45 
	srwlock
 {

46 
lock_obje˘
 
	mlock_obje˘
;

47 vﬁ©ûê
uöçå_t
 
	mrw_lock
;

59 
	srwlock_∑dÆign
 {

60 
lock_obje˘
 
	mlock_obje˘
;

61 vﬁ©ûê
uöçå_t
 
	mrw_lock
;

62 } 
__Æig√d
(
CACHE_LINE_SIZE
);

	@/usr/include/sys/_semaphore.h

30 #i‚de‡
__SEMAPHORE_H_


31 
	#__SEMAPHORE_H_


	)

33 
öçå_t
 
	t£mid_t
;

34 
	gtime•ec
;

36 
	#SEM_VALUE_MAX
 
__INT_MAX


	)

38 #i‚de‡
_KERNEL


40 
__BEGIN_DECLS


42 
k£m_˛o£
(
£mid_t
 
id
);

43 
k£m_po°
(
£mid_t
 
id
);

44 
k£m_waô
(
£mid_t
 
id
);

45 
k£m_åywaô
(
£mid_t
 
id
);

46 
k£m_timedwaô
(
£mid_t
 
id
, c⁄° 
time•ec
 *
ab°ime
);

47 
k£m_öô
(
£mid_t
 *
idp
, 
vÆue
);

48 
k£m_›í
(
£mid_t
 *
idp
, c⁄° *
«me
, 
oÊag
, 
mode_t
 
mode
,

49 
vÆue
);

50 
k£m_u∆ök
(c⁄° *
«me
);

51 
k£m_gëvÆue
(
£mid_t
 
id
, *
vÆ
);

52 
k£m_de°roy
(
£mid_t
 
id
);

54 
	g__END_DECLS


	@/usr/include/sys/_sockaddr_storage.h

35 #i‚de‡
_SYS__SOCKADDR_STORAGE_H_


36 
	#_SYS__SOCKADDR_STORAGE_H_


	)

41 
	#_SS_MAXSIZE
 128U

	)

42 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

43 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

44 (
ß_Ámûy_t
))

	)

45 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

46 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

48 
	ssockaddr_°‹age
 {

49 
	mss_Àn
;

50 
ß_Ámûy_t
 
	mss_Ámûy
;

51 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

52 
__öt64_t
 
	m__ss_Æign
;

53 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

	@/usr/include/sys/_stdint.h

32 #i‚de‡
_SYS__STDINT_H_


33 
	#_SYS__STDINT_H_


	)

35 #i‚de‡
_INT8_T_DECLARED


36 
__öt8_t
 
	töt8_t
;

37 
	#_INT8_T_DECLARED


	)

40 #i‚de‡
_INT16_T_DECLARED


41 
__öt16_t
 
	töt16_t
;

42 
	#_INT16_T_DECLARED


	)

45 #i‚de‡
_INT32_T_DECLARED


46 
__öt32_t
 
	töt32_t
;

47 
	#_INT32_T_DECLARED


	)

50 #i‚de‡
_INT64_T_DECLARED


51 
__öt64_t
 
	töt64_t
;

52 
	#_INT64_T_DECLARED


	)

55 #i‚de‡
_UINT8_T_DECLARED


56 
__uöt8_t
 
	tuöt8_t
;

57 
	#_UINT8_T_DECLARED


	)

60 #i‚de‡
_UINT16_T_DECLARED


61 
__uöt16_t
 
	tuöt16_t
;

62 
	#_UINT16_T_DECLARED


	)

65 #i‚de‡
_UINT32_T_DECLARED


66 
__uöt32_t
 
	tuöt32_t
;

67 
	#_UINT32_T_DECLARED


	)

70 #i‚de‡
_UINT64_T_DECLARED


71 
__uöt64_t
 
	tuöt64_t
;

72 
	#_UINT64_T_DECLARED


	)

75 #i‚de‡
_INTPTR_T_DECLARED


76 
__öçå_t
 
	töçå_t
;

77 
	#_INTPTR_T_DECLARED


	)

79 #i‚de‡
_UINTPTR_T_DECLARED


80 
__uöçå_t
 
	tuöçå_t
;

81 
	#_UINTPTR_T_DECLARED


	)

83 #i‚de‡
_INTMAX_T_DECLARED


84 
__ötmax_t
 
	tötmax_t
;

85 
	#_INTMAX_T_DECLARED


	)

87 #i‚de‡
_UINTMAX_T_DECLARED


88 
__uötmax_t
 
	tuötmax_t
;

89 
	#_UINTMAX_T_DECLARED


	)

	@/usr/include/sys/_sx.h

33 #i‚def 
_SYS__SX_H_


34 
	#_SYS__SX_H_


	)

39 
	ssx
 {

40 
lock_obje˘
 
	mlock_obje˘
;

41 vﬁ©ûê
uöçå_t
 
	msx_lock
;

	@/usr/include/sys/_task.h

31 #i‚de‡
_SYS__TASK_H_


32 
	#_SYS__TASK_H_


	)

34 
	~<sys/queue.h
>

46 
	tèsk_‚_t
(*
	tc⁄ãxt
, 
	t≥ndög
);

47 
	tgèsk_‚_t
(*
	tc⁄ãxt
);

49 
	sèsk
 {

50 
STAILQ_ENTRY
(
èsk
Ë
	mè_lök
;

51 
uöt16_t
 
	mè_≥ndög
;

52 
u_sh‹t
 
	mè_¥i‹ôy
;

53 
èsk_‚_t
 *
	mè_func
;

54 *
	mè_c⁄ãxt
;

57 
	sgèsk
 {

58 
STAILQ_ENTRY
(
gèsk
Ë
	mè_lök
;

59 
uöt16_t
 
	mè_Êags
;

60 
u_sh‹t
 
	mè_¥i‹ôy
;

61 
gèsk_‚_t
 *
	mè_func
;

62 *
	mè_c⁄ãxt
;

65 
	sgrou±ask
 {

66 
gèsk
 
	mgt_èsk
;

67 *
	mgt_èskqueue
;

68 
LIST_ENTRY
(
grou±ask
Ë
	mgt_li°
;

69 *
	mgt_uniq
;

70 
	#GROUPTASK_NAMELEN
 32

	)

71 
	mgt_«me
[
GROUPTASK_NAMELEN
];

72 
öt16_t
 
	mgt_úq
;

73 
öt16_t
 
	mgt_˝u
;

	@/usr/include/sys/_timespec.h

36 #i‚de‡
_SYS__TIMESPEC_H_


37 
	#_SYS__TIMESPEC_H_


	)

39 
	~<sys/_ty≥s.h
>

41 #i‚de‡
_TIME_T_DECLARED


42 
__time_t
 
	ttime_t
;

43 
	#_TIME_T_DECLARED


	)

46 
	stime•ec
 {

47 
time_t
 
	mtv_£c
;

48 
	mtv_n£c
;

	@/usr/include/sys/_uio.h

35 #i‚de‡
_SYS__UIO_H_


36 
	#_SYS__UIO_H_


	)

38 #i‡
__BSD_VISIBLE


39 
	euio_rw
 {

40 
	mUIO_READ
,

41 
	mUIO_WRITE


45 
	euio_£g
 {

46 
	mUIO_USERSPACE
,

47 
	mUIO_SYSSPACE
,

48 
	mUIO_NOCOPY


	@/usr/include/sys/acl.h

38 #i‚de‡
_SYS_ACL_H_


39 
	#_SYS_ACL_H_


	)

41 
	~<sys/∑øm.h
>

42 
	~<sys/queue.h
>

43 
	~<vm/uma.h
>

49 
uöt32_t
 
	ta˛_èg_t
;

50 
uöt32_t
 
	ta˛_≥rm_t
;

51 
uöt16_t
 
	ta˛_íåy_ty≥_t
;

52 
uöt16_t
 
	ta˛_Êag_t
;

53 
	ta˛_ty≥_t
;

54 *
	ta˛_≥rm£t_t
;

55 
uöt16_t
 *
	ta˛_Êag£t_t
;

69 
	#ACL_MAX_ENTRIES
 254

	)

71 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_ACL_PRIVATE
)

73 
	#POSIX1E_ACL_ACCESS_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

74 
	#POSIX1E_ACL_ACCESS_EXTATTR_NAME
 "posix1e.a˛_ac˚ss"

	)

75 
	#POSIX1E_ACL_DEFAULT_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

76 
	#POSIX1E_ACL_DEFAULT_EXTATTR_NAME
 "posix1e.a˛_deÁu…"

	)

77 
	#NFS4_ACL_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

78 
	#NFS4_ACL_EXTATTR_NAME
 "nfs4.a˛"

	)

79 
	#OLDACL_MAX_ENTRIES
 32

	)

85 
	tﬁda˛_èg_t
;

86 
mode_t
 
	tﬁda˛_≥rm_t
;

88 
	sﬁda˛_íåy
 {

89 
ﬁda˛_èg_t
 
	m´_èg
;

90 
uid_t
 
	m´_id
;

91 
ﬁda˛_≥rm_t
 
	m´_≥rm
;

93 
ﬁda˛_íåy
 *
	tﬁda˛_íåy_t
;

95 
	sﬁda˛
 {

96 
	ma˛_˙t
;

97 
ﬁda˛_íåy
 
	ma˛_íåy
[
OLDACL_MAX_ENTRIES
];

103 
	sa˛_íåy
 {

104 
a˛_èg_t
 
	m´_èg
;

105 
uid_t
 
	m´_id
;

106 
a˛_≥rm_t
 
	m´_≥rm
;

108 
a˛_íåy_ty≥_t
 
	m´_íåy_ty≥
;

110 
a˛_Êag_t
 
	m´_Êags
;

112 
a˛_íåy
 *
	ta˛_íåy_t
;

119 
	sa˛
 {

120 
	ma˛_max˙t
;

121 
	ma˛_˙t
;

123 
	ma˛_•¨e
[4];

124 
a˛_íåy
 
	ma˛_íåy
[
ACL_MAX_ENTRIES
];

130 
	sa˛_t_°ru˘
 {

131 
a˛
 
	m©s_a˛
;

132 
	m©s_cur_íåy
;

141 
	m©s_bønd
;

143 
a˛_t_°ru˘
 *
	ta˛_t
;

147 *
	ta˛_íåy_t
;

148 *
	ta˛_t
;

155 
	#ACL_BRAND_UNKNOWN
 0

	)

156 
	#ACL_BRAND_POSIX
 1

	)

157 
	#ACL_BRAND_NFS4
 2

	)

162 
	#ACL_UNDEFINED_TAG
 0x00000000

	)

163 
	#ACL_USER_OBJ
 0x00000001

	)

164 
	#ACL_USER
 0x00000002

	)

165 
	#ACL_GROUP_OBJ
 0x00000004

	)

166 
	#ACL_GROUP
 0x00000008

	)

167 
	#ACL_MASK
 0x00000010

	)

168 
	#ACL_OTHER
 0x00000020

	)

169 
	#ACL_OTHER_OBJ
 
ACL_OTHER


	)

170 
	#ACL_EVERYONE
 0x00000040

	)

175 
	#ACL_ENTRY_TYPE_ALLOW
 0x0100

	)

176 
	#ACL_ENTRY_TYPE_DENY
 0x0200

	)

177 
	#ACL_ENTRY_TYPE_AUDIT
 0x0400

	)

178 
	#ACL_ENTRY_TYPE_ALARM
 0x0800

	)

184 
	#ACL_TYPE_ACCESS_OLD
 0x00000000

	)

185 
	#ACL_TYPE_DEFAULT_OLD
 0x00000001

	)

186 
	#ACL_TYPE_ACCESS
 0x00000002

	)

187 
	#ACL_TYPE_DEFAULT
 0x00000003

	)

188 
	#ACL_TYPE_NFS4
 0x00000004

	)

194 
	#ACL_EXECUTE
 0x0001

	)

195 
	#ACL_WRITE
 0x0002

	)

196 
	#ACL_READ
 0x0004

	)

197 
	#ACL_PERM_NONE
 0x0000

	)

198 
	#ACL_PERM_BITS
 (
ACL_EXECUTE
 | 
ACL_WRITE
 | 
ACL_READ
)

	)

199 
	#ACL_POSIX1E_BITS
 (
ACL_EXECUTE
 | 
ACL_WRITE
 | 
ACL_READ
)

	)

204 
	#ACL_READ_DATA
 0x00000008

	)

205 
	#ACL_LIST_DIRECTORY
 0x00000008

	)

206 
	#ACL_WRITE_DATA
 0x00000010

	)

207 
	#ACL_ADD_FILE
 0x00000010

	)

208 
	#ACL_APPEND_DATA
 0x00000020

	)

209 
	#ACL_ADD_SUBDIRECTORY
 0x00000020

	)

210 
	#ACL_READ_NAMED_ATTRS
 0x00000040

	)

211 
	#ACL_WRITE_NAMED_ATTRS
 0x00000080

	)

213 
	#ACL_DELETE_CHILD
 0x00000100

	)

214 
	#ACL_READ_ATTRIBUTES
 0x00000200

	)

215 
	#ACL_WRITE_ATTRIBUTES
 0x00000400

	)

216 
	#ACL_DELETE
 0x00000800

	)

217 
	#ACL_READ_ACL
 0x00001000

	)

218 
	#ACL_WRITE_ACL
 0x00002000

	)

219 
	#ACL_WRITE_OWNER
 0x00004000

	)

220 
	#ACL_SYNCHRONIZE
 0x00008000

	)

222 
	#ACL_FULL_SET
 (
ACL_READ_DATA
 | 
ACL_WRITE_DATA
 | \

223 
ACL_APPEND_DATA
 | 
ACL_READ_NAMED_ATTRS
 | 
ACL_WRITE_NAMED_ATTRS
 | \

224 
ACL_EXECUTE
 | 
ACL_DELETE_CHILD
 | 
ACL_READ_ATTRIBUTES
 | \

225 
ACL_WRITE_ATTRIBUTES
 | 
ACL_DELETE
 | 
ACL_READ_ACL
 | 
ACL_WRITE_ACL
 | \

226 
ACL_WRITE_OWNER
 | 
ACL_SYNCHRONIZE
)

	)

228 
	#ACL_MODIFY_SET
 (
ACL_FULL_SET
 & \

229 ~(
ACL_WRITE_ACL
 | 
ACL_WRITE_OWNER
))

	)

231 
	#ACL_READ_SET
 (
ACL_READ_DATA
 | 
ACL_READ_NAMED_ATTRS
 | \

232 
ACL_READ_ATTRIBUTES
 | 
ACL_READ_ACL
)

	)

234 
	#ACL_WRITE_SET
 (
ACL_WRITE_DATA
 | 
ACL_APPEND_DATA
 | \

235 
ACL_WRITE_NAMED_ATTRS
 | 
ACL_WRITE_ATTRIBUTES
)

	)

237 
	#ACL_NFS4_PERM_BITS
 
ACL_FULL_SET


	)

242 
	#ACL_FIRST_ENTRY
 0

	)

243 
	#ACL_NEXT_ENTRY
 1

	)

248 
	#ACL_ENTRY_FILE_INHERIT
 0x0001

	)

249 
	#ACL_ENTRY_DIRECTORY_INHERIT
 0x0002

	)

250 
	#ACL_ENTRY_NO_PROPAGATE_INHERIT
 0x0004

	)

251 
	#ACL_ENTRY_INHERIT_ONLY
 0x0008

	)

252 
	#ACL_ENTRY_SUCCESSFUL_ACCESS
 0x0010

	)

253 
	#ACL_ENTRY_FAILED_ACCESS
 0x0020

	)

254 
	#ACL_ENTRY_INHERITED
 0x0080

	)

256 
	#ACL_FLAGS_BITS
 (
ACL_ENTRY_FILE_INHERIT
 | \

257 
ACL_ENTRY_DIRECTORY_INHERIT
 | 
ACL_ENTRY_NO_PROPAGATE_INHERIT
 | \

258 
ACL_ENTRY_INHERIT_ONLY
 | 
ACL_ENTRY_SUCCESSFUL_ACCESS
 | \

259 
ACL_ENTRY_FAILED_ACCESS
 | 
ACL_ENTRY_INHERITED
)

	)

265 
	#ACL_UNDEFINED_ID
 ((
uid_t
)-1)

	)

270 
	#ACL_TEXT_VERBOSE
 0x01

	)

271 
	#ACL_TEXT_NUMERIC_IDS
 0x02

	)

272 
	#ACL_TEXT_APPEND_ID
 0x04

	)

280 
	#ACL_OVERRIDE_MASK
 (
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
)

	)

281 
	#ACL_PRESERVE_MASK
 (~
ACL_OVERRIDE_MASK
)

	)

283 #ifde‡
_KERNEL


289 
a˛_≥rm_t
 
a˛_posix1e_mode_to_≥rm
(
a˛_èg_t
 
èg
, 
mode_t
 
mode
);

290 
a˛_íåy
 
a˛_posix1e_mode_to_íåy
(
a˛_èg_t
 
èg
, 
uid_t
 
uid
,

291 
gid_t
 
gid
, 
mode_t
 
mode
);

292 
mode_t
 
a˛_posix1e_≥rms_to_mode
(

293 
a˛_íåy
 *
a˛_u£r_obj_íåy
,

294 
a˛_íåy
 *
a˛_group_obj_íåy
,

295 
a˛_íåy
 *
a˛_Ÿhî_íåy
);

296 
mode_t
 
a˛_posix1e_a˛_to_mode
(
a˛
 *acl);

297 
mode_t
 
a˛_posix1e_√wfûemode
(mode_à
cmode
,

298 
a˛
 *
da˛
);

299 
a˛
 *
a˛_Æloc
(
Êags
);

300 
a˛_‰ì
(
a˛
 *
a˛p
);

302 
a˛_nfs4_sync_a˛_‰om_mode
(
a˛
 *
a˛p
,

303 
mode_t
 
mode
, 
fûe_ow√r_id
);

304 
a˛_nfs4_sync_mode_‰om_a˛
(
mode_t
 *
mode
,

305 c⁄° 
a˛
 *
a˛p
);

306 
a˛_nfs4_is_åivül
(c⁄° 
a˛
 *
a˛p
,

307 
fûe_ow√r_id
);

308 
a˛_nfs4_compuã_öhîôed_a˛
(

309 c⁄° 
a˛
 *
∑ª¡_a˛p
,

310 
a˛
 *
chûd_a˛p
, 
mode_t
 
mode
,

311 
fûe_ow√r_id
, 
is_dúe˘‹y
);

312 
a˛_c›y_ﬁda˛_öto_a˛
(c⁄° 
ﬁda˛
 *
sour˚
,

313 
a˛
 *
de°
);

314 
a˛_c›y_a˛_öto_ﬁda˛
(c⁄° 
a˛
 *
sour˚
,

315 
ﬁda˛
 *
de°
);

320 
MALLOC_DECLARE
(
M_ACL
);

324 
a˛_posix1e_check
(
a˛
 *acl);

325 
a˛_nfs4_check
(c⁄° 
a˛
 *
a˛p
, 
is_dúe˘‹y
);

329 #i‡
deföed
(
_ACL_PRIVATE
)

335 
__BEGIN_DECLS


336 
__a˛_a˛check_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

337 
__a˛_a˛check_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
,

338 
a˛
 *
_a˛p
);

339 
__a˛_a˛check_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
,

340 
a˛
 *
_a˛p
);

341 
__a˛_dñëe_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
);

342 
__a˛_dñëe_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

343 
__a˛_dñëe_lök
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

344 
__a˛_gë_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

345 
__a˛_gë_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

346 
__a˛_gë_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

347 
__a˛_£t_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

348 
__a˛_£t_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

349 
__a˛_£t_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

350 
	g__END_DECLS


360 
__BEGIN_DECLS


361 
a˛_add_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

362 
a˛_add_≥rm
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

363 
a˛_ˇlc_mask
(
a˛_t
 *
_a˛_p
);

364 
a˛_˛ór_Êags_≈
(
a˛_Êag£t_t
 
_Êag£t_d
);

365 
a˛_˛ór_≥rms
(
a˛_≥rm£t_t
 
_≥rm£t_d
);

366 
a˛_c›y_íåy
(
a˛_íåy_t
 
_de°_d
,á˛_íåy_à
_§c_d
);

367 
ssize_t
 
a˛_c›y_ext
(*
_buf_p
, 
a˛_t
 
_a˛
, ssize_à
_size
);

368 
a˛_t
 
a˛_c›y_öt
(c⁄° *
_buf_p
);

369 
a˛_¸óã_íåy
(
a˛_t
 *
_a˛_p
, 
a˛_íåy_t
 *
_íåy_p
);

370 
a˛_¸óã_íåy_≈
(
a˛_t
 *
_a˛_p
, 
a˛_íåy_t
 *
_íåy_p
, 
_ödex
);

371 
a˛_dñëe_íåy
(
a˛_t
 
_a˛
, 
a˛_íåy_t
 
_íåy_d
);

372 
a˛_dñëe_íåy_≈
(
a˛_t
 
_a˛
, 
_ödex
);

373 
a˛_dñëe_fd_≈
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
);

374 
a˛_dñëe_fûe_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

375 
a˛_dñëe_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

376 
a˛_dñëe_def_fûe
(c⁄° *
_∑th_p
);

377 
a˛_dñëe_def_lök_≈
(c⁄° *
_∑th_p
);

378 
a˛_dñëe_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

379 
a˛_dñëe_≥rm
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

380 
a˛_t
 
a˛_dup
◊˛_à
_a˛
);

381 
a˛_‰ì
(*
_obj_p
);

382 
a˛_t
 
a˛_‰om_ãxt
(c⁄° *
_buf_p
);

383 
a˛_gë_bønd_≈
(
a˛_t
 
_a˛
, *
_bønd_p
);

384 
a˛_gë_íåy
(
a˛_t
 
_a˛
, 
_íåy_id
, 
a˛_íåy_t
 *
_íåy_p
);

385 
a˛_t
 
a˛_gë_fd
(
_fd
);

386 
a˛_t
 
a˛_gë_fd_≈
(
fd
, 
a˛_ty≥_t
 
_ty≥
);

387 
a˛_t
 
a˛_gë_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

388 
a˛_gë_íåy_ty≥_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_íåy_ty≥_t
 *
_íåy_ty≥_p
);

389 
a˛_t
 
a˛_gë_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

390 *
a˛_gë_quÆifõr
(
a˛_íåy_t
 
_íåy_d
);

391 
a˛_gë_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

392 
a˛_gë_≥rm_≈
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

393 
a˛_gë_Êag£t_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_Êag£t_t
 *
_Êag£t_p
);

394 
a˛_gë_≥rm£t
(
a˛_íåy_t
 
_íåy_d
, 
a˛_≥rm£t_t
 *
_≥rm£t_p
);

395 
a˛_gë_èg_ty≥
(
a˛_íåy_t
 
_íåy_d
, 
a˛_èg_t
 *
_èg_ty≥_p
);

396 
a˛_t
 
a˛_öô
(
_cou¡
);

397 
a˛_£t_fd
(
_fd
, 
a˛_t
 
_a˛
);

398 
a˛_£t_fd_≈
(
_fd
, 
a˛_t
 
_a˛
, 
a˛_ty≥_t
 
_ty≥
);

399 
a˛_£t_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

400 
a˛_£t_íåy_ty≥_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_íåy_ty≥_t
 
_íåy_ty≥
);

401 
a˛_£t_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

402 
a˛_£t_Êag£t_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_Êag£t_t
 
_Êag£t_d
);

403 
a˛_£t_≥rm£t
(
a˛_íåy_t
 
_íåy_d
, 
a˛_≥rm£t_t
 
_≥rm£t_d
);

404 
a˛_£t_quÆifõr
(
a˛_íåy_t
 
_íåy_d
, c⁄° *
_èg_quÆifõr_p
);

405 
a˛_£t_èg_ty≥
(
a˛_íåy_t
 
_íåy_d
, 
a˛_èg_t
 
_èg_ty≥
);

406 
ssize_t
 
a˛_size
(
a˛_t
 
_a˛
);

407 *
a˛_to_ãxt
(
a˛_t
 
_a˛
, 
ssize_t
 *
_Àn_p
);

408 *
a˛_to_ãxt_≈
(
a˛_t
 
_a˛
, 
ssize_t
 *
_Àn_p
, 
_Êags
);

409 
a˛_vÆid
(
a˛_t
 
_a˛
);

410 
a˛_vÆid_fd_≈
(
_fd
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

411 
a˛_vÆid_fûe_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

412 
a˛_vÆid_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

413 
a˛_is_åivül_≈
(c⁄° 
a˛_t
 
_a˛
, *
_åivüÕ
);

414 
a˛_t
 
a˛_°rù_≈
(c⁄°á˛_à
_a˛
, 
ªˇlcuœã_mask
);

415 
	g__END_DECLS


	@/usr/include/sys/buf_ring.h

32 #i‚def 
_SYS_BUF_RING_H_


33 
	#_SYS_BUF_RING_H_


	)

35 
	~<machöe/˝u.h
>

37 #ifde‡
DEBUG_BUFRING


38 
	~<sys/lock.h
>

39 
	~<sys/muãx.h
>

42 
	sbuf_rög
 {

43 vﬁ©ûê
uöt32_t
 
	mbr_¥od_hód
;

44 vﬁ©ûê
uöt32_t
 
	mbr_¥od_èû
;

45 
	mbr_¥od_size
;

46 
	mbr_¥od_mask
;

47 
uöt64_t
 
	mbr_dr›s
;

48 vﬁ©ûê
uöt32_t
 
br_c⁄s_hód
 
__Æig√d
(
CACHE_LINE_SIZE
);

49 vﬁ©ûê
uöt32_t
 
	mbr_c⁄s_èû
;

50 
	mbr_c⁄s_size
;

51 
	mbr_c⁄s_mask
;

52 #ifde‡
DEBUG_BUFRING


53 
mtx
 *
	mbr_lock
;

55 *
	mbr_rög
[0] 
__Æig√d
(
CACHE_LINE_SIZE
);

62 
__ölöe
 

63 
	$buf_rög_íqueue
(
buf_rög
 *
br
, *
buf
)

65 
uöt32_t
 
¥od_hód
, 
¥od_√xt
, 
c⁄s_èû
;

66 #ifde‡
DEBUG_BUFRING


67 
i
;

74 
i
 = 
br
->
br_c⁄s_hód
; i !br->
br_¥od_hód
;

75 
i
 = ((ò+ 1Ë& 
br
->
br_c⁄s_mask
))

76 if(
br
->
br_rög
[
i
] =
buf
)

77 
	`∑nic
("buf=%pálreadyÉnqueueát %dÖrod=%d cons=%d",

78 
buf
, 
i
, 
br
->
br_¥od_èû
, br->
br_c⁄s_èû
);

80 
	`¸ôiˇl_íãr
();

82 
¥od_hód
 = 
br
->
br_¥od_hód
;

83 
¥od_√xt
 = (
¥od_hód
 + 1Ë& 
br
->
br_¥od_mask
;

84 
c⁄s_èû
 = 
br
->
br_c⁄s_èû
;

86 i‡(
¥od_√xt
 =
c⁄s_èû
) {

87 
	`rmb
();

88 i‡(
¥od_hód
 =
br
->
br_¥od_hód
 &&

89 
c⁄s_èû
 =
br
->
br_c⁄s_èû
) {

90 
br
->
br_dr›s
++;

91 
	`¸ôiˇl_exô
();

92  (
ENOBUFS
);

96 } !
	`©omic_cmp£t_acq_öt
(&
br
->
br_¥od_hód
, 
¥od_hód
, 
¥od_√xt
));

97 #ifde‡
DEBUG_BUFRING


98 i‡(
br
->
br_rög
[
¥od_hód
] !
NULL
)

99 
	`∑nic
("dangling value inÉnqueue");

101 
br
->
br_rög
[
¥od_hód
] = 
buf
;

108 
br
->
br_¥od_èû
 !
¥od_hód
)

109 
	`˝u_•öwaô
();

110 
	`©omic_°‹e_ªl_öt
(&
br
->
br_¥od_èû
, 
¥od_√xt
);

111 
	`¸ôiˇl_exô
();

113 
	}
}

119 
__ölöe
 *

120 
	$buf_rög_dequeue_mc
(
buf_rög
 *
br
)

122 
uöt32_t
 
c⁄s_hód
, 
c⁄s_√xt
;

123 *
buf
;

125 
	`¸ôiˇl_íãr
();

127 
c⁄s_hód
 = 
br
->
br_c⁄s_hód
;

128 
c⁄s_√xt
 = (
c⁄s_hód
 + 1Ë& 
br
->
br_c⁄s_mask
;

130 i‡(
c⁄s_hód
 =
br
->
br_¥od_èû
) {

131 
	`¸ôiˇl_exô
();

132  (
NULL
);

134 } !
	`©omic_cmp£t_acq_öt
(&
br
->
br_c⁄s_hód
, 
c⁄s_hód
, 
c⁄s_√xt
));

136 
buf
 = 
br
->
br_rög
[
c⁄s_hód
];

137 #ifde‡
DEBUG_BUFRING


138 
br
->
br_rög
[
c⁄s_hód
] = 
NULL
;

145 
br
->
br_c⁄s_èû
 !
c⁄s_hód
)

146 
	`˝u_•öwaô
();

148 
	`©omic_°‹e_ªl_öt
(&
br
->
br_c⁄s_èû
, 
c⁄s_√xt
);

149 
	`¸ôiˇl_exô
();

151  (
buf
);

152 
	}
}

159 
__ölöe
 *

160 
	$buf_rög_dequeue_sc
(
buf_rög
 *
br
)

162 
uöt32_t
 
c⁄s_hód
, 
c⁄s_√xt
;

163 #ifde‡
PREFETCH_DEFINED


164 
uöt32_t
 
c⁄s_√xt_√xt
;

166 
uöt32_t
 
¥od_èû
;

167 *
buf
;

194 #i‡
	`deföed
(
__¨m__
Ë|| deföed(
__Ørch64__
)

195 
c⁄s_hód
 = 
	`©omic_lﬂd_acq_32
(&
br
->
br_c⁄s_hód
);

197 
c⁄s_hód
 = 
br
->
br_c⁄s_hód
;

199 
¥od_èû
 = 
	`©omic_lﬂd_acq_32
(&
br
->
br_¥od_èû
);

201 
c⁄s_√xt
 = (
c⁄s_hód
 + 1Ë& 
br
->
br_c⁄s_mask
;

202 #ifde‡
PREFETCH_DEFINED


203 
c⁄s_√xt_√xt
 = (
c⁄s_hód
 + 2Ë& 
br
->
br_c⁄s_mask
;

206 i‡(
c⁄s_hód
 =
¥od_èû
)

207  (
NULL
);

209 #ifde‡
PREFETCH_DEFINED


210 i‡(
c⁄s_√xt
 !
¥od_èû
) {

211 
	`¥e„tch
(
br
->
br_rög
[
c⁄s_√xt
]);

212 i‡(
c⁄s_√xt_√xt
 !
¥od_èû
)

213 
	`¥e„tch
(
br
->
br_rög
[
c⁄s_√xt_√xt
]);

216 
br
->
br_c⁄s_hód
 = 
c⁄s_√xt
;

217 
buf
 = 
br
->
br_rög
[
c⁄s_hód
];

219 #ifde‡
DEBUG_BUFRING


220 
br
->
br_rög
[
c⁄s_hód
] = 
NULL
;

221 i‡(!
	`mtx_ow√d
(
br
->
br_lock
))

222 
	`∑nic
("lockÇot held on single consumer dequeue");

223 i‡(
br
->
br_c⁄s_èû
 !
c⁄s_hód
)

224 
	`∑nic
("inconsistentÜist cons_tail=%d cons_head=%d",

225 
br
->
br_c⁄s_èû
, 
c⁄s_hód
);

227 
br
->
br_c⁄s_èû
 = 
c⁄s_√xt
;

228  (
buf
);

229 
	}
}

236 
__ölöe
 

237 
	$buf_rög_adv™˚_sc
(
buf_rög
 *
br
)

239 
uöt32_t
 
c⁄s_hód
, 
c⁄s_√xt
;

240 
uöt32_t
 
¥od_èû
;

242 
c⁄s_hód
 = 
br
->
br_c⁄s_hód
;

243 
¥od_èû
 = 
br
->
br_¥od_èû
;

245 
c⁄s_√xt
 = (
c⁄s_hód
 + 1Ë& 
br
->
br_c⁄s_mask
;

246 i‡(
c⁄s_hód
 =
¥od_èû
)

248 
br
->
br_c⁄s_hód
 = 
c⁄s_√xt
;

249 #ifde‡
DEBUG_BUFRING


250 
br
->
br_rög
[
c⁄s_hód
] = 
NULL
;

252 
br
->
br_c⁄s_èû
 = 
c⁄s_√xt
;

253 
	}
}

271 
__ölöe
 

272 
	$buf_rög_putback_sc
(
buf_rög
 *
br
, *
√w
)

274 
	`KASSERT
(
br
->
br_c⁄s_hód
 !br->
br_¥od_èû
,

276 
br
->
br_rög
[br->
br_c⁄s_hód
] = 
√w
;

277 
	}
}

284 
__ölöe
 *

285 
	$buf_rög_≥ek
(
buf_rög
 *
br
)

288 #ifde‡
DEBUG_BUFRING


289 i‡((
br
->
br_lock
 !
NULL
Ë&& !
	`mtx_ow√d
(br->br_lock))

290 
	`∑nic
("lockÇot held on single consumer dequeue");

298 i‡(
br
->
br_c⁄s_hód
 =br->
br_¥od_èû
)

299  (
NULL
);

301  (
br
->
br_rög
[br->
br_c⁄s_hód
]);

302 
	}
}

304 
__ölöe
 *

305 
	$buf_rög_≥ek_˛ór_sc
(
buf_rög
 *
br
)

307 #ifde‡
DEBUG_BUFRING


308 *
ªt
;

310 i‡(!
	`mtx_ow√d
(
br
->
br_lock
))

311 
	`∑nic
("lockÇot held on single consumer dequeue");

319 i‡(
br
->
br_c⁄s_hód
 =br->
br_¥od_èû
)

320  (
NULL
);

322 #ifde‡
DEBUG_BUFRING


327 
ªt
 = 
br
->
br_rög
[br->
br_c⁄s_hód
];

328 
br
->
br_rög
[br->
br_c⁄s_hód
] = 
NULL
;

329  (
ªt
);

331  (
br
->
br_rög
[br->
br_c⁄s_hód
]);

333 
	}
}

335 
__ölöe
 

336 
	$buf_rög_fuŒ
(
buf_rög
 *
br
)

339  (((
br
->
br_¥od_hód
 + 1Ë& br->
br_¥od_mask
Ë=br->
br_c⁄s_èû
);

340 
	}
}

342 
__ölöe
 

343 
	$buf_rög_em±y
(
buf_rög
 *
br
)

346  (
br
->
br_c⁄s_hód
 =br->
br_¥od_èû
);

347 
	}
}

349 
__ölöe
 

350 
	$buf_rög_cou¡
(
buf_rög
 *
br
)

353  ((
br
->
br_¥od_size
 + br->
br_¥od_èû
 - br->
br_c⁄s_èû
)

354 & 
br
->
br_¥od_mask
);

355 
	}
}

357 
buf_rög
 *
buf_rög_Æloc
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
,

358 
mtx
 *);

359 
buf_rög_‰ì
(
buf_rög
 *
br
, 
mÆloc_ty≥
 *
ty≥
);

	@/usr/include/sys/bufobj.h

51 #i‚de‡
_SYS_BUFOBJ_H_


52 
	#_SYS_BUFOBJ_H_


	)

54 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KVM_VNODE
)

56 
	~<sys/queue.h
>

57 
	~<sys/_lock.h
>

58 
	~<sys/_rwlock.h
>

59 
	~<sys/_p˘rõ.h
>

61 
	gbufobj
;

62 
	gbuf_›s
;

64 
buf_›s
 
buf_›s_bio
;

66 
TAILQ_HEAD
(
buÊi°s
, 
buf
);

69 
	sbufv
 {

70 
buÊi°s
 
	mbv_hd
;

71 
p˘rõ
 
	mbv_roŸ
;

72 
	mbv_˙t
;

75 
	tb_°øãgy_t
(
	tbufobj
 *, 
	tbuf
 *);

76 
	tb_wrôe_t
(
	tbuf
 *);

77 
	tb_sync_t
(
	tbufobj
 *, 
	twaôf‹
);

78 
	tb_bdÊush_t
(
	tbufobj
 *, 
	tbuf
 *);

80 
	sbuf_›s
 {

81 *
	mb›_«me
;

82 
b_wrôe_t
 *
	mb›_wrôe
;

83 
b_°øãgy_t
 *
	mb›_°øãgy
;

84 
b_sync_t
 *
	mb›_sync
;

85 
b_bdÊush_t
 *
	mb›_bdÊush
;

88 
	#BO_STRATEGY
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_°øãgy
((bo), (bp)))

	)

89 
	#BO_SYNC
(
bo
, 
w
Ë((bo)->
bo_›s
->
	`b›_sync
((bo), (w)))

	)

90 
	#BO_WRITE
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_wrôe
((bp)))

	)

91 
	#BO_BDFLUSH
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_bdÊush
((bo), (bp)))

	)

99 
	sbufobj
 {

100 
rwlock
 
	mbo_lock
;

101 
buf_›s
 *
	mbo_›s
;

102 
vm_obje˘
 *
	mbo_obje˘
;

103 
LIST_ENTRY
(
bufobj
Ë
	mbo_syn˛i°
;

104 *
	mbo_¥iv©e
;

105 
bufv
 
	mbo_˛ón
;

106 
bufv
 
	mbo_dúty
;

107 
	mbo_numouçut
;

108 
u_öt
 
	mbo_Êag
;

109 
	mbo_domaö
;

110 
	mbo_bsize
;

117 
	#BO_ONWORKLST
 (1 << 0Ë

	)

118 
	#BO_WWAIT
 (1 << 1Ë

	)

119 
	#BO_DEAD
 (1 << 2Ë

	)

121 
	#BO_LOCKPTR
(
bo
Ë(&(bo)->
bo_lock
)

	)

122 
	#BO_LOCK
(
bo
Ë
	`rw_wlock
(
	`BO_LOCKPTR
((bo)))

	)

123 
	#BO_UNLOCK
(
bo
Ë
	`rw_wu∆ock
(
	`BO_LOCKPTR
((bo)))

	)

124 
	#BO_RLOCK
(
bo
Ë
	`rw_æock
(
	`BO_LOCKPTR
((bo)))

	)

125 
	#BO_RUNLOCK
(
bo
Ë
	`rw_ru∆ock
(
	`BO_LOCKPTR
((bo)))

	)

126 
	#ASSERT_BO_WLOCKED
(
bo
Ë
	`rw_as£π
(
	`BO_LOCKPTR
((bo)), 
RA_WLOCKED
)

	)

127 
	#ASSERT_BO_LOCKED
(
bo
Ë
	`rw_as£π
(
	`BO_LOCKPTR
((bo)), 
RA_LOCKED
)

	)

128 
	#ASSERT_BO_UNLOCKED
(
bo
Ë
	`rw_as£π
(
	`BO_LOCKPTR
((bo)), 
RA_UNLOCKED
)

	)

130 
bufobj_öô
(
bufobj
 *
bo
, *
¥iv©e
);

131 
bufobj_wdr›
(
bufobj
 *
bo
);

132 
bufobj_wªf
(
bufobj
 *
bo
);

133 
bufobj_wªÊ
(
bufobj
 *
bo
);

134 
bufobj_övÆbuf
(
bufobj
 *
bo
, 
Êags
, 
¶pÊag
, 
¶±imeo
);

135 
bufobj_wwaô
(
bufobj
 *
bo
, 
¶pÊag
, 
timeo
);

136 
bufsync
(
bufobj
 *
bo
, 
waôf‹
);

137 
bufbdÊush
(
bufobj
 *
bo
, 
buf
 *
bp
);

	@/usr/include/sys/callout.h

40 #i‚de‡
_SYS_CALLOUT_H_


41 
	#_SYS_CALLOUT_H_


	)

43 
	~<sys/_ˇŒout.h
>

45 
	#CALLOUT_LOCAL_ALLOC
 0x0001

	)

46 
	#CALLOUT_ACTIVE
 0x0002

	)

47 
	#CALLOUT_PENDING
 0x0004

	)

48 
	#CALLOUT_MPSAFE
 0x0008

	)

49 
	#CALLOUT_RETURNUNLOCKED
 0x0010

	)

50 
	#CALLOUT_SHAREDLOCK
 0x0020

	)

51 
	#CALLOUT_DFRMIGRATION
 0x0040

	)

52 
	#CALLOUT_PROCESSED
 0x0080

	)

53 
	#CALLOUT_DIRECT
 0x0100

	)

55 
	#C_DIRECT_EXEC
 0x0001

	)

56 
	#C_PRELBITS
 7

	)

57 
	#C_PRELRANGE
 ((1 << 
C_PRELBITS
Ë- 1)

	)

58 
	#C_PREL
(
x
Ë(((xË+ 1Ë<< 1)

	)

59 
	#C_PRELGET
(
x
Ë()((((xË>> 1Ë& 
C_PRELRANGE
Ë- 1)

	)

60 
	#C_HARDCLOCK
 0x0100

	)

61 
	#C_ABSOLUTE
 0x0200

	)

62 
	#C_PRECALC
 0x0400

	)

63 
	#C_CATCH
 0x0800

	)

65 
	sˇŒout_h™dÀ
 {

66 
ˇŒout
 *
	mˇŒout
;

70 
	#CS_DRAIN
 0x0001

	)

71 
	#CS_EXECUTING
 0x0002

	)

74 #ifde‡
_KERNEL


91 
	#ˇŒout_a˘ive
(
c
Ë((c)->
c_Êags
 & 
CALLOUT_ACTIVE
)

	)

92 
	#ˇŒout_dó˘iv©e
(
c
Ë((c)->
c_Êags
 &~
CALLOUT_ACTIVE
)

	)

93 
	#ˇŒout_døö
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 
CS_DRAIN
, 
NULL
)

	)

94 
ˇŒout_öô
(
ˇŒout
 *, );

95 
_ˇŒout_öô_lock
(
ˇŒout
 *, 
lock_obje˘
 *, );

96 
	#ˇŒout_öô_mtx
(
c
, 
mtx
, 
Êags
) \

97 
	`_ˇŒout_öô_lock
((
c
), ((
mtx
Ë!
NULL
Ë? &(mtx)->
lock_obje˘
 : \

98 
NULL
, (
Êags
))

	)

99 
	#ˇŒout_öô_rm
(
c
, 
rm
, 
Êags
) \

100 
	`_ˇŒout_öô_lock
((
c
), ((
rm
Ë!
NULL
Ë? &‘m)->
lock_obje˘
 : \

101 
NULL
, (
Êags
))

	)

102 
	#ˇŒout_öô_rw
(
c
, 
rw
, 
Êags
) \

103 
	`_ˇŒout_öô_lock
((
c
), ((
rw
Ë!
NULL
Ë? &‘w)->
lock_obje˘
 : \

104 
NULL
, (
Êags
))

	)

105 
	#ˇŒout_≥ndög
(
c
Ë((c)->
c_iÊags
 & 
CALLOUT_PENDING
)

	)

106 
ˇŒout_ª£t_sbt_⁄
(
ˇŒout
 *, 
sbötime_t
, sbintime_t,

108 
	#ˇŒout_ª£t_sbt
(
c
, 
sbt
, 
¥
, 
‚
, 
¨g
, 
Êags
) \

109 
	`ˇŒout_ª£t_sbt_⁄
((
c
), (
sbt
), (
¥
), (
‚
), (
¨g
), -1, (
Êags
))

	)

110 
	#ˇŒout_ª£t_sbt_cur˝u
(
c
, 
sbt
, 
¥
, 
‚
, 
¨g
, 
Êags
) \

111 
	`ˇŒout_ª£t_sbt_⁄
((
c
), (
sbt
), (
¥
), (
‚
), (
¨g
), 
	`PCPU_GET
(
˝uid
),\

112 (
Êags
))

	)

113 
	#ˇŒout_ª£t_⁄
(
c
, 
to_ticks
, 
‚
, 
¨g
, 
˝u
) \

114 
	`ˇŒout_ª£t_sbt_⁄
((
c
), 
tick_sbt
 * (
to_ticks
), 0, (
‚
), (
¨g
), \

115 (
˝u
), 
C_HARDCLOCK
)

	)

116 
	#ˇŒout_ª£t
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

117 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), -1)

	)

118 
	#ˇŒout_ª£t_cur˝u
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

119 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), 
	`PCPU_GET
(
˝uid
))

	)

120 
	#ˇŒout_scheduÀ_sbt_⁄
(
c
, 
sbt
, 
¥
, 
˝u
, 
Êags
) \

121 
	`ˇŒout_ª£t_sbt_⁄
((
c
), (
sbt
), (
¥
), (c)->
c_func
, (c)->
c_¨g
, \

122 (
˝u
), (
Êags
))

	)

123 
	#ˇŒout_scheduÀ_sbt
(
c
, 
sbt
, 
¥
, 
Êags
) \

124 
	`ˇŒout_scheduÀ_sbt_⁄
((
c
), (
sbt
), (
¥
), -1, (
Êags
))

	)

125 
	#ˇŒout_scheduÀ_sbt_cur˝u
(
c
, 
sbt
, 
¥
, 
Êags
) \

126 
	`ˇŒout_scheduÀ_sbt_⁄
((
c
), (
sbt
), (
¥
), 
	`PCPU_GET
(
˝uid
), (
Êags
))

	)

127 
	`ˇŒout_scheduÀ
(
ˇŒout
 *, );

128 
	`ˇŒout_scheduÀ_⁄
(
ˇŒout
 *, , );

129 
	#ˇŒout_scheduÀ_cur˝u
(
c
, 
⁄_tick
) \

130 
	`ˇŒout_scheduÀ_⁄
((
c
), (
⁄_tick
), 
	`PCPU_GET
(
˝uid
))

	)

131 
	#ˇŒout_°›
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 0, 
NULL
)

	)

132 
	`_ˇŒout_°›_ß„
(
ˇŒout
 *, , (*)(*));

133 
	`ˇŒout_¥o˚ss
(
sbötime_t
 
now
);

134 
	#ˇŒout_async_døö
(
c
, 
d
) \

135 
	`_ˇŒout_°›_ß„
(
c
, 0, 
d
)

	)

136 
	`ˇŒout_whí
(
sbötime_t
 
sbt
, sbötime_à
¥ecisi⁄
, 
Êags
,

137 
sbötime_t
 *
sbt_ªs
, sbötime_à*
¥ec_ªs
);

	@/usr/include/sys/ck.h

4 #ifde‡
_KERNEL


5 
	~<ck_queue.h
>

6 
	~<ck_ïoch.h
>

8 
	~<sys/queue.h
>

9 
	#CK_STAILQ_HEAD
 
STAILQ_HEAD


	)

10 
	#CK_STAILQ_ENTRY
 
STAILQ_ENTRY


	)

11 
	#CK_LIST_HEAD
 
LIST_HEAD


	)

12 
	#CK_LIST_ENTRY
 
LIST_ENTRY


	)

	@/usr/include/sys/counter.h

31 #i‚de‡
__SYS_COUNTER_H__


32 
	#__SYS_COUNTER_H__


	)

34 
uöt64_t
 *
	tcou¡î_u64_t
;

36 #ifde‡
_KERNEL


37 
	~<machöe/cou¡î.h
>

39 
cou¡î_u64_t
 
cou¡î_u64_Æloc
();

40 
cou¡î_u64_‰ì
(
cou¡î_u64_t
);

42 
cou¡î_u64_zîo
(
cou¡î_u64_t
);

43 
uöt64_t
 
cou¡î_u64_„tch
(
cou¡î_u64_t
);

45 
	#COUNTER_ARRAY_ALLOC
(
a
, 
n
, 
waô
) do { \

46 
i
 = 0; i < (
n
); i++) \

47 (
a
)[
i
] = 
	`cou¡î_u64_Æloc
(
waô
); \

48 } 0)

	)

50 
	#COUNTER_ARRAY_FREE
(
a
, 
n
) do { \

51 
i
 = 0; i < (
n
); i++) \

52 
	`cou¡î_u64_‰ì
((
a
)[
i
]); \

53 } 0)

	)

55 
	#COUNTER_ARRAY_COPY
(
a
, 
d°p
, 
n
) do { \

56 
i
 = 0; i < (
n
); i++) \

57 ((
uöt64_t
 *)(
d°p
))[
i
] = 
	`cou¡î_u64_„tch
((
a
)[i]);\

58 } 0)

	)

60 
	#COUNTER_ARRAY_ZERO
(
a
, 
n
) do { \

61 
i
 = 0; i < (
n
); i++) \

62 
	`cou¡î_u64_zîo
((
a
)[
i
]); \

63 } 0)

	)

68 
	scou¡î_øã
 {

69 
cou¡î_u64_t
 
	m¸_øã
;

70 vﬁ©ûê
	m¸_lock
;

71 
	m¸_ticks
;

72 
	m¸_ovî
;

75 
öt64_t
 
cou¡î_øãcheck
(
cou¡î_øã
 *, int64_t);

	@/usr/include/sys/cpuset.h

34 #i‚de‡
_SYS_CPUSET_H_


35 
	#_SYS_CPUSET_H_


	)

37 
	~<sys/_˝u£t.h
>

39 
	~<sys/bô£t.h
>

41 
	#_NCPUBITS
 
_BITSET_BITS


	)

42 
	#_NCPUWORDS
 
	`__bô£t_w‹ds
(
CPU_SETSIZE
)

	)

44 
	#CPUSETBUFSIZ
 ((2 + (Ë* 2Ë* 
_NCPUWORDS
)

	)

46 
	#CPU_CLR
(
n
, 
p
Ë
	`BIT_CLR
(
CPU_SETSIZE
,Ç,Ö)

	)

47 
	#CPU_COPY
(
f
, 
t
Ë
	`BIT_COPY
(
CPU_SETSIZE
, f,Å)

	)

48 
	#CPU_ISSET
(
n
, 
p
Ë
	`BIT_ISSET
(
CPU_SETSIZE
,Ç,Ö)

	)

49 
	#CPU_SET
(
n
, 
p
Ë
	`BIT_SET
(
CPU_SETSIZE
,Ç,Ö)

	)

50 
	#CPU_ZERO
(
p
Ë
	`BIT_ZERO
(
CPU_SETSIZE
,Ö)

	)

51 
	#CPU_FILL
(
p
Ë
	`BIT_FILL
(
CPU_SETSIZE
,Ö)

	)

52 
	#CPU_SETOF
(
n
, 
p
Ë
	`BIT_SETOF
(
CPU_SETSIZE
,Ç,Ö)

	)

53 
	#CPU_EMPTY
(
p
Ë
	`BIT_EMPTY
(
CPU_SETSIZE
,Ö)

	)

54 
	#CPU_ISFULLSET
(
p
Ë
	`BIT_ISFULLSET
(
CPU_SETSIZE
,Ö)

	)

55 
	#CPU_SUBSET
(
p
, 
c
Ë
	`BIT_SUBSET
(
CPU_SETSIZE
,Ö, c)

	)

56 
	#CPU_OVERLAP
(
p
, 
c
Ë
	`BIT_OVERLAP
(
CPU_SETSIZE
,Ö, c)

	)

57 
	#CPU_CMP
(
p
, 
c
Ë
	`BIT_CMP
(
CPU_SETSIZE
,Ö, c)

	)

58 
	#CPU_OR
(
d
, 
s
Ë
	`BIT_OR
(
CPU_SETSIZE
, d, s)

	)

59 
	#CPU_AND
(
d
, 
s
Ë
	`BIT_AND
(
CPU_SETSIZE
, d, s)

	)

60 
	#CPU_NAND
(
d
, 
s
Ë
	`BIT_NAND
(
CPU_SETSIZE
, d, s)

	)

61 
	#CPU_CLR_ATOMIC
(
n
, 
p
Ë
	`BIT_CLR_ATOMIC
(
CPU_SETSIZE
,Ç,Ö)

	)

62 
	#CPU_SET_ATOMIC
(
n
, 
p
Ë
	`BIT_SET_ATOMIC
(
CPU_SETSIZE
,Ç,Ö)

	)

63 
	#CPU_SET_ATOMIC_ACQ
(
n
, 
p
Ë
	`BIT_SET_ATOMIC_ACQ
(
CPU_SETSIZE
,Ç,Ö)

	)

64 
	#CPU_AND_ATOMIC
(
n
, 
p
Ë
	`BIT_AND_ATOMIC
(
CPU_SETSIZE
,Ç,Ö)

	)

65 
	#CPU_OR_ATOMIC
(
d
, 
s
Ë
	`BIT_OR_ATOMIC
(
CPU_SETSIZE
, d, s)

	)

66 
	#CPU_COPY_STORE_REL
(
f
, 
t
Ë
	`BIT_COPY_STORE_REL
(
CPU_SETSIZE
, f,Å)

	)

67 
	#CPU_FFS
(
p
Ë
	`BIT_FFS
(
CPU_SETSIZE
,Ö)

	)

68 
	#CPU_COUNT
(
p
Ë
	`BIT_COUNT
(
CPU_SETSIZE
,Ö)

	)

69 
	#CPUSET_FSET
 
	`BITSET_FSET
(
_NCPUWORDS
)

	)

70 
	#CPUSET_T_INITIALIZER
 
BITSET_T_INITIALIZER


	)

75 
	#CPU_LEVEL_ROOT
 1

	)

76 
	#CPU_LEVEL_CPUSET
 2

	)

77 
	#CPU_LEVEL_WHICH
 3

	)

82 
	#CPU_WHICH_TID
 1

	)

83 
	#CPU_WHICH_PID
 2

	)

84 
	#CPU_WHICH_CPUSET
 3

	)

85 
	#CPU_WHICH_IRQ
 4

	)

86 
	#CPU_WHICH_JAIL
 5

	)

87 
	#CPU_WHICH_DOMAIN
 6

	)

88 
	#CPU_WHICH_INTRHANDLER
 7

	)

89 
	#CPU_WHICH_ITHREAD
 8

	)

94 
	#CPUSET_INVALID
 -1

	)

95 
	#CPUSET_DEFAULT
 0

	)

97 #ifde‡
_KERNEL


98 
	~<sys/queue.h
>

100 
LIST_HEAD
(
£éi°
, 
˝u£t
);

113 
	s˝u£t
 {

114 
˝u£t_t
 
	mcs_mask
;

115 
domaö£t
 *
	mcs_domaö
;

116 vﬁ©ûê
u_öt
 
	mcs_ªf
;

117 
	mcs_Êags
;

118 
˝u£tid_t
 
	mcs_id
;

119 
˝u£t
 *
	mcs_∑ª¡
;

120 
LIST_ENTRY
(
˝u£t
Ë
	mcs_lök
;

121 
LIST_ENTRY
(
˝u£t
Ë
	mcs_siblögs
;

122 
£éi°
 
	mcs_chûdªn
;

125 
	#CPU_SET_ROOT
 0x0001

	)

126 
	#CPU_SET_RDONLY
 0x0002

	)

128 
˝u£t_t
 *
˝u£t_roŸ
;

129 
	g¥is⁄
;

130 
	g¥oc
;

131 
	gthªad
;

133 
˝u£t
 *
˝u£t_thªad0
();

134 
˝u£t
 *
˝u£t_ªf
(cpuset *);

135 
˝u£t_ªl
(
˝u£t
 *);

136 
˝u£t_£âhªad
(
lwpid_t
 
id
, 
˝u£t_t
 *);

137 
˝u£t_£tôhªad
(
lwpid_t
 
id
, 
˝u
);

138 
˝u£t_¸óã_roŸ
(
¥is⁄
 *, 
˝u£t
 **);

139 
˝u£t_£çroc_upd©e_£t
(
¥oc
 *, 
˝u£t
 *);

140 
˝u£t_which
(
˝uwhich_t
, 
id_t
, 
¥oc
 **,

141 
thªad
 **, 
˝u£t
 **);

142 
˝u£t_kî¡hªad
(
thªad
 *);

144 *
˝u£tobj_°Ωröt
(*, c⁄° 
˝u£t_t
 *);

145 
˝u£tobj_°rsˇn
(
˝u£t_t
 *, const *);

146 #ifde‡
DDB


147 
ddb_di•œy_˝u£t
(c⁄° 
˝u£t_t
 *);

151 
__BEGIN_DECLS


152 
˝u£t
(
˝u£tid_t
 *);

153 
˝u£t_£tid
(
˝uwhich_t
, 
id_t
, 
˝u£tid_t
);

154 
˝u£t_gëid
(
˝uÀvñ_t
, 
˝uwhich_t
, 
id_t
, 
˝u£tid_t
 *);

155 
˝u£t_gëafföôy
(
˝uÀvñ_t
, 
˝uwhich_t
, 
id_t
, 
size_t
, 
˝u£t_t
 *);

156 
˝u£t_£èfföôy
(
˝uÀvñ_t
, 
˝uwhich_t
, 
id_t
, 
size_t
, c⁄° 
˝u£t_t
 *);

157 
	g__END_DECLS


	@/usr/include/sys/domainset.h

31 #i‚de‡
_SYS_DOMAINSET_H_


32 
	#_SYS_DOMAINSET_H_


	)

34 
	~<sys/_domaö£t.h
>

35 
	~<sys/bô£t.h
>

36 
	~<sys/queue.h
>

38 
	#_NDOMAINSETBITS
 
_BITSET_BITS


	)

39 
	#_NDOMAINSETWORDS
 
	`__bô£t_w‹ds
(
DOMAINSET_SETSIZE
)

	)

41 
	#DOMAINSETBUFSIZ
 \

42 (((2 + (Ë* 2Ë* 
_NDOMAINSETWORDS
) + \

43 ("::"Ë+ (
	`__XSTRING
(
DOMAINSET_POLICY_MAX
)) + \

44 (
	`__XSTRING
(
MAXMEMDOM
)))

	)

47 
	#DOMAINSET_CLR
(
n
, 
p
Ë
	`BIT_CLR
(
DOMAINSET_SETSIZE
,Ç,Ö)

	)

48 
	#DOMAINSET_COPY
(
f
, 
t
Ë
	`BIT_COPY
(
DOMAINSET_SETSIZE
, f,Å)

	)

49 
	#DOMAINSET_ISSET
(
n
, 
p
Ë
	`BIT_ISSET
(
DOMAINSET_SETSIZE
,Ç,Ö)

	)

50 
	#DOMAINSET_SET
(
n
, 
p
Ë
	`BIT_SET
(
DOMAINSET_SETSIZE
,Ç,Ö)

	)

51 
	#DOMAINSET_ZERO
(
p
Ë
	`BIT_ZERO
(
DOMAINSET_SETSIZE
,Ö)

	)

52 
	#DOMAINSET_FILL
(
p
Ë
	`BIT_FILL
(
DOMAINSET_SETSIZE
,Ö)

	)

53 
	#DOMAINSET_SETOF
(
n
, 
p
Ë
	`BIT_SETOF
(
DOMAINSET_SETSIZE
,Ç,Ö)

	)

54 
	#DOMAINSET_EMPTY
(
p
Ë
	`BIT_EMPTY
(
DOMAINSET_SETSIZE
,Ö)

	)

55 
	#DOMAINSET_ISFULLSET
(
p
Ë
	`BIT_ISFULLSET
(
DOMAINSET_SETSIZE
,Ö)

	)

56 
	#DOMAINSET_SUBSET
(
p
, 
c
Ë
	`BIT_SUBSET
(
DOMAINSET_SETSIZE
,Ö, c)

	)

57 
	#DOMAINSET_OVERLAP
(
p
, 
c
Ë
	`BIT_OVERLAP
(
DOMAINSET_SETSIZE
,Ö, c)

	)

58 
	#DOMAINSET_CMP
(
p
, 
c
Ë
	`BIT_CMP
(
DOMAINSET_SETSIZE
,Ö, c)

	)

59 
	#DOMAINSET_OR
(
d
, 
s
Ë
	`BIT_OR
(
DOMAINSET_SETSIZE
, d, s)

	)

60 
	#DOMAINSET_AND
(
d
, 
s
Ë
	`BIT_AND
(
DOMAINSET_SETSIZE
, d, s)

	)

61 
	#DOMAINSET_NAND
(
d
, 
s
Ë
	`BIT_NAND
(
DOMAINSET_SETSIZE
, d, s)

	)

62 
	#DOMAINSET_CLR_ATOMIC
(
n
, 
p
Ë
	`BIT_CLR_ATOMIC
(
DOMAINSET_SETSIZE
,Ç,Ö)

	)

63 
	#DOMAINSET_SET_ATOMIC
(
n
, 
p
Ë
	`BIT_SET_ATOMIC
(
DOMAINSET_SETSIZE
,Ç,Ö)

	)

64 
	#DOMAINSET_SET_ATOMIC_ACQ
(
n
, 
p
) \

65 
	`BIT_SET_ATOMIC_ACQ
(
DOMAINSET_SETSIZE
, 
n
, 
p
)

	)

66 
	#DOMAINSET_AND_ATOMIC
(
n
, 
p
Ë
	`BIT_AND_ATOMIC
(
DOMAINSET_SETSIZE
,Ç,Ö)

	)

67 
	#DOMAINSET_OR_ATOMIC
(
d
, 
s
Ë
	`BIT_OR_ATOMIC
(
DOMAINSET_SETSIZE
, d, s)

	)

68 
	#DOMAINSET_COPY_STORE_REL
(
f
, 
t
) \

69 
	`BIT_COPY_STORE_REL
(
DOMAINSET_SETSIZE
, 
f
, 
t
)

	)

70 
	#DOMAINSET_FFS
(
p
Ë
	`BIT_FFS
(
DOMAINSET_SETSIZE
,Ö)

	)

71 
	#DOMAINSET_FLS
(
p
Ë
	`BIT_FLS
(
DOMAINSET_SETSIZE
,Ö)

	)

72 
	#DOMAINSET_COUNT
(
p
Ë
	`BIT_COUNT
(
DOMAINSET_SETSIZE
,Ö)

	)

73 
	#DOMAINSET_FSET
 
	`BITSET_FSET
(
_NDOMAINSETWORDS
)

	)

74 
	#DOMAINSET_T_INITIALIZER
 
BITSET_T_INITIALIZER


	)

76 
	#DOMAINSET_POLICY_INVALID
 0

	)

77 
	#DOMAINSET_POLICY_ROUNDROBIN
 1

	)

78 
	#DOMAINSET_POLICY_FIRSTTOUCH
 2

	)

79 
	#DOMAINSET_POLICY_PREFER
 3

	)

80 
	#DOMAINSET_POLICY_INTERLEAVE
 4

	)

81 
	#DOMAINSET_POLICY_MAX
 
DOMAINSET_POLICY_INTERLEAVE


	)

83 #ifde‡
_KERNEL


84 #i‡
MAXMEMDOM
 < 256

85 
uöt8_t
 
	tdomaöid_t
;

87 
uöt16_t
 
	tdomaöid_t
;

90 
	sdomaö£t
 {

91 
LIST_ENTRY
(
domaö£t
Ë
	mds_lök
;

92 
domaö£t_t
 
	mds_mask
;

93 
uöt16_t
 
	mds_pﬁicy
;

94 
domaöid_t
 
	mds_¥e„r
;

95 
domaöid_t
 
	mds_˙t
;

96 
domaöid_t
 
	mds_‹dî
[
MAXMEMDOM
];

99 
domaö£t
 
domaö£t_fixed
[
MAXMEMDOM
], 
domaö£t_¥e„r
[MAXMEMDOM];

100 
	#DOMAINSET_FIXED
(
domaö
Ë(&
domaö£t_fixed
[(domaö)])

	)

101 
	#DOMAINSET_PREF
(
domaö
Ë(&
domaö£t_¥e„r
[(domaö)])

	)

102 
domaö£t
 
domaö£t_roundrobö
;

103 
	#DOMAINSET_RR
(Ë(&
domaö£t_roundrobö
)

	)

105 
domaö£t_öô
();

106 
domaö£t_zîo
();

113 
domaö£t
 *
domaö£t_¸óã
(const domainset *);

114 #ifde‡
_SYS_SYSCTL_H_


115 
sys˘l_h™dÀ_domaö£t
(
SYSCTL_HANDLER_ARGS
);

119 
__BEGIN_DECLS


120 
˝u£t_gëdomaö
(
˝uÀvñ_t
, 
˝uwhich_t
, 
id_t
, 
size_t
, 
domaö£t_t
 *,

122 
˝u£t_£tdomaö
(
˝uÀvñ_t
, 
˝uwhich_t
, 
id_t
, 
size_t
,

123 c⁄° 
domaö£t_t
 *, );

125 
	g__END_DECLS


	@/usr/include/sys/elf_common.h

33 #i‚de‡
_SYS_ELF_COMMON_H_


34 
	#_SYS_ELF_COMMON_H_
 1

	)

50 
u_öt32_t
 
	mn_«mesz
;

51 
u_öt32_t
 
	mn_descsz
;

52 
u_öt32_t
 
	mn_ty≥
;

53 } 
	tElf_NŸe
;

54 
Elf_NŸe
 
	tElf_Nhdr
;

59 
	#ODK_NULL
 0

	)

60 
	#ODK_REGINFO
 1

	)

61 
	#ODK_EXCEPTIONS
 2

	)

62 
	#ODK_PAD
 3

	)

63 
	#ODK_HWPATCH
 4

	)

64 
	#ODK_FILL
 5

	)

65 
	#ODK_TAGS
 6

	)

66 
	#ODK_HWAND
 7

	)

67 
	#ODK_HWOR
 8

	)

68 
	#ODK_GP_GROUP
 9

	)

69 
	#ODK_IDENT
 10

	)

70 
	#ODK_PAGESIZE
 11

	)

75 
	#OEX_FPU_MIN
 0x0000001‡

	)

76 
	#OEX_FPU_MAX
 0x00001f00

	)

77 
	#OEX_PAGE0
 0x00010000

	)

78 
	#OEX_SMM
 0x00020000

	)

79 
	#OEX_PRECISEFP
 0x00040000

	)

80 
	#OEX_DISMISS
 0x00080000

	)

85 
	#OPAD_PREFIX
 0x0001

	)

86 
	#OPAD_POSTFIX
 0x0002

	)

87 
	#OPAD_SYMBOL
 0x0004

	)

92 
	#OHW_R4KEOP
 0x00000001

	)

93 
	#OHW_R8KPFETCH
 0x00000002

	)

94 
	#OHW_R5KEOP
 0x00000004

	)

95 
	#OHW_R5KCVTL
 0x00000008

	)

96 
	#OHW_R10KLDL
 0x00000010UL

	)

101 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

102 
	#OHWA0_R4KEOP_CLEAN
 0x00000002

	)

103 
	#OHWO0_FIXADE
 0x00000001

	)

108 
	#OGP_GROUP
 0x0000fff‡

	)

109 
	#OGP_SELF
 0x00010000

	)

116 
u_öt32_t
 
	mgh_nbuckës
;

117 
u_öt32_t
 
	mgh_symndx
;

118 
u_öt32_t
 
	mgh_maskw‹ds
;

119 
u_öt32_t
 
	mgh_shi·2
;

120 } 
	tElf_GNU_Hash_Hódî
;

124 
	#EI_MAG0
 0

	)

125 
	#EI_MAG1
 1

	)

126 
	#EI_MAG2
 2

	)

127 
	#EI_MAG3
 3

	)

128 
	#EI_CLASS
 4

	)

129 
	#EI_DATA
 5

	)

130 
	#EI_VERSION
 6

	)

131 
	#EI_OSABI
 7

	)

132 
	#EI_ABIVERSION
 8

	)

133 
	#OLD_EI_BRAND
 8

	)

134 
	#EI_PAD
 9

	)

135 
	#EI_NIDENT
 16

	)

138 
	#ELFMAG0
 0x7f

	)

139 
	#ELFMAG1
 'E'

	)

140 
	#ELFMAG2
 'L'

	)

141 
	#ELFMAG3
 'F'

	)

142 
	#ELFMAG
 "\177ELF"

	)

143 
	#SELFMAG
 4

	)

146 
	#EV_NONE
 0

	)

147 
	#EV_CURRENT
 1

	)

150 
	#ELFCLASSNONE
 0

	)

151 
	#ELFCLASS32
 1

	)

152 
	#ELFCLASS64
 2

	)

155 
	#ELFDATANONE
 0

	)

156 
	#ELFDATA2LSB
 1

	)

157 
	#ELFDATA2MSB
 2

	)

160 
	#ELFOSABI_NONE
 0

	)

161 
	#ELFOSABI_HPUX
 1

	)

162 
	#ELFOSABI_NETBSD
 2

	)

163 
	#ELFOSABI_LINUX
 3

	)

164 
	#ELFOSABI_HURD
 4

	)

165 
	#ELFOSABI_86OPEN
 5

	)

166 
	#ELFOSABI_SOLARIS
 6

	)

167 
	#ELFOSABI_AIX
 7

	)

168 
	#ELFOSABI_IRIX
 8

	)

169 
	#ELFOSABI_FREEBSD
 9

	)

170 
	#ELFOSABI_TRU64
 10

	)

171 
	#ELFOSABI_MODESTO
 11

	)

172 
	#ELFOSABI_OPENBSD
 12

	)

173 
	#ELFOSABI_OPENVMS
 13

	)

174 
	#ELFOSABI_NSK
 14

	)

175 
	#ELFOSABI_AROS
 15

	)

176 
	#ELFOSABI_FENIXOS
 16

	)

177 
	#ELFOSABI_CLOUDABI
 17

	)

178 
	#ELFOSABI_ARM_AEABI
 64

	)

179 
	#ELFOSABI_ARM
 97

	)

180 
	#ELFOSABI_STANDALONE
 255

	)

182 
	#ELFOSABI_SYSV
 
ELFOSABI_NONE


	)

183 
	#ELFOSABI_MONTEREY
 
ELFOSABI_AIX


	)

184 
	#ELFOSABI_GNU
 
ELFOSABI_LINUX


	)

187 
	#IS_ELF
(
ehdr
Ë(”hdr).
e_idít
[
EI_MAG0
] =
ELFMAG0
 && \

188 (
ehdr
).
e_idít
[
EI_MAG1
] =
ELFMAG1
 && \

189 (
ehdr
).
e_idít
[
EI_MAG2
] =
ELFMAG2
 && \

190 (
ehdr
).
e_idít
[
EI_MAG3
] =
ELFMAG3
)

	)

193 
	#ET_NONE
 0

	)

194 
	#ET_REL
 1

	)

195 
	#ET_EXEC
 2

	)

196 
	#ET_DYN
 3

	)

197 
	#ET_CORE
 4

	)

198 
	#ET_LOOS
 0x„00

	)

199 
	#ET_HIOS
 0x„f‡

	)

200 
	#ET_LOPROC
 0xff00

	)

201 
	#ET_HIPROC
 0xfff‡

	)

204 
	#EM_NONE
 0

	)

205 
	#EM_M32
 1

	)

206 
	#EM_SPARC
 2

	)

207 
	#EM_386
 3

	)

208 
	#EM_68K
 4

	)

209 
	#EM_88K
 5

	)

210 
	#EM_IAMCU
 6

	)

211 
	#EM_860
 7

	)

212 
	#EM_MIPS
 8

	)

213 
	#EM_S370
 9

	)

214 
	#EM_MIPS_RS3_LE
 10

	)

215 
	#EM_PARISC
 15

	)

216 
	#EM_VPP500
 17

	)

217 
	#EM_SPARC32PLUS
 18

	)

218 
	#EM_960
 19

	)

219 
	#EM_PPC
 20

	)

220 
	#EM_PPC64
 21

	)

221 
	#EM_S390
 22

	)

222 
	#EM_V800
 36

	)

223 
	#EM_FR20
 37

	)

224 
	#EM_RH32
 38

	)

225 
	#EM_RCE
 39

	)

226 
	#EM_ARM
 40

	)

227 
	#EM_SH
 42

	)

228 
	#EM_SPARCV9
 43

	)

229 
	#EM_TRICORE
 44

	)

230 
	#EM_ARC
 45

	)

231 
	#EM_H8_300
 46

	)

232 
	#EM_H8_300H
 47

	)

233 
	#EM_H8S
 48

	)

234 
	#EM_H8_500
 49

	)

235 
	#EM_IA_64
 50

	)

236 
	#EM_MIPS_X
 51

	)

237 
	#EM_COLDFIRE
 52

	)

238 
	#EM_68HC12
 53

	)

239 
	#EM_MMA
 54

	)

240 
	#EM_PCP
 55

	)

241 
	#EM_NCPU
 56

	)

242 
	#EM_NDR1
 57

	)

243 
	#EM_STARCORE
 58

	)

244 
	#EM_ME16
 59

	)

245 
	#EM_ST100
 60

	)

246 
	#EM_TINYJ
 61

	)

247 
	#EM_X86_64
 62

	)

248 
	#EM_AMD64
 
EM_X86_64


	)

249 
	#EM_PDSP
 63

	)

250 
	#EM_FX66
 66

	)

251 
	#EM_ST9PLUS
 67

	)

253 
	#EM_ST7
 68

	)

255 
	#EM_68HC16
 69

	)

256 
	#EM_68HC11
 70

	)

257 
	#EM_68HC08
 71

	)

258 
	#EM_68HC05
 72

	)

259 
	#EM_SVX
 73

	)

260 
	#EM_ST19
 74

	)

261 
	#EM_VAX
 75

	)

262 
	#EM_CRIS
 76

	)

264 
	#EM_JAVELIN
 77

	)

266 
	#EM_FIREPATH
 78

	)

267 
	#EM_ZSP
 79

	)

268 
	#EM_MMIX
 80

	)

269 
	#EM_HUANY
 81

	)

271 
	#EM_PRISM
 82

	)

272 
	#EM_AVR
 83

	)

273 
	#EM_FR30
 84

	)

274 
	#EM_D10V
 85

	)

275 
	#EM_D30V
 86

	)

276 
	#EM_V850
 87

	)

277 
	#EM_M32R
 88

	)

278 
	#EM_MN10300
 89

	)

279 
	#EM_MN10200
 90

	)

280 
	#EM_PJ
 91

	)

281 
	#EM_OPENRISC
 92

	)

282 
	#EM_ARC_A5
 93

	)

283 
	#EM_XTENSA
 94

	)

284 
	#EM_VIDEOCORE
 95

	)

285 
	#EM_TMM_GPP
 96

	)

287 
	#EM_NS32K
 97

	)

288 
	#EM_TPC
 98

	)

289 
	#EM_SNP1K
 99

	)

290 
	#EM_ST200
 100

	)

291 
	#EM_IP2K
 101

	)

292 
	#EM_MAX
 102

	)

293 
	#EM_CR
 103

	)

295 
	#EM_F2MC16
 104

	)

296 
	#EM_MSP430
 105

	)

298 
	#EM_BLACKFIN
 106

	)

299 
	#EM_SE_C33
 107

	)

300 
	#EM_SEP
 108

	)

301 
	#EM_ARCA
 109

	)

302 
	#EM_UNICORE
 110

	)

304 
	#EM_AARCH64
 183

	)

305 
	#EM_RISCV
 243

	)

308 
	#EM_486
 6

	)

309 
	#EM_MIPS_RS4_BE
 10

	)

310 
	#EM_ALPHA_STD
 41

	)

311 
	#EM_ALPHA
 0x9026

	)

316 
	#EF_ARM_RELEXEC
 0x1

	)

317 
	#EF_ARM_HASENTRY
 0x2

	)

318 
	#EF_ARM_SYMSARESORTED
 0x4

	)

319 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x8

	)

320 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

321 
	#EF_ARM_LE8
 0x00400000

	)

322 
	#EF_ARM_BE8
 0x00800000

	)

323 
	#EF_ARM_EABIMASK
 0xFF000000

	)

324 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

325 
	#EF_ARM_EABI_VER1
 0x01000000

	)

326 
	#EF_ARM_EABI_VER2
 0x02000000

	)

327 
	#EF_ARM_EABI_VER3
 0x03000000

	)

328 
	#EF_ARM_EABI_VER4
 0x04000000

	)

329 
	#EF_ARM_EABI_VER5
 0x05000000

	)

330 
	#EF_ARM_INTERWORK
 0x00000004

	)

331 
	#EF_ARM_APCS_26
 0x00000008

	)

332 
	#EF_ARM_APCS_FLOAT
 0x00000010

	)

333 
	#EF_ARM_PIC
 0x00000020

	)

334 
	#EF_ARM_ALIGN8
 0x00000040

	)

335 
	#EF_ARM_NEW_ABI
 0x00000080

	)

336 
	#EF_ARM_OLD_ABI
 0x00000100

	)

337 
	#EF_ARM_ABI_FLOAT_SOFT
 0x00000200

	)

338 
	#EF_ARM_SOFT_FLOAT
 
EF_ARM_ABI_FLOAT_SOFT


	)

339 
	#EF_ARM_ABI_FLOAT_HARD
 0x00000400

	)

340 
	#EF_ARM_VFP_FLOAT
 
EF_ARM_ABI_FLOAT_HARD


	)

341 
	#EF_ARM_MAVERICK_FLOAT
 0x00000800

	)

343 
	#EF_MIPS_NOREORDER
 0x00000001

	)

344 
	#EF_MIPS_PIC
 0x00000002

	)

345 
	#EF_MIPS_CPIC
 0x00000004

	)

346 
	#EF_MIPS_UCODE
 0x00000010

	)

347 
	#EF_MIPS_ABI2
 0x00000020

	)

348 
	#EF_MIPS_OPTIONS_FIRST
 0x00000080

	)

349 
	#EF_MIPS_ABI
 0x0000F000

	)

350 
	#EF_MIPS_ABI_O32
 0x00001000

	)

351 
	#EF_MIPS_ABI_O64
 0x00002000

	)

352 
	#EF_MIPS_ABI_EABI32
 0x00003000

	)

353 
	#EF_MIPS_ABI_EABI64
 0x00004000

	)

354 
	#EF_MIPS_ARCH_ASE
 0x0F000000

	)

355 
	#EF_MIPS_ARCH_ASE_MDMX
 0x08000000

	)

356 
	#EF_MIPS_ARCH_ASE_M16
 0x04000000

	)

357 
	#EF_MIPS_ARCH
 0xF0000000

	)

358 
	#EF_MIPS_ARCH_1
 0x00000000

	)

359 
	#EF_MIPS_ARCH_2
 0x10000000

	)

360 
	#EF_MIPS_ARCH_3
 0x20000000

	)

361 
	#EF_MIPS_ARCH_4
 0x30000000

	)

362 
	#EF_MIPS_ARCH_5
 0x40000000

	)

363 
	#EF_MIPS_ARCH_32
 0x50000000

	)

364 
	#EF_MIPS_ARCH_64
 0x60000000

	)

365 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

366 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

368 
	#EF_PPC_EMB
 0x80000000

	)

369 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

370 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

372 
	#EF_SPARC_EXT_MASK
 0x00ffff00

	)

373 
	#EF_SPARC_32PLUS
 0x00000100

	)

374 
	#EF_SPARC_SUN_US1
 0x00000200

	)

375 
	#EF_SPARC_HAL_R1
 0x00000200

	)

376 
	#EF_SPARC_SUN_US3
 0x00000800

	)

378 
	#EF_SPARCV9_MM
 0x00000003

	)

379 
	#EF_SPARCV9_TSO
 0x00000000

	)

380 
	#EF_SPARCV9_PSO
 0x00000001

	)

381 
	#EF_SPARCV9_RMO
 0x00000002

	)

384 
	#SHN_UNDEF
 0

	)

385 
	#SHN_LORESERVE
 0xff00

	)

386 
	#SHN_LOPROC
 0xff00

	)

387 
	#SHN_HIPROC
 0xff1‡

	)

388 
	#SHN_LOOS
 0xff20

	)

389 
	#SHN_FBSD_CACHED
 
SHN_LOOS


	)

392 
	#SHN_HIOS
 0xff3‡

	)

393 
	#SHN_ABS
 0xfff1

	)

394 
	#SHN_COMMON
 0xfff2

	)

395 
	#SHN_XINDEX
 0xfff‡

	)

396 
	#SHN_HIRESERVE
 0xfff‡

	)

399 
	#SHT_NULL
 0

	)

400 
	#SHT_PROGBITS
 1

	)

401 
	#SHT_SYMTAB
 2

	)

402 
	#SHT_STRTAB
 3

	)

403 
	#SHT_RELA
 4

	)

404 
	#SHT_HASH
 5

	)

405 
	#SHT_DYNAMIC
 6

	)

406 
	#SHT_NOTE
 7

	)

407 
	#SHT_NOBITS
 8

	)

408 
	#SHT_REL
 9

	)

409 
	#SHT_SHLIB
 10

	)

410 
	#SHT_DYNSYM
 11

	)

411 
	#SHT_INIT_ARRAY
 14

	)

412 
	#SHT_FINI_ARRAY
 15

	)

413 
	#SHT_PREINIT_ARRAY
 16

	)

414 
	#SHT_GROUP
 17

	)

415 
	#SHT_SYMTAB_SHNDX
 18

	)

416 
	#SHT_LOOS
 0x60000000

	)

417 
	#SHT_LOSUNW
 0x6ffffff4

	)

418 
	#SHT_SUNW_dof
 0x6ffffff4

	)

419 
	#SHT_SUNW_ˇp
 0x6ffffff5

	)

420 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

421 
	#SHT_SUNW_SIGNATURE
 0x6ffffff6

	)

422 
	#SHT_GNU_HASH
 0x6ffffff6

	)

423 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

424 
	#SHT_SUNW_ANNOTATE
 0x6ffffff7

	)

425 
	#SHT_SUNW_DEBUGSTR
 0x6ffffff8

	)

426 
	#SHT_SUNW_DEBUG
 0x6ffffff9

	)

427 
	#SHT_SUNW_move
 0x6fffffÁ

	)

428 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

429 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

430 
	#SHT_SUNW_vîdef
 0x6ffffffd

	)

431 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

432 
	#SHT_SUNW_vî√ed
 0x6fffff„

	)

433 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

434 
	#SHT_SUNW_vîsym
 0x6fffffff

	)

435 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

436 
	#SHT_HISUNW
 0x6fffffff

	)

437 
	#SHT_HIOS
 0x6ffffff‡

	)

438 
	#SHT_LOPROC
 0x70000000

	)

439 
	#SHT_X86_64_UNWIND
 0x70000001

	)

440 
	#SHT_AMD64_UNWIND
 
SHT_X86_64_UNWIND


	)

442 
	#SHT_ARM_EXIDX
 0x70000001

	)

443 
	#SHT_ARM_PREEMPTMAP
 0x70000002

	)

445 
	#SHT_ARM_ATTRIBUTES
 0x70000003

	)

447 
	#SHT_ARM_DEBUGOVERLAY
 0x70000004

	)

448 
	#SHT_ARM_OVERLAYSECTION
 0x70000005

	)

449 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

450 
	#SHT_MIPS_MSYM
 0x70000001

	)

451 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

452 
	#SHT_MIPS_GPTAB
 0x70000003

	)

453 
	#SHT_MIPS_UCODE
 0x70000004

	)

454 
	#SHT_MIPS_DEBUG
 0x70000005

	)

455 
	#SHT_MIPS_REGINFO
 0x70000006

	)

456 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

457 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

458 
	#SHT_MIPS_RELD
 0x70000009

	)

459 
	#SHT_MIPS_IFACE
 0x7000000b

	)

460 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

461 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

462 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

463 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

464 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

465 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

466 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

467 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

468 
	#SHT_MIPS_EVENTS
 0x70000021

	)

469 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

470 
	#SHT_MIPS_PIXIE
 0x70000023

	)

471 
	#SHT_MIPS_XLATE
 0x70000024

	)

472 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

473 
	#SHT_MIPS_WHIRL
 0x70000026

	)

474 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

475 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

476 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

477 
	#SHT_MIPS_ABIFLAGS
 0x7000002a

	)

479 
	#SHT_SPARC_GOTDATA
 0x70000000

	)

481 
	#SHTORDERED


	)

482 
	#SHT_HIPROC
 0x7ffffff‡

	)

483 
	#SHT_LOUSER
 0x80000000

	)

484 
	#SHT_HIUSER
 0xfffffff‡

	)

487 
	#SHF_WRITE
 0x1

	)

488 
	#SHF_ALLOC
 0x2

	)

489 
	#SHF_EXECINSTR
 0x4

	)

490 
	#SHF_MERGE
 0x10

	)

491 
	#SHF_STRINGS
 0x20

	)

492 
	#SHF_INFO_LINK
 0x40

	)

493 
	#SHF_LINK_ORDER
 0x80

	)

494 
	#SHF_OS_NONCONFORMING
 0x100

	)

495 
	#SHF_GROUP
 0x200

	)

496 
	#SHF_TLS
 0x400

	)

497 
	#SHF_COMPRESSED
 0x800

	)

498 
	#SHF_MASKOS
 0x0ff00000

	)

499 
	#SHF_MASKPROC
 0xf0000000

	)

502 
	#GRP_COMDAT
 0x1

	)

507 
	#VERSYM_VERSION
 0x7fff

	)

508 
	#VERSYM_HIDDEN
 0x8000

	)

511 
	#PT_NULL
 0

	)

512 
	#PT_LOAD
 1

	)

513 
	#PT_DYNAMIC
 2

	)

514 
	#PT_INTERP
 3

	)

515 
	#PT_NOTE
 4

	)

516 
	#PT_SHLIB
 5

	)

517 
	#PT_PHDR
 6

	)

518 
	#PT_TLS
 7

	)

519 
	#PT_LOOS
 0x60000000

	)

520 
	#PT_SUNW_UNWIND
 0x6464e550

	)

521 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

522 
	#PT_GNU_STACK
 0x6474e551

	)

523 
	#PT_GNU_RELRO
 0x6474e552

	)

524 
	#PT_DUMP_DELTA
 0x6fb5d000

	)

526 
	#PT_LOSUNW
 0x6fffffÁ

	)

527 
	#PT_SUNWBSS
 0x6fffffÁ

	)

528 
	#PT_SUNWSTACK
 0x6ffffffb

	)

529 
	#PT_SUNWDTRACE
 0x6ffffff¯

	)

530 
	#PT_SUNWCAP
 0x6ffffffd

	)

531 
	#PT_HISUNW
 0x6fffffff

	)

532 
	#PT_HIOS
 0x6ffffff‡

	)

533 
	#PT_LOPROC
 0x70000000

	)

534 
	#PT_ARM_ARCHEXT
 0x70000000

	)

535 
	#PT_ARM_EXIDX
 0x70000001

	)

536 
	#PT_HIPROC
 0x7ffffff‡

	)

539 
	#PF_X
 0x1

	)

540 
	#PF_W
 0x2

	)

541 
	#PF_R
 0x4

	)

542 
	#PF_MASKOS
 0x0ff00000

	)

543 
	#PF_MASKPROC
 0xf0000000

	)

546 
	#PN_XNUM
 0xffff

	)

549 
	#DT_NULL
 0

	)

550 
	#DT_NEEDED
 1

	)

552 
	#DT_PLTRELSZ
 2

	)

553 
	#DT_PLTGOT
 3

	)

554 
	#DT_HASH
 4

	)

555 
	#DT_STRTAB
 5

	)

556 
	#DT_SYMTAB
 6

	)

557 
	#DT_RELA
 7

	)

558 
	#DT_RELASZ
 8

	)

559 
	#DT_RELAENT
 9

	)

560 
	#DT_STRSZ
 10

	)

561 
	#DT_SYMENT
 11

	)

562 
	#DT_INIT
 12

	)

563 
	#DT_FINI
 13

	)

564 
	#DT_SONAME
 14

	)

566 
	#DT_RPATH
 15

	)

567 
	#DT_SYMBOLIC
 16

	)

568 
	#DT_REL
 17

	)

569 
	#DT_RELSZ
 18

	)

570 
	#DT_RELENT
 19

	)

571 
	#DT_PLTREL
 20

	)

572 
	#DT_DEBUG
 21

	)

573 
	#DT_TEXTREL
 22

	)

575 
	#DT_JMPREL
 23

	)

576 
	#DT_BIND_NOW
 24

	)

577 
	#DT_INIT_ARRAY
 25

	)

579 
	#DT_FINI_ARRAY
 26

	)

581 
	#DT_INIT_ARRAYSZ
 27

	)

583 
	#DT_FINI_ARRAYSZ
 28

	)

585 
	#DT_RUNPATH
 29

	)

587 
	#DT_FLAGS
 30

	)

588 
	#DT_ENCODING
 32

	)

593 
	#DT_PREINIT_ARRAY
 32

	)

595 
	#DT_PREINIT_ARRAYSZ
 33

	)

597 
	#DT_MAXPOSTAGS
 34

	)

598 
	#DT_LOOS
 0x6000000d

	)

599 
	#DT_SUNW_AUXILIARY
 0x6000000d

	)

600 
	#DT_SUNW_RTLDINF
 0x6000000ê

	)

601 
	#DT_SUNW_FILTER
 0x6000000‡

	)

602 
	#DT_SUNW_CAP
 0x60000010

	)

603 
	#DT_SUNW_ASLR
 0x60000023

	)

604 
	#DT_HIOS
 0x6ffff000

	)

610 
	#DT_VALRNGLO
 0x6ffffd00

	)

611 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

612 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

613 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

614 
	#DT_CHECKSUM
 0x6ffffdf8

	)

615 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

616 
	#DT_MOVEENT
 0x6ffffdÁ

	)

617 
	#DT_MOVESZ
 0x6ffffdfb

	)

618 
	#DT_FEATURE
 0x6ffffdf¯

	)

619 
	#DT_FEATURE_1
 
DT_FEATURE


	)

620 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

623 
	#DT_SYMINSZ
 0x6ffffd„

	)

624 
	#DT_SYMINENT
 0x6ffffdf‡

	)

625 
	#DT_VALRNGHI
 0x6ffffdff

	)

634 
	#DT_ADDRRNGLO
 0x6fff„00

	)

635 
	#DT_GNU_HASH
 0x6fff„f5

	)

636 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

637 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

638 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

639 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

640 
	#DT_CONFIG
 0x6fff„Á

	)

641 
	#DT_DEPAUDIT
 0x6fff„fb

	)

642 
	#DT_AUDIT
 0x6fff„f¯

	)

643 
	#DT_PLTPAD
 0x6fff„fd

	)

644 
	#DT_MOVETAB
 0x6fff„„

	)

645 
	#DT_SYMINFO
 0x6fff„f‡

	)

646 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

648 
	#DT_VERSYM
 0x6ffffff0

	)

649 
	#DT_RELACOUNT
 0x6ffffff9

	)

650 
	#DT_RELCOUNT
 0x6fffffÁ

	)

651 
	#DT_FLAGS_1
 0x6ffffffb

	)

652 
	#DT_VERDEF
 0x6ffffff¯

	)

653 
	#DT_VERDEFNUM
 0x6ffffffd

	)

654 
	#DT_VERNEED
 0x6fffff„

	)

655 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

657 
	#DT_LOPROC
 0x70000000

	)

659 
	#DT_ARM_SYMTABSZ
 0x70000001

	)

660 
	#DT_ARM_PREEMPTMAP
 0x70000002

	)

662 
	#DT_SPARC_REGISTER
 0x70000001

	)

663 
	#DT_DEPRECATED_SPARC_REGISTER
 0x7000001

	)

665 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

666 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

667 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

668 
	#DT_MIPS_IVERSION
 0x70000004

	)

669 
	#DT_MIPS_FLAGS
 0x70000005

	)

670 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

671 
	#DT_MIPS_CONFLICT
 0x70000008

	)

672 
	#DT_MIPS_LIBLIST
 0x70000009

	)

673 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000a

	)

674 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

675 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

676 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

677 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

678 
	#DT_MIPS_GOTSYM
 0x70000013

	)

679 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

680 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

681 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

682 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

683 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

684 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001A

	)

685 
	#DT_MIPS_DELTA_RELOC
 0x7000001B

	)

686 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001C

	)

687 
	#DT_MIPS_DELTA_SYM
 0x7000001D

	)

688 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001E

	)

689 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

690 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

691 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

692 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

693 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

694 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

695 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

696 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

697 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

698 
	#DT_MIPS_OPTIONS
 0x70000029

	)

699 
	#DT_MIPS_INTERFACE
 0x7000002A

	)

700 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002B

	)

701 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002C

	)

702 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002D

	)

703 
	#DT_MIPS_PERF_SUFFIX
 0x7000002E

	)

704 
	#DT_MIPS_COMPACT_SIZE
 0x7000002F

	)

705 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

706 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

707 
	#DT_MIPS_PLTGOT
 0x70000032

	)

708 
	#DT_MIPS_RLD_OBJ_UPDATE
 0x70000033

	)

709 
	#DT_MIPS_RWPLT
 0x70000034

	)

711 
	#DT_PPC_GOT
 0x70000000

	)

712 
	#DT_PPC_TLSOPT
 0x70000001

	)

714 
	#DT_PPC64_GLINK
 0x70000000

	)

715 
	#DT_PPC64_OPD
 0x70000001

	)

716 
	#DT_PPC64_OPDSZ
 0x70000002

	)

717 
	#DT_PPC64_TLSOPT
 0x70000003

	)

719 
	#DT_AUXILIARY
 0x7ffffffd

	)

720 
	#DT_USED
 0x7fffff„

	)

721 
	#DT_FILTER
 0x7ffffff‡

	)

722 
	#DT_HIPROC
 0x7ffffff‡

	)

725 
	#DF_ORIGIN
 0x0001

	)

728 
	#DF_SYMBOLIC
 0x0002

	)

729 
	#DF_TEXTREL
 0x0004

	)

731 
	#DF_BIND_NOW
 0x0008

	)

735 
	#DF_STATIC_TLS
 0x0010

	)

740 
	#DF_1_BIND_NOW
 0x00000001

	)

741 
	#DF_1_GLOBAL
 0x00000002

	)

742 
	#DF_1_NODELETE
 0x00000008

	)

743 
	#DF_1_LOADFLTR
 0x00000010

	)

744 
	#DF_1_NOOPEN
 0x00000040

	)

745 
	#DF_1_ORIGIN
 0x00000080

	)

746 
	#DF_1_INTERPOSE
 0x00000400

	)

747 
	#DF_1_NODEFLIB
 0x00000800

	)

750 
	#LL_NONE
 0x0

	)

751 
	#LL_EXACT_MATCH
 0x1

	)

752 
	#LL_IGNORE_INT_VER
 0x2

	)

753 
	#LL_REQUIRE_MINOR
 0x4

	)

754 
	#LL_EXPORTS
 0x8

	)

755 
	#LL_DELAY_LOAD
 0x10

	)

756 
	#LL_DELTA
 0x20

	)

759 
	#NT_FREEBSD_ABI_TAG
 1

	)

760 
	#NT_FREEBSD_NOINIT_TAG
 2

	)

761 
	#NT_FREEBSD_ARCH_TAG
 3

	)

764 
	#NT_PRSTATUS
 1

	)

765 
	#NT_FPREGSET
 2

	)

766 
	#NT_PRPSINFO
 3

	)

767 
	#NT_THRMISC
 7

	)

768 
	#NT_PROCSTAT_PROC
 8

	)

769 
	#NT_PROCSTAT_FILES
 9

	)

770 
	#NT_PROCSTAT_VMMAP
 10

	)

771 
	#NT_PROCSTAT_GROUPS
 11

	)

772 
	#NT_PROCSTAT_UMASK
 12

	)

773 
	#NT_PROCSTAT_RLIMIT
 13

	)

774 
	#NT_PROCSTAT_OSREL
 14

	)

775 
	#NT_PROCSTAT_PSSTRINGS
 15

	)

776 
	#NT_PROCSTAT_AUXV
 16

	)

777 
	#NT_PTLWPINFO
 17

	)

778 
	#NT_PPC_VMX
 0x100

	)

779 
	#NT_PPC_VSX
 0x102

	)

780 
	#NT_X86_XSTATE
 0x202

	)

781 
	#NT_ARM_VFP
 0x400

	)

784 
	#STB_LOCAL
 0

	)

785 
	#STB_GLOBAL
 1

	)

786 
	#STB_WEAK
 2

	)

787 
	#STB_LOOS
 10

	)

788 
	#STB_GNU_UNIQUE
 10

	)

789 
	#STB_HIOS
 12

	)

790 
	#STB_LOPROC
 13

	)

791 
	#STB_HIPROC
 15

	)

794 
	#STT_NOTYPE
 0

	)

795 
	#STT_OBJECT
 1

	)

796 
	#STT_FUNC
 2

	)

797 
	#STT_SECTION
 3

	)

798 
	#STT_FILE
 4

	)

799 
	#STT_COMMON
 5

	)

800 
	#STT_TLS
 6

	)

801 
	#STT_NUM
 7

	)

802 
	#STT_LOOS
 10

	)

803 
	#STT_GNU_IFUNC
 10

	)

804 
	#STT_HIOS
 12

	)

805 
	#STT_LOPROC
 13

	)

806 
	#STT_SPARC_REGISTER
 13

	)

807 
	#STT_HIPROC
 15

	)

810 
	#STV_DEFAULT
 0x0

	)

811 
	#STV_INTERNAL
 0x1

	)

812 
	#STV_HIDDEN
 0x2

	)

813 
	#STV_PROTECTED
 0x3

	)

814 
	#STV_EXPORTED
 0x4

	)

815 
	#STV_SINGLETON
 0x5

	)

816 
	#STV_ELIMINATE
 0x6

	)

819 
	#STN_UNDEF
 0

	)

822 
	#VER_DEF_CURRENT
 1

	)

823 
	#VER_DEF_IDX
(
x
Ë
	`VER_NDX
(x)

	)

825 
	#VER_FLG_BASE
 0x01

	)

826 
	#VER_FLG_WEAK
 0x02

	)

828 
	#VER_NEED_CURRENT
 1

	)

829 
	#VER_NEED_WEAK
 (1u << 15)

	)

830 
	#VER_NEED_HIDDEN
 
VER_NDX_HIDDEN


	)

831 
	#VER_NEED_IDX
(
x
Ë
	`VER_NDX
(x)

	)

833 
	#VER_NDX_LOCAL
 0

	)

834 
	#VER_NDX_GLOBAL
 1

	)

835 
	#VER_NDX_GIVEN
 2

	)

837 
	#VER_NDX_HIDDEN
 (1u << 15)

	)

838 
	#VER_NDX
(
x
Ë((xË& ~(1u << 15))

	)

840 
	#CA_SUNW_NULL
 0

	)

841 
	#CA_SUNW_HW_1
 1

	)

842 
	#CA_SUNW_SF_1
 2

	)

847 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

849 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

850 
	#SYMINFO_FLG_COPY
 0x0004

	)

851 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

853 
	#SYMINFO_FLG_DIRECTBIND
 0x0010

	)

855 
	#SYMINFO_FLG_NOEXTDIRECT
 0x0020

	)

857 
	#SYMINFO_FLG_FILTER
 0x0002

	)

858 
	#SYMINFO_FLG_AUXILIARY
 0x0040

	)

863 
	#SYMINFO_BT_SELF
 0xfff‡

	)

864 
	#SYMINFO_BT_PARENT
 0xff„

	)

865 
	#SYMINFO_BT_NONE
 0xfffd

	)

866 
	#SYMINFO_BT_EXTERN
 0xfff¯

	)

867 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

872 
	#SYMINFO_NONE
 0

	)

873 
	#SYMINFO_CURRENT
 1

	)

874 
	#SYMINFO_NUM
 2

	)

877 
	#ELFCOMPRESS_ZLIB
 1

	)

878 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

879 
	#ELFCOMPRESS_HIOS
 0x6fffffff

	)

880 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

881 
	#ELFCOMPRESS_HIPROC
 0x7fffffff

	)

890 
	#R_386_NONE
 0

	)

891 
	#R_386_32
 1

	)

892 
	#R_386_PC32
 2

	)

893 
	#R_386_GOT32
 3

	)

894 
	#R_386_PLT32
 4

	)

895 
	#R_386_COPY
 5

	)

896 
	#R_386_GLOB_DAT
 6

	)

897 
	#R_386_JMP_SLOT
 7

	)

898 
	#R_386_RELATIVE
 8

	)

899 
	#R_386_GOTOFF
 9

	)

900 
	#R_386_GOTPC
 10

	)

901 
	#R_386_TLS_TPOFF
 14

	)

902 
	#R_386_TLS_IE
 15

	)

903 
	#R_386_TLS_GOTIE
 16

	)

904 
	#R_386_TLS_LE
 17

	)

905 
	#R_386_TLS_GD
 18

	)

906 
	#R_386_TLS_LDM
 19

	)

907 
	#R_386_TLS_GD_32
 24

	)

908 
	#R_386_TLS_GD_PUSH
 25

	)

909 
	#R_386_TLS_GD_CALL
 26

	)

910 
	#R_386_TLS_GD_POP
 27

	)

911 
	#R_386_TLS_LDM_32
 28

	)

912 
	#R_386_TLS_LDM_PUSH
 29

	)

913 
	#R_386_TLS_LDM_CALL
 30

	)

914 
	#R_386_TLS_LDM_POP
 31

	)

915 
	#R_386_TLS_LDO_32
 32

	)

916 
	#R_386_TLS_IE_32
 33

	)

917 
	#R_386_TLS_LE_32
 34

	)

918 
	#R_386_TLS_DTPMOD32
 35

	)

919 
	#R_386_TLS_DTPOFF32
 36

	)

920 
	#R_386_TLS_TPOFF32
 37

	)

921 
	#R_386_IRELATIVE
 42

	)

923 
	#R_AARCH64_NONE
 0

	)

924 
	#R_AARCH64_ABS64
 257

	)

925 
	#R_AARCH64_ABS32
 258

	)

926 
	#R_AARCH64_ABS16
 259

	)

927 
	#R_AARCH64_PREL64
 260

	)

928 
	#R_AARCH64_PREL32
 261

	)

929 
	#R_AARCH64_PREL16
 262

	)

930 
	#R_AARCH64_COPY
 1024

	)

931 
	#R_AARCH64_GLOB_DAT
 1025

	)

932 
	#R_AARCH64_JUMP_SLOT
 1026

	)

933 
	#R_AARCH64_RELATIVE
 1027

	)

934 
	#R_AARCH64_TLS_DTPREL64
 1028

	)

935 
	#R_AARCH64_TLS_DTPMOD64
 1029

	)

936 
	#R_AARCH64_TLS_TPREL64
 1030

	)

937 
	#R_AARCH64_TLSDESC
 1031

	)

938 
	#R_AARCH64_IRELATIVE
 1032

	)

940 
	#R_ARM_NONE
 0

	)

941 
	#R_ARM_PC24
 1

	)

942 
	#R_ARM_ABS32
 2

	)

943 
	#R_ARM_REL32
 3

	)

944 
	#R_ARM_PC13
 4

	)

945 
	#R_ARM_ABS16
 5

	)

946 
	#R_ARM_ABS12
 6

	)

947 
	#R_ARM_THM_ABS5
 7

	)

948 
	#R_ARM_ABS8
 8

	)

949 
	#R_ARM_SBREL32
 9

	)

950 
	#R_ARM_THM_PC22
 10

	)

951 
	#R_ARM_THM_PC8
 11

	)

952 
	#R_ARM_AMP_VCALL9
 12

	)

953 
	#R_ARM_SWI24
 13

	)

954 
	#R_ARM_THM_SWI8
 14

	)

955 
	#R_ARM_XPC25
 15

	)

956 
	#R_ARM_THM_XPC22
 16

	)

958 
	#R_ARM_TLS_DTPMOD32
 17

	)

959 
	#R_ARM_TLS_DTPOFF32
 18

	)

960 
	#R_ARM_TLS_TPOFF32
 19

	)

961 
	#R_ARM_COPY
 20

	)

962 
	#R_ARM_GLOB_DAT
 21

	)

963 
	#R_ARM_JUMP_SLOT
 22

	)

964 
	#R_ARM_RELATIVE
 23

	)

965 
	#R_ARM_GOTOFF
 24

	)

966 
	#R_ARM_GOTPC
 25

	)

967 
	#R_ARM_GOT32
 26

	)

968 
	#R_ARM_PLT32
 27

	)

969 
	#R_ARM_GNU_VTENTRY
 100

	)

970 
	#R_ARM_GNU_VTINHERIT
 101

	)

971 
	#R_ARM_RSBREL32
 250

	)

972 
	#R_ARM_THM_RPC22
 251

	)

973 
	#R_ARM_RREL32
 252

	)

974 
	#R_ARM_RABS32
 253

	)

975 
	#R_ARM_RPC24
 254

	)

976 
	#R_ARM_RBASE
 255

	)

979 
	#R_IA_64_NONE
 0

	)

980 
	#R_IA_64_IMM14
 0x21

	)

981 
	#R_IA_64_IMM22
 0x22

	)

982 
	#R_IA_64_IMM64
 0x23

	)

983 
	#R_IA_64_DIR32MSB
 0x24

	)

984 
	#R_IA_64_DIR32LSB
 0x25

	)

985 
	#R_IA_64_DIR64MSB
 0x26

	)

986 
	#R_IA_64_DIR64LSB
 0x27

	)

987 
	#R_IA_64_GPREL22
 0x2®

	)

988 
	#R_IA_64_GPREL64I
 0x2b

	)

989 
	#R_IA_64_GPREL32MSB
 0x2¯

	)

990 
	#R_IA_64_GPREL32LSB
 0x2d

	)

991 
	#R_IA_64_GPREL64MSB
 0x2ê

	)

992 
	#R_IA_64_GPREL64LSB
 0x2‡

	)

993 
	#R_IA_64_LTOFF22
 0x32

	)

994 
	#R_IA_64_LTOFF64I
 0x33

	)

995 
	#R_IA_64_PLTOFF22
 0x3®

	)

996 
	#R_IA_64_PLTOFF64I
 0x3b

	)

997 
	#R_IA_64_PLTOFF64MSB
 0x3ê

	)

998 
	#R_IA_64_PLTOFF64LSB
 0x3‡

	)

999 
	#R_IA_64_FPTR64I
 0x43

	)

1000 
	#R_IA_64_FPTR32MSB
 0x44

	)

1001 
	#R_IA_64_FPTR32LSB
 0x45

	)

1002 
	#R_IA_64_FPTR64MSB
 0x46

	)

1003 
	#R_IA_64_FPTR64LSB
 0x47

	)

1004 
	#R_IA_64_PCREL60B
 0x48

	)

1005 
	#R_IA_64_PCREL21B
 0x49

	)

1006 
	#R_IA_64_PCREL21M
 0x4®

	)

1007 
	#R_IA_64_PCREL21F
 0x4b

	)

1008 
	#R_IA_64_PCREL32MSB
 0x4¯

	)

1009 
	#R_IA_64_PCREL32LSB
 0x4d

	)

1010 
	#R_IA_64_PCREL64MSB
 0x4ê

	)

1011 
	#R_IA_64_PCREL64LSB
 0x4‡

	)

1012 
	#R_IA_64_LTOFF_FPTR22
 0x52

	)

1013 
	#R_IA_64_LTOFF_FPTR64I
 0x53

	)

1014 
	#R_IA_64_LTOFF_FPTR32MSB
 0x54

	)

1015 
	#R_IA_64_LTOFF_FPTR32LSB
 0x55

	)

1016 
	#R_IA_64_LTOFF_FPTR64MSB
 0x56

	)

1017 
	#R_IA_64_LTOFF_FPTR64LSB
 0x57

	)

1018 
	#R_IA_64_SEGREL32MSB
 0x5¯

	)

1019 
	#R_IA_64_SEGREL32LSB
 0x5d

	)

1020 
	#R_IA_64_SEGREL64MSB
 0x5ê

	)

1021 
	#R_IA_64_SEGREL64LSB
 0x5‡

	)

1022 
	#R_IA_64_SECREL32MSB
 0x64

	)

1023 
	#R_IA_64_SECREL32LSB
 0x65

	)

1024 
	#R_IA_64_SECREL64MSB
 0x66

	)

1025 
	#R_IA_64_SECREL64LSB
 0x67

	)

1026 
	#R_IA_64_REL32MSB
 0x6¯

	)

1027 
	#R_IA_64_REL32LSB
 0x6d

	)

1028 
	#R_IA_64_REL64MSB
 0x6ê

	)

1029 
	#R_IA_64_REL64LSB
 0x6‡

	)

1030 
	#R_IA_64_LTV32MSB
 0x74

	)

1031 
	#R_IA_64_LTV32LSB
 0x75

	)

1032 
	#R_IA_64_LTV64MSB
 0x76

	)

1033 
	#R_IA_64_LTV64LSB
 0x77

	)

1034 
	#R_IA_64_PCREL21BI
 0x79

	)

1035 
	#R_IA_64_PCREL22
 0x7®

	)

1036 
	#R_IA_64_PCREL64I
 0x7b

	)

1037 
	#R_IA_64_IPLTMSB
 0x80

	)

1038 
	#R_IA_64_IPLTLSB
 0x81

	)

1039 
	#R_IA_64_SUB
 0x85

	)

1040 
	#R_IA_64_LTOFF22X
 0x86

	)

1041 
	#R_IA_64_LDXMOV
 0x87

	)

1042 
	#R_IA_64_TPREL14
 0x91

	)

1043 
	#R_IA_64_TPREL22
 0x92

	)

1044 
	#R_IA_64_TPREL64I
 0x93

	)

1045 
	#R_IA_64_TPREL64MSB
 0x96

	)

1046 
	#R_IA_64_TPREL64LSB
 0x97

	)

1047 
	#R_IA_64_LTOFF_TPREL22
 0x9®

	)

1048 
	#R_IA_64_DTPMOD64MSB
 0xa6

	)

1049 
	#R_IA_64_DTPMOD64LSB
 0xa7

	)

1050 
	#R_IA_64_LTOFF_DTPMOD22
 0xØ

	)

1051 
	#R_IA_64_DTPREL14
 0xb1

	)

1052 
	#R_IA_64_DTPREL22
 0xb2

	)

1053 
	#R_IA_64_DTPREL64I
 0xb3

	)

1054 
	#R_IA_64_DTPREL32MSB
 0xb4

	)

1055 
	#R_IA_64_DTPREL32LSB
 0xb5

	)

1056 
	#R_IA_64_DTPREL64MSB
 0xb6

	)

1057 
	#R_IA_64_DTPREL64LSB
 0xb7

	)

1058 
	#R_IA_64_LTOFF_DTPREL22
 0xb®

	)

1060 
	#R_MIPS_NONE
 0

	)

1061 
	#R_MIPS_16
 1

	)

1062 
	#R_MIPS_32
 2

	)

1063 
	#R_MIPS_REL32
 3

	)

1064 
	#R_MIPS_26
 4

	)

1065 
	#R_MIPS_HI16
 5

	)

1066 
	#R_MIPS_LO16
 6

	)

1067 
	#R_MIPS_GPREL16
 7

	)

1068 
	#R_MIPS_LITERAL
 8

	)

1069 
	#R_MIPS_GOT16
 9

	)

1070 
	#R_MIPS_PC16
 10

	)

1071 
	#R_MIPS_CALL16
 11

	)

1072 
	#R_MIPS_GPREL32
 12

	)

1073 
	#R_MIPS_64
 18

	)

1074 
	#R_MIPS_GOT_DISP
 19

	)

1075 
	#R_MIPS_GOT_PAGE
 20

	)

1076 
	#R_MIPS_GOT_OFST
 21

	)

1077 
	#R_MIPS_GOT_HI16
 22

	)

1078 
	#R_MIPS_GOT_LO16
 23

	)

1079 
	#R_MIPS_SUB
 24

	)

1080 
	#R_MIPS_CALLHI16
 30

	)

1081 
	#R_MIPS_CALLLO16
 31

	)

1082 
	#R_MIPS_JALR
 37

	)

1083 
	#R_MIPS_TLS_GD
 42

	)

1084 
	#R_MIPS_COPY
 126

	)

1085 
	#R_MIPS_JUMP_SLOT
 127

	)

1087 
	#R_PPC_NONE
 0

	)

1088 
	#R_PPC_ADDR32
 1

	)

1089 
	#R_PPC_ADDR24
 2

	)

1090 
	#R_PPC_ADDR16
 3

	)

1091 
	#R_PPC_ADDR16_LO
 4

	)

1092 
	#R_PPC_ADDR16_HI
 5

	)

1093 
	#R_PPC_ADDR16_HA
 6

	)

1094 
	#R_PPC_ADDR14
 7

	)

1095 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1096 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1097 
	#R_PPC_REL24
 10

	)

1098 
	#R_PPC_REL14
 11

	)

1099 
	#R_PPC_REL14_BRTAKEN
 12

	)

1100 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1101 
	#R_PPC_GOT16
 14

	)

1102 
	#R_PPC_GOT16_LO
 15

	)

1103 
	#R_PPC_GOT16_HI
 16

	)

1104 
	#R_PPC_GOT16_HA
 17

	)

1105 
	#R_PPC_PLTREL24
 18

	)

1106 
	#R_PPC_COPY
 19

	)

1107 
	#R_PPC_GLOB_DAT
 20

	)

1108 
	#R_PPC_JMP_SLOT
 21

	)

1109 
	#R_PPC_RELATIVE
 22

	)

1110 
	#R_PPC_LOCAL24PC
 23

	)

1111 
	#R_PPC_UADDR32
 24

	)

1112 
	#R_PPC_UADDR16
 25

	)

1113 
	#R_PPC_REL32
 26

	)

1114 
	#R_PPC_PLT32
 27

	)

1115 
	#R_PPC_PLTREL32
 28

	)

1116 
	#R_PPC_PLT16_LO
 29

	)

1117 
	#R_PPC_PLT16_HI
 30

	)

1118 
	#R_PPC_PLT16_HA
 31

	)

1119 
	#R_PPC_SDAREL16
 32

	)

1120 
	#R_PPC_SECTOFF
 33

	)

1121 
	#R_PPC_SECTOFF_LO
 34

	)

1122 
	#R_PPC_SECTOFF_HI
 35

	)

1123 
	#R_PPC_SECTOFF_HA
 36

	)

1128 
	#R_PPC64_ADDR64
 38

	)

1129 
	#R_PPC64_ADDR16_HIGHER
 39

	)

1130 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

1131 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

1132 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

1133 
	#R_PPC64_UADDR64
 43

	)

1134 
	#R_PPC64_REL64
 44

	)

1135 
	#R_PPC64_PLT64
 45

	)

1136 
	#R_PPC64_PLTREL64
 46

	)

1137 
	#R_PPC64_TOC16
 47

	)

1138 
	#R_PPC64_TOC16_LO
 48

	)

1139 
	#R_PPC64_TOC16_HI
 49

	)

1140 
	#R_PPC64_TOC16_HA
 50

	)

1141 
	#R_PPC64_TOC
 51

	)

1142 
	#R_PPC64_DTPMOD64
 68

	)

1143 
	#R_PPC64_TPREL64
 73

	)

1144 
	#R_PPC64_DTPREL64
 78

	)

1149 
	#R_PPC_TLS
 67

	)

1150 
	#R_PPC_DTPMOD32
 68

	)

1151 
	#R_PPC_TPREL16
 69

	)

1152 
	#R_PPC_TPREL16_LO
 70

	)

1153 
	#R_PPC_TPREL16_HI
 71

	)

1154 
	#R_PPC_TPREL16_HA
 72

	)

1155 
	#R_PPC_TPREL32
 73

	)

1156 
	#R_PPC_DTPREL16
 74

	)

1157 
	#R_PPC_DTPREL16_LO
 75

	)

1158 
	#R_PPC_DTPREL16_HI
 76

	)

1159 
	#R_PPC_DTPREL16_HA
 77

	)

1160 
	#R_PPC_DTPREL32
 78

	)

1161 
	#R_PPC_GOT_TLSGD16
 79

	)

1162 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

1163 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

1164 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

1165 
	#R_PPC_GOT_TLSLD16
 83

	)

1166 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

1167 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

1168 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

1169 
	#R_PPC_GOT_TPREL16
 87

	)

1170 
	#R_PPC_GOT_TPREL16_LO
 88

	)

1171 
	#R_PPC_GOT_TPREL16_HI
 89

	)

1172 
	#R_PPC_GOT_TPREL16_HA
 90

	)

1179 
	#R_PPC_EMB_NADDR32
 101

	)

1180 
	#R_PPC_EMB_NADDR16
 102

	)

1181 
	#R_PPC_EMB_NADDR16_LO
 103

	)

1182 
	#R_PPC_EMB_NADDR16_HI
 104

	)

1183 
	#R_PPC_EMB_NADDR16_HA
 105

	)

1184 
	#R_PPC_EMB_SDAI16
 106

	)

1185 
	#R_PPC_EMB_SDA2I16
 107

	)

1186 
	#R_PPC_EMB_SDA2REL
 108

	)

1187 
	#R_PPC_EMB_SDA21
 109

	)

1188 
	#R_PPC_EMB_MRKREF
 110

	)

1189 
	#R_PPC_EMB_RELSEC16
 111

	)

1190 
	#R_PPC_EMB_RELST_LO
 112

	)

1191 
	#R_PPC_EMB_RELST_HI
 113

	)

1192 
	#R_PPC_EMB_RELST_HA
 114

	)

1193 
	#R_PPC_EMB_BIT_FLD
 115

	)

1194 
	#R_PPC_EMB_RELSDA
 116

	)

1201 
	#R_RISCV_NONE
 0

	)

1202 
	#R_RISCV_32
 1

	)

1203 
	#R_RISCV_64
 2

	)

1204 
	#R_RISCV_RELATIVE
 3

	)

1205 
	#R_RISCV_COPY
 4

	)

1206 
	#R_RISCV_JUMP_SLOT
 5

	)

1207 
	#R_RISCV_TLS_DTPMOD32
 6

	)

1208 
	#R_RISCV_TLS_DTPMOD64
 7

	)

1209 
	#R_RISCV_TLS_DTPREL32
 8

	)

1210 
	#R_RISCV_TLS_DTPREL64
 9

	)

1211 
	#R_RISCV_TLS_TPREL32
 10

	)

1212 
	#R_RISCV_TLS_TPREL64
 11

	)

1215 
	#R_RISCV_BRANCH
 16

	)

1216 
	#R_RISCV_JAL
 17

	)

1217 
	#R_RISCV_CALL
 18

	)

1218 
	#R_RISCV_CALL_PLT
 19

	)

1219 
	#R_RISCV_GOT_HI20
 20

	)

1220 
	#R_RISCV_TLS_GOT_HI20
 21

	)

1221 
	#R_RISCV_TLS_GD_HI20
 22

	)

1222 
	#R_RISCV_PCREL_HI20
 23

	)

1223 
	#R_RISCV_PCREL_LO12_I
 24

	)

1224 
	#R_RISCV_PCREL_LO12_S
 25

	)

1225 
	#R_RISCV_HI20
 26

	)

1226 
	#R_RISCV_LO12_I
 27

	)

1227 
	#R_RISCV_LO12_S
 28

	)

1228 
	#R_RISCV_TPREL_HI20
 29

	)

1229 
	#R_RISCV_TPREL_LO12_I
 30

	)

1230 
	#R_RISCV_TPREL_LO12_S
 31

	)

1231 
	#R_RISCV_TPREL_ADD
 32

	)

1232 
	#R_RISCV_ADD8
 33

	)

1233 
	#R_RISCV_ADD16
 34

	)

1234 
	#R_RISCV_ADD32
 35

	)

1235 
	#R_RISCV_ADD64
 36

	)

1236 
	#R_RISCV_SUB8
 37

	)

1237 
	#R_RISCV_SUB16
 38

	)

1238 
	#R_RISCV_SUB32
 39

	)

1239 
	#R_RISCV_SUB64
 40

	)

1240 
	#R_RISCV_GNU_VTINHERIT
 41

	)

1241 
	#R_RISCV_GNU_VTENTRY
 42

	)

1242 
	#R_RISCV_ALIGN
 43

	)

1243 
	#R_RISCV_RVC_BRANCH
 44

	)

1244 
	#R_RISCV_RVC_JUMP
 45

	)

1246 
	#R_SPARC_NONE
 0

	)

1247 
	#R_SPARC_8
 1

	)

1248 
	#R_SPARC_16
 2

	)

1249 
	#R_SPARC_32
 3

	)

1250 
	#R_SPARC_DISP8
 4

	)

1251 
	#R_SPARC_DISP16
 5

	)

1252 
	#R_SPARC_DISP32
 6

	)

1253 
	#R_SPARC_WDISP30
 7

	)

1254 
	#R_SPARC_WDISP22
 8

	)

1255 
	#R_SPARC_HI22
 9

	)

1256 
	#R_SPARC_22
 10

	)

1257 
	#R_SPARC_13
 11

	)

1258 
	#R_SPARC_LO10
 12

	)

1259 
	#R_SPARC_GOT10
 13

	)

1260 
	#R_SPARC_GOT13
 14

	)

1261 
	#R_SPARC_GOT22
 15

	)

1262 
	#R_SPARC_PC10
 16

	)

1263 
	#R_SPARC_PC22
 17

	)

1264 
	#R_SPARC_WPLT30
 18

	)

1265 
	#R_SPARC_COPY
 19

	)

1266 
	#R_SPARC_GLOB_DAT
 20

	)

1267 
	#R_SPARC_JMP_SLOT
 21

	)

1268 
	#R_SPARC_RELATIVE
 22

	)

1269 
	#R_SPARC_UA32
 23

	)

1270 
	#R_SPARC_PLT32
 24

	)

1271 
	#R_SPARC_HIPLT22
 25

	)

1272 
	#R_SPARC_LOPLT10
 26

	)

1273 
	#R_SPARC_PCPLT32
 27

	)

1274 
	#R_SPARC_PCPLT22
 28

	)

1275 
	#R_SPARC_PCPLT10
 29

	)

1276 
	#R_SPARC_10
 30

	)

1277 
	#R_SPARC_11
 31

	)

1278 
	#R_SPARC_64
 32

	)

1279 
	#R_SPARC_OLO10
 33

	)

1280 
	#R_SPARC_HH22
 34

	)

1281 
	#R_SPARC_HM10
 35

	)

1282 
	#R_SPARC_LM22
 36

	)

1283 
	#R_SPARC_PC_HH22
 37

	)

1284 
	#R_SPARC_PC_HM10
 38

	)

1285 
	#R_SPARC_PC_LM22
 39

	)

1286 
	#R_SPARC_WDISP16
 40

	)

1287 
	#R_SPARC_WDISP19
 41

	)

1288 
	#R_SPARC_GLOB_JMP
 42

	)

1289 
	#R_SPARC_7
 43

	)

1290 
	#R_SPARC_5
 44

	)

1291 
	#R_SPARC_6
 45

	)

1292 
	#R_SPARC_DISP64
 46

	)

1293 
	#R_SPARC_PLT64
 47

	)

1294 
	#R_SPARC_HIX22
 48

	)

1295 
	#R_SPARC_LOX10
 49

	)

1296 
	#R_SPARC_H44
 50

	)

1297 
	#R_SPARC_M44
 51

	)

1298 
	#R_SPARC_L44
 52

	)

1299 
	#R_SPARC_REGISTER
 53

	)

1300 
	#R_SPARC_UA64
 54

	)

1301 
	#R_SPARC_UA16
 55

	)

1302 
	#R_SPARC_TLS_GD_HI22
 56

	)

1303 
	#R_SPARC_TLS_GD_LO10
 57

	)

1304 
	#R_SPARC_TLS_GD_ADD
 58

	)

1305 
	#R_SPARC_TLS_GD_CALL
 59

	)

1306 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1307 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1308 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1309 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1310 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1311 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1312 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1313 
	#R_SPARC_TLS_IE_HI22
 67

	)

1314 
	#R_SPARC_TLS_IE_LO10
 68

	)

1315 
	#R_SPARC_TLS_IE_LD
 69

	)

1316 
	#R_SPARC_TLS_IE_LDX
 70

	)

1317 
	#R_SPARC_TLS_IE_ADD
 71

	)

1318 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1319 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1320 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1321 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1322 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1323 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1324 
	#R_SPARC_TLS_TPOFF32
 78

	)

1325 
	#R_SPARC_TLS_TPOFF64
 79

	)

1327 
	#R_X86_64_NONE
 0

	)

1328 
	#R_X86_64_64
 1

	)

1329 
	#R_X86_64_PC32
 2

	)

1330 
	#R_X86_64_GOT32
 3

	)

1331 
	#R_X86_64_PLT32
 4

	)

1332 
	#R_X86_64_COPY
 5

	)

1333 
	#R_X86_64_GLOB_DAT
 6

	)

1334 
	#R_X86_64_JMP_SLOT
 7

	)

1335 
	#R_X86_64_RELATIVE
 8

	)

1336 
	#R_X86_64_GOTPCREL
 9

	)

1337 
	#R_X86_64_32
 10

	)

1338 
	#R_X86_64_32S
 11

	)

1339 
	#R_X86_64_16
 12

	)

1340 
	#R_X86_64_PC16
 13

	)

1341 
	#R_X86_64_8
 14

	)

1342 
	#R_X86_64_PC8
 15

	)

1343 
	#R_X86_64_DTPMOD64
 16

	)

1344 
	#R_X86_64_DTPOFF64
 17

	)

1345 
	#R_X86_64_TPOFF64
 18

	)

1346 
	#R_X86_64_TLSGD
 19

	)

1347 
	#R_X86_64_TLSLD
 20

	)

1348 
	#R_X86_64_DTPOFF32
 21

	)

1349 
	#R_X86_64_GOTTPOFF
 22

	)

1350 
	#R_X86_64_TPOFF32
 23

	)

1351 
	#R_X86_64_PC64
 24

	)

1352 
	#R_X86_64_GOTOFF64
 25

	)

1353 
	#R_X86_64_GOTPC32
 26

	)

1354 
	#R_X86_64_GOT64
 27

	)

1355 
	#R_X86_64_GOTPCREL64
 28

	)

1356 
	#R_X86_64_GOTPC64
 29

	)

1357 
	#R_X86_64_GOTPLT64
 30

	)

1358 
	#R_X86_64_PLTOFF64
 31

	)

1359 
	#R_X86_64_SIZE32
 32

	)

1360 
	#R_X86_64_SIZE64
 33

	)

1361 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

1362 
	#R_X86_64_TLSDESC_CALL
 35

	)

1363 
	#R_X86_64_TLSDESC
 36

	)

1364 
	#R_X86_64_IRELATIVE
 37

	)

	@/usr/include/sys/epoch.h

30 #i‚de‡
_SYS_EPOCH_H_


31 
	#_SYS_EPOCH_H_


	)

32 #ifde‡
_KERNEL


33 
	~<sys/lock.h
>

34 
	~<sys/p˝u.h
>

37 
	gïoch
;

38 
ïoch
 *
	tïoch_t
;

40 
	#EPOCH_PREEMPT
 0x1

	)

41 
	#EPOCH_LOCKED
 0x2

	)

43 
ïoch_t
 
globÆ_ïoch
;

44 
ïoch_t
 
globÆ_ïoch_¥ìm±
;

46 
	sïoch_c⁄ãxt
 {

47 *
	md©a
[2];

48 } 
__Æig√d
((*));

50 
ïoch_c⁄ãxt
 *
	tïoch_c⁄ãxt_t
;

53 
	sïoch_åackî
 {

54 *
	md©≠
[3];

55 #ifde‡
EPOCH_TRACKER_DEBUG


56 
	md©ai
[5];

58 
	md©ai
[1];

60 } 
__Æig√d
((*));

62 
ïoch_åackî
 *
	tïoch_åackî_t
;

64 
ïoch_t
 
ïoch_Æloc
(
Êags
);

65 
ïoch_‰ì
(
ïoch_t
 
ïoch
);

66 
ïoch_waô
(
ïoch_t
 
ïoch
);

67 
ïoch_waô_¥ìm±
(
ïoch_t
 
ïoch
);

68 
ïoch_ˇŒ
(
ïoch_t
 
ïoch
, 
ïoch_c⁄ãxt_t
 
˘x
, (*
ˇŒback
) (epoch_context_t));

69 
	`ö_ïoch
(
ïoch_t
 
ïoch
);

70 
	`ö_ïoch_vîbo£
(
ïoch_t
 
ïoch
, 
dump_⁄Áû
);

71 #ifde‡
_KERNEL


72 
	`DPCPU_DECLARE
(, 
ïoch_cb_cou¡
);

73 
	`DPCPU_DECLARE
(
grou±ask
, 
ïoch_cb_èsk
);

74 
	#EPOCH_MAGIC0
 0xFADECAFEF00DD00D

	)

75 
	#EPOCH_MAGIC1
 0xBADDBABEDEEDFEED

	)

77 
	`ïoch_íãr_¥ìm±_KBI
(
ïoch_t
 
ïoch
, 
ïoch_åackî_t
 
ë
);

78 
	`ïoch_exô_¥ìm±_KBI
(
ïoch_t
 
ïoch
, 
ïoch_åackî_t
 
ë
);

79 
	`ïoch_íãr_KBI
(
ïoch_t
 
ïoch
);

80 
	`ïoch_exô_KBI
(
ïoch_t
 
ïoch
);

83 #i‡
	`deföed
(
KLD_MODULE
Ë&& !deföed(
KLD_TIED
)

84 
	#ïoch_íãr_¥ìm±
(
e
, 
t
Ë
	`ïoch_íãr_¥ìm±_KBI
(”), (t))

	)

85 
	#ïoch_exô_¥ìm±
(
e
, 
t
Ë
	`ïoch_exô_¥ìm±_KBI
(”), (t))

	)

86 
	#ïoch_íãr
(
e
Ë
	`ïoch_íãr_KBI
(”))

	)

87 
	#ïoch_exô
(
e
Ë
	`ïoch_exô_KBI
(”))

	)

89 
	~<sys/ïoch_¥iv©e.h
>

	@/usr/include/sys/event.h

31 #i‚de‡
_SYS_EVENT_H_


32 
	#_SYS_EVENT_H_


	)

34 
	~<sys/_ty≥s.h
>

35 
	~<sys/queue.h
>

37 
	#EVFILT_READ
 (-1)

	)

38 
	#EVFILT_WRITE
 (-2)

	)

39 
	#EVFILT_AIO
 (-3Ë

	)

40 
	#EVFILT_VNODE
 (-4Ë

	)

41 
	#EVFILT_PROC
 (-5Ë

	)

42 
	#EVFILT_SIGNAL
 (-6Ë

	)

43 
	#EVFILT_TIMER
 (-7Ë

	)

44 
	#EVFILT_PROCDESC
 (-8Ë

	)

45 
	#EVFILT_FS
 (-9Ë

	)

46 
	#EVFILT_LIO
 (-10Ë

	)

47 
	#EVFILT_USER
 (-11Ë

	)

48 
	#EVFILT_SENDFILE
 (-12Ë

	)

49 
	#EVFILT_EMPTY
 (-13Ë

	)

50 
	#EVFILT_SYSCOUNT
 13

	)

52 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

53 
	#EV_SET
(
kevp_
, 
a
, 
b
, 
c
, 
d
, 
e
, 
f
) do { \

54 *(
kevp_
Ë(
kevít
){ \

55 .
idít
 = (
a
), \

56 .
fûãr
 = (
b
), \

57 .
Êags
 = (
c
), \

58 .
fÊags
 = (
d
), \

59 .
d©a
 = (
e
), \

60 .
ud©a
 = (
f
), \

61 .
ext
 = {0}, \

63 } 0)

	)

68 
	#EV_SET
(
kevp_
, 
a
, 
b
, 
c
, 
d
, 
e
, 
f
) do { \

69 
kevít
 *
kevp
 = (
kevp_
); \

70 (
kevp
)->
idít
 = (
a
); \

71 (
kevp
)->
fûãr
 = (
b
); \

72 (
kevp
)->
Êags
 = (
c
); \

73 (
kevp
)->
fÊags
 = (
d
); \

74 (
kevp
)->
d©a
 = (
e
); \

75 (
kevp
)->
ud©a
 = (
f
); \

76 (
kevp
)->
ext
[0] = 0; \

77 (
kevp
)->
ext
[1] = 0; \

78 (
kevp
)->
ext
[2] = 0; \

79 (
kevp
)->
ext
[3] = 0; \

80 } 0)

	)

83 
	skevít
 {

84 
__uöçå_t
 
	midít
;

85 
	mfûãr
;

86 
	mÊags
;

87 
	mfÊags
;

88 
__öt64_t
 
	md©a
;

89 *
	mud©a
;

90 
__uöt64_t
 
	mext
[4];

93 #i‡
deföed
(
_WANT_FREEBSD11_KEVENT
)

95 
	skevít_‰ìbsd11
 {

96 
__uöçå_t
 
	midít
;

97 
	mfûãr
;

98 
	mÊags
;

99 
	mfÊags
;

100 
__öçå_t
 
	md©a
;

101 *
	mud©a
;

105 #i‡
deföed
(
_WANT_KEVENT32
Ë|| (deföed(
_KERNEL
Ë&& deföed(
__LP64__
))

106 
	skevít32
 {

107 
uöt32_t
 
	midít
;

108 
	mfûãr
;

109 
u_sh‹t
 
	mÊags
;

110 
u_öt
 
	mfÊags
;

111 #i‚de‡
__amd64__


112 
uöt32_t
 
	m∑d0
;

114 
öt32_t
 
	md©a1
, 
	md©a2
;

115 
uöt32_t
 
	mud©a
;

116 #i‚de‡
__amd64__


117 
uöt32_t
 
	m∑d1
;

119 
uöt32_t
 
	mext64
[8];

122 #ifde‡
_WANT_FREEBSD11_KEVENT


123 
	skevít32_‰ìbsd11
 {

124 
u_öt32_t
 
	midít
;

125 
	mfûãr
;

126 
u_sh‹t
 
	mÊags
;

127 
u_öt
 
	mfÊags
;

128 
öt32_t
 
	md©a
;

129 
u_öt32_t
 
	mud©a
;

135 
	#EV_ADD
 0x0001

	)

136 
	#EV_DELETE
 0x0002

	)

137 
	#EV_ENABLE
 0x0004

	)

138 
	#EV_DISABLE
 0x0008

	)

139 
	#EV_FORCEONESHOT
 0x0100

	)

142 
	#EV_ONESHOT
 0x0010

	)

143 
	#EV_CLEAR
 0x0020

	)

144 
	#EV_RECEIPT
 0x0040

	)

145 
	#EV_DISPATCH
 0x0080

	)

147 
	#EV_SYSFLAGS
 0xF000

	)

148 
	#EV_DROP
 0x1000

	)

149 
	#EV_FLAG1
 0x2000

	)

150 
	#EV_FLAG2
 0x4000

	)

153 
	#EV_EOF
 0x8000

	)

154 
	#EV_ERROR
 0x4000

	)

165 
	#NOTE_FFNOP
 0x00000000

	)

166 
	#NOTE_FFAND
 0x40000000

	)

167 
	#NOTE_FFOR
 0x80000000

	)

168 
	#NOTE_FFCOPY
 0xc0000000

	)

169 
	#NOTE_FFCTRLMASK
 0xc0000000

	)

170 
	#NOTE_FFLAGSMASK
 0x00ffffff

	)

172 
	#NOTE_TRIGGER
 0x01000000

	)

178 
	#NOTE_LOWAT
 0x0001

	)

179 
	#NOTE_FILE_POLL
 0x0002

	)

184 
	#NOTE_DELETE
 0x0001

	)

185 
	#NOTE_WRITE
 0x0002

	)

186 
	#NOTE_EXTEND
 0x0004

	)

187 
	#NOTE_ATTRIB
 0x0008

	)

188 
	#NOTE_LINK
 0x0010

	)

189 
	#NOTE_RENAME
 0x0020

	)

190 
	#NOTE_REVOKE
 0x0040

	)

191 
	#NOTE_OPEN
 0x0080

	)

192 
	#NOTE_CLOSE
 0x0100

	)

194 
	#NOTE_CLOSE_WRITE
 0x0200

	)

196 
	#NOTE_READ
 0x0400

	)

201 
	#NOTE_EXIT
 0x80000000

	)

202 
	#NOTE_FORK
 0x40000000

	)

203 
	#NOTE_EXEC
 0x20000000

	)

204 
	#NOTE_PCTRLMASK
 0xf0000000

	)

205 
	#NOTE_PDATAMASK
 0x000ffff‡

	)

208 
	#NOTE_TRACK
 0x00000001

	)

209 
	#NOTE_TRACKERR
 0x00000002

	)

210 
	#NOTE_CHILD
 0x00000004

	)

213 
	#NOTE_SECONDS
 0x00000001

	)

214 
	#NOTE_MSECONDS
 0x00000002

	)

215 
	#NOTE_USECONDS
 0x00000004

	)

216 
	#NOTE_NSECONDS
 0x00000008

	)

217 
	#NOTE_ABSTIME
 0x00000010

	)

219 
	gknŸe
;

220 
SLIST_HEAD
(
kli°
, 
knŸe
);

221 
	gkqueue
;

222 
TAILQ_HEAD
(
kqli°
, 
kqueue
);

223 
	sk∆i°
 {

224 
kli°
 
	mkl_li°
;

225 (*
	mkl_lock
)(*);

226 (*
	mkl_u∆ock
)(*);

227 (*
	mkl_as£π_locked
)(*);

228 (*
	mkl_as£π_u∆ocked
)(*);

229 *
	mkl_lock¨g
;

230 
	mkl_autode°roy
;

234 #ifde‡
_KERNEL


239 
	#KNF_LISTLOCKED
 0x0001

	)

240 
	#KNF_NOKQLOCK
 0x0002

	)

242 
	#KNOTE
(
li°
, 
höt
, 
Êags
Ë
	`knŸe
÷i°, höt, fœgs)

	)

243 
	#KNOTE_LOCKED
(
li°
, 
höt
Ë
	`knŸe
÷i°, höt, 
KNF_LISTLOCKED
)

	)

244 
	#KNOTE_UNLOCKED
(
li°
, 
höt
Ë
	`knŸe
÷i°, höt, 0)

	)

246 
	#KNLIST_EMPTY
(
li°
Ë
	`SLIST_EMPTY
(&÷i°)->
kl_li°
)

	)

252 
	#NOTE_SIGNAL
 0x08000000

	)

261 
	#EVENT_REGISTER
 1

	)

262 
	#EVENT_PROCESS
 2

	)

264 
	sfûãr›s
 {

265 
	mf_isfd
;

266 (*
	mf_©èch
)(
knŸe
 *
	mkn
);

267 (*
	mf_dëach
)(
knŸe
 *
	mkn
);

268 (*
	mf_evít
)(
knŸe
 *
	mkn
, 
	mhöt
);

269 (*
	mf_touch
)(
knŸe
 *
	mkn
, 
kevít
 *
	mkev
, 
u_l⁄g
 
	mty≥
);

281 
	sknŸe
 {

282 
SLIST_ENTRY
(
knŸe
Ë
	mkn_lök
;

283 
SLIST_ENTRY
(
knŸe
Ë
	mkn_£ ext
;

284 
k∆i°
 *
	mkn_k∆i°
;

285 
TAILQ_ENTRY
(
knŸe
Ë
	mkn_tqe
;

286 
kqueue
 *
	mkn_kq
;

287 
kevít
 
	mkn_kevít
;

288 *
	mkn_hook
;

289 
	mkn_hookid
;

290 
	mkn_°©us
;

291 
	#KN_ACTIVE
 0x01

	)

292 
	#KN_QUEUED
 0x02

	)

293 
	#KN_DISABLED
 0x04

	)

294 
	#KN_DETACHED
 0x08

	)

295 
	#KN_MARKER
 0x20

	)

296 
	#KN_KQUEUE
 0x40

	)

297 
	#KN_HASKQLOCK
 0x80

	)

298 
	#KN_SCAN
 0x100

	)

299 
	mkn_öÊux
;

300 
	mkn_sfÊags
;

301 
öt64_t
 
	mkn_sd©a
;

303 
fûe
 *
	mp_Â
;

304 
¥oc
 *
	mp_¥oc
;

305 
kaiocb
 *
	mp_aio
;

306 
aiﬁiojob
 *
	mp_lio
;

307 *
	mp_v
;

308 } 
	mkn_±r
;

309 
fûãr›s
 *
	mkn_f›
;

311 
	#kn_id
 
kn_kevít
.
idít


	)

312 
	#kn_fûãr
 
kn_kevít
.
fûãr


	)

313 
	#kn_Êags
 
kn_kevít
.
Êags


	)

314 
	#kn_fÊags
 
kn_kevít
.
fÊags


	)

315 
	#kn_d©a
 
kn_kevít
.
d©a


	)

316 
	#kn_Â
 
kn_±r
.
p_Â


	)

318 
	skevít_c›y›s
 {

319 *
	m¨g
;

320 (*
	mk_c›yout
)(*
	m¨g
, 
kevít
 *
	mkevp
, 
	mcou¡
);

321 (*
	mk_c›yö
)(*
	m¨g
, 
kevít
 *
	mkevp
, 
	mcou¡
);

322 
size_t
 
	mkevít_size
;

325 
	gthªad
;

326 
	g¥oc
;

327 
	gk∆i°
;

328 
	gmtx
;

329 
	grwlock
;

331 
knŸe
(
k∆i°
 *
li°
, 
höt
, 
lockÊags
);

332 
knŸe_f‹k
(
k∆i°
 *
li°
, 
pid
);

333 
k∆i°
 *
k∆i°_Æloc
(
mtx
 *
lock
);

334 
k∆i°_dëach
(
k∆i°
 *
k∆
);

335 
k∆i°_add
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
, 
i¶ocked
);

336 
k∆i°_ªmove
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
, 
i¶ocked
);

337 
k∆i°_em±y
(
k∆i°
 *
k∆
);

338 
k∆i°_öô
(
k∆i°
 *
k∆
, *
lock
, (*
kl_lock
)(*),

339 (*
kl_u∆ock
)(*), (*
kl_as£π_locked
)(*),

340 (*
kl_as£π_u∆ocked
)(*));

341 
	`k∆i°_öô_mtx
(
k∆i°
 *
k∆
, 
mtx
 *
lock
);

342 
	`k∆i°_öô_rw_ªadî
(
k∆i°
 *
k∆
, 
rwlock
 *
lock
);

343 
	`k∆i°_de°roy
(
k∆i°
 *
k∆
);

344 
	`k∆i°_˛órdñ
(
k∆i°
 *
k∆
, 
thªad
 *
td
,

345 
i¶ocked
, 
kûlkn
);

346 
	#k∆i°_˛ór
(
k∆
, 
i¶ocked
) \

347 
	`k∆i°_˛órdñ
((
k∆
), 
NULL
, (
i¶ocked
), 0)

	)

348 
	#k∆i°_dñëe
(
k∆
, 
td
, 
i¶ocked
) \

349 
	`k∆i°_˛órdñ
((
k∆
), (
td
), (
i¶ocked
), 1)

	)

350 
	`knŸe_fd˛o£
(
thªad
 *
p
, 
fd
);

351 
	`kqfd_ªgi°î
(
fd
, 
kevít
 *
kev
, 
thªad
 *
p
,

352 
waôok
);

353 
	`kqueue_add_fûãr›ts
(
fût
, 
fûãr›s
 *
fût›s
);

354 
	`kqueue_dñ_fûãr›ts
(
fût
);

358 
	~<sys/cdefs.h
>

359 
time•ec
;

361 
__BEGIN_DECLS


362 
	`kqueue
();

363 
	`kevít
(
kq
, c⁄° 
kevít
 *
ch™gñi°
, 
nch™ges
,

364 
kevít
 *
evíéi°
, 
√víts
,

365 c⁄° 
time•ec
 *
timeout
);

366 
__END_DECLS


	@/usr/include/sys/eventhandler.h

31 #i‚de‡
_SYS_EVENTHANDLER_H_


32 
	#_SYS_EVENTHANDLER_H_


	)

34 
	~<sys/lock.h
>

35 
	~<sys/kå.h
>

36 
	~<sys/muãx.h
>

37 
	~<sys/queue.h
>

39 
	sevíth™dÀr_íåy
 {

40 
TAILQ_ENTRY
(
evíth™dÀr_íåy
Ë
	mì_lök
;

41 
	mì_¥i‹ôy
;

42 
	#EHE_DEAD_PRIORITY
 (-1)

	)

43 *
	mì_¨g
;

46 #ifde‡
VIMAGE


47 
	sevíth™dÀr_íåy_vimage
 {

48 (* 
	mfunc
)();

49 *
	mì_¨g
;

50 *
	m•¨ï
[2];

54 
	sevíth™dÀr_li°
 {

55 *
	mñ_«me
;

56 
	mñ_Êags
;

57 
u_öt
 
	mñ_runcou¡
;

58 
mtx
 
	mñ_lock
;

59 
TAILQ_ENTRY
(
evíth™dÀr_li°
Ë
	mñ_lök
;

60 
TAILQ_HEAD
(,
evíth™dÀr_íåy
Ë
	mñ_íåõs
;

63 
evíth™dÀr_íåy
 *
	tevíth™dÀr_èg
;

65 
	#EHL_LOCK
(
p
Ë
	`mtx_lock
(&’)->
ñ_lock
)

	)

66 
	#EHL_UNLOCK
(
p
Ë
	`mtx_u∆ock
(&’)->
ñ_lock
)

	)

67 
	#EHL_LOCK_ASSERT
(
p
, 
x
Ë
	`mtx_as£π
(&’)->
ñ_lock
, x)

	)

72 
	#_EVENTHANDLER_INVOKE
(
«me
, 
li°
, ...) do { \

73 
evíth™dÀr_íåy
 *
_ï
; \

74 
evíth™dÀr_íåy_
 ## 
«me
 *
_t
; \

76 
	`EHL_LOCK_ASSERT
((
li°
), 
MA_OWNED
); \

77 (
li°
)->
ñ_runcou¡
++; \

78 
	`KASSERT
((
li°
)->
ñ_runcou¡
 > 0, \

80 
	`CTR0
(
KTR_EVH
, "evíth™dÀr_övoke(\"" 
	`__STRING
(
«me
) "\")"); \

81 
	`TAILQ_FOREACH
(
_ï
, &((
li°
)->
ñ_íåõs
), 
ì_lök
) { \

82 i‡(
_ï
->
ì_¥i‹ôy
 !
EHE_DEAD_PRIORITY
) { \

83 
	`EHL_UNLOCK
((
li°
)); \

84 
_t
 = (
evíth™dÀr_íåy_
 ## 
«me
 *)
_ï
; \

85 
	`CTR1
(
KTR_EVH
, "eventhandler_invoke:Éxecuting %p", \

86 (*)
_t
->
eh_func
); \

87 
_t
->
	`eh_func
(
_ï
->
ì_¨g
 , ## 
__VA_ARGS__
); \

88 
	`EHL_LOCK
((
li°
)); \

91 
	`KASSERT
((
li°
)->
ñ_runcou¡
 > 0, \

93 (
li°
)->
ñ_runcou¡
--; \

94 i‡((
li°
)->
ñ_runcou¡
 == 0) \

95 
	`evíth™dÀr_¥u√_li°
(
li°
); \

96 
	`EHL_UNLOCK
((
li°
)); \

97 } 0)

	)

110 
	#EVENTHANDLER_LIST_DECLARE
(
«me
) \

111 
evíth™dÀr_li°
 *
_evíth™dÀr_li°_
 ## 
«me
 \

112 

	)

113 
	#EVENTHANDLER_LIST_DEFINE
(
«me
) \

114 
evíth™dÀr_li°
 *
_evíth™dÀr_li°_
 ## 
«me
 ; \

115 
_ehl_öô_
 ## 
	`«me
 (* 
˘x
 
__unu£d
) \

117 
_evíth™dÀr_li°_
 ## 
«me
 = 
	`evíth™dÀr_¸óã_li°
(#name); \

119 
	`SYSINIT
(
«me
 ## 
_ehl_öô
, 
SI_SUB_EVENTHANDLER
, 
SI_ORDER_ANY
, \

120 
_ehl_öô_
 ## 
«me
, 
NULL
); \

121 
__hack


	)

123 
	#EVENTHANDLER_DIRECT_INVOKE
(
«me
, ...) do { \

124 
evíth™dÀr_li°
 *
_ñ
; \

126 
_ñ
 = 
_evíth™dÀr_li°_
 ## 
«me
 ; \

127 i‡(!
	`TAILQ_EMPTY
(&
_ñ
->
ñ_íåõs
)) { \

128 
	`EHL_LOCK
(
_ñ
); \

129 
	`_EVENTHANDLER_INVOKE
(
«me
, 
_ñ
 , ## 
__VA_ARGS__
); \

131 } 0)

	)

137 
	#EVENTHANDLER_DECLARE
(
«me
, 
ty≥
) \

138 
evíth™dÀr_íåy_
 ## 
«me
 \

140 
evíth™dÀr_íåy
 
ì
; \

141 
ty≥
 
eh_func
; \

143 
__hack


	)

145 
	#EVENTHANDLER_DEFINE
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

146 
evíth™dÀr_èg
 
«me
 ## 
_èg
; \

147 
«me
 ## 
	`_evh_öô
(*
˘x
) \

149 
«me
 ## 
_èg
 = 
	`EVENTHANDLER_REGISTER
“ame, 
func
, 
˘x
, \

150 
¥i‹ôy
); \

152 
	`SYSINIT
(
«me
 ## 
_evh_öô
, 
SI_SUB_CONFIGURE
, 
SI_ORDER_ANY
, \

153 
«me
 ## 
_evh_öô
, 
¨g
); \

154 
__hack


	)

156 
	#EVENTHANDLER_INVOKE
(
«me
, ...) \

158 
evíth™dÀr_li°
 *
_ñ
; \

160 i‡((
_ñ
 = 
	`evíth™dÀr_föd_li°
(#«me)Ë!
NULL
) \

161 
	`_EVENTHANDLER_INVOKE
(
«me
, 
_ñ
 , ## 
__VA_ARGS__
); \

162 } 0)

	)

164 
	#EVENTHANDLER_REGISTER
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

165 
	`evíth™dÀr_ªgi°î
(
NULL
, #«me, 
func
, 
¨g
, 
¥i‹ôy
)

	)

167 
	#EVENTHANDLER_DEREGISTER
(
«me
, 
èg
) \

169 
evíth™dÀr_li°
 *
_ñ
; \

171 i‡((
_ñ
 = 
	`evíth™dÀr_föd_li°
(#«me)Ë!
NULL
) \

172 
	`evíth™dÀr_dîegi°î
(
_ñ
, 
èg
); \

173 } 0)

	)

175 
	#EVENTHANDLER_DEREGISTER_NOWAIT
(
«me
, 
èg
) \

177 
evíth™dÀr_li°
 *
_ñ
; \

179 i‡((
_ñ
 = 
	`evíth™dÀr_föd_li°
(#«me)Ë!
NULL
) \

180 
	`evíth™dÀr_dîegi°î_nowaô
(
_ñ
, 
èg
); \

181 } 0)

	)

183 
evíth™dÀr_èg
 
evíth™dÀr_ªgi°î
(
evíth™dÀr_li°
 *
li°
,

184 c⁄° *
«me
, *
func
, *
¨g
, 
¥i‹ôy
);

185 
evíth™dÀr_dîegi°î
(
evíth™dÀr_li°
 *
li°
,

186 
evíth™dÀr_èg
 
èg
);

187 
evíth™dÀr_dîegi°î_nowaô
(
evíth™dÀr_li°
 *
li°
,

188 
evíth™dÀr_èg
 
èg
);

189 
evíth™dÀr_li°
 *
evíth™dÀr_föd_li°
(c⁄° *
«me
);

190 
evíth™dÀr_¥u√_li°
(
evíth™dÀr_li°
 *
li°
);

191 
evíth™dÀr_li°
 *
evíth™dÀr_¸óã_li°
(c⁄° *
«me
);

193 #ifde‡
VIMAGE


194 (*
	tvimage_ôî©‹_func_t
)(*, ...);

196 
evíth™dÀr_èg
 
	`vimage_evíth™dÀr_ªgi°î
(
evíth™dÀr_li°
 *
li°
,

197 c⁄° *
«me
, *
func
, *
¨g
, 
¥i‹ôy
,

198 
vimage_ôî©‹_func_t
);

206 
	#EVENTHANDLER_PRI_FIRST
 0

	)

207 
	#EVENTHANDLER_PRI_ANY
 10000

	)

208 
	#EVENTHANDLER_PRI_LAST
 20000

	)

211 (*
	tshutdown_‚
)(*, );

213 
	#SHUTDOWN_PRI_FIRST
 
EVENTHANDLER_PRI_FIRST


	)

214 
	#SHUTDOWN_PRI_DEFAULT
 
EVENTHANDLER_PRI_ANY


	)

215 
	#SHUTDOWN_PRI_LAST
 
EVENTHANDLER_PRI_LAST


	)

217 
	`EVENTHANDLER_DECLARE
(
shutdown_¥e_sync
, 
shutdown_‚
);

218 
	`EVENTHANDLER_DECLARE
(
shutdown_po°_sync
, 
shutdown_‚
);

219 
	`EVENTHANDLER_DECLARE
(
shutdown_föÆ
, 
shutdown_‚
);

222 (*
	tpowî_ch™ge_‚
)(*);

223 
	`EVENTHANDLER_DECLARE
(
powî_ªsume
, 
powî_ch™ge_‚
);

224 
	`EVENTHANDLER_DECLARE
(
powî_su•íd
, 
powî_ch™ge_‚
);

225 
	`EVENTHANDLER_DECLARE
(
powî_su•íd_óæy
, 
powî_ch™ge_‚
);

228 (*
	tvm_lowmem_h™dÀr_t
)(*, );

229 
	#LOWMEM_PRI_DEFAULT
 
EVENTHANDLER_PRI_FIRST


	)

230 
	`EVENTHANDLER_DECLARE
(
vm_lowmem
, 
vm_lowmem_h™dÀr_t
);

233 (*
	tmou¡roŸ_h™dÀr_t
)(*);

234 
	`EVENTHANDLER_DECLARE
(
mou¡roŸ
, 
mou¡roŸ_h™dÀr_t
);

237 
mou¡
;

238 
vnode
;

239 
thªad
;

240 (*
	tvfs_mou¡ed_nŸify_‚
)(*, 
	tmou¡
 *, 
	tvnode
 *,

241 
	tthªad
 *);

242 (*
	tvfs_unmou¡ed_nŸify_‚
)(*, 
	tmou¡
 *,

243 
	tthªad
 *);

244 
	`EVENTHANDLER_DECLARE
(
vfs_mou¡ed
, 
vfs_mou¡ed_nŸify_‚
);

245 
	`EVENTHANDLER_DECLARE
(
vfs_unmou¡ed
, 
vfs_unmou¡ed_nŸify_‚
);

252 
¥oc
;

253 
image_∑øms
;

255 (*
	texôli°_‚
)(*, 
	t¥oc
 *);

256 (*
	tf‹kli°_‚
)(*, 
	t¥oc
 *, proc *, );

257 (*
	texe˛i°_‚
)(*, 
	t¥oc
 *, 
	timage_∑øms
 *);

258 (*
	t¥oc_˘‹_‚
)(*, 
	t¥oc
 *);

259 (*
	t¥oc_dt‹_‚
)(*, 
	t¥oc
 *);

260 (*
	t¥oc_öô_‚
)(*, 
	t¥oc
 *);

261 (*
	t¥oc_föi_‚
)(*, 
	t¥oc
 *);

262 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_˘‹
, 
¥oc_˘‹_‚
);

263 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_dt‹
, 
¥oc_dt‹_‚
);

264 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_öô
, 
¥oc_öô_‚
);

265 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_föi
, 
¥oc_föi_‚
);

266 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_exô
, 
exôli°_‚
);

267 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_f‹k
, 
f‹kli°_‚
);

268 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_exec
, 
exe˛i°_‚
);

273 (*
	t≠p_c‹edump_°¨t_‚
)(*, 
	tthªad
 *, *
	t«me
);

274 (*
	t≠p_c‹edump_¥ogªss_‚
)(*, 
	tthªad
 *
	ttd
, 
	tbyã_cou¡
);

275 (*
	t≠p_c‹edump_föish_‚
)(*, 
	tthªad
 *
	ttd
);

276 (*
	t≠p_c‹edump_îr‹_‚
)(*, 
	tthªad
 *
	ttd
, *
	tmsg
, ...);

278 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_°¨t
, 
≠p_c‹edump_°¨t_‚
);

279 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_¥ogªss
, 
≠p_c‹edump_¥ogªss_‚
);

280 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_föish
, 
≠p_c‹edump_föish_‚
);

281 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_îr‹
, 
≠p_c‹edump_îr‹_‚
);

283 (*
	tthªad_˘‹_‚
)(*, 
	tthªad
 *);

284 (*
	tthªad_dt‹_‚
)(*, 
	tthªad
 *);

285 (*
	tthªad_föi_‚
)(*, 
	tthªad
 *);

286 (*
	tthªad_öô_‚
)(*, 
	tthªad
 *);

287 
	`EVENTHANDLER_DECLARE
(
thªad_˘‹
, 
thªad_˘‹_‚
);

288 
	`EVENTHANDLER_DECLARE
(
thªad_dt‹
, 
thªad_dt‹_‚
);

289 
	`EVENTHANDLER_DECLARE
(
thªad_öô
, 
thªad_öô_‚
);

290 
	`EVENTHANDLER_DECLARE
(
thªad_föi
, 
thªad_föi_‚
);

292 (*
	tuma_z⁄e_ch‚
)(*);

293 
	`EVENTHANDLER_DECLARE
(
nmb˛u°îs_ch™ge
, 
uma_z⁄e_ch‚
);

294 
	`EVENTHANDLER_DECLARE
(
nmbufs_ch™ge
, 
uma_z⁄e_ch‚
);

295 
	`EVENTHANDLER_DECLARE
(
maxsockës_ch™ge
, 
uma_z⁄e_ch‚
);

298 
lökî_fûe
;

299 (*
	tkld_lﬂd_‚
)(*, 
	tlökî_fûe
 *);

300 (*
	tkld_u∆ﬂd_‚
)(*, c⁄° *, 
	tˇddr_t
, 
	tsize_t
);

301 (*
	tkld_u∆ﬂd_åy_‚
)(*, 
	tlökî_fûe
 *, *);

302 
	`EVENTHANDLER_DECLARE
(
kld_lﬂd
, 
kld_lﬂd_‚
);

303 
	`EVENTHANDLER_DECLARE
(
kld_u∆ﬂd
, 
kld_u∆ﬂd_‚
);

304 
	`EVENTHANDLER_DECLARE
(
kld_u∆ﬂd_åy
, 
kld_u∆ﬂd_åy_‚
);

307 
fb_öfo
;

308 (*
	tªgi°î_‰amebuf„r_‚
)(*, 
	tfb_öfo
 *);

309 (*
	tuƒegi°î_‰amebuf„r_‚
)(*, 
	tfb_öfo
 *);

310 
	`EVENTHANDLER_DECLARE
(
ªgi°î_‰amebuf„r
, 
ªgi°î_‰amebuf„r_‚
);

311 
	`EVENTHANDLER_DECLARE
(
uƒegi°î_‰amebuf„r
, 
uƒegi°î_‰amebuf„r_‚
);

314 
ˇm_∑th
;

315 
©a_∑øms
;

316 (*
	tada_¥obe_vëo_‚
)(*, 
	tˇm_∑th
 *,

317 
	t©a_∑øms
 *, *);

318 
	`EVENTHANDLER_DECLARE
(
ada_¥obe_vëo
, 
ada_¥obe_vëo_‚
);

321 
swdevt
;

322 (*
	tsw≠⁄_‚
)(*, 
	tswdevt
 *);

323 (*
	tsw≠off_‚
)(*, 
	tswdevt
 *);

324 
	`EVENTHANDLER_DECLARE
(
sw≠⁄
, 
sw≠⁄_‚
);

325 
	`EVENTHANDLER_DECLARE
(
sw≠off
, 
sw≠off_‚
);

328 
	eevhdev_dëach
 {

329 
EVHDEV_DETACH_BEGIN
,

330 
EVHDEV_DETACH_COMPLETE
,

331 
EVHDEV_DETACH_FAILED


333 (*
	tdevi˚_©èch_‚
)(*, 
	tdevi˚_t
);

334 (*
	tdevi˚_dëach_‚
)(*, 
	tdevi˚_t
, 
	tevhdev_dëach
);

335 
	`EVENTHANDLER_DECLARE
(
devi˚_©èch
, 
devi˚_©èch_‚
);

336 
	`EVENTHANDLER_DECLARE
(
devi˚_dëach
, 
devi˚_dëach_‚
);

	@/usr/include/sys/fnv_hash.h

10 #i‚de‡
_SYS_FNV_HASH_H_


11 
	#_SYS_FNV_HASH_H_


	)

13 
u_öt32_t
 
	tFnv32_t
;

14 
u_öt64_t
 
	tFnv64_t
;

16 
	#FNV1_32_INIT
 ((
Fnv32_t
Ë33554467UL)

	)

17 
	#FNV1_64_INIT
 ((
Fnv64_t
Ë0xcbf29˚484222325ULL)

	)

19 
	#FNV_32_PRIME
 ((
Fnv32_t
Ë0x01000193UL)

	)

20 
	#FNV_64_PRIME
 ((
Fnv64_t
Ë0x100000001b3ULL)

	)

22 
__ölöe
 
Fnv32_t


23 
	$‚v_32_buf
(c⁄° *
buf
, 
size_t
 
Àn
, 
Fnv32_t
 
hvÆ
)

25 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
buf
;

27 
Àn
-- != 0) {

28 
hvÆ
 *
FNV_32_PRIME
;

29 
hvÆ
 ^*
s
++;

31  
hvÆ
;

32 
	}
}

34 
__ölöe
 
Fnv32_t


35 
	$‚v_32_°r
(c⁄° *
°r
, 
Fnv32_t
 
hvÆ
)

37 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
°r
;

38 
Fnv32_t
 
c
;

40 (
c
 = *
s
++) != 0) {

41 
hvÆ
 *
FNV_32_PRIME
;

42 
hvÆ
 ^
c
;

44  
hvÆ
;

45 
	}
}

47 
__ölöe
 
Fnv64_t


48 
	$‚v_64_buf
(c⁄° *
buf
, 
size_t
 
Àn
, 
Fnv64_t
 
hvÆ
)

50 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
buf
;

52 
Àn
-- != 0) {

53 
hvÆ
 *
FNV_64_PRIME
;

54 
hvÆ
 ^*
s
++;

56  
hvÆ
;

57 
	}
}

59 
__ölöe
 
Fnv64_t


60 
	$‚v_64_°r
(c⁄° *
°r
, 
Fnv64_t
 
hvÆ
)

62 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
°r
;

63 
u_ªgi°î_t
 
c
;

65 (
c
 = *
s
++) != 0) {

66 
hvÆ
 *
FNV_64_PRIME
;

67 
hvÆ
 ^
c
;

69  
hvÆ
;

70 
	}
}

	@/usr/include/sys/kobj.h

31 #i‚de‡
_SYS_KOBJ_H_


32 
	#_SYS_KOBJ_H_


	)

37 
kobj
 *
	tkobj_t
;

38 
kobj_˛ass
 *
	tkobj_˛ass_t
;

39 c⁄° 
	tkobj_mëhod
 
	tkobj_mëhod_t
;

40 (*
	tkobj›_t
)();

41 
kobj_›s
 *
	tkobj_›s_t
;

42 
kobj›_desc
 *
	tkobj›_desc_t
;

43 
mÆloc_ty≥
;

45 
	skobj_mëhod
 {

46 
kobj›_desc_t
 
desc
;

47 
kobj›_t
 
func
;

56 
	#KOBJ_CLASS_FIELDS
 \

57 c⁄° *
«me
; \

58 
kobj_mëhod_t
 *
mëhods
; \

59 
size_t
 
size
; \

60 
kobj_˛ass_t
 *
ba£˛as£s
; \

61 
u_öt
 
ªfs
; \

62 
kobj_›s_t
 
›s


	)

64 
	skobj_˛ass
 {

65 
KOBJ_CLASS_FIELDS
;

71 
	#KOBJ_FIELDS
 \

72 
kobj_›s_t
 
›s


	)

74 
	skobj
 {

75 
KOBJ_FIELDS
;

82 
	#KOBJ_CACHE_SIZE
 256

	)

84 
	skobj_›s
 {

85 
kobj_mëhod_t
 *
ˇche
[
KOBJ_CACHE_SIZE
];

86 
kobj_˛ass_t
 
˛s
;

89 
	skobj›_desc
 {

90 
id
;

91 
kobj_mëhod_t
 
deÊt
;

99 
	#KOBJMETHOD
(
NAME
, 
FUNC
) \

100 { &
NAME
##
_desc
, (
kobj›_t
Ë(1 ? 
FUNC
 : (NAME##
_t
 *)
NULL
Ë
	}

	)
}

105 
	#KOBJMETHOD_END
 { 
NULL
, NULL }

	)

110 
	#DECLARE_CLASS
(
«me
Ë
kobj_˛ass
 
	)
name

116 
	#DEFINE_CLASS
(
«me
, 
mëhods
, 
size
) \

117 
	`DEFINE_CLASS_0
(
«me
,Çamê## 
_˛ass
, 
mëhods
, 
size
)

	)

124 
	#DEFINE_CLASS_0
(
«me
, 
˛assv¨
, 
mëhods
, 
size
) \

126 
kobj_˛ass
 
˛assv¨
 = { \

127 #«me, 
mëhods
, 
size
, 
NULL
 \

128 }

	)

136 
	#DEFINE_CLASS_1
(
«me
, 
˛assv¨
, 
mëhods
, 
size
, \

137 
ba£1
) \

139 
kobj_˛ass_t
 
«me
 ## 
_ba£˛as£s
[] = \

140 { &
ba£1
, 
NULL
 }; \

141 
kobj_˛ass
 
˛assv¨
 = { \

142 #«me, 
mëhods
, 
size
, 
«me
 ## 
_ba£˛as£s
 \

143 }

	)

151 
	#DEFINE_CLASS_2
(
«me
, 
˛assv¨
, 
mëhods
, 
size
, \

152 
ba£1
, 
ba£2
) \

154 
kobj_˛ass_t
 
«me
 ## 
_ba£˛as£s
[] = \

155 { &
ba£1
, \

156 &
ba£2
, 
NULL
 }; \

157 
kobj_˛ass
 
˛assv¨
 = { \

158 #«me, 
mëhods
, 
size
, 
«me
 ## 
_ba£˛as£s
 \

159 }

	)

167 
	#DEFINE_CLASS_3
(
«me
, 
˛assv¨
, 
mëhods
, 
size
, \

168 
ba£1
, 
ba£2
, 
ba£3
) \

170 
kobj_˛ass_t
 
«me
 ## 
_ba£˛as£s
[] = \

171 { &
ba£1
, \

172 &
ba£2
, \

173 &
ba£3
, 
NULL
 }; \

174 
kobj_˛ass
 
˛assv¨
 = { \

175 #«me, 
mëhods
, 
size
, 
«me
 ## 
_ba£˛as£s
 \

176 }

	)

182 
kobj_˛ass_compûe
(
kobj_˛ass_t
 
˛s
);

188 
kobj_˛ass_compûe_°©ic
(
kobj_˛ass_t
 
˛s
, 
kobj_›s_t
 
›s
);

193 
kobj_˛ass_‰ì
(
kobj_˛ass_t
 
˛s
);

198 
kobj_t
 
kobj_¸óã
(
kobj_˛ass_t
 
˛s
,

199 
mÆloc_ty≥
 *
mty≥
,

200 
mÊags
);

205 
kobj_öô
(
kobj_t
 
obj
, 
kobj_˛ass_t
 
˛s
);

206 
kobj_öô_°©ic
(
kobj_t
 
obj
, 
kobj_˛ass_t
 
˛s
);

211 
kobj_dñëe
(
kobj_t
 
obj
, 
mÆloc_ty≥
 *
mty≥
);

216 #ifde‡
KOBJ_STATS


217 
u_öt
 
kobj_lookup_hôs
;

218 
u_öt
 
kobj_lookup_mis£s
;

225 #ifde‡
KOBJ_STATS


226 
	#KOBJOPLOOKUP
(
OPS
,
OP
) do { \

227 
kobj›_desc_t
 
_desc
 = &
OP
##
_
##
desc
; \

228 
kobj_mëhod_t
 **
_˚p
 = \

229 &
OPS
->
ˇche
[
_desc
->
id
 & (
KOBJ_CACHE_SIZE
-1)]; \

230 
kobj_mëhod_t
 *
_˚
 = *
_˚p
; \

231 i‡(
_˚
->
desc
 !
_desc
) { \

232 
_˚
 = 
	`kobj_lookup_mëhod
(
OPS
->
˛s
, \

233 
_˚p
, 
_desc
); \

234 
kobj_lookup_mis£s
++; \

236 
kobj_lookup_hôs
++; \

237 
_m
 = 
_˚
->
func
; \

238 } 0)

	)

240 
	#KOBJOPLOOKUP
(
OPS
,
OP
) do { \

241 
kobj›_desc_t
 
_desc
 = &
OP
##
_
##
desc
; \

242 
kobj_mëhod_t
 **
_˚p
 = \

243 &
OPS
->
ˇche
[
_desc
->
id
 & (
KOBJ_CACHE_SIZE
-1)]; \

244 
kobj_mëhod_t
 *
_˚
 = *
_˚p
; \

245 i‡(
_˚
->
desc
 !
_desc
) \

246 
_˚
 = 
	`kobj_lookup_mëhod
(
OPS
->
˛s
, \

247 
_˚p
, 
_desc
); \

248 
_m
 = 
_˚
->
func
; \

249 } 0)

	)

252 
kobj_mëhod_t
* 
kobj_lookup_mëhod
(
kobj_˛ass_t
 
˛s
,

253 
kobj_mëhod_t
 **
˚p
,

254 
kobj›_desc_t
 
desc
);

260 
kobj_îr‹_mëhod
();

	@/usr/include/sys/kpilite.h

30 #i‚de‡
_SYS_KPILITE_H_


31 
	#_SYS_KPILITE_H_


	)

32 #i‡!
deföed
(
GENOFFSET
Ë&& (!deföed(
KLD_MODULE
Ë|| deföed(
KLD_TIED
)Ë&& deföed(
_KERNEL
)

33 
	~"off£t.öc
"

35 
__ölöe
 

36 
	$sched_pö_lôe
(
thªad_lôe
 *
td
)

39 
	`KASSERT
((
thªad
 *)
td
 =
cuπhªad
, ("sched_pin called onÇon curthread"));

40 
td
->
td_pö√d
++;

41 
	`__compûî_memb¨
();

42 
	}
}

44 
__ölöe
 

45 
	$sched_u≈ö_lôe
(
thªad_lôe
 *
td
)

48 
	`KASSERT
((
thªad
 *)
td
 =
cuπhªad
, ("sched_unpin called onÇon curthread"));

49 
	`KASSERT
(
td
->
td_pö√d
 > 0, ("sched_unpin called onÇonÖinnedÅhread"));

50 
	`__compûî_memb¨
();

51 
td
->
td_pö√d
--;

52 
	`__compûî_memb¨
();

53 
	}
}

	@/usr/include/sys/ktr_class.h

34 #i‚de‡
_SYS_KTR_CLASS_H_


35 
	#_SYS_KTR_CLASS_H_


	)

45 
	#KTR_GEN
 0x00000001

	)

46 
	#KTR_NET
 0x00000002

	)

47 
	#KTR_DEV
 0x00000004

	)

48 
	#KTR_LOCK
 0x00000008

	)

49 
	#KTR_SMP
 0x00000010

	)

50 
	#KTR_SUBSYS
 0x00000020

	)

51 
	#KTR_PMAP
 0x00000040

	)

52 
	#KTR_MALLOC
 0x00000080

	)

53 
	#KTR_TRAP
 0x00000100

	)

54 
	#KTR_INTR
 0x00000200

	)

55 
	#KTR_SIG
 0x00000400

	)

56 
	#KTR_SPARE2
 0x00000800

	)

57 
	#KTR_PROC
 0x00001000

	)

58 
	#KTR_SYSC
 0x00002000

	)

59 
	#KTR_INIT
 0x00004000

	)

60 
	#KTR_SPARE3
 0x00008000

	)

61 
	#KTR_SPARE4
 0x00010000

	)

62 
	#KTR_EVH
 0x00020000

	)

63 
	#KTR_VFS
 0x00040000

	)

64 
	#KTR_VOP
 0x00080000

	)

65 
	#KTR_VM
 0x00100000

	)

66 
	#KTR_INET
 0x00200000

	)

67 
	#KTR_RUNQ
 0x00400000

	)

68 
	#KTR_SPARE5
 0x00800000

	)

69 
	#KTR_UMA
 0x01000000

	)

70 
	#KTR_CALLOUT
 0x02000000

	)

71 
	#KTR_GEOM
 0x04000000

	)

72 
	#KTR_BUSDMA
 0x08000000

	)

73 
	#KTR_INET6
 0x10000000

	)

74 
	#KTR_SCHED
 0x20000000

	)

75 
	#KTR_BUF
 0x40000000

	)

76 
	#KTR_PTRACE
 0x80000000

	)

77 
	#KTR_ALL
 0xffffffff

	)

80 #ifde‡
KTR


81 #i‚de‡
KTR_COMPILE


82 
	#KTR_COMPILE
 (
KTR_ALL
)

	)

85 #unde‡
KTR_COMPILE


86 
	#KTR_COMPILE
 0

	)

	@/usr/include/sys/linker_set.h

32 #i‚de‡
_SYS_LINKER_SET_H_


33 
	#_SYS_LINKER_SET_H_


	)

35 #i‚de‡
_SYS_CDEFS_H_


36 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


45 #i‡
deföed
(
__powîpc64__
)

50 
	#__MAKE_SET_CONST


	)

52 
	#__MAKE_SET_CONST
 c⁄°

	)

58 #ifde‡
__GNUCLIKE___SECTION


59 
	#__MAKE_SET_QV
(
£t
, 
sym
, 
qv
) \

60 
	`__GLOBL
(
	`__CONCAT
(
__°¨t_£t_
,
£t
)); \

61 
	`__GLOBL
(
	`__CONCAT
(
__°›_£t_
,
£t
)); \

62 c⁄° * 
qv
 \

63 
__£t_
##
£t
##
_sym_
##
sym
 
	`__£˘i⁄
("set_" #set) \

64 
__u£d
 = &(
sym
)

	)

65 
	#__MAKE_SET
(
£t
, 
sym
Ë
	`__MAKE_SET_QV
(£t, sym, 
__MAKE_SET_CONST
)

	)

67 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


73 
	#TEXT_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

74 
	#DATA_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

75 
	#DATA_WSET
(
£t
, 
sym
Ë
	`__MAKE_SET_QV
(£t, sym, )

	)

76 
	#BSS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

77 
	#ABS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

78 
	#SET_ENTRY
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

83 
	#SET_DECLARE
(
£t
, 
±y≥
) \

84 
±y≥
 
__wók_symbﬁ
 *
	`__CONCAT
(
__°¨t_£t_
,
£t
); \

85 
±y≥
 
__wók_symbﬁ
 *
	`__CONCAT
(
__°›_£t_
,
£t
)

	)

87 
	#SET_BEGIN
(
£t
) \

88 (&
	`__CONCAT
(
__°¨t_£t_
,
£t
))

	)

89 
	#SET_LIMIT
(
£t
) \

90 (&
	`__CONCAT
(
__°›_£t_
,
£t
))

	)

99 
	#SET_FOREACH
(
pv¨
, 
£t
) \

100 
pv¨
 = 
	`SET_BEGIN
(
£t
);Öv¨ < 
	`SET_LIMIT
(£t);Öv¨++)

	)

102 
	#SET_ITEM
(
£t
, 
i
) \

103 ((
	`SET_BEGIN
(
£t
))[
i
])

	)

108 
	#SET_COUNT
(
£t
) \

109 (
	`SET_LIMIT
(
£t
Ë- 
	`SET_BEGIN
(£t))

	)

	@/usr/include/sys/lock_profile.h

33 #i‚de‡
_SYS_LOCK_PROFILE_H_


34 
	#_SYS_LOCK_PROFILE_H_


	)

36 
	glock_¥ofûe_obje˘
;

37 
LIST_HEAD
(
Õohód
, 
lock_¥ofûe_obje˘
);

39 #ifde‡
_KERNEL


40 #ifde‡
LOCK_PROFILING


41 
	~<machöe/˝ufunc.h
>

42 
	~<sys/lock.h
>

44 #i‚de‡
USE_CPU_NANOSECONDS


45 
u_öt64_t
 
«no£c⁄ds
();

48 vﬁ©ûê
lock_¥of_íabÀ
;

50 
lock_¥ofûe_obèö_lock_suc˚ss
(
lock_obje˘
 *
lo
, 
c⁄ã°ed
,

51 
uöt64_t
 
waôtime
, c⁄° *
fûe
, 
löe
);

52 
lock_¥ofûe_ªÀa£_lock
(
lock_obje˘
 *
lo
);

53 
lock_¥ofûe_thªad_exô
(
thªad
 *
td
);

56 
ölöe
 

57 
	$lock_¥ofûe_obèö_lock_Áûed
(
lock_obje˘
 *
lo
, *
c⁄ã°ed
,

58 
uöt64_t
 *
waôtime
)

60 i‡(!
lock_¥of_íabÀ
 || (
lo
->
lo_Êags
 & 
LO_NOPROFILE
Ë|| *
c⁄ã°ed
)

62 *
waôtime
 = 
	`«no£c⁄ds
();

63 *
c⁄ã°ed
 = 1;

64 
	}
}

68 
	#lock_¥ofûe_ªÀa£_lock
(
lo
Ë()0

	)

69 
	#lock_¥ofûe_obèö_lock_Áûed
(
lo
, 
c⁄ã°ed
, 
waôtime
Ë()0

	)

70 
	#lock_¥ofûe_obèö_lock_suc˚ss
(
lo
, 
c⁄ã°ed
, 
waôtime
, 
fûe
, 
löe
Ë()0

	)

71 
	#lock_¥ofûe_thªad_exô
(
td
Ë()0

	)

	@/usr/include/sys/lockmgr.h

33 #i‚def 
_SYS_LOCKMGR_H_


34 
	#_SYS_LOCKMGR_H_


	)

36 
	~<sys/_lock.h
>

37 
	~<sys/_lockmgr.h
>

38 
	~<sys/_muãx.h
>

39 
	~<sys/_rwlock.h
>

41 
	#LK_SHARE
 0x01

	)

42 
	#LK_SHARED_WAITERS
 0x02

	)

43 
	#LK_EXCLUSIVE_WAITERS
 0x04

	)

44 
	#LK_EXCLUSIVE_SPINNERS
 0x08

	)

45 
	#LK_ALL_WAITERS
 \

46 (
LK_SHARED_WAITERS
 | 
LK_EXCLUSIVE_WAITERS
)

	)

47 
	#LK_FLAGMASK
 \

48 (
LK_SHARE
 | 
LK_ALL_WAITERS
 | 
LK_EXCLUSIVE_SPINNERS
)

	)

50 
	#LK_HOLDER
(
x
Ë((xË& ~
LK_FLAGMASK
)

	)

51 
	#LK_SHARERS_SHIFT
 4

	)

52 
	#LK_SHARERS
(
x
Ë(
	`LK_HOLDER
(xË>> 
LK_SHARERS_SHIFT
)

	)

53 
	#LK_SHARERS_LOCK
(
x
Ë((xË<< 
LK_SHARERS_SHIFT
 | 
LK_SHARE
)

	)

54 
	#LK_ONE_SHARER
 (1 << 
LK_SHARERS_SHIFT
)

	)

55 
	#LK_UNLOCKED
 
	`LK_SHARERS_LOCK
(0)

	)

56 
	#LK_KERNPROC
 ((
uöçå_t
)(-1Ë& ~
LK_FLAGMASK
)

	)

58 #ifde‡
_KERNEL


60 #i‡!
deföed
(
LOCK_FILE
Ë|| !deföed(
LOCK_LINE
)

64 
	gthªad
;

65 
	#lk_ªcur£
 
lock_obje˘
.
lo_d©a


	)

71 
__lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
lock_obje˘
 *
ûk
,

72 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
);

73 
lockmgr_lock_Á°_∑th
(
lock
 *
lk
, 
u_öt
 
Êags
,

74 
lock_obje˘
 *
ûk
, c⁄° *
fûe
, 
löe
);

75 
lockmgr_u∆ock_Á°_∑th
(
lock
 *
lk
, 
u_öt
 
Êags
,

76 
lock_obje˘
 *
ûk
);

77 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

78 
_lockmgr_as£π
(c⁄° 
lock
 *
lk
, 
wh©
, c⁄° *
fûe
, 
löe
);

80 
_lockmgr_disown
(
lock
 *
lk
, c⁄° *
fûe
, 
löe
);

82 
lockÆlowªcur£
(
lock
 *
lk
);

83 
lockÆlowsh¨e
(
lock
 *
lk
);

84 
lockde°roy
(
lock
 *
lk
);

85 
lockdißbÀªcur£
(
lock
 *
lk
);

86 
lockdißbÀsh¨e
(
lock
 *
lk
);

87 
locköô
(
lock
 *
lk
, 
¥io
, c⁄° *
wmesg
, 
timo
,

88 
Êags
);

89 #ifde‡
DDB


90 
lockmgr_chaö
(
thªad
 *
td
, thªad **
ow√Ω
);

92 
lockmgr_¥ötöfo
(c⁄° 
lock
 *
lk
);

93 
lock°©us
(c⁄° 
lock
 *
lk
);

99 
__ölöe
 

100 
	$_lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
mtx
 *
ûk
, c⁄° *
wmesg
,

101 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

104  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

105 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

106 
	}
}

108 
__ölöe
 

109 
	$_lockmgr_¨gs_rw
(
lock
 *
lk
, 
u_öt
 
Êags
, 
rwlock
 *
ûk
,

110 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

113  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

114 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

115 
	}
}

120 
	#lockmgr
(
lk
, 
Êags
, 
ûk
) \

121 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

122 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

123 
	#lockmgr_¨gs
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

124 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

125 
LOCK_FILE
, 
LOCK_LINE
)

	)

126 
	#lockmgr_¨gs_rw
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

127 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

128 
LOCK_FILE
, 
LOCK_LINE
)

	)

129 
	#lockmgr_disown
(
lk
) \

130 
	`_lockmgr_disown
((
lk
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

131 
	#lockmgr_ªcur£d
(
lk
) \

132 ((
lk
)->
lk_ªcur£
 !0)

	)

133 
	#lockmgr_rw
(
lk
, 
Êags
, 
ûk
) \

134 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

135 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

136 #ifde‡
INVARIANTS


137 
	#lockmgr_as£π
(
lk
, 
wh©
) \

138 
	`_lockmgr_as£π
((
lk
), (
wh©
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

140 
	#lockmgr_as£π
(
lk
, 
wh©
)

	)

146 
	#LK_INIT_MASK
 0x0000FF

	)

147 
	#LK_CANRECURSE
 0x000001

	)

148 
	#LK_NODUP
 0x000002

	)

149 
	#LK_NOPROFILE
 0x000004

	)

150 
	#LK_NOSHARE
 0x000008

	)

151 
	#LK_NOWITNESS
 0x000010

	)

152 
	#LK_QUIET
 0x000020

	)

153 
	#LK_ADAPTIVE
 0x000040

	)

154 
	#LK_IS_VNODE
 0x000080

	)

159 
	#LK_EATTR_MASK
 0x00FF00

	)

160 
	#LK_INTERLOCK
 0x000100

	)

161 
	#LK_NOWAIT
 0x000200

	)

162 
	#LK_RETRY
 0x000400

	)

163 
	#LK_SLEEPFAIL
 0x000800

	)

164 
	#LK_TIMELOCK
 0x001000

	)

165 
	#LK_NODDLKTREAT
 0x002000

	)

166 
	#LK_VNHELD
 0x004000

	)

171 
	#LK_TYPE_MASK
 0xFF0000

	)

172 
	#LK_DOWNGRADE
 0x010000

	)

173 
	#LK_DRAIN
 0x020000

	)

174 
	#LK_EXCLOTHER
 0x040000

	)

175 
	#LK_EXCLUSIVE
 0x080000

	)

176 
	#LK_RELEASE
 0x100000

	)

177 
	#LK_SHARED
 0x200000

	)

178 
	#LK_UPGRADE
 0x400000

	)

179 
	#LK_TRYUPGRADE
 0x800000

	)

181 
	#LK_TOTAL_MASK
 (
LK_INIT_MASK
 | 
LK_EATTR_MASK
 | 
LK_TYPE_MASK
)

	)

186 
	#LK_WMESG_DEFAULT
 (
NULL
)

	)

187 
	#LK_PRIO_DEFAULT
 (0)

	)

188 
	#LK_TIMO_DEFAULT
 (0)

	)

193 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

194 
	#KA_LOCKED
 
LA_LOCKED


	)

195 
	#KA_SLOCKED
 
LA_SLOCKED


	)

196 
	#KA_XLOCKED
 
LA_XLOCKED


	)

197 
	#KA_UNLOCKED
 
LA_UNLOCKED


	)

198 
	#KA_RECURSED
 
LA_RECURSED


	)

199 
	#KA_NOTRECURSED
 
LA_NOTRECURSED


	)

	@/usr/include/sys/lockstat.h

34 #i‚de‡
_SYS_LOCKSTAT_H


35 
	#_SYS_LOCKSTAT_H


	)

37 #ifde‡
_KERNEL


39 
	~<sys/∑øm.h
>

40 
	~<sys/queue.h
>

41 
	~<sys/sdt.h
>

43 
SDT_PROVIDER_DECLARE
(
lock°©
);

45 
SDT_PROBE_DECLARE
(
lock°©
, , , 
ad≠tive__acquúe
);

46 
SDT_PROBE_DECLARE
(
lock°©
, , , 
ad≠tive__ªÀa£
);

47 
SDT_PROBE_DECLARE
(
lock°©
, , , 
ad≠tive__•ö
);

48 
SDT_PROBE_DECLARE
(
lock°©
, , , 
ad≠tive__block
);

50 
SDT_PROBE_DECLARE
(
lock°©
, , , 
•ö__acquúe
);

51 
SDT_PROBE_DECLARE
(
lock°©
, , , 
•ö__ªÀa£
);

52 
SDT_PROBE_DECLARE
(
lock°©
, , , 
•ö__•ö
);

54 
SDT_PROBE_DECLARE
(
lock°©
, , , 
rw__acquúe
);

55 
SDT_PROBE_DECLARE
(
lock°©
, , , 
rw__ªÀa£
);

56 
SDT_PROBE_DECLARE
(
lock°©
, , , 
rw__block
);

57 
SDT_PROBE_DECLARE
(
lock°©
, , , 
rw__•ö
);

58 
SDT_PROBE_DECLARE
(
lock°©
, , , 
rw__upgøde
);

59 
SDT_PROBE_DECLARE
(
lock°©
, , , 
rw__downgøde
);

61 
SDT_PROBE_DECLARE
(
lock°©
, , , 
sx__acquúe
);

62 
SDT_PROBE_DECLARE
(
lock°©
, , , 
sx__ªÀa£
);

63 
SDT_PROBE_DECLARE
(
lock°©
, , , 
sx__block
);

64 
SDT_PROBE_DECLARE
(
lock°©
, , , 
sx__•ö
);

65 
SDT_PROBE_DECLARE
(
lock°©
, , , 
sx__upgøde
);

66 
SDT_PROBE_DECLARE
(
lock°©
, , , 
sx__downgøde
);

68 
SDT_PROBE_DECLARE
(
lock°©
, , , 
thªad__•ö
);

70 
	#LOCKSTAT_WRITER
 0

	)

71 
	#LOCKSTAT_READER
 1

	)

73 vﬁ©ûê
boﬁ
 
lock°©_íabÀd
;

75 #ifde‡
KDTRACE_HOOKS


77 
	#LOCKSTAT_RECORD0
(
¥obe
, 
Õ
) \

78 
	`SDT_PROBE1
(
lock°©
, , , 
¥obe
, 
Õ
)

	)

80 
	#LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
¨g1
) \

81 
	`SDT_PROBE2
(
lock°©
, , , 
¥obe
, 
Õ
, 
¨g1
)

	)

83 
	#LOCKSTAT_RECORD2
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
) \

84 
	`SDT_PROBE3
(
lock°©
, , , 
¥obe
, 
Õ
, 
¨g1
, 
¨g2
)

	)

86 
	#LOCKSTAT_RECORD3
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
) \

87 
	`SDT_PROBE4
(
lock°©
, , , 
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

89 
	#LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

90 
	`SDT_PROBE5
(
lock°©
, , , 
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

92 
	#LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
) do { \

93 
	`lock_¥ofûe_obèö_lock_suc˚ss
(&(
Õ
)->
lock_obje˘
, 
c
, 
wt
, 
f
, 
l
); \

94 
	`LOCKSTAT_RECORD0
(
¥obe
, 
Õ
); \

95 } 0)

	)

97 
	#LOCKSTAT_PROFILE_OBTAIN_RWLOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
, 
a
) do { \

98 
	`lock_¥ofûe_obèö_lock_suc˚ss
(&(
Õ
)->
lock_obje˘
, 
c
, 
wt
, 
f
, 
l
); \

99 
	`LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
a
); \

100 } 0)

	)

102 
	#LOCKSTAT_PROFILE_RELEASE_LOCK
(
¥obe
, 
Õ
) do { \

103 
	`lock_¥ofûe_ªÀa£_lock
(&(
Õ
)->
lock_obje˘
); \

104 
	`LOCKSTAT_RECORD0
(
¥obe
, 
Õ
); \

105 } 0)

	)

107 
	#LOCKSTAT_PROFILE_RELEASE_RWLOCK
(
¥obe
, 
Õ
, 
a
) do { \

108 
	`lock_¥ofûe_ªÀa£_lock
(&(
Õ
)->
lock_obje˘
); \

109 
	`LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
a
); \

110 } 0)

	)

112 
	#LOCKSTAT_PROFILE_ENABLED
(
¥obe
Ë
	`__¥edi˘_Ál£
(
lock°©_íabÀd
)

	)

114 
	glock_obje˘
;

115 
uöt64_t
 
lock°©_n£cs
(
lock_obje˘
 *);

119 
	#LOCKSTAT_RECORD0
(
¥obe
, 
Õ
)

	)

120 
	#LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
¨g1
)

	)

121 
	#LOCKSTAT_RECORD2
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
)

	)

122 
	#LOCKSTAT_RECORD3
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

123 
	#LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

125 
	#LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
) \

126 
	`lock_¥ofûe_obèö_lock_suc˚ss
(&(
Õ
)->
lock_obje˘
, 
c
, 
wt
, 
f
, 
l
)

	)

128 
	#LOCKSTAT_PROFILE_OBTAIN_RWLOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
, 
a
) \

129 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
)

	)

131 
	#LOCKSTAT_PROFILE_RELEASE_LOCK
(
¥obe
, 
Õ
) \

132 
	`lock_¥ofûe_ªÀa£_lock
(&(
Õ
)->
lock_obje˘
)

	)

134 
	#LOCKSTAT_PROFILE_RELEASE_RWLOCK
(
¥obe
, 
Õ
, 
a
) \

135 
	`LOCKSTAT_PROFILE_RELEASE_LOCK
(
¥obe
, 
Õ
)

	)

137 
	#LOCKSTAT_PROFILE_ENABLED
(
¥obe
Ë0

	)

	@/usr/include/sys/mbuf.h

36 #i‚de‡
_SYS_MBUF_H_


37 
	#_SYS_MBUF_H_


	)

40 
	~<sys/queue.h
>

41 #ifde‡
_KERNEL


42 
	~<sys/sy°m.h
>

43 
	~<vm/uma.h
>

44 #ifde‡
WITNESS


45 
	~<sys/lock.h
>

49 #ifde‡
_KERNEL


50 
	~<sys/sdt.h
>

52 
	#MBUF_PROBE1
(
¥obe
, 
¨g0
) \

53 
	`SDT_PROBE1
(
sdt
, , , 
¥obe
, 
¨g0
)

	)

54 
	#MBUF_PROBE2
(
¥obe
, 
¨g0
, 
¨g1
) \

55 
	`SDT_PROBE2
(
sdt
, , , 
¥obe
, 
¨g0
, 
¨g1
)

	)

56 
	#MBUF_PROBE3
(
¥obe
, 
¨g0
, 
¨g1
, 
¨g2
) \

57 
	`SDT_PROBE3
(
sdt
, , , 
¥obe
, 
¨g0
, 
¨g1
, 
¨g2
)

	)

58 
	#MBUF_PROBE4
(
¥obe
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
) \

59 
	`SDT_PROBE4
(
sdt
, , , 
¥obe
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

60 
	#MBUF_PROBE5
(
¥obe
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

61 
	`SDT_PROBE5
(
sdt
, , , 
¥obe
, 
¨g0
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

63 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__öô
);

64 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__gëhdr
);

65 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__gë
);

66 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__gë˛
);

67 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__˛gë
);

68 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__˛jgë
);

69 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__˛j£t
);

70 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__‰ì
);

71 
SDT_PROBE_DECLARE
(
sdt
, , , 
m__‰ìm
);

95 
	gmbuf
;

96 
	#MHSIZE
 
	`off£tof
(
mbuf
, 
m_d©
)

	)

97 
	#MPKTHSIZE
 
	`off£tof
(
mbuf
, 
m_pktd©
)

	)

98 
	#MLEN
 (()(
MSIZE
 - 
MHSIZE
))

	)

99 
	#MHLEN
 (()(
MSIZE
 - 
MPKTHSIZE
))

	)

100 
	#MINCLSIZE
 (
MHLEN
 + 1)

	)

102 #ifde‡
_KERNEL


110 
	#mtod
(
m
, 
t
Ë(—)((m)->
m_d©a
))

	)

111 
	#mtodo
(
m
, 
o
Ë((*)(((m)->
m_d©a
Ë+ (o)))

	)

117 
	smb_¨gs
 {

118 
	mÊags
;

119 
	mty≥
;

126 
	sm_èg
 {

127 
SLIST_ENTRY
(
m_èg
Ë
	mm_èg_lök
;

128 
u_öt16_t
 
	mm_èg_id
;

129 
u_öt16_t
 
	mm_èg_Àn
;

130 
u_öt32_t
 
	mm_èg_cookõ
;

131 (*
	mm_èg_‰ì
)(
	mm_èg
 *);

138 
	sm_¢d_èg
 {

139 
i‚ë
 *
	miÂ
;

149 
	spkthdr
 {

151 
m_¢d_èg
 *
	m¢d_èg
;

152 
i‚ë
 *
	mrcvif
;

154 
SLIST_HEAD
(
∑ckë_ègs
, 
m_èg
Ë
	mègs
;

155 
öt32_t
 
	mÀn
;

158 
uöt32_t
 
	mÊowid
;

159 
uöt32_t
 
	mcsum_Êags
;

160 
uöt16_t
 
	mfibnum
;

161 
uöt8_t
 
	mcosqos
;

162 
uöt8_t
 
	mrs°y≥
;

164 
uöt64_t
 
	mrcv_t°mp
;

166 
uöt8_t
 
	ml2hÀn
;

167 
uöt8_t
 
	ml3hÀn
;

168 
uöt8_t
 
	ml4hÀn
;

169 
uöt8_t
 
	ml5hÀn
;

170 
uöt32_t
 
	m•¨e
;

174 
uöt8_t
 
	meight
[8];

175 
uöt16_t
 
	msixãí
[4];

176 
uöt32_t
 
	mthútytwo
[2];

177 
uöt64_t
 
	msixtyfour
[1];

178 
uöçå_t
 
	munöçå
[1];

179 *
	m±r
;

180 } 
	mPH_≥r
;

184 
uöt8_t
 
	meight
[8];

185 
uöt16_t
 
	msixãí
[4];

186 
uöt32_t
 
	mthútytwo
[2];

187 
uöt64_t
 
	msixtyfour
[1];

188 
uöçå_t
 
	munöçå
[1];

189 *
	m±r
;

190 } 
	mPH_loc
;

192 
	#ëhî_vèg
 
PH_≥r
.
sixãí
[0]

	)

193 
	#PH_vt
 
PH_≥r


	)

194 
	#vt_ƒecs
 
sixãí
[0]

	)

195 
	#tso_£gsz
 
PH_≥r
.
sixãí
[1]

	)

196 
	#Ão_n£gs
 
tso_£gsz


	)

197 
	#csum_phsum
 
PH_≥r
.
sixãí
[2]

	)

198 
	#csum_d©a
 
PH_≥r
.
thútytwo
[1]

	)

199 
	#∑˚_thoff
 
PH_loc
.
sixãí
[0]

	)

200 
	#∑˚_éí
 
PH_loc
.
sixãí
[1]

	)

201 
	#∑˚_dΩhdæí
 
PH_loc
.
sixãí
[2]

	)

202 
	#∑˚_tos
 
PH_loc
.
eight
[6]

	)

203 
	#∑˚_lock
 
PH_loc
.
eight
[7]

	)

213 
	tm_ext_‰ì_t
(
	tmbuf
 *);

214 
	sm_ext
 {

224 vﬁ©ûê
u_öt
 
	mext_cou¡
;

225 vﬁ©ûê
u_öt
 *
	mext_˙t
;

227 *
	mext_buf
;

228 
uöt32_t
 
	mext_size
;

229 
uöt32_t
 
	mext_ty≥
:8,

230 
	mext_Êags
:24;

238 
	#m_ext_c›yÀn
 
	`off£tof
(
m_ext
, 
ext_‰ì
)

	)

239 
m_ext_‰ì_t
 *
	mext_‰ì
;

240 *
	mext_¨g1
;

241 *
	mext_¨g2
;

248 
	smbuf
 {

257 
mbuf
 *
	mm_√xt
;

258 
SLIST_ENTRY
(
mbuf
Ë
	mm_¶i°
;

259 
STAILQ_ENTRY
(
mbuf
Ë
	mm_°aûq
;

262 
mbuf
 *
	mm_√xçkt
;

263 
SLIST_ENTRY
(
mbuf
Ë
	mm_¶i°pkt
;

264 
STAILQ_ENTRY
(
mbuf
Ë
	mm_°aûqpkt
;

266 
ˇddr_t
 
	mm_d©a
;

267 
öt32_t
 
	mm_Àn
;

268 
uöt32_t
 
	mm_ty≥
:8,

269 
	mm_Êags
:24;

270 #i‡!
deföed
(
__LP64__
)

271 
uöt32_t
 
	mm_∑d
;

283 
pkthdr
 
	mm_pkthdr
;

285 
m_ext
 
	mm_ext
;

286 
	mm_pktd©
[0];

289 
	mm_d©
[0];

299 
	#M_EXT
 0x00000001

	)

300 
	#M_PKTHDR
 0x00000002

	)

301 
	#M_EOR
 0x00000004

	)

302 
	#M_RDONLY
 0x00000008

	)

303 
	#M_BCAST
 0x00000010

	)

304 
	#M_MCAST
 0x00000020

	)

305 
	#M_PROMISC
 0x00000040

	)

306 
	#M_VLANTAG
 0x00000080

	)

307 
	#M_NOMAP
 0x00000100

	)

308 
	#M_NOFREE
 0x00000200

	)

309 
	#M_TSTMP
 0x00000400

	)

310 
	#M_TSTMP_HPREC
 0x00000800

	)

314 
	#M_PROTO1
 0x00001000

	)

315 
	#M_PROTO2
 0x00002000

	)

316 
	#M_PROTO3
 0x00004000

	)

317 
	#M_PROTO4
 0x00008000

	)

318 
	#M_PROTO5
 0x00010000

	)

319 
	#M_PROTO6
 0x00020000

	)

320 
	#M_PROTO7
 0x00040000

	)

321 
	#M_PROTO8
 0x00080000

	)

322 
	#M_PROTO9
 0x00100000

	)

323 
	#M_PROTO10
 0x00200000

	)

324 
	#M_PROTO11
 0x00400000

	)

325 
	#M_PROTO12
 0x00800000

	)

327 
	#MB_DTOR_SKIP
 0x1

	)

332 
	#M_PROTOFLAGS
 \

333 (
M_PROTO1
|
M_PROTO2
|
M_PROTO3
|
M_PROTO4
|
M_PROTO5
|
M_PROTO6
|
M_PROTO7
|
M_PROTO8
|\

334 
M_PROTO9
|
M_PROTO10
|
M_PROTO11
|
M_PROTO12
)

	)

339 
	#M_COPYFLAGS
 \

340 (
M_PKTHDR
|
M_EOR
|
M_RDONLY
|
M_BCAST
|
M_MCAST
|
M_PROMISC
|
M_VLANTAG
|
M_TSTMP
| \

341 
M_TSTMP_HPREC
|
M_PROTOFLAGS
)

	)

346 
	#M_FLAG_BITS
 \

348 "\7M_PROMISC\10M_VLANTAG\13M_TSTMP\14M_TSTMP_HPREC"

	)

349 
	#M_FLAG_PROTOBITS
 \

352 "\27M_PROTO11\30M_PROTO12"

	)

353 
	#M_FLAG_PRINTF
 (
M_FLAG_BITS
 
M_FLAG_PROTOBITS
)

	)

382 
	#M_HASHTYPE_HASHPROP
 0x80

	)

383 
	#M_HASHTYPE_HASH
(
t
Ë(
M_HASHTYPE_HASHPROP
 | (t))

	)

385 
	#M_HASHTYPE_NONE
 0

	)

386 
	#M_HASHTYPE_RSS_IPV4
 
	`M_HASHTYPE_HASH
(1Ë

	)

387 
	#M_HASHTYPE_RSS_TCP_IPV4
 
	`M_HASHTYPE_HASH
(2Ë

	)

388 
	#M_HASHTYPE_RSS_IPV6
 
	`M_HASHTYPE_HASH
(3Ë

	)

389 
	#M_HASHTYPE_RSS_TCP_IPV6
 
	`M_HASHTYPE_HASH
(4Ë

	)

390 
	#M_HASHTYPE_RSS_IPV6_EX
 
	`M_HASHTYPE_HASH
(5Ë

	)

392 
	#M_HASHTYPE_RSS_TCP_IPV6_EX
 
	`M_HASHTYPE_HASH
(6Ë

	)

394 
	#M_HASHTYPE_RSS_UDP_IPV4
 
	`M_HASHTYPE_HASH
(7Ë

	)

395 
	#M_HASHTYPE_RSS_UDP_IPV6
 
	`M_HASHTYPE_HASH
(9Ë

	)

396 
	#M_HASHTYPE_RSS_UDP_IPV6_EX
 
	`M_HASHTYPE_HASH
(10)

	)

399 
	#M_HASHTYPE_OPAQUE
 63

	)

400 
	#M_HASHTYPE_OPAQUE_HASH
 
	`M_HASHTYPE_HASH
(
M_HASHTYPE_OPAQUE
)

	)

403 
	#M_HASHTYPE_CLEAR
(
m
Ë((m)->
m_pkthdr
.
rs°y≥
 = 0)

	)

404 
	#M_HASHTYPE_GET
(
m
Ë((m)->
m_pkthdr
.
rs°y≥
)

	)

405 
	#M_HASHTYPE_SET
(
m
, 
v
Ë((m)->
m_pkthdr
.
rs°y≥
 = (v))

	)

406 
	#M_HASHTYPE_TEST
(
m
, 
v
Ë(
	`M_HASHTYPE_GET
(mË=(v))

	)

407 
	#M_HASHTYPE_ISHASH
(
m
Ë(
	`M_HASHTYPE_GET
(mË& 
M_HASHTYPE_HASHPROP
)

	)

413 
	#QOS_DSCP_CS0
 0x00

	)

414 
	#QOS_DSCP_DEF
 
QOS_DSCP_CS0


	)

415 
	#QOS_DSCP_CS1
 0x20

	)

416 
	#QOS_DSCP_AF11
 0x28

	)

417 
	#QOS_DSCP_AF12
 0x30

	)

418 
	#QOS_DSCP_AF13
 0x38

	)

419 
	#QOS_DSCP_CS2
 0x40

	)

420 
	#QOS_DSCP_AF21
 0x48

	)

421 
	#QOS_DSCP_AF22
 0x50

	)

422 
	#QOS_DSCP_AF23
 0x58

	)

423 
	#QOS_DSCP_CS3
 0x60

	)

424 
	#QOS_DSCP_AF31
 0x68

	)

425 
	#QOS_DSCP_AF32
 0x70

	)

426 
	#QOS_DSCP_AF33
 0x78

	)

427 
	#QOS_DSCP_CS4
 0x80

	)

428 
	#QOS_DSCP_AF41
 0x88

	)

429 
	#QOS_DSCP_AF42
 0x90

	)

430 
	#QOS_DSCP_AF43
 0x98

	)

431 
	#QOS_DSCP_CS5
 0xa0

	)

432 
	#QOS_DSCP_EF
 0xb8

	)

433 
	#QOS_DSCP_CS6
 0xc0

	)

434 
	#QOS_DSCP_CS7
 0xe0

	)

439 
	#EXT_CLUSTER
 1

	)

440 
	#EXT_SFBUF
 2

	)

441 
	#EXT_JUMBOP
 3

	)

442 
	#EXT_JUMBO9
 4

	)

443 
	#EXT_JUMBO16
 5

	)

444 
	#EXT_PACKET
 6

	)

445 
	#EXT_MBUF
 7

	)

447 
	#EXT_VENDOR1
 224

	)

448 
	#EXT_VENDOR2
 225

	)

449 
	#EXT_VENDOR3
 226

	)

450 
	#EXT_VENDOR4
 227

	)

452 
	#EXT_EXP1
 244

	)

453 
	#EXT_EXP2
 245

	)

454 
	#EXT_EXP3
 246

	)

455 
	#EXT_EXP4
 247

	)

457 
	#EXT_NET_DRV
 252

	)

458 
	#EXT_MOD_TYPE
 253

	)

459 
	#EXT_DISPOSABLE
 254

	)

460 
	#EXT_EXTREF
 255

	)

466 
	#EXT_FLAG_EMBREF
 0x000001

	)

467 
	#EXT_FLAG_EXTREF
 0x000002

	)

469 
	#EXT_FLAG_NOFREE
 0x000010

	)

471 
	#EXT_FLAG_VENDOR1
 0x010000

	)

472 
	#EXT_FLAG_VENDOR2
 0x020000

	)

473 
	#EXT_FLAG_VENDOR3
 0x040000

	)

474 
	#EXT_FLAG_VENDOR4
 0x080000

	)

476 
	#EXT_FLAG_EXP1
 0x100000

	)

477 
	#EXT_FLAG_EXP2
 0x200000

	)

478 
	#EXT_FLAG_EXP3
 0x400000

	)

479 
	#EXT_FLAG_EXP4
 0x800000

	)

484 
	#EXT_FLAG_BITS
 \

488 "\30EXT_FLAG_EXP4"

	)

500 
	#CSUM_IP
 0x00000001

	)

501 
	#CSUM_IP_UDP
 0x00000002

	)

502 
	#CSUM_IP_TCP
 0x00000004

	)

503 
	#CSUM_IP_SCTP
 0x00000008

	)

504 
	#CSUM_IP_TSO
 0x00000010

	)

505 
	#CSUM_IP_ISCSI
 0x00000020

	)

507 
	#CSUM_IP6_UDP
 0x00000200

	)

508 
	#CSUM_IP6_TCP
 0x00000400

	)

509 
	#CSUM_IP6_SCTP
 0x00000800

	)

510 
	#CSUM_IP6_TSO
 0x00001000

	)

511 
	#CSUM_IP6_ISCSI
 0x00002000

	)

514 
	#CSUM_L3_CALC
 0x01000000

	)

515 
	#CSUM_L3_VALID
 0x02000000

	)

516 
	#CSUM_L4_CALC
 0x04000000

	)

517 
	#CSUM_L4_VALID
 0x08000000

	)

518 
	#CSUM_L5_CALC
 0x10000000

	)

519 
	#CSUM_L5_VALID
 0x20000000

	)

520 
	#CSUM_COALESCED
 0x40000000

	)

525 
	#CSUM_BITS
 \

531 "\35CSUM_L5_CALC\36CSUM_L5_VALID\37CSUM_COALESCED"

	)

534 
	#CSUM_IP_CHECKED
 
CSUM_L3_CALC


	)

535 
	#CSUM_IP_VALID
 
CSUM_L3_VALID


	)

536 
	#CSUM_DATA_VALID
 
CSUM_L4_VALID


	)

537 
	#CSUM_PSEUDO_HDR
 
CSUM_L4_CALC


	)

538 
	#CSUM_SCTP_VALID
 
CSUM_L4_VALID


	)

539 
	#CSUM_DELAY_DATA
 (
CSUM_TCP
|
CSUM_UDP
)

	)

540 
	#CSUM_DELAY_IP
 
CSUM_IP


	)

541 
	#CSUM_DELAY_DATA_IPV6
 (
CSUM_TCP_IPV6
|
CSUM_UDP_IPV6
)

	)

542 
	#CSUM_DATA_VALID_IPV6
 
CSUM_DATA_VALID


	)

543 
	#CSUM_TCP
 
CSUM_IP_TCP


	)

544 
	#CSUM_UDP
 
CSUM_IP_UDP


	)

545 
	#CSUM_SCTP
 
CSUM_IP_SCTP


	)

546 
	#CSUM_TSO
 (
CSUM_IP_TSO
|
CSUM_IP6_TSO
)

	)

547 
	#CSUM_UDP_IPV6
 
CSUM_IP6_UDP


	)

548 
	#CSUM_TCP_IPV6
 
CSUM_IP6_TCP


	)

549 
	#CSUM_SCTP_IPV6
 
CSUM_IP6_SCTP


	)

554 
	#MT_NOTMBUF
 0

	)

555 
	#MT_DATA
 1

	)

556 
	#MT_HEADER
 
MT_DATA


	)

558 
	#MT_VENDOR1
 4

	)

559 
	#MT_VENDOR2
 5

	)

560 
	#MT_VENDOR3
 6

	)

561 
	#MT_VENDOR4
 7

	)

563 
	#MT_SONAME
 8

	)

565 
	#MT_EXP1
 9

	)

566 
	#MT_EXP2
 10

	)

567 
	#MT_EXP3
 11

	)

568 
	#MT_EXP4
 12

	)

570 
	#MT_CONTROL
 14

	)

571 
	#MT_EXTCONTROL
 15

	)

572 
	#MT_OOBDATA
 16

	)

574 
	#MT_NOINIT
 255

	)

582 
	#MBUF_MEM_NAME
 "mbuf"

	)

583 
	#MBUF_CLUSTER_MEM_NAME
 "mbuf_˛u°î"

	)

584 
	#MBUF_PACKET_MEM_NAME
 "mbuf_∑ckë"

	)

585 
	#MBUF_JUMBOP_MEM_NAME
 "mbuf_jumbo_∑ge"

	)

586 
	#MBUF_JUMBO9_MEM_NAME
 "mbuf_jumbo_9k"

	)

587 
	#MBUF_JUMBO16_MEM_NAME
 "mbuf_jumbo_16k"

	)

588 
	#MBUF_TAG_MEM_NAME
 "mbuf_èg"

	)

589 
	#MBUF_EXTREFCNT_MEM_NAME
 "mbuf_ext_ªf˙t"

	)

591 #ifde‡
_KERNEL


593 #ifde‡
WITNESS


594 
	#MBUF_CHECKSLEEP
(
how
) do { \

595 i‡(
how
 =
M_WAITOK
) \

596 
	`WITNESS_WARN
(
WARN_GIANTOK
 | 
WARN_SLEEPOK
, 
NULL
, \

597 "SÀïög i¿\"%s\"", 
__func__
); \

598 } 0)

	)

600 
	#MBUF_CHECKSLEEP
(
how
)

	)

608 
uma_z⁄e_t
 
z⁄e_mbuf
;

609 
uma_z⁄e_t
 
z⁄e_˛u°
;

610 
uma_z⁄e_t
 
z⁄e_∑ck
;

611 
uma_z⁄e_t
 
z⁄e_jumb›
;

612 
uma_z⁄e_t
 
z⁄e_jumbo9
;

613 
uma_z⁄e_t
 
z⁄e_jumbo16
;

615 
mb_dup˛
(
mbuf
 *, mbuf *);

616 
mb_‰ì_ext
(
mbuf
 *);

617 
m_adj
(
mbuf
 *, );

618 
m_≠∂y
(
mbuf
 *, , ,

619 (*)(*, *, 
u_öt
), *);

620 
	`m_≠≥nd
(
mbuf
 *, , 
c_ˇddr_t
);

621 
	`m_ˇt
(
mbuf
 *, mbuf *);

622 
	`m_ˇçkt
(
mbuf
 *, mbuf *);

623 
	`m_˛gë
(
mbuf
 *
m
, 
how
);

624 *
	`m_˛jgë
(
mbuf
 *
m
, 
how
, 
size
);

625 
mbuf
 *
	`m_cﬁœp£
(mbuf *, , );

626 
	`m_c›yback
(
mbuf
 *, , , 
c_ˇddr_t
);

627 
	`m_c›yd©a
(c⁄° 
mbuf
 *, , , 
ˇddr_t
);

628 
mbuf
 *
	`m_c›ym
(mbuf *, , , );

629 
mbuf
 *
	`m_c›y∑ckë
(mbuf *, );

630 
	`m_c›y_pkthdr
(
mbuf
 *, mbuf *);

631 
mbuf
 *
	`m_c›yup
(mbuf *, , );

632 
mbuf
 *
	`m_de‰ag
(mbuf *, );

633 
	`m_demŸe_pkthdr
(
mbuf
 *);

634 
	`m_demŸe
(
mbuf
 *, , );

635 
mbuf
 *
	`m_devgë
(*, , , 
i‚ë
 *,

636 (*)(*, 
ˇddr_t
, 
u_öt
));

637 
	`m_di•o£_extc⁄åﬁm
(
mbuf
 *
m
);

638 
mbuf
 *
	`m_dup
(const mbuf *, );

639 
	`m_dup_pkthdr
(
mbuf
 *, const mbuf *, );

640 
	`m_exèdd
(
mbuf
 *, *, 
u_öt
, 
m_ext_‰ì_t
,

642 
u_öt
 
	`m_fixhdr
(
mbuf
 *);

643 
mbuf
 *
	`m_‰agmít
(mbuf *, , );

644 
	`m_‰ìm
(
mbuf
 *);

645 
mbuf
 *
	`m_gë2
(, , , );

646 
mbuf
 *
	`m_gëj˛
(, , , );

647 
mbuf
 *
	`m_gëm2
(mbuf *, , , , );

648 
mbuf
 *
	`m_gë±r
(mbuf *, , *);

649 
u_öt
 
	`m_Àngth
(
mbuf
 *, mbuf **);

650 
	`m_mbu·ouio
(
uio
 *, c⁄° 
mbuf
 *, );

651 
	`m_move_pkthdr
(
mbuf
 *, mbuf *);

652 
	`m_pkthdr_öô
(
mbuf
 *, );

653 
mbuf
 *
	`m_¥ïíd
(mbuf *, , );

654 
	`m_¥öt
(c⁄° 
mbuf
 *, );

655 
mbuf
 *
	`m_puŒdown
(mbuf *, , , *);

656 
mbuf
 *
	`m_puŒup
(mbuf *, );

657 
	`m_ßnôy
(
mbuf
 *, );

658 
mbuf
 *
	`m_•lô
(mbuf *, , );

659 
mbuf
 *
	`m_uiŸombuf
(
uio
 *, , , , );

660 
mbuf
 *
	`m_unsh¨e
(mbuf *, );

662 
__ölöe
 

663 
	$m_gëty≥
(
size
)

665 
ty≥
;

667 
size
) {

668 
MSIZE
:

669 
ty≥
 = 
EXT_MBUF
;

671 
MCLBYTES
:

672 
ty≥
 = 
EXT_CLUSTER
;

674 #i‡
MJUMPAGESIZE
 !
MCLBYTES


675 
MJUMPAGESIZE
:

676 
ty≥
 = 
EXT_JUMBOP
;

679 
MJUM9BYTES
:

680 
ty≥
 = 
EXT_JUMBO9
;

682 
MJUM16BYTES
:

683 
ty≥
 = 
EXT_JUMBO16
;

686 
	`∑nic
("%s: invÆid clu°î sizê%d", 
__func__
, 
size
);

689  (
ty≥
);

690 
	}
}

695 
__ölöe
 

696 
	$m_exèddªf
(
mbuf
 *
m
, *
buf
, 
u_öt
 
size
, u_öà*
ªf_˙t
,

697 
m_ext_‰ì_t
 
‰ìf
, *
¨g1
, *
¨g2
)

700 
	`KASSERT
(
ªf_˙t
 !
NULL
, ("%s:Ñef_˙ànŸÖrovided", 
__func__
));

702 
	`©omic_add_öt
(
ªf_˙t
, 1);

703 
m
->
m_Êags
 |
M_EXT
;

704 
m
->
m_ext
.
ext_buf
 = 
buf
;

705 
m
->
m_ext
.
ext_˙t
 = 
ªf_˙t
;

706 
m
->
m_d©a
 = m->
m_ext
.
ext_buf
;

707 
m
->
m_ext
.
ext_size
 = 
size
;

708 
m
->
m_ext
.
ext_‰ì
 = 
‰ìf
;

709 
m
->
m_ext
.
ext_¨g1
 = 
¨g1
;

710 
m
->
m_ext
.
ext_¨g2
 = 
¨g2
;

711 
m
->
m_ext
.
ext_ty≥
 = 
EXT_EXTREF
;

712 
m
->
m_ext
.
ext_Êags
 = 0;

713 
	}
}

715 
__ölöe
 
uma_z⁄e_t


716 
	$m_gëz⁄e
(
size
)

718 
uma_z⁄e_t
 
z⁄e
;

720 
size
) {

721 
MCLBYTES
:

722 
z⁄e
 = 
z⁄e_˛u°
;

724 #i‡
MJUMPAGESIZE
 !
MCLBYTES


725 
MJUMPAGESIZE
:

726 
z⁄e
 = 
z⁄e_jumb›
;

729 
MJUM9BYTES
:

730 
z⁄e
 = 
z⁄e_jumbo9
;

732 
MJUM16BYTES
:

733 
z⁄e
 = 
z⁄e_jumbo16
;

736 
	`∑nic
("%s: invÆid clu°î sizê%d", 
__func__
, 
size
);

739  (
z⁄e
);

740 
	}
}

749 
__ölöe
 

750 
	$m_öô
(
mbuf
 *
m
, 
how
, 
ty≥
, 
Êags
)

752 
îr‹
;

754 
m
->
m_√xt
 = 
NULL
;

755 
m
->
m_√xçkt
 = 
NULL
;

756 
m
->
m_d©a
 = m->
m_d©
;

757 
m
->
m_Àn
 = 0;

758 
m
->
m_Êags
 = 
Êags
;

759 
m
->
m_ty≥
 = 
ty≥
;

760 i‡(
Êags
 & 
M_PKTHDR
)

761 
îr‹
 = 
	`m_pkthdr_öô
(
m
, 
how
);

763 
îr‹
 = 0;

765 
	`MBUF_PROBE5
(
m__öô
, 
m
, 
how
, 
ty≥
, 
Êags
, 
îr‹
);

766  (
îr‹
);

767 
	}
}

769 
__ölöe
 
mbuf
 *

770 
	$m_gë
(
how
, 
ty≥
)

772 
mbuf
 *
m
;

773 
mb_¨gs
 
¨gs
;

775 
¨gs
.
Êags
 = 0;

776 
¨gs
.
ty≥
 =Åype;

777 
m
 = 
	`uma_zÆloc_¨g
(
z⁄e_mbuf
, &
¨gs
, 
how
);

778 
	`MBUF_PROBE3
(
m__gë
, 
how
, 
ty≥
, 
m
);

779  (
m
);

780 
	}
}

782 
__ölöe
 
mbuf
 *

783 
	$m_gëhdr
(
how
, 
ty≥
)

785 
mbuf
 *
m
;

786 
mb_¨gs
 
¨gs
;

788 
¨gs
.
Êags
 = 
M_PKTHDR
;

789 
¨gs
.
ty≥
 =Åype;

790 
m
 = 
	`uma_zÆloc_¨g
(
z⁄e_mbuf
, &
¨gs
, 
how
);

791 
	`MBUF_PROBE3
(
m__gëhdr
, 
how
, 
ty≥
, 
m
);

792  (
m
);

793 
	}
}

795 
__ölöe
 
mbuf
 *

796 
	$m_gë˛
(
how
, 
ty≥
, 
Êags
)

798 
mbuf
 *
m
;

799 
mb_¨gs
 
¨gs
;

801 
¨gs
.
Êags
 = flags;

802 
¨gs
.
ty≥
 =Åype;

803 
m
 = 
	`uma_zÆloc_¨g
(
z⁄e_∑ck
, &
¨gs
, 
how
);

804 
	`MBUF_PROBE4
(
m__gë˛
, 
how
, 
ty≥
, 
Êags
, 
m
);

805  (
m
);

806 
	}
}

813 
__ölöe
 

814 
	$m_˛j£t
(
mbuf
 *
m
, *
˛
, 
ty≥
)

816 
size
;

818 
ty≥
) {

819 
EXT_CLUSTER
:

820 
size
 = 
MCLBYTES
;

822 #i‡
MJUMPAGESIZE
 !
MCLBYTES


823 
EXT_JUMBOP
:

824 
size
 = 
MJUMPAGESIZE
;

827 
EXT_JUMBO9
:

828 
size
 = 
MJUM9BYTES
;

830 
EXT_JUMBO16
:

831 
size
 = 
MJUM16BYTES
;

834 
	`∑nic
("%s: unknow¿˛u°îÅy≥ %d", 
__func__
, 
ty≥
);

838 
m
->
m_d©a
 = m->
m_ext
.
ext_buf
 = 
˛
;

839 
m
->
m_ext
.
ext_‰ì
 = m->m_ext.
ext_¨g1
 = m->m_ext.
ext_¨g2
 = 
NULL
;

840 
m
->
m_ext
.
ext_size
 = 
size
;

841 
m
->
m_ext
.
ext_ty≥
 = 
ty≥
;

842 
m
->
m_ext
.
ext_Êags
 = 
EXT_FLAG_EMBREF
;

843 
m
->
m_ext
.
ext_cou¡
 = 1;

844 
m
->
m_Êags
 |
M_EXT
;

845 
	`MBUF_PROBE3
(
m__˛j£t
, 
m
, 
˛
, 
ty≥
);

846 
	}
}

848 
__ölöe
 

849 
	$m_chty≥
(
mbuf
 *
m
, 
√w_ty≥
)

852 
m
->
m_ty≥
 = 
√w_ty≥
;

853 
	}
}

855 
__ölöe
 

856 
	$m_˛ΩrŸoÊags
(
mbuf
 *
m
)

859 
m
) {

860 
m
->
m_Êags
 &~
M_PROTOFLAGS
;

861 
m
 = m->
m_√xt
;

863 
	}
}

865 
__ölöe
 
mbuf
 *

866 
	$m_œ°
(
mbuf
 *
m
)

869 
m
->
m_√xt
)

870 
m
 = m->
m_√xt
;

871  (
m
);

872 
	}
}

874 
ölöe
 
u_öt


875 
	$m_exåef˙t
(
mbuf
 *
m
)

878 
	`KASSERT
(
m
->
m_Êags
 & 
M_EXT
, ("%s: M_EXT missög", 
__func__
));

880  ((
m
->
m_ext
.
ext_Êags
 & 
EXT_FLAG_EMBREF
Ë? m->m_ext.
ext_cou¡
 :

881 *
m
->
m_ext
.
ext_˙t
);

882 
	}
}

888 
	#M_MOVE_PKTHDR
(
to
, 
‰om
Ë
	`m_move_pkthdr
(—o), (‰om))

	)

889 
	#MGET
(
m
, 
how
, 
ty≥
Ë((mË
	`m_gë
((how), (ty≥)))

	)

890 
	#MGETHDR
(
m
, 
how
, 
ty≥
Ë((mË
	`m_gëhdr
((how), (ty≥)))

	)

891 
	#MCLGET
(
m
, 
how
Ë
	`m_˛gë
((m), (how))

	)

892 
	#MEXTADD
(
m
, 
buf
, 
size
, 
‰ì
, 
¨g1
, 
¨g2
, 
Êags
, 
ty≥
) \

893 
	`m_exèdd
((
m
), (*)(
buf
), (
size
), (
‰ì
), (
¨g1
), (
¨g2
), \

894 (
Êags
), (
ty≥
))

	)

895 
	#m_gëm
(
m
, 
Àn
, 
how
, 
ty≥
) \

896 
	`m_gëm2
((
m
), (
Àn
), (
how
), (
ty≥
), 
M_PKTHDR
)

	)

903 
	#M_WRITABLE
(
m
Ë(!((m)->
m_Êags
 & 
M_RDONLY
) && \

904 (!(((
m
)->
m_Êags
 & 
M_EXT
)) || \

905 (
	`m_exåef˙t
(
m
Ë=1)))

	)

908 
	#M_ASSERTPKTHDR
(
m
) \

909 
	`KASSERT
((
m
Ë!
NULL
 && (m)->
m_Êags
 & 
M_PKTHDR
, \

910 ("%s:Çÿmbu‡∑ckë hódî!", 
__func__
))

	)

917 
	#M_ASSERTVALID
(
m
) \

918 
	`KASSERT
((((
mbuf
 *)
m
)->
m_Êags
 & 0) == 0, \

919 ("%s:áâem±ed u£ o‡®‰ì mbuf!", 
__func__
))

	)

925 
	#M_START
(
m
) \

926 (((
m
)->
m_Êags
 & 
M_EXT
Ë? (m)->
m_ext
.
ext_buf
 : \

927 ((
m
)->
m_Êags
 & 
M_PKTHDR
Ë? &(m)->
m_pktd©
[0] : \

928 &(
m
)->
m_d©
[0])

	)

934 
	#M_SIZE
(
m
) \

935 (((
m
)->
m_Êags
 & 
M_EXT
Ë? (m)->
m_ext
.
ext_size
 : \

936 ((
m
)->
m_Êags
 & 
M_PKTHDR
Ë? 
MHLEN
 : \

937 
MLEN
)

	)

949 
__ölöe
 

950 
	$m_Æign
(
mbuf
 *
m
, 
Àn
)

952 #ifde‡
INVARIANTS


953 c⁄° *
msg
 = "%s:Çotá virgin mbuf";

955 
adju°
;

957 
	`KASSERT
(
m
->
m_d©a
 =
	`M_START
(m), (
msg
, 
__func__
));

959 
adju°
 = 
	`M_SIZE
(
m
Ë- 
Àn
;

960 
m
->
m_d©a
 +
adju°
 &~ (()-1);

961 
	}
}

963 
	#M_ALIGN
(
m
, 
Àn
Ë
	`m_Æign
(m,Üí)

	)

964 
	#MH_ALIGN
(
m
, 
Àn
Ë
	`m_Æign
(m,Üí)

	)

965 
	#MEXT_ALIGN
(
m
, 
Àn
Ë
	`m_Æign
(m,Üí)

	)

978 
	#M_LEADINGSPACE
(
m
) \

979 (
	`M_WRITABLE
(
m
Ë? ((m)->
m_d©a
 - 
	`M_START
(m)Ë: 0)

	)

991 
	#M_TRAILINGSPACE
(
m
) \

992 (
	`M_WRITABLE
(
m
) ? \

993 ((
	`M_START
(
m
Ë+ 
	`M_SIZE
(m)Ë- ((m)->
m_d©a
 + (m)->
m_Àn
)Ë: 0)

	)

1000 
	#M_PREPEND
(
m
, 
∂í
, 
how
) do { \

1001 
mbuf
 **
_mmp
 = &(
m
); \

1002 
mbuf
 *
_mm
 = *
_mmp
; \

1003 
_m∂í
 = (
∂í
); \

1004 
__mhow
 = (
how
); \

1006 
	`MBUF_CHECKSLEEP
(
how
); \

1007 i‡(
	`M_LEADINGSPACE
(
_mm
Ë>
_m∂í
) { \

1008 
_mm
->
m_d©a
 -
_m∂í
; \

1009 
_mm
->
m_Àn
 +
_m∂í
; \

1011 
_mm
 = 
	`m_¥ïíd
(_mm, 
_m∂í
, 
__mhow
); \

1012 i‡(
_mm
 !
NULL
 && _mm->
m_Êags
 & 
M_PKTHDR
) \

1013 
_mm
->
m_pkthdr
.
Àn
 +
_m∂í
; \

1014 *
_mmp
 = 
_mm
; \

1015 } 0)

	)

1021 
	#MCHTYPE
(
m
, 
t
Ë
	`m_chty≥
((m), (t))

	)

1024 
	#M_COPYALL
 1000000000

	)

1026 
max_d©Æí
;

1027 
max_hdr
;

1028 
max_lökhdr
;

1029 
max_¥Ÿohdr
;

1030 
nmb˛u°îs
;

1080 
	#MTAG_PERSISTENT
 0x800

	)

1082 
	#PACKET_TAG_NONE
 0

	)

1085 
	#PACKET_TAG_IPSEC_IN_DONE
 1

	)

1086 
	#PACKET_TAG_IPSEC_OUT_DONE
 2

	)

1087 
	#PACKET_TAG_IPSEC_IN_CRYPTO_DONE
 3

	)

1088 
	#PACKET_TAG_IPSEC_OUT_CRYPTO_NEEDED
 4

	)

1089 
	#PACKET_TAG_IPSEC_IN_COULD_DO_CRYPTO
 5

	)

1090 
	#PACKET_TAG_IPSEC_PENDING_TDB
 6

	)

1091 
	#PACKET_TAG_BRIDGE
 7

	)

1092 
	#PACKET_TAG_GIF
 8

	)

1093 
	#PACKET_TAG_GRE
 9

	)

1094 
	#PACKET_TAG_IN_PACKET_CHECKSUM
 10

	)

1095 
	#PACKET_TAG_ENCAP
 11

	)

1096 
	#PACKET_TAG_IPSEC_SOCKET
 12

	)

1097 
	#PACKET_TAG_IPSEC_HISTORY
 13

	)

1098 
	#PACKET_TAG_IPV6_INPUT
 14

	)

1099 
	#PACKET_TAG_DUMMYNET
 15

	)

1100 
	#PACKET_TAG_DIVERT
 17

	)

1101 
	#PACKET_TAG_IPFORWARD
 18

	)

1102 
	#PACKET_TAG_MACLABEL
 (19 | 
MTAG_PERSISTENT
Ë

	)

1103 
	#PACKET_TAG_PF
 (21 | 
MTAG_PERSISTENT
Ë

	)

1104 
	#PACKET_TAG_RTSOCKFAM
 25

	)

1105 
	#PACKET_TAG_IPOPTIONS
 27

	)

1106 
	#PACKET_TAG_CARP
 28

	)

1107 
	#PACKET_TAG_IPSEC_NAT_T_PORTS
 29

	)

1108 
	#PACKET_TAG_ND_OUTGOING
 30

	)

1113 
m_èg
 *
m_èg_Æloc
(
u_öt32_t
, , , );

1114 
m_èg_dñëe
(
mbuf
 *, 
m_èg
 *);

1115 
m_èg_dñëe_chaö
(
mbuf
 *, 
m_èg
 *);

1116 
m_èg_‰ì_deÁu…
(
m_èg
 *);

1117 
m_èg
 *
m_èg_loˇã
(
mbuf
 *, 
u_öt32_t
, , m_tag *);

1118 
m_èg
 *
m_èg_c›y
(m_tag *, );

1119 
m_èg_c›y_chaö
(
mbuf
 *, const mbuf *, );

1120 
m_èg_dñëe_n⁄≥rsi°ít
(
mbuf
 *);

1125 
__ölöe
 

1126 
	$m_èg_öô
(
mbuf
 *
m
)

1129 
	`SLIST_INIT
(&
m
->
m_pkthdr
.
ègs
);

1130 
	}
}

1138 
__ölöe
 

1139 
	$m_èg_£tup
(
m_èg
 *
t
, 
u_öt32_t
 
cookõ
, 
ty≥
, 
Àn
)

1142 
t
->
m_èg_id
 = 
ty≥
;

1143 
t
->
m_èg_Àn
 = 
Àn
;

1144 
t
->
m_èg_cookõ
 = 
cookõ
;

1145 
	}
}

1150 
__ölöe
 

1151 
	$m_èg_‰ì
(
m_èg
 *
t
)

1154 (*
t
->
m_èg_‰ì
)(t);

1155 
	}
}

1160 
__ölöe
 
m_èg
 *

1161 
	$m_èg_fú°
(
mbuf
 *
m
)

1164  (
	`SLIST_FIRST
(&
m
->
m_pkthdr
.
ègs
));

1165 
	}
}

1170 
__ölöe
 
m_èg
 *

1171 
	$m_èg_√xt
(
mbuf
 *
m
 
__unu£d
, 
m_èg
 *
t
)

1174  (
	`SLIST_NEXT
(
t
, 
m_èg_lök
));

1175 
	}
}

1180 
__ölöe
 

1181 
	$m_èg_¥ïíd
(
mbuf
 *
m
, 
m_èg
 *
t
)

1184 
	`SLIST_INSERT_HEAD
(&
m
->
m_pkthdr
.
ègs
, 
t
, 
m_èg_lök
);

1185 
	}
}

1190 
__ölöe
 

1191 
	$m_èg_u∆ök
(
mbuf
 *
m
, 
m_èg
 *
t
)

1194 
	`SLIST_REMOVE
(&
m
->
m_pkthdr
.
ègs
, 
t
, 
m_èg
, 
m_èg_lök
);

1195 
	}
}

1198 
	#MTAG_ABI_COMPAT
 0

	)

1200 
__ölöe
 
m_èg
 *

1201 
	$m_èg_gë
(
ty≥
, 
Àngth
, 
waô
)

1203  (
	`m_èg_Æloc
(
MTAG_ABI_COMPAT
, 
ty≥
, 
Àngth
, 
waô
));

1204 
	}
}

1206 
__ölöe
 
m_èg
 *

1207 
	$m_èg_föd
(
mbuf
 *
m
, 
ty≥
, 
m_èg
 *
°¨t
)

1209  (
	`SLIST_EMPTY
(&
m
->
m_pkthdr
.
ègs
Ë? (
m_èg
 *)
NULL
 :

1210 
	`m_èg_loˇã
(
m
, 
MTAG_ABI_COMPAT
, 
ty≥
, 
°¨t
));

1211 
	}
}

1213 
__ölöe
 
mbuf
 *

1214 
	$m_‰ì
(
mbuf
 *
m
)

1216 
mbuf
 *
n
 = 
m
->
m_√xt
;

1218 
	`MBUF_PROBE1
(
m__‰ì
, 
m
);

1219 i‡((
m
->
m_Êags
 & (
M_PKTHDR
|
M_NOFREE
)) == (M_PKTHDR|M_NOFREE))

1220 
	`m_èg_dñëe_chaö
(
m
, 
NULL
);

1221 i‡(
m
->
m_Êags
 & 
M_EXT
)

1222 
	`mb_‰ì_ext
(
m
);

1223 i‡((
m
->
m_Êags
 & 
M_NOFREE
) == 0)

1224 
	`uma_z‰ì
(
z⁄e_mbuf
, 
m
);

1225  (
n
);

1226 
	}
}

1228 
__ölöe
 

1229 
	$π_m_gëfib
(
mbuf
 *
m
)

1231 
	`KASSERT
(
m
->
m_Êags
 & 
M_PKTHDR
 , ("AttemptÅo get FIB fromÇon header mbuf."));

1232  (
m
->
m_pkthdr
.
fibnum
);

1233 
	}
}

1235 
	#M_GETFIB
(
_m
Ë
	`π_m_gëfib
(_m)

	)

1237 
	#M_SETFIB
(
_m
, 
_fib
) do { \

1238 
	`KASSERT
((
_m
)->
m_Êags
 & 
M_PKTHDR
, ("AttemptÅo set FIB onÇon header mbuf.")); \

1239 ((
_m
)->
m_pkthdr
.
fibnum
Ë(
_fib
); \

1240 } 0)

	)

1243 
	#MBUF_HASHFLAG_L2
 (1 << 2)

	)

1244 
	#MBUF_HASHFLAG_L3
 (1 << 3)

	)

1245 
	#MBUF_HASHFLAG_L4
 (1 << 4)

	)

1248 
uöt32_t
 
m_ëhî_t˝ù_hash_öô
();

1249 
uöt32_t
 
m_ëhî_t˝ù_hash
(c⁄° uöt32_t, c⁄° 
mbuf
 *, const uint32_t);

1251 #ifde‡
MBUF_PROFILING


1252 
m_¥ofûe
(
mbuf
 *
m
);

1253 
	#M_PROFILE
(
m
Ë
	`m_¥ofûe
(m)

	)

1255 
	#M_PROFILE
(
m
)

	)

1258 
	smbufq
 {

1259 
STAILQ_HEAD
(, 
mbuf
Ë
	mmq_hód
;

1260 
	mmq_Àn
;

1261 
	mmq_maxÀn
;

1264 
ölöe
 

1265 
	$mbufq_öô
(
mbufq
 *
mq
, 
maxÀn
)

1268 
	`STAILQ_INIT
(&
mq
->
mq_hód
);

1269 
mq
->
mq_maxÀn
 = 
maxÀn
;

1270 
mq
->
mq_Àn
 = 0;

1271 
	}
}

1273 
ölöe
 
mbuf
 *

1274 
	$mbufq_Êush
(
mbufq
 *
mq
)

1276 
mbuf
 *
m
;

1278 
m
 = 
	`STAILQ_FIRST
(&
mq
->
mq_hód
);

1279 
	`STAILQ_INIT
(&
mq
->
mq_hód
);

1280 
mq
->
mq_Àn
 = 0;

1281  (
m
);

1282 
	}
}

1284 
ölöe
 

1285 
	$mbufq_døö
(
mbufq
 *
mq
)

1287 
mbuf
 *
m
, *
n
;

1289 
n
 = 
	`mbufq_Êush
(
mq
);

1290 (
m
 = 
n
Ë!
NULL
) {

1291 
n
 = 
	`STAILQ_NEXT
(
m
, 
m_°aûqpkt
);

1292 
	`m_‰ìm
(
m
);

1294 
	}
}

1296 
ölöe
 
mbuf
 *

1297 
	$mbufq_fú°
(c⁄° 
mbufq
 *
mq
)

1300  (
	`STAILQ_FIRST
(&
mq
->
mq_hód
));

1301 
	}
}

1303 
ölöe
 
mbuf
 *

1304 
	$mbufq_œ°
(c⁄° 
mbufq
 *
mq
)

1307  (
	`STAILQ_LAST
(&
mq
->
mq_hód
, 
mbuf
, 
m_°aûqpkt
));

1308 
	}
}

1310 
ölöe
 

1311 
	$mbufq_fuŒ
(c⁄° 
mbufq
 *
mq
)

1314  (
mq
->
mq_Àn
 >mq->
mq_maxÀn
);

1315 
	}
}

1317 
ölöe
 

1318 
	$mbufq_Àn
(c⁄° 
mbufq
 *
mq
)

1321  (
mq
->
mq_Àn
);

1322 
	}
}

1324 
ölöe
 

1325 
	$mbufq_íqueue
(
mbufq
 *
mq
, 
mbuf
 *
m
)

1328 i‡(
	`mbufq_fuŒ
(
mq
))

1329  (
ENOBUFS
);

1330 
	`STAILQ_INSERT_TAIL
(&
mq
->
mq_hód
, 
m
, 
m_°aûqpkt
);

1331 
mq
->
mq_Àn
++;

1333 
	}
}

1335 
ölöe
 
mbuf
 *

1336 
	$mbufq_dequeue
(
mbufq
 *
mq
)

1338 
mbuf
 *
m
;

1340 
m
 = 
	`STAILQ_FIRST
(&
mq
->
mq_hód
);

1341 i‡(
m
) {

1342 
	`STAILQ_REMOVE_HEAD
(&
mq
->
mq_hód
, 
m_°aûqpkt
);

1343 
m
->
m_√xçkt
 = 
NULL
;

1344 
mq
->
mq_Àn
--;

1346  (
m
);

1347 
	}
}

1349 
ölöe
 

1350 
	$mbufq_¥ïíd
(
mbufq
 *
mq
, 
mbuf
 *
m
)

1353 
	`STAILQ_INSERT_HEAD
(&
mq
->
mq_hód
, 
m
, 
m_°aûqpkt
);

1354 
mq
->
mq_Àn
++;

1355 
	}
}

1360 
ölöe
 

1361 
	$mbufq_c⁄ˇt
(
mbufq
 *
mq_d°
, mbufq *
mq_§c
)

1364 
mq_d°
->
mq_Àn
 +
mq_§c
->mq_len;

1365 
	`STAILQ_CONCAT
(&
mq_d°
->
mq_hód
, &
mq_§c
->mq_head);

1366 
mq_§c
->
mq_Àn
 = 0;

1367 
	}
}

1369 #ifde‡
_SYS_TIMESPEC_H_


1370 
ölöe
 

1371 
	$mbuf_t°mp2time•ec
(
mbuf
 *
m
, 
time•ec
 *
ts
)

1374 
	`KASSERT
((
m
->
m_Êags
 & 
M_PKTHDR
) != 0, ("mbuf %pÇo M_PKTHDR", m));

1375 
	`KASSERT
((
m
->
m_Êags
 & 
M_TSTMP
) != 0, ("mbuf %pÇo M_TSTMP", m));

1376 
ts
->
tv_£c
 = 
m
->
m_pkthdr
.
rcv_t°mp
 / 1000000000;

1377 
ts
->
tv_n£c
 = 
m
->
m_pkthdr
.
rcv_t°mp
 % 1000000000;

1378 
	}
}

1381 #ifde‡
NETDUMP


1383 
√tdump_mbuf_døö
();

1384 
√tdump_mbuf_dump
();

1385 
√tdump_mbuf_ªöô
(
nmbuf
, 
n˛u°
, 
˛size
);

	@/usr/include/sys/osd.h

31 #i‚de‡
_SYS_OSD_H_


32 
	#_SYS_OSD_H_


	)

34 
	~<sys/queue.h
>

41 
	sosd
 {

42 
u_öt
 
	mosd_n¶Ÿs
;

43 **
	mosd_¶Ÿs
;

44 
LIST_ENTRY
(
osd
Ë
	mosd_√xt
;

47 #ifde‡
_KERNEL


49 
	#OSD_THREAD
 0

	)

50 
	#OSD_JAIL
 1

	)

51 
	#OSD_KHELP
 2

	)

53 
	#OSD_FIRST
 
OSD_THREAD


	)

54 
	#OSD_LAST
 
OSD_KHELP


	)

56 (*
	tosd_de°ru˘‹_t
)(*
	tvÆue
);

57 (*
	tosd_mëhod_t
)(*
	tobj
, *
	td©a
);

59 
	`osd_ªgi°î
(
u_öt
 
ty≥
, 
osd_de°ru˘‹_t
 
de°ru˘‹
,

60 
osd_mëhod_t
 *
mëhods
);

61 
	`osd_dîegi°î
(
u_öt
 
ty≥
, u_öà
¶Ÿ
);

63 
	`osd_£t
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
, *
vÆue
);

64 **
	`osd_ª£rve
(
u_öt
 
¶Ÿ
);

65 
	`osd_£t_ª£rved
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
, **
rsv
,

66 *
vÆue
);

67 
	`osd_‰ì_ª£rved
(**
rsv
);

68 *
	`osd_gë
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
);

69 
	`osd_dñ
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
);

70 
	`osd_ˇŒ
(
u_öt
 
ty≥
, u_öà
mëhod
, *
obj
, *
d©a
);

72 
	`osd_exô
(
u_öt
 
ty≥
, 
osd
 *osd);

74 
	#osd_thªad_ªgi°î
(
de°ru˘‹
) \

75 
	`osd_ªgi°î
(
OSD_THREAD
, (
de°ru˘‹
), 
NULL
)

	)

76 
	#osd_thªad_dîegi°î
(
¶Ÿ
) \

77 
	`osd_dîegi°î
(
OSD_THREAD
, (
¶Ÿ
))

	)

78 
	#osd_thªad_£t
(
td
, 
¶Ÿ
, 
vÆue
) \

79 
	`osd_£t
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
), (
vÆue
))

	)

80 
	#osd_thªad_£t_ª£rved
(
td
, 
¶Ÿ
, 
rsv
, 
vÆue
) \

81 
	`osd_£t_ª£rved
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
), (
rsv
), (
vÆue
))

	)

82 
	#osd_thªad_gë
(
td
, 
¶Ÿ
) \

83 
	`osd_gë
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
))

	)

84 
	#osd_thªad_dñ
(
td
, 
¶Ÿ
) do { \

85 
	`KASSERT
((
td
Ë=
cuπhªad
, ("Not curthread.")); \

86 
	`osd_dñ
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
)); \

87 
	}
} 0)

	)

88 
	#osd_thªad_ˇŒ
(
td
, 
mëhod
, 
d©a
) \

89 
	`osd_ˇŒ
(
OSD_THREAD
, (
mëhod
), (
td
), (
d©a
))

	)

90 
	#osd_thªad_exô
(
td
) \

91 
	`osd_exô
(
OSD_THREAD
, &(
td
)->
td_osd
)

	)

93 
	#osd_jaû_ªgi°î
(
de°ru˘‹
, 
mëhods
) \

94 
	`osd_ªgi°î
(
OSD_JAIL
, (
de°ru˘‹
), (
mëhods
))

	)

95 
	#osd_jaû_dîegi°î
(
¶Ÿ
) \

96 
	`osd_dîegi°î
(
OSD_JAIL
, (
¶Ÿ
))

	)

97 
	#osd_jaû_£t
(
¥
, 
¶Ÿ
, 
vÆue
) \

98 
	`osd_£t
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
), (
vÆue
))

	)

99 
	#osd_jaû_£t_ª£rved
(
¥
, 
¶Ÿ
, 
rsv
, 
vÆue
) \

100 
	`osd_£t_ª£rved
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
), (
rsv
), (
vÆue
))

	)

101 
	#osd_jaû_gë
(
¥
, 
¶Ÿ
) \

102 
	`osd_gë
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
))

	)

103 
	#osd_jaû_dñ
(
¥
, 
¶Ÿ
) \

104 
	`osd_dñ
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
))

	)

105 
	#osd_jaû_ˇŒ
(
¥
, 
mëhod
, 
d©a
) \

106 
	`osd_ˇŒ
(
OSD_JAIL
, (
mëhod
), (
¥
), (
d©a
))

	)

107 
	#osd_jaû_exô
(
¥
) \

108 
	`osd_exô
(
OSD_JAIL
, &(
¥
)->
¥_osd
)

	)

	@/usr/include/sys/priority.h

36 #i‚de‡
_SYS_PRIORITY_H_


37 
	#_SYS_PRIORITY_H_


	)

47 
	#PRI_ITHD
 1

	)

48 
	#PRI_REALTIME
 2

	)

49 
	#PRI_TIMESHARE
 3

	)

50 
	#PRI_IDLE
 4

	)

56 
	#PRI_FIFO_BIT
 8

	)

57 
	#PRI_FIFO
 (
PRI_FIFO_BIT
 | 
PRI_REALTIME
)

	)

59 
	#PRI_BASE
(
P
Ë((PË& ~
PRI_FIFO_BIT
)

	)

60 
	#PRI_IS_REALTIME
(
P
Ë(
	`PRI_BASE
(PË=
PRI_REALTIME
)

	)

61 
	#PRI_NEED_RR
(
P
Ë((PË!
PRI_FIFO
)

	)

82 
	#PRI_MIN
 (0Ë

	)

83 
	#PRI_MAX
 (255Ë

	)

85 
	#PRI_MIN_ITHD
 (
PRI_MIN
)

	)

86 
	#PRI_MAX_ITHD
 (
PRI_MIN_REALTIME
 - 1)

	)

88 
	#PI_REALTIME
 (
PRI_MIN_ITHD
 + 0)

	)

89 
	#PI_AV
 (
PRI_MIN_ITHD
 + 4)

	)

90 
	#PI_NET
 (
PRI_MIN_ITHD
 + 8)

	)

91 
	#PI_DISK
 (
PRI_MIN_ITHD
 + 12)

	)

92 
	#PI_TTY
 (
PRI_MIN_ITHD
 + 16)

	)

93 
	#PI_DULL
 (
PRI_MIN_ITHD
 + 20)

	)

94 
	#PI_SOFT
 (
PRI_MIN_ITHD
 + 24)

	)

95 
	#PI_SWI
(
x
Ë(
PI_SOFT
 + (xË* 
RQ_PPQ
)

	)

97 
	#PRI_MIN_REALTIME
 (48)

	)

98 
	#PRI_MAX_REALTIME
 (
PRI_MIN_KERN
 - 1)

	)

100 
	#PRI_MIN_KERN
 (80)

	)

101 
	#PRI_MAX_KERN
 (
PRI_MIN_TIMESHARE
 - 1)

	)

103 
	#PSWP
 (
PRI_MIN_KERN
 + 0)

	)

104 
	#PVM
 (
PRI_MIN_KERN
 + 4)

	)

105 
	#PINOD
 (
PRI_MIN_KERN
 + 8)

	)

106 
	#PRIBIO
 (
PRI_MIN_KERN
 + 12)

	)

107 
	#PVFS
 (
PRI_MIN_KERN
 + 16)

	)

108 
	#PZERO
 (
PRI_MIN_KERN
 + 20)

	)

109 
	#PSOCK
 (
PRI_MIN_KERN
 + 24)

	)

110 
	#PWAIT
 (
PRI_MIN_KERN
 + 28)

	)

111 
	#PLOCK
 (
PRI_MIN_KERN
 + 32)

	)

112 
	#PPAUSE
 (
PRI_MIN_KERN
 + 36)

	)

114 
	#PRI_MIN_TIMESHARE
 (120)

	)

115 
	#PRI_MAX_TIMESHARE
 (
PRI_MIN_IDLE
 - 1)

	)

117 
	#PUSER
 (
PRI_MIN_TIMESHARE
)

	)

119 
	#PRI_MIN_IDLE
 (224)

	)

120 
	#PRI_MAX_IDLE
 (
PRI_MAX
)

	)

122 #ifde‡
_KERNEL


124 
	#PRI_USER
 -2

	)

125 
	#PRI_UNCHANGED
 -1

	)

128 
	s¥i‹ôy
 {

129 
u_ch¨
 
	m¥i_˛ass
;

130 
u_ch¨
 
	m¥i_Àvñ
;

131 
u_ch¨
 
	m¥i_«tive
;

132 
u_ch¨
 
	m¥i_u£r
;

	@/usr/include/sys/rangelock.h

31 #i‚def 
_SYS_RANGELOCK_H


32 
	#_SYS_RANGELOCK_H


	)

34 
	~<sys/queue.h
>

36 
	#RL_LOCK_READ
 0x0001

	)

37 
	#RL_LOCK_WRITE
 0x0002

	)

38 
	#RL_LOCK_TYPE_MASK
 0x0003

	)

39 
	#RL_LOCK_GRANTED
 0x0004

	)

41 
	gæ_q_íåy
;

61 
	søngñock
 {

62 
TAILQ_HEAD
(, 
æ_q_íåy
Ë
	mæ_waôîs
;

63 
æ_q_íåy
 *
	mæ_cuºdï
;

66 #ifde‡
_KERNEL


68 
	gmtx
;

70 
øngñock_öô
(
øngñock
 *
lock
);

71 
øngñock_de°roy
(
øngñock
 *
lock
);

72 
øngñock_u∆ock
(
øngñock
 *
lock
, *
cookõ
,

73 
mtx
 *
ûk
);

74 *
øngñock_u∆ock_ønge
(
øngñock
 *
lock
, *
cookõ
,

75 
off_t
 
°¨t
, off_à
íd
, 
mtx
 *
ûk
);

76 *
øngñock_æock
(
øngñock
 *
lock
, 
off_t
 
°¨t
, off_à
íd
,

77 
mtx
 *
ûk
);

78 *
øngñock_wlock
(
øngñock
 *
lock
, 
off_t
 
°¨t
, off_à
íd
,

79 
mtx
 *
ûk
);

80 
æqíåy_‰ì
(
æ_q_íåy
 *
æqe
);

	@/usr/include/sys/refcount.h

31 #i‚de‡
__SYS_REFCOUNT_H__


32 
	#__SYS_REFCOUNT_H__


	)

34 
	~<sys/limôs.h
>

35 
	~<machöe/©omic.h
>

37 #ifde‡
_KERNEL


38 
	~<sys/sy°m.h
>

40 
	#KASSERT
(
exp
, 
msg
Ë

	)

43 
__ölöe
 

44 
	$ªfcou¡_öô
(vﬁ©ûê
u_öt
 *
cou¡
, u_öà
vÆue
)

47 *
cou¡
 = 
vÆue
;

48 
	}
}

50 
__ölöe
 

51 
	$ªfcou¡_acquúe
(vﬁ©ûê
u_öt
 *
cou¡
)

54 
	`KASSERT
(*
cou¡
 < 
UINT_MAX
, ("refcount %p overflowed", count));

55 
	`©omic_add_öt
(
cou¡
, 1);

56 
	}
}

58 
__ölöe
 

59 
	$ªfcou¡_ªÀa£
(vﬁ©ûê
u_öt
 *
cou¡
)

61 
u_öt
 
ﬁd
;

63 
	`©omic_thªad_„n˚_ªl
();

64 
ﬁd
 = 
	`©omic_„tchadd_öt
(
cou¡
, -1);

65 
	`KASSERT
(
ﬁd
 > 0, ("ªfcou¡ %∞i†zîo", 
cou¡
));

66 i‡(
ﬁd
 > 1)

75 
	`©omic_thªad_„n˚_acq
();

77 
	}
}

85 
__ölöe
 
__ªsu…_u£_check
 

86 
	$ªfcou¡_acquúe_if_nŸ_zîo
(vﬁ©ûê
u_öt
 *
cou¡
)

88 
u_öt
 
ﬁd
;

90 
ﬁd
 = *
cou¡
;

92 
	`KASSERT
(
ﬁd
 < 
UINT_MAX
, ("ªfcou¡ %∞ovîÊowed", 
cou¡
));

93 i‡(
ﬁd
 == 0)

95 i‡(
	`©omic_fcmp£t_öt
(
cou¡
, &
ﬁd
, old + 1))

98 
	}
}

100 
__ölöe
 
__ªsu…_u£_check
 

101 
	$ªfcou¡_ªÀa£_if_nŸ_œ°
(vﬁ©ûê
u_öt
 *
cou¡
)

103 
u_öt
 
ﬁd
;

105 
ﬁd
 = *
cou¡
;

107 
	`KASSERT
(
ﬁd
 > 0, ("ªfcou¡ %∞i†zîo", 
cou¡
));

108 i‡(
ﬁd
 == 1)

110 i‡(
	`©omic_fcmp£t_öt
(
cou¡
, &
ﬁd
, old - 1))

113 
	}
}

	@/usr/include/sys/resource.h

35 #i‚de‡
_SYS_RESOURCE_H_


36 
	#_SYS_RESOURCE_H_


	)

38 
	~<sys/cdefs.h
>

39 
	~<sys/_timevÆ.h
>

40 
	~<sys/_ty≥s.h
>

42 #i‚de‡
_ID_T_DECLARED


43 
__id_t
 
	tid_t
;

44 
	#_ID_T_DECLARED


	)

47 #i‚de‡
_RLIM_T_DECLARED


48 
__æim_t
 
	tæim_t
;

49 
	#_RLIM_T_DECLARED


	)

55 
	#PRIO_MIN
 -20

	)

56 
	#PRIO_MAX
 20

	)

58 
	#PRIO_PROCESS
 0

	)

59 
	#PRIO_PGRP
 1

	)

60 
	#PRIO_USER
 2

	)

69 
	#RUSAGE_SELF
 0

	)

70 
	#RUSAGE_CHILDREN
 -1

	)

71 
	#RUSAGE_THREAD
 1

	)

73 
	srußge
 {

74 
timevÆ
 
	mru_utime
;

75 
timevÆ
 
	mru_°ime
;

76 
	mru_maxrss
;

77 
	#ru_fú°
 
ru_ixrss


	)

78 
	mru_ixrss
;

79 
	mru_idrss
;

80 
	mru_i§ss
;

81 
	mru_möÊt
;

82 
	mru_majÊt
;

83 
	mru_nsw≠
;

84 
	mru_öblock
;

85 
	mru_oublock
;

86 
	mru_msg¢d
;

87 
	mru_msgrcv
;

88 
	mru_nsig«ls
;

89 
	mru_nvcsw
;

90 
	mru_nivcsw
;

91 
	#ru_œ°
 
ru_nivcsw


	)

94 #i‡
__BSD_VISIBLE


95 
	s__wrußge
 {

96 
rußge
 
	mwru_£lf
;

97 
rußge
 
	mwru_chûdªn
;

104 
	#RLIMIT_CPU
 0

	)

105 
	#RLIMIT_FSIZE
 1

	)

106 
	#RLIMIT_DATA
 2

	)

107 
	#RLIMIT_STACK
 3

	)

108 
	#RLIMIT_CORE
 4

	)

109 
	#RLIMIT_RSS
 5

	)

110 
	#RLIMIT_MEMLOCK
 6

	)

111 
	#RLIMIT_NPROC
 7

	)

112 
	#RLIMIT_NOFILE
 8

	)

113 
	#RLIMIT_SBSIZE
 9

	)

114 
	#RLIMIT_VMEM
 10

	)

115 
	#RLIMIT_AS
 
RLIMIT_VMEM


	)

116 
	#RLIMIT_NPTS
 11

	)

117 
	#RLIMIT_SWAP
 12

	)

118 
	#RLIMIT_KQUEUES
 13

	)

119 
	#RLIMIT_UMTXP
 14

	)

121 
	#RLIM_NLIMITS
 15

	)

123 
	#RLIM_INFINITY
 ((
æim_t
)(((
__uöt64_t
)1 << 63Ë- 1))

	)

124 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

125 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

131 #ifde‡
_RLIMIT_IDENT


132 c⁄° *
	gæimô_idít
[
RLIM_NLIMITS
] = {

151 
	sæimô
 {

152 
æim_t
 
	mæim_cur
;

153 
æim_t
 
	mæim_max
;

156 #i‡
__BSD_VISIBLE


158 
	s‹limô
 {

159 
__öt32_t
 
	mæim_cur
;

160 
__öt32_t
 
	mæim_max
;

163 
	slﬂdavg
 {

164 
__fix±_t
 
	mldavg
[3];

165 
	mfsˇÀ
;

168 
	#CP_USER
 0

	)

169 
	#CP_NICE
 1

	)

170 
	#CP_SYS
 2

	)

171 
	#CP_INTR
 3

	)

172 
	#CP_IDLE
 4

	)

173 
	#CPUSTATES
 5

	)

177 #ifde‡
_KERNEL


179 
lﬂdavg
 
avîu¬abÀ
;

180 
ªad_˝u_time
(*
˝_time
);

184 
__BEGIN_DECLS


186 
gë¥i‹ôy
(, );

187 
gëæimô
(, 
æimô
 *);

188 
gërußge
(, 
rußge
 *);

189 
£çri‹ôy
(, , );

190 
£ålimô
(, c⁄° 
æimô
 *);

191 
	g__END_DECLS


	@/usr/include/sys/rtprio.h

36 #i‚de‡
_SYS_RTPRIO_H_


37 
	#_SYS_RTPRIO_H_


	)

39 
	~<sys/¥i‹ôy.h
>

47 
	#RTP_PRIO_REALTIME
 
PRI_REALTIME


	)

48 
	#RTP_PRIO_NORMAL
 
PRI_TIMESHARE


	)

49 
	#RTP_PRIO_IDLE
 
PRI_IDLE


	)

54 
	#RTP_PRIO_FIFO_BIT
 
PRI_FIFO_BIT


	)

55 
	#RTP_PRIO_FIFO
 
PRI_FIFO


	)

56 
	#RTP_PRIO_BASE
(
P
Ë
	`PRI_BASE
(P)

	)

57 
	#RTP_PRIO_IS_REALTIME
(
P
Ë
	`PRI_IS_REALTIME
(P)

	)

58 
	#RTP_PRIO_NEED_RR
(
P
Ë
	`PRI_NEED_RR
(P)

	)

61 
	#RTP_PRIO_MIN
 0

	)

62 
	#RTP_PRIO_MAX
 31

	)

67 
	#RTP_LOOKUP
 0

	)

68 
	#RTP_SET
 1

	)

70 #i‚de‡
LOCORE


74 
	sπ¥io
 {

75 
u_sh‹t
 
	mty≥
;

76 
u_sh‹t
 
	m¥io
;

79 #ifde‡
_KERNEL


80 
	gthªad
;

81 
πp_to_¥i
(
π¥io
 *, 
thªad
 *);

82 
¥i_to_πp
(
thªad
 *, 
π¥io
 *);

86 #i‚de‡
_KERNEL


87 
	~<sys/cdefs.h
>

89 
__BEGIN_DECLS


90 
π¥io
(, 
pid_t
, rtprio *);

91 
π¥io_thªad
(, 
lwpid_t
, 
π¥io
 *);

92 
	g__END_DECLS


	@/usr/include/sys/runq.h

31 #i‚def 
_RUNQ_H_


32 
	#_RUNQ_H_


	)

34 
	~<machöe/runq.h
>

36 
	gthªad
;

42 
	#RQ_NQS
 (64Ë

	)

43 
	#RQ_PPQ
 (4Ë

	)

48 
TAILQ_HEAD
(
rqhód
, 
thªad
);

54 
	srqbôs
 {

55 
rqb_w‹d_t
 
	mrqb_bôs
[
RQB_LEN
];

62 
	srunq
 {

63 
rqbôs
 
	mrq_°©us
;

64 
rqhód
 
	mrq_queues
[
RQ_NQS
];

67 
runq_add
(
runq
 *, 
thªad
 *, );

68 
runq_add_¥i
(
runq
 *, 
thªad
 *, 
u_ch¨
, );

69 
runq_check
(
runq
 *);

70 
thªad
 *
runq_choo£
(
runq
 *);

71 
thªad
 *
runq_choo£_‰om
(
runq
 *, 
u_ch¨
);

72 
thªad
 *
runq_choo£_fuzz
(
runq
 *, );

73 
runq_öô
(
runq
 *);

74 
runq_ªmove
(
runq
 *, 
thªad
 *);

75 
runq_ªmove_idx
(
runq
 *, 
thªad
 *, 
u_ch¨
 *);

	@/usr/include/sys/select.h

34 #i‚de‡
_SYS_SELECT_H_


35 
	#_SYS_SELECT_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_ty≥s.h
>

40 
	~<sys/_sig£t.h
>

41 
	~<sys/_timevÆ.h
>

42 
	~<sys/time•ec.h
>

44 
	t__fd_mask
;

45 #i‡
__BSD_VISIBLE


46 
__fd_mask
 
	tfd_mask
;

49 #i‚de‡
_SIGSET_T_DECLARED


50 
	#_SIGSET_T_DECLARED


	)

51 
__sig£t_t
 
	tsig£t_t
;

60 #i‚def 
FD_SETSIZE


61 
	#FD_SETSIZE
 1024

	)

64 
	#_NFDBITS
 ((
__fd_mask
Ë* 8Ë

	)

65 #i‡
__BSD_VISIBLE


66 
	#NFDBITS
 
_NFDBITS


	)

69 #i‚de‡
_howm™y


70 
	#_howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

73 
	sfd_£t
 {

74 
__fd_mask
 
	m__fds_bôs
[
_howm™y
(
FD_SETSIZE
, 
_NFDBITS
)];

75 } 
	tfd_£t
;

76 #i‡
__BSD_VISIBLE


77 
	#fds_bôs
 
__fds_bôs


	)

80 
	#__fd£t_mask
(
n
Ë((
__fd_mask
)1 << (“Ë% 
_NFDBITS
))

	)

81 
	#FD_CLR
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] &~
	`__fd£t_mask
“))

	)

82 #i‡
__BSD_VISIBLE


83 
	#FD_COPY
(
f
, 
t
Ë()(*—Ë*(f))

	)

85 
	#FD_ISSET
(
n
, 
p
Ë((’)->
__fds_bôs
[“)/
_NFDBITS
] & 
	`__fd£t_mask
“)Ë!0)

	)

86 
	#FD_SET
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] |
	`__fd£t_mask
“))

	)

87 
	#FD_ZERO
(
p
) do { \

88 
fd_£t
 *
_p
; \

89 
__size_t
 
_n
; \

91 
_p
 = (
p
); \

92 
_n
 = 
	`_howm™y
(
FD_SETSIZE
, 
_NFDBITS
); \

93 
_n
 > 0) \

94 
_p
->
__fds_bôs
[--
_n
] = 0; \

95 } 0)

	)

97 #i‚de‡
_KERNEL


99 
__BEGIN_DECLS


100 
p£À˘
(, 
fd_£t
 *
__ª°ri˘
, fd_set *__restrict, fd_set *__restrict,

101 c⁄° 
time•ec
 *
__ª°ri˘
, c⁄° 
sig£t_t
 *__restrict);

102 #i‚de‡
_SELECT_DECLARED


103 
	#_SELECT_DECLARED


	)

105 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

107 
	g__END_DECLS


	@/usr/include/sys/seq.h

28 #i‚de‡
_SYS_SEQ_H_


29 
	#_SYS_SEQ_H_


	)

31 #ifde‡
_KERNEL


32 
	~<sys/sy°m.h
>

34 
	~<sys/ty≥s.h
>

39 
uöt32_t
 
	t£q_t
;

41 #ifde‡
_KERNEL


93 
	~<sys/lock.h
>

95 
	~<machöe/˝u.h
>

97 
__ölöe
 
boﬁ


98 
	$£q_ö_modify
(
£q_t
 
£qp
)

101  (
£qp
 & 1);

102 
	}
}

104 
__ölöe
 

105 
	$£q_wrôe_begö
(
£q_t
 *
£qp
)

108 
	`¸ôiˇl_íãr
();

109 
	`MPASS
(!
	`£q_ö_modify
(*
£qp
));

110 *
£qp
 += 1;

111 
	`©omic_thªad_„n˚_ªl
();

112 
	}
}

114 
__ölöe
 

115 
	$£q_wrôe_íd
(
£q_t
 *
£qp
)

118 
	`©omic_°‹e_ªl_öt
(
£qp
, *seqp + 1);

119 
	`MPASS
(!
	`£q_ö_modify
(*
£qp
));

120 
	`¸ôiˇl_exô
();

121 
	}
}

123 
__ölöe
 
£q_t


124 
	$£q_ªad
(c⁄° 
£q_t
 *
£qp
)

126 
£q_t
 
ªt
;

129 
ªt
 = 
	`©omic_lﬂd_acq_öt
(
	`__DECONST
(
£q_t
 *, 
£qp
));

130 i‡(
	`£q_ö_modify
(
ªt
)) {

131 
	`˝u_•öwaô
();

137  (
ªt
);

138 
	}
}

140 
__ölöe
 
£q_t


141 
	$£q_c⁄si°ít_nomb
(c⁄° 
£q_t
 *
£qp
, seq_à
ﬁd£q
)

144  (*
£qp
 =
ﬁd£q
);

145 
	}
}

147 
__ölöe
 
£q_t


148 
	$£q_c⁄si°ít
(c⁄° 
£q_t
 *
£qp
, seq_à
ﬁd£q
)

151 
	`©omic_thªad_„n˚_acq
();

152  (
	`£q_c⁄si°ít_nomb
(
£qp
, 
ﬁd£q
));

153 
	}
}

	@/usr/include/sys/sigio.h

35 #i‚de‡
_SYS_SIGIO_H_


36 
	#_SYS_SIGIO_H_


	)

48 
	ssigio
 {

50 
¥oc
 *
	msiu_¥oc
;

51 
pgΩ
 *
	msiu_pgΩ
;

52 } 
	msio_u
;

53 
SLIST_ENTRY
(
sigio
Ë
	msio_pgsigio
;

54 
sigio
 **
	msio_myªf
;

56 
u¸ed
 *
	msio_u¸ed
;

57 
pid_t
 
	msio_pgid
;

59 
	#sio_¥oc
 
sio_u
.
siu_¥oc


	)

60 
	#sio_pgΩ
 
sio_u
.
siu_pgΩ


	)

62 
SLIST_HEAD
(
sigiﬁ°
, 
sigio
);

64 
pid_t
 
fgëown
(
sigio
 **
sigi›
);

65 
f£town
(
pid_t
 
pgid
, 
sigio
 **
sigi›
);

66 
fun£town
(
sigio
 **
sigi›
);

67 
fun£tow∆°
(
sigiﬁ°
 *sigiolst);

	@/usr/include/sys/signal.h

40 #i‚de‡
_SYS_SIGNAL_H_


41 
	#_SYS_SIGNAL_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_ty≥s.h
>

45 
	~<sys/_sig£t.h
>

47 
	~<machöe/_limôs.h
>

48 
	~<machöe/sig«l.h
>

50 #i‡
__POSIX_VISIBLE
 >= 200809

52 
	~<sys/_±hªadty≥s.h
>

53 
	~<sys/_time•ec.h
>

55 #i‚de‡
_SIZE_T_DECLARED


56 
__size_t
 
	tsize_t
;

57 
	#_SIZE_T_DECLARED


	)

60 #i‚de‡
_UID_T_DECLARED


61 
__uid_t
 
	tuid_t
;

62 
	#_UID_T_DECLARED


	)

70 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


71 
	#SIGHUP
 1

	)

73 
	#SIGINT
 2

	)

74 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


75 
	#SIGQUIT
 3

	)

77 
	#SIGILL
 4

	)

78 #i‡
__XSI_VISIBLE


79 
	#SIGTRAP
 5

	)

81 
	#SIGABRT
 6

	)

82 #i‡
__BSD_VISIBLE


83 
	#SIGIOT
 
SIGABRT


	)

84 
	#SIGEMT
 7

	)

86 
	#SIGFPE
 8

	)

87 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


88 
	#SIGKILL
 9

	)

90 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


91 
	#SIGBUS
 10

	)

93 
	#SIGSEGV
 11

	)

94 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


95 
	#SIGSYS
 12

	)

97 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


98 
	#SIGPIPE
 13

	)

99 
	#SIGALRM
 14

	)

101 
	#SIGTERM
 15

	)

102 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


103 
	#SIGURG
 16

	)

105 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


106 
	#SIGSTOP
 17

	)

107 
	#SIGTSTP
 18

	)

108 
	#SIGCONT
 19

	)

109 
	#SIGCHLD
 20

	)

110 
	#SIGTTIN
 21

	)

111 
	#SIGTTOU
 22

	)

113 #i‡
__BSD_VISIBLE


114 
	#SIGIO
 23

	)

116 #i‡
__XSI_VISIBLE


117 
	#SIGXCPU
 24

	)

118 
	#SIGXFSZ
 25

	)

119 
	#SIGVTALRM
 26

	)

120 
	#SIGPROF
 27

	)

122 #i‡
__BSD_VISIBLE


123 
	#SIGWINCH
 28

	)

124 
	#SIGINFO
 29

	)

126 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


127 
	#SIGUSR1
 30

	)

128 
	#SIGUSR2
 31

	)

130 #i‡
__BSD_VISIBLE


131 
	#SIGTHR
 32

	)

132 
	#SIGLWP
 
SIGTHR


	)

133 
	#SIGLIBRT
 33

	)

136 
	#SIGRTMIN
 65

	)

137 
	#SIGRTMAX
 126

	)

139 
	#SIG_DFL
 ((
__sigh™dÀr_t
 *)0)

	)

140 
	#SIG_IGN
 ((
__sigh™dÀr_t
 *)1)

	)

141 
	#SIG_ERR
 ((
__sigh™dÀr_t
 *)-1)

	)

143 
	#SIG_HOLD
 ((
__sigh™dÀr_t
 *)3)

	)

161 
	t__sigh™dÀr_t
();

163 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


164 #i‚de‡
_SIGSET_T_DECLARED


165 
	#_SIGSET_T_DECLARED


	)

166 
__sig£t_t
 
	tsig£t_t
;

170 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE
 >= 500

171 
	usigvÆ
 {

173 
	msivÆ_öt
;

174 *
	msivÆ_±r
;

176 
	msigvÆ_öt
;

177 *
	msigvÆ_±r
;

180 #i‡
deföed
(
_WANT_LWPINFO32
Ë|| (deföed(
_KERNEL
Ë&& deföed(
__LP64__
))

181 
	usigvÆ32
 {

182 
	msivÆ_öt
;

183 
uöt32_t
 
	msivÆ_±r
;

185 
	msigvÆ_öt
;

186 
uöt32_t
 
	msigvÆ_±r
;

191 #i‡
__POSIX_VISIBLE
 >= 199309

193 
	g±hªad_©å
;

195 
	ssigevít
 {

196 
	msigev_nŸify
;

197 
	msigev_signo
;

198 
sigvÆ
 
	msigev_vÆue
;

200 
__lwpid_t
 
	m_thªadid
;

202 (*
	m_fun˘i⁄
)(
	msigvÆ
);

203 
±hªad_©å
 **
	m_©åibuã
;

204 } 
	m_sigev_thªad
;

205 
	m_kevít_Êags
;

206 
	m__•¨e__
[8];

207 } 
	m_sigev_un
;

210 #i‡
__BSD_VISIBLE


211 
	#sigev_nŸify_kqueue
 
sigev_signo


	)

212 
	#sigev_nŸify_kevít_Êags
 
_sigev_un
.
_kevít_Êags


	)

213 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_thªadid


	)

215 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

216 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

218 
	#SIGEV_NONE
 0

	)

219 
	#SIGEV_SIGNAL
 1

	)

220 
	#SIGEV_THREAD
 2

	)

221 #i‡
__BSD_VISIBLE


222 
	#SIGEV_KEVENT
 3

	)

223 
	#SIGEV_THREAD_ID
 4

	)

228 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE


229 
	s__sigöfo
 {

230 
	msi_signo
;

231 
	msi_î∫o
;

238 
	msi_code
;

239 
__pid_t
 
	msi_pid
;

240 
__uid_t
 
	msi_uid
;

241 
	msi_°©us
;

242 *
	msi_addr
;

243 
sigvÆ
 
	msi_vÆue
;

246 
	m_å≠no
;

247 } 
	m_Áu…
;

249 
	m_timîid
;

250 
	m_ovîrun
;

251 } 
	m_timî
;

253 
	m_mqd
;

254 } 
	m_mesgq
;

256 
	m_b™d
;

257 } 
	m_pﬁl
;

259 
	m__•¨e1__
;

260 
	m__•¨e2__
[7];

261 } 
	m__•¨e__
;

262 } 
	m_ªas⁄
;

263 } 
	tsigöfo_t
;

265 
	#si_å≠no
 
_ªas⁄
.
_Áu…
.
_å≠no


	)

266 
	#si_timîid
 
_ªas⁄
.
_timî
.
_timîid


	)

267 
	#si_ovîrun
 
_ªas⁄
.
_timî
.
_ovîrun


	)

268 
	#si_mqd
 
_ªas⁄
.
_mesgq
.
_mqd


	)

269 
	#si_b™d
 
_ªas⁄
.
_pﬁl
.
_b™d


	)

271 #i‡
deföed
(
_WANT_LWPINFO32
Ë|| (deföed(
_KERNEL
Ë&& deföed(
__LP64__
))

272 
	ssigöfo32
 {

273 
	msi_signo
;

274 
	msi_î∫o
;

275 
	msi_code
;

276 
__pid_t
 
	msi_pid
;

277 
__uid_t
 
	msi_uid
;

278 
	msi_°©us
;

279 
uöt32_t
 
	msi_addr
;

280 
sigvÆ32
 
	msi_vÆue
;

283 
	m_å≠no
;

284 } 
	m_Áu…
;

286 
	m_timîid
;

287 
	m_ovîrun
;

288 } 
	m_timî
;

290 
	m_mqd
;

291 } 
	m_mesgq
;

293 
öt32_t
 
	m_b™d
;

294 } 
	m_pﬁl
;

296 
öt32_t
 
	m__•¨e1__
;

297 
	m__•¨e2__
[7];

298 } 
	m__•¨e__
;

299 } 
	m_ªas⁄
;

305 
	#ILL_ILLOPC
 1

	)

306 
	#ILL_ILLOPN
 2

	)

307 
	#ILL_ILLADR
 3

	)

308 
	#ILL_ILLTRP
 4

	)

309 
	#ILL_PRVOPC
 5

	)

310 
	#ILL_PRVREG
 6

	)

311 
	#ILL_COPROC
 7

	)

312 
	#ILL_BADSTK
 8

	)

315 
	#BUS_ADRALN
 1

	)

316 
	#BUS_ADRERR
 2

	)

317 
	#BUS_OBJERR
 3

	)

320 
	#SEGV_MAPERR
 1

	)

321 
	#SEGV_ACCERR
 2

	)

325 
	#FPE_INTOVF
 1

	)

326 
	#FPE_INTDIV
 2

	)

327 
	#FPE_FLTDIV
 3

	)

328 
	#FPE_FLTOVF
 4

	)

329 
	#FPE_FLTUND
 5

	)

330 
	#FPE_FLTRES
 6

	)

331 
	#FPE_FLTINV
 7

	)

332 
	#FPE_FLTSUB
 8

	)

335 
	#TRAP_BRKPT
 1

	)

336 
	#TRAP_TRACE
 2

	)

337 
	#TRAP_DTRACE
 3

	)

338 
	#TRAP_CAP
 4

	)

341 
	#CLD_EXITED
 1

	)

342 
	#CLD_KILLED
 2

	)

344 
	#CLD_DUMPED
 3

	)

346 
	#CLD_TRAPPED
 4

	)

347 
	#CLD_STOPPED
 5

	)

348 
	#CLD_CONTINUED
 6

	)

351 
	#POLL_IN
 1

	)

352 
	#POLL_OUT
 2

	)

353 
	#POLL_MSG
 3

	)

354 
	#POLL_ERR
 4

	)

355 
	#POLL_PRI
 5

	)

356 
	#POLL_HUP
 6

	)

360 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


361 
	g__sigöfo
;

366 
	ssiga˘i⁄
 {

368 (*
	m__ß_h™dÀr
)();

369 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *, *);

370 } 
	m__siga˘i⁄_u
;

371 
	mß_Êags
;

372 
sig£t_t
 
	mß_mask
;

375 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

378 #i‡
__XSI_VISIBLE


380 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

383 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


384 
	#SA_NOCLDSTOP
 0x0008

	)

387 #i‡
__XSI_VISIBLE


388 
	#SA_ONSTACK
 0x0001

	)

389 
	#SA_RESTART
 0x0002

	)

390 
	#SA_RESETHAND
 0x0004

	)

391 
	#SA_NODEFER
 0x0010

	)

392 
	#SA_NOCLDWAIT
 0x0020

	)

393 
	#SA_SIGINFO
 0x0040

	)

396 #i‡
__BSD_VISIBLE


397 
	#NSIG
 32

	)

400 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


401 
	#SI_NOINFO
 0

	)

402 
	#SI_USER
 0x10001

	)

403 
	#SI_QUEUE
 0x10002

	)

404 
	#SI_TIMER
 0x10003

	)

406 
	#SI_ASYNCIO
 0x10004

	)

408 
	#SI_MESGQ
 0x10005

	)

410 
	#SI_KERNEL
 0x10006

	)

411 
	#SI_LWP
 0x10007

	)

413 #i‡
__BSD_VISIBLE


414 
	#SI_UNDEFINED
 0

	)

417 #i‡
__BSD_VISIBLE


418 
__sigh™dÀr_t
 *
	tsig_t
;

419 
	t__sigöfoh™dÀr_t
(, 
	t__sigöfo
 *, *);

422 #i‡
__XSI_VISIBLE


423 #i‡
__BSD_VISIBLE


424 
	#__°ack_t
 
sigÆt°ack


	)

426 
__°ack_t
 
	t°ack_t
;

428 
	#SS_ONSTACK
 0x0001

	)

429 
	#SS_DISABLE
 0x0004

	)

430 
	#MINSIGSTKSZ
 
__MINSIGSTKSZ


	)

431 
	#SIGSTKSZ
 (
MINSIGSTKSZ
 + 32768Ë

	)

439 
	s__°ack_t
 {

440 *
	mss_•
;

441 
__size_t
 
	mss_size
;

442 
	mss_Êags
;

445 #i‡
__BSD_VISIBLE


450 
	ssigvec
 {

451 
__sigh™dÀr_t
 *
	msv_h™dÀr
;

452 
	msv_mask
;

453 
	msv_Êags
;

456 
	#SV_ONSTACK
 
SA_ONSTACK


	)

457 
	#SV_INTERRUPT
 
SA_RESTART


	)

458 
	#SV_RESETHAND
 
SA_RESETHAND


	)

459 
	#SV_NODEFER
 
SA_NODEFER


	)

460 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

461 
	#SV_SIGINFO
 
SA_SIGINFO


	)

462 
	#sv_⁄°ack
 
sv_Êags


	)

466 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
) && \

467 !
	$deföed
(
__i386__
)

468 
	sosigc⁄ãxt
 {

469 
_nŸ_u£d
;

473 #i‡
__XSI_VISIBLE


477 
	ssig°ack
 {

478 *
ss_•
;

479 
ss_⁄°ack
;

483 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE <= 200112

488 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

491 #i‡
__BSD_VISIBLE


492 
	#BADSIG
 
SIG_ERR


	)

495 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


499 
	#SIG_BLOCK
 1

	)

500 
	#SIG_UNBLOCK
 2

	)

501 
	#SIG_SETMASK
 3

	)

508 
__BEGIN_DECLS


509 
__sigh™dÀr_t
 *
	`sig«l
(, __sighandler_t *);

510 
__END_DECLS


	@/usr/include/sys/stdint.h

31 #i‚de‡
_SYS_STDINT_H_


32 
	#_SYS_STDINT_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

37 
	~<machöe/_°döt.h
>

38 
	~<sys/_°döt.h
>

40 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

41 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

42 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

43 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

45 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

46 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

47 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

48 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

50 
__öt_Á°8_t
 
	töt_Á°8_t
;

51 
__öt_Á°16_t
 
	töt_Á°16_t
;

52 
__öt_Á°32_t
 
	töt_Á°32_t
;

53 
__öt_Á°64_t
 
	töt_Á°64_t
;

55 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

56 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

57 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

58 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

61 #i‡
deföed
(
UINTPTR_MAX
Ë&& deföed(
UINT64_MAX
) && (UINTPTR_MAX == UINT64_MAX)

62 
	#__WORDSIZE
 64

	)

64 
	#__WORDSIZE
 32

	)

68 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

69 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

71 #i‡
__EXT1_VISIBLE


73 #i‚de‡
RSIZE_MAX


74 
	#RSIZE_MAX
 (
SIZE_MAX
 >> 1)

	)

	@/usr/include/sys/syslimits.h

35 #i‚de‡
_SYS_SYSLIMITS_H_


36 
	#_SYS_SYSLIMITS_H_


	)

38 #i‡!
deföed
(
_STANDALONE
Ë&& !deföed(
_KERNEL
Ë&& !deföed(
_LIMITS_H_
Ë&& !deföed(
_SYS_PARAM_H_
)

39 #i‚de‡
_SYS_CDEFS_H_


40 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


42 #ifde‡
__CC_SUPPORTS_WARNING


51 
	#ARG_MAX
 262144

	)

52 #i‚de‡
CHILD_MAX


53 
	#CHILD_MAX
 40

	)

55 
	#MAX_CANON
 255

	)

56 
	#MAX_INPUT
 255

	)

57 
	#NAME_MAX
 255

	)

58 #i‚de‡
NGROUPS_MAX


59 
	#NGROUPS_MAX
 1023

	)

61 #i‚de‡
OPEN_MAX


62 
	#OPEN_MAX
 64

	)

64 
	#PATH_MAX
 1024

	)

65 
	#PIPE_BUF
 512

	)

66 
	#IOV_MAX
 1024

	)

	@/usr/include/sys/time.h

35 #i‚de‡
_SYS_TIME_H_


36 
	#_SYS_TIME_H_


	)

38 
	~<sys/_timevÆ.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<sys/time•ec.h
>

42 
	stimez⁄e
 {

43 
	mtz_möuãswe°
;

44 
	mtz_d°time
;

46 
	#DST_NONE
 0

	)

47 
	#DST_USA
 1

	)

48 
	#DST_AUST
 2

	)

49 
	#DST_WET
 3

	)

50 
	#DST_MET
 4

	)

51 
	#DST_EET
 5

	)

52 
	#DST_CAN
 6

	)

54 #i‡
__BSD_VISIBLE


55 
	sbötime
 {

56 
time_t
 
	m£c
;

57 
uöt64_t
 
	m‰ac
;

60 
__ölöe
 

61 
	$bötime_addx
(
bötime
 *
_bt
, 
uöt64_t
 
_x
)

63 
uöt64_t
 
_u
;

65 
_u
 = 
_bt
->
‰ac
;

66 
_bt
->
‰ac
 +
_x
;

67 i‡(
_u
 > 
_bt
->
‰ac
)

68 
_bt
->
£c
++;

69 
	}
}

71 
__ölöe
 

72 
	$bötime_add
(
bötime
 *
_bt
, c⁄° bötimê*
_bt2
)

74 
uöt64_t
 
_u
;

76 
_u
 = 
_bt
->
‰ac
;

77 
_bt
->
‰ac
 +
_bt2
->frac;

78 i‡(
_u
 > 
_bt
->
‰ac
)

79 
_bt
->
£c
++;

80 
_bt
->
£c
 +
_bt2
->sec;

81 
	}
}

83 
__ölöe
 

84 
	$bötime_sub
(
bötime
 *
_bt
, c⁄° bötimê*
_bt2
)

86 
uöt64_t
 
_u
;

88 
_u
 = 
_bt
->
‰ac
;

89 
_bt
->
‰ac
 -
_bt2
->frac;

90 i‡(
_u
 < 
_bt
->
‰ac
)

91 
_bt
->
£c
--;

92 
_bt
->
£c
 -
_bt2
->sec;

93 
	}
}

95 
__ölöe
 

96 
	$bötime_mul
(
bötime
 *
_bt
, 
u_öt
 
_x
)

98 
uöt64_t
 
_p1
, 
_p2
;

100 
_p1
 = (
_bt
->
‰ac
 & 0xffffffffuŒË* 
_x
;

101 
_p2
 = (
_bt
->
‰ac
 >> 32Ë* 
_x
 + (
_p1
 >> 32);

102 
_bt
->
£c
 *
_x
;

103 
_bt
->
£c
 +(
_p2
 >> 32);

104 
_bt
->
‰ac
 = (
_p2
 << 32Ë| (
_p1
 & 0xffffffffull);

105 
	}
}

107 
__ölöe
 

108 
	$bötime_shi·
(
bötime
 *
_bt
, 
_exp
)

111 i‡(
_exp
 > 0) {

112 
_bt
->
£c
 <<
_exp
;

113 
_bt
->
£c
 |_bt->
‰ac
 >> (64 - 
_exp
);

114 
_bt
->
‰ac
 <<
_exp
;

115 } i‡(
_exp
 < 0) {

116 
_bt
->
‰ac
 >>-
_exp
;

117 
_bt
->
‰ac
 |(
uöt64_t
)_bt->
£c
 << (64 + 
_exp
);

118 
_bt
->
£c
 >>-
_exp
;

120 
	}
}

122 
	#bötime_˛ór
(
a
Ë(◊)->
£c
 = (a)->
‰ac
 = 0)

	)

123 
	#bötime_is£t
(
a
Ë(◊)->
£c
 || (a)->
‰ac
)

	)

124 
	#bötime_cmp
(
a
, 
b
, 
cmp
) \

125 (((
a
)->
£c
 =(
b
)->sec) ? \

126 ((
a
)->
‰ac
 
	`cmp
 (
b
)->frac) : \

127 ((
a
)->
£c
 
	`cmp
 (
b
)->£c))

	)

129 
	#SBT_1S
 ((
sbötime_t
)1 << 32)

	)

130 
	#SBT_1M
 (
SBT_1S
 * 60)

	)

131 
	#SBT_1MS
 (
SBT_1S
 / 1000)

	)

132 
	#SBT_1US
 (
SBT_1S
 / 1000000)

	)

133 
	#SBT_1NS
 (
SBT_1S
 / 1000000000Ë

	)

134 
	#SBT_MAX
 0x7fffffffffffffffLL

	)

136 
__ölöe
 

137 
	$sbötime_gë£c
(
sbötime_t
 
_sbt
)

140  (
_sbt
 >> 32);

141 
	}
}

143 
__ölöe
 
sbötime_t


144 
	$bâosbt
(c⁄° 
bötime
 
_bt
)

147  (((
sbötime_t
)
_bt
.
£c
 << 32Ë+ (_bt.
‰ac
 >> 32));

148 
	}
}

150 
__ölöe
 
bötime


151 
	$sbâobt
(
sbötime_t
 
_sbt
)

153 
bötime
 
_bt
;

155 
_bt
.
£c
 = 
_sbt
 >> 32;

156 
_bt
.
‰ac
 = 
_sbt
 << 32;

157  (
_bt
);

158 
	}
}

165 
__ölöe
 
öt64_t


166 
	$sbâ⁄s
(
sbötime_t
 
_sbt
)

169  ((1000000000 * 
_sbt
) >> 32);

170 
	}
}

172 
__ölöe
 
sbötime_t


173 
	$n°osbt
(
öt64_t
 
_ns
)

176  ((
_ns
 * (((
uöt64_t
)1 << 63) / 500000000)) >> 32);

177 
	}
}

179 
__ölöe
 
öt64_t


180 
	$sbâous
(
sbötime_t
 
_sbt
)

183  ((1000000 * 
_sbt
) >> 32);

184 
	}
}

186 
__ölöe
 
sbötime_t


187 
	$u°osbt
(
öt64_t
 
_us
)

190  ((
_us
 * (((
uöt64_t
)1 << 63) / 500000)) >> 32);

191 
	}
}

193 
__ölöe
 
öt64_t


194 
	$sbâoms
(
sbötime_t
 
_sbt
)

197  ((1000 * 
_sbt
) >> 32);

198 
	}
}

200 
__ölöe
 
sbötime_t


201 
	$m°osbt
(
öt64_t
 
_ms
)

204  ((
_ms
 * (((
uöt64_t
)1 << 63) / 500)) >> 32);

205 
	}
}

221 
__ölöe
 

222 
	$bötime2time•ec
(c⁄° 
bötime
 *
_bt
, 
time•ec
 *
_ts
)

225 
_ts
->
tv_£c
 = 
_bt
->
£c
;

226 
_ts
->
tv_n£c
 = ((
uöt64_t
)1000000000 *

227 (
uöt32_t
)(
_bt
->
‰ac
 >> 32)) >> 32;

228 
	}
}

230 
__ölöe
 

231 
	$time•ec2bötime
(c⁄° 
time•ec
 *
_ts
, 
bötime
 *
_bt
)

234 
_bt
->
£c
 = 
_ts
->
tv_£c
;

236 
_bt
->
‰ac
 = 
_ts
->
tv_n£c
 * (
uöt64_t
)18446744073LL;

237 
	}
}

239 
__ölöe
 

240 
	$bötime2timevÆ
(c⁄° 
bötime
 *
_bt
, 
timevÆ
 *
_tv
)

243 
_tv
->
tv_£c
 = 
_bt
->
£c
;

244 
_tv
->
tv_u£c
 = ((
uöt64_t
)1000000 * (
uöt32_t
)(
_bt
->
‰ac
 >> 32)) >> 32;

245 
	}
}

247 
__ölöe
 

248 
	$timevÆ2bötime
(c⁄° 
timevÆ
 *
_tv
, 
bötime
 *
_bt
)

251 
_bt
->
£c
 = 
_tv
->
tv_£c
;

253 
_bt
->
‰ac
 = 
_tv
->
tv_u£c
 * (
uöt64_t
)18446744073709LL;

254 
	}
}

256 
__ölöe
 
time•ec


257 
	$sbâŸs
(
sbötime_t
 
_sbt
)

259 
time•ec
 
_ts
;

261 
_ts
.
tv_£c
 = 
_sbt
 >> 32;

262 
_ts
.
tv_n£c
 = 
	`sbâ⁄s
((
uöt32_t
)
_sbt
);

263  (
_ts
);

264 
	}
}

266 
__ölöe
 
sbötime_t


267 
	$t°osbt
(
time•ec
 
_ts
)

270  (((
sbötime_t
)
_ts
.
tv_£c
 << 32Ë+ 
	`n°osbt
(_ts.
tv_n£c
));

271 
	}
}

273 
__ölöe
 
timevÆ


274 
	$sbâŸv
(
sbötime_t
 
_sbt
)

276 
timevÆ
 
_tv
;

278 
_tv
.
tv_£c
 = 
_sbt
 >> 32;

279 
_tv
.
tv_u£c
 = 
	`sbâous
((
uöt32_t
)
_sbt
);

280  (
_tv
);

281 
	}
}

283 
__ölöe
 
sbötime_t


284 
	$tvtosbt
(
timevÆ
 
_tv
)

287  (((
sbötime_t
)
_tv
.
tv_£c
 << 32Ë+ 
	`u°osbt
(_tv.
tv_u£c
));

288 
	}
}

291 #ifde‡
_KERNEL


300 
	#TICKS_2_MSEC
(
t
Ë
	`max
(1, (
uöt32_t
)(
hz
 == 1000) ? \

301 (
t
Ë: (((
uöt64_t
)—Ë* (uöt64_t)1000)/(uöt64_t)
hz
))

	)

302 
	#TICKS_2_USEC
(
t
Ë
	`max
(1, (
uöt32_t
)(
hz
 == 1000) ? \

303 ((
t
Ë* 1000Ë: (((
uöt64_t
)—Ë* (uöt64_t)1000000)/(uöt64_t)
hz
))

	)

304 
	#MSEC_2_TICKS
(
m
Ë
	`max
(1, (
uöt32_t
)((
hz
 == 1000) ? \

305 (
m
Ë: ((
uöt64_t
)(mË* (uöt64_t)
hz
)/(uöt64_t)1000))

	)

306 
	#USEC_2_TICKS
(
u
Ë
	`max
(1, (
uöt32_t
)((
hz
 == 1000) ? \

307 ((
u
Ë/ 1000Ë: ((
uöt64_t
)(uË* (uöt64_t)
hz
)/(uöt64_t)1000000))

	)

311 
	#time•ec˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)

312 
	#time•ecis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)

313 
	#time•eccmp
(
tvp
, 
uvp
, 
cmp
) \

314 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

315 ((
tvp
)->
tv_n£c
 
	`cmp
 (
uvp
)->tv_nsec) : \

316 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

318 
	#time•eˇdd
(
t•
, 
u•
, 
v•
) \

320 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯+ (
u•
)->tv_sec; \

321 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯+ (
u•
)->tv_nsec; \

322 i‡((
v•
)->
tv_n£c
 >= 1000000000L) { \

323 (
v•
)->
tv_£c
++; \

324 (
v•
)->
tv_n£c
 -= 1000000000L; \

326 } 0)

	)

327 
	#time•ecsub
(
t•
, 
u•
, 
v•
) \

329 (
v•
)->
tv_£c
 = (
t•
)->tv_£¯- (
u•
)->tv_sec; \

330 (
v•
)->
tv_n£c
 = (
t•
)->tv_n£¯- (
u•
)->tv_nsec; \

331 i‡((
v•
)->
tv_n£c
 < 0) { \

332 (
v•
)->
tv_£c
--; \

333 (
v•
)->
tv_n£c
 += 1000000000L; \

335 } 0)

	)

337 #ifde‡
_KERNEL


341 
	#timevÆ˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

342 
	#timevÆis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

343 
	#timevÆcmp
(
tvp
, 
uvp
, 
cmp
) \

344 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

345 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

346 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

352 #i‚de‡
_KERNEL


354 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

355 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

356 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

357 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

358 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

359 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

360 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

362 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

363 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

364 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

365 (
vvp
)->
tv_£c
++; \

366 (
vvp
)->
tv_u£c
 -= 1000000; \

368 } 0)

	)

369 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

371 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

372 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

373 i‡((
vvp
)->
tv_u£c
 < 0) { \

374 (
vvp
)->
tv_£c
--; \

375 (
vvp
)->
tv_u£c
 += 1000000; \

377 } 0)

	)

384 
	#ITIMER_REAL
 0

	)

385 
	#ITIMER_VIRTUAL
 1

	)

386 
	#ITIMER_PROF
 2

	)

388 
	sôimîvÆ
 {

389 
timevÆ
 
	mô_öãrvÆ
;

390 
timevÆ
 
	mô_vÆue
;

396 
	s˛ocköfo
 {

397 
	mhz
;

398 
	mtick
;

399 
	m•¨e
;

400 
	m°©hz
;

401 
	m¥ofhz
;

405 #i‚de‡
CLOCK_REALTIME


406 
	#CLOCK_REALTIME
 0

	)

407 
	#CLOCK_VIRTUAL
 1

	)

408 
	#CLOCK_PROF
 2

	)

409 
	#CLOCK_MONOTONIC
 4

	)

410 
	#CLOCK_UPTIME
 5

	)

411 
	#CLOCK_UPTIME_PRECISE
 7

	)

412 
	#CLOCK_UPTIME_FAST
 8

	)

413 
	#CLOCK_REALTIME_PRECISE
 9

	)

414 
	#CLOCK_REALTIME_FAST
 10

	)

415 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

416 
	#CLOCK_MONOTONIC_FAST
 12

	)

417 
	#CLOCK_SECOND
 13

	)

418 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

419 
	#CLOCK_PROCESS_CPUTIME_ID
 15

	)

422 #i‚de‡
TIMER_ABSTIME


423 
	#TIMER_RELTIME
 0x0

	)

424 
	#TIMER_ABSTIME
 0x1

	)

427 #i‡
__BSD_VISIBLE


428 
	#CPUCLOCK_WHICH_PID
 0

	)

429 
	#CPUCLOCK_WHICH_TID
 1

	)

432 #ifde‡
_KERNEL


437 
öôtodr
(
time_t
 
ba£
);

438 
ª£âodr
();

440 vﬁ©ûê
time_t
 
time_£c⁄d
;

441 vﬁ©ûê
time_t
 
time_u±ime
;

442 
bötime
 
tc_tick_bt
;

443 
sbötime_t
 
tc_tick_sbt
;

444 
bötime
 
tick_bt
;

445 
sbötime_t
 
tick_sbt
;

446 
tc_¥e˚xp
;

447 
tc_timïî˚¡age
;

448 
bötime
 
bt_timëhªshﬁd
;

449 
bötime
 
bt_tickthªshﬁd
;

450 
sbötime_t
 
sbt_timëhªshﬁd
;

451 
sbötime_t
 
sbt_tickthªshﬁd
;

453 vﬁ©ûê
πc_gíî©i⁄
;

476 
böu±ime
(
bötime
 *
bt
);

477 
«nou±ime
(
time•ec
 *
t•
);

478 
mi¸ou±ime
(
timevÆ
 *
tvp
);

480 
__ölöe
 
sbötime_t


481 
	$sböu±ime
()

483 
bötime
 
_bt
;

485 
	`böu±ime
(&
_bt
);

486  (
	`bâosbt
(
_bt
));

487 
	}
}

489 
bötime
(bötimê*
bt
);

490 
«nŸime
(
time•ec
 *
t•
);

491 
mi¸Ÿime
(
timevÆ
 *
tvp
);

493 
gëböu±ime
(
bötime
 *
bt
);

494 
gë«nou±ime
(
time•ec
 *
t•
);

495 
gëmi¸ou±ime
(
timevÆ
 *
tvp
);

497 
__ölöe
 
sbötime_t


498 
	$gësböu±ime
()

500 
bötime
 
_bt
;

502 
	`gëböu±ime
(&
_bt
);

503  (
	`bâosbt
(
_bt
));

504 
	}
}

506 
gëbötime
(
bötime
 *
bt
);

507 
gë«nŸime
(
time•ec
 *
t•
);

508 
gëmi¸Ÿime
(
timevÆ
 *
tvp
);

510 
gëboŸtime
(
timevÆ
 *
boŸtime
);

511 
gëboŸtimebö
(
bötime
 *
boŸtimebö
);

514 
ôimîde¸
(
ôimîvÆ
 *
ôp
, 
u£c
);

515 
ôimîfix
(
timevÆ
 *
tv
);

516 
µ§©echeck
(
timevÆ
 *, *, );

517 
øãcheck
(
timevÆ
 *, const timeval *);

518 
timevÆadd
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

519 
timevÆsub
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

520 
tvtohz
(
timevÆ
 *
tv
);

522 
	#TC_DEFAULTPERC
 5

	)

524 
	#BT2FREQ
(
bt
) \

525 (((
uöt64_t
)0x8000000000000000 + ((
bt
)->
‰ac
 >> 2)) / \

526 ((
bt
)->
‰ac
 >> 1))

	)

528 
	#SBT2FREQ
(
sbt
Ë((
SBT_1S
 + ((sbtË>> 1)Ë/ (sbt))

	)

530 
	#FREQ2BT
(
‰eq
, 
bt
) \

532 (
bt
)->
£c
 = 0; \

533 (
bt
)->
‰ac
 = ((
uöt64_t
)0x8000000000000000 / (
‰eq
)) << 1; \

534 }

	)

536 
	#TIMESEL
(
sbt
, 
sbt2
) \

537 (((
sbt2
Ë>
sbt_timëhªshﬁd
) ? \

538 ((*(
sbt
Ë
	`gësböu±ime
()), 1Ë: ((*(sbtË
	`sböu±ime
()), 0))

	)

541 
	~<time.h
>

543 
	~<sys/cdefs.h
>

544 
	~<sys/£À˘.h
>

546 
__BEGIN_DECLS


547 
£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

548 
utimes
(c⁄° *, c⁄° 
timevÆ
 *);

550 #i‡
__BSD_VISIBLE


551 
adjtime
(c⁄° 
timevÆ
 *, timeval *);

552 
˛ock_gë˝u˛ockid2
(
id_t
, , 
˛ockid_t
 *);

553 
futimes
(, c⁄° 
timevÆ
 *);

554 
futimeßt
(, c⁄° *, c⁄° 
timevÆ
 [2]);

555 
lutimes
(c⁄° *, c⁄° 
timevÆ
 *);

556 
£âimeofday
(c⁄° 
timevÆ
 *, c⁄° 
timez⁄e
 *);

559 #i‡
__XSI_VISIBLE


560 
gëôimî
(, 
ôimîvÆ
 *);

561 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

564 
	g__END_DECLS


	@/usr/include/sys/timespec.h

36 #i‚de‡
_SYS_TIMESPEC_H_


37 
	#_SYS_TIMESPEC_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<sys/_time•ec.h
>

42 #i‡
__BSD_VISIBLE


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) \

45 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

46 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

47 } 0)

	)

48 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) \

50 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

51 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

52 } 0)

	)

60 
	sôimî•ec
 {

61 
time•ec
 
	mô_öãrvÆ
;

62 
time•ec
 
	mô_vÆue
;

	@/usr/include/sys/ucontext.h

33 #i‚de‡
_SYS_UCONTEXT_H_


34 
	#_SYS_UCONTEXT_H_


	)

36 
	~<sys/sig«l.h
>

37 
	~<machöe/uc⁄ãxt.h
>

38 
	~<sys/_uc⁄ãxt.h
>

40 
	#UCF_SWAPPED
 0x00000001

	)

42 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_FREEBSD4
)

43 #i‡
deföed
(
__i386__
)

44 
	suc⁄ãxt4
 {

45 
sig£t_t
 
	muc_sigmask
;

46 
mc⁄ãxt4
 
	muc_mc⁄ãxt
;

47 
uc⁄ãxt4
 *
	muc_lök
;

48 
°ack_t
 
	muc_°ack
;

49 
	m__•¨e__
[8];

52 
	#uc⁄ãxt4
 
uc⁄ãxt


	)

56 #i‚de‡
_KERNEL


58 
__BEGIN_DECLS


60 
	$gëc⁄ãxt
(
uc⁄ãxt_t
 *Ë
__ªtu∫s_twi˚
;

61 
uc⁄ãxt_t
 *
	`gëc⁄ãxtx
();

62 
	`£tc⁄ãxt
(c⁄° 
uc⁄ãxt_t
 *);

63 
	`makec⁄ãxt
(
uc⁄ãxt_t
 *, (*)(), , ...);

64 
	`sig«lc⁄ãxt
(
uc⁄ãxt_t
 *, , 
__sigh™dÀr_t
 *);

65 
	`sw≠c⁄ãxt
(
uc⁄ãxt_t
 *, const ucontext_t *);

67 #i‡
__BSD_VISIBLE


68 
	`__gëc⁄ãxtx_size
();

69 
	$__fûlc⁄ãxtx
(*
˘x
Ë
__ªtu∫s_twi˚
;

70 
	`__fûlc⁄ãxtx2
(*
˘x
);

73 
__END_DECLS


77 
thªad
;

84 
	#GET_MC_CLEAR_RET
 1

	)

87 
	`gë_mc⁄ãxt
(
thªad
 *, 
mc⁄ãxt_t
 *, );

88 
	`£t_mc⁄ãxt
(
thªad
 *, 
mc⁄ãxt_t
 *);

	@/usr/include/sys/ucred.h

35 #i‚de‡
_SYS_UCRED_H_


36 
	#_SYS_UCRED_H_


	)

38 
	~<bsm/audô.h
>

40 
	glogö˛ass
;

42 
	#XU_NGROUPS
 16

	)

50 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_UCRED
)

51 
	su¸ed
 {

52 
u_öt
 
	m¸_ªf
;

53 
	#¸_°¨tc›y
 
¸_uid


	)

54 
uid_t
 
	m¸_uid
;

55 
uid_t
 
	m¸_ruid
;

56 
uid_t
 
	m¸_svuid
;

57 
	m¸_ngroups
;

58 
gid_t
 
	m¸_rgid
;

59 
gid_t
 
	m¸_svgid
;

60 
uidöfo
 *
	m¸_uidöfo
;

61 
uidöfo
 *
	m¸_ruidöfo
;

62 
¥is⁄
 *
	m¸_¥is⁄
;

63 
logö˛ass
 *
	m¸_logö˛ass
;

64 
u_öt
 
	m¸_Êags
;

65 *
	m¸_p•¨e2
[2];

66 
	#¸_ídc›y
 
¸_œbñ


	)

67 
œbñ
 *
	m¸_œbñ
;

68 
audôöfo_addr
 
	m¸_audô
;

69 
gid_t
 *
	m¸_groups
;

70 
	m¸_agroups
;

71 
gid_t
 
	m¸_smÆlgroups
[
XU_NGROUPS
];

73 
	#NOCRED
 ((
u¸ed
 *)0Ë

	)

74 
	#FSCRED
 ((
u¸ed
 *)-1Ë

	)

80 
	#CRED_FLAG_CAPMODE
 0x00000001

	)

85 
	sxu¸ed
 {

86 
u_öt
 
	m¸_vîsi⁄
;

87 
uid_t
 
	m¸_uid
;

88 
	m¸_ngroups
;

89 
gid_t
 
	m¸_groups
[
XU_NGROUPS
];

90 *
	m_¸_unu£d1
;

92 
	#XUCRED_VERSION
 0

	)

95 
	#¸_gid
 
¸_groups
[0]

	)

97 #ifde‡
_KERNEL


98 
	g¥oc
;

99 
	gthªad
;

101 
ch™ge_egid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
egid
);

102 
ch™ge_euid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
euù
);

103 
ch™ge_rgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
rgid
);

104 
ch™ge_ruid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
ruù
);

105 
ch™ge_svgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
svgid
);

106 
ch™ge_svuid
(
u¸ed
 *
√w¸ed
, 
uid_t
 
svuid
);

107 
¸c›y
(
u¸ed
 *
de°
, u¸ed *
§c
);

108 
u¸ed
 *
¸c›yß„
(
¥oc
 *
p
, u¸ed *
¸
);

109 
u¸ed
 *
¸dup
(u¸ed *
¸
);

110 
¸exãnd
(
u¸ed
 *
¸
, 
n
);

111 
¥oc_£t_¸ed_öô
(
¥oc
 *
p
, 
u¸ed
 *
¸
);

112 
u¸ed
 *
¥oc_£t_¸ed
(
¥oc
 *
p
, u¸ed *
¸
);

113 
¸‰ì
(
u¸ed
 *
¸
);

114 
u¸ed
 *
¸gë
();

115 
u¸ed
 *
¸hﬁd
(u¸ed *
¸
);

116 
¸u2x
(
u¸ed
 *
¸
, 
xu¸ed
 *
x¸
);

117 
¸£tgroups
(
u¸ed
 *
¸
, 
n
, 
gid_t
 *
groups
);

118 
groupmembî
(
gid_t
 
gid
, 
u¸ed
 *
¸ed
);

	@/usr/include/sys/unistd.h

35 #i‚de‡
_SYS_UNISTD_H_


36 
	#_SYS_UNISTD_H_


	)

38 
	~<sys/cdefs.h
>

54 
	#_POSIX_ADVISORY_INFO
 200112L

	)

55 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

56 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

57 
	#_POSIX_CLOCK_SELECTION
 (-1)

	)

58 
	#_POSIX_CPUTIME
 200112L

	)

59 
	#_POSIX_FSYNC
 200112L

	)

60 
	#_POSIX_IPV6
 0

	)

61 
	#_POSIX_JOB_CONTROL
 1

	)

62 
	#_POSIX_MAPPED_FILES
 200112L

	)

63 
	#_POSIX_MEMLOCK
 (-1)

	)

64 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

65 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

66 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

67 
	#_POSIX_MONOTONIC_CLOCK
 200112L

	)

68 
	#_POSIX_NO_TRUNC
 1

	)

69 
	#_POSIX_PRIORITIZED_IO
 (-1)

	)

70 
	#_POSIX_PRIORITY_SCHEDULING
 0

	)

71 
	#_POSIX_RAW_SOCKETS
 200112L

	)

72 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

73 
	#_POSIX_SEMAPHORES
 200112L

	)

74 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

75 
	#_POSIX_SPORADIC_SERVER
 (-1)

	)

76 
	#_POSIX_SYNCHRONIZED_IO
 (-1)

	)

77 
	#_POSIX_TIMEOUTS
 200112L

	)

78 
	#_POSIX_TIMERS
 200112L

	)

79 
	#_POSIX_TYPED_MEMORY_OBJECTS
 (-1)

	)

80 
	#_POSIX_VDISABLE
 0xff

	)

82 #i‡
__XSI_VISIBLE


83 
	#_XOPEN_SHM
 1

	)

84 
	#_XOPEN_STREAMS
 (-1)

	)

94 #ifdef 
_NOT_AVAILABLE


95 
	#_POSIX_SAVED_IDS
 1

	)

99 
	#_POSIX_VERSION
 200112L

	)

102 
	#F_OK
 0

	)

103 
	#X_OK
 0x01

	)

104 
	#W_OK
 0x02

	)

105 
	#R_OK
 0x04

	)

108 #i‚de‡
SEEK_SET


109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

113 #i‡
__BSD_VISIBLE


114 
	#SEEK_DATA
 3

	)

115 
	#SEEK_HOLE
 4

	)

118 #i‚de‡
_POSIX_SOURCE


120 
	#L_SET
 
SEEK_SET


	)

121 
	#L_INCR
 
SEEK_CUR


	)

122 
	#L_XTND
 
SEEK_END


	)

126 
	#_PC_LINK_MAX
 1

	)

127 
	#_PC_MAX_CANON
 2

	)

128 
	#_PC_MAX_INPUT
 3

	)

129 
	#_PC_NAME_MAX
 4

	)

130 
	#_PC_PATH_MAX
 5

	)

131 
	#_PC_PIPE_BUF
 6

	)

132 
	#_PC_CHOWN_RESTRICTED
 7

	)

133 
	#_PC_NO_TRUNC
 8

	)

134 
	#_PC_VDISABLE
 9

	)

136 #i‡
__POSIX_VISIBLE
 >= 199309

137 
	#_PC_ASYNC_IO
 53

	)

138 
	#_PC_PRIO_IO
 54

	)

139 
	#_PC_SYNC_IO
 55

	)

142 #i‡
__POSIX_VISIBLE
 >= 200112

143 
	#_PC_ALLOC_SIZE_MIN
 10

	)

144 
	#_PC_FILESIZEBITS
 12

	)

145 
	#_PC_REC_INCR_XFER_SIZE
 14

	)

146 
	#_PC_REC_MAX_XFER_SIZE
 15

	)

147 
	#_PC_REC_MIN_XFER_SIZE
 16

	)

148 
	#_PC_REC_XFER_ALIGN
 17

	)

149 
	#_PC_SYMLINK_MAX
 18

	)

152 #i‡
__BSD_VISIBLE


153 
	#_PC_ACL_EXTENDED
 59

	)

154 
	#_PC_ACL_PATH_MAX
 60

	)

155 
	#_PC_CAP_PRESENT
 61

	)

156 
	#_PC_INF_PRESENT
 62

	)

157 
	#_PC_MAC_PRESENT
 63

	)

158 
	#_PC_ACL_NFS4
 64

	)

162 
	#_PC_MIN_HOLE_SIZE
 21

	)

164 #i‡
__BSD_VISIBLE


170 
	#RFNAMEG
 (1<<0Ë

	)

171 
	#RFENVG
 (1<<1Ë

	)

172 
	#RFFDG
 (1<<2Ë

	)

173 
	#RFNOTEG
 (1<<3Ë

	)

174 
	#RFPROC
 (1<<4Ë

	)

175 
	#RFMEM
 (1<<5Ë

	)

176 
	#RFNOWAIT
 (1<<6Ë

	)

177 
	#RFCNAMEG
 (1<<10Ë

	)

178 
	#RFCENVG
 (1<<11Ë

	)

179 
	#RFCFDG
 (1<<12Ë

	)

180 
	#RFTHREAD
 (1<<13Ë

	)

181 
	#RFSIGSHARE
 (1<<14Ë

	)

182 
	#RFLINUXTHPN
 (1<<16Ë

	)

183 
	#RFSTOPPED
 (1<<17Ë

	)

184 
	#RFHIGHPID
 (1<<18Ë

	)

185 
	#RFTSIGZMB
 (1<<19Ë

	)

186 
	#RFTSIGSHIFT
 20

	)

187 
	#RFTSIGMASK
 0xFF

	)

188 
	#RFTSIGNUM
(
Êags
Ë(((ÊagsË>> 
RFTSIGSHIFT
Ë& 
RFTSIGMASK
)

	)

189 
	#RFTSIGFLAGS
(
signum
Ë((signumË<< 
RFTSIGSHIFT
)

	)

190 
	#RFPROCDESC
 (1<<28Ë

	)

191 
	#RFPPWAIT
 (1<<31Ë

	)

192 
	#RFFLAGS
 (
RFFDG
 | 
RFPROC
 | 
RFMEM
 | 
RFNOWAIT
 | 
RFCFDG
 | \

193 
RFTHREAD
 | 
RFSIGSHARE
 | 
RFLINUXTHPN
 | 
RFSTOPPED
 | 
RFHIGHPID
 | 
RFTSIGZMB
 | \

194 
RFPROCDESC
 | 
RFPPWAIT
)

	)

195 
	#RFKERNELONLY
 (
RFSTOPPED
 | 
RFHIGHPID
 | 
RFPPWAIT
 | 
RFPROCDESC
)

	)

	@/usr/include/sys/wait.h

35 #i‚de‡
_SYS_WAIT_H_


36 
	#_SYS_WAIT_H_


	)

38 
	~<sys/cdefs.h
>

49 #i‡
__BSD_VISIBLE


50 
	#WCOREFLAG
 0200

	)

52 
	#_W_INT
(
i
Ë(i)

	)

54 
	#_WSTATUS
(
x
Ë(
	`_W_INT
(xË& 0177)

	)

55 
	#_WSTOPPED
 0177

	)

56 
	#WIFSTOPPED
(
x
Ë(
	`_WSTATUS
(xË=
_WSTOPPED
)

	)

57 
	#WSTOPSIG
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

58 
	#WIFSIGNALED
(
x
Ë(
	`_WSTATUS
(xË!
_WSTOPPED
 && _WSTATUS(xË!0 && (xË!0x13)

	)

59 
	#WTERMSIG
(
x
Ë(
	`_WSTATUS
(x))

	)

60 
	#WIFEXITED
(
x
Ë(
	`_WSTATUS
(xË=0)

	)

61 
	#WEXITSTATUS
(
x
Ë(
	`_W_INT
(xË>> 8)

	)

62 
	#WIFCONTINUED
(
x
Ë(x =0x13Ë

	)

63 #i‡
__BSD_VISIBLE


64 
	#WCOREDUMP
(
x
Ë(
	`_W_INT
(xË& 
WCOREFLAG
)

	)

66 
	#W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

67 
	#W_STOPCODE
(
sig
Ë((sigË<< 8 | 
_WSTOPPED
)

	)

80 
	#WNOHANG
 1

	)

81 
	#WUNTRACED
 2

	)

82 
	#WSTOPPED
 
WUNTRACED


	)

83 
	#WCONTINUED
 4

	)

84 
	#WNOWAIT
 8

	)

85 
	#WEXITED
 16

	)

86 
	#WTRAPPED
 32

	)

89 #i‡
__BSD_VISIBLE


90 
	#WLINUXCLONE
 0x80000000

	)

93 #i‚de‡
_IDTYPE_T_DECLARED


95 #i‡
__BSD_VISIBLE


96 
	tidty≥


109 
	gP_PID
,

110 
	gP_PPID
,

111 
	gP_PGID
,

112 
	gP_SID
,

113 
	gP_CID
,

114 
	gP_UID
,

115 
	gP_GID
,

116 
	gP_ALL
,

117 
	gP_LWPID
,

118 
	gP_TASKID
,

119 
	gP_PROJID
,

120 
	gP_POOLID
,

121 
	gP_JAILID
,

122 
	gP_CTID
,

123 
	gP_CPUID
,

124 
	gP_PSETID


125 } 
	tidty≥_t
;

127 #i‡
__BSD_VISIBLE


128 
	#P_ZONEID
 
P_JAILID


	)

130 
	#_IDTYPE_T_DECLARED


	)

138 #i‡
__BSD_VISIBLE


139 
	#WAIT_ANY
 (-1Ë

	)

140 
	#WAIT_MYPGRP
 0

	)

143 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_KW_EXITCODE
)

150 
	#KW_EXITCODE
(
ªt
, 
sig
Ë
	`W_EXITCODE
(‘ëË& 0xff, (sig))

	)

154 #i‚de‡
_KERNEL


156 
	~<sys/ty≥s.h
>

158 
__BEGIN_DECLS


159 
	g__sigöfo
;

160 
pid_t
 
waô
(*);

161 
pid_t
 
waôpid
(pid_t, *, );

162 #i‡
__POSIX_VISIBLE
 >= 200112

163 
waôid
(
idty≥_t
, 
id_t
, 
__sigöfo
 *, );

165 #i‡
__BSD_VISIBLE


166 
	grußge
;

167 
	g__wrußge
;

168 
pid_t
 
waô3
(*, , 
rußge
 *);

169 
pid_t
 
waô4
’id_t, *, , 
rußge
 *);

170 
pid_t
 
waô6
(
idty≥_t
, 
id_t
, *, , 
__wrußge
 *,

171 
__sigöfo
 *);

173 
	g__END_DECLS


	@/usr/include/machine/_stdint.h

6 
	~<x86/_°döt.h
>

	@/usr/include/machine/counter.h

31 #i‚de‡
__MACHINE_COUNTER_H__


32 
	#__MACHINE_COUNTER_H__


	)

34 
	~<sys/p˝u.h
>

36 
p˝u
 
__p˝u
[];

38 
	#EARLY_COUNTER
 &
__p˝u
[0].
pc_óæy_dummy_cou¡î


	)

40 
	#cou¡î_íãr
(Ëdÿ{} 0)

	)

41 
	#cou¡î_exô
(Ëdÿ{} 0)

	)

43 #ifde‡
IN_SUBR_COUNTER_C


44 
ölöe
 
uöt64_t


45 
	$cou¡î_u64_ªad_⁄e
(
uöt64_t
 *
p
, 
˝u
)

48  (*(
uöt64_t
 *)((*)
p
 + 
UMA_PCPU_ALLOC_SIZE
 * 
˝u
));

49 
	}
}

51 
ölöe
 
uöt64_t


52 
	$cou¡î_u64_„tch_ölöe
(
uöt64_t
 *
p
)

54 
uöt64_t
 
r
;

55 
i
;

57 
r
 = 0;

58 
	`CPU_FOREACH
(
i
)

59 
r
 +
	`cou¡î_u64_ªad_⁄e
((
uöt64_t
 *)
p
, 
i
);

61  (
r
);

62 
	}
}

65 
	$cou¡î_u64_zîo_⁄e_˝u
(*
¨g
)

68 *((
uöt64_t
 *)((*)
¨g
 + 
UMA_PCPU_ALLOC_SIZE
 *

69 
	`PCPU_GET
(
˝uid
))) = 0;

70 
	}
}

72 
ölöe
 

73 
	$cou¡î_u64_zîo_ölöe
(
cou¡î_u64_t
 
c
)

76 
	`smp_ªndezvous
(
smp_no_ªndezvous_b¨rõr
, 
cou¡î_u64_zîo_⁄e_˝u
,

77 
smp_no_ªndezvous_b¨rõr
, 
c
);

78 
	}
}

81 
	#cou¡î_u64_add_¥Ÿe˘ed
(
c
, 
i
Ë
	`cou¡î_u64_add
(c, i)

	)

83 
ölöe
 

84 
	$cou¡î_u64_add
(
cou¡î_u64_t
 
c
, 
öt64_t
 
öc
)

87 
__asm
 
	`__vﬁ©ûe
("addq\t%1,%%gs:(%0)"

89 : "r" ((*)
c
 - (*)&
__p˝u
[0]), "ri" (
öc
)

91 
	}
}

	@/usr/include/machine/runq.h

31 #i‚def 
_MACHINE_RUNQ_H_


32 
	#_MACHINE_RUNQ_H_


	)

34 
	#RQB_LEN
 (1Ë

	)

35 
	#RQB_L2BPW
 (6Ë

	)

36 
	#RQB_BPW
 (1<<
RQB_L2BPW
Ë

	)

38 
	#RQB_BIT
(
¥i
Ë(1u»<< (’riË& (
RQB_BPW
 - 1)))

	)

39 
	#RQB_WORD
(
¥i
Ë(’riË>> 
RQB_L2BPW
)

	)

41 
	#RQB_FFS
(
w‹d
Ë(
	`bsfq
(w‹d))

	)

46 
u_öt64_t
 
	trqb_w‹d_t
;

	@/usr/include/machine/signal.h

6 
	~<x86/sig«l.h
>

	@/usr/include/machine/ucontext.h

6 
	~<x86/uc⁄ãxt.h
>

	@/usr/include/sys/_lockmgr.h

33 #i‚de‡
_SYS__LOCKMGR_H_


34 
	#_SYS__LOCKMGR_H_


	)

36 #ifde‡
DEBUG_LOCKS


37 
	~<sys/_°ack.h
>

40 
	slock
 {

41 
lock_obje˘
 
	mlock_obje˘
;

42 vﬁ©ûê
uöçå_t
 
	mlk_lock
;

43 
u_öt
 
	mlk_ex¶pÁû
;

44 
	mlk_timo
;

45 
	mlk_¥i
;

46 #ifde‡
DEBUG_LOCKS


47 
°ack
 
	mlk_°ack
;

	@/usr/include/sys/_timeval.h

31 #i‚de‡
_SYS__TIMEVAL_H_


32 
	#_SYS__TIMEVAL_H_


	)

34 
	~<sys/_ty≥s.h
>

36 #i‚de‡
_SUSECONDS_T_DECLARED


37 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

38 
	#_SUSECONDS_T_DECLARED


	)

41 #i‚de‡
_TIME_T_DECLARED


42 
__time_t
 
	ttime_t
;

43 
	#_TIME_T_DECLARED


	)

49 
	stimevÆ
 {

50 
time_t
 
	mtv_£c
;

51 
su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sys/_ucontext.h

33 #i‚de‡
_SYS__UCONTEXT_H_


34 
	#_SYS__UCONTEXT_H_


	)

36 
	s__uc⁄ãxt
 {

45 
__sig£t_t
 
	muc_sigmask
;

46 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

48 
__uc⁄ãxt
 *
	muc_lök
;

49 
__°ack_t
 
	muc_°ack
;

50 
	muc_Êags
;

51 
	m__•¨e__
[4];

52 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/bitset.h

34 #i‚de‡
_SYS_BITSET_H_


35 
	#_SYS_BITSET_H_


	)

37 
	#__bô£t_mask
(
_s
, 
n
) \

38 (1L << ((
	`__bô£t_w‹ds
((
_s
)) == 1) ? \

39 (
__size_t
)(
n
Ë: (“Ë% 
_BITSET_BITS
)))

	)

41 
	#__bô£t_w‹d
(
_s
, 
n
) \

42 ((
	`__bô£t_w‹ds
((
_s
)Ë=1Ë? 0 : ((
n
Ë/ 
_BITSET_BITS
))

	)

44 
	#BIT_CLR
(
_s
, 
n
, 
p
) \

45 ((
p
)->
__bôs
[
	`__bô£t_w‹d
(
_s
, 
n
)] &~
	`__bô£t_mask
((_s), (n)))

	)

47 
	#BIT_COPY
(
_s
, 
f
, 
t
Ë()(*—Ë*(f))

	)

49 
	#BIT_ISSET
(
_s
, 
n
, 
p
) \

50 ((((
p
)->
__bôs
[
	`__bô£t_w‹d
(
_s
, 
n
)] & 
	`__bô£t_mask
((_s), (n))Ë!0))

	)

52 
	#BIT_SET
(
_s
, 
n
, 
p
) \

53 ((
p
)->
__bôs
[
	`__bô£t_w‹d
(
_s
, 
n
)] |
	`__bô£t_mask
((_s), (n)))

	)

55 
	#BIT_ZERO
(
_s
, 
p
) do { \

56 
__size_t
 
__i
; \

57 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

58 (
p
)->
__bôs
[
__i
] = 0L; \

59 } 0)

	)

61 
	#BIT_FILL
(
_s
, 
p
) do { \

62 
__size_t
 
__i
; \

63 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

64 (
p
)->
__bôs
[
__i
] = -1L; \

65 } 0)

	)

67 
	#BIT_SETOF
(
_s
, 
n
, 
p
) do { \

68 
	`BIT_ZERO
(
_s
, 
p
); \

69 (
p
)->
__bôs
[
	`__bô£t_w‹d
(
_s
, 
n
)] = 
	`__bô£t_mask
((_s), (n)); \

70 } 0)

	)

73 
	#BIT_EMPTY
(
_s
, 
p
Ë
	`__exãnsi⁄__
 ({ \

74 
__size_t
 
__i
; \

75 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

76 i‡((
p
)->
__bôs
[
__i
]) \

78 
__i
 =
	`__bô£t_w‹ds
((
_s
)); \

79 })

	)

82 
	#BIT_ISFULLSET
(
_s
, 
p
Ë
	`__exãnsi⁄__
 ({ \

83 
__size_t
 
__i
; \

84 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

85 i‡((
p
)->
__bôs
[
__i
] != ()-1) \

87 
__i
 =
	`__bô£t_w‹ds
((
_s
)); \

88 })

	)

91 
	#BIT_SUBSET
(
_s
, 
p
, 
c
Ë
	`__exãnsi⁄__
 ({ \

92 
__size_t
 
__i
; \

93 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

94 i‡(((
c
)->
__bôs
[
__i
] & \

95 (
p
)->
__bôs
[
__i
]) != \

96 (
c
)->
__bôs
[
__i
]) \

98 
__i
 =
	`__bô£t_w‹ds
((
_s
)); \

99 })

	)

102 
	#BIT_OVERLAP
(
_s
, 
p
, 
c
Ë
	`__exãnsi⁄__
 ({ \

103 
__size_t
 
__i
; \

104 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

105 i‡(((
c
)->
__bôs
[
__i
] & \

106 (
p
)->
__bôs
[
__i
]) != 0) \

108 
__i
 !
	`__bô£t_w‹ds
((
_s
)); \

109 })

	)

112 
	#BIT_CMP
(
_s
, 
p
, 
c
Ë
	`__exãnsi⁄__
 ({ \

113 
__size_t
 
__i
; \

114 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

115 i‡(((
c
)->
__bôs
[
__i
] != \

116 (
p
)->
__bôs
[
__i
])) \

118 
__i
 !
	`__bô£t_w‹ds
((
_s
)); \

119 })

	)

121 
	#BIT_OR
(
_s
, 
d
, 
s
) do { \

122 
__size_t
 
__i
; \

123 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

124 (
d
)->
__bôs
[
__i
] |(
s
)->__bits[__i]; \

125 } 0)

	)

127 
	#BIT_OR2
(
_s
, 
d
, 
s1
, 
s2
) do { \

128 
__size_t
 
__i
; \

129 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

130 (
d
)->
__bôs
[
__i
] = (
s1
)->__bôs[__i] | (
s2
)->__bits[__i];\

131 } 0)

	)

133 
	#BIT_AND
(
_s
, 
d
, 
s
) do { \

134 
__size_t
 
__i
; \

135 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

136 (
d
)->
__bôs
[
__i
] &(
s
)->__bits[__i]; \

137 } 0)

	)

139 
	#BIT_AND2
(
_s
, 
d
, 
s1
, 
s2
) do { \

140 
__size_t
 
__i
; \

141 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

142 (
d
)->
__bôs
[
__i
] = (
s1
)->__bôs[__i] & (
s2
)->__bits[__i];\

143 } 0)

	)

145 
	#BIT_NAND
(
_s
, 
d
, 
s
) do { \

146 
__size_t
 
__i
; \

147 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

148 (
d
)->
__bôs
[
__i
] &~(
s
)->__bits[__i]; \

149 } 0)

	)

151 
	#BIT_NAND2
(
_s
, 
d
, 
s1
, 
s2
) do { \

152 
__size_t
 
__i
; \

153 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

154 (
d
)->
__bôs
[
__i
] = (
s1
)->__bôs[__i] & ~(
s2
)->__bits[__i];\

155 } 0)

	)

157 
	#BIT_XOR
(
_s
, 
d
, 
s
) do { \

158 
__size_t
 
__i
; \

159 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

160 (
d
)->
__bôs
[
__i
] ^(
s
)->__bits[__i]; \

161 } 0)

	)

163 
	#BIT_XOR2
(
_s
, 
d
, 
s1
, 
s2
) do { \

164 
__size_t
 
__i
; \

165 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

166 (
d
)->
__bôs
[
__i
] = (
s1
)->__bôs[__i] ^ (
s2
)->__bits[__i];\

167 } 0)

	)

169 
	#BIT_CLR_ATOMIC
(
_s
, 
n
, 
p
) \

170 
	`©omic_˛ór_l⁄g
(&(
p
)->
__bôs
[
	`__bô£t_w‹d
(
_s
, 
n
)], \

171 
	`__bô£t_mask
((
_s
), 
n
))

	)

173 
	#BIT_SET_ATOMIC
(
_s
, 
n
, 
p
) \

174 
	`©omic_£t_l⁄g
(&(
p
)->
__bôs
[
	`__bô£t_w‹d
(
_s
, 
n
)], \

175 
	`__bô£t_mask
((
_s
), 
n
))

	)

177 
	#BIT_SET_ATOMIC_ACQ
(
_s
, 
n
, 
p
) \

178 
	`©omic_£t_acq_l⁄g
(&(
p
)->
__bôs
[
	`__bô£t_w‹d
(
_s
, 
n
)], \

179 
	`__bô£t_mask
((
_s
), 
n
))

	)

182 
	#BIT_AND_ATOMIC
(
_s
, 
d
, 
s
) do { \

183 
__size_t
 
__i
; \

184 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

185 
	`©omic_˛ór_l⁄g
(&(
d
)->
__bôs
[
__i
], \

186 ~(
s
)->
__bôs
[
__i
]); \

187 } 0)

	)

189 
	#BIT_OR_ATOMIC
(
_s
, 
d
, 
s
) do { \

190 
__size_t
 
__i
; \

191 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

192 
	`©omic_£t_l⁄g
(&(
d
)->
__bôs
[
__i
], \

193 (
s
)->
__bôs
[
__i
]); \

194 } 0)

	)

196 
	#BIT_COPY_STORE_REL
(
_s
, 
f
, 
t
) do { \

197 
__size_t
 
__i
; \

198 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

199 
	`©omic_°‹e_ªl_l⁄g
(&(
t
)->
__bôs
[
__i
], \

200 (
f
)->
__bôs
[
__i
]); \

201 } 0)

	)

203 
	#BIT_FFS
(
_s
, 
p
Ë
	`__exãnsi⁄__
 ({ \

204 
__size_t
 
__i
; \

205 
__bô
; \

207 
__bô
 = 0; \

208 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) { \

209 i‡((
p
)->
__bôs
[
__i
] != 0) { \

210 
__bô
 = 
	`ff¶
((
p
)->
__bôs
[
__i
]); \

211 
__bô
 +
__i
 * 
_BITSET_BITS
; \

215 
__bô
; \

216 })

	)

218 
	#BIT_FLS
(
_s
, 
p
Ë
	`__exãnsi⁄__
 ({ \

219 
__size_t
 
__i
; \

220 
__bô
; \

222 
__bô
 = 0; \

223 
__i
 = 
	`__bô£t_w‹ds
((
_s
)); __i > 0; __i--) { \

224 i‡((
p
)->
__bôs
[
__i
 - 1] != 0) { \

225 
__bô
 = 
	`Ê¶
((
p
)->
__bôs
[
__i
 - 1]); \

226 
__bô
 +(
__i
 - 1Ë* 
_BITSET_BITS
; \

230 
__bô
; \

231 })

	)

233 
	#BIT_COUNT
(
_s
, 
p
Ë
	`__exãnsi⁄__
 ({ \

234 
__size_t
 
__i
; \

235 
__cou¡
; \

237 
__cou¡
 = 0; \

238 
__i
 = 0; __ò< 
	`__bô£t_w‹ds
((
_s
)); __i++) \

239 
__cou¡
 +
	`__bôcou¡l
((
p
)->
__bôs
[
__i
]); \

240 
__cou¡
; \

241 })

	)

243 
	#BITSET_T_INITIALIZER
(
x
) \

244 { .
__bôs
 = { 
x
 } }

	)

246 
	#BITSET_FSET
(
n
) \

247 [ 0 ... ((
n
Ë- 1Ë] = (-1L)

	)

252 
	#BITSET_ALLOC
(
_s
, 
mt
, 
mf
) \

253 
	`mÆloc
(
	`__bô£t_w‹ds
(
_s
Ë* (), 
mt
, (
mf
))

	)

	@/usr/include/sys/epoch_private.h

30 #i‚de‡
_SYS_EPOCH_PRIVATE_H_


31 
	#_SYS_EPOCH_PRIVATE_H_


	)

32 #i‚de‡
_KERNEL


35 
	~<ck_ïoch.h
>

36 
	~<sys/kpûôe.h
>

38 
	~<sys/muãx.h
>

40 
ïoch_adju°_¥io
(
thªad
 *
td
, 
u_ch¨
 
¥io
);

41 #i‚de‡
_SYS_SYSTM_H_


42 
¸ôiˇl_exô_¥ìm±
();

45 #ifde‡
__amd64__


46 
	#EPOCH_ALIGN
 
CACHE_LINE_SIZE
*2

	)

48 
	#EPOCH_ALIGN
 
CACHE_LINE_SIZE


	)

54 
__ölöe
 

55 
	$¸ôiˇl_íãr_ß
(*
td¨g
)

57 
thªad_lôe
 *
td
;

59 
td
 = 
td¨g
;

60 
td
->
td_¸ô√°
++;

61 
	`__compûî_memb¨
();

62 
	}
}

64 
__ölöe
 

65 
	$¸ôiˇl_exô_ß
(*
td¨g
)

67 
thªad_lôe
 *
td
;

69 
td
 = 
td¨g
;

70 
	`MPASS
(
td
->
td_¸ô√°
 > 0);

71 
	`__compûî_memb¨
();

72 
td
->
td_¸ô√°
--;

73 
	`__compûî_memb¨
();

74 i‡(
	`__¥edi˘_Ál£
(
td
->
td_owïªem±
 != 0))

75 
	`¸ôiˇl_exô_¥ìm±
();

76 
	}
}

78 
	sïoch_thªad
 {

79 #ifde‡
EPOCH_TRACKER_DEBUG


80 
uöt64_t
 
	më_magic_¥e
;

82 
TAILQ_ENTRY
(
ïoch_thªad
Ë
	më_lök
;

83 
thªad
 *
	më_td
;

84 
ck_ïoch_£˘i⁄_t
 
	më_£˘i⁄
;

85 #ifde‡
EPOCH_TRACKER_DEBUG


86 
uöt64_t
 
	më_magic_po°
;

88 } *
	tïoch_thªad_t
;

89 
TAILQ_HEAD
 (
ïoch_tdli°
, 
ïoch_thªad
);

91 
	sïoch_ªc‹d
 {

92 
ck_ïoch_ªc‹d_t
 
	mî_ªc‹d
;

93 vﬁ©ûê
ïoch_tdli°
 
	mî_tdli°
;

94 vﬁ©ûê
uöt32_t
 
	mî_gí
;

95 
uöt32_t
 
	mî_˝uid
;

96 } 
	t__Æig√d
(
	tEPOCH_ALIGN
Ë*
	tïoch_ªc‹d_t
;

98 
	sïoch
 {

99 
ck_ïoch
 
e_ïoch
 
__Æig√d
(
EPOCH_ALIGN
);

100 
ïoch_ªc‹d_t
 
	me_p˝u_ªc‹d
;

101 
	me_idx
;

102 
	me_Êags
;

105 
ïoch_ªc‹d_t


106 
	$ïoch_cuºec‹d
(
ïoch_t
 
ïoch
)

108  
	`zp˝u_gë_˝u
(
ïoch
->
e_p˝u_ªc‹d
, 
cur˝u
);

109 
	}
}

111 
	#INIT_CHECK
(
ïoch
) \

113 i‡(
	`__¥edi˘_Ál£
((
ïoch
Ë=
NULL
)) \

115 } 0)

	)

117 
__ölöe
 

118 
	$ïoch_íãr_¥ìm±
(
ïoch_t
 
ïoch
, 
ïoch_åackî_t
 
ë
)

120 
ïoch_ªc‹d
 *
î
;

121 
ïoch_thªad
 *
ëd
;

122 
thªad_lôe
 *
td
;

124 
	`MPASS
(
cﬁd
 || 
ïoch
 !
NULL
);

125 
	`INIT_CHECK
(
ïoch
);

126 
ëd
 = (*)
ë
;

127 
	`MPASS
(
ïoch
->
e_Êags
 & 
EPOCH_PREEMPT
);

128 #ifde‡
EPOCH_TRACKER_DEBUG


129 
ëd
->
ë_magic_¥e
 = 
EPOCH_MAGIC0
;

130 
ëd
->
ë_magic_po°
 = 
EPOCH_MAGIC1
;

132 
td
 = (
thªad_lôe
 *)
cuπhªad
;

133 
ëd
->
ë_td
 = (*)
td
;

134 
td
->
td_ïoch√°
++;

135 
	`¸ôiˇl_íãr_ß
(
td
);

136 
	`sched_pö_lôe
(
td
);

138 
td
->
td_¥e_ïoch_¥io
 =Åd->
td_¥i‹ôy
;

139 
î
 = 
	`ïoch_cuºec‹d
(
ïoch
);

140 
	`TAILQ_INSERT_TAIL
(&
î
->
î_tdli°
, 
ëd
, 
ë_lök
);

141 
	`ck_ïoch_begö
(&
î
->
î_ªc‹d
, (
ck_ïoch_£˘i⁄_t
 *)&
ëd
->
ë_£˘i⁄
);

142 
	`¸ôiˇl_exô_ß
(
td
);

143 
	}
}

145 
__ölöe
 

146 
	$ïoch_íãr
(
ïoch_t
 
ïoch
)

148 
thªad_lôe
 *
td
;

149 
ïoch_ªc‹d_t
 
î
;

151 
	`MPASS
(
cﬁd
 || 
ïoch
 !
NULL
);

152 
	`INIT_CHECK
(
ïoch
);

153 
td
 = (
thªad_lôe
 *)
cuπhªad
;

155 
td
->
td_ïoch√°
++;

156 
	`¸ôiˇl_íãr_ß
(
td
);

157 
î
 = 
	`ïoch_cuºec‹d
(
ïoch
);

158 
	`ck_ïoch_begö
(&
î
->
î_ªc‹d
, 
NULL
);

159 
	}
}

161 
__ölöe
 

162 
	$ïoch_exô_¥ìm±
(
ïoch_t
 
ïoch
, 
ïoch_åackî_t
 
ë
)

164 
ïoch_ªc‹d
 *
î
;

165 
ïoch_thªad
 *
ëd
;

166 
thªad_lôe
 *
td
;

168 
	`INIT_CHECK
(
ïoch
);

169 
td
 = (
thªad_lôe
 *)
cuπhªad
;

170 
	`¸ôiˇl_íãr_ß
(
td
);

171 
	`sched_u≈ö_lôe
(
td
);

172 
	`MPASS
(
td
->
td_ïoch√°
);

173 
td
->
td_ïoch√°
--;

174 
î
 = 
	`ïoch_cuºec‹d
(
ïoch
);

175 
	`MPASS
(
ïoch
->
e_Êags
 & 
EPOCH_PREEMPT
);

176 
ëd
 = (*)
ë
;

177 
	`MPASS
(
ëd
 !
NULL
);

178 
	`MPASS
(
ëd
->
ë_td
 =(
thªad
 *)
td
);

179 #ifde‡
EPOCH_TRACKER_DEBUG


180 
	`MPASS
(
ëd
->
ë_magic_¥e
 =
EPOCH_MAGIC0
);

181 
	`MPASS
(
ëd
->
ë_magic_po°
 =
EPOCH_MAGIC1
);

182 
ëd
->
ë_magic_¥e
 = 0;

183 
ëd
->
ë_magic_po°
 = 0;

185 
ëd
->
ë_td
 = (*)0xDEADBEEF;

186 
	`ck_ïoch_íd
(&
î
->
î_ªc‹d
,

187 (
ck_ïoch_£˘i⁄_t
 *)&
ëd
->
ë_£˘i⁄
);

188 
	`TAILQ_REMOVE
(&
î
->
î_tdli°
, 
ëd
, 
ë_lök
);

189 
î
->
î_gí
++;

190 i‡(
	`__¥edi˘_Ál£
(
td
->
td_¥e_ïoch_¥io
 !td->
td_¥i‹ôy
))

191 
	`ïoch_adju°_¥io
((
thªad
 *)
td
,Åd->
td_¥e_ïoch_¥io
);

192 
	`¸ôiˇl_exô_ß
(
td
);

193 
	}
}

195 
__ölöe
 

196 
	$ïoch_exô
(
ïoch_t
 
ïoch
)

198 
thªad_lôe
 *
td
;

199 
ïoch_ªc‹d_t
 
î
;

201 
	`INIT_CHECK
(
ïoch
);

202 
td
 = (
thªad_lôe
 *)
cuπhªad
;

203 
	`MPASS
(
td
->
td_ïoch√°
);

204 
td
->
td_ïoch√°
--;

205 
î
 = 
	`ïoch_cuºec‹d
(
ïoch
);

206 
	`ck_ïoch_íd
(&
î
->
î_ªc‹d
, 
NULL
);

207 
	`¸ôiˇl_exô_ß
(
td
);

208 
	}
}

	@/usr/include/time.h

43 #i‚de‡
_TIME_H_


44 
	#_TIME_H_


	)

46 
	~<sys/cdefs.h
>

47 
	~<sys/_nuŒ.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‡
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE < 200112 || 
__BSD_VISIBLE


55 
	#CLK_TCK
 128

	)

59 
	#CLOCKS_PER_SEC
 128

	)

61 #i‚de‡
_CLOCK_T_DECLARED


62 
__˛ock_t
 
	t˛ock_t
;

63 
	#_CLOCK_T_DECLARED


	)

66 #i‚de‡
_TIME_T_DECLARED


67 
__time_t
 
	ttime_t
;

68 
	#_TIME_T_DECLARED


	)

71 #i‚de‡
_SIZE_T_DECLARED


72 
__size_t
 
	tsize_t
;

73 
	#_SIZE_T_DECLARED


	)

76 #i‡
__POSIX_VISIBLE
 >= 199309

80 #i‚de‡
_CLOCKID_T_DECLARED


81 
__˛ockid_t
 
	t˛ockid_t
;

82 
	#_CLOCKID_T_DECLARED


	)

85 #i‚de‡
_TIMER_T_DECLARED


86 
__timî_t
 
	ttimî_t
;

87 
	#_TIMER_T_DECLARED


	)

90 
	~<sys/time•ec.h
>

93 #i‡
__POSIX_VISIBLE
 >= 200112

94 #i‚de‡
_PID_T_DECLARED


95 
__pid_t
 
	tpid_t
;

96 
	#_PID_T_DECLARED


	)

101 #i‡!
deföed
(
CLOCK_REALTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

102 
	#CLOCK_REALTIME
 0

	)

103 #ifde‡
__BSD_VISIBLE


104 
	#CLOCK_VIRTUAL
 1

	)

105 
	#CLOCK_PROF
 2

	)

107 
	#CLOCK_MONOTONIC
 4

	)

108 
	#CLOCK_UPTIME
 5

	)

109 
	#CLOCK_UPTIME_PRECISE
 7

	)

110 
	#CLOCK_UPTIME_FAST
 8

	)

111 
	#CLOCK_REALTIME_PRECISE
 9

	)

112 
	#CLOCK_REALTIME_FAST
 10

	)

113 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

114 
	#CLOCK_MONOTONIC_FAST
 12

	)

115 
	#CLOCK_SECOND
 13

	)

116 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

117 
	#CLOCK_PROCESS_CPUTIME_ID
 15

	)

120 #i‡!
deföed
(
TIMER_ABSTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

121 #i‡
__BSD_VISIBLE


122 
	#TIMER_RELTIME
 0x0

	)

124 
	#TIMER_ABSTIME
 0x1

	)

127 
	stm
 {

128 
	mtm_£c
;

129 
	mtm_mö
;

130 
	mtm_hour
;

131 
	mtm_mday
;

132 
	mtm_m⁄
;

133 
	mtm_yór
;

134 
	mtm_wday
;

135 
	mtm_yday
;

136 
	mtm_isd°
;

137 
	mtm_gmtoff
;

138 *
	mtm_z⁄e
;

141 #i‡
__POSIX_VISIBLE


142 *
tz«me
[];

145 
__BEGIN_DECLS


146 *
as˘ime
(c⁄° 
tm
 *);

147 
˛ock_t
 
˛ock
();

148 *
˘ime
(c⁄° 
time_t
 *);

149 #i‚de‡
_STANDALONE


150 
dif·ime
(
time_t
,Åime_t);

153 
tm
 *
gmtime
(c⁄° 
time_t
 *);

154 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

155 
time_t
 
mktime
(
tm
 *);

156 
size_t
 
°r·ime
(* 
__ª°ri˘
, size_t, const * __restrict,

157 c⁄° 
tm
 * 
__ª°ri˘
);

158 
time_t
 
time
(time_t *);

159 #i‡
__POSIX_VISIBLE
 >= 200112

160 
	gsigevít
;

161 
timî_¸óã
(
˛ockid_t
, 
sigevít
 *
__ª°ri˘
, 
timî_t
 *__restrict);

162 
timî_dñëe
(
timî_t
);

163 
timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

164 
timî_gëovîrun
(
timî_t
);

165 
timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *
__ª°ri˘
,

166 
ôimî•ec
 *
__ª°ri˘
);

168 #i‡
__POSIX_VISIBLE


169 
tz£t
();

172 #i‡
__POSIX_VISIBLE
 >= 199309

173 
˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

174 
˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

175 
˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

176 
«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

179 #i‡
__POSIX_VISIBLE
 >= 200112

180 
˛ock_gë˝u˛ockid
(
pid_t
, 
˛ockid_t
 *);

181 
˛ock_«no¶ìp
(
˛ockid_t
, , c⁄° 
time•ec
 *, timespec *);

184 #i‡
__POSIX_VISIBLE
 >= 199506

185 *
as˘ime_r
(c⁄° 
tm
 *, *);

186 *
˘ime_r
(c⁄° 
time_t
 *, *);

187 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

188 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

191 #i‡
__XSI_VISIBLE


192 *
°Ωtime
(c⁄° * 
__ª°ri˘
, const * __restrict,

193 
tm
 * 
__ª°ri˘
);

196 #i‡
__BSD_VISIBLE


197 *
timez⁄e
(, );

198 
tz£twÆl
();

199 
time_t
 
timñoˇl
(
tm
 * const);

200 
time_t
 
timegm
(
tm
 * const);

201 
timî_osh™dÀ_≈
(
timî_t
 
timîid
);

202 
time_t
 
time2posix
—ime_à
t
);

203 
time_t
 
posix2time
—ime_à
t
);

206 #i‡
__POSIX_VISIBLE
 >200809 || 
deföed
(
_XLOCALE_H_
)

207 
	~<xloˇÀ/_time.h
>

210 #i‡
deföed
(
__BSD_VISIBLE
Ë|| 
__ISO_C_VISIBLE
 >= 2011 || \

211 (
deföed
(
˝lu•lus
Ë&& 
	g˝lu•lus
 >= 201703)

212 
	~<sys/_time•ec.h
>

214 
	#TIME_UTC
 1

	)

215 
time•ec_gë
(
time•ec
 *
ts
, 
ba£
);

218 
	g__END_DECLS


	@/usr/include/sys/_stack.h

31 #i‚de‡
_SYS__STACK_H_


32 
	#_SYS__STACK_H_


	)

34 
	#STACK_MAX
 18

	)

36 
	s°ack
 {

37 
	mdïth
;

38 
vm_off£t_t
 
	mpcs
[
STACK_MAX
];

	@/usr/include/xlocale/_time.h

34 #i‚de‡
_LOCALE_T_DEFINED


35 
	#_LOCALE_T_DEFINED


	)

36 
_xloˇÀ
 *
	tloˇÀ_t
;

44 #i‚de‡
_XLOCALE_LOCALE1_H


45 
	#_XLOCALE_LOCALE1_H


	)

47 
size_t
 
	$°r·ime_l
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

48 c⁄° 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
Ë
	`__°r·imñike
(3, 0);

52 #ifde‡
_XLOCALE_H_


53 #i‚de‡
_XLOCALE_LOCALE2_H


54 
	#_XLOCALE_LOCALE2_H


	)

56 *
	`°Ωtime_l
(c⁄° * 
__ª°ri˘
, const * __restrict,

57 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
);

	@
1
.
1
/usr/include
773
28320
src/common/inc/cpuopsys.h
src/common/inc/nv-gpu-info.h
src/common/inc/nv-modeset-interface.h
src/common/inc/nvCpuUuid.h
src/common/inc/nvipmi.h
src/common/inc/nvkms-api-types.h
src/common/inc/nvkms-kapi.h
src/common/inc/nvlimits.h
src/common/inc/nvstatus.h
src/common/inc/nvstatuscodes.h
src/common/inc/nvtypes.h
src/common/inc/xapi-sdk.h
src/common/linuxkpi/drivers/gpu/drm/drm_crtc_helper_internal.h
src/common/linuxkpi/drivers/gpu/drm/drm_crtc_internal.h
src/common/linuxkpi/drivers/gpu/drm/drm_internal.h
src/common/linuxkpi/drivers/gpu/drm/drm_legacy.h
src/common/linuxkpi/drivers/gpu/drm/drm_os_config.h
src/common/linuxkpi/drivers/gpu/drm/drm_os_freebsd.h
src/common/linuxkpi/drivers/gpu/drm/drm_trace.h
src/common/linuxkpi/drivers/gpu/drm/drm_trace_freebsd.h
src/common/linuxkpi/dummy/include/asm/agp.h
src/common/linuxkpi/dummy/include/asm/div64.h
src/common/linuxkpi/dummy/include/asm/hypervisor.h
src/common/linuxkpi/dummy/include/asm/intel-mid.h
src/common/linuxkpi/dummy/include/asm/ioctl.h
src/common/linuxkpi/dummy/include/asm/msr-index.h
src/common/linuxkpi/dummy/include/asm/unaligned.h
src/common/linuxkpi/dummy/include/linux/agp_backend.h
src/common/linuxkpi/dummy/include/linux/bug.h
src/common/linuxkpi/dummy/include/linux/cpu.h
src/common/linuxkpi/dummy/include/linux/ctype.h
src/common/linuxkpi/dummy/include/linux/dma_remapping.h
src/common/linuxkpi/dummy/include/linux/fault-inject.h
src/common/linuxkpi/dummy/include/linux/fdtable.h
src/common/linuxkpi/dummy/include/linux/init.h
src/common/linuxkpi/dummy/include/linux/input.h
src/common/linuxkpi/dummy/include/linux/intel-iommu.h
src/common/linuxkpi/dummy/include/linux/irq_work.h
src/common/linuxkpi/dummy/include/linux/list_sort.h
src/common/linuxkpi/dummy/include/linux/media-bus-format.h
src/common/linuxkpi/dummy/include/linux/mfd/core.h
src/common/linuxkpi/dummy/include/linux/mman.h
src/common/linuxkpi/dummy/include/linux/pnp.h
src/common/linuxkpi/dummy/include/linux/proc_fs.h
src/common/linuxkpi/dummy/include/linux/resource_ext.h
src/common/linuxkpi/dummy/include/linux/sched/clock.h
src/common/linuxkpi/dummy/include/linux/sched/signal.h
src/common/linuxkpi/dummy/include/linux/shmem_fs.h
src/common/linuxkpi/dummy/include/linux/stat.h
src/common/linuxkpi/dummy/include/linux/stddef.h
src/common/linuxkpi/dummy/include/linux/suspend.h
src/common/linuxkpi/dummy/include/linux/swiotlb.h
src/common/linuxkpi/dummy/include/linux/tty.h
src/common/linuxkpi/dummy/include/linux/version.h
src/common/linuxkpi/dummy/include/linux/vt.h
src/common/linuxkpi/dummy/include/linux/zlib.h
src/common/linuxkpi/dummy/include/video/of_videomode.h
src/common/linuxkpi/gplv2/include/acpi/acpi.h
src/common/linuxkpi/gplv2/include/acpi/acpi_bus.h
src/common/linuxkpi/gplv2/include/acpi/acpi_drivers.h
src/common/linuxkpi/gplv2/include/acpi/button.h
src/common/linuxkpi/gplv2/include/acpi/video.h
src/common/linuxkpi/gplv2/include/asm/barrier.h
src/common/linuxkpi/gplv2/include/asm/cpufeature.h
src/common/linuxkpi/gplv2/include/asm/cpufeatures.h
src/common/linuxkpi/gplv2/include/asm/fpu/api.h
src/common/linuxkpi/gplv2/include/asm/iosf_mbi.h
src/common/linuxkpi/gplv2/include/asm/mtrr.h
src/common/linuxkpi/gplv2/include/asm/pgtable.h
src/common/linuxkpi/gplv2/include/asm/processor.h
src/common/linuxkpi/gplv2/include/asm/required-features.h
src/common/linuxkpi/gplv2/include/asm/set_memory.h
src/common/linuxkpi/gplv2/include/linux/acpi.h
src/common/linuxkpi/gplv2/include/linux/agp_backend.h
src/common/linuxkpi/gplv2/include/linux/anon_inodefs.h
src/common/linuxkpi/gplv2/include/linux/anon_inodes.h
src/common/linuxkpi/gplv2/include/linux/async.h
src/common/linuxkpi/gplv2/include/linux/backlight.h
src/common/linuxkpi/gplv2/include/linux/capability.h
src/common/linuxkpi/gplv2/include/linux/circ_buf.h
src/common/linuxkpi/gplv2/include/linux/compiler.h
src/common/linuxkpi/gplv2/include/linux/component.h
src/common/linuxkpi/gplv2/include/linux/console.h
src/common/linuxkpi/gplv2/include/linux/cpufreq.h
src/common/linuxkpi/gplv2/include/linux/debugfs.h
src/common/linuxkpi/gplv2/include/linux/device.h
src/common/linuxkpi/gplv2/include/linux/dma-buf.h
src/common/linuxkpi/gplv2/include/linux/dma-fence-array.h
src/common/linuxkpi/gplv2/include/linux/dma-fence.h
src/common/linuxkpi/gplv2/include/linux/dma-mapping.h
src/common/linuxkpi/gplv2/include/linux/dmi.h
src/common/linuxkpi/gplv2/include/linux/efi.h
src/common/linuxkpi/gplv2/include/linux/fb.h
src/common/linuxkpi/gplv2/include/linux/firmware.h
src/common/linuxkpi/gplv2/include/linux/frame.h
src/common/linuxkpi/gplv2/include/linux/fs.h
src/common/linuxkpi/gplv2/include/linux/fwnode.h
src/common/linuxkpi/gplv2/include/linux/gcd.h
src/common/linuxkpi/gplv2/include/linux/gpio/consumer.h
src/common/linuxkpi/gplv2/include/linux/hash.h
src/common/linuxkpi/gplv2/include/linux/hashtable.h
src/common/linuxkpi/gplv2/include/linux/hdmi.h
src/common/linuxkpi/gplv2/include/linux/highmem.h
src/common/linuxkpi/gplv2/include/linux/hwmon-sysfs.h
src/common/linuxkpi/gplv2/include/linux/hwmon.h
src/common/linuxkpi/gplv2/include/linux/i2c-algo-bit.h
src/common/linuxkpi/gplv2/include/linux/i2c.h
src/common/linuxkpi/gplv2/include/linux/interval_tree.h
src/common/linuxkpi/gplv2/include/linux/interval_tree_generic.h
src/common/linuxkpi/gplv2/include/linux/io.h
src/common/linuxkpi/gplv2/include/linux/iommu.h
src/common/linuxkpi/gplv2/include/linux/irq.h
src/common/linuxkpi/gplv2/include/linux/irqdesc.h
src/common/linuxkpi/gplv2/include/linux/irqdomain.h
src/common/linuxkpi/gplv2/include/linux/irqflags.h
src/common/linuxkpi/gplv2/include/linux/irqhandler.h
src/common/linuxkpi/gplv2/include/linux/kconfig.h
src/common/linuxkpi/gplv2/include/linux/kernel.h
src/common/linuxkpi/gplv2/include/linux/kfifo.h
src/common/linuxkpi/gplv2/include/linux/llist.h
src/common/linuxkpi/gplv2/include/linux/mem_encrypt.h
src/common/linuxkpi/gplv2/include/linux/mempolicy.h
src/common/linuxkpi/gplv2/include/linux/mmu_context.h
src/common/linuxkpi/gplv2/include/linux/mmu_notifier.h
src/common/linuxkpi/gplv2/include/linux/mod_devicetable.h
src/common/linuxkpi/gplv2/include/linux/module.h
src/common/linuxkpi/gplv2/include/linux/notifier.h
src/common/linuxkpi/gplv2/include/linux/numa.h
src/common/linuxkpi/gplv2/include/linux/of.h
src/common/linuxkpi/gplv2/include/linux/of_device.h
src/common/linuxkpi/gplv2/include/linux/oom.h
src/common/linuxkpi/gplv2/include/linux/page.h
src/common/linuxkpi/gplv2/include/linux/pagemap.h
src/common/linuxkpi/gplv2/include/linux/pagevec.h
src/common/linuxkpi/gplv2/include/linux/pci-aspm.h
src/common/linuxkpi/gplv2/include/linux/pci.h
src/common/linuxkpi/gplv2/include/linux/perf_event.h
src/common/linuxkpi/gplv2/include/linux/platform_device.h
src/common/linuxkpi/gplv2/include/linux/pm.h
src/common/linuxkpi/gplv2/include/linux/pm_domain.h
src/common/linuxkpi/gplv2/include/linux/pm_qos.h
src/common/linuxkpi/gplv2/include/linux/pm_runtime.h
src/common/linuxkpi/gplv2/include/linux/power_supply.h
src/common/linuxkpi/gplv2/include/linux/prefetch.h
src/common/linuxkpi/gplv2/include/linux/property.h
src/common/linuxkpi/gplv2/include/linux/pwm.h
src/common/linuxkpi/gplv2/include/linux/ratelimit.h
src/common/linuxkpi/gplv2/include/linux/rbtree.h
src/common/linuxkpi/gplv2/include/linux/rbtree_augmented.h
src/common/linuxkpi/gplv2/include/linux/reboot.h
src/common/linuxkpi/gplv2/include/linux/refcount.h
src/common/linuxkpi/gplv2/include/linux/relay.h
src/common/linuxkpi/gplv2/include/linux/reservation.h
src/common/linuxkpi/gplv2/include/linux/scatterlist.h
src/common/linuxkpi/gplv2/include/linux/sched.h
src/common/linuxkpi/gplv2/include/linux/sched/mm.h
src/common/linuxkpi/gplv2/include/linux/seq_file.h
src/common/linuxkpi/gplv2/include/linux/seqlock.h
src/common/linuxkpi/gplv2/include/linux/shrinker.h
src/common/linuxkpi/gplv2/include/linux/sort.h
src/common/linuxkpi/gplv2/include/linux/statfs.h
src/common/linuxkpi/gplv2/include/linux/stop_machine.h
src/common/linuxkpi/gplv2/include/linux/stringify.h
src/common/linuxkpi/gplv2/include/linux/suspend.h
src/common/linuxkpi/gplv2/include/linux/swap.h
src/common/linuxkpi/gplv2/include/linux/sync_file.h
src/common/linuxkpi/gplv2/include/linux/sysrq.h
src/common/linuxkpi/gplv2/include/linux/tracepoint.h
src/common/linuxkpi/gplv2/include/linux/typecheck.h
src/common/linuxkpi/gplv2/include/linux/uuid.h
src/common/linuxkpi/gplv2/include/linux/vga_switcheroo.h
src/common/linuxkpi/gplv2/include/linux/vgaarb.h
src/common/linuxkpi/gplv2/include/trace/define_trace.h
src/common/linuxkpi/gplv2/include/trace/events/dma_fence.h
src/common/linuxkpi/gplv2/include/uapi/linux/dma-buf.h
src/common/linuxkpi/gplv2/include/uapi/linux/fb.h
src/common/linuxkpi/gplv2/include/uapi/linux/sched/types.h
src/common/linuxkpi/gplv2/include/uapi/linux/sync_file.h
src/common/linuxkpi/gplv2/include/uapi/linux/uuid.h
src/common/linuxkpi/gplv2/include/video/display_timing.h
src/common/linuxkpi/gplv2/include/video/mipi_display.h
src/common/linuxkpi/gplv2/include/video/vga.h
src/common/linuxkpi/gplv2/include/video/videomode.h
src/common/linuxkpi/include/drm/amd_asic_type.h
src/common/linuxkpi/include/drm/ati_pcigart.h
src/common/linuxkpi/include/drm/bridge/analogix_dp.h
src/common/linuxkpi/include/drm/bridge/dw_hdmi.h
src/common/linuxkpi/include/drm/bridge/dw_mipi_dsi.h
src/common/linuxkpi/include/drm/bridge/mhl.h
src/common/linuxkpi/include/drm/drmP.h
src/common/linuxkpi/include/drm/drm_agpsupport.h
src/common/linuxkpi/include/drm/drm_atomic.h
src/common/linuxkpi/include/drm/drm_atomic_helper.h
src/common/linuxkpi/include/drm/drm_auth.h
src/common/linuxkpi/include/drm/drm_blend.h
src/common/linuxkpi/include/drm/drm_bridge.h
src/common/linuxkpi/include/drm/drm_cache.h
src/common/linuxkpi/include/drm/drm_color_mgmt.h
src/common/linuxkpi/include/drm/drm_connector.h
src/common/linuxkpi/include/drm/drm_crtc.h
src/common/linuxkpi/include/drm/drm_crtc_helper.h
src/common/linuxkpi/include/drm/drm_debugfs.h
src/common/linuxkpi/include/drm/drm_debugfs_crc.h
src/common/linuxkpi/include/drm/drm_device.h
src/common/linuxkpi/include/drm/drm_displayid.h
src/common/linuxkpi/include/drm/drm_dp_dual_mode_helper.h
src/common/linuxkpi/include/drm/drm_dp_helper.h
src/common/linuxkpi/include/drm/drm_dp_mst_helper.h
src/common/linuxkpi/include/drm/drm_drv.h
src/common/linuxkpi/include/drm/drm_edid.h
src/common/linuxkpi/include/drm/drm_encoder.h
src/common/linuxkpi/include/drm/drm_encoder_slave.h
src/common/linuxkpi/include/drm/drm_fb_cma_helper.h
src/common/linuxkpi/include/drm/drm_fb_helper.h
src/common/linuxkpi/include/drm/drm_file.h
src/common/linuxkpi/include/drm/drm_fixed.h
src/common/linuxkpi/include/drm/drm_flip_work.h
src/common/linuxkpi/include/drm/drm_fourcc.h
src/common/linuxkpi/include/drm/drm_framebuffer.h
src/common/linuxkpi/include/drm/drm_gem.h
src/common/linuxkpi/include/drm/drm_gem_cma_helper.h
src/common/linuxkpi/include/drm/drm_gem_framebuffer_helper.h
src/common/linuxkpi/include/drm/drm_global.h
src/common/linuxkpi/include/drm/drm_hashtab.h
src/common/linuxkpi/include/drm/drm_ioctl.h
src/common/linuxkpi/include/drm/drm_irq.h
src/common/linuxkpi/include/drm/drm_lease.h
src/common/linuxkpi/include/drm/drm_legacy.h
src/common/linuxkpi/include/drm/drm_mipi_dsi.h
src/common/linuxkpi/include/drm/drm_mm.h
src/common/linuxkpi/include/drm/drm_mode_config.h
src/common/linuxkpi/include/drm/drm_mode_object.h
src/common/linuxkpi/include/drm/drm_modes.h
src/common/linuxkpi/include/drm/drm_modeset_helper.h
src/common/linuxkpi/include/drm/drm_modeset_helper_vtables.h
src/common/linuxkpi/include/drm/drm_modeset_lock.h
src/common/linuxkpi/include/drm/drm_of.h
src/common/linuxkpi/include/drm/drm_panel.h
src/common/linuxkpi/include/drm/drm_pci.h
src/common/linuxkpi/include/drm/drm_pciids.h
src/common/linuxkpi/include/drm/drm_plane.h
src/common/linuxkpi/include/drm/drm_plane_helper.h
src/common/linuxkpi/include/drm/drm_prime.h
src/common/linuxkpi/include/drm/drm_print.h
src/common/linuxkpi/include/drm/drm_property.h
src/common/linuxkpi/include/drm/drm_rect.h
src/common/linuxkpi/include/drm/drm_scdc_helper.h
src/common/linuxkpi/include/drm/drm_simple_kms_helper.h
src/common/linuxkpi/include/drm/drm_syncobj.h
src/common/linuxkpi/include/drm/drm_sysfs.h
src/common/linuxkpi/include/drm/drm_utils.h
src/common/linuxkpi/include/drm/drm_vblank.h
src/common/linuxkpi/include/drm/drm_vma_manager.h
src/common/linuxkpi/include/drm/gma_drm.h
src/common/linuxkpi/include/drm/gpu_scheduler.h
src/common/linuxkpi/include/drm/gpu_scheduler_trace.h
src/common/linuxkpi/include/drm/i915_component.h
src/common/linuxkpi/include/drm/i915_drm.h
src/common/linuxkpi/include/drm/i915_pciids.h
src/common/linuxkpi/include/drm/intel-gtt.h
src/common/linuxkpi/include/drm/intel_lpe_audio.h
src/common/linuxkpi/include/drm/spsc_queue.h
src/common/linuxkpi/include/drm/tinydrm/ili9341.h
src/common/linuxkpi/include/drm/tinydrm/mipi-dbi.h
src/common/linuxkpi/include/drm/tinydrm/tinydrm-helpers.h
src/common/linuxkpi/include/drm/tinydrm/tinydrm.h
src/common/linuxkpi/include/drm/ttm/ttm_bo_api.h
src/common/linuxkpi/include/drm/ttm/ttm_bo_driver.h
src/common/linuxkpi/include/drm/ttm/ttm_debug.h
src/common/linuxkpi/include/drm/ttm/ttm_execbuf_util.h
src/common/linuxkpi/include/drm/ttm/ttm_lock.h
src/common/linuxkpi/include/drm/ttm/ttm_memory.h
src/common/linuxkpi/include/drm/ttm/ttm_module.h
src/common/linuxkpi/include/drm/ttm/ttm_object.h
src/common/linuxkpi/include/drm/ttm/ttm_page_alloc.h
src/common/linuxkpi/include/drm/ttm/ttm_placement.h
src/common/linuxkpi/include/uapi/drm/amdgpu_drm.h
src/common/linuxkpi/include/uapi/drm/armada_drm.h
src/common/linuxkpi/include/uapi/drm/drm.h
src/common/linuxkpi/include/uapi/drm/drm_fourcc.h
src/common/linuxkpi/include/uapi/drm/drm_mode.h
src/common/linuxkpi/include/uapi/drm/drm_sarea.h
src/common/linuxkpi/include/uapi/drm/etnaviv_drm.h
src/common/linuxkpi/include/uapi/drm/exynos_drm.h
src/common/linuxkpi/include/uapi/drm/i810_drm.h
src/common/linuxkpi/include/uapi/drm/i915_drm.h
src/common/linuxkpi/include/uapi/drm/mga_drm.h
src/common/linuxkpi/include/uapi/drm/msm_drm.h
src/common/linuxkpi/include/uapi/drm/nouveau_drm.h
src/common/linuxkpi/include/uapi/drm/omap_drm.h
src/common/linuxkpi/include/uapi/drm/qxl_drm.h
src/common/linuxkpi/include/uapi/drm/r128_drm.h
src/common/linuxkpi/include/uapi/drm/radeon_drm.h
src/common/linuxkpi/include/uapi/drm/savage_drm.h
src/common/linuxkpi/include/uapi/drm/sis_drm.h
src/common/linuxkpi/include/uapi/drm/tegra_drm.h
src/common/linuxkpi/include/uapi/drm/vc4_drm.h
src/common/linuxkpi/include/uapi/drm/vgem_drm.h
src/common/linuxkpi/include/uapi/drm/via_drm.h
src/common/linuxkpi/include/uapi/drm/virtgpu_drm.h
src/common/linuxkpi/include/uapi/drm/vmwgfx_drm.h
src/common/linuxkpi/include/uapi/linux/kfd_ioctl.h
src/nvidia-drm/bus_if.h
src/nvidia-drm/device_if.h
src/nvidia-drm/machine/_align.h
src/nvidia-drm/machine/_bus.h
src/nvidia-drm/machine/_inttypes.h
src/nvidia-drm/machine/_limits.h
src/nvidia-drm/machine/_stdint.h
src/nvidia-drm/machine/_types.h
src/nvidia-drm/machine/acpica_machdep.h
src/nvidia-drm/machine/apm_bios.h
src/nvidia-drm/machine/asm.h
src/nvidia-drm/machine/asmacros.h
src/nvidia-drm/machine/atomic.h
src/nvidia-drm/machine/bus.h
src/nvidia-drm/machine/bus_dma.h
src/nvidia-drm/machine/clock.h
src/nvidia-drm/machine/counter.h
src/nvidia-drm/machine/cpu.h
src/nvidia-drm/machine/cpufunc.h
src/nvidia-drm/machine/cputypes.h
src/nvidia-drm/machine/db_machdep.h
src/nvidia-drm/machine/dump.h
src/nvidia-drm/machine/efi.h
src/nvidia-drm/machine/elf.h
src/nvidia-drm/machine/endian.h
src/nvidia-drm/machine/exec.h
src/nvidia-drm/machine/fdt.h
src/nvidia-drm/machine/float.h
src/nvidia-drm/machine/floatingpoint.h
src/nvidia-drm/machine/fpu.h
src/nvidia-drm/machine/frame.h
src/nvidia-drm/machine/gdb_machdep.h
src/nvidia-drm/machine/ieeefp.h
src/nvidia-drm/machine/in_cksum.h
src/nvidia-drm/machine/intr_machdep.h
src/nvidia-drm/machine/iodev.h
src/nvidia-drm/machine/kdb.h
src/nvidia-drm/machine/limits.h
src/nvidia-drm/machine/md_var.h
src/nvidia-drm/machine/memdev.h
src/nvidia-drm/machine/metadata.h
src/nvidia-drm/machine/minidump.h
src/nvidia-drm/machine/mp_watchdog.h
src/nvidia-drm/machine/nexusvar.h
src/nvidia-drm/machine/npx.h
src/nvidia-drm/machine/ofw_machdep.h
src/nvidia-drm/machine/param.h
src/nvidia-drm/machine/pc/bios.h
src/nvidia-drm/machine/pc/display.h
src/nvidia-drm/machine/pcb.h
src/nvidia-drm/machine/pci_cfgreg.h
src/nvidia-drm/machine/pcpu.h
src/nvidia-drm/machine/pmap.h
src/nvidia-drm/machine/pmc_mdep.h
src/nvidia-drm/machine/ppireg.h
src/nvidia-drm/machine/proc.h
src/nvidia-drm/machine/profile.h
src/nvidia-drm/machine/psl.h
src/nvidia-drm/machine/ptrace.h
src/nvidia-drm/machine/pvclock.h
src/nvidia-drm/machine/reg.h
src/nvidia-drm/machine/reloc.h
src/nvidia-drm/machine/resource.h
src/nvidia-drm/machine/runq.h
src/nvidia-drm/machine/segments.h
src/nvidia-drm/machine/setjmp.h
src/nvidia-drm/machine/sf_buf.h
src/nvidia-drm/machine/sgx.h
src/nvidia-drm/machine/sgxreg.h
src/nvidia-drm/machine/sigframe.h
src/nvidia-drm/machine/signal.h
src/nvidia-drm/machine/smp.h
src/nvidia-drm/machine/specialreg.h
src/nvidia-drm/machine/stack.h
src/nvidia-drm/machine/stdarg.h
src/nvidia-drm/machine/sysarch.h
src/nvidia-drm/machine/timerreg.h
src/nvidia-drm/machine/trap.h
src/nvidia-drm/machine/tss.h
src/nvidia-drm/machine/ucontext.h
src/nvidia-drm/machine/vdso.h
src/nvidia-drm/machine/vm.h
src/nvidia-drm/machine/vmm.h
src/nvidia-drm/machine/vmm_dev.h
src/nvidia-drm/machine/vmm_instruction_emul.h
src/nvidia-drm/machine/vmparam.h
src/nvidia-drm/machine/xen/hypercall.h
src/nvidia-drm/machine/xen/synch_bitops.h
src/nvidia-drm/machine/xen/xen-os.h
src/nvidia-drm/nv-mm.h
src/nvidia-drm/nvidia-dma-fence-helper.h
src/nvidia-drm/nvidia-drm-conftest.h
src/nvidia-drm/nvidia-drm-connector.c
src/nvidia-drm/nvidia-drm-connector.h
src/nvidia-drm/nvidia-drm-crtc.c
src/nvidia-drm/nvidia-drm-crtc.h
src/nvidia-drm/nvidia-drm-drv.c
src/nvidia-drm/nvidia-drm-drv.h
src/nvidia-drm/nvidia-drm-encoder.c
src/nvidia-drm/nvidia-drm-encoder.h
src/nvidia-drm/nvidia-drm-fb.c
src/nvidia-drm/nvidia-drm-fb.h
src/nvidia-drm/nvidia-drm-freebsd-lkpi.c
src/nvidia-drm/nvidia-drm-gem-nvkms-memory.c
src/nvidia-drm/nvidia-drm-gem-nvkms-memory.h
src/nvidia-drm/nvidia-drm-gem-user-memory.c
src/nvidia-drm/nvidia-drm-gem-user-memory.h
src/nvidia-drm/nvidia-drm-gem.c
src/nvidia-drm/nvidia-drm-gem.h
src/nvidia-drm/nvidia-drm-helper.c
src/nvidia-drm/nvidia-drm-helper.h
src/nvidia-drm/nvidia-drm-ioctl.h
src/nvidia-drm/nvidia-drm-linux.c
src/nvidia-drm/nvidia-drm-modeset.c
src/nvidia-drm/nvidia-drm-modeset.h
src/nvidia-drm/nvidia-drm-os-interface.h
src/nvidia-drm/nvidia-drm-prime-fence.c
src/nvidia-drm/nvidia-drm-prime-fence.h
src/nvidia-drm/nvidia-drm-priv.h
src/nvidia-drm/nvidia-drm-utils.c
src/nvidia-drm/nvidia-drm-utils.h
src/nvidia-drm/nvidia-drm.c
src/nvidia-drm/nvidia-drm.h
src/nvidia-drm/opt_compat.h
src/nvidia-drm/opt_drm.h
src/nvidia-drm/opt_stack.h
src/nvidia-drm/opt_syscons.h
src/nvidia-drm/opt_usb.h
src/nvidia-drm/pci_if.h
src/nvidia-drm/usb_if.h
src/nvidia-drm/vnode_if.h
src/nvidia-drm/vnode_if_newproto.h
src/nvidia-drm/vnode_if_typedef.h
src/nvidia-drm/x86/_align.h
src/nvidia-drm/x86/_inttypes.h
src/nvidia-drm/x86/_limits.h
src/nvidia-drm/x86/_stdint.h
src/nvidia-drm/x86/_types.h
src/nvidia-drm/x86/acpica_machdep.h
src/nvidia-drm/x86/apicreg.h
src/nvidia-drm/x86/apicvar.h
src/nvidia-drm/x86/apm_bios.h
src/nvidia-drm/x86/bus.h
src/nvidia-drm/x86/bus_dma.h
src/nvidia-drm/x86/busdma_impl.h
src/nvidia-drm/x86/cputypes.h
src/nvidia-drm/x86/dump.h
src/nvidia-drm/x86/elf.h
src/nvidia-drm/x86/endian.h
src/nvidia-drm/x86/fdt.h
src/nvidia-drm/x86/float.h
src/nvidia-drm/x86/fpu.h
src/nvidia-drm/x86/frame.h
src/nvidia-drm/x86/ifunc.h
src/nvidia-drm/x86/init.h
src/nvidia-drm/x86/intr_machdep.h
src/nvidia-drm/x86/legacyvar.h
src/nvidia-drm/x86/mca.h
src/nvidia-drm/x86/metadata.h
src/nvidia-drm/x86/mptable.h
src/nvidia-drm/x86/ofw_machdep.h
src/nvidia-drm/x86/pci_cfgreg.h
src/nvidia-drm/x86/psl.h
src/nvidia-drm/x86/ptrace.h
src/nvidia-drm/x86/pvclock.h
src/nvidia-drm/x86/reg.h
src/nvidia-drm/x86/segments.h
src/nvidia-drm/x86/setjmp.h
src/nvidia-drm/x86/sigframe.h
src/nvidia-drm/x86/signal.h
src/nvidia-drm/x86/specialreg.h
src/nvidia-drm/x86/stack.h
src/nvidia-drm/x86/stdarg.h
src/nvidia-drm/x86/sysarch.h
src/nvidia-drm/x86/trap.h
src/nvidia-drm/x86/ucode.h
src/nvidia-drm/x86/ucontext.h
src/nvidia-drm/x86/vdso.h
src/nvidia-drm/x86/vmware.h
src/nvidia-drm/x86/x86_smp.h
src/nvidia-drm/x86/x86_var.h
src/nvidia-drm/x86/xen/xen-os.h
src/nvidia-modeset/nvidia-modeset-freebsd.c
src/nvidia-modeset/nvidia-modeset-os-interface.h
src/nvidia-modeset/nvkms-ioctl.h
src/nvidia-modeset/nvkms.h
src/nvidia/acpi_if.h
src/nvidia/bus_if.h
src/nvidia/device_if.h
src/nvidia/export_nvswitch.h
src/nvidia/freebsd_nvswitch.c
src/nvidia/ioctl_nvswitch.h
src/nvidia/nv-freebsd.h
src/nvidia/nv-kernel-interface-api.h
src/nvidia/nv-misc.h
src/nvidia/nv-reg.h
src/nvidia/nv.h
src/nvidia/nvidia_acpi.c
src/nvidia/nvidia_ctl.c
src/nvidia/nvidia_dev.c
src/nvidia/nvidia_i2c.c
src/nvidia/nvidia_linux.c
src/nvidia/nvidia_modeset_interface.c
src/nvidia/nvidia_os.c
src/nvidia/nvidia_os_pci.c
src/nvidia/nvidia_os_registry.c
src/nvidia/nvidia_pci.c
src/nvidia/nvidia_subr.c
src/nvidia/nvidia_sysctl.c
src/nvidia/nvlink_common.h
src/nvidia/nvlink_errors.h
src/nvidia/nvlink_freebsd.c
src/nvidia/opt_acpi.h
src/nvidia/os-interface.h
src/nvidia/pci_if.h
src/nvidia/vnode_if.h
src/nvidia/vnode_if_newproto.h
src/nvidia/vnode_if_typedef.h
/usr/include/dev/hwpmc/hwpmc_amd.h
/usr/include/dev/hwpmc/hwpmc_core.h
/usr/include/dev/hwpmc/hwpmc_tsc.h
/usr/include/dev/hwpmc/hwpmc_uncore.h
/usr/include/dev/ic/i8253reg.h
/usr/include/dev/pci/pcireg.h
/usr/include/fs/devfs/devfs_int.h
/usr/include/machine/_align.h
/usr/include/machine/_bus.h
/usr/include/machine/_limits.h
/usr/include/machine/_types.h
/usr/include/machine/bus.h
/usr/include/machine/bus_dma.h
/usr/include/machine/clock.h
/usr/include/machine/cpu.h
/usr/include/machine/cpufunc.h
/usr/include/machine/fpu.h
/usr/include/machine/frame.h
/usr/include/machine/ieeefp.h
/usr/include/machine/intr_machdep.h
/usr/include/machine/npx.h
/usr/include/machine/pcb.h
/usr/include/machine/psl.h
/usr/include/machine/reg.h
/usr/include/machine/resource.h
/usr/include/machine/segments.h
/usr/include/machine/specialreg.h
/usr/include/machine/sysarch.h
/usr/include/machine/trap.h
/usr/include/net/if.h
/usr/include/net/if_var.h
/usr/include/netinet/in.h
/usr/include/netinet/in_var.h
/usr/include/stdarg.h
/usr/include/stddef.h
/usr/include/sys/_cpuset.h
/usr/include/sys/_lock.h
/usr/include/sys/_mutex.h
/usr/include/sys/_null.h
/usr/include/sys/_sigset.h
/usr/include/sys/_stdarg.h
/usr/include/sys/_types.h
/usr/include/sys/agpio.h
/usr/include/sys/atomic_common.h
/usr/include/sys/bus.h
/usr/include/sys/bus_dma.h
/usr/include/sys/capability.h
/usr/include/sys/caprights.h
/usr/include/sys/capsicum.h
/usr/include/sys/cdefs.h
/usr/include/sys/condvar.h
/usr/include/sys/conf.h
/usr/include/sys/consio.h
/usr/include/sys/ctype.h
/usr/include/sys/elf32.h
/usr/include/sys/elf64.h
/usr/include/sys/elf_generic.h
/usr/include/sys/endian.h
/usr/include/sys/errno.h
/usr/include/sys/fbio.h
/usr/include/sys/fcntl.h
/usr/include/sys/file.h
/usr/include/sys/filedesc.h
/usr/include/sys/filio.h
/usr/include/sys/hash.h
/usr/include/sys/ioccom.h
/usr/include/sys/kdb.h
/usr/include/sys/kernel.h
/usr/include/sys/ktr.h
/usr/include/sys/libkern.h
/usr/include/sys/limits.h
/usr/include/sys/linker.h
/usr/include/sys/lock.h
/usr/include/sys/malloc.h
/usr/include/sys/memrange.h
/usr/include/sys/mman.h
/usr/include/sys/module.h
/usr/include/sys/mutex.h
/usr/include/sys/param.h
/usr/include/sys/pciio.h
/usr/include/sys/pcpu.h
/usr/include/sys/poll.h
/usr/include/sys/priv.h
/usr/include/sys/proc.h
/usr/include/sys/queue.h
/usr/include/sys/resourcevar.h
/usr/include/sys/rman.h
/usr/include/sys/rwlock.h
/usr/include/sys/sbuf.h
/usr/include/sys/sched.h
/usr/include/sys/sdt.h
/usr/include/sys/selinfo.h
/usr/include/sys/sglist.h
/usr/include/sys/signalvar.h
/usr/include/sys/smp.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/sx.h
/usr/include/sys/syscall.h
/usr/include/sys/sysctl.h
/usr/include/sys/sysent.h
/usr/include/sys/syslog.h
/usr/include/sys/sysproto.h
/usr/include/sys/systm.h
/usr/include/sys/taskqueue.h
/usr/include/sys/timex.h
/usr/include/sys/tree.h
/usr/include/sys/tslog.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/vmmeter.h
/usr/include/sys/vnode.h
/usr/include/vm/_vm_radix.h
/usr/include/vm/pmap.h
/usr/include/vm/uma.h
/usr/include/vm/vm.h
/usr/include/vm/vm_extern.h
/usr/include/vm/vm_kern.h
/usr/include/vm/vm_map.h
/usr/include/vm/vm_object.h
/usr/include/vm/vm_page.h
/usr/include/vm/vm_pageout.h
/usr/include/vm/vm_pager.h
/usr/include/vm/vm_param.h
/usr/include/vm/vm_phys.h
/usr/include/x86/_align.h
/usr/include/x86/_inttypes.h
/usr/include/x86/_limits.h
/usr/include/x86/_stdint.h
/usr/include/x86/_types.h
/usr/include/x86/acpica_machdep.h
/usr/include/x86/apicvar.h
/usr/include/x86/apm_bios.h
/usr/include/x86/bus.h
/usr/include/x86/bus_dma.h
/usr/include/x86/busdma_impl.h
/usr/include/x86/cputypes.h
/usr/include/x86/dump.h
/usr/include/x86/elf.h
/usr/include/x86/endian.h
/usr/include/x86/fdt.h
/usr/include/x86/float.h
/usr/include/x86/fpu.h
/usr/include/x86/frame.h
/usr/include/x86/intr_machdep.h
/usr/include/x86/metadata.h
/usr/include/x86/ofw_machdep.h
/usr/include/x86/pci_cfgreg.h
/usr/include/x86/psl.h
/usr/include/x86/ptrace.h
/usr/include/x86/pvclock.h
/usr/include/x86/reg.h
/usr/include/x86/segments.h
/usr/include/x86/setjmp.h
/usr/include/x86/sigframe.h
/usr/include/x86/signal.h
/usr/include/x86/specialreg.h
/usr/include/x86/stack.h
/usr/include/x86/stdarg.h
/usr/include/x86/sysarch.h
/usr/include/x86/trap.h
/usr/include/x86/ucontext.h
/usr/include/x86/vdso.h
/usr/include/x86/x86_smp.h
/usr/include/x86/x86_var.h
/usr/include/bsm/audit.h
/usr/include/bsm/audit_kevents.h
/usr/include/machine/atomic.h
/usr/include/machine/elf.h
/usr/include/machine/endian.h
/usr/include/machine/param.h
/usr/include/machine/pcpu.h
/usr/include/machine/pmap.h
/usr/include/machine/proc.h
/usr/include/machine/setjmp.h
/usr/include/machine/vm.h
/usr/include/machine/vmparam.h
/usr/include/net/altq/if_altq.h
/usr/include/net/ifq.h
/usr/include/net/vnet.h
/usr/include/netinet6/in6.h
/usr/include/netinet6/in6_var.h
/usr/include/stdbool.h
/usr/include/sys/_bitset.h
/usr/include/sys/_bus_dma.h
/usr/include/sys/_callout.h
/usr/include/sys/_domainset.h
/usr/include/sys/_ffcounter.h
/usr/include/sys/_iovec.h
/usr/include/sys/_pctrie.h
/usr/include/sys/_pthreadtypes.h
/usr/include/sys/_rmlock.h
/usr/include/sys/_rwlock.h
/usr/include/sys/_semaphore.h
/usr/include/sys/_sockaddr_storage.h
/usr/include/sys/_stdint.h
/usr/include/sys/_sx.h
/usr/include/sys/_task.h
/usr/include/sys/_timespec.h
/usr/include/sys/_uio.h
/usr/include/sys/acl.h
/usr/include/sys/buf_ring.h
/usr/include/sys/bufobj.h
/usr/include/sys/callout.h
/usr/include/sys/ck.h
/usr/include/sys/counter.h
/usr/include/sys/cpuset.h
/usr/include/sys/domainset.h
/usr/include/sys/elf_common.h
/usr/include/sys/epoch.h
/usr/include/sys/event.h
/usr/include/sys/eventhandler.h
/usr/include/sys/fnv_hash.h
/usr/include/sys/kobj.h
/usr/include/sys/kpilite.h
/usr/include/sys/ktr_class.h
/usr/include/sys/linker_set.h
/usr/include/sys/lock_profile.h
/usr/include/sys/lockmgr.h
/usr/include/sys/lockstat.h
/usr/include/sys/mbuf.h
/usr/include/sys/osd.h
/usr/include/sys/priority.h
/usr/include/sys/rangelock.h
/usr/include/sys/refcount.h
/usr/include/sys/resource.h
/usr/include/sys/rtprio.h
/usr/include/sys/runq.h
/usr/include/sys/select.h
/usr/include/sys/seq.h
/usr/include/sys/sigio.h
/usr/include/sys/signal.h
/usr/include/sys/stdint.h
/usr/include/sys/syslimits.h
/usr/include/sys/time.h
/usr/include/sys/timespec.h
/usr/include/sys/ucontext.h
/usr/include/sys/ucred.h
/usr/include/sys/unistd.h
/usr/include/sys/wait.h
/usr/include/machine/_stdint.h
/usr/include/machine/counter.h
/usr/include/machine/runq.h
/usr/include/machine/signal.h
/usr/include/machine/ucontext.h
/usr/include/sys/_lockmgr.h
/usr/include/sys/_timeval.h
/usr/include/sys/_ucontext.h
/usr/include/sys/bitset.h
/usr/include/sys/epoch_private.h
/usr/include/time.h
/usr/include/sys/_stack.h
/usr/include/xlocale/_time.h
